{"version":3,"file":"index.umd.js","sources":["../src/Handles/Handle.js","../src/Handles/BaseLinearMovementHandle.js","../src/UndoRedo/UndoRedoManager.js","../src/UndoRedo/Change.js","../src/UndoRedo/Changes/ParameterValueChange.js","../src/Handles/Shaders/HandleShader.js","../src/Handles/transformVertices.js","../src/Handles/LinearMovementHandle.js","../src/Handles/BaseAxialRotationHandle.js","../src/Handles/AxialRotationHandle.js","../src/Handles/PlanarMovementHandle.js","../src/Handles/XfoPlanarMovementHandle.js","../src/Handles/XfoHandle.js","../src/SelectionGroupXfoOperator.js","../src/SelectionGroup.js","../src/UndoRedo/Changes/SelectionChange.js","../src/UndoRedo/Changes/SelectionVisibilityChange.js","../src/SelectionManager.js","../src/UndoRedo/Changes/TreeItemAddChange.js","../src/UndoRedo/Changes/TreeItemMoveChange.js","../src/UndoRedo/Changes/TreeItemsRemoveChange.js","../src/Tools/SelectionTool.js","../src/Tools/VRTools/dom-to-image.js","../src/Tools/VRTools/VRControllerUI.js","../src/Tools/VRTools/VRUITool.js","../src/Tools/VRTools/VRHoldObjectsTool.js","../src/Tools/BaseCreateTool.js","../src/Tools/CreateTools/CreateGeomTool.js","../src/Tools/CreateTools/Change/CreateGeomChange.js","../src/Tools/CreateTools/Change/CreateLineChange.js","../src/Tools/CreateTools/CreateLineTool.js","../src/Tools/CreateTools/Change/CreateConeChange.js","../src/Tools/CreateTools/Change/CreateCircleChange.js","../src/Tools/CreateTools/Change/CreateRectChange.js","../src/Tools/CreateTools/Change/CreateFreehandLineChange.js","../src/Tools/CreateTools/Change/CreateSphereChange.js","../src/Tools/CreateTools/Change/CreateCuboidChange.js","../src/Tools/ToolManager.js","../src/Handles/SliderHandle.js","../src/Handles/ArcSlider.js","../src/Measurement/MeasureDistance.js","../src/Measurement/MeasureAngle.js","../src/Measurement/MeasurementChange.js","../src/Measurement/MeasureDistanceTool.js","../src/Measurement/MeasureCenterDistancesTool.js","../src/Measurement/MeasureRadiusTool.js","../src/Measurement/MeasureAngleTool.js","../src/Tools/CreateTools/CreateCircleTool.js","../src/Tools/CreateTools/CreateConeTool.js","../src/Tools/CreateTools/CreateCuboidTool.js","../src/Tools/CreateTools/CreateFreehandLineTool.js","../src/Tools/CreateTools/CreateRectTool.js","../src/Tools/CreateTools/CreateSphereTool.js","../src/Handles/ScreenSpaceMovementHandle.js"],"sourcesContent":["import { TreeItem, Ray, ColorParameter, Color } from '@zeainc/zea-engine'\r\n\r\n/**\r\n * A Handle is an UI widget that lives in the scene, it translates a series of pointer events into a higher level interaction.\r\n *\r\n * **Parameters**\r\n * * **Color(`ColorParameter`):** Specifies the color of the handle.\r\n * * **HighlightColor(`ColorParameter`):** Specifies the highlight color of the handle.\r\n *\r\n * @extends TreeItem\r\n */\r\nclass Handle extends TreeItem {\r\n  /**\r\n   * Creates an instance of Handle.\r\n   *\r\n   * @param {string} name - The name value.\r\n   */\r\n  constructor(name) {\r\n    super(name)\r\n\r\n    this.captured = false\r\n    this.colorParam = this.addParameter(new ColorParameter('Color', new Color()))\r\n    this.highlightColorParam = this.addParameter(new ColorParameter('HighlightColor', new Color(1, 1, 1)))\r\n  }\r\n\r\n  /**\r\n   * Applies a special shinning shader to the handle to illustrate interaction with it.\r\n   */\r\n  highlight() {\r\n    this.emit('highlight')\r\n  }\r\n\r\n  /**\r\n   * Removes the shining shader from the handle.\r\n   */\r\n  unhighlight() {\r\n    this.emit('unhighlight')\r\n  }\r\n\r\n  /**\r\n   * Returns the manipulation plane of the handle, denoting a start and a direction.\r\n   *\r\n   * @return {Ray} The return value.\r\n   */\r\n  getManipulationPlane() {\r\n    const xfo = this.getParameter('GlobalXfo').getValue()\r\n    return new Ray(xfo.tr, xfo.ori.getZaxis())\r\n  }\r\n\r\n  // ///////////////////////////////////\r\n  // Mouse events\r\n\r\n  /**\r\n   * Event fired when a pointing device is initially moved within the space of the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onPointerEnter(event) {\r\n    this.highlight()\r\n  }\r\n\r\n  /**\r\n   * Event fired when a pointing device moves outside of the space of the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onPointerLeave(event) {\r\n    this.unhighlight()\r\n  }\r\n\r\n  /**\r\n   * Event fired when a pointing device button is pressed while the pointer is over the handle element.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onPointerDown(event) {\r\n    event.setCapture(this)\r\n    event.stopPropagation()\r\n    this.captured = true\r\n\r\n    if (event.changedTouches) {\r\n      this.highlight()\r\n    }\r\n\r\n    if (event.viewport) this.handlePointerDown(event)\r\n    else if (event.vrviewport) this.onVRControllerButtonDown(event)\r\n  }\r\n\r\n  /**\r\n   * Event fired when a pointing device is moved while the cursor's hotspot is over the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onPointerMove(event) {\r\n    if (this.captured) {\r\n      event.stopPropagation()\r\n      if (event.viewport) this.handlePointerMove(event)\r\n      else if (event.vrviewport) this.onVRPoseChanged(event)\r\n    }\r\n\r\n    event.preventDefault()\r\n  }\r\n\r\n  /**\r\n   * Event fired when a pointing device button is released while the pointer is over the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onPointerUp(event) {\r\n    if (this.captured) {\r\n      event.releaseCapture()\r\n      event.stopPropagation()\r\n      this.captured = false\r\n      if (event.changedTouches) {\r\n        this.unhighlight()\r\n      }\r\n      if (event.viewport) this.handlePointerUp(event)\r\n      else if (event.vrviewport) this.onVRControllerButtonUp(event)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event fired when the user rotates the pointing device wheel over the handle.\r\n   *\r\n   * @param {MouseEvent} event - The event param.\r\n   */\r\n  onWheel(event) {}\r\n\r\n  /**\r\n   * Handles mouse down interaction with the handle.\r\n   *\r\n   * @param {MouseEvent} event - The event param.\r\n   * @return {boolean} - The return value.\r\n   */\r\n  handlePointerDown(event) {\r\n    this.gizmoRay = this.getManipulationPlane()\r\n    const ray = event.pointerRay\r\n    const dist = ray.intersectRayPlane(this.gizmoRay)\r\n    event.grabPos = ray.pointAtDist(dist)\r\n    this.onDragStart(event)\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Handles mouse move interaction with the handle.\r\n   *\r\n   * @param {MouseEvent} event - The event param\r\n   * @return { boolean } - The return value\r\n   */\r\n  handlePointerMove(event) {\r\n    const ray = event.pointerRay\r\n    const dist = ray.intersectRayPlane(this.gizmoRay)\r\n    event.holdPos = ray.pointAtDist(dist)\r\n    this.onDrag(event)\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Handles mouse up interaction with the handle.\r\n   *\r\n   * @param {MouseEvent} event - The event param.\r\n   * @return {boolean} - The return value.\r\n   */\r\n  handlePointerUp(event) {\r\n    const ray = event.pointerRay\r\n    if (ray) {\r\n      const dist = ray.intersectRayPlane(this.gizmoRay)\r\n      event.releasePos = ray.pointAtDist(dist)\r\n    }\r\n\r\n    this.onDragEnd(event)\r\n    return true\r\n  }\r\n\r\n  // ///////////////////////////////////\r\n  // VRController events\r\n\r\n  /**\r\n   * Event fired when a VR controller button is pressed over the handle.\r\n   *\r\n   * @param {object} event - The event param.\r\n   * @return {boolean} The return value.\r\n   */\r\n  onVRControllerButtonDown(event) {\r\n    this.activeController = event.controller\r\n    const xfo = this.activeController.getTipXfo().clone()\r\n\r\n    const gizmoRay = this.getManipulationPlane()\r\n    const offset = xfo.tr.subtract(gizmoRay.start)\r\n    const grabPos = xfo.tr.subtract(gizmoRay.dir.scale(offset.dot(gizmoRay.dir)))\r\n    event.grabPos = grabPos\r\n    this.onDragStart(event)\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * The onVRPoseChanged method.\r\n   *\r\n   * @param {object} event - The event param.\r\n   * @return {boolean} - The return value.\r\n   */\r\n  onVRPoseChanged(event) {\r\n    if (this.activeController) {\r\n      const xfo = this.activeController.getTipXfo()\r\n      const gizmoRay = this.getManipulationPlane()\r\n      const offset = xfo.tr.subtract(gizmoRay.start)\r\n      const holdPos = xfo.tr.subtract(gizmoRay.dir.scale(offset.dot(gizmoRay.dir)))\r\n      event.holdPos = holdPos\r\n      this.onDrag(event)\r\n      return true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event fired when a VR controller button is released over the handle.\r\n   *\r\n   * @param {object} event - The event param.\r\n   * @return {boolean} - The return value.\r\n   */\r\n  onVRControllerButtonUp(event) {\r\n    if (this.activeController == event.controller) {\r\n      const xfo = this.activeController.getTipXfo()\r\n      this.onDragEnd(event, xfo.tr)\r\n      this.activeController = undefined\r\n      return true\r\n    }\r\n  }\r\n\r\n  // ///////////////////////////////////\r\n  // Interaction events\r\n\r\n  /**\r\n   * Handles the initially drag of the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onDragStart(event) {\r\n    console.warn('@Handle#onDragStart - Implement me!', event)\r\n  }\r\n\r\n  /**\r\n   * Handles drag action of the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onDrag(event) {\r\n    console.warn('@Handle#onDrag - Implement me!', event)\r\n  }\r\n\r\n  /**\r\n   * Handles the end of dragging the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onDragEnd(event) {\r\n    console.warn('@Handle#onDragEnd - Implement me!', event)\r\n  }\r\n}\r\n\r\nexport default Handle\r\nexport { Handle }\r\n","import Handle from './Handle'\r\n\r\n/**\r\n * Class representing a base linear movement scene widget.\r\n *\r\n * @extends Handle\r\n */\r\nclass BaseLinearMovementHandle extends Handle {\r\n  /**\r\n   * Create base linear movement scene widget.\r\n   * @param {string} name - The name value.\r\n   */\r\n  constructor(name) {\r\n    super(name)\r\n  }\r\n\r\n  // ///////////////////////////////////\r\n  // Mouse events\r\n\r\n  /**\r\n   * Handles mouse down interaction with the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   * @return {boolean} - The return value.\r\n   */\r\n  handlePointerDown(event) {\r\n    this.gizmoRay = this.getManipulationPlane()\r\n    const ray = event.pointerRay\r\n    this.grabDist = ray.intersectRayVector(this.gizmoRay)[1]\r\n    const grabPos = this.gizmoRay.pointAtDist(this.grabDist)\r\n    event.grabDist = this.grabDist\r\n    event.grabPos = grabPos\r\n    this.onDragStart(event)\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Handles mouse move interaction with the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param\r\n   */\r\n  handlePointerMove(event) {\r\n    const ray = event.pointerRay\r\n    const dist = ray.intersectRayVector(this.gizmoRay)[1]\r\n    const holdPos = this.gizmoRay.pointAtDist(dist)\r\n    event.holdDist = dist\r\n    event.holdPos = holdPos\r\n    event.value = dist\r\n    event.delta = dist - this.grabDist\r\n    this.onDrag(event)\r\n  }\r\n\r\n  /**\r\n   * Handles mouse up interaction with the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   * @return {boolean} - The return value.\r\n   */\r\n  handlePointerUp(event) {\r\n    const ray = event.pointerRay\r\n    if (ray) {\r\n      const dist = ray.intersectRayVector(this.gizmoRay)[1]\r\n      const releasePos = this.gizmoRay.pointAtDist(dist)\r\n      event.releasePos = releasePos\r\n    }\r\n\r\n    this.onDragEnd(event)\r\n    return true\r\n  }\r\n\r\n  // ///////////////////////////////////\r\n  // VRController events\r\n\r\n  /**\r\n   * Event fired when a VR controller button is pressed over the handle.\r\n   *\r\n   * @param {object} event - The event param.\r\n   * @return {boolean} The return value.\r\n   */\r\n  onVRControllerButtonDown(event) {\r\n    this.gizmoRay = this.getManipulationPlane()\r\n\r\n    this.activeController = event.controller\r\n    const xfo = this.activeController.getTipXfo()\r\n    this.grabDist = xfo.tr.subtract(this.gizmoRay.start).dot(this.gizmoRay.dir)\r\n    const grabPos = this.gizmoRay.start.add(this.gizmoRay.dir.scale(this.grabDist))\r\n    event.grabPos = grabPos\r\n    this.onDragStart(event)\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * The onVRPoseChanged method.\r\n   *\r\n   * @param {object} event - The event param.\r\n   * @return {boolean} The return value.\r\n   */\r\n  onVRPoseChanged(event) {\r\n    const xfo = this.activeController.getTipXfo()\r\n    const dist = xfo.tr.subtract(this.gizmoRay.start).dot(this.gizmoRay.dir)\r\n    const holdPos = this.gizmoRay.start.add(this.gizmoRay.dir.scale(dist))\r\n    event.value = dist\r\n    event.holdPos = holdPos\r\n    event.delta = dist - this.grabDist\r\n    this.onDrag(event)\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Event fired when a VR controller button is released over the handle.\r\n   *\r\n   * @param {object} event - The event param.\r\n   * @return {boolean} - The return value.\r\n   */\r\n  onVRControllerButtonUp(event) {\r\n    if (this.activeController == event.controller) {\r\n      // const xfo = this.activeController.getTipXfo()\r\n      this.onDragEnd()\r\n      this.activeController = undefined\r\n      return true\r\n    }\r\n  }\r\n}\r\n\r\nexport default BaseLinearMovementHandle\r\nexport { BaseLinearMovementHandle }\r\n","import { EventEmitter, Registry } from '@zeainc/zea-engine'\r\n\r\n/**\r\n * `UndoRedoManager` is a mixture of the [Factory Design Pattern](https://en.wikipedia.org/wiki/Factory_method_pattern) and the actual changes stacks manager.\r\n * This is the heart of the Undo/Redo System, letting you navigate through the changes history you've saved.\r\n *\r\n * **Events**\r\n * * **changeAdded:** Triggered when a change is added.\r\n * * **changeUpdated:** Triggered when the last change added updates its state.\r\n * * **changeUndone:** Triggered when the `undo` method is called, after removing the last change from the stack.\r\n * * **changeRedone:** Triggered when the `redo` method is called, after restoring the last change removed from the undo stack.\r\n * */\r\nclass UndoRedoManager extends EventEmitter {\r\n  /**\r\n   * It doesn't have any parameters, but under the hood it uses [EventsEmitter]() to notify subscribers when something happens.\r\n   * The implementation is really simple, just initialize it like any other class.\r\n   */\r\n  constructor() {\r\n    super()\r\n    this.__undoStack = []\r\n    this.__redoStack = []\r\n    this.__currChange = null\r\n\r\n    this.__currChangeUpdated = this.__currChangeUpdated.bind(this)\r\n  }\r\n\r\n  /**\r\n   * As the name indicates, it empties undo/redo stacks permanently, losing all stored actions.\r\n   * Right now, before flushing the stacks it calls the `destroy` method on all changes, ensure to at least declare it.\r\n   */\r\n  flush() {\r\n    for (const change of this.__undoStack) change.destroy()\r\n    this.__undoStack = []\r\n    for (const change of this.__redoStack) change.destroy()\r\n    this.__redoStack = []\r\n    if (this.__currChange) {\r\n      this.__currChange.off('updated', this.__currChangeUpdated)\r\n      this.__currChange = null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Receives an instance of a class that extends or has the same structure as `Change` class.\r\n   * When this action happens, the last added change update notifications will get disconnected.\r\n   * Which implies that any future updates to changes that are not the last one, would need a new call to the `addChange` method.\r\n   * Also, resets the redo stack(Calls destroy method when doing it).\r\n   *\r\n   * @param {Change} change - The change param.\r\n   */\r\n  addChange(change) {\r\n    // console.log(\"AddChange:\", change.name)\r\n    if (this.__currChange && this.__currChange.off) {\r\n      this.__currChange.off('updated', this.__currChangeUpdated)\r\n    }\r\n\r\n    this.__undoStack.push(change)\r\n    this.__currChange = change\r\n    if (this.__currChange.on) this.__currChange.on('updated', this.__currChangeUpdated)\r\n\r\n    for (const change of this.__redoStack) change.destroy()\r\n    this.__redoStack = []\r\n\r\n    this.emit('changeAdded', { change })\r\n  }\r\n\r\n  /**\r\n   * Returns the last change added to the undo stack, but in case it is empty a `null` is returned.\r\n   *\r\n   * @return {Change|null} The return value.\r\n   */\r\n  getCurrentChange() {\r\n    return this.__currChange\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {object|any} updateData\r\n   */\r\n  __currChangeUpdated(updateData) {\r\n    this.emit('changeUpdated', updateData)\r\n  }\r\n\r\n  /**\r\n   * Rollback the latest action, passing it to the redo stack in case you wanna recover it later on.\r\n   *\r\n   * @param {boolean} pushOnRedoStack - The pushOnRedoStack param.\r\n   */\r\n  undo(pushOnRedoStack = true) {\r\n    if (this.__undoStack.length > 0) {\r\n      if (this.__currChange) {\r\n        this.__currChange.off('updated', this.__currChangeUpdated)\r\n        this.__currChange = null\r\n      }\r\n\r\n      const change = this.__undoStack.pop()\r\n      // console.log(\"undo:\", change.name)\r\n      change.undo()\r\n      if (pushOnRedoStack) {\r\n        this.__redoStack.push(change)\r\n        this.emit('changeUndone')\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method to cancel the current change added to the UndoRedoManager.\r\n   * Reverts the change and discards it.\r\n   */\r\n  cancel() {\r\n    if (this.__undoStack.length > 0) {\r\n      if (this.__currChange) {\r\n        this.__currChange.off('updated', this.__currChangeUpdated)\r\n        this.__currChange = null\r\n      }\r\n\r\n      const change = this.__undoStack.pop()\r\n      change.undo()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rollbacks the `undo` action by moving the change from the `redo` stack to the `undo` stack.\r\n   * Emits the `changeRedone` event, if you want to subscribe to it.\r\n   */\r\n  redo() {\r\n    if (this.__redoStack.length > 0) {\r\n      const change = this.__redoStack.pop()\r\n      // console.log(\"redo:\", change.name)\r\n      change.redo()\r\n      this.__undoStack.push(change)\r\n      this.emit('changeRedone')\r\n    }\r\n  }\r\n\r\n  // //////////////////////////////////\r\n  // User Synchronization\r\n\r\n  /**\r\n   * Basically returns a new instance of the derived `Change` class. This is why we need the `name` attribute.\r\n   *\r\n   * @param {string} className - The className param.\r\n   * @return {Change} - The return value.\r\n   */\r\n  constructChange(className) {\r\n    return Registry.constructClass(className)\r\n  }\r\n\r\n  /**\r\n   * Checks if a class of an instantiated object is registered in the UndoRedo Factory.\r\n   *\r\n   * @param {Change} inst - The instance of the Change class.\r\n   * @return {boolean} - Returns 'true' if the class has been registered.\r\n   */\r\n  static isChangeClassRegistered(inst) {\r\n    try {\r\n      const name = Registry.getBlueprintName(inst)\r\n      return true\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Very simple method that returns the name of the instantiated class, checking first in the registry and returning if found,\r\n   * if not then checks the `name` attribute declared in constructor.\r\n   *\r\n   * @param {Change} inst - The instance of the Change class.\r\n   * @return {string} - The return value.\r\n   */\r\n  static getChangeClassName(inst) {\r\n    return Registry.getBlueprintName(inst)\r\n  }\r\n\r\n  /**\r\n   * Registers the class in the UndoRedoManager Factory.\r\n   * Why do we need to specify the name of the class?\r\n   * Because when the code is transpiled, the defined class names change, so it won't be known as we declared it anymore.\r\n   *\r\n   * @param {string} name - The name param.\r\n   * @param {Change} cls - The cls param.\r\n   */\r\n  static registerChange(name, cls) {\r\n    Registry.register(name, cls)\r\n  }\r\n\r\n  static getInstance() {\r\n    if (!inst) {\r\n      inst = new UndoRedoManager()\r\n    }\r\n    return inst\r\n  }\r\n}\r\n\r\nlet inst\r\n\r\nexport default UndoRedoManager\r\nexport { UndoRedoManager }\r\n","import { EventEmitter } from '@zeainc/zea-engine'\r\nimport { UndoRedoManager } from './UndoRedoManager.js'\r\n\r\n/**\r\n * Kind of an abstract class, that represents the mandatory structure of a change classes that are used in the [`UndoRedoManager`]().\r\n *\r\n * @note If you don't extend this class, ensure to implement all methods specified in here.\r\n * @extends {EventEmitter}\r\n */\r\nclass Change extends EventEmitter {\r\n  /**\r\n   * Every class that extends from `Change` must contain a global `name` attribute.\r\n   * It is used by the `UndoRedoManager` factory to re-construct the class of the specific implementation of the `Change` class.\r\n   *\r\n   * @param {string} name - The name value.\r\n   */\r\n  constructor(name) {\r\n    super()\r\n    this.name = name ? name : UndoRedoManager.getChangeClassName(this)\r\n  }\r\n\r\n  /**\r\n   * Called by the `UndoRedoManager` in the `undo` method, and contains the code you wanna run when the undo action is triggered,\r\n   * of course it depends on what you're doing.\r\n   *\r\n   * @note This method needs to be implemented, otherwise it will throw an Error.\r\n   */\r\n  undo() {\r\n    throw new Error('Implement me')\r\n  }\r\n\r\n  /**\r\n   * Called by the `UndoRedoManager` in the `redo` method, and is the same as the `undo` method, contains the specific code you wanna run.\r\n   *\r\n   * @note This method needs to be implemented, otherwise it will throw an Error.\r\n   */\r\n  redo() {\r\n    throw new Error('Implement me')\r\n  }\r\n\r\n  /**\r\n   * Use this method to update the state of your `Change` class.\r\n   *\r\n   * @note This method needs to be implemented, otherwise it will throw an Error.\r\n   *\r\n   * @param {object|string|any} updateData - The updateData param.\r\n   */\r\n  update(updateData) {\r\n    throw new Error('Implement me')\r\n  }\r\n\r\n  /**\r\n   * Serializes the `Change` instance as a JSON object, allowing persistence/replication\r\n   *\r\n   * @note This method needs to be implemented, otherwise it will return an empty object.\r\n   *\r\n   * @param {object} context - The appData param.\r\n   * @return {object} The return value.\r\n   */\r\n  toJSON(context) {\r\n    return {}\r\n  }\r\n\r\n  /**\r\n   * The counterpart of the `toJSON` method, restoring `Change` instance's state with the specified JSON object.\r\n   * Each `Change` class must implement the logic for reconstructing itself.\r\n   * Very often used to restore from persisted/replicated JSON.\r\n   *\r\n   * @note This method needs to be implemented, otherwise it will do nothing.\r\n   *\r\n   * @param {object} j - The j param.\r\n   * @param {object} context - The context param.\r\n   */\r\n  fromJSON(j, context) {}\r\n\r\n  /**\r\n   * Useful method to update the state of an existing identified `Change` through replication.\r\n   *\r\n   * @note By default it calls the `update` method in the `Change` class, but you can override this if you need to.\r\n   *\r\n   * @param {object} j - The j param.\r\n   */\r\n  updateFromJSON(j) {\r\n    // Many change objects can load json directly\r\n    // in the update method.\r\n    this.update(j)\r\n  }\r\n\r\n  /**\r\n   * Method destined to clean up things that would need to be cleaned manually.\r\n   * It is executed when flushing the undo/redo stacks or adding a new change to the undo stack,\r\n   * so it is require in any class that represents a change.\r\n   *\r\n   */\r\n  destroy() {}\r\n}\r\n\r\nexport default Change\r\nexport { Change }\r\n","import { Parameter } from '@zeainc/zea-engine'\r\nimport UndoRedoManager from '../UndoRedoManager'\r\nimport Change from '../Change'\r\n\r\n/**\r\n * Represents a `Change` class for storing `Parameter` values.\r\n *\r\n * **Events**\r\n * * **updated:** Triggered when the `ParameterValueChange` value is updated.\r\n *\r\n * @extends Change\r\n */\r\nclass ParameterValueChange extends Change {\r\n  /**\r\n   * Creates an instance of ParameterValueChange.\r\n   *\r\n   * @param {Parameter} param - The param value.\r\n   * @param {object|string|number|any} newValue - The newValue value.\r\n   */\r\n  constructor(param, newValue) {\r\n    if (param) {\r\n      super(param ? param.getName() + ' Changed' : 'ParameterValueChange')\r\n      this.__prevValue = param.getValue()\r\n      this.__param = param\r\n      if (newValue != undefined) {\r\n        this.__nextValue = newValue\r\n        this.__param.setValue(this.__nextValue)\r\n      }\r\n    } else {\r\n      super()\r\n    }\r\n\r\n    this.suppressPrimaryChange = false\r\n    this.secondaryChanges = []\r\n  }\r\n\r\n  /**\r\n   * Rollbacks the value of the parameter to the previous one, passing it to the redo stack in case you wanna recover it later on.\r\n   */\r\n  undo() {\r\n    if (!this.__param) return\r\n\r\n    if (!this.suppressPrimaryChange) this.__param.setValue(this.__prevValue)\r\n\r\n    this.secondaryChanges.forEach((change) => change.undo())\r\n  }\r\n\r\n  /**\r\n   * Rollbacks the `undo` action by moving the change from the `redo` stack to the `undo` stack\r\n   * and updating the parameter with the new value.\r\n   */\r\n  redo() {\r\n    if (!this.__param) return\r\n    if (!this.suppressPrimaryChange) this.__param.setValue(this.__nextValue)\r\n\r\n    this.secondaryChanges.forEach((change) => change.redo())\r\n  }\r\n\r\n  /**\r\n   * Updates the state of the current parameter change value.\r\n   *\r\n   * @param {Parameter} updateData - The updateData param.\r\n   */\r\n  update(updateData) {\r\n    if (!this.__param) return\r\n    this.__nextValue = updateData.value\r\n    this.__param.setValue(this.__nextValue)\r\n    this.emit('updated', updateData)\r\n  }\r\n\r\n  /**\r\n   * Serializes `Parameter` instance value as a JSON object, allowing persistence/replication.\r\n   *\r\n   * @param {object} context - The context param.\r\n   * @return {object} The return value.\r\n   */\r\n  toJSON(context) {\r\n    const j = {\r\n      name: this.name,\r\n      paramPath: this.__param.getPath(),\r\n    }\r\n\r\n    if (this.__nextValue != undefined) {\r\n      if (this.__nextValue.toJSON) {\r\n        j.value = this.__nextValue.toJSON()\r\n      } else {\r\n        j.value = this.__nextValue\r\n      }\r\n    }\r\n    return j\r\n  }\r\n\r\n  /**\r\n   * Restores `Parameter` instance's state with the specified JSON object.\r\n   *\r\n   * @param {object} j - The j param.\r\n   * @param {object} context - The context param.\r\n   */\r\n  fromJSON(j, context) {\r\n    const param = context.appData.scene.getRoot().resolvePath(j.paramPath, 1)\r\n    if (!param || !(param instanceof Parameter)) {\r\n      console.warn('resolvePath is unable to resolve', j.paramPath)\r\n      return\r\n    }\r\n    this.__param = param\r\n    this.__prevValue = this.__param.getValue()\r\n    if (this.__prevValue.clone) this.__nextValue = this.__prevValue.clone()\r\n    else this.__nextValue = this.__prevValue\r\n\r\n    this.name = j.name\r\n    if (j.value != undefined) this.updateFromJSON(j)\r\n  }\r\n\r\n  /**\r\n   * Updates the state of an existing identified `Parameter` through replication.\r\n   *\r\n   * @param {object} j - The j param.\r\n   */\r\n  updateFromJSON(j) {\r\n    if (!this.__param) return\r\n    if (this.__nextValue.fromJSON) this.__nextValue.fromJSON(j.value)\r\n    else this.__nextValue = j.value\r\n    this.__param.setValue(this.__nextValue)\r\n  }\r\n}\r\n\r\nUndoRedoManager.registerChange('ParameterValueChange', ParameterValueChange)\r\n\r\nexport default ParameterValueChange\r\nexport { ParameterValueChange }\r\n","import { Color, Registry, shaderLibrary, GLShader } from '@zeainc/zea-engine'\r\n\r\n/**\r\n * Class representing Handle Shader.\r\n *\r\n * @extends {GLShader}\r\n */\r\nclass HandleShader extends GLShader {\r\n  /**\r\n   * Creates an instance of HandleShader.\r\n   *\r\n   * @param {*} gl - The gl value\r\n   */\r\n  constructor(gl) {\r\n    super(gl)\r\n\r\n    this.__shaderStages['VERTEX_SHADER'] = shaderLibrary.parseShader(\r\n      'HandleShader.vertexShader',\r\n      `\r\nprecision highp float;\r\n\r\nattribute vec3 positions;\r\n#ifdef ENABLE_TEXTURES\r\nattribute vec2 texCoords;\r\n#endif\r\n\r\n<%include file=\"GLSLUtils.glsl\"/>\r\n<%include file=\"stack-gl/transpose.glsl\"/>\r\n<%include file=\"drawItemId.glsl\"/>\r\n<%include file=\"drawItemTexture.glsl\"/>\r\n<%include file=\"modelMatrix.glsl\"/>\r\n\r\nuniform mat4 viewMatrix;\r\nuniform mat4 projectionMatrix;\r\n\r\n#ifdef ENABLE_MULTI_DRAW\r\n<%include file=\"materialparams.glsl\"/>\r\n#else\r\nuniform int MaintainScreenSize;\r\nuniform float Overlay;\r\n#endif\r\n\r\n/* VS Outputs */\r\nvarying float v_drawItemId;\r\nvarying vec4 v_geomItemData;\r\nvarying vec3 v_viewPos;\r\n#ifdef ENABLE_TEXTURES\r\nvarying vec2 v_textureCoord;\r\n#endif\r\n\r\nvoid main(void) {\r\n  int drawItemId = getDrawItemId();\r\n  v_drawItemId = float(drawItemId);\r\n  v_geomItemData  = getInstanceData(drawItemId);\r\n  mat4 modelMatrix = getModelMatrix(drawItemId);\r\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\r\n\r\n  //////////////////////////////////////////////\r\n  // Material\r\n\r\n#ifdef ENABLE_MULTI_DRAW\r\n  vec2 materialCoords = v_geomItemData.zw;\r\n  vec4 materialValue1 = getMaterialValue(materialCoords, 1);\r\n  int maintainScreenSize = int(materialValue1.x + 0.5);\r\n  float overlay = materialValue1.y;\r\n#else\r\n  int maintainScreenSize = MaintainScreenSize;\r\n  float overlay = Overlay;\r\n#endif\r\n\r\n  //////////////////////////////////////////////\r\n  \r\n  if (maintainScreenSize != 0) {\r\n    float dist = modelViewMatrix[3][2];\r\n    float sc = abs(dist); // Note: items in front of the camera will have a negative value here.\r\n    mat4 scmat = mat4(\r\n      sc, 0.0, 0.0, 0.0,\r\n      0.0, sc, 0.0, 0.0,\r\n      0.0, 0.0, sc, 0.0,\r\n      0.0, 0.0, 0.0, 1.0\r\n    );\r\n    modelViewMatrix = modelViewMatrix * scmat;\r\n  }\r\n\r\n  vec4 viewPos = modelViewMatrix * vec4(positions, 1.0);\r\n  gl_Position = projectionMatrix * viewPos;\r\n\r\n  if(overlay > 0.0){\r\n    gl_Position.z = mix(gl_Position.z, -gl_Position.w, overlay);\r\n  }\r\n\r\n  v_viewPos = viewPos.xyz;\r\n  v_textureCoord = texCoords;\r\n  v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y\r\n}\r\n`\r\n    )\r\n\r\n    this.__shaderStages['FRAGMENT_SHADER'] = shaderLibrary.parseShader(\r\n      'HandleShader.fragmentShader',\r\n      `\r\nprecision highp float;\r\n\r\n<%include file=\"GLSLUtils.glsl\"/>\r\n<%include file=\"math/constants.glsl\"/>\r\n<%include file=\"drawItemTexture.glsl\"/>\r\n<%include file=\"stack-gl/gamma.glsl\"/>\r\n<%include file=\"materialparams.glsl\"/>\r\n\r\n\r\n#if defined(DRAW_COLOR)\r\n\r\nuniform color BaseColor;\r\n\r\n#ifdef ENABLE_TEXTURES\r\nuniform sampler2D BaseColorTex;\r\nuniform int BaseColorTexType;\r\n#endif\r\n\r\n#elif defined(DRAW_GEOMDATA)\r\n\r\nuniform int isOrthographic;\r\nimport 'surfaceGeomData.glsl'\r\n\r\n#elif defined(DRAW_HIGHLIGHT)\r\n\r\n#ifdef ENABLE_FLOAT_TEXTURES\r\nvec4 getHighlightColor(int id) {\r\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);\r\n}\r\n#else // ENABLE_FLOAT_TEXTURES\r\n\r\nuniform vec4 highlightColor;\r\n\r\nvec4 getHighlightColor() {\r\n    return highlightColor;\r\n}\r\n\r\n#endif // ENABLE_FLOAT_TEXTURES\r\n\r\n#endif // DRAW_HIGHLIGHT\r\n\r\n/* VS Outputs */\r\nvarying float v_drawItemId;\r\nvarying vec4 v_geomItemData;\r\nvarying vec3 v_viewPos;\r\n#ifdef ENABLE_TEXTURES\r\nvarying vec2 v_textureCoord;\r\n#endif\r\n\r\n\r\n#ifdef ENABLE_ES3\r\n  out vec4 fragColor;\r\n#endif\r\nvoid main(void) {\r\n#ifndef ENABLE_ES3\r\n  vec4 fragColor;\r\n#endif\r\n\r\n  int drawItemId = int(v_drawItemId + 0.5);\r\n\r\n  //////////////////////////////////////////////\r\n  // Color\r\n#if defined(DRAW_COLOR)\r\n\r\n\r\n#ifdef ENABLE_MULTI_DRAW\r\n\r\n  vec2 materialCoords = v_geomItemData.zw;\r\n  vec4 baseColor = toLinear(getMaterialValue(materialCoords, 0));\r\n\r\n#else // ENABLE_MULTI_DRAW\r\n\r\n#ifndef ENABLE_TEXTURES\r\n  vec4 baseColor = toLinear(BaseColor);\r\n#else\r\n  vec4 baseColor = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);\r\n#endif // ENABLE_TEXTURES\r\n\r\n#endif // ENABLE_MULTI_DRAW\r\n\r\n  fragColor = baseColor;\r\n\r\n#ifdef ENABLE_INLINE_GAMMACORRECTION\r\n  fragColor.rgb = toGamma(fragColor.rgb);\r\n#endif\r\n\r\n  //////////////////////////////////////////////\r\n  // GeomData\r\n#elif defined(DRAW_GEOMDATA)\r\n\r\n  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_drawItemId, isOrthographic);\r\n\r\n  //////////////////////////////////////////////\r\n  // Highlight\r\n#elif defined(DRAW_HIGHLIGHT)\r\n  \r\n  fragColor = getHighlightColor(drawItemId);\r\n\r\n#endif // DRAW_HIGHLIGHT\r\n\r\n#ifndef ENABLE_ES3\r\n  gl_FragColor = fragColor;\r\n#endif\r\n}\r\n`\r\n    )\r\n\r\n    this.finalize()\r\n  }\r\n\r\n  /**\r\n   * Returns parameter declarations\r\n   *\r\n   * @static\r\n   * @return {array} - Params declarations\r\n   */\r\n  static getParamDeclarations() {\r\n    const paramDescs = super.getParamDeclarations()\r\n    paramDescs.push({\r\n      name: 'BaseColor',\r\n      defaultValue: new Color(1.0, 1.0, 0.5),\r\n    })\r\n    paramDescs.push({\r\n      name: 'MaintainScreenSize',\r\n      defaultValue: 0,\r\n    })\r\n    paramDescs.push({ name: 'Overlay', defaultValue: 0.0 })\r\n    return paramDescs\r\n  }\r\n\r\n  /**\r\n   * The getPackedMaterialData method.\r\n   * @param {any} material - The material param.\r\n   * @return {any} - The return value.\r\n   */\r\n  static getPackedMaterialData(material) {\r\n    const matData = new Float32Array(8)\r\n    const baseColor = material.getParameter('BaseColor').getValue()\r\n    matData[0] = baseColor.r\r\n    matData[1] = baseColor.g\r\n    matData[2] = baseColor.b\r\n    matData[3] = baseColor.a\r\n    matData[4] = material.getParameter('MaintainScreenSize').getValue()\r\n    matData[5] = material.getParameter('Overlay').getValue()\r\n    return matData\r\n  }\r\n\r\n  /**\r\n   * Returns whether the shader's overlay is true or not.\r\n   *\r\n   * @static\r\n   * @return {boolean} - The overlay value\r\n   */\r\n  static isOverlay() {\r\n    return true\r\n  }\r\n}\r\n\r\nRegistry.register('HandleShader', HandleShader)\r\n\r\nexport default HandleShader\r\nexport { HandleShader }\r\n","const transformVertices = (geometry, xfo) => {\r\n  geometry.update()\r\n\r\n  const positions = geometry.getVertexAttribute('positions')\r\n  for (let i = 0; i < positions.length; i++) {\r\n    const v = positions.getValueRef(i)\r\n    const v2 = xfo.transformVec3(v)\r\n    v.set(v2.x, v2.y, v2.z)\r\n  }\r\n}\r\n\r\nexport default transformVertices\r\n","import { Color, Xfo, GeomItem, Material, Cylinder, Cone } from '@zeainc/zea-engine'\r\nimport BaseLinearMovementHandle from './BaseLinearMovementHandle'\r\nimport ParameterValueChange from '../UndoRedo/Changes/ParameterValueChange'\r\nimport './Shaders/HandleShader'\r\nimport transformVertices from './transformVertices'\r\nimport UndoRedoManager from '../UndoRedo/UndoRedoManager'\r\n\r\n/**\r\n * Class representing a linear movement scene widget.\r\n *\r\n * @extends BaseLinearMovementHandle\r\n */\r\nclass LinearMovementHandle extends BaseLinearMovementHandle {\r\n  /**\r\n   * Create a linear movement scene widget.\r\n   *\r\n   * @param {string} name - The name value.\r\n   * @param {number} length - The length value.\r\n   * @param {number} thickness - The thickness value.\r\n   * @param {Color} color - The color value.\r\n   */\r\n  constructor(name, length = 0.1, thickness = 0.003, color = new Color()) {\r\n    super(name)\r\n    this.colorParam.setValue(color)\r\n\r\n    this.handleMat = new Material('handle', 'HandleShader')\r\n    this.handleMat.getParameter('BaseColor').setValue(color)\r\n    this.handleMat.getParameter('MaintainScreenSize').setValue(1)\r\n    this.handleMat.getParameter('Overlay').setValue(0.9)\r\n\r\n    const handleGeom = new Cylinder(thickness, length, 64)\r\n    handleGeom.getParameter('BaseZAtZero').setValue(true)\r\n    const tipGeom = new Cone(thickness * 4, thickness * 10, 64, true)\r\n    const handle = new GeomItem('handle', handleGeom, this.handleMat)\r\n\r\n    const tip = new GeomItem('tip', tipGeom, this.handleMat)\r\n    const tipXfo = new Xfo()\r\n    tipXfo.tr.set(0, 0, length)\r\n\r\n    transformVertices(tipGeom, tipXfo)\r\n\r\n    this.colorParam.on('valueChanged', () => {\r\n      this.handleMat.getParameter('BaseColor').setValue(this.colorParam.getValue())\r\n    })\r\n\r\n    this.addChild(handle)\r\n    this.addChild(tip)\r\n  }\r\n\r\n  /**\r\n   * Applies a special shinning shader to the handle to illustrate interaction with it.\r\n   */\r\n  highlight() {\r\n    super.highlight()\r\n    this.handleMat.getParameter('BaseColor').setValue(this.highlightColorParam.getValue())\r\n  }\r\n\r\n  /**\r\n   * Removes the shining shader from the handle.\r\n   */\r\n  unhighlight() {\r\n    super.unhighlight()\r\n    this.handleMat.getParameter('BaseColor').setValue(this.colorParam.getValue())\r\n  }\r\n\r\n  /**\r\n   * Sets global xfo target parameter.\r\n   *\r\n   * @param {Parameter} param - The video param.\r\n   * @param {boolean} track - The track param.\r\n   */\r\n  setTargetParam(param, track = true) {\r\n    this.param = param\r\n    if (track) {\r\n      const __updateGizmo = () => {\r\n        this.getParameter('GlobalXfo').setValue(param.getValue())\r\n      }\r\n      __updateGizmo()\r\n      param.on('valueChanged', __updateGizmo)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns target's global xfo parameter.\r\n   *\r\n   * @return {Parameter} - returns handle's target global Xfo.\r\n   */\r\n  getTargetParam() {\r\n    return this.param ? this.param : this.getParameter('GlobalXfo')\r\n  }\r\n\r\n  /**\r\n   * Handles the initially drag of the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onDragStart(event) {\r\n    this.grabPos = event.grabPos\r\n    const param = this.getTargetParam()\r\n    this.baseXfo = param.getValue()\r\n\r\n    this.change = new ParameterValueChange(param)\r\n    UndoRedoManager.getInstance().addChange(this.change)\r\n  }\r\n\r\n  /**\r\n   * Handles drag action of the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onDrag(event) {\r\n    const dragVec = event.holdPos.subtract(this.grabPos)\r\n\r\n    const newXfo = this.baseXfo.clone()\r\n    newXfo.tr.addInPlace(dragVec)\r\n\r\n    this.change.update({\r\n      value: newXfo,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handles the end of dragging the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onDragEnd(event) {\r\n    this.change = null\r\n  }\r\n}\r\n\r\nexport default LinearMovementHandle\r\nexport { LinearMovementHandle }\r\n","import { MathFunctions, Vec3, Xfo } from '@zeainc/zea-engine'\r\nimport Handle from './Handle'\r\nimport ParameterValueChange from '../UndoRedo/Changes/ParameterValueChange'\r\nimport UndoRedoManager from '../UndoRedo/UndoRedoManager'\r\n\r\n/**\r\n * Class representing an axial rotation scene widget.\r\n *\r\n * @extends Handle\r\n */\r\nclass BaseAxialRotationHandle extends Handle {\r\n  /**\r\n   * Create an axial rotation scene widget.\r\n   *\r\n   * @param {string} name - The name value.\r\n   */\r\n  constructor(name) {\r\n    super(name)\r\n  }\r\n\r\n  /**\r\n   * Sets global xfo target parameter\r\n   *\r\n   * @param {Parameter} param - The param param.\r\n   * @param {boolean} track - The track param.\r\n   */\r\n  setTargetParam(param, track = true) {\r\n    this.param = param\r\n    if (track) {\r\n      const __updateGizmo = () => {\r\n        this.getParameter('GlobalXfo').setValue(param.getValue())\r\n      }\r\n      __updateGizmo()\r\n      param.on('valueChanged', __updateGizmo)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns target's global xfo parameter.\r\n   *\r\n   * @return {Parameter} - returns handle's target global Xfo.\r\n   */\r\n  getTargetParam() {\r\n    return this.param ? this.param : this.getParameter('GlobalXfo')\r\n  }\r\n\r\n  /**\r\n   * Handles the initially drag of the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onDragStart(event) {\r\n    this.baseXfo = this.getParameter('GlobalXfo').getValue().clone()\r\n    this.baseXfo.sc.set(1, 1, 1)\r\n    this.deltaXfo = new Xfo()\r\n\r\n    const param = this.getTargetParam()\r\n    const paramXfo = param.getValue()\r\n    this.offsetXfo = this.baseXfo.inverse().multiply(paramXfo)\r\n\r\n    this.vec0 = event.grabPos.subtract(this.baseXfo.tr)\r\n    this.grabCircleRadius = this.vec0.length()\r\n    this.vec0.normalizeInPlace()\r\n\r\n    this.change = new ParameterValueChange(param)\r\n    UndoRedoManager.getInstance().addChange(this.change)\r\n  }\r\n\r\n  /**\r\n   * Handles drag action of the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onDrag(event) {\r\n    const vec1 = event.holdPos.subtract(this.baseXfo.tr)\r\n    // const dragCircleRadius = vec1.length()\r\n    vec1.normalizeInPlace()\r\n\r\n    // modulate the angle by the radius the mouse moves\r\n    // away from the center of the handle.\r\n    // This makes it possible to rotate the object more than\r\n    // 180 degrees in a single movement.\r\n    // Note: this modulator made rotations quite unpredictable\r\n    // especially when the angle between the ray and the plane is acute.\r\n    // disabling for now.\r\n    const modulator = 1.0 //dragCircleRadius / this.grabCircleRadius\r\n    let angle = this.vec0.angleTo(vec1) * modulator\r\n    if (this.vec0.cross(vec1).dot(this.baseXfo.ori.getZaxis()) < 0) angle = -angle\r\n\r\n    if (this.range) {\r\n      angle = MathFunctions.clamp(angle, this.range[0], this.range[1])\r\n    }\r\n\r\n    if (event.shiftKey) {\r\n      // modulat the angle to X degree increments.\r\n      const increment = Math.degToRad(22.5)\r\n      angle = Math.floor(angle / increment) * increment\r\n    }\r\n\r\n    this.deltaXfo.ori.setFromAxisAndAngle(new Vec3(0, 0, 1), angle)\r\n\r\n    const newXfo = this.baseXfo.multiply(this.deltaXfo)\r\n    const value = newXfo.multiply(this.offsetXfo)\r\n\r\n    this.change.update({\r\n      value,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handles the end of dragging the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onDragEnd(event) {\r\n    this.change = null\r\n  }\r\n}\r\n\r\nexport default BaseAxialRotationHandle\r\nexport { BaseAxialRotationHandle }\r\n","import { Color, Xfo, NumberParameter, GeomItem, Material, Torus } from '@zeainc/zea-engine'\r\nimport BaseAxialRotationHandle from './BaseAxialRotationHandle'\r\nimport './Shaders/HandleShader'\r\n\r\n/**\r\n * Class representing an axial rotation scene widget. It has a `Torus` shape and is used to rotate objects around the specified axes.\r\n * You can do it by specifying the localXfo orientation:\r\n *\r\n * ```javascript\r\n * const xfo1 = new Xfo()\r\n * // This is rotation over `Y` axis\r\n * xfo1.ori.setFromAxisAndAngle(new Vec3(0, 1, 0), Math.PI * 0.5)\r\n * axialRotationHandle.getParameter('LocalXfo').setValue(xfo1)\r\n * ```\r\n * **Parameters**\r\n * * **Radius(`NumberParameter`):** Specifies the radius of the handler.\r\n *\r\n * @extends BaseAxialRotationHandle\r\n */\r\nclass AxialRotationHandle extends BaseAxialRotationHandle {\r\n  /**\r\n   * Create an axial rotation scene widget.\r\n   *\r\n   * @param {string} name - The name value.\r\n   * @param {number} radius - The radius value.\r\n   * @param {number} thickness - The thickness value.\r\n   * @param {Color} color - The color value.\r\n   */\r\n  constructor(name, radius, thickness, color = new Color(1, 1, 0)) {\r\n    super(name)\r\n\r\n    this.radiusParam = this.addParameter(new NumberParameter('Radius', radius))\r\n    this.colorParam.setValue(color)\r\n\r\n    this.handleMat = new Material('handle', 'HandleShader')\r\n    this.handleMat.getParameter('BaseColor').setValue(color)\r\n    this.handleMat.getParameter('MaintainScreenSize').setValue(1)\r\n    this.handleMat.getParameter('Overlay').setValue(0.9)\r\n\r\n    // const handleGeom = new Cylinder(radius, thickness * 2, 64, 2, false);\r\n    const handleGeom = new Torus(thickness, radius, 64, Math.PI * 0.5)\r\n    this.handle = new GeomItem('handle', handleGeom, this.handleMat)\r\n    this.handleXfo = new Xfo()\r\n\r\n    this.radiusParam.on('valueChanged', () => {\r\n      radius = this.radiusParam.getValue()\r\n      handleGeom.getParameter('OuterRadius').setValue(radius)\r\n      handleGeom.getParameter('InnerRadius').setValue(radius * 0.02)\r\n    })\r\n\r\n    this.colorParam.on('valueChanged', () => {\r\n      this.handleMat.getParameter('BaseColor').setValue(this.colorParam.getValue())\r\n    })\r\n\r\n    this.addChild(this.handle)\r\n  }\r\n\r\n  /**\r\n   * Applies a special shinning shader to the handle to illustrate interaction with it.\r\n   */\r\n  highlight() {\r\n    super.highlight()\r\n    this.handleMat.getParameter('BaseColor').setValue(this.highlightColorParam.getValue())\r\n  }\r\n\r\n  /**\r\n   * Removes the shining shader from the handle.\r\n   */\r\n  unhighlight() {\r\n    super.unhighlight()\r\n    this.handleMat.getParameter('BaseColor').setValue(this.colorParam.getValue())\r\n  }\r\n\r\n  /**\r\n   * Returns handle's global Xfo\r\n   *\r\n   * @return {Xfo} - The Xfo value\r\n   */\r\n  getBaseXfo() {\r\n    return this.getParameter('GlobalXfo').getValue()\r\n  }\r\n\r\n  /**\r\n   * Handles the initially drag interaction of the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onDragStart(event) {\r\n    super.onDragStart(event)\r\n  }\r\n\r\n  /**\r\n   * Handles drag interaction of the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onDrag(event) {\r\n    super.onDrag(event)\r\n  }\r\n\r\n  /**\r\n   * Handles the end of dragging interaction with the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onDragEnd(event) {\r\n    super.onDragEnd(event)\r\n  }\r\n}\r\n\r\nexport default AxialRotationHandle\r\nexport { AxialRotationHandle }\r\n","import Handle from './Handle'\r\nimport ParameterValueChange from '../UndoRedo/Changes/ParameterValueChange'\r\nimport UndoRedoManager from '../UndoRedo/UndoRedoManager'\r\n\r\n/**\r\n * Class representing a planar movement scene widget.\r\n *\r\n * @extends Handle\r\n */\r\nclass PlanarMovementHandle extends Handle {\r\n  /**\r\n   * Create a planar movement scene widget.\r\n   *\r\n   * @param {string} name - The name value.\r\n   */\r\n  constructor(name) {\r\n    super(name)\r\n    this.fullXfoManipulationInVR = true\r\n  }\r\n\r\n  /**\r\n   * Sets global xfo target parameter.\r\n   *\r\n   * @param {Parameter} param - The video param.\r\n   * @param {boolean} track - The track param.\r\n   */\r\n  setTargetParam(param, track = true) {\r\n    this.param = param\r\n    if (track) {\r\n      const __updateGizmo = () => {\r\n        this.getParameter('GlobalXfo').setValue(param.getValue())\r\n      }\r\n      __updateGizmo()\r\n      param.on('valueChanged', __updateGizmo)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns target's global xfo parameter.\r\n   *\r\n   * @return {Parameter} - returns handle's target global Xfo.\r\n   */\r\n  getTargetParam() {\r\n    return this.param ? this.param : this.getParameter('GlobalXfo')\r\n  }\r\n\r\n  /**\r\n   * Handles the initially drag of the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onDragStart(event) {\r\n    this.grabPos = event.grabPos\r\n    const param = this.getTargetParam()\r\n    this.baseXfo = param.getValue()\r\n\r\n    this.change = new ParameterValueChange(param)\r\n    UndoRedoManager.getInstance().addChange(this.change)\r\n  }\r\n\r\n  /**\r\n   * Handles drag action of the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onDrag(event) {\r\n    const dragVec = event.holdPos.subtract(this.grabPos)\r\n\r\n    const newXfo = this.baseXfo.clone()\r\n    newXfo.tr.addInPlace(dragVec)\r\n\r\n    this.change.update({\r\n      value: newXfo,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handles the end of dragging the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onDragEnd(event) {\r\n    this.change = null\r\n  }\r\n\r\n  // ///////////////////////////////////\r\n  // VRController events\r\n\r\n  /**\r\n   * Event fired when a VR controller button is pressed over the handle.\r\n   *\r\n   * @param {object} event - The event param.\r\n   * @return {boolean} The return value.\r\n   */\r\n  onVRControllerButtonDown(event) {\r\n    if (this.fullXfoManipulationInVR) {\r\n      this.activeController = event.controller\r\n      const xfo = this.activeController.getTipXfo()\r\n      const handleXfo = this.getParameter('GlobalXfo').getValue()\r\n      this.grabOffset = xfo.inverse().multiply(handleXfo)\r\n    } else {\r\n      super.onVRControllerButtonDown(event)\r\n    }\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * The onVRPoseChanged method.\r\n   *\r\n   * @param {object} event - The event param.\r\n   */\r\n  onVRPoseChanged(event) {\r\n    if (this.fullXfoManipulationInVR) {\r\n      const xfo = this.activeController.getTipXfo()\r\n      const newXfo = xfo.multiply(this.grabOffset)\r\n      if (this.change) {\r\n        this.change.update({\r\n          value: newXfo,\r\n        })\r\n      } else {\r\n        const param = this.getTargetParam()\r\n        param.setValue(newXfo)\r\n      }\r\n    } else {\r\n      super.onVRPoseChanged(event)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event fired when a VR controller button is released over the handle.\r\n   *\r\n   * @param {object} event - The event param.\r\n   */\r\n  onVRControllerButtonUp(event) {\r\n    if (this.fullXfoManipulationInVR) {\r\n      this.change = null\r\n    } else {\r\n      super.onVRControllerButtonUp(event)\r\n    }\r\n  }\r\n}\r\n\r\nexport default PlanarMovementHandle\r\nexport { PlanarMovementHandle }\r\n","import { Color, Xfo, NumberParameter, GeomItem, Material, Cuboid } from '@zeainc/zea-engine'\r\nimport PlanarMovementHandle from './PlanarMovementHandle'\r\nimport './Shaders/HandleShader'\r\nimport transformVertices from './transformVertices'\r\n\r\n/**\r\n * Class representing a planar movement scene widget.\r\n *\r\n * **Parameters**\r\n * * **Size(`NumberParameter`):** Specifies the size of the plane handle.\r\n *\r\n * @extends Handle\r\n */\r\nclass XfoPlanarMovementHandle extends PlanarMovementHandle {\r\n  /**\r\n   * Create a planar movement scene widget.\r\n   * @param {string} name - The name value.\r\n   * @param {number} size - The size value.\r\n   * @param {Vec3} offset - The offset value.\r\n   * @param {Color} color - The color value.\r\n   */\r\n  constructor(name, size, offset, color = new Color()) {\r\n    super(name)\r\n\r\n    this.sizeParam = this.addParameter(new NumberParameter('Size', size))\r\n    this.colorParam.setValue(color)\r\n\r\n    this.handleMat = new Material('handle', 'HandleShader')\r\n    this.handleMat.getParameter('BaseColor').setValue(color)\r\n    this.handleMat.getParameter('MaintainScreenSize').setValue(1)\r\n    this.handleMat.getParameter('Overlay').setValue(0.9)\r\n\r\n    const handleGeom = new Cuboid(size, size, size * 0.02)\r\n\r\n    const handleGeomXfo = new Xfo()\r\n    handleGeomXfo.tr = offset\r\n    transformVertices(handleGeom, handleGeomXfo)\r\n    this.handle = new GeomItem('handle', handleGeom, this.handleMat)\r\n\r\n    this.sizeParam.on('valueChanged', () => {\r\n      size = this.sizeParam.getValue()\r\n      handleGeom.getParameter('X').setValue(size)\r\n      handleGeom.getParameter('Y').setValue(size)\r\n      handleGeom.getParameter('Z').setValue(size * 0.02)\r\n    })\r\n\r\n    this.colorParam.on('valueChanged', () => {\r\n      this.handleMat.getParameter('BaseColor').setValue(this.colorParam.getValue())\r\n    })\r\n    this.addChild(this.handle)\r\n  }\r\n\r\n  /**\r\n   * Applies a special shinning shader to the handle to illustrate interaction with it.\r\n   */\r\n  highlight() {\r\n    super.highlight()\r\n    this.handleMat.getParameter('BaseColor').setValue(this.highlightColorParam.getValue())\r\n  }\r\n\r\n  /**\r\n   * Removes the shining shader from the handle.\r\n   */\r\n  unhighlight() {\r\n    super.unhighlight()\r\n    this.handleMat.getParameter('BaseColor').setValue(this.colorParam.getValue())\r\n  }\r\n}\r\n\r\nexport default XfoPlanarMovementHandle\r\nexport { XfoPlanarMovementHandle }\r\n","import { Color, Vec3, Xfo, EulerAngles, TreeItem, ColorParameter } from '@zeainc/zea-engine'\r\nimport Handle from './Handle'\r\nimport LinearMovementHandle from './LinearMovementHandle'\r\nimport AxialRotationHandle from './AxialRotationHandle'\r\nimport LinearScaleHandle from './LinearScaleHandle'\r\nimport SphericalRotationHandle from './SphericalRotationHandle'\r\nimport './Shaders/HandleShader'\r\nimport XfoPlanarMovementHandle from './XfoPlanarMovementHandle'\r\n\r\n/**\r\n * Class representing a xfo handle. Base transformations for objects in the scene\r\n *\r\n * **Parameters**\r\n * * **HighlightColor(`ColorParameter`):** Specifies the highlight color of the handle.\r\n *\r\n * @extends TreeItem\r\n */\r\nclass XfoHandle extends TreeItem {\r\n  /**\r\n   * Create an axial rotation scene widget.\r\n   *\r\n   * @param {number} size - The size value.\r\n   * @param {number} thickness - The thickness value.\r\n   */\r\n  constructor(size = 0.1, thickness = 0.003) {\r\n    super('XfoHandle')\r\n\r\n    this.highlightColorParam = this.addParameter(new ColorParameter('HighlightColor', new Color(1, 1, 1)))\r\n\r\n    this.highlightColorParam.on('valueChanged', () => {\r\n      const color = this.highlightColorParam.getValue()\r\n\r\n      this.traverse((item) => {\r\n        if (item instanceof Handle) item.getParameter('HighlightColor').setValue(color)\r\n      })\r\n    })\r\n    // ////////////////////////////////\r\n    // LinearMovementHandle\r\n\r\n    const translationHandles = new TreeItem('Translate')\r\n    // translationHandles.setVisible(false)\r\n    this.addChild(translationHandles)\r\n\r\n    const red = new Color(1, 0.1, 0.1)\r\n    const green = new Color('#32CD32') // limegreen https://www.rapidtables.com/web/color/green-color.html\r\n    const blue = new Color('#1E90FF') // dodgerblue https://www.rapidtables.com/web/color/blue-color.html\r\n    red.a = 1\r\n    green.a = 1\r\n    blue.a = 1\r\n\r\n    {\r\n      const linearXWidget = new LinearMovementHandle('linearX', size, thickness, red)\r\n      const xfo = new Xfo()\r\n      xfo.ori.setFromAxisAndAngle(new Vec3(0, 1, 0), Math.PI * 0.5)\r\n      linearXWidget.getParameter('LocalXfo').setValue(xfo)\r\n      translationHandles.addChild(linearXWidget)\r\n    }\r\n    {\r\n      const linearYWidget = new LinearMovementHandle('linearY', size, thickness, green)\r\n      const xfo = new Xfo()\r\n      xfo.ori.setFromAxisAndAngle(new Vec3(1, 0, 0), Math.PI * -0.5)\r\n      linearYWidget.getParameter('LocalXfo').setValue(xfo)\r\n      translationHandles.addChild(linearYWidget)\r\n    }\r\n    {\r\n      const linearZWidget = new LinearMovementHandle('linearZ', size, thickness, blue)\r\n      translationHandles.addChild(linearZWidget)\r\n    }\r\n\r\n    // ////////////////////////////////\r\n    // planarXYWidget\r\n    const planarSize = size * 0.35\r\n    {\r\n      const planarXYWidget = new XfoPlanarMovementHandle(\r\n        'planarXY',\r\n        planarSize,\r\n        new Vec3(planarSize * 0.5, planarSize * 0.5, 0.0),\r\n        blue\r\n      )\r\n      const xfo = new Xfo()\r\n      planarXYWidget.getParameter('LocalXfo').setValue(xfo)\r\n      translationHandles.addChild(planarXYWidget)\r\n    }\r\n    {\r\n      const planarYZWidget = new XfoPlanarMovementHandle(\r\n        'planarYZ',\r\n        planarSize,\r\n        new Vec3(planarSize * -0.5, planarSize * 0.5, 0.0),\r\n        red\r\n      )\r\n      const xfo = new Xfo()\r\n      xfo.ori.setFromAxisAndAngle(new Vec3(0, 1, 0), Math.PI * 0.5)\r\n      planarYZWidget.getParameter('LocalXfo').setValue(xfo)\r\n      translationHandles.addChild(planarYZWidget)\r\n    }\r\n    {\r\n      const planarXZWidget = new XfoPlanarMovementHandle(\r\n        'planarXZ',\r\n        planarSize,\r\n        new Vec3(planarSize * 0.5, planarSize * 0.5, 0.0),\r\n        green\r\n      )\r\n      const xfo = new Xfo()\r\n      xfo.ori.setFromAxisAndAngle(new Vec3(1, 0, 0), Math.PI * 0.5)\r\n      planarXZWidget.getParameter('LocalXfo').setValue(xfo)\r\n      translationHandles.addChild(planarXZWidget)\r\n    }\r\n\r\n    // ////////////////////////////////\r\n    // Rotation\r\n    const rotationHandles = new TreeItem('Rotate')\r\n    // rotationHandles.setVisible(false)\r\n    this.addChild(rotationHandles)\r\n    // {\r\n    //   const rotationWidget = new SphericalRotationHandle('rotation', size - thickness, new Color(1, 1, 1, 0))\r\n    //   rotationHandles.addChild(rotationWidget)\r\n    // }\r\n    {\r\n      const rotationXWidget = new AxialRotationHandle('rotationX', size * 0.75, thickness, red)\r\n      const xfo = new Xfo()\r\n      xfo.ori.setFromEulerAngles(new EulerAngles(Math.PI * -0.5, Math.PI * -0.5, 0))\r\n      rotationXWidget.getParameter('LocalXfo').setValue(xfo)\r\n      rotationHandles.addChild(rotationXWidget)\r\n    }\r\n    {\r\n      const rotationYWidget = new AxialRotationHandle('rotationY', size * 0.75, thickness, green)\r\n      const xfo = new Xfo()\r\n      xfo.ori.setFromAxisAndAngle(new Vec3(1, 0, 0), Math.PI * -0.5)\r\n      rotationYWidget.getParameter('LocalXfo').setValue(xfo)\r\n      rotationHandles.addChild(rotationYWidget)\r\n    }\r\n    {\r\n      const rotationZWidget = new AxialRotationHandle('rotationZ', size * 0.75, thickness, blue)\r\n      const xfo = new Xfo()\r\n      xfo.ori.setFromAxisAndAngle(new Vec3(0, 0, 1), Math.PI * 0.5)\r\n      rotationZWidget.getParameter('LocalXfo').setValue(xfo)\r\n      rotationHandles.addChild(rotationZWidget)\r\n    }\r\n    /*\r\n    // ////////////////////////////////\r\n    // Scale - Not supported\r\n    const scaleHandles = new TreeItem('Scale')\r\n    scaleHandles.setVisible(false)\r\n    this.addChild(scaleHandles)\r\n\r\n    const scaleHandleLength = size * 0.95\r\n    {\r\n      const scaleXWidget = new LinearScaleHandle('scaleX', scaleHandleLength, thickness, red)\r\n      const xfo = new Xfo()\r\n      xfo.ori.setFromAxisAndAngle(new Vec3(0, 1, 0), Math.PI * 0.5)\r\n      scaleXWidget.getParameter('LocalXfo').setValue(xfo)\r\n      scaleHandles.addChild(scaleXWidget)\r\n    }\r\n    {\r\n      const scaleYWidget = new LinearScaleHandle('scaleY', scaleHandleLength, thickness, green)\r\n      const xfo = new Xfo()\r\n      xfo.ori.setFromAxisAndAngle(new Vec3(1, 0, 0), Math.PI * -0.5)\r\n      scaleYWidget.getParameter('LocalXfo').setValue(xfo)\r\n      scaleHandles.addChild(scaleYWidget)\r\n    }\r\n    {\r\n      const scaleZWidget = new LinearScaleHandle('scaleZ', scaleHandleLength, thickness, blue)\r\n      scaleHandles.addChild(scaleZWidget)\r\n    }\r\n    */\r\n  }\r\n\r\n  /**\r\n   * Calculate the global Xfo for the handles.\r\n   *\r\n   * @return {Xfo} - The Xfo value\r\n   * @private\r\n   */\r\n  _cleanGlobalXfo() {\r\n    const parentItem = this.getParentItem()\r\n    if (parentItem !== undefined) {\r\n      const parentXfo = parentItem.getParameter('GlobalXfo').getValue().clone()\r\n      parentXfo.sc.set(1, 1, 1)\r\n      return parentXfo.multiply(this.__localXfoParam.getValue())\r\n    } else return this.__localXfoParam.getValue()\r\n  }\r\n\r\n  /**\r\n   * Displays handles depending on the specified mode(Move, Rotate, Scale).\r\n   * If nothing is specified, it hides all of them.\r\n   * @deprecated\r\n   * @param {string} handleManipulationMode - The mode of the Xfo parameter\r\n   */\r\n  showHandles(handleManipulationMode) {\r\n    this.setVisible(true)\r\n  }\r\n\r\n  /**\r\n   * Sets global xfo target parameter.\r\n   *\r\n   * @param {Parameter} param - The video param.\r\n   */\r\n  setTargetParam(param) {\r\n    this.param = param\r\n    this.traverse((item) => {\r\n      if (item instanceof Handle) item.setTargetParam(param, false)\r\n    })\r\n  }\r\n}\r\n\r\nexport default XfoHandle\r\nexport { XfoHandle }\r\n","import { Xfo, Group, Operator, OperatorInput, OperatorOutput } from '@zeainc/zea-engine'\r\n\r\n/**\r\n * An operator for aiming items at targets.\r\n *\r\n * @extends {Operator}\r\n */\r\nclass SelectionGroupXfoOperator extends Operator {\r\n  /**\r\n   * Creates an instance of SelectionGroupXfoOperator.\r\n   *\r\n   * @param {number} initialXfoModeParam - Initial XFO Mode, check `INITIAL_XFO_MODES` in `Group` documentation\r\n   * @param {XfoParameter} globalXfoParam - The GlobalXfo param found on the Group.\r\n   */\r\n  constructor(initialXfoModeParam, globalXfoParam) {\r\n    super()\r\n    this.addInput(new OperatorInput('InitialXfoMode')).setParam(initialXfoModeParam)\r\n    this.addOutput(new OperatorOutput('GroupGlobalXfo')).setParam(globalXfoParam)\r\n\r\n    this.currGroupXfo = new Xfo()\r\n  }\r\n\r\n  /**\r\n   * Updates operator inputs(`OperatorInput`) of current `Operator` using the specified `TreeItem`.\r\n   *\r\n   * @param {TreeItem} item - The tree item being added\r\n   */\r\n  addItem(item) {\r\n    this.addInput(new OperatorInput('MemberGlobalXfo' + this.getNumInputs())).setParam(item.getParameter('GlobalXfo'))\r\n    this.setDirty()\r\n  }\r\n\r\n  /**\r\n   * Finds and removes the `OperatorInput` of the specified `TreeItem` from current`Operator`.\r\n   *\r\n   * @param {TreeItem} item - The Bind Xfo calculated from the initial Transforms of the Group Members.\r\n   */\r\n  removeItem(item) {\r\n    // The first input it the 'InitialXfoMode', so remove the input for the specified item.\r\n    const xfoParam = item.getParameter('GlobalXfo')\r\n    for (let i = 1; i < this.getNumInputs(); i++) {\r\n      const input = this.getInputByIndex(i)\r\n      if (input.getParam() == xfoParam) {\r\n        this.removeInput(input)\r\n        this.setDirty()\r\n        return\r\n      }\r\n    }\r\n    throw new Error('Item not found in SelectionGroupXfoOperator')\r\n  }\r\n\r\n  /**\r\n   * Move the group. When the selection group is manipulated, this method is called.\r\n   * Here we propagate the delta to each of the selection members.\r\n   *\r\n   * @param {Xfo} xfo - The new value being set to the Groups GlobalXfo param.\r\n   */\r\n  backPropagateValue(xfo) {\r\n    const invXfo = this.currGroupXfo.inverse()\r\n    const delta = xfo.multiply(invXfo)\r\n    delta.ori.normalizeInPlace()\r\n\r\n    // During interactive manipulation, it is possible on heavy scenes\r\n    // that multiple backPropagateValue calls occur between renders.\r\n    // Note: that the currGroupXfo would not be re-computed in that time,\r\n    // and to this means that we cannot calculate the delta based on the current\r\n    // Value of the output. ('GroupGlobalXfo')\r\n    // By updating the cache of the currGroupXfo value, a successive call to\r\n    // backPropagateValue will apply to the result of the previous call to backPropagateValue\r\n    this.currGroupXfo = delta.multiply(this.currGroupXfo)\r\n    for (let i = 1; i < this.getNumInputs(); i++) {\r\n      const input = this.getInputByIndex(i)\r\n      const currXfo = input.getValue()\r\n      const result = delta.multiply(currXfo)\r\n      input.setValue(result)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculates a new Xfo for the group based on the members.\r\n   */\r\n  evaluate() {\r\n    const groupTransformOutput = this.getOutput('GroupGlobalXfo')\r\n    this.currGroupXfo = new Xfo()\r\n\r\n    if (this.getNumInputs() == 1) {\r\n      groupTransformOutput.setClean(this.currGroupXfo)\r\n      return\r\n    }\r\n\r\n    const initialXfoMode = this.getInput('InitialXfoMode').getValue()\r\n    if (initialXfoMode == Group.INITIAL_XFO_MODES.manual) {\r\n      // The xfo is manually set by the current global xfo.\r\n      this.currGroupXfo = groupTransformOutput.getValue().clone()\r\n      return\r\n    } else if (initialXfoMode == Group.INITIAL_XFO_MODES.first) {\r\n      const itemXfo = this.getInputByIndex(1).getValue()\r\n      this.currGroupXfo.tr = itemXfo.tr.clone()\r\n      this.currGroupXfo.ori = itemXfo.ori.clone()\r\n    } else if (initialXfoMode == Group.INITIAL_XFO_MODES.average) {\r\n      this.currGroupXfo.ori.set(0, 0, 0, 0)\r\n      let numTreeItems = 0\r\n      for (let i = 1; i < this.getNumInputs(); i++) {\r\n        const itemXfo = this.getInputByIndex(i).getValue()\r\n        this.currGroupXfo.tr.addInPlace(itemXfo.tr)\r\n\r\n        // Note: Averaging rotations causes weird and confusing GizmoRotation.\r\n        if (numTreeItems == 0) this.currGroupXfo.ori.addInPlace(itemXfo.ori)\r\n        numTreeItems++\r\n      }\r\n      this.currGroupXfo.tr.scaleInPlace(1 / numTreeItems)\r\n      // this.currGroupXfo.sc.scaleInPlace(1 / numTreeItems);\r\n    } else if (initialXfoMode == Group.INITIAL_XFO_MODES.globalOri) {\r\n      let numTreeItems = 0\r\n      for (let i = 1; i < this.getNumInputs(); i++) {\r\n        const itemXfo = this.getInputByIndex(i).getValue()\r\n        this.currGroupXfo.tr.addInPlace(itemXfo.tr)\r\n        numTreeItems++\r\n      }\r\n      this.currGroupXfo.tr.scaleInPlace(1 / numTreeItems)\r\n    } else {\r\n      throw new Error('Invalid Group.INITIAL_XFO_MODES.')\r\n    }\r\n    this.currGroupXfo.ori.normalizeInPlace()\r\n    groupTransformOutput.setClean(this.currGroupXfo)\r\n  }\r\n}\r\n\r\nexport default SelectionGroupXfoOperator\r\nexport { SelectionGroupXfoOperator }\r\n","import { Color, ColorParameter, BaseItem, TreeItem, SelectionSet, MultiChoiceParameter } from '@zeainc/zea-engine'\r\nimport SelectionGroupXfoOperator from './SelectionGroupXfoOperator.js'\r\n\r\nconst GROUP_XFO_MODES = {\r\n  disabled: 0,\r\n  manual: 1,\r\n  first: 2,\r\n  average: 3,\r\n  globalOri: 4,\r\n}\r\n\r\n/**\r\n * A specific type of `Group` class that contains/handles selection of one or more items from the scene.\r\n *\r\n * **Option parameter values**\r\n *\r\n * | Option | type | default | Description |\r\n * | --- | --- | --- | --- |\r\n * | selectionOutlineColor | `Color` | `new Color('#03e3ac'))`  and opacity of `0.1` | See `Color` documentation |\r\n * | branchSelectionOutlineColor | `Color` | `new Color('#81f1d5')` and opacity of `0.55` | See `Color` documentation |\r\n *\r\n * @extends {Group}\r\n */\r\nclass SelectionGroup extends SelectionSet {\r\n  /**\r\n   * Creates an instance of SelectionGroup.\r\n   *\r\n   *\r\n   * **Parameters**\r\n   * @param {object} options - Custom options for selection\r\n   */\r\n  constructor(options) {\r\n    super()\r\n\r\n    let selectionColor\r\n    let subtreeColor\r\n    options.selectionOutlineColor\r\n      ? (selectionColor = options.selectionOutlineColor)\r\n      : (selectionColor = new Color(3 / 255, 227 / 255, 172 / 255, 0.1))\r\n\r\n    if (options.branchSelectionOutlineColor) subtreeColor = options.branchSelectionOutlineColor\r\n    else {\r\n      subtreeColor = selectionColor.lerp(new Color('white'), 0.5)\r\n      subtreeColor.a = 0.1\r\n    }\r\n\r\n    this.getParameter('HighlightColor').setValue(selectionColor)\r\n    this.addParameter(new ColorParameter('SubtreeHighlightColor', subtreeColor))\r\n\r\n    this.__itemsParam.setFilterFn((item) => item instanceof BaseItem)\r\n\r\n    this.__initialXfoModeParam = this.addParameter(\r\n      new MultiChoiceParameter('InitialXfoMode', GROUP_XFO_MODES.average, ['manual', 'first', 'average', 'global'])\r\n    )\r\n\r\n    this.selectionGroupXfoOp = new SelectionGroupXfoOperator(\r\n      this.getParameter('InitialXfoMode'),\r\n      this.getParameter('GlobalXfo')\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Returns enum of available xfo modes.\r\n   *\r\n   * | Name | Default |\r\n   * | --- | --- |\r\n   * | manual | <code>0</code> |\r\n   * | first | <code>1</code> |\r\n   * | average | <code>2</code> |\r\n   * | globalOri | <code>3</code> |\r\n   */\r\n  static get INITIAL_XFO_MODES() {\r\n    return GROUP_XFO_MODES\r\n  }\r\n\r\n  /**\r\n   * Constructs a new selection group by copying the values from current one and returns it.\r\n   *\r\n   * @return {SelectionGroup} - Cloned selection group.\r\n   */\r\n  clone() {\r\n    const cloned = new SelectionGroup()\r\n    cloned.copyFrom(this)\r\n    return cloned\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {TreeItem} item -\r\n   * @param {number} index -\r\n   * @private\r\n   */\r\n  __bindItem(item, index) {\r\n    if (item instanceof TreeItem) {\r\n      const highlightColor = this.getParameter('HighlightColor').getValue()\r\n      highlightColor.a = this.getParameter('HighlightFill').getValue()\r\n      item.addHighlight('selected' + this.getId(), highlightColor, false)\r\n\r\n      const subTreeColor = this.getParameter('SubtreeHighlightColor').getValue()\r\n      item.getChildren().forEach((childItem) => {\r\n        if (childItem instanceof TreeItem) {\r\n          childItem.addHighlight('branchselected' + this.getId(), subTreeColor, true)\r\n        }\r\n      })\r\n\r\n      this.selectionGroupXfoOp.addItem(item, index)\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {TreeItem} item -\r\n   * @param {number} index -\r\n   * @private\r\n   */\r\n  __unbindItem(item, index) {\r\n    if (item instanceof TreeItem) {\r\n      item.removeHighlight('selected' + this.getId())\r\n      item.getChildren().forEach((childItem) => {\r\n        if (childItem instanceof TreeItem) {\r\n          childItem.removeHighlight('branchselected' + this.getId(), true)\r\n        }\r\n      })\r\n\r\n      this.selectionGroupXfoOp.removeItem(item, index)\r\n    }\r\n  }\r\n}\r\n\r\nexport default SelectionGroup\r\nexport { SelectionGroup }\r\n","import UndoRedoManager from '../UndoRedoManager'\r\nimport Change from '../Change'\r\n\r\n/**\r\n * Represents a `Change` class for storing `Selection` values.\r\n *\r\n * @extends Change\r\n */\r\nclass SelectionChange extends Change {\r\n  /**\r\n   * Creates an instance of SelectionChange.\r\n   *\r\n   * @param {SelectionManager} selectionManager - The selectionManager value.\r\n   * @param {Set} prevSelection - The prevSelection value.\r\n   * @param {Set} newSelection - The newSelection value.\r\n   */\r\n  constructor(selectionManager, prevSelection, newSelection) {\r\n    super('SelectionChange')\r\n    this.__selectionManager = selectionManager\r\n    this.__prevSelection = prevSelection\r\n    this.__newSelection = newSelection\r\n  }\r\n\r\n  /**\r\n   * Sets the state of selections to the previous list of items selected.\r\n   */\r\n  undo() {\r\n    this.__selectionManager.setSelection(this.__prevSelection, false)\r\n  }\r\n\r\n  /**\r\n   * Restores the state of the selections to the latest the list of items selected.\r\n   */\r\n  redo() {\r\n    this.__selectionManager.setSelection(this.__newSelection, false)\r\n  }\r\n\r\n  /**\r\n   * Serializes selection values as a JSON object, allowing persistence/replication.\r\n   *\r\n   * @param {object} context - The appData param.\r\n   * @return {object} The return value.\r\n   */\r\n  toJSON(context) {\r\n    const j = super.toJSON(context)\r\n\r\n    const itemPaths = []\r\n    for (const treeItem of this.__newSelection) {\r\n      itemPaths.push(treeItem.getPath())\r\n    }\r\n    j.itemPaths = itemPaths\r\n    return j\r\n  }\r\n\r\n  /**\r\n   * Restores selection state from a JSON object.\r\n   *\r\n   * @param {object} j - The j param.\r\n   * @param {object} context - The context param.\r\n   */\r\n  fromJSON(j, context) {\r\n    super.fromJSON(j, context)\r\n\r\n    this.__selectionManager = context.appData.selectionManager\r\n    this.__prevSelection = new Set(this.__selectionManager.getSelection())\r\n\r\n    const sceneRoot = context.appData.scene.getRoot()\r\n    const newSelection = new Set()\r\n    for (const itemPath of j.itemPaths) {\r\n      newSelection.add(sceneRoot.resolvePath(itemPath, 1))\r\n    }\r\n    this.__newSelection = newSelection\r\n\r\n    this.__selectionManager.setSelection(this.__newSelection, false)\r\n  }\r\n}\r\n\r\nUndoRedoManager.registerChange('SelectionChange', SelectionChange)\r\n\r\nexport default SelectionChange\r\nexport { SelectionChange }\r\n","import UndoRedoManager from '../UndoRedoManager'\r\nimport Change from '../Change'\r\n\r\n/**\r\n * Class representing a change of visibility state for selected items.\r\n *\r\n * @extends Change\r\n */\r\nclass SelectionVisibilityChange extends Change {\r\n  /**\r\n   * Create a toggle selection visibility.\r\n   *\r\n   * @param {Set} selection - The selection value.\r\n   * @param {boolean} state - The state value.\r\n   */\r\n  constructor(selection, state) {\r\n    super('Selection Visibility Change')\r\n    this.selection = selection\r\n    this.state = state\r\n    this._changeItemsVisibility(this.state)\r\n  }\r\n\r\n  /**\r\n   * Restores previous visibility status of the selected items\r\n   */\r\n  undo() {\r\n    this._changeItemsVisibility(!this.state)\r\n  }\r\n\r\n  /**\r\n   * Recreates previous visibility status of the selected items\r\n   */\r\n  redo() {\r\n    this._changeItemsVisibility(this.state)\r\n  }\r\n\r\n  /**\r\n   * Changes items visibility.\r\n   *\r\n   * @param {boolean} state - The state param.\r\n   * @private\r\n   */\r\n  _changeItemsVisibility(state) {\r\n    for (const treeItem of this.selection) {\r\n      treeItem.getParameter('Visible').setValue(state)\r\n    }\r\n  }\r\n}\r\n\r\nUndoRedoManager.registerChange('ToggleSelectionVisibility', SelectionVisibilityChange)\r\n\r\nexport default SelectionVisibilityChange\r\nexport { SelectionVisibilityChange }\r\n","import { EventEmitter, Color } from '@zeainc/zea-engine'\r\nimport XfoHandle from './Handles/XfoHandle'\r\nimport SelectionGroup from './SelectionGroup'\r\nimport SelectionChange from './UndoRedo/Changes/SelectionChange'\r\nimport SelectionVisibilityChange from './UndoRedo/Changes/SelectionVisibilityChange'\r\nimport UndoRedoManager from './UndoRedo/UndoRedoManager'\r\n\r\n/**\r\n * Class representing a selection manager\r\n *\r\n * **Events**\r\n * **leadSelectionChanged:** Triggered when selecting one item.\r\n * **selectionChanged:** Triggered when the selected objects change.\r\n *\r\n * @extends {EventEmitter}\r\n */\r\nclass SelectionManager extends EventEmitter {\r\n  /**\r\n   * Creates an instance of SelectionManager.\r\n   *\r\n   * @param {object} appData - The options object.\r\n   * @param {object} [options={}] - The appData value.\r\n   *  enableXfoHandles - enables display Xfo Gizmo handles when items are selected.\r\n   *  selectionOutlineColor - enables highlight color to use to outline selected items.\r\n   *  branchSelectionOutlineColor - enables highlight color to use to outline selected items.\r\n   */\r\n  constructor(appData, options = {}) {\r\n    super()\r\n    this.appData = appData\r\n    this.leadSelection = undefined\r\n    this.selectionGroup = new SelectionGroup(options)\r\n\r\n    if (options.enableXfoHandles === true) {\r\n      const size = 0.1\r\n      const thickness = size * 0.02\r\n      this.xfoHandle = new XfoHandle(size, thickness)\r\n      this.xfoHandle.setTargetParam(this.selectionGroup.getParameter('GlobalXfo'), false)\r\n      this.xfoHandle.setVisible(false)\r\n      this.xfoHandle.getParameter('HighlightColor').setValue(new Color(1, 1, 0))\r\n      this.xfoHandleVisible = true\r\n\r\n      this.selectionGroup.addChild(this.xfoHandle)\r\n    }\r\n\r\n    if (this.appData.renderer) {\r\n      this.setRenderer(this.appData.renderer)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds specified the renderer to the `SelectionManager` and attaches the `SelectionGroup`.\r\n   *\r\n   * @param {GLBaseRenderer} renderer - The renderer param.\r\n   */\r\n  setRenderer(renderer) {\r\n    if (this.__renderer == renderer) {\r\n      console.warn(`Renderer already set on SelectionManager`)\r\n      return\r\n    }\r\n    this.__renderer = renderer\r\n    this.__renderer.addTreeItem(this.selectionGroup)\r\n  }\r\n\r\n  /**\r\n   * Sets initial Xfo mode of the selection group.\r\n   *\r\n   * @see `Group` class documentation\r\n   *\r\n   * @param {number} mode - The Xfo mode\r\n   */\r\n  setXfoMode(mode) {\r\n    if (this.xfoHandle) {\r\n      this.selectionGroup.getParameter('InitialXfoMode').setValue(mode)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Displays handles depending on the specified mode(Move, Rotate, Scale).\r\n   * If nothing is specified, it hides all of them.\r\n   * @deprecated\r\n   * @param {boolean} enabled - The mode of the Xfo parameter\r\n   */\r\n  showHandles(enabled) {\r\n    this.xfoHandleVisible = enabled\r\n  }\r\n\r\n  /**\r\n   * Determines if the Xfo Manipulation handle should be displayed or not.\r\n   */\r\n  updateHandleVisibility() {\r\n    if (!this.xfoHandle) return\r\n    const selection = this.selectionGroup.getItems()\r\n    const visible = Array.from(selection).length > 0\r\n    this.xfoHandle.setVisible(visible && this.xfoHandleVisible)\r\n    this.__renderer.requestRedraw()\r\n  }\r\n\r\n  /**\r\n   * Returns an array with the selected items.\r\n   *\r\n   * @return {array} - The return value.\r\n   */\r\n  getSelection() {\r\n    return this.selectionGroup.getItems()\r\n  }\r\n\r\n  /**\r\n   * Sets a new selection of items in the `SelectionManager`\r\n   *\r\n   * @param {Set} newSelection - The newSelection param\r\n   * @param {boolean} [createUndo=true] - The createUndo param\r\n   */\r\n  setSelection(newSelection, createUndo = true) {\r\n    const selection = new Set(this.selectionGroup.getItems())\r\n    const prevSelection = new Set(selection)\r\n    for (const treeItem of newSelection) {\r\n      if (!selection.has(treeItem)) {\r\n        treeItem.setSelected(true)\r\n        selection.add(treeItem)\r\n      }\r\n    }\r\n    for (const treeItem of selection) {\r\n      if (!newSelection.has(treeItem)) {\r\n        treeItem.setSelected(false)\r\n        selection.delete(treeItem)\r\n      }\r\n    }\r\n\r\n    this.selectionGroup.setItems(selection)\r\n\r\n    // Deselecting can change the lead selected item.\r\n    if (selection.size > 0) this.__setLeadSelection(selection.values().next().value)\r\n    else this.__setLeadSelection()\r\n    this.updateHandleVisibility()\r\n\r\n    if (createUndo) {\r\n      const change = new SelectionChange(this, prevSelection, selection)\r\n      UndoRedoManager.getInstance().addChange(change)\r\n    }\r\n\r\n    this.emit('selectionChanged', { prevSelection, selection })\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {TreeItem} treeItem - The treeItem value\r\n   * @private\r\n   */\r\n  __setLeadSelection(treeItem) {\r\n    if (this.leadSelection != treeItem) {\r\n      this.leadSelection = treeItem\r\n      this.emit('leadSelectionChanged', { treeItem })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The toggleItemSelection method.\r\n   *\r\n   * @param {TreeItem} treeItem - The treeItem param.\r\n   * @param {boolean} replaceSelection - The replaceSelection param.\r\n   */\r\n  toggleItemSelection(treeItem, replaceSelection = true) {\r\n    const selection = new Set(this.selectionGroup.getItems())\r\n    const prevSelection = new Set(selection)\r\n\r\n    // Avoid clearing the selection when we have the\r\n    // item already selected and are deselecting it.\r\n    // (to clear all selection)\r\n    if (replaceSelection && !(selection.size == 1 && selection.has(treeItem))) {\r\n      let clear = true\r\n      if (selection.has(treeItem)) {\r\n        let count = 1\r\n        treeItem.traverse((subTreeItem) => {\r\n          if (selection.has(subTreeItem)) {\r\n            count++\r\n          }\r\n        })\r\n        // Note: In some cases, the item is currently selected, and\r\n        // its children make up all the selected items. In that case\r\n        // the user intends to deselect the item and all its children.\r\n        // Avoid cleaning here, so the deselection can occur.\r\n        clear = count != selection.size\r\n      }\r\n\r\n      if (clear) {\r\n        Array.from(selection).forEach((item) => {\r\n          item.setSelected(false)\r\n        })\r\n        selection.clear()\r\n      }\r\n    }\r\n\r\n    let sel\r\n    if (!selection.has(treeItem)) {\r\n      treeItem.setSelected(true)\r\n      selection.add(treeItem)\r\n      sel = true\r\n    } else {\r\n      treeItem.setSelected(false)\r\n      selection.delete(treeItem)\r\n      sel = false\r\n    }\r\n\r\n    // const preExpandSelSize = selection.size;\r\n\r\n    // Now expand the selection to the subtree.\r\n    // treeItem.traverse((subTreeItem)=>{\r\n    //   if (sel) {\r\n    //     if(!selection.has(subTreeItem)) {\r\n    //       // subTreeItem.setSelected(true);\r\n    //       selection.add(subTreeItem);\r\n    //       // this.selectionGroup.addItem(treeItem);\r\n    //     }\r\n    //   }\r\n    //   else {\r\n    //     if(selection.has(subTreeItem)) {\r\n    //       subTreeItem.setSelected(false);\r\n    //       selection.delete(subTreeItem);\r\n    //       // this.selectionGroup.removeItem(treeItem);\r\n    //     }\r\n    //   }\r\n    // })\r\n\r\n    this.selectionGroup.setItems(selection)\r\n\r\n    if (sel && selection.size === 1) {\r\n      this.__setLeadSelection(treeItem)\r\n    } else if (!sel) {\r\n      // Deselecting can change the lead selected item.\r\n      if (selection.size === 1) this.__setLeadSelection(selection.values().next().value)\r\n      else if (selection.size === 0) this.__setLeadSelection()\r\n    }\r\n\r\n    const change = new SelectionChange(this, prevSelection, selection)\r\n    UndoRedoManager.getInstance().addChange(change)\r\n\r\n    this.updateHandleVisibility()\r\n    this.emit('selectionChanged', { prevSelection, selection })\r\n  }\r\n\r\n  /**\r\n   * Clears selection state by removing previous selected items and the Xfo handlers.\r\n   *\r\n   * @param {boolean} newChange - The newChange param.\r\n   * @return {boolean} - The return value.\r\n   */\r\n  clearSelection(newChange = true) {\r\n    const selection = new Set(this.selectionGroup.getItems())\r\n    if (selection.size == 0) return false\r\n    let prevSelection\r\n    if (newChange) {\r\n      prevSelection = new Set(selection)\r\n    }\r\n    for (const treeItem of selection) {\r\n      treeItem.setSelected(false)\r\n    }\r\n    selection.clear()\r\n    this.selectionGroup.setItems(selection)\r\n    this.updateHandleVisibility()\r\n    if (newChange) {\r\n      const change = new SelectionChange(this, prevSelection, selection)\r\n      UndoRedoManager.getInstance().addChange(change)\r\n      this.emit('selectionChanged', { selection, prevSelection })\r\n    }\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Selects the specified items replacing previous selection or concatenating new items to it.\r\n   *\r\n   * @param {array} treeItems - The treeItems param.\r\n   * @param {boolean} replaceSelection - The replaceSelection param.\r\n   */\r\n  selectItems(treeItems, replaceSelection = true) {\r\n    const selection = new Set(this.selectionGroup.getItems())\r\n    const prevSelection = new Set(selection)\r\n\r\n    if (replaceSelection) {\r\n      selection.clear()\r\n    }\r\n\r\n    for (const treeItem of treeItems) {\r\n      if (!selection.has(treeItem)) {\r\n        treeItem.setSelected(true)\r\n        selection.add(treeItem)\r\n      }\r\n    }\r\n\r\n    const change = new SelectionChange(this, prevSelection, selection)\r\n\r\n    UndoRedoManager.getInstance().addChange(change)\r\n\r\n    this.selectionGroup.setItems(selection)\r\n    if (selection.size === 1) {\r\n      this.__setLeadSelection(selection.values().next().value)\r\n    } else if (selection.size === 0) {\r\n      this.__setLeadSelection()\r\n    }\r\n    this.updateHandleVisibility()\r\n    this.emit('selectionChanged', { prevSelection, selection })\r\n  }\r\n\r\n  /**\r\n   * Deselects the specified items from the selection group.\r\n   *\r\n   * @param {array} treeItems - The treeItems param.\r\n   */\r\n  deselectItems(treeItems) {\r\n    const selection = new Set(this.selectionGroup.getItems())\r\n    const prevSelection = new Set(selection)\r\n\r\n    for (const treeItem of treeItems) {\r\n      if (selection.has(treeItem)) {\r\n        treeItem.setSelected(false)\r\n        selection.delete(treeItem)\r\n      }\r\n    }\r\n\r\n    this.selectionGroup.setItems(selection)\r\n    const change = new SelectionChange(this, prevSelection, selection)\r\n\r\n    UndoRedoManager.getInstance().addChange(change)\r\n\r\n    if (selection.size === 1) {\r\n      this.__setLeadSelection(selection.values().next().value)\r\n    } else if (selection.size === 0) {\r\n      this.__setLeadSelection()\r\n    }\r\n    this.updateHandleVisibility()\r\n    this.emit('selectionChanged', { prevSelection, selection })\r\n  }\r\n\r\n  /**\r\n   * Toggles selection visibility, if the visibility is `true`then sets it to `false` and vice versa.\r\n   */\r\n  toggleSelectionVisibility() {\r\n    if (this.leadSelection) {\r\n      const selection = this.selectionGroup.getItems()\r\n      const state = !this.leadSelection.getVisible()\r\n      const change = new SelectionVisibilityChange(selection, state)\r\n      UndoRedoManager.getInstance().addChange(change)\r\n    }\r\n  }\r\n\r\n  // ////////////////////////////////////\r\n  /**\r\n   * The startPickingMode method.\r\n   *\r\n   * @param {string} label - The label param.\r\n   * @param {function} fn - The fn param.\r\n   * @param {function} filterFn - The filterFn param.\r\n   * @param {number} count - The count param.\r\n   */\r\n  startPickingMode(label, fn, filterFn, count) {\r\n    // Display this in a status bar.\r\n    console.log(label)\r\n    this.__pickCB = fn\r\n    this.__pickFilter = filterFn\r\n    this.__pickCount = count\r\n    this.__picked = []\r\n  }\r\n\r\n  /**\r\n   * The pickingFilter method.\r\n   *\r\n   * @param {TreeItem} item - The item param.\r\n   * @return {any} The return value.\r\n   */\r\n  pickingFilter(item) {\r\n    return this.__pickFilter(item)\r\n  }\r\n\r\n  /**\r\n   * The pickingModeActive method.\r\n   *\r\n   * @return {boolean} The return value.\r\n   */\r\n  pickingModeActive() {\r\n    return this.__pickCB != undefined\r\n  }\r\n\r\n  /**\r\n   * The cancelPickingMode method.\r\n   */\r\n  cancelPickingMode() {\r\n    this.__pickCB = undefined\r\n  }\r\n\r\n  /**\r\n   * The pick method.\r\n   * @param {TreeItem} item - The item param.\r\n   */\r\n  pick(item) {\r\n    if (this.__pickCB) {\r\n      if (Array.isArray(item)) {\r\n        if (this.__pickFilter) this.__picked = this.__picked.concat(item.filter(this.__pickFilter))\r\n        else this.__picked = this.__picked.concat(item)\r\n      } else {\r\n        if (this.__pickFilter && !this.__pickFilter(item)) return\r\n        this.__picked.push(item)\r\n      }\r\n      if (this.__picked.length == this.__pickCount) {\r\n        this.__pickCB(this.__picked)\r\n        this.__pickCB = undefined\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default SelectionManager\r\nexport { SelectionManager }\r\n","import { TreeItem, Operator, Registry } from '@zeainc/zea-engine'\r\nimport UndoRedoManager from '../UndoRedoManager.js'\r\nimport Change from '../Change.js'\r\n\r\n/**\r\n * Class representing an `Add TreeItem` Change. Meaning that this should be called when you add a new `TreeItem` to the scene.\r\n *\r\n * @extends Change\r\n */\r\nclass TreeItemAddChange extends Change {\r\n  /**\r\n   * Creates an instance of TreeItemAddChange.\r\n   *\r\n   * @param {TreeItem} treeItem -\r\n   * @param {TreeItem} owner -\r\n   * @param {SelectionManager} selectionManager -\r\n   */\r\n  constructor(treeItem, owner, selectionManager) {\r\n    if (treeItem) {\r\n      super(treeItem.getName() + ' Added')\r\n      this.treeItem = treeItem\r\n      this.owner = owner\r\n      this.selectionManager = selectionManager\r\n      this.prevSelection = new Set(this.selectionManager.getSelection())\r\n      this.treeItemIndex = this.owner.addChild(this.treeItem)\r\n      this.selectionManager.setSelection(new Set([this.treeItem]), false)\r\n\r\n      this.treeItem.addRef(this)\r\n    } else {\r\n      super()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes the newly added TreeItem from its owner.\r\n   */\r\n  undo() {\r\n    if (this.treeItem instanceof Operator) {\r\n      const op = this.treeItem\r\n      op.detach()\r\n    } else if (this.treeItem instanceof TreeItem) {\r\n      this.treeItem.traverse((subTreeItem) => {\r\n        if (subTreeItem instanceof Operator) {\r\n          const op = subTreeItem\r\n          op.detach()\r\n        }\r\n      }, false)\r\n    }\r\n    this.owner.removeChild(this.treeItemIndex)\r\n    if (this.selectionManager) this.selectionManager.setSelection(this.prevSelection, false)\r\n  }\r\n\r\n  /**\r\n   * Restores undone `TreeItem`.\r\n   */\r\n  redo() {\r\n    // Now re-attach all the detached operators.\r\n    if (this.treeItem instanceof Operator) {\r\n      const op = this.treeItem\r\n      op.reattach()\r\n    } else if (subTreeItem instanceof TreeItem) {\r\n      this.treeItem.traverse((subTreeItem) => {\r\n        if (subTreeItem instanceof Operator) {\r\n          const op = subTreeItem\r\n          op.reattach()\r\n        }\r\n      }, false)\r\n    }\r\n    this.owner.addChild(this.treeItem)\r\n    if (this.selectionManager) this.selectionManager.setSelection(new Set([this.treeItem]), false)\r\n  }\r\n\r\n  /**\r\n   * Serializes `TreeItem` like instanced class into a JSON object.\r\n   *\r\n   * @param {object} context - The context treeItem\r\n   * @return {object} - JSON object\r\n   */\r\n  toJSON(context) {\r\n    const j = {\r\n      name: this.name,\r\n      treeItem: this.treeItem.toJSON(context),\r\n      treeItemPath: this.treeItem.getPath(),\r\n      treeItemIndex: this.treeItemIndex,\r\n    }\r\n    return j\r\n  }\r\n\r\n  /**\r\n   * Reconstructs `TreeItem` like parameter from JSON object.\r\n   *\r\n   * @param {object} j -The j treeItem\r\n   * @param {object} context - The context treeItem\r\n   */\r\n  fromJSON(j, context) {\r\n    const treeItem = Registry.constructClass(j.treeItem.type)\r\n    if (!treeItem) {\r\n      console.warn('resolvePath is unable to construct', j.treeItem)\r\n      return\r\n    }\r\n    this.name = j.name\r\n    this.treeItem = treeItem\r\n    this.treeItem.addRef(this)\r\n\r\n    this.treeItem.fromJSON(j.treeItem, context)\r\n    this.treeItemIndex = this.owner.addChild(this.treeItem, false, false)\r\n  }\r\n\r\n  /**\r\n   * Removes reference of the `TreeItem` from current change.\r\n   */\r\n  destroy() {\r\n    this.treeItem.removeRef(this)\r\n  }\r\n}\r\n\r\nUndoRedoManager.registerChange('TreeItemAddChange', TreeItemAddChange)\r\n\r\nexport { TreeItemAddChange }\r\n","import UndoRedoManager from '../UndoRedoManager.js'\r\nimport Change from '../Change.js'\r\n\r\n/**\r\n * Class representing a `Move TreeItem` Change(Moving a TreeItem from one parent to another).\r\n *\r\n * @extends Change\r\n */\r\nclass TreeItemMoveChange extends Change {\r\n  /**\r\n   * Creates an instance of TreeItemMoveChange.\r\n   *\r\n   * @param {TreeItem} treeItem - The item to move.\r\n   * @param {TreeItem} newOwner - The new owner item.\r\n   * @memberof TreeItemMoveChange\r\n   */\r\n  constructor(treeItem, newOwner) {\r\n    if (treeItem) {\r\n      super(treeItem.getName() + ' Moved')\r\n      this.treeItem = treeItem\r\n      this.oldOwner = this.treeItem.getOwner()\r\n      this.oldOwnerIndex = this.oldOwner.getChildIndex(this.treeItem)\r\n      this.newOwner = newOwner\r\n      this.newOwner.addChild(this.treeItem, true)\r\n    } else {\r\n      super()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Inserts back the moved TreeItem in the old owner item(Rollbacks the move action).\r\n   */\r\n  undo() {\r\n    this.oldOwner.insertChild(this.treeItem, this.oldOwnerIndex, true)\r\n  }\r\n\r\n  /**\r\n   * Executes the move action inserting the TreeItem back to the new owner item.\r\n   */\r\n  redo() {\r\n    this.newOwner.addChild(this.treeItem, true)\r\n  }\r\n\r\n  /**\r\n   * Returns a JSON object with the specifications of the change(Typically used for replication).\r\n   *\r\n   * @param {object} context - The context value\r\n   * @return {object} - JSON object of the change\r\n   */\r\n  toJSON(context) {\r\n    const j = {\r\n      name: this.name,\r\n      treeItemPath: this.treeItem.getPath(),\r\n      newOwnerPath: this.newOwner.getPath(),\r\n    }\r\n\r\n    return j\r\n  }\r\n\r\n  /**\r\n   * Restores the Change state from the specified JSON object.\r\n   *\r\n   * @param {object} j - The serialized object with the change data.\r\n   * @param {object} context - The context value\r\n   */\r\n  fromJSON(j, context) {\r\n    const treeItem = appData.scene.getRoot().resolvePath(j.treeItemPath, 1)\r\n    if (!treeItem) {\r\n      console.warn('resolvePath is unable to resolve', j.treeItemPath)\r\n      return\r\n    }\r\n    const newOwner = appData.scene.getRoot().resolvePath(j.newOwnerPath, 1)\r\n    if (!newOwner) {\r\n      console.warn('resolvePath is unable to resolve', j.newOwnerPath)\r\n      return\r\n    }\r\n    this.name = j.name\r\n    this.treeItem = treeItem\r\n    this.newOwner = newOwner\r\n\r\n    this.oldOwner = this.treeItem.getOwner()\r\n    this.oldOwnerIndex = this.oldOwner.getChildIndex(this.treeItem)\r\n    this.newOwner.addChild(this.treeItem, true)\r\n  }\r\n}\r\n\r\nUndoRedoManager.registerChange('TreeItemMoveChange', TreeItemMoveChange)\r\n\r\nexport { TreeItemMoveChange }\r\n","import { TreeItem, Operator } from '@zeainc/zea-engine'\r\nimport UndoRedoManager from '../UndoRedoManager.js'\r\nimport Change from '../Change.js'\r\n\r\n/**\r\n * Class representing a TreeItems removal Change,\r\n * taking into account that it would remove all the specified items ti their children\r\n *\r\n * @extends Change\r\n */\r\nclass TreeItemsRemoveChange extends Change {\r\n  /**\r\n   * Creates an instance of TreeItemsRemoveChange.\r\n   *\r\n   * @param {array} items - List of TreeItems\r\n   * @param {object} appData - The appData value\r\n   */\r\n  constructor(items, appData) {\r\n    super()\r\n    this.items = []\r\n    this.itemOwners = []\r\n    this.itemPaths = []\r\n    this.itemIndices = []\r\n    if (items) {\r\n      this.selectionManager = appData.selectionManager\r\n      this.prevSelection = new Set(this.selectionManager.getSelection())\r\n      this.items = items\r\n      this.newSelection = new Set(this.prevSelection)\r\n\r\n      const itemNames = []\r\n      this.items.forEach((item) => {\r\n        const owner = item.getOwner()\r\n        const itemIndex = owner.getChildIndex(item)\r\n        itemNames.push(item.getName())\r\n        item.addRef(this)\r\n        this.itemOwners.push(owner)\r\n        this.itemPaths.push(item.getPath())\r\n        this.itemIndices.push(itemIndex)\r\n\r\n        if (this.selectionManager && this.newSelection.has(item)) this.newSelection.delete(item)\r\n        if (item instanceof Operator) {\r\n          const op = item\r\n          op.detach()\r\n        } else if (item instanceof TreeItem) {\r\n          item.traverse((subTreeItem) => {\r\n            if (subTreeItem instanceof Operator) {\r\n              const op = subTreeItem\r\n              op.detach()\r\n            }\r\n            if (this.selectionManager && this.newSelection.has(subTreeItem)) this.newSelection.delete(subTreeItem)\r\n          }, false)\r\n        }\r\n\r\n        owner.removeChild(itemIndex)\r\n      })\r\n      this.selectionManager.setSelection(this.newSelection, false)\r\n\r\n      this.name = itemNames + ' Deleted'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restores all items removed in the change, reattaching them to their old owners.\r\n   */\r\n  undo() {\r\n    this.items.forEach((item, index) => {\r\n      this.itemOwners[index].insertChild(item, this.itemIndices[index], false, false)\r\n\r\n      // Now re-attach all the detached operators.\r\n      if (item instanceof Operator) {\r\n        const op = item\r\n        op.reattach()\r\n      } else if (subTreeItem instanceof TreeItem) {\r\n        item.traverse((subTreeItem) => {\r\n          if (subTreeItem instanceof Operator) {\r\n            const op = subTreeItem\r\n            op.reattach()\r\n          }\r\n        }, false)\r\n      }\r\n    })\r\n    if (this.selectionManager) this.selectionManager.setSelection(this.prevSelection, false)\r\n  }\r\n\r\n  /**\r\n   * Executes initial change to remove items from their owners.\r\n   */\r\n  redo() {\r\n    if (this.selectionManager) this.selectionManager.setSelection(this.newSelection, false)\r\n\r\n    // Now re-detach all the operators.\r\n    this.items.forEach((item, index) => {\r\n      this.itemOwners[index].removeChild(this.itemIndices[index])\r\n\r\n      if (item instanceof Operator) {\r\n        const op = item\r\n        op.detach()\r\n      } else if (subTreeItem instanceof TreeItem) {\r\n        item.traverse((subTreeItem) => {\r\n          if (subTreeItem instanceof Operator) {\r\n            const op = subTreeItem\r\n            op.detach()\r\n          }\r\n        }, false)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Serializes current change data as a JSON object, so this action can be stored/replicated somewhere else.\r\n   *\r\n   * @param {object} appData - The appData value\r\n   * @return {object} - JSON Object representation of current change\r\n   * @memberof TreeItemsRemoveChange\r\n   */\r\n  toJSON(appData) {\r\n    const j = {\r\n      name: this.name,\r\n      items: [],\r\n      itemPaths: this.itemPaths,\r\n      itemIndices: this.itemIndices,\r\n    }\r\n    this.items.forEach((item) => {\r\n      j.items.push(item.toJSON())\r\n    })\r\n    return j\r\n  }\r\n\r\n  /**\r\n   * Restores Change action from a JSON object.\r\n   *\r\n   * @param {object} j - The JSON object with Change data.\r\n   * @param {object} appData - The appData value\r\n   * @memberof TreeItemsRemoveChange\r\n   */\r\n  fromJSON(j, appData) {\r\n    this.name = j.name\r\n    j.itemPaths.forEach((itemPath) => {\r\n      const item = appData.scene.getRoot().resolvePath(itemPath, 1)\r\n      if (!item) {\r\n        console.warn('resolvePath is unable to resolve', itemPath)\r\n        return\r\n      }\r\n      const owner = item.getOwner()\r\n      this.itemOwners.push(owner)\r\n      this.itemPaths.push(item.getPath())\r\n      this.itemIndices.push(owner.getChildIndex(item))\r\n    })\r\n  }\r\n\r\n  /**\r\n   * The destroy method cleans up any data requiring manual cleanup.\r\n   * Deleted items still on the undo stack are then flushed and any\r\n   * GPU resources cleaned up.\r\n   */\r\n  destroy() {\r\n    this.items.forEach((item) => item.removeRef(this))\r\n  }\r\n}\r\n\r\nUndoRedoManager.registerChange('TreeItemsRemoveChange', TreeItemsRemoveChange)\r\n\r\nexport { TreeItemsRemoveChange }\r\n","import { Vec2, Color, Xfo, GeomItem, Material, Rect, BaseTool } from '@zeainc/zea-engine'\r\n\r\nimport UndoRedoManager from '../UndoRedo/UndoRedoManager'\r\nimport Handle from '../Handles/Handle'\r\n\r\n/**\r\n * Class representing a selection tool.\r\n *\r\n * @extends BaseTool\r\n */\r\nclass SelectionTool extends BaseTool {\r\n  /**\r\n   * Creates an instance of SelectionTool.\r\n   *\r\n   * @param {object} appData - The appData value\r\n   */\r\n  constructor(appData) {\r\n    super()\r\n\r\n    if (!appData) console.error('App data not provided to tool')\r\n    this.appData = appData\r\n    this.dragging = false\r\n    if (!appData.selectionManager)\r\n      console.error('`SelectionTool` requires `SelectionManager` to be provided in the `appData` object')\r\n    this.selectionManager = appData.selectionManager\r\n\r\n    this.selectionRect = new Rect(1, 1)\r\n    this.selectionRectMat = new Material('marker', 'ScreenSpaceShader')\r\n    this.selectionRectMat.getParameter('BaseColor').setValue(new Color('#03E3AC'))\r\n    this.selectionRectXfo = new Xfo()\r\n    this.selectionRectXfo.tr.set(0.5, 0.5, 0)\r\n    this.selectionRectXfo.sc.set(0, 0, 0)\r\n\r\n    this.rectItem = new GeomItem('selectionRect', this.selectionRect, this.selectionRectMat)\r\n    this.rectItem.getParameter('Visible').setValue(false)\r\n    this.appData.renderer.addTreeItem(this.rectItem)\r\n  }\r\n\r\n  /**\r\n   * activate this tool\r\n   */\r\n  activateTool() {\r\n    super.activateTool()\r\n    this.prevCursor = this.appData.renderer.getGLCanvas().style.cursor\r\n    this.appData.renderer.getGLCanvas().style.cursor = 'auto'\r\n  }\r\n\r\n  /**\r\n   * Disables tool usage.\r\n   */\r\n  deactivateTool() {\r\n    super.deactivateTool()\r\n    this.appData.renderer.getGLCanvas().style.cursor = this.prevCursor\r\n  }\r\n\r\n  /**\r\n   * Activates selection tool.\r\n   */\r\n  setSelectionManager(selectionManager) {\r\n    this.selectionManager = selectionManager\r\n  }\r\n\r\n  setSelectionFilter(fn) {\r\n    this.__selectionFilterFn = fn\r\n  }\r\n\r\n  /**\r\n   * Activates selection tool.\r\n   */\r\n  activateTool() {\r\n    super.activateTool()\r\n  }\r\n\r\n  /**\r\n   * Deactivates the selection tool.\r\n   */\r\n  deactivateTool() {\r\n    super.deactivateTool()\r\n    this.selectionRectXfo.sc.set(0, 0, 0)\r\n    this.rectItem.getParameter('GlobalXfo').setValue(this.selectionRectXfo)\r\n    this.rectItem.getParameter('Visible').setValue(false)\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {GLViewport} viewport - The viewport value\r\n   * @param {*} delta - The delta value\r\n   * @private\r\n   */\r\n  __resizeRect(viewport, delta) {\r\n    const sc = new Vec2((1 / viewport.getWidth()) * 2, (1 / viewport.getHeight()) * 2)\r\n    const size = delta.multiply(sc)\r\n    this.selectionRectXfo.sc.set(Math.abs(size.x), Math.abs(size.y), 1)\r\n\r\n    const center = this.pointerDownPos.subtract(delta.scale(0.5))\r\n    const tr = center.multiply(sc).subtract(new Vec2(1, 1))\r\n\r\n    this.selectionRectXfo.tr.x = tr.x\r\n    this.selectionRectXfo.tr.y = -tr.y\r\n    this.rectItem.getParameter('GlobalXfo').setValue(this.selectionRectXfo)\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   * @private\r\n   */\r\n  onPointerDoublePress(event) {}\r\n\r\n  /**\r\n   * Event fired when a pointing device button is pressed while the pointer is over the tool.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   * @return {boolean} The return value.\r\n   */\r\n  onPointerDown(event) {\r\n    if (event.pointerType === 'touch' || (event.button == 0 && !event.altKey)) {\r\n      this.pointerDownPos = event.pointerPos\r\n      this.dragging = false\r\n\r\n      event.stopPropagation()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event fired when a pointing device is moved while the cursor's hotspot is inside it.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   * @return {boolean} The return value.\r\n   */\r\n  onPointerMove(event) {\r\n    if (this.pointerDownPos) {\r\n      const delta = this.pointerDownPos.subtract(event.pointerPos)\r\n      const dist = delta.length()\r\n      // dragging only is activated after 4 pixels.\r\n      // This is to avoid causing as rect selection for nothing.\r\n      if (dist > 4) {\r\n        this.dragging = true\r\n        // Start drawing the selection rectangle on screen.\r\n        this.rectItem.getParameter('Visible').setValue(true)\r\n        this.__resizeRect(event.viewport, delta)\r\n      }\r\n      event.stopPropagation()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event fired when a pointing device button is released while the pointer is over the tool.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   * @return {boolean} The return value.\r\n   */\r\n  onPointerUp(event) {\r\n    if (this.pointerDownPos) {\r\n      // event.viewport.renderGeomDataFbo();\r\n      if (this.dragging) {\r\n        this.rectItem.getParameter('Visible').setValue(false)\r\n        const pointerUpPos = event.pointerPos\r\n        const tl = new Vec2(\r\n          Math.min(this.pointerDownPos.x, pointerUpPos.x),\r\n          Math.min(this.pointerDownPos.y, pointerUpPos.y)\r\n        )\r\n        const br = new Vec2(\r\n          Math.max(this.pointerDownPos.x, pointerUpPos.x),\r\n          Math.max(this.pointerDownPos.y, pointerUpPos.y)\r\n        )\r\n\r\n        let geomItems = event.viewport.getGeomItemsInRect(tl, br)\r\n\r\n        if (this.__selectionFilterFn) {\r\n          const newSet = []\r\n          for (let i = 0; i < geomItems.length; i++) {\r\n            const treeItem = this.__selectionFilterFn(geomItems[i])\r\n            if (!newSet.includes(treeItem)) {\r\n              newSet.push(treeItem)\r\n            }\r\n          }\r\n          geomItems = newSet\r\n        }\r\n\r\n        if (!this.selectionManager) throw 'Please set the Selection Manager on the Selection Tool before using it.'\r\n        if (this.selectionManager.pickingModeActive()) {\r\n          this.selectionManager.pick(geomItems)\r\n        } else {\r\n          // Remove all the scene widgets. (UI elements should not be selectable.)\r\n          const regularGeomItems = new Set([...geomItems].filter((x) => !(x.getOwner() instanceof Handle)))\r\n\r\n          if (!event.shiftKey) {\r\n            this.selectionManager.selectItems(regularGeomItems, !event.ctrlKey)\r\n          } else {\r\n            this.selectionManager.deselectItems(regularGeomItems)\r\n          }\r\n\r\n          this.selectionRectXfo.sc.set(0, 0, 0)\r\n          this.rectItem.getParameter('GlobalXfo').setValue(this.selectionRectXfo)\r\n        }\r\n      } else {\r\n        const intersectionData = event.viewport.getGeomDataAtPos(event.pointerPos)\r\n        if (intersectionData != undefined && !(intersectionData.geomItem.getOwner() instanceof Handle)) {\r\n          let treeItem = intersectionData.geomItem\r\n          if (this.__selectionFilterFn) treeItem = this.__selectionFilterFn(treeItem)\r\n\r\n          if (this.selectionManager.pickingModeActive()) {\r\n            this.selectionManager.pick(treeItem)\r\n          } else {\r\n            if (!event.shiftKey) {\r\n              this.selectionManager.toggleItemSelection(treeItem, !event.ctrlKey)\r\n            } else {\r\n              const items = new Set()\r\n              items.add(treeItem)\r\n              this.selectionManager.deselectItems(items)\r\n            }\r\n          }\r\n        } else {\r\n          this.selectionManager.clearSelection()\r\n        }\r\n      }\r\n      this.pointerDownPos = undefined\r\n      event.stopPropagation()\r\n    }\r\n  }\r\n\r\n  // ///////////////////////////////////\r\n  // VRController events\r\n\r\n  /**\r\n   * Event fired when a VR controller button is pressed over a tool.\r\n   *\r\n   * @param {object} event - The event param.\r\n   * @return {boolean} The return value.\r\n   */\r\n  onVRControllerButtonDown(event) {\r\n    if (event.button == 1) {\r\n      if (!this.selectionManager) throw 'Please set the Selection Manager on the Selection Tool before using it.'\r\n      const intersectionData = event.controller.getGeomItemAtTip()\r\n      if (intersectionData != undefined && !(intersectionData.geomItem.getOwner() instanceof Handle)) {\r\n        this.selectionManager.toggleItemSelection(intersectionData.geomItem)\r\n        event.stopPropagation()\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport { SelectionTool }\r\n","/* eslint-disable require-jsdoc */\r\nconst util = newUtil()\r\nconst inliner = newInliner()\r\nconst fontFaces = newFontFaces()\r\nconst images = newImages()\r\n\r\n// Default impl options\r\nconst defaultOptions = {\r\n  // Default is to fail on error, no placeholder\r\n  imagePlaceholder: undefined,\r\n  // Default cache bust is false, it will use the cache\r\n  cacheBust: false,\r\n}\r\n\r\nconst domtoimage = {\r\n  toSvg: toSvg,\r\n  toPng: toPng,\r\n  toJpeg: toJpeg,\r\n  toBlob: toBlob,\r\n  toPixelData: toPixelData,\r\n  toCanvas: toCanvas,\r\n  impl: {\r\n    fontFaces: fontFaces,\r\n    images: images,\r\n    util: util,\r\n    inliner: inliner,\r\n    options: {},\r\n  },\r\n}\r\n\r\n/**\r\n     * @param {Node} node - The DOM Node object to render\r\n     * @param {Object} options - Rendering options\r\n     * @param {Function} options.filter - Should return true if passed node should be included in the output\r\n     *          (excluding node means excluding it's children as well). Not called on the root node.\r\n     * @param {string} options.bgcolor - color for the background, any valid CSS color value.\r\n     * @param {number} options.width - width to be applied to node before rendering.\r\n     * @param {number} options.height - height to be applied to node before rendering.\r\n     * @param {Object} options.style - an object whose properties to be copied to node's style before rendering.\r\n     * @param {number} options.quality - a Number between 0 and 1 indicating image quality (applicable to JPEG only),\r\n                defaults to 1.0.\r\n     * @param {string} options.imagePlaceholder - dataURL to use as a placeholder for failed images, default behaviour is to fail fast on images we can't fetch\r\n     * @param {boolean} options.cacheBust - set to true to cache bust by appending the time to the request url\r\n     * @return {Promise} - A promise that is fulfilled with a SVG image data URL\r\n     * */\r\nfunction toSvg(node, options) {\r\n  options = options || {}\r\n  copyOptions(options)\r\n  return Promise.resolve(node)\r\n    .then(function (node) {\r\n      return cloneNode(node, options.filter, true)\r\n    })\r\n    .then(embedFonts)\r\n    .then(inlineImages)\r\n    .then(applyOptions)\r\n    .then(function (clone) {\r\n      return makeSvgDataUri(clone, options.width || util.width(node), options.height || util.height(node))\r\n    })\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {object} clone -\r\n   * @return {object} -\r\n   */\r\n  function applyOptions(clone) {\r\n    if (options.bgcolor) clone.style.backgroundColor = options.bgcolor\r\n\r\n    if (options.width) clone.style.width = options.width + 'px'\r\n    if (options.height) clone.style.height = options.height + 'px'\r\n\r\n    if (options.style)\r\n      Object.keys(options.style).forEach(function (property) {\r\n        clone.style[property] = options.style[property]\r\n      })\r\n\r\n    return clone\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Node} node - The DOM Node object to render\r\n * @param {Object} options - Rendering options, @see {@link toSvg}\r\n * @return {Promise} - A promise that is fulfilled with a Uint8Array containing RGBA pixel data.\r\n * */\r\nfunction toPixelData(node, options) {\r\n  return draw(node, options || {}).then(function (canvas) {\r\n    return canvas.getContext('2d').getImageData(0, 0, util.width(node), util.height(node)).data\r\n  })\r\n}\r\n\r\n/**\r\n * @param {Node} node - The DOM Node object to render\r\n * @param {Object} options - Rendering options, @see {@link toSvg}\r\n * @return {Promise} - A promise that is fulfilled with a Uint8Array containing RGBA pixel data.\r\n * */\r\nfunction toCanvas(node, options) {\r\n  return draw(node, options || {}).then(function (canvas) {\r\n    return canvas\r\n  })\r\n}\r\n\r\n/**\r\n * @param {Node} node - The DOM Node object to render\r\n * @param {Object} options - Rendering options, @see {@link toSvg}\r\n * @return {Promise} - A promise that is fulfilled with a PNG image data URL\r\n * */\r\nfunction toPng(node, options) {\r\n  return draw(node, options || {}).then(function (canvas) {\r\n    return canvas.toDataURL()\r\n  })\r\n}\r\n\r\n/**\r\n * @param {Node} node - The DOM Node object to render\r\n * @param {Object} options - Rendering options, @see {@link toSvg}\r\n * @return {Promise} - A promise that is fulfilled with a JPEG image data URL\r\n * */\r\nfunction toJpeg(node, options) {\r\n  options = options || {}\r\n  return draw(node, options).then(function (canvas) {\r\n    return canvas.toDataURL('image/jpeg', options.quality || 1.0)\r\n  })\r\n}\r\n\r\n/**\r\n * @param {Node} node - The DOM Node object to render\r\n * @param {Object} options - Rendering options, @see {@link toSvg}\r\n * @return {Promise} - A promise that is fulfilled with a PNG image blob\r\n * */\r\nfunction toBlob(node, options) {\r\n  return draw(node, options || {}).then(util.canvasToBlob)\r\n}\r\n\r\n/**\r\n *\r\n *\r\n * @param {object} options -\r\n */\r\nfunction copyOptions(options) {\r\n  // Copy options to impl options for use in impl\r\n  if (typeof options.imagePlaceholder === 'undefined') {\r\n    domtoimage.impl.options.imagePlaceholder = defaultOptions.imagePlaceholder\r\n  } else {\r\n    domtoimage.impl.options.imagePlaceholder = options.imagePlaceholder\r\n  }\r\n\r\n  if (typeof options.cacheBust === 'undefined') {\r\n    domtoimage.impl.options.cacheBust = defaultOptions.cacheBust\r\n  } else {\r\n    domtoimage.impl.options.cacheBust = options.cacheBust\r\n  }\r\n}\r\n/**\r\n *\r\n *\r\n * @param {*} domNode -\r\n * @param {*} options -\r\n * @return {*}\r\n */\r\nfunction draw(domNode, options) {\r\n  return toSvg(domNode, options)\r\n    .then(util.makeImage)\r\n    .then(util.delay(100))\r\n    .then(function (image) {\r\n      const canvas = newCanvas(domNode)\r\n      canvas.getContext('2d').drawImage(image, 0, 0)\r\n      return canvas\r\n    })\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {*} domNode -\r\n   * @return {*}\r\n   */\r\n  function newCanvas(domNode) {\r\n    const canvas = document.createElement('canvas')\r\n    canvas.width = options.width || util.width(domNode)\r\n    canvas.height = options.height || util.height(domNode)\r\n\r\n    if (options.bgcolor) {\r\n      const ctx = canvas.getContext('2d')\r\n      ctx.fillStyle = options.bgcolor\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height)\r\n    }\r\n\r\n    return canvas\r\n  }\r\n}\r\n\r\nfunction cloneNode(node, filter, root) {\r\n  if (!root && filter && !filter(node)) return Promise.resolve()\r\n\r\n  return Promise.resolve(node)\r\n    .then(makeNodeCopy)\r\n    .then(function (clone) {\r\n      return cloneChildren(node, clone, filter)\r\n    })\r\n    .then(function (clone) {\r\n      return processClone(node, clone)\r\n    })\r\n\r\n  function makeNodeCopy(node) {\r\n    if (node instanceof HTMLCanvasElement) return util.makeImage(node.toDataURL())\r\n    return node.cloneNode(false)\r\n  }\r\n\r\n  function cloneChildren(original, clone, filter) {\r\n    const children = original.childNodes\r\n    if (children.length === 0) return Promise.resolve(clone)\r\n\r\n    return cloneChildrenInOrder(clone, util.asArray(children), filter).then(function () {\r\n      return clone\r\n    })\r\n\r\n    function cloneChildrenInOrder(parent, children, filter) {\r\n      let done = Promise.resolve()\r\n      children.forEach(function (child) {\r\n        done = done\r\n          .then(function () {\r\n            return cloneNode(child, filter)\r\n          })\r\n          .then(function (childClone) {\r\n            if (childClone) parent.appendChild(childClone)\r\n          })\r\n      })\r\n      return done\r\n    }\r\n  }\r\n\r\n  function processClone(original, clone) {\r\n    if (!(clone instanceof Element)) return clone\r\n\r\n    return Promise.resolve()\r\n      .then(cloneStyle)\r\n      .then(clonePseudoElements)\r\n      .then(copyUserInput)\r\n      .then(fixSvg)\r\n      .then(function () {\r\n        return clone\r\n      })\r\n\r\n    function cloneStyle() {\r\n      copyStyle(window.getComputedStyle(original), clone.style)\r\n\r\n      function copyStyle(source, target) {\r\n        if (source.cssText) target.cssText = source.cssText\r\n        else copyProperties(source, target)\r\n\r\n        function copyProperties(source, target) {\r\n          util.asArray(source).forEach(function (name) {\r\n            target.setProperty(name, source.getPropertyValue(name), source.getPropertyPriority(name))\r\n          })\r\n        }\r\n      }\r\n    }\r\n\r\n    function clonePseudoElements() {\r\n      ;[':before', ':after'].forEach(function (element) {\r\n        clonePseudoElement(element)\r\n      })\r\n\r\n      function clonePseudoElement(element) {\r\n        const style = window.getComputedStyle(original, element)\r\n        const content = style.getPropertyValue('content')\r\n\r\n        if (content === '' || content === 'none') return\r\n\r\n        const className = util.uid()\r\n        clone.className = clone.className + ' ' + className\r\n        const styleElement = document.createElement('style')\r\n        styleElement.appendChild(formatPseudoElementStyle(className, element, style))\r\n        clone.appendChild(styleElement)\r\n\r\n        function formatPseudoElementStyle(className, element, style) {\r\n          const selector = '.' + className + ':' + element\r\n          const cssText = style.cssText ? formatCssText(style) : formatCssProperties(style)\r\n          return document.createTextNode(selector + '{' + cssText + '}')\r\n\r\n          function formatCssText(style) {\r\n            const content = style.getPropertyValue('content')\r\n            return style.cssText + ' content: ' + content + ';'\r\n          }\r\n\r\n          function formatCssProperties(style) {\r\n            return util.asArray(style).map(formatProperty).join('; ') + ';'\r\n\r\n            function formatProperty(name) {\r\n              return name + ': ' + style.getPropertyValue(name) + (style.getPropertyPriority(name) ? ' !important' : '')\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    function copyUserInput() {\r\n      if (original instanceof HTMLTextAreaElement) clone.innerHTML = original.value\r\n      if (original instanceof HTMLInputElement) clone.setAttribute('value', original.value)\r\n    }\r\n\r\n    function fixSvg() {\r\n      if (!(clone instanceof SVGElement)) return\r\n      clone.setAttribute('xmlns', 'http://www.w3.org/2000/svg')\r\n\r\n      if (!(clone instanceof SVGRectElement)) return\r\n      ;['width', 'height'].forEach(function (attribute) {\r\n        const value = clone.getAttribute(attribute)\r\n        if (!value) return\r\n\r\n        clone.style.setProperty(attribute, value)\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\nfunction embedFonts(node) {\r\n  return fontFaces.resolveAll().then(function (cssText) {\r\n    const styleNode = document.createElement('style')\r\n    node.appendChild(styleNode)\r\n    styleNode.appendChild(document.createTextNode(cssText))\r\n    return node\r\n  })\r\n}\r\n\r\nfunction inlineImages(node) {\r\n  return images.inlineAll(node).then(function () {\r\n    return node\r\n  })\r\n}\r\n\r\nfunction makeSvgDataUri(node, width, height) {\r\n  return Promise.resolve(node)\r\n    .then(function (node) {\r\n      node.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml')\r\n      return new XMLSerializer().serializeToString(node)\r\n    })\r\n    .then(util.escapeXhtml)\r\n    .then(function (xhtml) {\r\n      return '<foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">' + xhtml + '</foreignObject>'\r\n    })\r\n    .then(function (foreignObject) {\r\n      return (\r\n        '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' +\r\n        width +\r\n        '\" height=\"' +\r\n        height +\r\n        '\">' +\r\n        foreignObject +\r\n        '</svg>'\r\n      )\r\n    })\r\n    .then(function (svg) {\r\n      return 'data:image/svg+xml;charset=utf-8,' + svg\r\n    })\r\n}\r\n\r\nfunction newUtil() {\r\n  return {\r\n    escape: escape,\r\n    parseExtension: parseExtension,\r\n    mimeType: mimeType,\r\n    dataAsUrl: dataAsUrl,\r\n    isDataUrl: isDataUrl,\r\n    canvasToBlob: canvasToBlob,\r\n    resolveUrl: resolveUrl,\r\n    getAndEncode: getAndEncode,\r\n    uid: uid(),\r\n    delay: delay,\r\n    asArray: asArray,\r\n    escapeXhtml: escapeXhtml,\r\n    makeImage: makeImage,\r\n    width: width,\r\n    height: height,\r\n  }\r\n\r\n  function mimes() {\r\n    /*\r\n     * Only WOFF and EOT mime types for fonts are 'real'\r\n     * see http://www.iana.org/assignments/media-types/media-types.xhtml\r\n     */\r\n    const WOFF = 'application/font-woff'\r\n    const JPEG = 'image/jpeg'\r\n\r\n    return {\r\n      woff: WOFF,\r\n      woff2: WOFF,\r\n      ttf: 'application/font-truetype',\r\n      eot: 'application/vnd.ms-fontobject',\r\n      png: 'image/png',\r\n      jpg: JPEG,\r\n      jpeg: JPEG,\r\n      gif: 'image/gif',\r\n      tiff: 'image/tiff',\r\n      svg: 'image/svg+xml',\r\n    }\r\n  }\r\n\r\n  function parseExtension(url) {\r\n    const match = /\\.([^\\.\\/]*?)$/g.exec(url)\r\n    if (match) return match[1]\r\n    else return ''\r\n  }\r\n\r\n  function mimeType(url) {\r\n    const extension = parseExtension(url).toLowerCase()\r\n    return mimes()[extension] || ''\r\n  }\r\n\r\n  function isDataUrl(url) {\r\n    return url.search(/^(data:)/) !== -1\r\n  }\r\n\r\n  function toBlob(canvas) {\r\n    return new Promise(function (resolve) {\r\n      const binaryString = window.atob(canvas.toDataURL().split(',')[1])\r\n      const length = binaryString.length\r\n      const binaryArray = new Uint8Array(length)\r\n\r\n      for (let i = 0; i < length; i++) binaryArray[i] = binaryString.charCodeAt(i)\r\n\r\n      resolve(\r\n        new Blob([binaryArray], {\r\n          type: 'image/png',\r\n        })\r\n      )\r\n    })\r\n  }\r\n\r\n  function canvasToBlob(canvas) {\r\n    if (canvas.toBlob)\r\n      return new Promise(function (resolve) {\r\n        canvas.toBlob(resolve)\r\n      })\r\n\r\n    return toBlob(canvas)\r\n  }\r\n\r\n  function resolveUrl(url, baseUrl) {\r\n    const doc = document.implementation.createHTMLDocument()\r\n    const base = doc.createElement('base')\r\n    doc.head.appendChild(base)\r\n    const a = doc.createElement('a')\r\n    doc.body.appendChild(a)\r\n    base.href = baseUrl\r\n    a.href = url\r\n    return a.href\r\n  }\r\n\r\n  function uid() {\r\n    let index = 0\r\n\r\n    return function () {\r\n      return 'u' + fourRandomChars() + index++\r\n\r\n      function fourRandomChars() {\r\n        /* see http://stackoverflow.com/a/6248722/2519373 */\r\n        return ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4)\r\n      }\r\n    }\r\n  }\r\n\r\n  function makeImage(uri) {\r\n    return new Promise(function (resolve, reject) {\r\n      const image = new Image()\r\n      image.onload = function () {\r\n        resolve(image)\r\n      }\r\n      image.onerror = reject\r\n      image.src = uri\r\n    })\r\n  }\r\n\r\n  function getAndEncode(url) {\r\n    const TIMEOUT = 30000\r\n    if (domtoimage.impl.options.cacheBust) {\r\n      // Cache bypass so we dont have CORS issues with cached images\r\n      // Source: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\r\n      url += (/\\?/.test(url) ? '&' : '?') + new Date().getTime()\r\n    }\r\n\r\n    return new Promise(function (resolve) {\r\n      const request = new XMLHttpRequest()\r\n\r\n      request.onreadystatechange = done\r\n      request.ontimeout = timeout\r\n      request.responseType = 'blob'\r\n      request.timeout = TIMEOUT\r\n      request.open('GET', url, true)\r\n      request.send()\r\n\r\n      let placeholder\r\n      if (domtoimage.impl.options.imagePlaceholder) {\r\n        const split = domtoimage.impl.options.imagePlaceholder.split(/,/)\r\n        if (split && split[1]) {\r\n          placeholder = split[1]\r\n        }\r\n      }\r\n\r\n      function done() {\r\n        if (request.readyState !== 4) return\r\n\r\n        if (request.status !== 200) {\r\n          if (placeholder) {\r\n            resolve(placeholder)\r\n          } else {\r\n            fail('cannot fetch resource: ' + url + ', status: ' + request.status)\r\n          }\r\n\r\n          return\r\n        }\r\n\r\n        const encoder = new FileReader()\r\n        encoder.onloadend = function () {\r\n          const content = encoder.result.split(/,/)[1]\r\n          resolve(content)\r\n        }\r\n        encoder.readAsDataURL(request.response)\r\n      }\r\n\r\n      function timeout() {\r\n        if (placeholder) {\r\n          resolve(placeholder)\r\n        } else {\r\n          fail('timeout of ' + TIMEOUT + 'ms occured while fetching resource: ' + url)\r\n        }\r\n      }\r\n\r\n      function fail(message) {\r\n        console.error(message)\r\n        resolve('')\r\n      }\r\n    })\r\n  }\r\n\r\n  function dataAsUrl(content, type) {\r\n    return 'data:' + type + ';base64,' + content\r\n  }\r\n\r\n  function escape(string) {\r\n    return string.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1')\r\n  }\r\n\r\n  function delay(ms) {\r\n    return function (arg) {\r\n      return new Promise(function (resolve) {\r\n        setTimeout(function () {\r\n          resolve(arg)\r\n        }, ms)\r\n      })\r\n    }\r\n  }\r\n\r\n  function asArray(arrayLike) {\r\n    const array = []\r\n    const length = arrayLike.length\r\n    for (let i = 0; i < length; i++) array.push(arrayLike[i])\r\n    return array\r\n  }\r\n\r\n  function escapeXhtml(string) {\r\n    return string.replace(/#/g, '%23').replace(/\\n/g, '%0A')\r\n  }\r\n\r\n  function width(node) {\r\n    const leftBorder = px(node, 'border-left-width')\r\n    const rightBorder = px(node, 'border-right-width')\r\n    return node.scrollWidth + leftBorder + rightBorder\r\n  }\r\n\r\n  function height(node) {\r\n    const topBorder = px(node, 'border-top-width')\r\n    const bottomBorder = px(node, 'border-bottom-width')\r\n    return node.scrollHeight + topBorder + bottomBorder\r\n  }\r\n\r\n  function px(node, styleProperty) {\r\n    const value = window.getComputedStyle(node).getPropertyValue(styleProperty)\r\n    return parseFloat(value.replace('px', ''))\r\n  }\r\n}\r\n\r\nfunction newInliner() {\r\n  const URL_REGEX = /url\\(['\"]?([^'\"]+?)['\"]?\\)/g\r\n\r\n  return {\r\n    inlineAll: inlineAll,\r\n    shouldProcess: shouldProcess,\r\n    impl: {\r\n      readUrls: readUrls,\r\n      inline: inline,\r\n    },\r\n  }\r\n\r\n  function shouldProcess(string) {\r\n    return string.search(URL_REGEX) !== -1\r\n  }\r\n\r\n  function readUrls(string) {\r\n    const result = []\r\n    let match\r\n    while ((match = URL_REGEX.exec(string)) !== null) {\r\n      result.push(match[1])\r\n    }\r\n    return result.filter(function (url) {\r\n      return !util.isDataUrl(url)\r\n    })\r\n  }\r\n\r\n  function inline(string, url, baseUrl, get) {\r\n    return Promise.resolve(url)\r\n      .then(function (url) {\r\n        return baseUrl ? util.resolveUrl(url, baseUrl) : url\r\n      })\r\n      .then(get || util.getAndEncode)\r\n      .then(function (data) {\r\n        return util.dataAsUrl(data, util.mimeType(url))\r\n      })\r\n      .then(function (dataUrl) {\r\n        return string.replace(urlAsRegex(url), '$1' + dataUrl + '$3')\r\n      })\r\n\r\n    function urlAsRegex(url) {\r\n      return new RegExp('(url\\\\([\\'\"]?)(' + util.escape(url) + ')([\\'\"]?\\\\))', 'g')\r\n    }\r\n  }\r\n\r\n  function inlineAll(string, baseUrl, get) {\r\n    if (nothingToInline()) return Promise.resolve(string)\r\n\r\n    return Promise.resolve(string)\r\n      .then(readUrls)\r\n      .then(function (urls) {\r\n        let done = Promise.resolve(string)\r\n        urls.forEach(function (url) {\r\n          done = done.then(function (string) {\r\n            return inline(string, url, baseUrl, get)\r\n          })\r\n        })\r\n        return done\r\n      })\r\n\r\n    function nothingToInline() {\r\n      return !shouldProcess(string)\r\n    }\r\n  }\r\n}\r\n\r\nfunction newFontFaces() {\r\n  return {\r\n    resolveAll: resolveAll,\r\n    impl: {\r\n      readAll: readAll,\r\n    },\r\n  }\r\n\r\n  function resolveAll() {\r\n    return readAll(document)\r\n      .then(function (webFonts) {\r\n        return Promise.all(\r\n          webFonts.map(function (webFont) {\r\n            return webFont.resolve()\r\n          })\r\n        )\r\n      })\r\n      .then(function (cssStrings) {\r\n        return cssStrings.join('\\n')\r\n      })\r\n  }\r\n\r\n  function readAll() {\r\n    return Promise.resolve(util.asArray(document.styleSheets))\r\n      .then(getCssRules)\r\n      .then(selectWebFontRules)\r\n      .then(function (rules) {\r\n        return rules.map(newWebFont)\r\n      })\r\n\r\n    function selectWebFontRules(cssRules) {\r\n      return cssRules\r\n        .filter(function (rule) {\r\n          return rule.type === CSSRule.FONT_FACE_RULE\r\n        })\r\n        .filter(function (rule) {\r\n          return inliner.shouldProcess(rule.style.getPropertyValue('src'))\r\n        })\r\n    }\r\n\r\n    function getCssRules(styleSheets) {\r\n      const cssRules = []\r\n      styleSheets.forEach(function (sheet) {\r\n        try {\r\n          util.asArray(sheet.cssRules || []).forEach(cssRules.push.bind(cssRules))\r\n        } catch (e) {\r\n          console.log('Error while reading CSS rules from ' + sheet.href, e.toString())\r\n        }\r\n      })\r\n      return cssRules\r\n    }\r\n\r\n    function newWebFont(webFontRule) {\r\n      return {\r\n        resolve: function resolve() {\r\n          const baseUrl = (webFontRule.parentStyleSheet || {}).href\r\n          return inliner.inlineAll(webFontRule.cssText, baseUrl)\r\n        },\r\n        src: function () {\r\n          return webFontRule.style.getPropertyValue('src')\r\n        },\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction newImages() {\r\n  return {\r\n    inlineAll: inlineAll,\r\n    impl: {\r\n      newImage: newImage,\r\n    },\r\n  }\r\n\r\n  function newImage(element) {\r\n    return {\r\n      inline: inline,\r\n    }\r\n\r\n    function inline(get) {\r\n      if (util.isDataUrl(element.src)) return Promise.resolve()\r\n\r\n      return Promise.resolve(element.src)\r\n        .then(get || util.getAndEncode)\r\n        .then(function (data) {\r\n          return util.dataAsUrl(data, util.mimeType(element.src))\r\n        })\r\n        .then(function (dataUrl) {\r\n          return new Promise(function (resolve, reject) {\r\n            element.onload = resolve\r\n            element.onerror = reject\r\n            element.src = dataUrl\r\n          })\r\n        })\r\n    }\r\n  }\r\n\r\n  function inlineAll(node) {\r\n    if (!(node instanceof Element)) return Promise.resolve(node)\r\n\r\n    return inlineBackground(node).then(function () {\r\n      if (node instanceof HTMLImageElement) return newImage(node).inline()\r\n      else\r\n        return Promise.all(\r\n          util.asArray(node.childNodes).map(function (child) {\r\n            return inlineAll(child)\r\n          })\r\n        )\r\n    })\r\n\r\n    function inlineBackground(node) {\r\n      const background = node.style.getPropertyValue('background')\r\n\r\n      if (!background) return Promise.resolve(node)\r\n\r\n      return inliner\r\n        .inlineAll(background)\r\n        .then(function (inlined) {\r\n          node.style.setProperty('background', inlined, node.style.getPropertyPriority('background'))\r\n        })\r\n        .then(function () {\r\n          return node\r\n        })\r\n    }\r\n  }\r\n}\r\n\r\nexport default domtoimage\r\n","import { Vec3, Xfo, EulerAngles, Color, TreeItem, GeomItem, Material, Plane, DataImage } from '@zeainc/zea-engine'\r\n\r\nimport domtoimage from './dom-to-image.js'\r\n\r\n/**\r\n * Traverse a dom tree and call a callback at each node.\r\n * @param {HTMLElement} node\r\n * @param {number} depth\r\n * @param {function} func\r\n */\r\nfunction traverse(node, depth, func) {\r\n  if (!func(node, depth)) return\r\n  node = node.firstChild\r\n  while (node) {\r\n    traverse(node, depth + 1, func)\r\n    node = node.nextSibling\r\n  }\r\n}\r\n\r\n/**\r\n * Computes the size of th element, including margins.\r\n * @param {HTMLElement} elem\r\n * @return {object}\r\n */\r\nfunction elemSize(elem) {\r\n  const computedStyle = elem.computedStyleMap()\r\n  const elmWidth = computedStyle.get('width').value\r\n  const elmMarginHorizontal = computedStyle.get('margin-left').value + computedStyle.get('margin-right').value\r\n  const elmHeight = computedStyle.get('height').value\r\n  const elmMarginVertical = computedStyle.get('margin-top').value + computedStyle.get('margin-bottom').value\r\n  return {\r\n    width: elmWidth + elmMarginHorizontal,\r\n    height: elmHeight + elmMarginVertical,\r\n  }\r\n}\r\n\r\nconst idx = 'data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\"'.length\r\nconst renderElementUI = (elem, size, key, callback) => {\r\n  domtoimage.toSvg(elem).then((uri) => {\r\n    // To work around a bug in domtoimage, we insert a viewBox into the SVG that ensures it renders\r\n    // all the way to the edges. otherwise, an image is generated that crops the left and bottom borders.\r\n    const uri2 = uri.substring(0, idx) + ` viewBox=\"0 0 ${size.width} ${size.height}\"` + uri.substring(idx)\r\n    const image = new Image()\r\n    image.onload = function () {\r\n      callback(image, key)\r\n    }\r\n    // image.onerror = reject\r\n    image.src = uri2\r\n  })\r\n}\r\nconst plane = new Plane(1, 1)\r\n\r\n/**\r\n * Class representing a VR controller UI.\r\n * @extends TreeItem\r\n */\r\nexport default class VRControllerUI extends TreeItem {\r\n  /**\r\n   * Create a VR controller UI.\r\n   * @param {any} appData - The appData value.\r\n   * @param {any} vrUIDOMElement - The vrUIDOMElement value.\r\n   */\r\n  constructor(appData, vrUIDOMElement) {\r\n    super('VRControllerUI')\r\n\r\n    this.setSelectable(false)\r\n    this.appData = appData\r\n    this.__vrUIDOMElement = vrUIDOMElement\r\n    this.__vrUIDOMElement.style.display = 'none'\r\n\r\n    // const debugGeomItem = new GeomItem('Debug', new Plane(1, 1), new Material('debug-ui-mat', 'FlatSurfaceShader'))\r\n    // // Flip it over so we see the front.\r\n    // const debugGeomItemXfo = new Xfo()\r\n    // debugGeomItemXfo.ori.setFromAxisAndAngle(new Vec3(0, 1, 0), Math.PI)\r\n    // this.addChild(debugGeomItem, false)\r\n\r\n    const uiOffset = new TreeItem('Offset')\r\n    this.addChild(uiOffset, false)\r\n    this.ready = false\r\n\r\n    /* */\r\n    const resizeObserver = new ResizeObserver((entries) => {\r\n      resizeObserver.disconnect()\r\n\r\n      const localXfo = new Xfo()\r\n      const dpm = 0.0005 // dots-per-meter (1 each 1/2mm)\r\n      localXfo.sc.set(dpm, dpm, dpm)\r\n      localXfo.ori.setFromEulerAngles(new EulerAngles(Math.PI, Math.PI, 0))\r\n      // localXfo.ori.setFromAxisAndAngle(new Vec3(0, 1, 0), Math.PI)\r\n      // localXfo.ori.setFromAxisAndAngle(new Vec3(1, 0, 0), Math.PI)\r\n      uiOffset.getParameter('LocalXfo').setValue(localXfo)\r\n\r\n      this.size = new Vec3(vrUIDOMElement.clientWidth * dpm, vrUIDOMElement.clientHeight * dpm, 1)\r\n\r\n      // debugGeomItemXfo.sc = this.size\r\n      // debugGeomItem.getParameter('LocalXfo').setValue(debugGeomItemXfo)\r\n\r\n      traverse(vrUIDOMElement, 0, (elem, depth) => {\r\n        if (elem.className == 'button') {\r\n          const size = elemSize(elem)\r\n          // console.log(depth, elem.id, elem.className, size.width, size.height, elem.offsetLeft, elem.offsetTop)\r\n          const localXfo = new Xfo()\r\n\r\n          localXfo.sc.set(size.width, -size.height, 1)\r\n\r\n          // Note: The plane geom goes from [-0.5, -0.5] to [0.5, 0.5], so we need to offset it here.\r\n          // To debug the placements of these UI elements, display tbe backing panel by making this class\r\n          // in\r\n          localXfo.tr.set(\r\n            elem.offsetLeft + size.width * 0.5 - vrUIDOMElement.clientWidth * 0.5,\r\n            elem.offsetTop + size.height * 0.5 - vrUIDOMElement.clientHeight * 0.5,\r\n            -depth\r\n          )\r\n\r\n          const uimat = new Material('element-vr-ui-mat', 'FlatSurfaceShader')\r\n          uimat.getParameter('BaseColor').setValue(new Color(0.3, 0.3, 0.3))\r\n          const image = new DataImage()\r\n          uimat.getParameter('BaseColor').setValue(image)\r\n\r\n          const geomItem = new GeomItem('element-vr-ui', plane, uimat, localXfo)\r\n          geomItem.setSelectable(false)\r\n          uiOffset.addChild(geomItem, false)\r\n\r\n          const imageDatas = {}\r\n          if (size.width > 0 && size.height > 0) {\r\n            renderElementUI(elem, size, elem.id + elem.className, (data, key) => {\r\n              // console.log('Rendered', elem.id, elem.className, size.width, size.height, elem.offsetLeft, elem.offsetTop)\r\n              imageDatas[key] = data\r\n              image.setData(size.width, size.height, data)\r\n            })\r\n          }\r\n\r\n          const mutationObserver = new MutationObserver((mutations) => {\r\n            if (size.width == 0 || size.height == 0) return\r\n            // Each time the dome changes, we use the classList as a key to cache\r\n            // the generated images. Update the UI by adding and removing classes\r\n            const key = elem.id + elem.className\r\n            if (!imageDatas[key]) {\r\n              renderElementUI(elem, size, key, (data, key) => {\r\n                imageDatas[key] = data\r\n                image.setData(size.width, size.height, data)\r\n              })\r\n            } else {\r\n              image.setData(size.width, size.height, imageDatas[key])\r\n            }\r\n          })\r\n\r\n          mutationObserver.observe(elem, {\r\n            attributes: true,\r\n            characterData: false,\r\n            childList: false,\r\n            subtree: false,\r\n          })\r\n          return false\r\n        }\r\n        return true\r\n      })\r\n\r\n      this.ready = true\r\n      this.emit('ready')\r\n    })\r\n    resizeObserver.observe(vrUIDOMElement)\r\n    /* */\r\n  }\r\n\r\n  // ///////////////////////////////////\r\n\r\n  /**\r\n   * The activate method.\r\n   */\r\n  activate() {\r\n    this.__vrUIDOMElement.style.display = 'block'\r\n  }\r\n\r\n  /**\r\n   * The deactivate method.\r\n   */\r\n  deactivate() {\r\n    this.__vrUIDOMElement.style.display = 'none'\r\n  }\r\n\r\n  /**\r\n   * The sendMouseEvent method.\r\n   * @param {any} eventName - The eventName param.\r\n   * @param {any} args - The args param.\r\n   * @param {any} element - The element param.\r\n   * @return {any} The return value.\r\n   */\r\n  sendMouseEvent(eventName, args, element) {\r\n    // console.log('sendMouseEvent:', eventName, element)\r\n\r\n    const event = new MouseEvent(\r\n      eventName,\r\n      Object.assign(\r\n        {\r\n          target: element,\r\n          view: window,\r\n          bubbles: true,\r\n          // composed: true,\r\n          cancelable: true,\r\n        },\r\n        args\r\n      )\r\n    )\r\n\r\n    // Dispatch the event to a leaf item in the DOM tree.\r\n    element.dispatchEvent(event)\r\n\r\n    // The event is re-cycled to generate a 'click' event on mouse down.\r\n    return event\r\n  }\r\n}\r\n","import { Vec3, Color, Xfo, Ray, GeomItem, Material, Lines, BaseTool, POINTER_TYPES } from '@zeainc/zea-engine'\r\nimport VRControllerUI from './VRControllerUI'\r\n\r\n/**\r\n * Class representing a VR UI tool.\r\n *\r\n * @extends BaseTool\r\n */\r\nclass VRUITool extends BaseTool {\r\n  /**\r\n   * Create a VR UI tool.\r\n   * @param {object} appData - The appData value.\r\n   * @param {HTMLElement} vrUIDOMElement - The  dom element we will use as the VR UI\r\n   */\r\n  constructor(appData, vrUIDOMElement) {\r\n    super(appData)\r\n    this.appData = appData\r\n\r\n    this.__vrUIDOMElement = vrUIDOMElement\r\n    this.controllerUI = new VRControllerUI(appData, this.__vrUIDOMElement)\r\n\r\n    // To debug the UI in the renderer without being in VR, enable this line.\r\n    // appData.renderer.addTreeItem(this.controllerUI)\r\n\r\n    const pointermat = new Material('pointermat', 'LinesShader')\r\n    pointermat.setSelectable(false)\r\n    pointermat.getParameter('BaseColor').setValue(new Color(1.2, 0, 0))\r\n\r\n    const line = new Lines()\r\n    line.setNumVertices(2)\r\n    line.setNumSegments(1)\r\n    line.setSegmentVertexIndices(0, 0, 1)\r\n    const positions = line.getVertexAttribute('positions')\r\n    positions.getValueRef(0).set(0.0, 0.0, 0.0)\r\n    positions.getValueRef(1).set(0.0, 0.0, -1.0)\r\n    line.setBoundingBoxDirty()\r\n    this.__pointerLocalXfo = new Xfo()\r\n    this.__pointerLocalXfo.sc.set(1, 1, 0.1)\r\n    this.__pointerLocalXfo.ori.setFromAxisAndAngle(new Vec3(1, 0, 0), Math.PI * -0.2)\r\n\r\n    this.__uiPointerItem = new GeomItem('VRControllerPointer', line, pointermat)\r\n    this.__uiPointerItem.setSelectable(false)\r\n\r\n    this.__triggerHeld = false\r\n    this.uiOpen = false\r\n\r\n    this.appData.renderer.getXRViewport().then((xrvp) => {\r\n      xrvp.on('presentingChanged', (event) => {\r\n        if (this.uiOpen && !event.state) this.closeUI()\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * The getName method.\r\n   *\r\n   * @return {string} The return value.\r\n   */\r\n  getName() {\r\n    return 'VRUITool'\r\n  }\r\n\r\n  // ///////////////////////////////////\r\n  /**\r\n   * The activateTool method.\r\n   */\r\n  activateTool() {\r\n    super.activateTool()\r\n  }\r\n\r\n  /**\r\n   * The deactivateTool method.\r\n   */\r\n  deactivateTool() {\r\n    if (this.uiOpen) this.closeUI()\r\n    super.deactivateTool()\r\n  }\r\n\r\n  /**\r\n   * The displayUI method.\r\n   * @param {VRController} uiController - The uiController param.\r\n   * @param {VRController} pointerController - The pointerController param.\r\n   * @param {Xfo} headXfo - The headXfo param.\r\n   */\r\n  displayUI(uiController, pointerController, headXfo) {\r\n    this.controllerUI.activate()\r\n    this.uiController = uiController\r\n    this.pointerController = pointerController\r\n\r\n    const uiLocalXfo = this.controllerUI.getParameter('LocalXfo').getValue()\r\n    uiLocalXfo.ori.setFromAxisAndAngle(new Vec3(1, 0, 0), Math.PI * -0.6)\r\n    // uiLocalXfo.tr.set(0, -0.05, 0.08)\r\n\r\n    if (this.pointerController) {\r\n      const xfoA = this.uiController.getTreeItem().getParameter('GlobalXfo').getValue()\r\n      const xfoB = this.pointerController.getTreeItem().getParameter('GlobalXfo').getValue()\r\n      const headToCtrlA = xfoA.tr.subtract(headXfo.tr)\r\n      const headToCtrlB = xfoB.tr.subtract(headXfo.tr)\r\n      if (headToCtrlA.cross(headToCtrlB).dot(headXfo.ori.getYaxis()) > 0.0) {\r\n        uiLocalXfo.tr.set(0.05, -0.05, 0.08)\r\n      } else {\r\n        uiLocalXfo.tr.set(-0.05, -0.05, 0.08)\r\n      }\r\n    } else {\r\n      uiLocalXfo.tr.set(0, -0.05, 0.08)\r\n    }\r\n\r\n    this.controllerUI.getParameter('LocalXfo').setValue(uiLocalXfo)\r\n\r\n    if (this.uiController) {\r\n      this.uiController.getTipItem().addChild(this.controllerUI, false)\r\n      if (this.pointerController) this.pointerController.getTipItem().addChild(this.__uiPointerItem, false)\r\n\r\n      if (this.appData.session) {\r\n        const postMessage = () => {\r\n          this.appData.session.pub('pose-message', {\r\n            interfaceType: 'VR',\r\n            showUIPanel: {\r\n              controllerId: this.uiController.getId(),\r\n              localXfo: uiLocalXfo.toJSON(),\r\n              size: this.controllerUI.size.toJSON(),\r\n            },\r\n          })\r\n        }\r\n        if (!this.controllerUI.ready) {\r\n          this.controllerUI.on('ready', postMessage)\r\n        } else {\r\n          postMessage()\r\n        }\r\n      }\r\n    }\r\n    this.uiOpen = true\r\n  }\r\n\r\n  /**\r\n   * The closeUI method.\r\n   */\r\n  closeUI() {\r\n    this.controllerUI.deactivate()\r\n\r\n    if (this.uiController) {\r\n      this.uiController.getTipItem().removeChildByHandle(this.controllerUI)\r\n      if (this.pointerController) {\r\n        this.pointerController.getTipItem().removeChildByHandle(this.__uiPointerItem)\r\n      }\r\n\r\n      if (this.appData.session) {\r\n        this.appData.session.pub('pose-message', {\r\n          interfaceType: 'VR',\r\n          closehideUIPanel: {\r\n            controllerId: this.uiController.getId(),\r\n          },\r\n        })\r\n      }\r\n    }\r\n    this.uiOpen = false\r\n  }\r\n\r\n  // ///////////////////////////////////\r\n  // VRController events\r\n\r\n  /**\r\n   * The setPointerLength method.\r\n   * @param {number} length - The length param.\r\n   */\r\n  setPointerLength(length) {\r\n    this.__pointerLocalXfo.sc.set(1, 1, length)\r\n    this.__uiPointerItem.getParameter('LocalXfo').setValue(this.__pointerLocalXfo)\r\n  }\r\n\r\n  /**\r\n   * The calcUIIntersection method.\r\n   *\r\n   * @return {object|undefined} The return value.\r\n   */\r\n  calcUIIntersection() {\r\n    const pointerXfo = this.__uiPointerItem.getParameter('GlobalXfo').getValue()\r\n    const pointerVec = pointerXfo.ori.getZaxis().negate()\r\n    const ray = new Ray(pointerXfo.tr, pointerVec)\r\n\r\n    const planeXfo = this.controllerUI.getParameter('GlobalXfo').getValue()\r\n    const planeSize = this.controllerUI.size.multiply(planeXfo.sc)\r\n\r\n    const plane = new Ray(planeXfo.tr, planeXfo.ori.getZaxis().negate())\r\n    const res = ray.intersectRayPlane(plane)\r\n    if (res <= 0) {\r\n      // Let the pointer shine right past the UI.\r\n      this.setPointerLength(0.5)\r\n      return\r\n    }\r\n    const hitOffset = pointerXfo.tr.add(pointerVec.scale(res)).subtract(plane.start)\r\n    const x = hitOffset.dot(planeXfo.ori.getXaxis()) / planeSize.x\r\n    const y = hitOffset.dot(planeXfo.ori.getYaxis()) / planeSize.y\r\n    if (Math.abs(x) > 0.5 || Math.abs(y) > 0.5) {\r\n      // Let the pointer shine right past the UI.\r\n      this.setPointerLength(0.5)\r\n      return\r\n    }\r\n    this.setPointerLength(res / planeXfo.sc.z)\r\n    const rect = this.__vrUIDOMElement.getBoundingClientRect()\r\n    return {\r\n      clientX: Math.round(x * -rect.width + rect.width / 2),\r\n      clientY: Math.round(y * -rect.height + rect.height / 2),\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The sendEventToUI method.\r\n   * @param {string} eventName - The eventName param.\r\n   * @param {any} args - The args param.\r\n   * @return {any} The return value.\r\n   */\r\n  sendEventToUI(eventName, args) {\r\n    const hit = this.calcUIIntersection()\r\n    if (hit) {\r\n      hit.offsetX = hit.pageX = hit.pageX = hit.screenX = hit.clientX\r\n      hit.offsetY = hit.pageY = hit.pageY = hit.screenY = hit.clientY\r\n\r\n      let element = document.elementFromPoint(hit.clientX, hit.clientY)\r\n      if (element) {\r\n        if (element.shadowRoot) element = element.shadowRoot.elementFromPoint(hit.clientX, hit.clientY)\r\n        if (element != this._element) {\r\n          if (this._element) this.controllerUI.sendMouseEvent('mouseleave', Object.assign(args, hit), this._element)\r\n          this._element = element\r\n          this.controllerUI.sendMouseEvent('mouseenter', Object.assign(args, hit), this._element)\r\n        }\r\n        this.controllerUI.sendMouseEvent(eventName, Object.assign(args, hit), this._element)\r\n      } else {\r\n        this._element = null\r\n      }\r\n      return this._element\r\n    } else if (this._element) {\r\n      this.controllerUI.sendMouseEvent('mouseleave', Object.assign(args, hit), this._element)\r\n      this._element = null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The onVRControllerButtonDown method.\r\n   * @param {object} event - The event param.\r\n   */\r\n  onPointerDown(event) {\r\n    if (event.pointerType === POINTER_TYPES.xr) {\r\n      if (event.controller == this.pointerController && this.uiOpen) {\r\n        this.__triggerHeld = true\r\n        const target = this.sendEventToUI('mousedown', {\r\n          button: event.button - 1,\r\n        })\r\n        if (target) {\r\n          this.__triggerDownElem = target\r\n        } else {\r\n          this.__triggerDownElem = null\r\n        }\r\n        // While the UI is open, no other tools get events.\r\n        event.stopPropagation()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The onVRControllerButtonUp method.\r\n   * @param {object} event - The event param.\r\n   */\r\n  onPointerUp(event) {\r\n    if (event.pointerType === POINTER_TYPES.xr) {\r\n      if (event.controller == this.pointerController && this.uiOpen) {\r\n        this.__triggerHeld = false\r\n        const target = this.sendEventToUI('mouseup', {\r\n          button: event.button - 1,\r\n        })\r\n        if (target && this.__triggerDownElem == target) {\r\n          this.sendEventToUI('mouseup', {\r\n            button: event.button - 1,\r\n          })\r\n        }\r\n        this.__triggerDownElem = null\r\n        // While the UI is open, no other tools get events.\r\n        event.stopPropagation()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The onVRPoseChanged method.\r\n   * @param {object} event - The event param.\r\n   */\r\n  onPointerMove(event) {\r\n    if (event.pointerType === POINTER_TYPES.xr) {\r\n      if (!this.uiOpen) {\r\n        if (\r\n          !event.controllers[0] ||\r\n          event.controllers[0].buttonPressed ||\r\n          !event.controllers[1] ||\r\n          event.controllers[1].buttonPressed\r\n        ) {\r\n          return\r\n        }\r\n        // Controller coordinate system\r\n        // X = Horizontal.\r\n        // Y = Up.\r\n        // Z = Towards handle base.\r\n        const headXfo = event.viewXfo\r\n        const checkControllers = (ctrlA, ctrlB) => {\r\n          // Note: do not open the UI when the controller buttons are pressed.\r\n          const xfoA = ctrlA.getTreeItem().getParameter('GlobalXfo').getValue()\r\n          const headToCtrlA = xfoA.tr.subtract(headXfo.tr)\r\n          headToCtrlA.normalizeInPlace()\r\n          if (headToCtrlA.angleTo(xfoA.ori.getYaxis()) < Math.PI * 0.25) {\r\n            this.displayUI(ctrlA, ctrlB, headXfo)\r\n            event.setCapture(this)\r\n            event.stopPropagation()\r\n            return true\r\n          }\r\n          return false\r\n        }\r\n\r\n        if (checkControllers(event.controllers[0], event.controllers[1])) return\r\n        if (checkControllers(event.controllers[1], event.controllers[0])) return\r\n      } else {\r\n        // Controller coordinate system\r\n        // X = Horizontal.\r\n        // Y = Up.\r\n        // Z = Towards handle base.\r\n        const headXfo = event.viewXfo\r\n        const checkControllers = () => {\r\n          const xfoA = this.uiController.getTreeItem().getParameter('GlobalXfo').getValue()\r\n          const headToCtrlA = xfoA.tr.subtract(headXfo.tr)\r\n          headToCtrlA.normalizeInPlace()\r\n          if (headToCtrlA.angleTo(xfoA.ori.getYaxis()) > Math.PI * 0.5) {\r\n            // Remove ourself from the system.\r\n            this.closeUI()\r\n            if (event.getCapture() == this) {\r\n              event.releaseCapture(this)\r\n            }\r\n            return false\r\n          }\r\n          return true\r\n        }\r\n\r\n        if (checkControllers()) {\r\n          this.sendEventToUI('mousemove', {})\r\n        }\r\n        // While the UI is open, no other tools get events.\r\n        event.stopPropagation()\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default VRUITool\r\nexport { VRUITool }\r\n","import { Quat, Color, Xfo, GeomItem, Material, Cross, BaseTool, POINTER_TYPES } from '@zeainc/zea-engine'\r\n// import Handle from '../../Handles/Handle'\r\nimport UndoRedoManager from '../../UndoRedo/UndoRedoManager'\r\nimport Change from '../../UndoRedo/Change'\r\n\r\n/**\r\n * Class representing a hold objects change.\r\n *\r\n * @extends Change\r\n */\r\nclass HoldObjectsChange extends Change {\r\n  /**\r\n   * Create a hold objects change.\r\n   *\r\n   * @param {object} data - The data value.\r\n   */\r\n  constructor(data) {\r\n    super('HoldObjectsChange')\r\n\r\n    this.__selection = []\r\n    this.__prevXfos = []\r\n    this.__newXfos = []\r\n\r\n    if (data) this.update(data)\r\n  }\r\n\r\n  /**\r\n   * The undo method.\r\n   */\r\n  undo() {\r\n    for (let i = 0; i < this.__selection.length; i++) {\r\n      if (this.__selection[i] && this.__prevXfos[i]) {\r\n        this.__selection[i].getParameter('GlobalXfo').setValue(this.__prevXfos[i])\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The redo method.\r\n   */\r\n  redo() {\r\n    for (let i = 0; i < this.__selection.length; i++) {\r\n      if (this.__selection[i] && this.__newXfos[i]) {\r\n        this.__selection[i].getParameter('GlobalXfo').setValue(this.__newXfos[i])\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The update method.\r\n   * @param {object} updateData - The updateData param.\r\n   */\r\n  update(updateData) {\r\n    if (updateData.newItem) {\r\n      this.__selection[updateData.newItemId] = updateData.newItem\r\n      this.__prevXfos[updateData.newItemId] = updateData.newItem.getParameter('GlobalXfo').getValue()\r\n    } else if (updateData.changeXfos) {\r\n      for (let i = 0; i < updateData.changeXfoIds.length; i++) {\r\n        const gidx = updateData.changeXfoIds[i]\r\n        if (!this.__selection[gidx]) continue\r\n        this.__selection[gidx].getParameter('GlobalXfo').setValue(updateData.changeXfos[i])\r\n        this.__newXfos[gidx] = updateData.changeXfos[i]\r\n      }\r\n    }\r\n    this.emit('updated', updateData)\r\n  }\r\n\r\n  /**\r\n   * The toJSON method.\r\n   * @param {object} context - The context param.\r\n   * @return {object} The return value.\r\n   */\r\n  toJSON(context) {\r\n    const j = super.toJSON(context)\r\n\r\n    const itemPaths = []\r\n    for (let i = 0; i < this.__selection.length; i++) {\r\n      if (this.__selection[i]) {\r\n        itemPaths[i] = this.__selection[i].getPath()\r\n      } else {\r\n        itemPaths.push(null)\r\n      }\r\n    }\r\n    j.itemPaths = itemPaths\r\n\r\n    return j\r\n  }\r\n\r\n  /**\r\n   * The fromJSON method.\r\n   * @param {object} j - The j param.\r\n   * @param {object} context - The context param.\r\n   */\r\n  fromJSON(j, context) {\r\n    super.fromJSON(j, context)\r\n\r\n    const sceneRoot = context.appData.scene.getRoot()\r\n    this.__selection = []\r\n    for (let i = 0; i < j.itemPaths.length; i++) {\r\n      const itemPath = j.itemPaths[i]\r\n      if (itemPath && itemPath != '') {\r\n        const newItem = sceneRoot.resolvePath(itemPath, 1)\r\n        if (newItem != sceneRoot) {\r\n          this.__selection[i] = newItem\r\n          this.__prevXfos[i] = newItem.getParameter('GlobalXfo').getValue()\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the state of an existing identified `Parameter` through replication.\r\n   *\r\n   * @param {object} j - The j param.\r\n   */\r\n  updateFromJSON(j) {\r\n    this.update(j)\r\n  }\r\n}\r\n\r\nUndoRedoManager.registerChange('HoldObjectsChange', HoldObjectsChange)\r\n\r\n/**\r\n * Class representing a VR hold objects tool.\r\n * @extends BaseTool\r\n */\r\nclass VRHoldObjectsTool extends BaseTool {\r\n  /**\r\n   * Create a VR hold objects tool.\r\n   * @param {object} appData - The appData value.\r\n   */\r\n  constructor(appData) {\r\n    super(appData)\r\n\r\n    this.appData = appData\r\n    this.__pressedButtonCount = 0\r\n\r\n    this.__freeIndices = []\r\n    this.__vrControllers = []\r\n    this.__heldObjectCount = 0\r\n    this.__heldGeomItems = []\r\n    this.__highlightedGeomItemIds = [] // controller id to held goem id.\r\n    this.__heldGeomItemIds = [] // controller id to held goem id.\r\n    this.__heldGeomItemRefs = []\r\n    this.__heldGeomItemOffsets = []\r\n  }\r\n\r\n  /**\r\n   * The activateTool method.\r\n   */\r\n  activateTool() {\r\n    super.activateTool()\r\n\r\n    this.appData.renderer.getGLCanvas().style.cursor = 'crosshair'\r\n\r\n    const addIconToController = (controller) => {\r\n      // The tool might already be deactivated.\r\n      if (!this.__activated) return\r\n      // const cross = new Cross(0.03)\r\n      // const mat = new Material('Cross', 'FlatSurfaceShader')\r\n      // mat.getParameter('BaseColor').setValue(new Color('#03E3AC'))\r\n      // mat.visibleInGeomDataBuffer = false\r\n      // const geomItem = new GeomItem('HandleToolTip', cross, mat)\r\n      // controller.getTipItem().removeAllChildren()\r\n      // controller.getTipItem().addChild(geomItem, false)\r\n    }\r\n\r\n    this.appData.renderer.getXRViewport().then((xrvp) => {\r\n      for (const controller of xrvp.getControllers()) {\r\n        addIconToController(controller)\r\n      }\r\n      this.addIconToControllerId = xrvp.on('controllerAdded', (event) => addIconToController(event.controller))\r\n    })\r\n  }\r\n\r\n  /**\r\n   * The deactivateTool method.\r\n   */\r\n  deactivateTool() {\r\n    super.deactivateTool()\r\n\r\n    this.appData.renderer.getXRViewport().then((xrvp) => {\r\n      // for(let controller of xrvp.getControllers()) {\r\n      //   controller.getTipItem().removeAllChildren();\r\n      // }\r\n      xrvp.removeListenerById('controllerAdded', this.addIconToControllerId)\r\n    })\r\n  }\r\n\r\n  // ///////////////////////////////////\r\n  // VRController events\r\n\r\n  /**\r\n   * The computeGrabXfo method.\r\n   * @param {array} refs - The refs param.\r\n   * @return {Xfo} The return value.\r\n   */\r\n  computeGrabXfo(refs) {\r\n    let grabXfo\r\n    if (refs.length == 1) {\r\n      grabXfo = this.__vrControllers[refs[0]].getTipXfo()\r\n    } else if (refs.length == 2) {\r\n      const xfo0 = this.__vrControllers[refs[0]].getTipXfo()\r\n      const xfo1 = this.__vrControllers[refs[1]].getTipXfo()\r\n\r\n      xfo0.ori.alignWith(xfo1.ori)\r\n\r\n      grabXfo = new Xfo()\r\n      grabXfo.tr = xfo0.tr.lerp(xfo1.tr, 0.5)\r\n      grabXfo.ori = xfo0.ori.lerp(xfo1.ori, 0.5)\r\n\r\n      let vec0 = xfo1.tr.subtract(xfo0.tr)\r\n      vec0.normalizeInPlace()\r\n      const vec1 = grabXfo.ori.getXaxis()\r\n      if (vec0.dot(vec1) < 0.0) vec0 = vec0.negate()\r\n\r\n      const angle = vec0.angleTo(vec1)\r\n      if (angle > 0) {\r\n        const axis = vec1.cross(vec0)\r\n        axis.normalizeInPlace()\r\n        const align = new Quat()\r\n        align.setFromAxisAndAngle(axis, angle)\r\n        grabXfo.ori = align.multiply(grabXfo.ori)\r\n      }\r\n    }\r\n    return grabXfo\r\n  }\r\n\r\n  /**\r\n   * The initAction method.\r\n   */\r\n  initAction() {\r\n    for (let i = 0; i < this.__heldGeomItems.length; i++) {\r\n      const heldGeom = this.__heldGeomItems[i]\r\n      if (!heldGeom) continue\r\n      const grabXfo = this.computeGrabXfo(this.__heldGeomItemRefs[i])\r\n      this.__heldGeomItemOffsets[i] = grabXfo.inverse().multiply(heldGeom.getParameter('GlobalXfo').getValue())\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event fired when a pointing device button is pressed\r\n   *\r\n   * @param {MouseEvent} event - The event param.\r\n   */\r\n  onPointerDown(event) {\r\n    if (event.pointerType === POINTER_TYPES.xr) {\r\n      const id = event.controller.getId()\r\n      this.__vrControllers[id] = event.controller\r\n\r\n      // const intersectionData = event.controller.getGeomItemAtTip()\r\n      const geomItem = this.__highlightedGeomItemIds[id]\r\n      if (geomItem) {\r\n        // if (geomItem.getOwner() instanceof Handle) return false\r\n\r\n        // console.log(\"onMouseDown on Geom\"); // + \" Material:\" + geomItem.getMaterial().name);\r\n        // console.log(geomItem.getPath()) // + \" Material:\" + geomItem.getMaterial().name);\r\n\r\n        let gidx = this.__heldGeomItems.indexOf(geomItem)\r\n        if (gidx == -1) {\r\n          gidx = this.__heldGeomItems.length\r\n          this.__heldObjectCount++\r\n          this.__heldGeomItems.push(geomItem)\r\n          this.__heldGeomItemRefs[gidx] = [id]\r\n          this.__heldGeomItemIds[id] = gidx\r\n\r\n          const changeData = {\r\n            newItem: geomItem,\r\n            newItemId: gidx,\r\n          }\r\n          if (!this.change) {\r\n            this.change = new HoldObjectsChange(changeData)\r\n            UndoRedoManager.getInstance().addChange(this.change)\r\n          } else {\r\n            this.change.update(changeData)\r\n          }\r\n        } else {\r\n          this.__heldGeomItemIds[id] = gidx\r\n          this.__heldGeomItemRefs[gidx].push(id)\r\n        }\r\n        this.initAction()\r\n        event.stopPropagation()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event fired when a pointing device button is released while the pointer is over the tool.\r\n   *\r\n   * @param {MouseEvent} event - The event param.\r\n   */\r\n  onPointerUp(event) {\r\n    if (event.pointerType === POINTER_TYPES.xr) {\r\n      const id = event.controller.getId()\r\n\r\n      this.__pressedButtonCount--\r\n      if (this.__heldGeomItemIds[id] !== undefined) {\r\n        const gidx = this.__heldGeomItemIds[id]\r\n        const refs = this.__heldGeomItemRefs[gidx]\r\n        refs.splice(refs.indexOf(id), 1)\r\n        if (refs.length == 0) {\r\n          this.__heldObjectCount--\r\n          this.__heldGeomItems[gidx] = undefined\r\n\r\n          this.change = undefined\r\n        }\r\n        this.__heldGeomItemIds[id] = undefined\r\n        this.initAction()\r\n        event.stopPropagation()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event fired when a pointing device is moved\r\n   *\r\n   * @param {MouseEvent} event - The event param.\r\n   */\r\n  onPointerMove(event) {\r\n    if (event.pointerType === POINTER_TYPES.xr) {\r\n      if (!this.change) {\r\n        event.controllers.forEach((controller) => {\r\n          const id = controller.getId()\r\n          const intersectionData = controller.getGeomItemAtTip()\r\n          if (intersectionData) {\r\n            const geomItem = intersectionData.geomItem\r\n            if (this.__highlightedGeomItemIds[id] != geomItem) {\r\n              if (this.__highlightedGeomItemIds[id]) {\r\n                this.__highlightedGeomItemIds[id].removeHighlight('vrHoldObject')\r\n              }\r\n              geomItem.addHighlight('vrHoldObject', new Color(1, 0, 0, 0.2))\r\n              this.__highlightedGeomItemIds[id] = geomItem\r\n            }\r\n          } else {\r\n            if (this.__highlightedGeomItemIds[id]) {\r\n              const geomItem = this.__highlightedGeomItemIds[id]\r\n              geomItem.removeHighlight('vrHoldObject')\r\n              this.__highlightedGeomItemIds[id] = null\r\n            }\r\n          }\r\n        })\r\n\r\n        return\r\n      }\r\n\r\n      const changeXfos = []\r\n      const changeXfoIds = []\r\n      for (let i = 0; i < this.__heldGeomItems.length; i++) {\r\n        const heldGeom = this.__heldGeomItems[i]\r\n        if (!heldGeom) continue\r\n        const grabXfo = this.computeGrabXfo(this.__heldGeomItemRefs[i])\r\n        changeXfos.push(grabXfo.multiply(this.__heldGeomItemOffsets[i]))\r\n        changeXfoIds.push(i)\r\n      }\r\n\r\n      this.change.update({ changeXfos, changeXfoIds })\r\n\r\n      event.stopPropagation()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event fired when a pointing device button is double clicked on the tool.\r\n   *\r\n   * @param {MouseEvent} event - The event param.\r\n   */\r\n  onPointerDoublePress(event) {\r\n    if (event.pointerType === POINTER_TYPES.xr) {\r\n      // this.onVRControllerDoubleClicked(event)\r\n    }\r\n  }\r\n}\r\n\r\nexport default VRHoldObjectsTool\r\nexport { VRHoldObjectsTool }\r\n","import { BaseTool } from '@zeainc/zea-engine'\r\n\r\n/**\r\n * Class representing a primary create tool.\r\n *\r\n * @extends BaseTool\r\n */\r\nexport default class BaseCreateTool extends BaseTool {\r\n  /**\r\n   * Creates an instance of BaseCreateTool.\r\n   *\r\n   * @param {object} appData - The appData value.\r\n   */\r\n  constructor(appData) {\r\n    super(appData)\r\n  }\r\n}\r\n","import { Color, Xfo, Ray, ColorParameter, GeomItem, Material, Cross, POINTER_TYPES } from '@zeainc/zea-engine'\r\nimport BaseCreateTool from '../BaseCreateTool'\r\nimport { UndoRedoManager } from '../../UndoRedo/index'\r\n\r\n/**\r\n * Base class for creating geometry tools.\r\n *\r\n * @extends BaseCreateTool\r\n */\r\nclass CreateGeomTool extends BaseCreateTool {\r\n  /**\r\n   * Create a create geom tool.\r\n   *\r\n   * @param {object} appData - The appData value.\r\n   */\r\n  constructor(appData) {\r\n    super(appData)\r\n\r\n    if (!appData) console.error('App data not provided to tool')\r\n    this.appData = appData\r\n    this.stage = 0\r\n    this.removeToolOnRightClick = true\r\n    this.parentItem = 'parentItem' in appData ? appData.parentItem : appData.scene.getRoot()\r\n\r\n    this.colorParam = this.addParameter(new ColorParameter('Color', new Color(0.7, 0.2, 0.2)))\r\n\r\n    this.controllerAddedHandler = this.controllerAddedHandler.bind(this)\r\n  }\r\n\r\n  /**\r\n   * Adds a geometry icon to the VR Controller\r\n   * @param {VRController} controller - The controller object.\r\n   */\r\n  addIconToVRController(controller) {\r\n    if (!this.vrControllerToolTip) {\r\n      this.vrControllerToolTip = new Cross(0.05)\r\n      this.vrControllerToolTipMat = new Material('VRController Cross', 'LinesShader')\r\n      this.vrControllerToolTipMat.getParameter('BaseColor').setValue(this.colorParam.getValue())\r\n      this.vrControllerToolTipMat.setSelectable(false)\r\n    }\r\n    const geomItem = new GeomItem('CreateGeomToolTip', this.vrControllerToolTip, this.vrControllerToolTipMat)\r\n    geomItem.setSelectable(false)\r\n    // controller.getTipItem().removeAllChildren()\r\n    controller.getTipItem().addChild(geomItem, false)\r\n  }\r\n\r\n  controllerAddedHandler(event) {\r\n    this.addIconToVRController(event.controller)\r\n  }\r\n\r\n  /**\r\n   * The activateTool method.\r\n   */\r\n  activateTool() {\r\n    super.activateTool()\r\n\r\n    this.prevCursor = this.appData.renderer.getGLCanvas().style.cursor\r\n    this.appData.renderer.getGLCanvas().style.cursor = 'crosshair'\r\n\r\n    this.appData.renderer.getXRViewport().then((xrvp) => {\r\n      for (const controller of xrvp.getControllers()) {\r\n        this.addIconToVRController(controller)\r\n      }\r\n      xrvp.on('controllerAdded', this.controllerAddedHandler)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * The deactivateTool method.\r\n   */\r\n  deactivateTool() {\r\n    super.deactivateTool()\r\n\r\n    this.appData.renderer.getGLCanvas().style.cursor = this.prevCursor\r\n\r\n    this.appData.renderer.getXRViewport().then((xrvp) => {\r\n      // for(let controller of xrvp.getControllers()) {\r\n      //   controller.getTipItem().removeAllChildren();\r\n      // }\r\n      xrvp.off('controllerAdded', this.controllerAddedHandler)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Transforms the screen position in the viewport to an Xfo object.\r\n   *\r\n   * @param {MouseEvent|TouchEvent} event - The event param\r\n   * @return {Xfo} The return value.\r\n   */\r\n  screenPosToXfo(event) {\r\n    if (event.intersectionData) {\r\n      const ray = event.pointerRay\r\n      const xfo = this.constructionPlane.clone()\r\n      xfo.tr = ray.pointAtDist(event.intersectionData.dist)\r\n      return xfo\r\n    }\r\n\r\n    const ray = event.pointerRay\r\n    const planeRay = new Ray(this.constructionPlane.tr, this.constructionPlane.ori.getZaxis())\r\n    const dist = ray.intersectRayPlane(planeRay)\r\n    if (dist > 0.0) {\r\n      const xfo = this.constructionPlane.clone()\r\n      xfo.tr = ray.pointAtDist(dist)\r\n      return xfo\r\n    }\r\n\r\n    const camera = event.viewport.getCamera()\r\n    const xfo = camera.getParameter('GlobalXfo').getValue().clone()\r\n    xfo.tr = ray.pointAtDist(camera.getFocalDistance())\r\n    return xfo\r\n  }\r\n\r\n  /**\r\n   * Starts the creation of the geometry.\r\n   *\r\n   * @param {Xfo} xfo - The xfo param.\r\n   */\r\n  createStart(xfo) {\r\n    this.stage = 1\r\n  }\r\n\r\n  /**\r\n   * The createPoint method.\r\n   *\r\n   * @param {Vec3} pt - The pt param.\r\n   */\r\n  createPoint(pt) {\r\n    // console.warn('Implement me')\r\n  }\r\n\r\n  /**\r\n   * The createMove method.\r\n   *\r\n   * @param {Vec3} pt - The pt param.\r\n   */\r\n  createMove(pt) {\r\n    // console.warn('Implement me')\r\n  }\r\n\r\n  /**\r\n   * The createRelease method.\r\n   *\r\n   * @param {Vec3} pt - The pt param.\r\n   */\r\n  createRelease(pt) {\r\n    // console.warn('Implement me')\r\n  }\r\n\r\n  // ///////////////////////////////////\r\n  // Mouse events\r\n\r\n  /**\r\n   * Event fired when a pointing device button is pressed over the viewport while the tool is activated.\r\n   *\r\n   * @param {MouseEvent|TouchEvent} event - The event param.\r\n   */\r\n  onPointerDown(event) {\r\n    // skip if the alt key is held. Allows the camera tool to work\r\n    if (event.pointerType === POINTER_TYPES.xr) {\r\n      this.onVRControllerButtonDown(event)\r\n    } else {\r\n      if (event.altKey) return\r\n      if (this.stage == 0) {\r\n        if (event.button == 0 || event.pointerType !== 'mouse') {\r\n          this.constructionPlane = new Xfo()\r\n\r\n          const xfo = this.screenPosToXfo(event)\r\n          this.createStart(xfo)\r\n          event.stopPropagation()\r\n        } else if (event.button == 2) {\r\n          // Cancel the tool.\r\n          // if (this.removeToolOnRightClick) this.appData.toolManager.removeTool(this.index)\r\n        }\r\n      } else if (event.button == 2) {\r\n        // Cancel the draw action.\r\n        UndoRedoManager.getInstance().cancel()\r\n        this.stage = 0\r\n      }\r\n      event.stopPropagation()\r\n      event.preventDefault() // prevent browser features like scroll and drag n drop\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event fired when a pointing device is moved while the cursor's hotspot is inside the viewport, while tool is activated.\r\n   *\r\n   * @param {MouseEvent|TouchEvent} event - The event param.\r\n   */\r\n  onPointerMove(event) {\r\n    if (event.pointerType === POINTER_TYPES.xr) {\r\n      this.onVRPoseChanged(event)\r\n    } else if (this.stage > 0) {\r\n      const xfo = this.screenPosToXfo(event)\r\n      this.createMove(xfo.tr)\r\n      event.stopPropagation()\r\n      event.preventDefault() // prevent browser features like scroll and drag n drop\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event fired when a pointing device button is released while the pointer is over the viewport, while the tool is activated.\r\n   *\r\n   * @param {MouseEvent|TouchEvent} event - The event param.\r\n   */\r\n  onPointerUp(event) {\r\n    if (event.pointerType === POINTER_TYPES.xr) {\r\n      this.onVRControllerButtonUp(event)\r\n    } else if (this.stage > 0) {\r\n      const xfo = this.screenPosToXfo(event)\r\n      this.createRelease(xfo.tr)\r\n      event.stopPropagation()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event fired when the user rotates the pointing device wheel, while the tool is activated.\r\n   *\r\n   * @param {MouseEvent} event - The event param.\r\n   */\r\n  onWheel(event) {\r\n    // console.warn('Implement me')\r\n  }\r\n\r\n  // ///////////////////////////////////\r\n  // Keyboard events\r\n\r\n  /**\r\n   * Event fired when the user presses a key on the keyboard, while the tool is activated.\r\n   *\r\n   * @param {KeyboardEvent} event - The event param.\r\n   */\r\n  onKeyPressed(event) {\r\n    // console.warn('Implement me')\r\n  }\r\n\r\n  /**\r\n   * Event fired when the user presses down a key on the keyboard, while the tool is activated.\r\n   *\r\n   * @param {KeyboardEvent} event - The event param.\r\n   */\r\n  onKeyDown(event) {\r\n    // console.warn('Implement me')\r\n  }\r\n\r\n  /**\r\n   * Event fired when the user releases a key on the keyboard.\r\n   *\r\n   * @param {KeyboardEvent} event - The event param.\r\n   */\r\n  onKeyUp(event) {\r\n    // console.warn('Implement me')\r\n  }\r\n\r\n  // ///////////////////////////////////\r\n\r\n  /**\r\n   * Event fired when one or more touch points have been disrupted in an implementation-specific manner inside the viewport, when the tool is activated.\r\n   *\r\n   * @param {TouchEvent} event - The event param.\r\n   */\r\n  onTouchCancel(event) {\r\n    // console.warn('Implement me')\r\n  }\r\n\r\n  // ///////////////////////////////////\r\n  // VRController events\r\n\r\n  /**\r\n   * Event fired when a VR controller button is pressed inside the viewport, when the tool is activated.\r\n   *\r\n   * @param {object} event - The event param.\r\n   */\r\n  onVRControllerButtonDown(event) {\r\n    if (!this.__activeController) {\r\n      // TODO: Snap the Xfo to any nearby construction planes.\r\n      this.__activeController = event.controller\r\n      this.constructionPlane = new Xfo()\r\n      const xfo = this.constructionPlane.clone()\r\n      xfo.tr = this.__activeController.getTipXfo().tr\r\n      this.createStart(xfo, this.appData.scene.getRoot())\r\n    }\r\n    event.stopPropagation()\r\n  }\r\n\r\n  /**\r\n   * The onVRPoseChanged method.\r\n   *\r\n   * @param {object} event - The event param.\r\n   */\r\n  onVRPoseChanged(event) {\r\n    if (this.__activeController && this.stage > 0) {\r\n      // TODO: Snap the Xfo to any nearby construction planes.\r\n      const xfo = this.__activeController.getTipXfo()\r\n      this.createMove(xfo.tr)\r\n      event.stopPropagation()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event fired when a VR controller button is released inside the viewport, when the tool is activated.\r\n   *\r\n   * @param {object} event - The event param.\r\n   */\r\n  onVRControllerButtonUp(event) {\r\n    if (this.stage > 0) {\r\n      if (this.__activeController == event.controller) {\r\n        const xfo = this.__activeController.getTipXfo()\r\n        this.createRelease(xfo.tr)\r\n        if (this.stage == 0) this.__activeController = undefined\r\n        event.stopPropagation()\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default CreateGeomTool\r\nexport { CreateGeomTool }\r\n","import { Xfo, Color } from '@zeainc/zea-engine'\r\nimport Change from '../../../UndoRedo/Change'\r\n\r\n/**\r\n * Class representing a create geom change.\r\n *\r\n * @extends Change\r\n */\r\nclass CreateGeomChange extends Change {\r\n  /**\r\n   * Create a create circle change.\r\n   * @param {string} name - The name value.\r\n   */\r\n  constructor(name) {\r\n    super(name)\r\n  }\r\n\r\n  /**\r\n   * The setParentAndXfo method.\r\n   * @param {TreeItem} parentItem - The parentItem param.\r\n   * @param {Xfo} xfo - The xfo param.\r\n   */\r\n  setParentAndXfo(parentItem, xfo) {\r\n    this.parentItem = parentItem\r\n    const name = this.parentItem.generateUniqueName(this.geomItem.getName())\r\n    this.geomItem.setName(name)\r\n    this.geomItem.getParameter('GlobalXfo').setValue(xfo)\r\n    this.parentItem.addChild(this.geomItem)\r\n\r\n    // this.geomItem.addRef(this) // keep a ref to stop it being destroyed\r\n  }\r\n\r\n  /**\r\n   * Removes recently created geometry from its parent.\r\n   */\r\n  undo() {\r\n    this.parentItem.removeChild(this.parentItem.getChildIndex(this.geomItem))\r\n  }\r\n\r\n  /**\r\n   * Restores recently created geometry and adds it to the specified parent tree item.\r\n   */\r\n  redo() {\r\n    this.parentItem.addChild(this.geomItem, false, false)\r\n  }\r\n\r\n  /**\r\n   * Serializes the change as a JSON object.\r\n   *\r\n   * @param {object} context - The context value\r\n   * @return {object} - The serialized change\r\n   */\r\n  toJSON(context) {\r\n    const j = super.toJSON(context)\r\n    j.parentItemPath = this.parentItem.getPath()\r\n    j.geomItemName = this.geomItem.getName()\r\n    j.geomItemXfo = this.geomItem.getParameter('LocalXfo').getValue()\r\n\r\n    const material = this.geomItem.getParameter('Material').getValue()\r\n    j.color = material.getParameter('BaseColor').getValue()\r\n    return j\r\n  }\r\n\r\n  /**\r\n   * Restores geometry from using the specified JSON\r\n   *\r\n   * @param {object} j - The j param.\r\n   * @param {object} context - The appData param.\r\n   */\r\n  fromJSON(j, context) {\r\n    const sceneRoot = context.appData.scene.getRoot()\r\n    this.parentItem = sceneRoot.resolvePath(j.parentItemPath, 1)\r\n    this.geomItem.setName(this.parentItem.generateUniqueName(j.geomItemName))\r\n    const xfo = new Xfo()\r\n    xfo.fromJSON(j.geomItemXfo)\r\n    this.geomItem.getParameter('LocalXfo').setValue(xfo)\r\n    this.childIndex = this.parentItem.addChild(this.geomItem, false)\r\n\r\n    if (j.color) {\r\n      const color = new Color(0.7, 0.2, 0.2)\r\n      color.fromJSON(j.color)\r\n      const material = this.geomItem.getParameter('Material').getValue()\r\n      material.getParameter('BaseColor').setValue(color)\r\n    }\r\n  }\r\n\r\n  // updateFromJSON(j) {\r\n  //   if (this.__newValue.fromJSON)\r\n  //     this.__newValue.fromJSON(j.value);\r\n  //   else\r\n  //     this.__newValue = j.value;\r\n  // }\r\n\r\n  /**\r\n   * Removes geometry item reference from change change.\r\n   */\r\n  destroy() {\r\n    // this.geomItem.removeRef(this) // remove the tmp ref.\r\n  }\r\n}\r\n\r\nexport default CreateGeomChange\r\nexport { CreateGeomChange }\r\n","import { Color, GeomItem, Material, Lines } from '@zeainc/zea-engine'\r\nimport UndoRedoManager from '../../../UndoRedo/UndoRedoManager'\r\nimport CreateGeomChange from './CreateGeomChange'\r\n\r\n/**\r\n * Class representing a create line change.\r\n *\r\n * **Events**\r\n * * **updated:** Triggered when the change is updated\r\n *\r\n * @extends CreateGeomChange\r\n */\r\nclass CreateLineChange extends CreateGeomChange {\r\n  /**\r\n   * Create a create line change.\r\n   *\r\n   * @param {TreeItem} parentItem - The parentItem value.\r\n   * @param {Xfo} xfo - The xfo value.\r\n   * @param {Color} color - The color value.\r\n   * @param {number} thickness - The thickness value.\r\n   */\r\n  constructor(parentItem, xfo, color, thickness) {\r\n    super('Create Line')\r\n\r\n    this.line = new Lines(0.0)\r\n    this.line.setNumVertices(2)\r\n    this.line.setNumSegments(1)\r\n    this.line.setSegmentVertexIndices(0, 0, 1)\r\n\r\n    const material = new Material('Line', 'FatLinesShader')\r\n    material.getParameter('BaseColor').setValue(new Color(0.7, 0.2, 0.2))\r\n    this.geomItem = new GeomItem('Line', this.line, material)\r\n\r\n    if (color) {\r\n      material.getParameter('BaseColor').setValue(color)\r\n    }\r\n\r\n    if (thickness) {\r\n      this.line.lineThickness = thickness\r\n    }\r\n\r\n    if (parentItem && xfo) {\r\n      this.setParentAndXfo(parentItem, xfo)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates Line using the specified data.\r\n   *\r\n   * @param {object} updateData - The updateData param.\r\n   */\r\n  update(updateData) {\r\n    if (updateData.p1) {\r\n      this.line.getVertexAttribute('positions').getValueRef(1).setFromOther(updateData.p1)\r\n      this.line.emit('geomDataChanged')\r\n    }\r\n\r\n    this.emit('updated', updateData)\r\n  }\r\n\r\n  /**\r\n   * Restores line geometry using a JSON object.\r\n   *\r\n   * @param {object} j - The j param.\r\n   * @param {object} context - The context param.\r\n   */\r\n  fromJSON(j, context) {\r\n    super.fromJSON(j, context)\r\n    if (j.color) {\r\n      const color = new Color()\r\n      color.fromJSON(j.color)\r\n      material.getParameter('BaseColor').setValue(color)\r\n    }\r\n\r\n    if (j.thickness) {\r\n      this.line.lineThickness = j.thickness\r\n    }\r\n  }\r\n}\r\n\r\nUndoRedoManager.registerChange('CreateLineChange', CreateLineChange)\r\n\r\nexport default CreateLineChange\r\nexport { CreateLineChange }\r\n","import { NumberParameter } from '@zeainc/zea-engine'\r\nimport CreateGeomTool from './CreateGeomTool'\r\nimport CreateLineChange from './Change/CreateLineChange'\r\nimport { UndoRedoManager } from '../../UndoRedo/index'\r\n\r\n/**\r\n * Tool for creating a line tool.\r\n *\r\n * **Events**\r\n * * **actionFinished:** Triggered when the creation of the geometry is completed.\r\n *\r\n * @extends CreateGeomTool\r\n */\r\nclass CreateLineTool extends CreateGeomTool {\r\n  /**\r\n   * Create a create line tool.\r\n   * @param {object} appData - The appData value.\r\n   */\r\n  constructor(appData) {\r\n    super(appData)\r\n\r\n    this.lineThickness = this.addParameter(new NumberParameter('LineThickness', 0.01, [0, 0.1])) // 1cm.\r\n  }\r\n\r\n  /**\r\n   * Starts line geometry creation.\r\n   *\r\n   * @param {Xfo} xfo - The xfo param.\r\n   */\r\n  createStart(xfo) {\r\n    this.change = new CreateLineChange(this.parentItem, xfo)\r\n    UndoRedoManager.getInstance().addChange(this.change)\r\n\r\n    this.xfo = xfo.inverse()\r\n    this.stage = 1\r\n    this.length = 0.0\r\n  }\r\n\r\n  /**\r\n   * Updates line structural data.\r\n   *\r\n   * @param {Vec3} pt - The pt param.\r\n   */\r\n  createMove(pt) {\r\n    const offset = this.xfo.transformVec3(pt)\r\n    this.length = offset.length()\r\n    this.change.update({ p1: offset })\r\n  }\r\n\r\n  /**\r\n   * Finishes Line geometry creation.\r\n   *\r\n   * @param {Vec3} pt - The pt param.\r\n   */\r\n  createRelease(pt) {\r\n    if (this.length == 0) {\r\n      UndoRedoManager.getInstance().cancel()\r\n    }\r\n    this.stage = 0\r\n    this.emit('actionFinished')\r\n  }\r\n\r\n  /**\r\n   * The onVRControllerButtonDown method.\r\n   *\r\n   * @param {object} event - The event param.\r\n   */\r\n  onVRControllerButtonDown(event) {\r\n    if (this.stage == 0) {\r\n      const stageScale = event.viewport.__stageScale\r\n      this.lineThickness.setValue(stageScale * 0.003)\r\n    }\r\n    super.onVRControllerButtonDown(event)\r\n  }\r\n}\r\n\r\nexport default CreateLineTool\r\nexport { CreateLineTool }\r\n","import { GeomItem, Material, Cone } from '@zeainc/zea-engine'\r\nimport { UndoRedoManager } from '../../../UndoRedo/index'\r\nimport CreateGeomChange from './CreateGeomChange'\r\n\r\n/**\r\n * Class representing a create cone change.\r\n *\r\n * **Events**\r\n * * **updated:** Triggered when the change is updated\r\n *\r\n * @extends CreateGeomChange\r\n */\r\nclass CreateConeChange extends CreateGeomChange {\r\n  /**\r\n   * Create a create cone change.\r\n   *\r\n   * @param {TreeItem} parentItem - The parentItem value.\r\n   * @param {Xfo} xfo - The xfo value.\r\n   */\r\n  constructor(parentItem, xfo, color) {\r\n    super('Create Cone')\r\n\r\n    const cone = new Cone(0.0, 0.0)\r\n    const material = new Material('Cone', 'SimpleSurfaceShader')\r\n    this.geomItem = new GeomItem('Cone', cone, material)\r\n\r\n    if (parentItem && xfo) {\r\n      material.getParameter('BaseColor').setValue(color)\r\n      this.setParentAndXfo(parentItem, xfo)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates cone with the specified data.\r\n   *\r\n   * @param {object} updateData - The updateData param.\r\n   */\r\n  update(updateData) {\r\n    if (updateData.radius)\r\n      this.geomItem.getParameter('Geometry').getValue().getParameter('Radius').setValue(updateData.radius)\r\n    if (updateData.height)\r\n      this.geomItem.getParameter('Geometry').getValue().getParameter('Height').setValue(updateData.height)\r\n\r\n    this.emit('updated', updateData)\r\n  }\r\n}\r\n\r\nUndoRedoManager.registerChange('CreateConeChange', CreateConeChange)\r\n\r\nexport default CreateConeChange\r\nexport { CreateConeChange }\r\n","import { Color, GeomItem, Material, Circle } from '@zeainc/zea-engine'\r\nimport { UndoRedoManager } from '../../../UndoRedo/index'\r\nimport CreateGeomChange from './CreateGeomChange'\r\n\r\n/**\r\n * Class representing a create circle change.\r\n *\r\n * **Events**\r\n * * **updated:** Triggered when the change is updated\r\n *\r\n * @extends CreateGeomChange\r\n */\r\nclass CreateCircleChange extends CreateGeomChange {\r\n  /**\r\n   * Creates an instance of CreateCircleChange.\r\n   *\r\n   * @param {TreeItem} parentItem - The parentItem value.\r\n   * @param {Xfo} xfo - The xfo value.\r\n   */\r\n  constructor(parentItem, xfo) {\r\n    super('CreateCircle')\r\n\r\n    this.circle = new Circle(0, 64)\r\n    this.circle.lineThickness = 0.05\r\n\r\n    const material = new Material('circle', 'FatLinesShader')\r\n    material.getParameter('BaseColor').setValue(new Color(0.7, 0.2, 0.2))\r\n\r\n    this.geomItem = new GeomItem('Circle', this.circle, material)\r\n\r\n    if (parentItem && xfo) {\r\n      this.setParentAndXfo(parentItem, xfo)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates circle with the specified data.\r\n   *\r\n   * @param {object} updateData - The updateData param.\r\n   */\r\n  update(updateData) {\r\n    this.circle.getParameter('Radius').setValue(updateData.radius)\r\n    this.emit('updated', updateData)\r\n  }\r\n\r\n  /**\r\n   * Serializes change as a JSON object.\r\n   *\r\n   * @return {object} - The return value.\r\n   */\r\n  toJSON() {\r\n    const j = super.toJSON()\r\n    j.radius = this.circle.getParameter('Radius').getValue()\r\n    return j\r\n  }\r\n\r\n  /**\r\n   * Updates circle with the specified JSON\r\n   *\r\n   * @param {object} j - The j param.\r\n   */\r\n  updateFromJSON(j) {\r\n    console.log('CreateCircleChange:', j)\r\n    if (j.radius) this.circle.getParameter('Radius').setValue(j.radius)\r\n  }\r\n}\r\n\r\nUndoRedoManager.registerChange('CreateCircleChange', CreateCircleChange)\r\n\r\nexport default CreateCircleChange\r\nexport { CreateCircleChange }\r\n","import { Color, Rect, Material, GeomItem } from '@zeainc/zea-engine'\r\nimport UndoRedoManager from '../../../UndoRedo/UndoRedoManager'\r\nimport CreateGeomChange from './CreateGeomChange'\r\n\r\n/**\r\n * Class representing a create rect change.\r\n *\r\n * **Events**\r\n * * **updated:** Triggered when the change is updated\r\n *\r\n * @extends CreateGeomChange\r\n */\r\nclass CreateRectChange extends CreateGeomChange {\r\n  /**\r\n   * Create a create rect change.\r\n   *\r\n   * @param {TreeItem} parentItem - The parentItem value.\r\n   * @param {Xfo} xfo - The xfo value.\r\n   */\r\n  constructor(parentItem, xfo) {\r\n    super('CreateRect')\r\n\r\n    this.rect = new Rect(0, 0)\r\n    this.rect.lineThickness = 0.05\r\n\r\n    const material = new Material('circle', 'FatLinesShader')\r\n    material.getParameter('BaseColor').setValue(new Color(0.7, 0.2, 0.2))\r\n    this.geomItem = new GeomItem('Rect', this.rect, material)\r\n\r\n    if (parentItem && xfo) {\r\n      this.setParentAndXfo(parentItem, xfo)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates rectangle with the specified data.\r\n   *\r\n   * @param {object} updateData - The updateData param.\r\n   */\r\n  update(updateData) {\r\n    if (updateData.baseSize) {\r\n      this.rect.getParameter('X').setValue(updateData.baseSize[0])\r\n      this.rect.getParameter('Y').setValue(updateData.baseSize[1])\r\n    }\r\n    if (updateData.tr) {\r\n      const xfo = this.geomItem.getParameter('LocalXfo').getValue()\r\n      xfo.tr.fromJSON(updateData.tr)\r\n      this.geomItem.getParameter('LocalXfo').setValue(xfo)\r\n    }\r\n\r\n    this.emit('updated', updateData)\r\n  }\r\n}\r\n\r\nUndoRedoManager.registerChange('CreateRectChange', CreateRectChange)\r\n\r\nexport default CreateRectChange\r\nexport { CreateRectChange }\r\n","import { Vec3, Color, GeomItem, Material, Lines } from '@zeainc/zea-engine'\r\nimport { UndoRedoManager } from '../../../UndoRedo/index'\r\nimport CreateGeomChange from './CreateGeomChange'\r\n\r\n/**\r\n * Class representing a create freehand line change.\r\n *\r\n * **Events**\r\n * * **updated:** Triggered when the change is updated\r\n *\r\n * @extends CreateGeomChange\r\n */\r\nclass CreateFreehandLineChange extends CreateGeomChange {\r\n  /**\r\n   * Create a create freehand line change.\r\n   *\r\n   * @param {TreeItem} parentItem - The parentItem value.\r\n   * @param {Xfo} xfo - The xfo value.\r\n   * @param {Color} color - The color value.\r\n   * @param {number} thickness - The thickness value.\r\n   */\r\n  constructor(parentItem, xfo, color, thickness = 0.001) {\r\n    super('CreateFreehandLine')\r\n\r\n    this.used = 0\r\n    this.vertexCount = 100\r\n\r\n    this.line = new Lines()\r\n    this.line.setNumVertices(this.vertexCount)\r\n    this.line.setNumSegments(this.vertexCount - 1)\r\n    this.line.getVertexAttribute('positions').setValue(0, new Vec3())\r\n    this.line.lineThickness = thickness\r\n\r\n    const material = new Material('freeHandLine', 'FatLinesShader')\r\n    material.getParameter('LineThickness').setValue(thickness)\r\n    if (color) {\r\n      material.getParameter('BaseColor').setValue(color)\r\n    }\r\n\r\n    this.geomItem = new GeomItem('freeHandLine', this.line, material)\r\n\r\n    if (parentItem && xfo) {\r\n      this.setParentAndXfo(parentItem, xfo)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates free hand line using the specified data.\r\n   *\r\n   * @param {object} updateData - The updateData param.\r\n   */\r\n  update(updateData) {\r\n    // console.log(\"update:\", this.used)\r\n\r\n    this.used++\r\n\r\n    let realloc = false\r\n    if (this.used >= this.line.getNumSegments()) {\r\n      this.vertexCount = this.vertexCount + 100\r\n      this.line.setNumVertices(this.vertexCount)\r\n      this.line.setNumSegments(this.vertexCount - 1)\r\n      realloc = true\r\n    }\r\n\r\n    this.line.getVertexAttribute('positions').setValue(this.used, updateData.point)\r\n    // this.line.getVertexAttributes().lineThickness.setValue(this.used, updateData.lineThickness);\r\n    this.line.setSegmentVertexIndices(this.used - 1, this.used - 1, this.used)\r\n\r\n    if (realloc) {\r\n      this.line.emit('geomDataTopologyChanged', {\r\n        topologyChanged: true,\r\n      })\r\n    } else {\r\n      this.line.emit('geomDataChanged', {\r\n        topologyChanged: true,\r\n      })\r\n    }\r\n    this.emit('updated', updateData)\r\n  }\r\n\r\n  /**\r\n   * Serializes change as a JSON object.\r\n   *\r\n   * @param {object} context - The appData param.\r\n   * @return {object} The return value.\r\n   */\r\n  toJSON(context) {\r\n    const j = super.toJSON(context)\r\n    j.lineThickness = this.line.lineThickness\r\n    const material = this.geomItem.getParameter('Material').getValue()\r\n    j.color = material.getParameter('BaseColor').getValue()\r\n    return j\r\n  }\r\n\r\n  /**\r\n   * Restores free hand line from a JSON object.\r\n   *\r\n   * @param {object} j - The j param.\r\n   * @param {object} context - The appData param.\r\n   */\r\n  fromJSON(j, context) {\r\n    // Need to set line thickness before the geom is added to the tree.\r\n    if (j.lineThickness) {\r\n      this.line.lineThickness = j.lineThickness\r\n      // this.line.addVertexAttribute('lineThickness', Float32, 0.0);\r\n      this.geomItem.getMaterial().getParameter('LineThickness').setValue(j.lineThickness)\r\n    }\r\n\r\n    if (j.color) {\r\n      const color = new Color(0.7, 0.2, 0.2)\r\n      color.fromJSON(j.color)\r\n      this.geomItem.getMaterial().getParameter('BaseColor').setValue(color)\r\n    }\r\n\r\n    super.fromJSON(j, context)\r\n  }\r\n}\r\n\r\nUndoRedoManager.registerChange('CreateFreehandLineChange', CreateFreehandLineChange)\r\n\r\nexport default CreateFreehandLineChange\r\nexport { CreateFreehandLineChange }\r\n","import { GeomItem, Material, Sphere } from '@zeainc/zea-engine'\r\nimport UndoRedoManager from '../../../UndoRedo/UndoRedoManager'\r\nimport CreateGeomChange from './CreateGeomChange'\r\n\r\n/**\r\n * Class representing a create sphere change.\r\n *\r\n * **Events**\r\n * * **updated:** Triggered when the change is updated\r\n *\r\n * @extends CreateGeomChange\r\n */\r\nclass CreateSphereChange extends CreateGeomChange {\r\n  /**\r\n   * Create a create sphere change.\r\n   * @param {TreeItem} parentItem - The parentItem value.\r\n   * @param {Xfo} xfo - The xfo value.\r\n   */\r\n  constructor(parentItem, xfo, color) {\r\n    super('CreateSphere', parentItem)\r\n\r\n    this.sphere = new Sphere(0, 24, 12)\r\n    const material = new Material('Sphere', 'SimpleSurfaceShader')\r\n    this.geomItem = new GeomItem('Sphere', this.sphere, material)\r\n\r\n    if (parentItem && xfo && color) {\r\n      material.getParameter('BaseColor').setValue(color)\r\n      this.setParentAndXfo(parentItem, xfo)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates sphere geometry using the specified data.\r\n   *\r\n   * @param {object} updateData - The updateData param.\r\n   */\r\n  update(updateData) {\r\n    this.sphere.getParameter('Radius').setValue(updateData.radius)\r\n\r\n    this.emit('updated', updateData)\r\n  }\r\n\r\n  /**\r\n   * Serializes sphere geometry as a JSON object.\r\n   *\r\n   * @return {object} The return value.\r\n   */\r\n  toJSON() {\r\n    const j = super.toJSON()\r\n    j.radius = this.sphere.getParameter('Radius').getValue()\r\n    return j\r\n  }\r\n\r\n  /**\r\n   * Updates sphere geometry using a JSON object.\r\n   *\r\n   * @param {object} j - The j param.\r\n   */\r\n  updateFromJSON(j) {\r\n    if (j.radius) this.sphere.getParameter('Radius').setValue(j.radius)\r\n  }\r\n}\r\n\r\nUndoRedoManager.registerChange('CreateSphereChange', CreateSphereChange)\r\n\r\nexport default CreateSphereChange\r\nexport { CreateSphereChange }\r\n","import { Cuboid, Material, GeomItem } from '@zeainc/zea-engine'\r\nimport { UndoRedoManager } from '../../../UndoRedo/index'\r\nimport CreateGeomChange from './CreateGeomChange'\r\n\r\n/**\r\n * Class representing a create cuboid change.\r\n *\r\n * **Events**\r\n * * **updated:** Triggered when the change is updated\r\n *\r\n * @extends CreateGeomChange\r\n */\r\nclass CreateCuboidChange extends CreateGeomChange {\r\n  /**\r\n   * Create a create cuboid change.\r\n   *\r\n   * @param {TreeItem} parentItem - The parentItem value.\r\n   * @param {Xfo} xfo - The xfo value.\r\n   */\r\n  constructor(parentItem, xfo, color) {\r\n    super('CreateCuboid')\r\n\r\n    this.cuboid = new Cuboid(0, 0, 0, true)\r\n    const material = new Material('Cuboid', 'SimpleSurfaceShader')\r\n    this.geomItem = new GeomItem('Cuboid', this.cuboid, material)\r\n\r\n    if (parentItem && xfo) {\r\n      material.getParameter('BaseColor').setValue(color)\r\n      this.setParentAndXfo(parentItem, xfo)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates cuboid using the specified data.\r\n   *\r\n   * @param {object} updateData - The updateData param.\r\n   */\r\n  update(updateData) {\r\n    if (updateData.baseSize) {\r\n      this.cuboid.setBaseSize(updateData.baseSize[0], updateData.baseSize[1])\r\n    }\r\n    if (updateData.tr) {\r\n      const xfo = this.geomItem.getParameter('LocalXfo').getValue()\r\n      xfo.tr.fromJSON(updateData.tr)\r\n      this.geomItem.getParameter('LocalXfo').setValue(xfo)\r\n    }\r\n    if (updateData.height) {\r\n      this.cuboid.getParameter('Z').setValue(updateData.height)\r\n    }\r\n    this.emit('updated', updateData)\r\n  }\r\n}\r\n\r\nUndoRedoManager.registerChange('CreateCuboidChange', CreateCuboidChange)\r\n\r\nexport default CreateCuboidChange\r\nexport { CreateCuboidChange }\r\n","/* eslint-disable require-jsdoc */\r\nimport { BaseTool } from '@zeainc/zea-engine'\r\n\r\n/**\r\n * @extends BaseTool\r\n */\r\nclass ToolManager extends BaseTool {\r\n  constructor() {\r\n    super()\r\n    this.tools = {}\r\n    this.toolStack = []\r\n  }\r\n\r\n  registerTool(toolName, tool) {\r\n    this.tools[toolName] = tool\r\n  }\r\n\r\n  pushTool(toolName) {\r\n    const tool = this.tools[toolName]\r\n    if (!tool) throw Error('Tool not found', toolName)\r\n    if (tool.activateTool) tool.activateTool()\r\n    this.toolStack.push(this.tools[toolName])\r\n  }\r\n\r\n  popTool() {\r\n    if (this.toolStack.length == 0) {\r\n      throw Error('Tool stack is empty')\r\n    }\r\n    const tool = this.toolStack[this.toolStack.length - 1]\r\n    if (tool.deactivateTool) tool.deactivateTool()\r\n    this.toolStack.pop()\r\n  }\r\n\r\n  /**\r\n   * Returns the tool currently at the top of the stack.\r\n   * @return {Tool} - the currently active tool.\r\n   */\r\n  activeTool() {\r\n    if (this.toolStack.length > 0) {\r\n      return this.toolStack[this.toolStack.length - 1]\r\n    }\r\n    return ''\r\n  }\r\n\r\n  /**\r\n   * Returns the name of the tool currently at the top of the stack.\r\n   * @return - the name of the tool.\r\n   */\r\n  activeToolName() {\r\n    if (this.toolStack.length > 0) {\r\n      const tool = this.toolStack[this.toolStack.length - 1]\r\n      for (const key in this.tools) {\r\n        if (this.tools[key] == tool) return key\r\n      }\r\n    }\r\n    return ''\r\n  }\r\n\r\n  // ///////////////////////////////////\r\n  // Pointer events\r\n\r\n  /**\r\n   * Event fired when a pointing device button is pressed while the pointer is over the tool.\r\n   *\r\n   * @param {MouseEvent} event - The event param.\r\n   */\r\n  onPointerDown(event) {\r\n    for (let i = this.toolStack.length - 1; i >= 0; i--) {\r\n      const tool = this.toolStack[i]\r\n      if (tool.onPointerDown) {\r\n        tool.onPointerDown(event)\r\n        if (!event.propagating) break\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event fired when a pointing device is moved while the cursor's hotspot is inside it.\r\n   *\r\n   * @param {MouseEvent} event - The event param.\r\n   */\r\n  onPointerMove(event) {\r\n    for (let i = this.toolStack.length - 1; i >= 0; i--) {\r\n      const tool = this.toolStack[i]\r\n      if (tool.onPointerMove) {\r\n        tool.onPointerMove(event)\r\n        if (!event.propagating) break\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event fired when a pointing device button is released while the pointer is over the tool.\r\n   *\r\n   * @param {MouseEvent} event - The event param.\r\n   */\r\n  onPointerUp(event) {\r\n    for (let i = this.toolStack.length - 1; i >= 0; i--) {\r\n      const tool = this.toolStack[i]\r\n      if (tool.onPointerUp) {\r\n        tool.onPointerUp(event)\r\n        if (!event.propagating) break\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event fired when a pointing device button is double clicked on the tool.\r\n   *\r\n   * @param {MouseEvent} event - The event param.\r\n   */\r\n  onPointerDoublePress(event) {\r\n    for (let i = this.toolStack.length - 1; i >= 0; i--) {\r\n      const tool = this.toolStack[i]\r\n      if (tool.onPointerDoublePress) {\r\n        tool.onPointerDoublePress(event)\r\n        if (!event.propagating) break\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event fired when the user rotates the pointing device wheel.\r\n   *\r\n   * @param {MouseEvent} event - The event param.\r\n   */\r\n  onWheel(event) {\r\n    for (let i = this.toolStack.length - 1; i >= 0; i--) {\r\n      const tool = this.toolStack[i]\r\n      if (tool.onWheel) {\r\n        tool.onWheel(event)\r\n        if (!event.propagating) break\r\n      }\r\n    }\r\n  }\r\n\r\n  // ///////////////////////////////////\r\n  // Keyboard events\r\n\r\n  /**\r\n   * Event fired when the user presses a key on the keyboard.\r\n   *\r\n   * @param {KeyboardEvent} event - The event param.\r\n   */\r\n  onKeyPressed(event) {\r\n    for (let i = this.toolStack.length - 1; i >= 0; i--) {\r\n      const tool = this.toolStack[i]\r\n      if (tool.onKeyPressed) {\r\n        tool.onKeyPressed(event)\r\n        if (!event.propagating) break\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event fired when the user presses down a key on the keyboard.\r\n   *\r\n   * @param {KeyboardEvent} event - The event param.\r\n   */\r\n  onKeyDown(event) {\r\n    for (let i = this.toolStack.length - 1; i >= 0; i--) {\r\n      const tool = this.toolStack[i]\r\n      if (tool.onKeyDown) {\r\n        tool.onKeyDown(event)\r\n        if (!event.propagating) break\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event fired when the user releases a key on the keyboard.\r\n   *\r\n   * @param {KeyboardEvent} event - The event param.\r\n   */\r\n  onKeyUp(event) {\r\n    for (let i = this.toolStack.length - 1; i >= 0; i--) {\r\n      const tool = this.toolStack[i]\r\n      if (tool.onKeyUp) {\r\n        tool.onKeyUp(event)\r\n        if (!event.propagating) break\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport { ToolManager }\r\n","import {\r\n  Color,\r\n  Xfo,\r\n  NumberParameter,\r\n  GeomItem,\r\n  Material,\r\n  Cylinder,\r\n  Sphere,\r\n  Registry,\r\n  MathFunctions,\r\n} from '@zeainc/zea-engine'\r\nimport BaseLinearMovementHandle from './BaseLinearMovementHandle'\r\nimport ParameterValueChange from '../UndoRedo/Changes/ParameterValueChange'\r\nimport UndoRedoManager from '../UndoRedo/UndoRedoManager'\r\n\r\n/**\r\n * Class representing a slider scene widget. There are two parts in this widget, the slider and the handle.<br>\r\n * The **Handle** is the moving part of the widget, the object you interact with. The **Slider** is the path that the **handle** follows.\r\n *\r\n * **Parameters**\r\n * * **Length(`NumberParameter`):** Specifies the length of the slider.\r\n * * **HandleRadius(`NumberParameter`):** Specifies the handle radius.\r\n * * **BarRadius(`NumberParameter`):** Specifies the radius of the slider.\r\n *\r\n *\r\n * @extends BaseLinearMovementHandle\r\n */\r\nclass SliderHandle extends BaseLinearMovementHandle {\r\n  /**\r\n   * Create a slider scene widget.\r\n   *\r\n   * @param {string} name - The name value.\r\n   * @param {number} length - The length value.\r\n   * @param {number} radius - The radius value.\r\n   * @param {Color} color - The color value.\r\n   */\r\n  constructor(name, length = 0.5, radius = 0.02, color = new Color('#F9CE03')) {\r\n    super(name)\r\n\r\n    this.lengthParam = this.addParameter(new NumberParameter('Length', length))\r\n    this.handleRadiusParam = this.addParameter(new NumberParameter('HandleRadius', radius))\r\n    this.barRadiusParam = this.addParameter(new NumberParameter('BarRadius', radius * 0.25))\r\n    this.colorParam.setValue(color)\r\n\r\n    this.handleMat = new Material('handle', 'FlatSurfaceShader')\r\n    this.handleMat.getParameter('BaseColor').setValue(this.colorParam.getValue())\r\n\r\n    const topBarMat = new Material('topBar', 'FlatSurfaceShader')\r\n    topBarMat.getParameter('BaseColor').setValue(new Color(0.5, 0.5, 0.5))\r\n\r\n    const barGeom = new Cylinder(radius * 0.25, 1, 64, 2, true, true)\r\n    const handleGeom = new Sphere(radius, 64)\r\n\r\n    this.handle = new GeomItem('handle', handleGeom, this.handleMat)\r\n    this.baseBar = new GeomItem('baseBar', barGeom, this.handleMat)\r\n    this.topBar = new GeomItem('topBar', barGeom, topBarMat)\r\n    this.handleXfo = new Xfo()\r\n    this.baseBarXfo = new Xfo()\r\n    this.topBarXfo = new Xfo()\r\n\r\n    this.barRadiusParam.on('valueChanged', () => {\r\n      barGeom.getParameter('Radius').setValue(this.barRadiusParam.getValue())\r\n    })\r\n    this.handleRadiusParam.on('valueChanged', () => {\r\n      handleGeom.getParameter('Radius').setValue(this.handleRadiusParam.getValue())\r\n    })\r\n    this.lengthParam.on('valueChanged', () => {\r\n      this.__updateSlider(this.value)\r\n    })\r\n    this.colorParam.on('valueChanged', () => {\r\n      this.handleMat.getParameter('BaseColor').setValue(this.colorParam.getValue())\r\n    })\r\n\r\n    this.addChild(this.handle)\r\n    this.addChild(this.baseBar)\r\n    this.addChild(this.topBar)\r\n\r\n    this.__updateSlider(0)\r\n  }\r\n\r\n  /**\r\n   * Applies a special shinning shader to the handle to illustrate interaction with it.\r\n   */\r\n  highlight() {\r\n    super.highlight()\r\n    this.handleMat.getParameter('BaseColor').setValue(this.highlightColorParam.getValue())\r\n  }\r\n\r\n  /**\r\n   * Removes the shining shader from the handle.\r\n   */\r\n  unhighlight() {\r\n    super.unhighlight()\r\n    this.handleMat.getParameter('BaseColor').setValue(this.colorParam.getValue())\r\n  }\r\n\r\n  /**\r\n   * Sets global xfo target parameter.\r\n   *\r\n   * @param {Parameter} param - The video param.\r\n   * @param {boolean} track - The track param.\r\n   */\r\n  setTargetParam(param) {\r\n    this.param = param\r\n    const __updateSlider = () => {\r\n      this.__updateSlider(param.getValue())\r\n    }\r\n    __updateSlider()\r\n    param.on('valueChanged', __updateSlider)\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {*} value -\r\n   * @private\r\n   */\r\n  __updateSlider(value) {\r\n    this.value = value\r\n    const range = this.param && this.param.getRange() ? this.param.getRange() : [0, 1]\r\n    const v = MathFunctions.remap(value, range[0], range[1], 0, 1)\r\n    const length = this.lengthParam.getValue()\r\n    this.baseBarXfo.sc.z = v * length\r\n    this.handleXfo.tr.z = v * length\r\n    this.topBarXfo.tr.z = v * length\r\n    this.topBarXfo.sc.z = (1 - v) * length\r\n    this.handle.getParameter('LocalXfo').setValue(this.handleXfo)\r\n    this.baseBar.getParameter('LocalXfo').setValue(this.baseBarXfo)\r\n    this.topBar.getParameter('LocalXfo').setValue(this.topBarXfo)\r\n  }\r\n\r\n  // ///////////////////////////////////\r\n  // Interaction events\r\n\r\n  /**\r\n   * Handles the initially drag of the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onDragStart(event) {\r\n    // Hilight the material.\r\n    this.handleXfo.sc.x = this.handleXfo.sc.y = this.handleXfo.sc.z = 1.2\r\n    this.handle.getParameter('LocalXfo').setValue(this.handleXfo)\r\n    if (!this.param) {\r\n      return\r\n    }\r\n\r\n    this.change = new ParameterValueChange(this.param)\r\n    UndoRedoManager.getInstance().addChange(this.change)\r\n  }\r\n\r\n  /**\r\n   * Handles drag action of the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onDrag(event) {\r\n    const length = this.lengthParam.getValue()\r\n    const range = this.param && this.param.getRange() ? this.param.getRange() : [0, 1]\r\n    const value = MathFunctions.clamp(\r\n      MathFunctions.remap(event.value, 0, length, range[0], range[1]),\r\n      range[0],\r\n      range[1]\r\n    )\r\n    if (!this.param) {\r\n      this.__updateSlider(value)\r\n      this.value = value\r\n      return\r\n    }\r\n\r\n    this.change.update({\r\n      value,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handles the end of dragging the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onDragEnd(event) {\r\n    this.change = null\r\n    // unhilight the material.\r\n    this.handleXfo.sc.x = this.handleXfo.sc.y = this.handleXfo.sc.z = 1.0\r\n    this.handle.getParameter('LocalXfo').setValue(this.handleXfo)\r\n  }\r\n\r\n  /**\r\n   * Serializes handle item as a JSON object.\r\n   *\r\n   * @param {object} context - The context param.\r\n   * @return {object} The return value.\r\n   */\r\n  toJSON(context) {\r\n    const json = super.toJSON(context)\r\n    if (this.param) json.targetParam = this.param.getPath()\r\n    return json\r\n  }\r\n\r\n  /**\r\n   * Restores handle item from a JSON object.\r\n   *\r\n   * @param {object} json - The json param.\r\n   * @param {object} context - The context param.\r\n   */\r\n  fromJSON(json, context) {\r\n    super.fromJSON(json, context)\r\n\r\n    if (json.targetParam) {\r\n      context.resolvePath(json.targetParam).then((param) => {\r\n        this.setTargetParam(param)\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\nRegistry.register('SliderHandle', SliderHandle)\r\n\r\nexport default SliderHandle\r\nexport { SliderHandle }\r\n","import {\r\n  MathFunctions,\r\n  Color,\r\n  Vec3,\r\n  Xfo,\r\n  NumberParameter,\r\n  XfoParameter,\r\n  GeomItem,\r\n  Material,\r\n  Circle,\r\n  Sphere,\r\n  Registry,\r\n} from '@zeainc/zea-engine'\r\nimport { BaseAxialRotationHandle } from './BaseAxialRotationHandle'\r\nimport ParameterValueChange from '../UndoRedo/Changes/ParameterValueChange'\r\nimport './Shaders/HandleShader'\r\nimport UndoRedoManager from '../UndoRedo/UndoRedoManager'\r\n\r\n/**\r\n * Class representing a slider scene widget with an arc shape. There are two parts in this widget, the slider and the handle.<br>\r\n * The **Handle** is the moving part of the widget, the object you interact with. The **Slider** is the path that the **handle** follows.\r\n *\r\n *\r\n * **Parameters**\r\n * * **ArcRadius(`NumberParameter`):** Specifies the radius of the slider.\r\n * * **ArcAngle(`NumberParameter`):** Specifies the arc angle of the slider.\r\n * * **HandleRadius(`NumberParameter`):** Specifies the radius of the handle in the slider.\r\n *\r\n * **Events**\r\n * * **dragStart:** Triggered when the pointer is down.\r\n * * **dragEnd:** Triggered when the pointer is released.\r\n *\r\n * @extends BaseAxialRotationHandle\r\n */\r\nclass ArcSlider extends BaseAxialRotationHandle {\r\n  /**\r\n   * Creates an instance of ArcSlider.\r\n   *\r\n   * @param {string} name - The name value\r\n   * @param {number} [arcRadius=1] - The arcRadius value\r\n   * @param {number} [arcAngle=1] - The arcAngle value\r\n   * @param {number} [handleRadius=0.02] - The handleRadius value\r\n   * @param {Color} [color=new Color(1, 1, 0)] - the color value\r\n   */\r\n  constructor(name, arcRadius = 1, arcAngle = 1, handleRadius = 0.02, color = new Color(1, 1, 0)) {\r\n    super(name)\r\n    this.arcRadiusParam = this.addParameter(new NumberParameter('ArcRadius', arcRadius))\r\n    this.arcAngleParam = this.addParameter(new NumberParameter('ArcAngle', arcAngle))\r\n    this.handleRadiusParam = this.addParameter(new NumberParameter('HandleRadius', handleRadius))\r\n    // this.barRadiusParam = this.addParameter(\r\n    //   new NumberParameter('Bar Radius', radius * 0.25)\r\n    // );\r\n    this.colorParam.setValue(color)\r\n\r\n    this.handleMat = new Material('handleMat', 'HandleShader')\r\n    this.handleMat.getParameter('BaseColor').setValue(color)\r\n\r\n    const arcGeom = new Circle(arcRadius, 64, arcAngle)\r\n    const handleGeom = new Sphere(handleRadius, 64)\r\n\r\n    this.handle = new GeomItem('handle', handleGeom, this.handleMat)\r\n    this.arc = new GeomItem('arc', arcGeom, this.handleMat)\r\n    this.handleXfo = new Xfo()\r\n    this.handleGeomOffsetXfo = new Xfo()\r\n    this.handleGeomOffsetXfo.tr.x = arcRadius\r\n    this.handle.getParameter('GeomOffsetXfo').setValue(this.handleGeomOffsetXfo)\r\n\r\n    // this.barRadiusParam.on('valueChanged', () => {\r\n    //   arcGeom.getParameter('Radius').setValue(this.barRadiusParam.getValue());\r\n    // });\r\n\r\n    this.range = [0, arcAngle]\r\n    this.arcAngleParam.on('valueChanged', () => {\r\n      const arcAngle = this.arcAngleParam.getValue()\r\n      arcGeom.getParameter('Angle').setValue(arcAngle)\r\n      this.range = [0, arcAngle]\r\n    })\r\n    this.arcRadiusParam.on('valueChanged', () => {\r\n      const arcRadius = this.arcRadiusParam.getValue()\r\n      arcGeom.getParameter('Radius').setValue(arcRadius)\r\n      this.handleGeomOffsetXfo.tr.x = arcRadius\r\n      this.handle.getParameter('GeomOffsetXfo').setValue(this.handleGeomOffsetXfo)\r\n    })\r\n    this.handleRadiusParam.on('valueChanged', () => {\r\n      handleGeom.getParameter('Radius').setValue(this.handleRadiusParam.getValue())\r\n    })\r\n\r\n    this.colorParam.on('valueChanged', () => {\r\n      this.handleMat.getParameter('BaseColor').setValue(this.colorParam.getValue())\r\n    })\r\n\r\n    this.addChild(this.handle)\r\n    this.addChild(this.arc)\r\n\r\n    // this.__updateSlider(0);\r\n    this.setTargetParam(this.handle.getParameter('GlobalXfo'), false)\r\n  }\r\n\r\n  // ///////////////////////////////////\r\n  // Mouse events\r\n\r\n  /**\r\n   * Event fired when a pointing device is initially moved within the space of the handle.\r\n   *\r\n   * @param {MouseEvent} event - The event param.\r\n   */\r\n  onPointerEnter(event) {\r\n    if (event.intersectionData && event.intersectionData.geomItem == this.handle) this.highlight()\r\n  }\r\n\r\n  /**\r\n   * Event fired when a pointing device moves outside of the space of the handle.\r\n   *\r\n   * @param {MouseEvent} event - The event param.\r\n   */\r\n  onPointerLeave(event) {\r\n    this.unhighlight()\r\n  }\r\n\r\n  /**\r\n   * Event fired when a pointing device button is pressed while the pointer is over the handle element.\r\n   *\r\n   * @param {MouseEvent} event - The event param.\r\n   */\r\n  onPointerDown(event) {\r\n    // We do not want to handle events\r\n    // that have propagated from children of\r\n    // the slider.\r\n    if (event.intersectionData && event.intersectionData.geomItem == this.handle) super.onPointerDown(event)\r\n  }\r\n\r\n  /**\r\n   * Applies a special shinning shader to the handle to illustrate interaction with it.\r\n   */\r\n  highlight() {\r\n    super.highlight()\r\n    this.handleMat.getParameter('BaseColor').setValue(this.highlightColorParam.getValue())\r\n  }\r\n\r\n  /**\r\n   * Removes the shining shader from the handle.\r\n   */\r\n  unhighlight() {\r\n    super.unhighlight()\r\n    this.handleMat.getParameter('BaseColor').setValue(this.colorParam.getValue())\r\n  }\r\n\r\n  // /**\r\n  //  * The setTargetParam method.\r\n  //  * @param {any} param - The param param.\r\n  //  */\r\n  // setTargetParam(param) {\r\n  //   this.param = param;\r\n  //   const __updateSlider = () => {\r\n  //     this.__updateSlider(param.getValue());\r\n  //   };\r\n  //   __updateSlider();\r\n  //   param.on('valueChanged', __updateSlider);\r\n  // }\r\n\r\n  /**\r\n   * Sets global xfo target parameter\r\n   *\r\n   * @param {Parameter} param - The param param.\r\n   * @param {boolean} track - The track param.\r\n   */\r\n  setTargetParam(param, track = true) {\r\n    this.param = param\r\n    if (track) {\r\n      if (this.param instanceof XfoParameter) {\r\n        const __updateGizmo = () => {\r\n          this.getParameter('GlobalXfo').setValue(param.getValue())\r\n        }\r\n        __updateGizmo()\r\n        param.on('valueChanged', __updateGizmo)\r\n      } else if (this.param instanceof NumberParameter) {\r\n        const __updateGizmo = () => {\r\n          this.handleXfo.ori.setFromAxisAndAngle(new Vec3(0, 0, 1), param.getValue())\r\n          this.handle.getParameter('GlobalXfo').setValue(this.handleXfo)\r\n        }\r\n        __updateGizmo()\r\n        param.on('valueChanged', __updateGizmo)\r\n      }\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line require-jsdoc\r\n  // __updateSlider(value) {\r\n  //   this.value = value\r\n  //   const range =\r\n  //     this.param && this.param.getRange() ? this.param.getRange() : [0, 1];\r\n  //   const v = Math.remap(value, range[0], range[1], 0, 1);\r\n  //   const length = this.arcAngleParam.getValue();\r\n  //   this.handleXfo.ori.setFromAxisAndAngle(this.axis, ) = v * length;\r\n  //   this.handle.getParameter('LocalXfo').setValue(this.handleXfo;\r\n  // }\r\n\r\n  // ///////////////////////////////////\r\n  // Interaction events\r\n\r\n  /**\r\n   * Returns handle's global Xfo\r\n   *\r\n   * @return {Xfo} - The Xfo value\r\n   */\r\n  getBaseXfo() {\r\n    return this.handle.getParameter('GlobalXfo').getValue()\r\n  }\r\n\r\n  /**\r\n   * Handles the initially drag interaction of the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onDragStart(event) {\r\n    this.baseXfo = this.getParameter('GlobalXfo').getValue().clone()\r\n    this.baseXfo.sc.set(1, 1, 1)\r\n    this.deltaXfo = new Xfo()\r\n    // this.offsetXfo = this.baseXfo.inverse().multiply(this.param.getValue());\r\n\r\n    this.vec0 = this.getParameter('GlobalXfo').getValue().ori.getXaxis()\r\n    // this.grabCircleRadius = this.arcRadiusParam.getValue();\r\n    this.vec0.normalizeInPlace()\r\n\r\n    this.change = new ParameterValueChange(this.param)\r\n    UndoRedoManager.getInstance().addChange(this.change)\r\n\r\n    // Hilight the material.\r\n    this.handleGeomOffsetXfo.sc.x = this.handleGeomOffsetXfo.sc.y = this.handleGeomOffsetXfo.sc.z = 1.2\r\n    this.handle.getParameter('GeomOffsetXfo').setValue(this.handleGeomOffsetXfo)\r\n\r\n    this.emit('dragStart')\r\n  }\r\n\r\n  /**\r\n   * Handles drag interaction of the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onDrag(event) {\r\n    const vec1 = event.holdPos.subtract(this.baseXfo.tr)\r\n    vec1.normalizeInPlace()\r\n\r\n    let angle = this.vec0.angleTo(vec1)\r\n    if (this.vec0.cross(vec1).dot(this.baseXfo.ori.getZaxis()) < 0) angle = -angle\r\n\r\n    if (this.range) {\r\n      angle = MathFunctions.clamp(angle, this.range[0], this.range[1])\r\n    }\r\n\r\n    if (event.shiftKey) {\r\n      // modulate the angle to X degree increments.\r\n      const increment = Math.degToRad(22.5)\r\n      angle = Math.floor(angle / increment) * increment\r\n    }\r\n\r\n    this.deltaXfo.ori.setFromAxisAndAngle(new Vec3(0, 0, 1), angle)\r\n\r\n    const newXfo = this.baseXfo.multiply(this.deltaXfo)\r\n    const value = newXfo // .multiply(this.offsetXfo);\r\n\r\n    if (this.change) {\r\n      if (this.param instanceof XfoParameter) {\r\n        this.change.update({\r\n          value,\r\n        })\r\n      } else if (this.param instanceof NumberParameter) {\r\n        this.change.update({\r\n          value: angle,\r\n        })\r\n      }\r\n    } else {\r\n      if (this.param instanceof XfoParameter) {\r\n        this.param.setValue(value)\r\n      } else if (this.param instanceof NumberParameter) {\r\n        this.param.setValue(angle)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the end of dragging interaction with the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onDragEnd(event) {\r\n    this.change = null\r\n    this.handleGeomOffsetXfo.sc.x = this.handleGeomOffsetXfo.sc.y = this.handleGeomOffsetXfo.sc.z = 1.0\r\n    this.handle.getParameter('GeomOffsetXfo').setValue(this.handleGeomOffsetXfo)\r\n\r\n    this.emit('dragEnd')\r\n  }\r\n\r\n  /**\r\n   * Serializes handle item as a JSON object.\r\n   *\r\n   * @param {object} context - The context param.\r\n   * @return {object} The return value.\r\n   */\r\n  toJSON(context) {\r\n    const json = super.toJSON(context)\r\n    if (this.param) json.targetParam = this.param.getPath()\r\n    return json\r\n  }\r\n\r\n  /**\r\n   * Restores handle item from a JSON object.\r\n   *\r\n   * @param {object} json - The json param.\r\n   * @param {object} context - The context param.\r\n   */\r\n  fromJSON(json, context) {\r\n    super.fromJSON(json, context)\r\n\r\n    if (json.targetParam) {\r\n      context.resolvePath(json.targetParam).then((param) => {\r\n        this.setTargetParam(param)\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\nRegistry.register('ArcSlider', ArcSlider)\r\n\r\nexport default ArcSlider\r\nexport { ArcSlider }\r\n","import {\r\n  TreeItem,\r\n  Material,\r\n  Color,\r\n  Sphere,\r\n  Lines,\r\n  BillboardItem,\r\n  Label,\r\n  GeomItem,\r\n  Xfo,\r\n  Vec3,\r\n  ColorParameter,\r\n  StringParameter,\r\n  Registry,\r\n} from '@zeainc/zea-engine'\r\n\r\nconst sphere = new Sphere(0.003)\r\nconst line = new Lines(0.0)\r\nline.setNumVertices(2)\r\nline.setNumSegments(1)\r\nline.setSegmentVertexIndices(0, 0, 1)\r\nline.getVertexAttribute('positions').getValueRef(1).setFromOther(new Vec3(0, 0, 1))\r\n\r\n/**\r\n *\r\n *\r\n * @extends {TreeItem}\r\n */\r\nclass MeasureDistance extends TreeItem {\r\n  /**\r\n   * Creates an instance of MeasureDistance.\r\n   * @param {string} name\r\n   * @param {Color} color\r\n   */\r\n  constructor(name = 'MeasureDistance', color = new Color('#F9CE03')) {\r\n    super(name)\r\n\r\n    this.colorParam = this.addParameter(new ColorParameter('Color', color))\r\n    this.unitsParameter = this.addParameter(new StringParameter('Units', 'mm'))\r\n\r\n    this.markerMaterial = new Material('Marker', 'HandleShader')\r\n    this.markerMaterial.getParameter('BaseColor').setValue(this.colorParam.getValue())\r\n    this.markerMaterial.getParameter('MaintainScreenSize').setValue(1)\r\n    this.markerMaterial.getParameter('Overlay').setValue(0.5)\r\n\r\n    this.lineMaterial = new Material('Line', 'LinesShader')\r\n    this.lineMaterial.getParameter('BaseColor').setValue(this.colorParam.getValue())\r\n    this.lineMaterial.getParameter('Overlay').setValue(0.5)\r\n\r\n    this.startMarker = new GeomItem(`${name}StartMarker`, sphere, this.markerMaterial)\r\n    this.endMarker = new GeomItem(`${name}EndMarker`, sphere, this.markerMaterial)\r\n\r\n    this.addChild(this.startMarker)\r\n    this.addChild(this.endMarker)\r\n\r\n    this.lineGeomItem = new GeomItem('Line', line, this.lineMaterial)\r\n    this.lineGeomItem.setSelectable(false)\r\n    this.addChild(this.lineGeomItem)\r\n\r\n    this.label = new Label('Distance')\r\n    this.label.getParameter('FontSize').setValue(20)\r\n    this.label.getParameter('BackgroundColor').setValue(this.colorParam.getValue())\r\n\r\n    this.billboard = new BillboardItem('DistanceBillboard', this.label)\r\n    this.billboard.getParameter('LocalXfo').setValue(new Xfo())\r\n    this.billboard.getParameter('PixelsPerMeter').setValue(1500)\r\n    this.billboard.getParameter('AlignedToCamera').setValue(true)\r\n    this.billboard.getParameter('DrawOnTop').setValue(true)\r\n    this.billboard.getParameter('FixedSizeOnscreen').setValue(true)\r\n    this.billboard.getParameter('Alpha').setValue(1)\r\n\r\n    this.addChild(this.billboard)\r\n\r\n    this.colorParam.on('valueChanged', () => {\r\n      const color = this.colorParam.getValue()\r\n      this.markerMaterial.getParameter('BaseColor').setValue(color)\r\n      this.lineMaterial.getParameter('BaseColor').setValue(color)\r\n      this.label.getParameter('BackgroundColor').setValue(color)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Updates the measured value\r\n   */\r\n  updateMeasurement() {\r\n    const startXfo = this.startMarker.getParameter('GlobalXfo').getValue()\r\n    const endXfo = this.endMarker.getParameter('GlobalXfo').getValue()\r\n\r\n    const vector = endXfo.tr.subtract(startXfo.tr)\r\n    const distance = vector.length()\r\n\r\n    const lineXfo = startXfo.clone()\r\n    lineXfo.ori.setFromDirectionAndUpvector(vector, new Vec3(vector.z, vector.x, vector.y))\r\n    lineXfo.sc.z = distance\r\n\r\n    this.lineGeomItem.getParameter('GlobalXfo').setValue(lineXfo)\r\n\r\n    // Convert meters to mm.\r\n    const distanceInMM = distance * 1000\r\n\r\n    this.label.getParameter('Text').setValue(`${parseFloat(distanceInMM.toFixed(4))}${this.unitsParameter.getValue()}`)\r\n\r\n    vector.normalizeInPlace()\r\n    const midPoint = startXfo.tr.add(vector.scale(distance * 0.5))\r\n    const labelXfo = new Xfo(midPoint)\r\n    labelXfo.ori.setFromDirectionAndUpvector(vector, new Vec3(vector.z, vector.x, vector.y))\r\n    this.billboard.getParameter('GlobalXfo').setValue(labelXfo)\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {Vec3} position\r\n   */\r\n  setStartMarkerPos(position) {\r\n    const newXfo = this.startMarker.getParameter('GlobalXfo').getValue()\r\n    newXfo.tr = position\r\n    this.startMarker.getParameter('GlobalXfo').setValue(newXfo)\r\n    this.updateMeasurement()\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {Vec3} position\r\n   */\r\n  setEndMarkerPos(position) {\r\n    const endXfo = this.endMarker.getParameter('GlobalXfo').getValue()\r\n    endXfo.tr = position\r\n    this.endMarker.getParameter('GlobalXfo').setValue(endXfo)\r\n    this.updateMeasurement()\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {boolean} isVisible -\r\n   */\r\n  setGeomBuffersVisibility(isVisible) {\r\n    this.startMarker.setSelectable(!isVisible)\r\n    this.endMarker.setSelectable(!isVisible)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @return {string}\r\n   */\r\n  getMeasurementText() {\r\n    return this.label.getParameter('Text').getValue()\r\n  }\r\n}\r\n\r\nRegistry.register('MeasureDistance', MeasureDistance)\r\n\r\nexport { MeasureDistance }\r\n","import {\r\n  TreeItem,\r\n  Material,\r\n  Color,\r\n  Sphere,\r\n  Lines,\r\n  BillboardItem,\r\n  Label,\r\n  GeomItem,\r\n  Xfo,\r\n  Vec3,\r\n  ColorParameter,\r\n  Registry,\r\n  Ray,\r\n} from '@zeainc/zea-engine'\r\n\r\nconst sphere = new Sphere(0.003, 24, 12, false)\r\nconst line = new Lines(0.0)\r\nline.setNumVertices(2)\r\nline.setNumSegments(1)\r\nline.setSegmentVertexIndices(0, 0, 1)\r\nline.getVertexAttribute('positions').getValueRef(1).setFromOther(new Vec3(0, 0, 1))\r\n/**\r\n *\r\n *\r\n * @extends {TreeItem}\r\n */\r\nclass MeasureAngle extends TreeItem {\r\n  /**\r\n   * Creates an instance of MeasureAngle.\r\n   * @param {string} name\r\n   * @param {Color} color\r\n   */\r\n  constructor(name = 'MeasureAngle', color = new Color('#00AA00')) {\r\n    super(name)\r\n\r\n    this.colorParam = this.addParameter(new ColorParameter('Color', color))\r\n\r\n    this.markerMaterial = new Material('Marker', 'HandleShader')\r\n    this.markerMaterial.getParameter('BaseColor').setValue(this.colorParam.getValue())\r\n    this.markerMaterial.getParameter('MaintainScreenSize').setValue(1)\r\n    this.markerMaterial.getParameter('Overlay').setValue(0.5)\r\n\r\n    this.markerMaterialB = new Material('Marker', 'HandleShader')\r\n    this.markerMaterialB.getParameter('BaseColor').setValue(new Color(1, 0, 0))\r\n    this.markerMaterialB.getParameter('MaintainScreenSize').setValue(1)\r\n    this.markerMaterialB.getParameter('Overlay').setValue(0.5)\r\n\r\n    this.lineMaterial = new Material('Line', 'LinesShader')\r\n    this.lineMaterial.getParameter('BaseColor').setValue(this.colorParam.getValue())\r\n    this.lineMaterial.getParameter('Overlay').setValue(0.5)\r\n\r\n    this.markerA = new GeomItem(`markerA`, sphere, this.markerMaterial)\r\n    this.markerB = new GeomItem(`markerB`, sphere, this.markerMaterialB)\r\n    this.addChild(this.markerA)\r\n    this.addChild(this.markerB)\r\n  }\r\n\r\n  /**\r\n   * Given the 2 marker positions, calculate and display the angle.\r\n   */\r\n  createLinesAndLabel() {\r\n    this.markerA.addChild(new GeomItem('Line', line, this.lineMaterial), false)\r\n    this.markerB.addChild(new GeomItem('Line', line, this.lineMaterial), false)\r\n\r\n    this.label = new Label('Distance')\r\n    this.label.getParameter('FontSize').setValue(20)\r\n    this.label.getParameter('BackgroundColor').setValue(this.colorParam.getValue())\r\n\r\n    this.billboard = new BillboardItem('DistanceBillboard', this.label)\r\n    this.billboard.getParameter('LocalXfo').setValue(new Xfo())\r\n    this.billboard.getParameter('PixelsPerMeter').setValue(1500)\r\n    this.billboard.getParameter('AlignedToCamera').setValue(true)\r\n    this.billboard.getParameter('DrawOnTop').setValue(true)\r\n    this.billboard.getParameter('FixedSizeOnscreen').setValue(true)\r\n    this.billboard.getParameter('Alpha').setValue(1)\r\n\r\n    this.addChild(this.billboard)\r\n\r\n    this.colorParam.on('valueChanged', () => {\r\n      const color = this.colorParam.getValue()\r\n      this.markerMaterial.getParameter('BaseColor').setValue(color)\r\n      this.lineMaterial.getParameter('BaseColor').setValue(color)\r\n      this.label.getParameter('BackgroundColor').setValue(color)\r\n    })\r\n\r\n    // ////////////////////////////////////////\r\n    // Calculate the angle\r\n    const xfoA = this.markerA.getParameter('GlobalXfo').getValue()\r\n    const xfoB = this.markerB.getParameter('GlobalXfo').getValue()\r\n\r\n    const normA = xfoA.ori.getZaxis()\r\n    const normB = xfoB.ori.getZaxis()\r\n\r\n    const axis = normA.cross(normB).normalize()\r\n    const tangentA = axis.cross(normA).normalize()\r\n    const tangentB = axis.cross(normB).normalize()\r\n\r\n    const rayA = new Ray(xfoA.tr, tangentA)\r\n    const rayB = new Ray(xfoB.tr, tangentB)\r\n    const params = rayA.intersectRayVector(rayB)\r\n\r\n    const angle = tangentA.angleTo(tangentB)\r\n\r\n    const labelXfo = new Xfo()\r\n    labelXfo.tr.addInPlace(rayA.pointAtDist(params[0]))\r\n    labelXfo.tr.addInPlace(rayB.pointAtDist(params[1]))\r\n    labelXfo.tr.scaleInPlace(0.5)\r\n\r\n    xfoA.ori.setFromDirectionAndUpvector(tangentA, normA)\r\n    this.markerA.getParameter('GlobalXfo').setValue(xfoA)\r\n    xfoB.ori.setFromDirectionAndUpvector(tangentB, normA)\r\n    this.markerB.getParameter('GlobalXfo').setValue(xfoB)\r\n\r\n    const lineAXfo = new Xfo()\r\n    lineAXfo.sc.z = params[0]\r\n    this.markerA.getChild(0).getParameter('LocalXfo').setValue(lineAXfo)\r\n    const lineBXfo = new Xfo()\r\n    lineBXfo.sc.z = params[1]\r\n    this.markerB.getChild(0).getParameter('LocalXfo').setValue(lineBXfo)\r\n\r\n    this.label.getParameter('Text').setValue(`${(angle / (Math.PI / 180)).toFixed(3)} °`)\r\n\r\n    this.billboard.getParameter('GlobalXfo').setValue(labelXfo)\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {Xfo} xfo\r\n   */\r\n  setXfoA(xfo) {\r\n    this.markerA.getParameter('GlobalXfo').setValue(xfo)\r\n    this.markerB.getParameter('GlobalXfo').setValue(xfo)\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @return {Xfo}\r\n   */\r\n  getXfoA() {\r\n    return this.markerA.getParameter('GlobalXfo').getValue()\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {Xfo} xfo\r\n   */\r\n  setXfoB(xfo) {\r\n    this.markerB.getParameter('GlobalXfo').setValue(xfo)\r\n    this.createLinesAndLabel()\r\n  }\r\n}\r\n\r\nRegistry.register('MeasureAngle', MeasureAngle)\r\n\r\nexport { MeasureAngle }\r\n","import { Xfo, Registry } from '@zeainc/zea-engine'\r\nimport { UndoRedoManager, Change } from '../UndoRedo/index'\r\n\r\n/**\r\n * Represents a Measurement change.\r\n *\r\n * @extends Change\r\n */\r\nclass MeasurementChange extends Change {\r\n  /**\r\n   * Creates an instance of MeasurementChange.\r\n   *\r\n   * @param {TreeItem} measurement - The parent that the measurement will be added to.\r\n   */\r\n  constructor(measurement) {\r\n    super('MeasurementChange')\r\n\r\n    if (measurement) {\r\n      this.measurement = measurement\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {object} data - An object containing potentially the start and end positions.\r\n   * @memberof MeasurementChange\r\n   */\r\n  update(data) {\r\n    this.measurement.fromJSON(data.measurementData)\r\n    this.emit('updated', data)\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  end() {\r\n    this.measurement.setGeomBuffersVisibility(true)\r\n  }\r\n\r\n  /**\r\n   * Removes recently created geometry from its parent.\r\n   */\r\n  undo() {\r\n    console.log('undo MeasurementChange')\r\n    this.parentItem = this.measurement.getOwner()\r\n    this.childIndex = this.parentItem.getChildIndex(this.measurement)\r\n    this.parentItem.removeChild(this.childIndex)\r\n  }\r\n\r\n  /**\r\n   * Restores recently created geometry and adds it to the specified parent tree item.\r\n   */\r\n  redo() {\r\n    console.log('redo MeasurementChange')\r\n    this.parentItem.insertChild(this.measurement, this.childIndex)\r\n  }\r\n\r\n  /**\r\n   * Serializes the change as a JSON object.\r\n   *\r\n   * @param {object} context - The context value\r\n   * @return {object} - The serialized change\r\n   */\r\n  toJSON(context) {\r\n    const j = super.toJSON(context)\r\n    j.parentItemPath = this.measurement.getOwner().getPath()\r\n    j.measurementType = Registry.getBlueprintName(this.measurement)\r\n    j.measurementData = this.measurement.toJSON(context)\r\n    return j\r\n  }\r\n\r\n  /**\r\n   * Restores geometry from using the specified JSON\r\n   *\r\n   * @param {object} j - The j param.\r\n   * @param {object} context - The appData param.\r\n   */\r\n  fromJSON(j, context) {\r\n    const sceneRoot = context.appData.scene.getRoot()\r\n    const parentItem = sceneRoot.resolvePath(j.parentItemPath, 1)\r\n    if (parentItem) {\r\n      this.measurement = Registry.constructBlueprintName(j.measurementType)\r\n      this.measurement.fromJSON(j.measurementData)\r\n      parentItem.addChild(this.measurement)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes geometry item reference from change change.\r\n   */\r\n  destroy() {}\r\n}\r\n\r\nUndoRedoManager.registerChange('MeasurementChange', MeasurementChange)\r\nexport { MeasurementChange }\r\n","import UndoRedoManager from '../UndoRedo/UndoRedoManager'\r\nimport { Ray, Vec3, Color, ColorParameter, BaseTool } from '@zeainc/zea-engine'\r\nimport { MeasureDistance } from './MeasureDistance'\r\nimport { MeasurementChange } from './MeasurementChange'\r\n/**\r\n * UI Tool for measurements\r\n *\r\n * @extends {BaseTool}\r\n */\r\nclass MeasureDistanceTool extends BaseTool {\r\n  /**\r\n   * Creates an instance of MeasureDistanceTool.\r\n   *\r\n   * @param {object} appData - The appData value\r\n   */\r\n  constructor(appData) {\r\n    super()\r\n\r\n    this.colorParam = this.addParameter(new ColorParameter('Color', new Color('#F9CE03')))\r\n    if (!appData) console.error('App data not provided to tool')\r\n    this.appData = appData\r\n    this.measurementChange = null\r\n    this.highlightedItemA = null\r\n    this.highlightedItemB = null\r\n    this.stage = 0\r\n  }\r\n\r\n  /**\r\n   * The activateTool method.\r\n   */\r\n  activateTool() {\r\n    super.activateTool()\r\n    if (this.appData && this.appData.renderer) {\r\n      this.prevCursor = this.appData.renderer.getGLCanvas().style.cursor\r\n      this.appData.renderer.getGLCanvas().style.cursor = 'crosshair'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The deactivateTool method.\r\n   */\r\n  deactivateTool() {\r\n    super.deactivateTool()\r\n    if (this.appData && this.appData.renderer) {\r\n      this.appData.renderer.getGLCanvas().style.cursor = this.prevCursor\r\n    }\r\n\r\n    if (this.stage != 0) {\r\n      const parentItem = this.measurement.getOwner()\r\n      parentItem.removeChild(parentItem.getChildIndex(this.measurement))\r\n      this.measurement = null\r\n\r\n      if (this.highlightedItemB) {\r\n        this.highlightedItemB.removeHighlight('measure', true)\r\n        this.highlightedItemB = null\r\n      }\r\n      if (this.highlightedItemA) {\r\n        this.highlightedItemA.removeHighlight('measure', true)\r\n        this.highlightedItemA = null\r\n      }\r\n      this.stage = 0\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {GeomItem} geomItem\r\n   * @param {Vec3} pos\r\n   * @return {Vec3}\r\n   * @private\r\n   */\r\n  snapToParametricEdge(geomItem, pos) {\r\n    const xfo = geomItem.getParameter('GlobalXfo').getValue()\r\n    if (geomItem.hasParameter('CurveType')) {\r\n      const curveType = geomItem.getParameter('CurveType').getValue()\r\n\r\n      switch (curveType) {\r\n        case 'Line': {\r\n          const crvToPnt = pos.subtract(xfo.tr)\r\n          const xaxis = xfo.ori.getXaxis()\r\n          return xfo.tr.add(xaxis.scale(crvToPnt.dot(xaxis)))\r\n        }\r\n        case 'Circle': {\r\n          const crvToPnt = pos.subtract(xfo.tr)\r\n          const radius = geomItem.getParameter('Radius').getValue() * xfo.sc.x\r\n          const zaxis = xfo.ori.getZaxis()\r\n          crvToPnt.subtractInPlace(zaxis.scale(crvToPnt.dot(zaxis)))\r\n          const length = crvToPnt.length()\r\n          return xfo.tr.add(crvToPnt.scale(radius / length))\r\n        }\r\n        default: {\r\n          console.log('Unhandled Edge Type: ', curveType)\r\n        }\r\n      }\r\n    } else if (geomItem.hasParameter('SurfaceType')) {\r\n      const surfaceType = geomItem.getParameter('SurfaceType').getValue()\r\n\r\n      switch (surfaceType) {\r\n        case 'Plane': {\r\n          const srfToPnt = pos.subtract(xfo.tr)\r\n          const zaxis = xfo.ori.getZaxis()\r\n          return pos.subtract(zaxis.scale(srfToPnt.dot(zaxis)))\r\n        }\r\n        case 'Cylinder': {\r\n          const srfToPnt = pos.subtract(xfo.tr)\r\n          const zaxis = xfo.ori.getZaxis()\r\n          const pointOnAxis = xfo.tr.add(zaxis.scale(srfToPnt.dot(zaxis)))\r\n\r\n          const radius = geomItem.getParameter('Radius').getValue() * xfo.sc.x\r\n          const axisToPnt = pos.subtract(pointOnAxis)\r\n          const length = axisToPnt.length()\r\n          return pointOnAxis.add(axisToPnt.scale(radius / length))\r\n        }\r\n        default: {\r\n          console.log('Unhandled Surface Type: ', surfaceType)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {MouseEvent|TouchEvent} event - The event value\r\n   */\r\n  onPointerDown(event) {\r\n    // skip if the alt key is held. Allows the camera tool to work\r\n    if (event.altKey || (event.pointerType === 'mouse' && event.button !== 0) || !event.intersectionData) return\r\n\r\n    if (this.stage == 0) {\r\n      if (this.highlightedItemA) {\r\n        const ray = event.pointerRay\r\n        let hitPos\r\n        if (event.intersectionData) {\r\n          hitPos = ray.start.add(ray.dir.scale(event.intersectionData.dist))\r\n        } else {\r\n          const plane = new Ray(new Vec3(), new Vec3(0, 0, 1))\r\n          const distance = ray.intersectRayPlane(plane)\r\n          hitPos = ray.start.add(ray.dir.scale(distance))\r\n        }\r\n\r\n        const startPos = this.snapToParametricEdge(this.highlightedItemA, hitPos)\r\n        const color = this.colorParam.getValue()\r\n\r\n        this.measurement = new MeasureDistance('Measure Distance', color)\r\n        this.measurement.setStartMarkerPos(startPos)\r\n        this.measurement.setEndMarkerPos(startPos)\r\n        this.appData.scene.getRoot().addChild(this.measurement)\r\n\r\n        this.measurementChange = new MeasurementChange(this.measurement)\r\n        UndoRedoManager.getInstance().addChange(this.measurementChange)\r\n\r\n        this.stage++\r\n        event.stopPropagation()\r\n      }\r\n    } else if (this.stage == 1) {\r\n      if (this.highlightedItemB) {\r\n        const ray = event.pointerRay\r\n        const hitPos = ray.start.add(ray.dir.scale(event.intersectionData.dist))\r\n        const startPos = this.snapToParametricEdge(this.highlightedItemA, hitPos)\r\n        const endPos = this.snapToParametricEdge(this.highlightedItemB, hitPos)\r\n        this.measurement.setStartMarkerPos(startPos)\r\n        this.measurement.setEndMarkerPos(endPos)\r\n\r\n        if (this.highlightedItemA) {\r\n          this.highlightedItemA.removeHighlight('measure', true)\r\n          this.highlightedItemA = null\r\n        }\r\n        if (this.highlightedItemB) {\r\n          this.highlightedItemB.removeHighlight('measure', true)\r\n          this.highlightedItemB = null\r\n        }\r\n        this.stage = 0\r\n        this.measurement = null\r\n        event.stopPropagation()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {MouseEvent|TouchEvent} event - The event value\r\n   */\r\n  onPointerMove(event) {\r\n    // skip if the alt key is held. Allows the camera tool to work\r\n    if (event.altKey || (event.pointerType === 'mouse' && event.button !== 0)) return\r\n\r\n    if (this.stage == 0) {\r\n      if (event.intersectionData) {\r\n        const { geomItem } = event.intersectionData\r\n        if (geomItem.hasParameter('CurveType') || geomItem.hasParameter('SurfaceType')) {\r\n          if (!geomItem != this.highlightedItemA) {\r\n            if (this.highlightedItemA) {\r\n              this.highlightedItemA.removeHighlight('measure', true)\r\n            }\r\n            this.highlightedItemA = geomItem\r\n            this.highlightedItemA.addHighlight('measure', new Color(1, 1, 1, 0.2), true)\r\n          }\r\n        }\r\n      } else {\r\n        if (this.highlightedItemA) {\r\n          this.highlightedItemA.removeHighlight('measure', true)\r\n          this.highlightedItemA = null\r\n        }\r\n      }\r\n      event.stopPropagation()\r\n    } else if (this.stage == 1) {\r\n      if (event.intersectionData) {\r\n        const { geomItem } = event.intersectionData\r\n        if (geomItem != this.highlightedItemA && geomItem != this.highlightedItemB) {\r\n          if (geomItem.hasParameter('CurveType') || geomItem.hasParameter('SurfaceType')) {\r\n            if (this.highlightedItemB) {\r\n              this.highlightedItemB.removeHighlight('measure', true)\r\n              this.highlightedItemB = null\r\n            }\r\n\r\n            this.highlightedItemB = geomItem\r\n            this.highlightedItemB.addHighlight('measure', new Color(1, 1, 1, 0.2), true)\r\n          }\r\n        }\r\n      } else {\r\n        if (this.highlightedItemB) {\r\n          this.highlightedItemB.removeHighlight('measure', true)\r\n          this.highlightedItemB = null\r\n        }\r\n      }\r\n\r\n      event.stopPropagation()\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {MouseEvent|TouchEvent} event - The event value\r\n   */\r\n  onPointerUp(event) {}\r\n}\r\n\r\nexport { MeasureDistanceTool }\r\n","import UndoRedoManager from '../UndoRedo/UndoRedoManager'\r\nimport { Ray, Vec3, Color, ColorParameter, BaseTool } from '@zeainc/zea-engine'\r\nimport { MeasureDistance } from './MeasureDistance'\r\nimport { MeasurementChange } from './MeasurementChange'\r\n/**\r\n * UI Tool for measurements\r\n *\r\n * @extends {BaseTool}\r\n */\r\nclass MeasureCenterDistancesTool extends BaseTool {\r\n  /**\r\n   * Creates an instance of MeasureCenterDistancesTool.\r\n   *\r\n   * @param {object} appData - The appData value\r\n   */\r\n  constructor(appData) {\r\n    super()\r\n\r\n    this.colorParam = this.addParameter(new ColorParameter('Color', new Color('#F9CE03')))\r\n    if (!appData) console.error('App data not provided to tool')\r\n    this.appData = appData\r\n    this.measurementChange = null\r\n    this.highlightedItemA = null\r\n    this.highlightedItemB = null\r\n    this.stage = 0\r\n  }\r\n\r\n  /**\r\n   * The activateTool method.\r\n   */\r\n  activateTool() {\r\n    super.activateTool()\r\n    if (this.appData && this.appData.renderer) {\r\n      this.prevCursor = this.appData.renderer.getGLCanvas().style.cursor\r\n      this.appData.renderer.getGLCanvas().style.cursor = 'crosshair'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The deactivateTool method.\r\n   */\r\n  deactivateTool() {\r\n    super.deactivateTool()\r\n    if (this.appData && this.appData.renderer) {\r\n      this.appData.renderer.getGLCanvas().style.cursor = this.prevCursor\r\n    }\r\n\r\n    if (this.stage != 0) {\r\n      const parentItem = this.measurement.getOwner()\r\n      parentItem.removeChild(parentItem.getChildIndex(this.measurement))\r\n      this.measurement = null\r\n\r\n      if (this.highlightedItemB) {\r\n        this.highlightedItemB.removeHighlight('measure', true)\r\n        this.highlightedItemB = null\r\n      }\r\n      if (this.highlightedItemA) {\r\n        this.highlightedItemA.removeHighlight('measure', true)\r\n        this.highlightedItemA = null\r\n      }\r\n      this.stage = 0\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {GeomItem} geomItem\r\n   * @param {string} key\r\n   * @private\r\n   */\r\n  highlightEdge(geomItem, key) {}\r\n\r\n  /**\r\n   * @param {GeomItem} geomItem\r\n   * @param {Vec3} pos\r\n   * @return {Vec3}\r\n   * @private\r\n   */\r\n  snapToParametricCenter(geomItem, pos) {\r\n    const xfo = geomItem.getParameter('GlobalXfo').getValue()\r\n    if (geomItem.hasParameter('CurveType')) {\r\n      const curveType = geomItem.getParameter('CurveType').getValue()\r\n\r\n      switch (curveType) {\r\n        case 'Circle': {\r\n          const crvToPnt = pos.subtract(xfo.tr)\r\n          const zaxis = xfo.ori.getZaxis()\r\n          return xfo.tr.add(zaxis.scale(crvToPnt.dot(zaxis)))\r\n        }\r\n        default: {\r\n          console.log('Unhandled Edge Type: ', curveType)\r\n        }\r\n      }\r\n    } else if (geomItem.hasParameter('SurfaceType')) {\r\n      const surfaceType = geomItem.getParameter('SurfaceType').getValue()\r\n\r\n      switch (surfaceType) {\r\n        case 'Cylinder':\r\n        case 'Cone': {\r\n          const srfToPnt = pos.subtract(xfo.tr)\r\n          const zaxis = xfo.ori.getZaxis()\r\n          return xfo.tr.add(zaxis.scale(srfToPnt.dot(zaxis)))\r\n        }\r\n        default: {\r\n          console.log('Unhandled Surface Type: ', surfaceType)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {MouseEvent|TouchEvent} event - The event value\r\n   */\r\n  onPointerDown(event) {\r\n    // skip if the alt key is held. Allows the camera tool to work\r\n    if (event.altKey || (event.pointerType === 'mouse' && event.button !== 0) || !event.intersectionData) return\r\n\r\n    if (this.stage == 0) {\r\n      if (this.highlightedItemA) {\r\n        const ray = event.pointerRay\r\n        let hitPos\r\n        if (event.intersectionData) {\r\n          hitPos = ray.start.add(ray.dir.scale(event.intersectionData.dist))\r\n        } else {\r\n          const plane = new Ray(new Vec3(), new Vec3(0, 0, 1))\r\n          const distance = ray.intersectRayPlane(plane)\r\n          hitPos = ray.start.add(ray.dir.scale(distance))\r\n        }\r\n\r\n        const startPos = this.snapToParametricCenter(this.highlightedItemA, hitPos)\r\n        const color = this.colorParam.getValue()\r\n\r\n        this.measurement = new MeasureDistance('Measure Distance', color)\r\n        this.measurement.setStartMarkerPos(startPos)\r\n        this.measurement.setEndMarkerPos(startPos)\r\n        this.appData.scene.getRoot().addChild(this.measurement)\r\n\r\n        this.measurementChange = new MeasurementChange(this.measurement)\r\n        UndoRedoManager.getInstance().addChange(this.measurementChange)\r\n\r\n        this.stage++\r\n        event.stopPropagation()\r\n      }\r\n    } else if (this.stage == 1) {\r\n      if (this.highlightedItemB) {\r\n        const ray = event.pointerRay\r\n        const hitPos = ray.start.add(ray.dir.scale(event.intersectionData.dist))\r\n        let endPos = this.snapToParametricCenter(this.highlightedItemB, hitPos)\r\n        const startPos = this.snapToParametricCenter(this.highlightedItemA, endPos)\r\n        endPos = this.snapToParametricCenter(this.highlightedItemB, startPos)\r\n        this.measurement.setStartMarkerPos(startPos)\r\n        this.measurement.setEndMarkerPos(endPos)\r\n\r\n        if (this.highlightedItemA) {\r\n          this.highlightedItemA.removeHighlight('measure', true)\r\n          this.highlightedItemA = null\r\n        }\r\n        if (this.highlightedItemB) {\r\n          this.highlightedItemB.removeHighlight('measure', true)\r\n          this.highlightedItemB = null\r\n        }\r\n        this.stage = 0\r\n        this.measurement = null\r\n        event.stopPropagation()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks to see if the surface is appropriate for this kind of measurement.\r\n   * @param {GeomItem} geomItem - The geomItem to check\r\n   * @return {boolean}\r\n   */\r\n  checkGeom(geomItem) {\r\n    if (geomItem.hasParameter('CurveType')) {\r\n      const curveTypeParm = geomItem.getParameter('CurveType')\r\n      return curveTypeParm.getValue() == 'Circle'\r\n    }\r\n    if (geomItem.hasParameter('SurfaceType')) {\r\n      const surfaceTypeParm = geomItem.getParameter('SurfaceType')\r\n      return surfaceTypeParm.getValue() == 'Cone' || surfaceTypeParm.getValue() == 'Cylinder'\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {MouseEvent|TouchEvent} event - The event value\r\n   */\r\n  onPointerMove(event) {\r\n    // skip if the alt key is held. Allows the camera tool to work\r\n    if (event.altKey || (event.pointerType === 'mouse' && event.button !== 0)) return\r\n\r\n    if (this.stage == 0) {\r\n      if (event.intersectionData) {\r\n        const { geomItem } = event.intersectionData\r\n        if (geomItem != this.highlightedItemA && this.checkGeom(geomItem)) {\r\n          if (this.highlightedItemA) {\r\n            this.highlightedItemA.removeHighlight('measure', true)\r\n          }\r\n          this.highlightedItemA = geomItem\r\n\r\n          const color = this.colorParam.getValue().clone()\r\n          color.a = 0.2\r\n          this.highlightedItemA.addHighlight('measure', color, true)\r\n        }\r\n      } else {\r\n        if (this.highlightedItemA) {\r\n          this.highlightedItemA.removeHighlight('measure', true)\r\n          this.highlightedItemA = null\r\n        }\r\n      }\r\n      event.stopPropagation()\r\n    } else if (this.stage == 1) {\r\n      if (event.intersectionData) {\r\n        const { geomItem } = event.intersectionData\r\n        if (geomItem != this.highlightedItemA && geomItem != this.highlightedItemB && this.checkGeom(geomItem)) {\r\n          if (this.highlightedItemB) {\r\n            this.highlightedItemB.removeHighlight('measure', true)\r\n            this.highlightedItemB = null\r\n          }\r\n\r\n          this.highlightedItemB = geomItem\r\n          const color = this.colorParam.getValue().clone()\r\n          color.a = 0.2\r\n          this.highlightedItemB.addHighlight('measure', color, true)\r\n        }\r\n      } else {\r\n        if (this.highlightedItemB) {\r\n          this.highlightedItemB.removeHighlight('measure', true)\r\n          this.highlightedItemB = null\r\n        }\r\n      }\r\n      event.stopPropagation()\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {MouseEvent|TouchEvent} event - The event value\r\n   */\r\n  onPointerUp(event) {}\r\n}\r\n\r\nexport { MeasureCenterDistancesTool }\r\n","import UndoRedoManager from '../UndoRedo/UndoRedoManager'\r\nimport { Ray, Vec3, Color, ColorParameter, BaseTool } from '@zeainc/zea-engine'\r\nimport { MeasurementChange } from './MeasurementChange'\r\nimport { MeasureDistance } from './MeasureDistance'\r\n/**\r\n * UI Tool for measurements\r\n *\r\n * @extends {BaseTool}\r\n */\r\nclass MeasureRadiusTool extends BaseTool {\r\n  /**\r\n   * Creates an instance of MeasureRadiusTool.\r\n   *\r\n   * @param {object} appData - The appData value\r\n   */\r\n  constructor(appData) {\r\n    super()\r\n\r\n    this.colorParam = this.addParameter(new ColorParameter('Color', new Color('#F9CE03')))\r\n    if (!appData) console.error('App data not provided to tool')\r\n    this.appData = appData\r\n    this.highlightedItemA = null\r\n  }\r\n\r\n  /**\r\n   * The activateTool method.\r\n   */\r\n  activateTool() {\r\n    super.activateTool()\r\n    if (this.appData && this.appData.renderer) {\r\n      this.prevCursor = this.appData.renderer.getGLCanvas().style.cursor\r\n      this.appData.renderer.getGLCanvas().style.cursor = 'crosshair'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The deactivateTool method.\r\n   */\r\n  deactivateTool() {\r\n    super.deactivateTool()\r\n    if (this.appData && this.appData.renderer) {\r\n      this.appData.renderer.getGLCanvas().style.cursor = this.prevCursor\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {MouseEvent|TouchEvent} event - The event value\r\n   */\r\n  onPointerDown(event) {\r\n    // skip if the alt key is held. Allows the camera tool to work\r\n    if (event.altKey || (event.pointerType === 'mouse' && event.button !== 0) || !event.intersectionData) return\r\n\r\n    if (this.highlightedItemA) {\r\n      const ray = event.pointerRay\r\n      let hitPos\r\n      if (event.intersectionData) {\r\n        hitPos = ray.start.add(ray.dir.scale(event.intersectionData.dist))\r\n      } else {\r\n        const plane = new Ray(new Vec3(), new Vec3(0, 0, 1))\r\n        const distance = ray.intersectRayPlane(plane)\r\n        hitPos = ray.start.add(ray.dir.scale(distance))\r\n      }\r\n      const geomItem = this.highlightedItemA\r\n      const xfo = geomItem.getParameter('GlobalXfo').getValue()\r\n      let axisPos\r\n      let edgePos\r\n      if (geomItem.hasParameter('CurveType')) {\r\n        const curveType = geomItem.getParameter('CurveType').getValue()\r\n        switch (curveType) {\r\n          case 'Circle': {\r\n            const crvToPnt = hitPos.subtract(xfo.tr)\r\n            const radius = geomItem.getParameter('Radius').getValue() * xfo.sc.x\r\n            const zaxis = xfo.ori.getZaxis()\r\n            crvToPnt.subtractInPlace(zaxis.scale(crvToPnt.dot(zaxis)))\r\n            const length = crvToPnt.length()\r\n            axisPos = xfo.tr\r\n            edgePos = axisPos.add(crvToPnt.scale(radius / length))\r\n          }\r\n          default: {\r\n            console.log('Unhandled Edge Type: ', curveType)\r\n          }\r\n        }\r\n      } else if (geomItem.hasParameter('SurfaceType')) {\r\n        const surfaceType = geomItem.getParameter('SurfaceType').getValue()\r\n        switch (surfaceType) {\r\n          case 'Cylinder': {\r\n            const srfToPnt = hitPos.subtract(xfo.tr)\r\n            const zaxis = xfo.ori.getZaxis()\r\n            axisPos = xfo.tr.add(zaxis.scale(srfToPnt.dot(zaxis)))\r\n\r\n            const radius = geomItem.getParameter('Radius').getValue() * xfo.sc.x\r\n            const axisToPnt = hitPos.subtract(axisPos)\r\n            const length = axisToPnt.length()\r\n            edgePos = axisPos.add(axisToPnt.scale(radius / length))\r\n          }\r\n          default: {\r\n            console.log('Unhandled Surface Type: ', surfaceType)\r\n          }\r\n        }\r\n      }\r\n      const color = this.colorParam.getValue()\r\n\r\n      const measurement = new MeasureDistance('MeasureRadius', color)\r\n      measurement.setStartMarkerPos(axisPos)\r\n      measurement.setEndMarkerPos(edgePos)\r\n      measurement.setGeomBuffersVisibility(false)\r\n      this.appData.scene.getRoot().addChild(measurement)\r\n\r\n      const measurementChange = new MeasurementChange(measurement)\r\n      UndoRedoManager.getInstance().addChange(measurementChange)\r\n\r\n      if (this.highlightedItemA) this.highlightedItemA.removeHighlight('measure', true)\r\n      event.stopPropagation()\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {MouseEvent|TouchEvent} event - The event value\r\n   */\r\n  onPointerMove(event) {\r\n    // skip if the alt key is held. Allows the camera tool to work\r\n    if (event.altKey || (event.pointerType === 'mouse' && event.button !== 0)) return\r\n\r\n    if (!this.dragging) {\r\n      if (event.intersectionData) {\r\n        const { geomItem } = event.intersectionData\r\n        if (\r\n          (geomItem.hasParameter('CurveType') && geomItem.getParameter('CurveType').getValue() == 'Circle') ||\r\n          (geomItem.hasParameter('SurfaceType') && geomItem.getParameter('SurfaceType').getValue() == 'Cylinder')\r\n        ) {\r\n          if (geomItem != this.highlightedItemA) {\r\n            if (this.highlightedItemA) {\r\n              this.highlightedItemA.removeHighlight('measure', true)\r\n            }\r\n            this.highlightedItemA = geomItem\r\n            const color = this.colorParam.getValue().clone()\r\n            color.a = 0.2\r\n            this.highlightedItemA.addHighlight('measure', color, true)\r\n          }\r\n        }\r\n      } else {\r\n        if (this.highlightedItemA) {\r\n          this.highlightedItemA.removeHighlight('measure', true)\r\n          this.highlightedItemA = null\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {MouseEvent|TouchEvent} event - The event value\r\n   */\r\n  onPointerUp(event) {}\r\n}\r\n\r\nexport { MeasureRadiusTool }\r\n","import UndoRedoManager from '../UndoRedo/UndoRedoManager'\r\nimport { Ray, Vec3, Color, ColorParameter, BaseTool, GeomItem, Xfo, Quat } from '@zeainc/zea-engine'\r\nimport { MeasurementChange } from './MeasurementChange'\r\nimport { MeasureAngle } from './MeasureAngle'\r\n/**\r\n * UI Tool for measurements\r\n *\r\n * @extends {BaseTool}\r\n */\r\nclass MeasureAngleTool extends BaseTool {\r\n  /**\r\n   * Creates an instance of MeasureAngleTool.\r\n   *\r\n   * @param {object} appData - The appData value\r\n   */\r\n  constructor(appData) {\r\n    super()\r\n\r\n    this.colorParam = this.addParameter(new ColorParameter('Color', new Color('#F9CE03')))\r\n    if (!appData) console.error('App data not provided to tool')\r\n    this.appData = appData\r\n    this.measurementChange = null\r\n    this.highlightedItemA = null\r\n    this.highlightedItemAHitPos = null\r\n    this.highlightedItemB = null\r\n    this.stage = 0\r\n  }\r\n\r\n  /**\r\n   * The activateTool method.\r\n   */\r\n  activateTool() {\r\n    super.activateTool()\r\n    if (this.appData && this.appData.renderer) {\r\n      this.prevCursor = this.appData.renderer.getGLCanvas().style.cursor\r\n      this.appData.renderer.getGLCanvas().style.cursor = 'crosshair'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The deactivateTool method.\r\n   */\r\n  deactivateTool() {\r\n    super.deactivateTool()\r\n    if (this.appData && this.appData.renderer) {\r\n      this.appData.renderer.getGLCanvas().style.cursor = this.prevCursor\r\n    }\r\n    if (this.stage != 0) {\r\n      const parentItem = this.measurement.getOwner()\r\n      parentItem.removeChild(parentItem.getChildIndex(this.measurement))\r\n      this.measurement = null\r\n\r\n      if (this.highlightedItemB) {\r\n        this.highlightedItemB.removeHighlight('measure', true)\r\n        this.highlightedItemB = null\r\n      }\r\n      if (this.highlightedItemA) {\r\n        this.highlightedItemA.removeHighlight('measure', true)\r\n        this.highlightedItemA = null\r\n      }\r\n      this.stage = 0\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks to see if the surface is appropriate for this kind of measurement.\r\n   * @param {GeomItem} geomItem - The geomItem to check\r\n   * @return {boolean}\r\n   */\r\n  checkSurface(geomItem) {\r\n    const surfaceTypeParm = geomItem.getParameter('SurfaceType')\r\n    return (\r\n      surfaceTypeParm &&\r\n      (surfaceTypeParm.getValue() == 'Plane' ||\r\n        surfaceTypeParm.getValue() == 'Cone' ||\r\n        surfaceTypeParm.getValue() == 'Cylinder')\r\n    )\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {MouseEvent|TouchEvent} event - The event value\r\n   */\r\n  onPointerDown(event) {\r\n    // skip if the alt key is held. Allows the camera tool to work\r\n    if (event.altKey || (event.pointerType === 'mouse' && event.button !== 0) || !event.intersectionData) return\r\n\r\n    const getSurfaceXfo = (geomItem, hitPos, closestTo) => {\r\n      const xfo = new Xfo()\r\n      const surfaceTypeParm = geomItem.getParameter('SurfaceType')\r\n      if (surfaceTypeParm) {\r\n        const surfaceType = surfaceTypeParm.getValue()\r\n        switch (surfaceType) {\r\n          case 'Plane': {\r\n            const geomMat = geomItem.getParameter('GeomMat').getValue()\r\n            const srfToPnt = hitPos.subtract(geomMat.translation)\r\n            let zaxis = geomMat.zAxis.clone()\r\n            if (zaxis.dot(event.pointerRay.dir) > 0) zaxis = zaxis.negate()\r\n\r\n            const hitPos2 = hitPos\r\n            if (closestTo) {\r\n              const normA = zaxis\r\n              const normB = closestTo.ori.getZaxis()\r\n              const vectorAB = closestTo.tr.subtract(hitPos)\r\n              const axis = normA.cross(normB).normalize()\r\n              hitPos2.addInPlace(axis.scale(vectorAB.dot(axis)))\r\n            }\r\n\r\n            xfo.ori.setFromDirectionAndUpvector(zaxis, new Vec3(zaxis.z, zaxis.x, zaxis.y))\r\n            xfo.tr = hitPos2.subtract(zaxis.scale(srfToPnt.dot(zaxis)))\r\n            break\r\n          }\r\n          case 'Cone': {\r\n            const globalXfo = geomItem.getParameter('GlobalXfo').getValue()\r\n            const semiAngle = geomItem.getParameter('SemiAngle').getValue()\r\n            const startRadius = geomItem.getParameter('StartRadius').getValue()\r\n            const zaxis = globalXfo.ori.getZaxis()\r\n            const zaxisDist = hitPos.subtract(globalXfo.tr).dot(zaxis)\r\n            const radiusAtPoint = startRadius + Math.tan(semiAngle) * zaxisDist\r\n            let hitPos2 = hitPos\r\n            if (closestTo) {\r\n              const vec2 = closestTo.tr.subtract(globalXfo.tr)\r\n              vec2.subtractInPlace(zaxis.scale(vec2.dot(zaxis)))\r\n              hitPos2 = globalXfo.tr.add(vec2.normalize().scale(radiusAtPoint))\r\n              hitPos2.addInPlace(zaxis.scale(zaxisDist))\r\n            }\r\n            const vec = hitPos2.subtract(globalXfo.tr)\r\n            xfo.ori.setFromDirectionAndUpvector(zaxis, vec)\r\n            const rot = new Quat()\r\n            rot.setFromAxisAndAngle(new Vec3(1, 0, 0), semiAngle)\r\n            xfo.ori.multiplyInPlace(rot)\r\n            xfo.tr = hitPos2\r\n\r\n            const zaxis2 = globalXfo.ori.getZaxis()\r\n            const angle = zaxis2.angleTo(xfo.ori.getZaxis())\r\n            console.log(angle, semiAngle)\r\n            break\r\n          }\r\n          case 'Cylinder': {\r\n            const globalXfo = geomItem.getParameter('GlobalXfo').getValue()\r\n            const radius = geomItem.getParameter('Radius').getValue() * globalXfo.sc.x\r\n            const zaxis = globalXfo.ori.getZaxis()\r\n            const zaxisDist = hitPos.subtract(globalXfo.tr).dot(zaxis)\r\n            const pointOnAxis = globalXfo.tr.add(zaxis.scale(zaxisDist))\r\n\r\n            const axisToPnt = hitPos.subtract(pointOnAxis)\r\n            const length = axisToPnt.length()\r\n            let hitPos2 = pointOnAxis.add(axisToPnt.scale(radius / length))\r\n            if (closestTo) {\r\n              const vec2 = closestTo.tr.subtract(globalXfo.tr)\r\n              vec2.subtractInPlace(zaxis.scale(vec2.dot(zaxis)))\r\n              hitPos2 = globalXfo.tr.add(vec2.normalize().scale(radius))\r\n              hitPos2.addInPlace(zaxis.scale(zaxisDist))\r\n            }\r\n            const vec = hitPos2.subtract(globalXfo.tr)\r\n            xfo.ori.setFromDirectionAndUpvector(zaxis, vec)\r\n            const rot = new Quat()\r\n            rot.setFromAxisAndAngle(new Vec3(1, 0, 0), Math.PI * 0.5)\r\n            xfo.ori.multiplyInPlace(rot)\r\n            xfo.tr = hitPos2\r\n            break\r\n          }\r\n          default: {\r\n            console.log('Unhandled Surface Type: ', surfaceType)\r\n          }\r\n        }\r\n      }\r\n      return xfo\r\n    }\r\n\r\n    if (this.stage == 0) {\r\n      const { geomItem } = event.intersectionData\r\n      if (this.checkSurface(geomItem)) {\r\n        const color = this.colorParam.getValue()\r\n        this.measurement = new MeasureAngle('MeasureAngle', color)\r\n        this.appData.scene.getRoot().addChild(this.measurement)\r\n\r\n        const ray = event.pointerRay\r\n        const hitPos = ray.start.add(ray.dir.scale(event.intersectionData.dist))\r\n        const xfoA = getSurfaceXfo(geomItem, hitPos)\r\n        this.measurement.setXfoA(xfoA)\r\n\r\n        this.geomItemA = geomItem\r\n        this.hitPosA = hitPos\r\n\r\n        this.stage++\r\n        event.stopPropagation()\r\n      }\r\n    } else if (this.stage == 1) {\r\n      const { geomItem } = event.intersectionData\r\n      if (this.checkSurface(geomItem)) {\r\n        const ray = event.pointerRay\r\n        const hitPos = ray.start.add(ray.dir.scale(event.intersectionData.dist))\r\n        const xfoB = getSurfaceXfo(geomItem, hitPos)\r\n        // this.measurement.setXfoB(xfoB)\r\n        const xfoA = getSurfaceXfo(this.geomItemA, this.hitPosA, xfoB)\r\n        this.measurement.setXfoA(xfoA)\r\n\r\n        // const xfoB2 = getSurfaceXfo(geomItem, hitPos, xfoA)\r\n        this.measurement.setXfoB(xfoB)\r\n\r\n        const measurementChange = new MeasurementChange(this.measurement)\r\n        UndoRedoManager.getInstance().addChange(measurementChange)\r\n\r\n        if (this.highlightedItemA) this.highlightedItemA.removeHighlight('measure', true)\r\n        if (this.highlightedItemB) this.highlightedItemB.removeHighlight('measure', true)\r\n\r\n        this.stage = 0\r\n        event.stopPropagation()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {MouseEvent|TouchEvent} event - The event value\r\n   */\r\n  onPointerMove(event) {\r\n    // skip if the alt key is held. Allows the camera tool to work\r\n    if (event.altKey || (event.pointerType === 'mouse' && event.button !== 0)) return\r\n\r\n    if (this.stage == 0) {\r\n      if (event.intersectionData) {\r\n        const { geomItem } = event.intersectionData\r\n        if (this.checkSurface(geomItem)) {\r\n          if (geomItem != this.highlightedItemA) {\r\n            if (this.highlightedItemA) {\r\n              this.highlightedItemA.removeHighlight('measure', true)\r\n            }\r\n            this.highlightedItemA = geomItem\r\n            const color = this.colorParam.getValue().clone()\r\n            color.a = 0.2\r\n            this.highlightedItemA.addHighlight('measure', color, true)\r\n          }\r\n        }\r\n      } else {\r\n        if (this.highlightedItemA) {\r\n          this.highlightedItemA.removeHighlight('measure', true)\r\n          this.highlightedItemA = null\r\n        }\r\n      }\r\n    } else if (this.stage == 1) {\r\n      if (event.intersectionData) {\r\n        const { geomItem } = event.intersectionData\r\n        if (geomItem != this.highlightedItemA && geomItem != this.highlightedItemB && this.checkSurface(geomItem)) {\r\n          if (this.highlightedItemB) {\r\n            this.highlightedItemB.removeHighlight('measure', true)\r\n          }\r\n          this.highlightedItemB = geomItem\r\n\r\n          const color = this.colorParam.getValue().clone()\r\n          color.a = 0.2\r\n          this.highlightedItemB.addHighlight('measure', color, true)\r\n        }\r\n      } else {\r\n        if (this.highlightedItemB) {\r\n          this.highlightedItemB.removeHighlight('measure', true)\r\n          this.highlightedItemB = null\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {MouseEvent|TouchEvent} event - The event value\r\n   */\r\n  onPointerUp(event) {\r\n    if (this.dragging) {\r\n      this.dragging = false\r\n      this.measurementChange = null\r\n      if (this.highlightedItemA) this.highlightedItemA.removeHighlight('measure', true)\r\n      event.stopPropagation()\r\n    }\r\n  }\r\n}\r\n\r\nexport { MeasureAngleTool }\r\n","import CreateCircleChange from './Change/CreateCircleChange'\r\nimport CreateGeomTool from './CreateGeomTool'\r\nimport { UndoRedoManager } from '../../UndoRedo/index'\r\n\r\n/**\r\n * Tool for creating a circle geometry.\r\n *\r\n * **Events**\r\n * * **actionFinished:** Triggered when the creation of the geometry is completed.\r\n *\r\n * @extends CreateGeomTool\r\n */\r\nclass CreateCircleTool extends CreateGeomTool {\r\n  /**\r\n   * Create a create circle tool.\r\n   * @param {object} appData - The appData value.\r\n   */\r\n  constructor(appData) {\r\n    super(appData)\r\n  }\r\n\r\n  /**\r\n   * Starts the creation of the geometry.\r\n   *\r\n   * @param {Xfo} xfo - The xfo param.\r\n   */\r\n  createStart(xfo) {\r\n    this.change = new CreateCircleChange(this.parentItem, xfo)\r\n    UndoRedoManager.getInstance().addChange(this.change)\r\n\r\n    this.xfo = xfo\r\n    this.stage = 1\r\n    this.radius = 0.0\r\n  }\r\n\r\n  /**\r\n   * Updates Circle geometry radius.\r\n   *\r\n   * @param {Vec3} pt - The pt param.\r\n   */\r\n  createMove(pt) {\r\n    this.radius = pt.distanceTo(this.xfo.tr)\r\n    this.change.update({ radius: this.radius })\r\n    this.appData.renderer.forceRender()\r\n  }\r\n\r\n  /**\r\n   * Finishes geometry creation.\r\n   *\r\n   * @param {Vec3} pt - The pt param.\r\n   */\r\n  createRelease(pt) {\r\n    if (this.radius == 0) {\r\n      UndoRedoManager.getInstance().cancel()\r\n    }\r\n\r\n    this.change = null\r\n    this.stage = 0\r\n    this.emit('actionFinished')\r\n  }\r\n}\r\n\r\nexport default CreateCircleTool\r\nexport { CreateCircleTool }\r\n","import { Quat, Vec3 } from '@zeainc/zea-engine'\r\nimport CreateConeChange from './Change/CreateConeChange'\r\nimport { CreateGeomTool } from './CreateGeomTool'\r\nimport { UndoRedoManager } from '../../UndoRedo/index'\r\n\r\n/**\r\n * Tool for creating a Cone geometry.\r\n *\r\n * **Events**\r\n * * **actionFinished:** Triggered when the creation of the geometry is completed.\r\n *\r\n * @extends CreateGeomTool\r\n */\r\nclass CreateConeTool extends CreateGeomTool {\r\n  /**\r\n   * Create a create cone tool.\r\n   * @param {object} appData - The appData value.\r\n   */\r\n  constructor(appData) {\r\n    super(appData)\r\n  }\r\n\r\n  /**\r\n   * Starts the creation of the geometry.\r\n   *\r\n   * @param {Xfo} xfo - The xfo param.\r\n   */\r\n  createStart(xfo) {\r\n    this.xfo = xfo\r\n    this.invXfo = xfo.inverse()\r\n    this.change = new CreateConeChange(this.parentItem, xfo, this.colorParam.getValue())\r\n    UndoRedoManager.getInstance().addChange(this.change)\r\n\r\n    this.stage = 1\r\n    this._radius = 0.0\r\n    this._height = 0.0\r\n  }\r\n\r\n  /**\r\n   * Updates Cone geometry structural properties.\r\n   *\r\n   * @param {Vec3} pt - The pt param.\r\n   */\r\n  createMove(pt) {\r\n    if (this.stage == 1) {\r\n      const vec = pt.subtract(this.xfo.tr)\r\n      // TODO: Rotate the cone so the base is aligned with the vector towards the controller\r\n      this._radius = vec.length()\r\n      this.change.update({ radius: this._radius })\r\n    } else {\r\n      this._height = this.invXfo.transformVec3(pt).y\r\n      this.change.update({ height: this._height })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finishes the creation of the Cone.\r\n   *\r\n   * @param {Vec3} pt - The pt param.\r\n   */\r\n  createRelease(pt) {\r\n    if (this._radius == 0) {\r\n      UndoRedoManager.getInstance().cancel()\r\n      this.stage = 0\r\n      this.emit('actionFinished')\r\n    }\r\n    if (this.stage == 1) {\r\n      this.stage = 2\r\n\r\n      const quat = new Quat()\r\n      quat.setFromAxisAndAngle(new Vec3(1, 0, 0), Math.PI * 0.5)\r\n      this.constructionPlane.ori = this.constructionPlane.ori.multiply(quat)\r\n      this.constructionPlane.tr = pt\r\n      this.invXfo = this.constructionPlane.inverse()\r\n    } else if (this.stage == 2) {\r\n      this.stage = 0\r\n      this.emit('actionFinished')\r\n    }\r\n  }\r\n}\r\n\r\nexport default CreateConeTool\r\nexport { CreateConeTool }\r\n","import { Quat, Vec3 } from '@zeainc/zea-engine'\r\nimport CreateGeomTool from './CreateGeomTool'\r\nimport CreateCuboidChange from './Change/CreateCuboidChange'\r\nimport { UndoRedoManager } from '../../UndoRedo/index'\r\n\r\n/**\r\n * Tool for creating Cuboid geometry.\r\n *\r\n * **Events**\r\n * * **actionFinished:** Triggered when the creation of the geometry is completed.\r\n *\r\n * @extends CreateGeomTool\r\n */\r\nclass CreateCuboidTool extends CreateGeomTool {\r\n  /**\r\n   * Create a create cuboid tool.\r\n   *\r\n   * @param {object} appData - The appData value.\r\n   */\r\n  constructor(appData) {\r\n    super(appData)\r\n  }\r\n\r\n  /**\r\n   * Starts the creation of the cuboid.\r\n   *\r\n   * @param {Xfo} xfo - The xfo param.\r\n   */\r\n  createStart(xfo) {\r\n    this.change = new CreateCuboidChange(this.parentItem, xfo, this.colorParam.getValue())\r\n    UndoRedoManager.getInstance().addChange(this.change)\r\n\r\n    this.xfo = xfo\r\n    this.invXfo = xfo.inverse()\r\n    this.stage = 1\r\n    this._height = 0.0\r\n  }\r\n\r\n  /**\r\n   * Updates cuboid structural properties.\r\n   *\r\n   * @param {Vec3} pt - The pt param.\r\n   */\r\n  createMove(pt) {\r\n    if (this.stage == 1) {\r\n      const delta = this.invXfo.transformVec3(pt)\r\n\r\n      // const delta = pt.subtract(this.xfo.tr)\r\n      this.change.update({\r\n        baseSize: [Math.abs(delta.x), Math.abs(delta.y)],\r\n        tr: this.xfo.tr.add(delta.scale(0.5)),\r\n      })\r\n    } else {\r\n      const vec = this.invXfo.transformVec3(pt)\r\n      this.change.update({ height: vec.y })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finishes the creation of the cuboid.\r\n   *\r\n   * @param {Vec3} pt - The pt param.\r\n   */\r\n  createRelease(pt) {\r\n    if (this.stage == 1) {\r\n      this.stage = 2\r\n      this.pt1 = pt\r\n\r\n      const quat = new Quat()\r\n      quat.setFromAxisAndAngle(new Vec3(1, 0, 0), Math.PI * 0.5)\r\n      this.constructionPlane.ori = this.constructionPlane.ori.multiply(quat)\r\n      this.constructionPlane.tr = pt\r\n      this.invXfo = this.constructionPlane.inverse()\r\n    } else if (this.stage == 2) {\r\n      this.stage = 0\r\n      this.emit('actionFinished')\r\n    }\r\n  }\r\n}\r\n\r\nexport { CreateCuboidTool }\r\n","import { BooleanParameter } from '@zeainc/zea-engine'\r\nimport CreateLineTool from './CreateLineTool'\r\nimport CreateFreehandLineChange from './Change/CreateFreehandLineChange'\r\nimport { UndoRedoManager } from '../../UndoRedo/index'\r\n\r\n/**\r\n * Tool for creating a free hand line.\r\n *\r\n * **Events**\r\n * * **actionFinished:** Triggered when the creation of the geometry is completed.\r\n *\r\n * @extends CreateLineTool\r\n */\r\nclass CreateFreehandLineTool extends CreateLineTool {\r\n  /**\r\n   * Create a create freehand line tool.\r\n   *\r\n   * @param {object} appData - The appData value.\r\n   */\r\n  constructor(appData) {\r\n    super(appData)\r\n\r\n    this.mp = this.addParameter(new BooleanParameter('Modulate Thickness By Stroke Speed', false))\r\n  }\r\n\r\n  /**\r\n   * Starts the creation of a free hand line.\r\n   *\r\n   * @param {Xfo} xfo - The xfo param.\r\n   */\r\n  createStart(xfo) {\r\n    const color = this.colorParam.getValue()\r\n    const lineThickness = this.lineThickness.getValue()\r\n\r\n    this.change = new CreateFreehandLineChange(this.parentItem, xfo, color, lineThickness)\r\n    UndoRedoManager.getInstance().addChange(this.change)\r\n\r\n    this.xfo = xfo\r\n    this.invXfo = xfo.inverse()\r\n    this.stage = 1\r\n    this.prevP = xfo.tr\r\n    this.length = 0\r\n  }\r\n\r\n  /**\r\n   * Updates the free hand line data.\r\n   *\r\n   * @param {Vec3} pt - The pt param.\r\n   */\r\n  createMove(pt) {\r\n    const p = this.invXfo.transformVec3(pt)\r\n    const delta = p.subtract(this.prevP).length()\r\n    this.change.update({\r\n      point: p,\r\n    })\r\n\r\n    this.length += delta\r\n    this.prevP = p\r\n  }\r\n\r\n  /**\r\n   * Finishes free hand line creation\r\n   *\r\n   * @param {Vec3} pt - The pt param.\r\n   */\r\n  createRelease(pt) {\r\n    if (this.length == 0) {\r\n      UndoRedoManager.getInstance().cancel()\r\n    }\r\n\r\n    this.stage = 0\r\n    this.emit('actionFinished')\r\n  }\r\n}\r\n\r\nexport default CreateFreehandLineTool\r\nexport { CreateFreehandLineTool }\r\n","import CreateGeomTool from './CreateGeomTool'\r\nimport CreateRectChange from './Change/CreateRectChange'\r\nimport { UndoRedoManager } from '../../UndoRedo/index'\r\n\r\n/**\r\n * Tool for creating a rectangle geometry.\r\n *\r\n * **Events**\r\n * * **actionFinished:** Triggered when the creation of the geometry is completed.\r\n *\r\n * @extends CreateGeomTool\r\n */\r\nclass CreateRectTool extends CreateGeomTool {\r\n  /**\r\n   * Create a create rect tool.\r\n   * @param {object} appData - The appData value.\r\n   */\r\n  constructor(appData) {\r\n    super(appData)\r\n  }\r\n\r\n  /**\r\n   * Starts the creation of a rectangle geometry.\r\n   *\r\n   * @param {Xfo} xfo - The xfo param.\r\n   */\r\n  createStart(xfo) {\r\n    this.change = new CreateRectChange(this.parentItem, xfo)\r\n    UndoRedoManager.getInstance().addChange(this.change)\r\n\r\n    this.xfo = xfo\r\n    this.invXfo = xfo.inverse()\r\n    this.stage = 1\r\n    this._size = 0.0\r\n  }\r\n\r\n  /**\r\n   * Updated the rectangle geometry structural properties.\r\n   *\r\n   * @param {Vec3} pt - The pt param.\r\n   */\r\n  createMove(pt) {\r\n    if (this.stage == 1) {\r\n      const delta = this.invXfo.transformVec3(pt)\r\n\r\n      ;(this._size = Math.abs(delta.x)), Math.abs(delta.y)\r\n\r\n      // const delta = pt.subtract(this.xfo.tr)\r\n      this.change.update({\r\n        baseSize: [Math.abs(delta.x), Math.abs(delta.y)],\r\n        tr: this.xfo.tr.add(delta.scale(0.5)),\r\n      })\r\n    } else {\r\n      const vec = this.invXfo.transformVec3(pt)\r\n      this.change.update({ height: vec.y })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finishes the creation of a rectangle geometry.\r\n   *\r\n   * @param {Vec3} pt - The pt param.\r\n   */\r\n  createRelease(pt) {\r\n    if (this._size == 0) {\r\n      UndoRedoManager.getInstance().cancel()\r\n    }\r\n    this.stage = 0\r\n    this.emit('actionFinished')\r\n  }\r\n}\r\n\r\nexport default CreateRectTool\r\nexport { CreateRectTool }\r\n","import CreateGeomTool from './CreateGeomTool'\r\nimport CreateSphereChange from './Change/CreateSphereChange'\r\nimport { UndoRedoManager } from '../../UndoRedo/index'\r\n\r\n/**\r\n * Tool for creating Sphere geometries.\r\n *\r\n * **Events**\r\n * * **actionFinished:** Triggered when the creation of the geometry is completed.\r\n *\r\n * @extends CreateGeomTool\r\n */\r\nclass CreateSphereTool extends CreateGeomTool {\r\n  /**\r\n   * Create a create sphere tool.\r\n   *\r\n   * @param {object} appData - The appData value.\r\n   */\r\n  constructor(appData) {\r\n    super(appData)\r\n  }\r\n\r\n  /**\r\n   * Starts the creation of the sphere geometry.\r\n   *\r\n   * @param {Xfo} xfo - The xfo param.\r\n   */\r\n  createStart(xfo) {\r\n    this.change = new CreateSphereChange(this.parentItem, xfo, this.colorParam.getValue())\r\n    UndoRedoManager.getInstance().addChange(this.change)\r\n\r\n    this.xfo = xfo\r\n    this.stage = 1\r\n    this.radius = 0.0\r\n  }\r\n\r\n  /**\r\n   * Updates the sphere geometry structural properties.\r\n   *\r\n   * @param {vec3} pt - The pt param.\r\n   */\r\n  createMove(pt) {\r\n    this.radius = pt.distanceTo(this.xfo.tr)\r\n    this.change.update({ radius: this.radius })\r\n  }\r\n\r\n  /**\r\n   * Finishes the creation of the sphere geometry.\r\n   *\r\n   * @param {Vec3} pt - The pt param.\r\n   */\r\n  createRelease(pt) {\r\n    if (this.radius == 0) {\r\n      UndoRedoManager.getInstance().cancel()\r\n    }\r\n    this.stage = 0\r\n    this.emit('actionFinished')\r\n  }\r\n}\r\n\r\nexport default CreateSphereTool\r\nexport { CreateSphereTool }\r\n","import { Ray } from '@zeainc/zea-engine'\r\nimport Handle from './Handle.js'\r\nimport ParameterValueChange from '../UndoRedo/Changes/ParameterValueChange.js'\r\nimport UndoRedoManager from '../UndoRedo/UndoRedoManager.js'\r\n\r\n/**\r\n * Class representing a planar movement scene widget.\r\n *\r\n * @extends Handle\r\n */\r\nclass ScreenSpaceMovementHandle extends Handle {\r\n  /**\r\n   * Create a planar movement scene widget.\r\n   *\r\n   * @param {string} name - The name value\r\n   */\r\n  constructor(name) {\r\n    super(name)\r\n  }\r\n\r\n  /**\r\n   * Sets global xfo target parameter.\r\n   *\r\n   * @param {Parameter} param - The video param.\r\n   * @param {boolean} track - The track param.\r\n   */\r\n  setTargetParam(param, track = true) {\r\n    this.param = param\r\n    if (track) {\r\n      const __updateGizmo = () => {\r\n        this.getParameter('GlobalXfo').setValue(param.getValue())\r\n      }\r\n      __updateGizmo()\r\n      param.on('valueChanged', __updateGizmo)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns target's global xfo parameter.\r\n   *\r\n   * @return {Parameter} - returns handle's target global Xfo.\r\n   */\r\n  getTargetParam() {\r\n    return this.param ? this.param : this.getParameter('GlobalXfo')\r\n  }\r\n\r\n  // ///////////////////////////////////\r\n  // Mouse events\r\n\r\n  /**\r\n   * Handles mouse down interaction with the handle.\r\n   *\r\n   * @param {MouseEvent} event - The event param.\r\n   * @return {boolean} - The return value.\r\n   */\r\n  handlePointerDown(event) {\r\n    this.gizmoRay = new Ray()\r\n    const ray = event.pointerRay\r\n    const cameraXfo = event.viewport.getCamera().getParameter('GlobalXfo').getValue()\r\n    this.gizmoRay.dir = cameraXfo.ori.getZaxis()\r\n    const param = this.getTargetParam()\r\n    const baseXfo = param.getValue()\r\n    this.gizmoRay.start = baseXfo.tr\r\n    const dist = ray.intersectRayPlane(this.gizmoRay)\r\n    event.grabPos = ray.pointAtDist(dist)\r\n    this.onDragStart(event)\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Handles mouse move interaction with the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent} event - The event param\r\n   * @return {boolean} - The return value\r\n   */\r\n  handlePointerMove(event) {\r\n    const ray = event.pointerRay\r\n    const dist = ray.intersectRayPlane(this.gizmoRay)\r\n    event.holdPos = ray.pointAtDist(dist)\r\n    this.onDrag(event)\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Handles mouse up interaction with the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent} event - The event param.\r\n   * @return {boolean} - The return value.\r\n   */\r\n  handlePointerUp(event) {\r\n    const ray = event.pointerRay\r\n    if (ray) {\r\n      const dist = ray.intersectRayPlane(this.gizmoRay)\r\n      event.releasePos = ray.pointAtDist(dist)\r\n    }\r\n\r\n    this.onDragEnd(event)\r\n    return true\r\n  }\r\n\r\n  // ///////////////////////////////////\r\n  // Interaction events\r\n\r\n  /**\r\n   * Handles the initially drag of the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onDragStart(event) {\r\n    this.grabPos = event.grabPos\r\n    const param = this.getTargetParam()\r\n    this.baseXfo = param.getValue()\r\n\r\n    this.change = new ParameterValueChange(param)\r\n    UndoRedoManager.getInstance().addChange(this.change)\r\n  }\r\n\r\n  /**\r\n   * Handles drag action of the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onDrag(event) {\r\n    const dragVec = event.holdPos.subtract(this.grabPos)\r\n\r\n    const newXfo = this.baseXfo.clone()\r\n    newXfo.tr.addInPlace(dragVec)\r\n\r\n    this.change.update({\r\n      value: newXfo,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handles the end of dragging the handle.\r\n   *\r\n   * @param {MouseEvent|TouchEvent|object} event - The event param.\r\n   */\r\n  onDragEnd(event) {\r\n    this.change = null\r\n  }\r\n}\r\n\r\nexport default ScreenSpaceMovementHandle\r\nexport { ScreenSpaceMovementHandle }\r\n"],"names":["Handle","TreeItem","[object Object]","name","super","this","captured","colorParam","addParameter","ColorParameter","Color","highlightColorParam","emit","xfo","getParameter","getValue","Ray","tr","ori","getZaxis","event","highlight","unhighlight","setCapture","stopPropagation","changedTouches","viewport","handlePointerDown","vrviewport","onVRControllerButtonDown","handlePointerMove","onVRPoseChanged","preventDefault","releaseCapture","handlePointerUp","onVRControllerButtonUp","gizmoRay","getManipulationPlane","ray","pointerRay","dist","intersectRayPlane","grabPos","pointAtDist","onDragStart","holdPos","onDrag","releasePos","onDragEnd","activeController","controller","getTipXfo","clone","offset","subtract","start","dir","scale","dot","undefined","console","warn","BaseLinearMovementHandle","grabDist","intersectRayVector","holdDist","value","delta","add","UndoRedoManager","EventEmitter","__undoStack","__redoStack","__currChange","__currChangeUpdated","bind","change","destroy","off","push","on","updateData","pushOnRedoStack","length","pop","undo","redo","className","Registry","constructClass","inst","getBlueprintName","e","cls","register","Change","getChangeClassName","Error","context","j","update","ParameterValueChange","param","newValue","getName","__prevValue","__param","__nextValue","setValue","suppressPrimaryChange","secondaryChanges","forEach","paramPath","getPath","toJSON","appData","scene","getRoot","resolvePath","Parameter","updateFromJSON","fromJSON","registerChange","HandleShader","GLShader","gl","__shaderStages","shaderLibrary","parseShader","finalize","paramDescs","getParamDeclarations","defaultValue","material","matData","Float32Array","baseColor","r","g","b","a","transformVertices","geometry","positions","getVertexAttribute","i","v","getValueRef","v2","transformVec3","set","x","y","z","LinearMovementHandle","thickness","color","handleMat","Material","handleGeom","Cylinder","tipGeom","Cone","handle","GeomItem","tip","tipXfo","Xfo","addChild","track","__updateGizmo","getTargetParam","baseXfo","getInstance","addChange","dragVec","newXfo","addInPlace","BaseAxialRotationHandle","sc","deltaXfo","paramXfo","offsetXfo","inverse","multiply","vec0","grabCircleRadius","normalizeInPlace","vec1","angle","angleTo","cross","range","MathFunctions","clamp","shiftKey","increment","Math","degToRad","floor","setFromAxisAndAngle","Vec3","AxialRotationHandle","radius","radiusParam","NumberParameter","Torus","PI","handleXfo","PlanarMovementHandle","fullXfoManipulationInVR","grabOffset","XfoPlanarMovementHandle","size","sizeParam","Cuboid","handleGeomXfo","XfoHandle","traverse","item","translationHandles","red","green","blue","linearXWidget","linearYWidget","linearZWidget","planarSize","planarXYWidget","planarYZWidget","planarXZWidget","rotationHandles","rotationXWidget","setFromEulerAngles","EulerAngles","rotationYWidget","rotationZWidget","parentItem","getParentItem","parentXfo","__localXfoParam","handleManipulationMode","setVisible","setTargetParam","SelectionGroupXfoOperator","Operator","initialXfoModeParam","globalXfoParam","addInput","OperatorInput","setParam","addOutput","OperatorOutput","currGroupXfo","getNumInputs","setDirty","xfoParam","input","getInputByIndex","getParam","removeInput","invXfo","currXfo","result","groupTransformOutput","getOutput","setClean","initialXfoMode","getInput","Group","INITIAL_XFO_MODES","manual","first","itemXfo","average","numTreeItems","scaleInPlace","globalOri","GROUP_XFO_MODES","disabled","SelectionGroup","SelectionSet","options","selectionColor","subtreeColor","selectionOutlineColor","branchSelectionOutlineColor","lerp","__itemsParam","setFilterFn","BaseItem","__initialXfoModeParam","MultiChoiceParameter","selectionGroupXfoOp","cloned","copyFrom","index","highlightColor","addHighlight","getId","subTreeColor","getChildren","childItem","addItem","removeHighlight","removeItem","SelectionChange","selectionManager","prevSelection","newSelection","__selectionManager","__prevSelection","__newSelection","setSelection","itemPaths","treeItem","Set","getSelection","sceneRoot","itemPath","SelectionVisibilityChange","selection","state","_changeItemsVisibility","SelectionManager","leadSelection","selectionGroup","enableXfoHandles","xfoHandle","xfoHandleVisible","renderer","setRenderer","__renderer","addTreeItem","mode","enabled","getItems","visible","Array","from","requestRedraw","createUndo","has","setSelected","delete","setItems","__setLeadSelection","values","next","updateHandleVisibility","replaceSelection","clear","count","subTreeItem","sel","newChange","treeItems","getVisible","label","fn","filterFn","log","__pickCB","__pickFilter","__pickCount","__picked","isArray","concat","filter","TreeItemAddChange","owner","treeItemIndex","addRef","detach","removeChild","reattach","treeItemPath","type","removeRef","TreeItemMoveChange","newOwner","oldOwner","getOwner","oldOwnerIndex","getChildIndex","insertChild","newOwnerPath","TreeItemsRemoveChange","items","itemOwners","itemIndices","itemNames","itemIndex","SelectionTool","BaseTool","error","dragging","selectionRect","Rect","selectionRectMat","selectionRectXfo","rectItem","activateTool","prevCursor","getGLCanvas","style","cursor","deactivateTool","__selectionFilterFn","Vec2","getWidth","getHeight","abs","pointerDownPos","pointerType","button","altKey","pointerPos","__resizeRect","pointerUpPos","tl","min","br","max","geomItems","getGeomItemsInRect","newSet","includes","pickingModeActive","pick","regularGeomItems","deselectItems","selectItems","ctrlKey","intersectionData","getGeomDataAtPos","geomItem","clearSelection","toggleItemSelection","getGeomItemAtTip","util","escape","string","replace","parseExtension","mimeType","url","extension","toLowerCase","WOFF","JPEG","woff","woff2","ttf","eot","png","jpg","jpeg","gif","tiff","svg","mimes","dataAsUrl","content","isDataUrl","search","canvasToBlob","canvas","toBlob","Promise","resolve","binaryString","window","atob","toDataURL","split","binaryArray","Uint8Array","charCodeAt","Blob","resolveUrl","baseUrl","doc","document","implementation","createHTMLDocument","base","createElement","head","appendChild","body","href","getAndEncode","TIMEOUT","domtoimage","impl","cacheBust","test","Date","getTime","request","XMLHttpRequest","placeholder","onreadystatechange","done","ontimeout","timeout","responseType","open","send","imagePlaceholder","readyState","status","fail","encoder","FileReader","onloadend","readAsDataURL","response","message","uid","fourRandomChars","random","pow","toString","slice","delay","ms","arg","setTimeout","asArray","arrayLike","array","escapeXhtml","makeImage","uri","reject","image","Image","onload","onerror","src","width","node","leftBorder","px","rightBorder","scrollWidth","height","topBorder","bottomBorder","scrollHeight","match","exec","styleProperty","getComputedStyle","getPropertyValue","parseFloat","newUtil","inliner","URL_REGEX","inlineAll","get","nothingToInline","then","readUrls","urls","inline","shouldProcess","data","dataUrl","RegExp","urlAsRegex","newInliner","fontFaces","resolveAll","readAll","webFonts","all","map","webFont","cssStrings","join","styleSheets","cssRules","sheet","rule","CSSRule","FONT_FACE_RULE","rules","newWebFont","webFontRule","parentStyleSheet","cssText","newFontFaces","images","Element","inlineBackground","HTMLImageElement","newImage","childNodes","child","background","inlined","setProperty","getPropertyPriority","element","newImages","defaultOptions","toSvg","toPng","draw","toJpeg","quality","toPixelData","getContext","getImageData","toCanvas","copyOptions","cloneNode","embedFonts","inlineImages","bgcolor","backgroundColor","Object","keys","property","setAttribute","XMLSerializer","serializeToString","xhtml","foreignObject","makeSvgDataUri","domNode","ctx","fillStyle","fillRect","newCanvas","drawImage","root","HTMLCanvasElement","original","children","cloneChildrenInOrder","parent","childClone","cloneChildren","cloneStyle","clonePseudoElements","copyUserInput","fixSvg","copyStyle","source","target","copyProperties","clonePseudoElement","styleElement","formatPseudoElementStyle","selector","formatCssText","formatCssProperties","createTextNode","formatProperty","HTMLTextAreaElement","innerHTML","HTMLInputElement","SVGElement","SVGRectElement","attribute","getAttribute","processClone","styleNode","depth","func","firstChild","nextSibling","idx","renderElementUI","elem","key","callback","uri2","substring","plane","Plane","VRControllerUI","vrUIDOMElement","setSelectable","__vrUIDOMElement","display","uiOffset","ready","resizeObserver","ResizeObserver","entries","disconnect","localXfo","dpm","clientWidth","clientHeight","computedStyle","computedStyleMap","elemSize","offsetLeft","offsetTop","uimat","DataImage","imageDatas","id","setData","MutationObserver","mutations","observe","attributes","characterData","childList","subtree","eventName","args","MouseEvent","assign","view","bubbles","cancelable","dispatchEvent","VRUITool","controllerUI","pointermat","line","Lines","setNumVertices","setNumSegments","setSegmentVertexIndices","setBoundingBoxDirty","__pointerLocalXfo","__uiPointerItem","__triggerHeld","uiOpen","getXRViewport","xrvp","closeUI","uiController","pointerController","headXfo","activate","uiLocalXfo","xfoA","getTreeItem","xfoB","headToCtrlA","headToCtrlB","getYaxis","getTipItem","session","postMessage","pub","interfaceType","showUIPanel","controllerId","deactivate","removeChildByHandle","closehideUIPanel","pointerXfo","pointerVec","negate","planeXfo","planeSize","res","setPointerLength","hitOffset","getXaxis","rect","getBoundingClientRect","clientX","round","clientY","hit","calcUIIntersection","offsetX","pageX","screenX","offsetY","pageY","screenY","elementFromPoint","shadowRoot","_element","sendMouseEvent","POINTER_TYPES","xr","sendEventToUI","__triggerDownElem","viewXfo","getCapture","checkControllers","controllers","buttonPressed","ctrlA","ctrlB","displayUI","HoldObjectsChange","__selection","__prevXfos","__newXfos","newItem","newItemId","changeXfos","changeXfoIds","gidx","VRHoldObjectsTool","__pressedButtonCount","__freeIndices","__vrControllers","__heldObjectCount","__heldGeomItems","__highlightedGeomItemIds","__heldGeomItemIds","__heldGeomItemRefs","__heldGeomItemOffsets","addIconToController","__activated","getControllers","addIconToControllerId","removeListenerById","refs","grabXfo","xfo0","xfo1","alignWith","axis","align","Quat","heldGeom","computeGrabXfo","indexOf","changeData","initAction","splice","BaseCreateTool","CreateGeomTool","stage","removeToolOnRightClick","controllerAddedHandler","vrControllerToolTip","Cross","vrControllerToolTipMat","addIconToVRController","constructionPlane","planeRay","camera","getCamera","getFocalDistance","pt","screenPosToXfo","createStart","cancel","createMove","createRelease","__activeController","CreateGeomChange","generateUniqueName","setName","parentItemPath","geomItemName","geomItemXfo","childIndex","CreateLineChange","lineThickness","setParentAndXfo","p1","setFromOther","CreateLineTool","stageScale","__stageScale","CreateConeChange","cone","CreateCircleChange","circle","Circle","CreateRectChange","baseSize","CreateFreehandLineChange","used","vertexCount","realloc","getNumSegments","point","topologyChanged","getMaterial","CreateSphereChange","sphere","Sphere","CreateCuboidChange","cuboid","setBaseSize","ToolManager","tools","toolStack","toolName","tool","onPointerDown","propagating","onPointerMove","onPointerUp","onPointerDoublePress","onWheel","onKeyPressed","onKeyDown","onKeyUp","SliderHandle","lengthParam","handleRadiusParam","barRadiusParam","topBarMat","barGeom","baseBar","topBar","baseBarXfo","topBarXfo","__updateSlider","getRange","remap","json","targetParam","ArcSlider","arcRadius","arcAngle","handleRadius","arcRadiusParam","arcAngleParam","arcGeom","arc","handleGeomOffsetXfo","XfoParameter","MeasureDistance","unitsParameter","StringParameter","markerMaterial","lineMaterial","startMarker","endMarker","lineGeomItem","Label","billboard","BillboardItem","startXfo","vector","distance","lineXfo","setFromDirectionAndUpvector","distanceInMM","toFixed","midPoint","labelXfo","position","updateMeasurement","endXfo","isVisible","MeasureAngle","markerMaterialB","markerA","markerB","normA","normB","normalize","tangentA","tangentB","rayA","rayB","params","lineAXfo","getChild","lineBXfo","createLinesAndLabel","MeasurementChange","measurement","measurementData","setGeomBuffersVisibility","measurementType","constructBlueprintName","MeasureDistanceTool","measurementChange","highlightedItemA","highlightedItemB","pos","hasParameter","curveType","crvToPnt","xaxis","zaxis","subtractInPlace","surfaceType","srfToPnt","pointOnAxis","axisToPnt","hitPos","startPos","snapToParametricEdge","setStartMarkerPos","setEndMarkerPos","endPos","MeasureCenterDistancesTool","snapToParametricCenter","surfaceTypeParm","checkGeom","MeasureRadiusTool","axisPos","edgePos","MeasureAngleTool","highlightedItemAHitPos","getSurfaceXfo","closestTo","geomMat","translation","zAxis","hitPos2","vectorAB","globalXfo","semiAngle","startRadius","zaxisDist","radiusAtPoint","tan","vec2","vec","rot","multiplyInPlace","checkSurface","setXfoA","geomItemA","hitPosA","setXfoB","distanceTo","forceRender","_radius","_height","quat","pt1","mp","BooleanParameter","prevP","p","_size","cameraXfo"],"mappings":"8SAWA,MAAMA,UAAeC,WAMnBC,YAAYC,GACVC,MAAMD,GAENE,KAAKC,UAAW,EAChBD,KAAKE,WAAaF,KAAKG,aAAa,IAAIC,iBAAe,QAAS,IAAIC,UACpEL,KAAKM,oBAAsBN,KAAKG,aAAa,IAAIC,iBAAe,iBAAkB,IAAIC,QAAM,EAAG,EAAG,KAMpGR,YACEG,KAAKO,KAAK,aAMZV,cACEG,KAAKO,KAAK,eAQZV,uBACE,MAAMW,EAAMR,KAAKS,aAAa,aAAaC,WAC3C,OAAO,IAAIC,MAAIH,EAAII,GAAIJ,EAAIK,IAAIC,YAWjCjB,eAAekB,GACbf,KAAKgB,YAQPnB,eAAekB,GACbf,KAAKiB,cAQPpB,cAAckB,GACZA,EAAMG,WAAWlB,MACjBe,EAAMI,kBACNnB,KAAKC,UAAW,EAEZc,EAAMK,gBACRpB,KAAKgB,YAGHD,EAAMM,SAAUrB,KAAKsB,kBAAkBP,GAClCA,EAAMQ,YAAYvB,KAAKwB,yBAAyBT,GAQ3DlB,cAAckB,GACRf,KAAKC,WACPc,EAAMI,kBACFJ,EAAMM,SAAUrB,KAAKyB,kBAAkBV,GAClCA,EAAMQ,YAAYvB,KAAK0B,gBAAgBX,IAGlDA,EAAMY,iBAQR9B,YAAYkB,GACNf,KAAKC,WACPc,EAAMa,iBACNb,EAAMI,kBACNnB,KAAKC,UAAW,EACZc,EAAMK,gBACRpB,KAAKiB,cAEHF,EAAMM,SAAUrB,KAAK6B,gBAAgBd,GAChCA,EAAMQ,YAAYvB,KAAK8B,uBAAuBf,IAS3DlB,QAAQkB,IAQRlB,kBAAkBkB,GAChBf,KAAK+B,SAAW/B,KAAKgC,uBACrB,MAAMC,EAAMlB,EAAMmB,WACZC,EAAOF,EAAIG,kBAAkBpC,KAAK+B,UAGxC,OAFAhB,EAAMsB,QAAUJ,EAAIK,YAAYH,GAChCnC,KAAKuC,YAAYxB,IACV,EASTlB,kBAAkBkB,GAChB,MAAMkB,EAAMlB,EAAMmB,WACZC,EAAOF,EAAIG,kBAAkBpC,KAAK+B,UAGxC,OAFAhB,EAAMyB,QAAUP,EAAIK,YAAYH,GAChCnC,KAAKyC,OAAO1B,IACL,EASTlB,gBAAgBkB,GACd,MAAMkB,EAAMlB,EAAMmB,WAClB,GAAID,EAAK,CACP,MAAME,EAAOF,EAAIG,kBAAkBpC,KAAK+B,UACxChB,EAAM2B,WAAaT,EAAIK,YAAYH,GAIrC,OADAnC,KAAK2C,UAAU5B,IACR,EAYTlB,yBAAyBkB,GACvBf,KAAK4C,iBAAmB7B,EAAM8B,WAC9B,MAAMrC,EAAMR,KAAK4C,iBAAiBE,YAAYC,QAExChB,EAAW/B,KAAKgC,uBAChBgB,EAASxC,EAAII,GAAGqC,SAASlB,EAASmB,OAClCb,EAAU7B,EAAII,GAAGqC,SAASlB,EAASoB,IAAIC,MAAMJ,EAAOK,IAAItB,EAASoB,OAGvE,OAFApC,EAAMsB,QAAUA,EAChBrC,KAAKuC,YAAYxB,IACV,EASTlB,gBAAgBkB,GACd,GAAIf,KAAK4C,iBAAkB,CACzB,MAAMpC,EAAMR,KAAK4C,iBAAiBE,YAC5Bf,EAAW/B,KAAKgC,uBAChBgB,EAASxC,EAAII,GAAGqC,SAASlB,EAASmB,OAClCV,EAAUhC,EAAII,GAAGqC,SAASlB,EAASoB,IAAIC,MAAMJ,EAAOK,IAAItB,EAASoB,OAGvE,OAFApC,EAAMyB,QAAUA,EAChBxC,KAAKyC,OAAO1B,IACL,GAUXlB,uBAAuBkB,GACrB,GAAIf,KAAK4C,kBAAoB7B,EAAM8B,WAAY,CAC7C,MAAMrC,EAAMR,KAAK4C,iBAAiBE,YAGlC,OAFA9C,KAAK2C,UAAU5B,EAAOP,EAAII,IAC1BZ,KAAK4C,sBAAmBU,GACjB,GAYXzD,YAAYkB,GACVwC,QAAQC,KAAK,sCAAuCzC,GAQtDlB,OAAOkB,GACLwC,QAAQC,KAAK,iCAAkCzC,GAQjDlB,UAAUkB,GACRwC,QAAQC,KAAK,oCAAqCzC,ICxPtD,MAAM0C,UAAiC9D,EAKrCE,YAAYC,GACVC,MAAMD,GAYRD,kBAAkBkB,GAChBf,KAAK+B,SAAW/B,KAAKgC,uBACrB,MAAMC,EAAMlB,EAAMmB,WAClBlC,KAAK0D,SAAWzB,EAAI0B,mBAAmB3D,KAAK+B,UAAU,GACtD,MAAMM,EAAUrC,KAAK+B,SAASO,YAAYtC,KAAK0D,UAI/C,OAHA3C,EAAM2C,SAAW1D,KAAK0D,SACtB3C,EAAMsB,QAAUA,EAChBrC,KAAKuC,YAAYxB,IACV,EAQTlB,kBAAkBkB,GAChB,MACMoB,EADMpB,EAAMmB,WACDyB,mBAAmB3D,KAAK+B,UAAU,GAC7CS,EAAUxC,KAAK+B,SAASO,YAAYH,GAC1CpB,EAAM6C,SAAWzB,EACjBpB,EAAMyB,QAAUA,EAChBzB,EAAM8C,MAAQ1B,EACdpB,EAAM+C,MAAQ3B,EAAOnC,KAAK0D,SAC1B1D,KAAKyC,OAAO1B,GASdlB,gBAAgBkB,GACd,MAAMkB,EAAMlB,EAAMmB,WAClB,GAAID,EAAK,CACP,MAAME,EAAOF,EAAI0B,mBAAmB3D,KAAK+B,UAAU,GAC7CW,EAAa1C,KAAK+B,SAASO,YAAYH,GAC7CpB,EAAM2B,WAAaA,EAIrB,OADA1C,KAAK2C,UAAU5B,IACR,EAYTlB,yBAAyBkB,GACvBf,KAAK+B,SAAW/B,KAAKgC,uBAErBhC,KAAK4C,iBAAmB7B,EAAM8B,WAC9B,MAAMrC,EAAMR,KAAK4C,iBAAiBE,YAClC9C,KAAK0D,SAAWlD,EAAII,GAAGqC,SAASjD,KAAK+B,SAASmB,OAAOG,IAAIrD,KAAK+B,SAASoB,KACvE,MAAMd,EAAUrC,KAAK+B,SAASmB,MAAMa,IAAI/D,KAAK+B,SAASoB,IAAIC,MAAMpD,KAAK0D,WAGrE,OAFA3C,EAAMsB,QAAUA,EAChBrC,KAAKuC,YAAYxB,IACV,EASTlB,gBAAgBkB,GACd,MACMoB,EADMnC,KAAK4C,iBAAiBE,YACjBlC,GAAGqC,SAASjD,KAAK+B,SAASmB,OAAOG,IAAIrD,KAAK+B,SAASoB,KAC9DX,EAAUxC,KAAK+B,SAASmB,MAAMa,IAAI/D,KAAK+B,SAASoB,IAAIC,MAAMjB,IAKhE,OAJApB,EAAM8C,MAAQ1B,EACdpB,EAAMyB,QAAUA,EAChBzB,EAAM+C,MAAQ3B,EAAOnC,KAAK0D,SAC1B1D,KAAKyC,OAAO1B,IACL,EASTlB,uBAAuBkB,GACrB,GAAIf,KAAK4C,kBAAoB7B,EAAM8B,WAIjC,OAFA7C,KAAK2C,YACL3C,KAAK4C,sBAAmBU,GACjB,GC3Gb,MAAMU,UAAwBC,eAK5BpE,cACEE,QACAC,KAAKkE,YAAc,GACnBlE,KAAKmE,YAAc,GACnBnE,KAAKoE,aAAe,KAEpBpE,KAAKqE,oBAAsBrE,KAAKqE,oBAAoBC,KAAKtE,MAO3DH,QACE,IAAK,MAAM0E,KAAUvE,KAAKkE,YAAaK,EAAOC,UAC9CxE,KAAKkE,YAAc,GACnB,IAAK,MAAMK,KAAUvE,KAAKmE,YAAaI,EAAOC,UAC9CxE,KAAKmE,YAAc,GACfnE,KAAKoE,eACPpE,KAAKoE,aAAaK,IAAI,UAAWzE,KAAKqE,qBACtCrE,KAAKoE,aAAe,MAYxBvE,UAAU0E,GAEJvE,KAAKoE,cAAgBpE,KAAKoE,aAAaK,KACzCzE,KAAKoE,aAAaK,IAAI,UAAWzE,KAAKqE,qBAGxCrE,KAAKkE,YAAYQ,KAAKH,GACtBvE,KAAKoE,aAAeG,EAChBvE,KAAKoE,aAAaO,IAAI3E,KAAKoE,aAAaO,GAAG,UAAW3E,KAAKqE,qBAE/D,IAAK,MAAME,KAAUvE,KAAKmE,YAAaI,EAAOC,UAC9CxE,KAAKmE,YAAc,GAEnBnE,KAAKO,KAAK,cAAe,CAAEgE,OAAAA,IAQ7B1E,mBACE,OAAOG,KAAKoE,aAOdvE,oBAAoB+E,GAClB5E,KAAKO,KAAK,gBAAiBqE,GAQ7B/E,KAAKgF,GAAkB,GACrB,GAAI7E,KAAKkE,YAAYY,OAAS,EAAG,CAC3B9E,KAAKoE,eACPpE,KAAKoE,aAAaK,IAAI,UAAWzE,KAAKqE,qBACtCrE,KAAKoE,aAAe,MAGtB,MAAMG,EAASvE,KAAKkE,YAAYa,MAEhCR,EAAOS,OACHH,IACF7E,KAAKmE,YAAYO,KAAKH,GACtBvE,KAAKO,KAAK,kBAShBV,SACE,GAAIG,KAAKkE,YAAYY,OAAS,EAAG,CAC3B9E,KAAKoE,eACPpE,KAAKoE,aAAaK,IAAI,UAAWzE,KAAKqE,qBACtCrE,KAAKoE,aAAe,MAGPpE,KAAKkE,YAAYa,MACzBC,QAQXnF,OACE,GAAIG,KAAKmE,YAAYW,OAAS,EAAG,CAC/B,MAAMP,EAASvE,KAAKmE,YAAYY,MAEhCR,EAAOU,OACPjF,KAAKkE,YAAYQ,KAAKH,GACtBvE,KAAKO,KAAK,iBAadV,gBAAgBqF,GACd,OAAOC,WAASC,eAAeF,GASjCrF,+BAA+BwF,GAC7B,IACeF,WAASG,iBAAiBD,GACvC,OAAO,EACP,MAAOE,GACP,OAAO,GAWX1F,0BAA0BwF,GACxB,OAAOF,WAASG,iBAAiBD,GAWnCxF,sBAAsBC,EAAM0F,GAC1BL,WAASM,SAAS3F,EAAM0F,GAG1B3F,qBAIE,OAHKwF,IACHA,EAAO,IAAIrB,GAENqB,GAIX,IAAIA,ECxLJ,MAAMK,UAAezB,eAOnBpE,YAAYC,GACVC,QACAC,KAAKF,KAAOA,GAAckE,EAAgB2B,mBAAmB3F,MAS/DH,OACE,MAAM,IAAI+F,MAAM,gBAQlB/F,OACE,MAAM,IAAI+F,MAAM,gBAUlB/F,OAAO+E,GACL,MAAM,IAAIgB,MAAM,gBAWlB/F,OAAOgG,GACL,MAAO,GAaThG,SAASiG,EAAGD,IASZhG,eAAeiG,GAGb9F,KAAK+F,OAAOD,GASdjG,YClFF,MAAMmG,UAA6BN,EAOjC7F,YAAYoG,EAAOC,GACbD,GACFlG,MAAMkG,EAAQA,EAAME,UAAY,WAAa,wBAC7CnG,KAAKoG,YAAcH,EAAMvF,WACzBV,KAAKqG,QAAUJ,EACC3C,MAAZ4C,IACFlG,KAAKsG,YAAcJ,EACnBlG,KAAKqG,QAAQE,SAASvG,KAAKsG,eAG7BvG,QAGFC,KAAKwG,uBAAwB,EAC7BxG,KAAKyG,iBAAmB,GAM1B5G,OACOG,KAAKqG,UAELrG,KAAKwG,uBAAuBxG,KAAKqG,QAAQE,SAASvG,KAAKoG,aAE5DpG,KAAKyG,iBAAiBC,SAASnC,GAAWA,EAAOS,UAOnDnF,OACOG,KAAKqG,UACLrG,KAAKwG,uBAAuBxG,KAAKqG,QAAQE,SAASvG,KAAKsG,aAE5DtG,KAAKyG,iBAAiBC,SAASnC,GAAWA,EAAOU,UAQnDpF,OAAO+E,GACA5E,KAAKqG,UACVrG,KAAKsG,YAAc1B,EAAWf,MAC9B7D,KAAKqG,QAAQE,SAASvG,KAAKsG,aAC3BtG,KAAKO,KAAK,UAAWqE,IASvB/E,OAAOgG,GACL,MAAMC,EAAI,CACRhG,KAAME,KAAKF,KACX6G,UAAW3G,KAAKqG,QAAQO,WAU1B,OAPwBtD,MAApBtD,KAAKsG,cACHtG,KAAKsG,YAAYO,OACnBf,EAAEjC,MAAQ7D,KAAKsG,YAAYO,SAE3Bf,EAAEjC,MAAQ7D,KAAKsG,aAGZR,EASTjG,SAASiG,EAAGD,GACV,MAAMI,EAAQJ,EAAQiB,QAAQC,MAAMC,UAAUC,YAAYnB,EAAEa,UAAW,GAClEV,GAAWA,aAAiBiB,aAIjClH,KAAKqG,QAAUJ,EACfjG,KAAKoG,YAAcpG,KAAKqG,QAAQ3F,WAC5BV,KAAKoG,YAAYrD,MAAO/C,KAAKsG,YAActG,KAAKoG,YAAYrD,QAC3D/C,KAAKsG,YAActG,KAAKoG,YAE7BpG,KAAKF,KAAOgG,EAAEhG,KACCwD,MAAXwC,EAAEjC,OAAoB7D,KAAKmH,eAAerB,IAT5CvC,QAAQC,KAAK,mCAAoCsC,EAAEa,WAiBvD9G,eAAeiG,GACR9F,KAAKqG,UACNrG,KAAKsG,YAAYc,SAAUpH,KAAKsG,YAAYc,SAAStB,EAAEjC,OACtD7D,KAAKsG,YAAcR,EAAEjC,MAC1B7D,KAAKqG,QAAQE,SAASvG,KAAKsG,eAI/BtC,EAAgBqD,eAAe,uBAAwBrB,GCvHvD,MAAMsB,UAAqBC,WAMzB1H,YAAY2H,GACVzH,MAAMyH,GAENxH,KAAKyH,eAA8B,cAAIC,gBAAcC,YACnD,4BACA,igEAgFF3H,KAAKyH,eAAgC,gBAAIC,gBAAcC,YACrD,8BACA,qsEA4GF3H,KAAK4H,WASP/H,8BACE,MAAMgI,EAAa9H,MAAM+H,uBAUzB,OATAD,EAAWnD,KAAK,CACd5E,KAAM,YACNiI,aAAc,IAAI1H,QAAM,EAAK,EAAK,MAEpCwH,EAAWnD,KAAK,CACd5E,KAAM,qBACNiI,aAAc,IAEhBF,EAAWnD,KAAK,CAAE5E,KAAM,UAAWiI,aAAc,IAC1CF,EAQThI,6BAA6BmI,GAC3B,MAAMC,EAAU,IAAIC,aAAa,GAC3BC,EAAYH,EAASvH,aAAa,aAAaC,WAOrD,OANAuH,EAAQ,GAAKE,EAAUC,EACvBH,EAAQ,GAAKE,EAAUE,EACvBJ,EAAQ,GAAKE,EAAUG,EACvBL,EAAQ,GAAKE,EAAUI,EACvBN,EAAQ,GAAKD,EAASvH,aAAa,sBAAsBC,WACzDuH,EAAQ,GAAKD,EAASvH,aAAa,WAAWC,WACvCuH,EASTpI,mBACE,OAAO,cAIF4F,SAAS,eAAgB6B,GCnQlC,MAAMkB,EAAoB,CAACC,EAAUjI,KACnCiI,EAAS1C,SAET,MAAM2C,EAAYD,EAASE,mBAAmB,aAC9C,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAU5D,OAAQ8D,IAAK,CACzC,MAAMC,EAAIH,EAAUI,YAAYF,GAC1BG,EAAKvI,EAAIwI,cAAcH,GAC7BA,EAAEI,IAAIF,EAAGG,EAAGH,EAAGI,EAAGJ,EAAGK,KCKzB,MAAMC,UAA6B5F,EASjC5D,YAAYC,EAAMgF,EAAS,GAAKwE,EAAY,KAAOC,EAAQ,IAAIlJ,SAC7DN,MAAMD,GACNE,KAAKE,WAAWqG,SAASgD,GAEzBvJ,KAAKwJ,UAAY,IAAIC,WAAS,SAAU,gBACxCzJ,KAAKwJ,UAAU/I,aAAa,aAAa8F,SAASgD,GAClDvJ,KAAKwJ,UAAU/I,aAAa,sBAAsB8F,SAAS,GAC3DvG,KAAKwJ,UAAU/I,aAAa,WAAW8F,SAAS,IAEhD,MAAMmD,EAAa,IAAIC,WAASL,EAAWxE,EAAQ,IACnD4E,EAAWjJ,aAAa,eAAe8F,UAAS,GAChD,MAAMqD,EAAU,IAAIC,OAAiB,EAAZP,EAA2B,GAAZA,EAAgB,IAAI,GACtDQ,EAAS,IAAIC,WAAS,SAAUL,EAAY1J,KAAKwJ,WAEjDQ,EAAM,IAAID,WAAS,MAAOH,EAAS5J,KAAKwJ,WACxCS,EAAS,IAAIC,MACnBD,EAAOrJ,GAAGqI,IAAI,EAAG,EAAGnE,GAEpB0D,EAAkBoB,EAASK,GAE3BjK,KAAKE,WAAWyE,GAAG,gBAAgB,KACjC3E,KAAKwJ,UAAU/I,aAAa,aAAa8F,SAASvG,KAAKE,WAAWQ,eAGpEV,KAAKmK,SAASL,GACd9J,KAAKmK,SAASH,GAMhBnK,YACEE,MAAMiB,YACNhB,KAAKwJ,UAAU/I,aAAa,aAAa8F,SAASvG,KAAKM,oBAAoBI,YAM7Eb,cACEE,MAAMkB,cACNjB,KAAKwJ,UAAU/I,aAAa,aAAa8F,SAASvG,KAAKE,WAAWQ,YASpEb,eAAeoG,EAAOmE,GAAQ,GAE5B,GADApK,KAAKiG,MAAQA,EACTmE,EAAO,CACT,MAAMC,EAAgB,KACpBrK,KAAKS,aAAa,aAAa8F,SAASN,EAAMvF,aAEhD2J,IACApE,EAAMtB,GAAG,eAAgB0F,IAS7BxK,iBACE,OAAOG,KAAKiG,MAAQjG,KAAKiG,MAAQjG,KAAKS,aAAa,aAQrDZ,YAAYkB,GACVf,KAAKqC,QAAUtB,EAAMsB,QACrB,MAAM4D,EAAQjG,KAAKsK,iBACnBtK,KAAKuK,QAAUtE,EAAMvF,WAErBV,KAAKuE,OAAS,IAAIyB,EAAqBC,GACvCjC,EAAgBwG,cAAcC,UAAUzK,KAAKuE,QAQ/C1E,OAAOkB,GACL,MAAM2J,EAAU3J,EAAMyB,QAAQS,SAASjD,KAAKqC,SAEtCsI,EAAS3K,KAAKuK,QAAQxH,QAC5B4H,EAAO/J,GAAGgK,WAAWF,GAErB1K,KAAKuE,OAAOwB,OAAO,CACjBlC,MAAO8G,IASX9K,UAAUkB,GACRf,KAAKuE,OAAS,MCrHlB,MAAMsG,UAAgClL,EAMpCE,YAAYC,GACVC,MAAMD,GASRD,eAAeoG,EAAOmE,GAAQ,GAE5B,GADApK,KAAKiG,MAAQA,EACTmE,EAAO,CACT,MAAMC,EAAgB,KACpBrK,KAAKS,aAAa,aAAa8F,SAASN,EAAMvF,aAEhD2J,IACApE,EAAMtB,GAAG,eAAgB0F,IAS7BxK,iBACE,OAAOG,KAAKiG,MAAQjG,KAAKiG,MAAQjG,KAAKS,aAAa,aAQrDZ,YAAYkB,GACVf,KAAKuK,QAAUvK,KAAKS,aAAa,aAAaC,WAAWqC,QACzD/C,KAAKuK,QAAQO,GAAG7B,IAAI,EAAG,EAAG,GAC1BjJ,KAAK+K,SAAW,IAAIb,MAEpB,MAAMjE,EAAQjG,KAAKsK,iBACbU,EAAW/E,EAAMvF,WACvBV,KAAKiL,UAAYjL,KAAKuK,QAAQW,UAAUC,SAASH,GAEjDhL,KAAKoL,KAAOrK,EAAMsB,QAAQY,SAASjD,KAAKuK,QAAQ3J,IAChDZ,KAAKqL,iBAAmBrL,KAAKoL,KAAKtG,SAClC9E,KAAKoL,KAAKE,mBAEVtL,KAAKuE,OAAS,IAAIyB,EAAqBC,GACvCjC,EAAgBwG,cAAcC,UAAUzK,KAAKuE,QAQ/C1E,OAAOkB,GACL,MAAMwK,EAAOxK,EAAMyB,QAAQS,SAASjD,KAAKuK,QAAQ3J,IAEjD2K,EAAKD,mBAUL,IAAIE,EADc,EACNxL,KAAKoL,KAAKK,QAAQF,GAO9B,GANIvL,KAAKoL,KAAKM,MAAMH,GAAMlI,IAAIrD,KAAKuK,QAAQ1J,IAAIC,YAAc,IAAG0K,GAASA,GAErExL,KAAK2L,QACPH,EAAQI,gBAAcC,MAAML,EAAOxL,KAAK2L,MAAM,GAAI3L,KAAK2L,MAAM,KAG3D5K,EAAM+K,SAAU,CAElB,MAAMC,EAAYC,KAAKC,SAAS,MAChCT,EAAQQ,KAAKE,MAAMV,EAAQO,GAAaA,EAG1C/L,KAAK+K,SAASlK,IAAIsL,oBAAoB,IAAIC,OAAK,EAAG,EAAG,GAAIZ,GAEzD,MACM3H,EADS7D,KAAKuK,QAAQY,SAASnL,KAAK+K,UACrBI,SAASnL,KAAKiL,WAEnCjL,KAAKuE,OAAOwB,OAAO,CACjBlC,MAAAA,IASJhE,UAAUkB,GACRf,KAAKuE,OAAS,MChGlB,MAAM8H,UAA4BxB,EAShChL,YAAYC,EAAMwM,EAAQhD,EAAWC,EAAQ,IAAIlJ,QAAM,EAAG,EAAG,IAC3DN,MAAMD,GAENE,KAAKuM,YAAcvM,KAAKG,aAAa,IAAIqM,kBAAgB,SAAUF,IACnEtM,KAAKE,WAAWqG,SAASgD,GAEzBvJ,KAAKwJ,UAAY,IAAIC,WAAS,SAAU,gBACxCzJ,KAAKwJ,UAAU/I,aAAa,aAAa8F,SAASgD,GAClDvJ,KAAKwJ,UAAU/I,aAAa,sBAAsB8F,SAAS,GAC3DvG,KAAKwJ,UAAU/I,aAAa,WAAW8F,SAAS,IAGhD,MAAMmD,EAAa,IAAI+C,QAAMnD,EAAWgD,EAAQ,GAAc,GAAVN,KAAKU,IACzD1M,KAAK8J,OAAS,IAAIC,WAAS,SAAUL,EAAY1J,KAAKwJ,WACtDxJ,KAAK2M,UAAY,IAAIzC,MAErBlK,KAAKuM,YAAY5H,GAAG,gBAAgB,KAClC2H,EAAStM,KAAKuM,YAAY7L,WAC1BgJ,EAAWjJ,aAAa,eAAe8F,SAAS+F,GAChD5C,EAAWjJ,aAAa,eAAe8F,SAAkB,IAAT+F,MAGlDtM,KAAKE,WAAWyE,GAAG,gBAAgB,KACjC3E,KAAKwJ,UAAU/I,aAAa,aAAa8F,SAASvG,KAAKE,WAAWQ,eAGpEV,KAAKmK,SAASnK,KAAK8J,QAMrBjK,YACEE,MAAMiB,YACNhB,KAAKwJ,UAAU/I,aAAa,aAAa8F,SAASvG,KAAKM,oBAAoBI,YAM7Eb,cACEE,MAAMkB,cACNjB,KAAKwJ,UAAU/I,aAAa,aAAa8F,SAASvG,KAAKE,WAAWQ,YAQpEb,aACE,OAAOG,KAAKS,aAAa,aAAaC,WAQxCb,YAAYkB,GACVhB,MAAMwC,YAAYxB,GAQpBlB,OAAOkB,GACLhB,MAAM0C,OAAO1B,GAQflB,UAAUkB,GACRhB,MAAM4C,UAAU5B,ICjGpB,MAAM6L,UAA6BjN,EAMjCE,YAAYC,GACVC,MAAMD,GACNE,KAAK6M,yBAA0B,EASjChN,eAAeoG,EAAOmE,GAAQ,GAE5B,GADApK,KAAKiG,MAAQA,EACTmE,EAAO,CACT,MAAMC,EAAgB,KACpBrK,KAAKS,aAAa,aAAa8F,SAASN,EAAMvF,aAEhD2J,IACApE,EAAMtB,GAAG,eAAgB0F,IAS7BxK,iBACE,OAAOG,KAAKiG,MAAQjG,KAAKiG,MAAQjG,KAAKS,aAAa,aAQrDZ,YAAYkB,GACVf,KAAKqC,QAAUtB,EAAMsB,QACrB,MAAM4D,EAAQjG,KAAKsK,iBACnBtK,KAAKuK,QAAUtE,EAAMvF,WAErBV,KAAKuE,OAAS,IAAIyB,EAAqBC,GACvCjC,EAAgBwG,cAAcC,UAAUzK,KAAKuE,QAQ/C1E,OAAOkB,GACL,MAAM2J,EAAU3J,EAAMyB,QAAQS,SAASjD,KAAKqC,SAEtCsI,EAAS3K,KAAKuK,QAAQxH,QAC5B4H,EAAO/J,GAAGgK,WAAWF,GAErB1K,KAAKuE,OAAOwB,OAAO,CACjBlC,MAAO8G,IASX9K,UAAUkB,GACRf,KAAKuE,OAAS,KAYhB1E,yBAAyBkB,GACvB,GAAIf,KAAK6M,wBAAyB,CAChC7M,KAAK4C,iBAAmB7B,EAAM8B,WAC9B,MAAMrC,EAAMR,KAAK4C,iBAAiBE,YAC5B6J,EAAY3M,KAAKS,aAAa,aAAaC,WACjDV,KAAK8M,WAAatM,EAAI0K,UAAUC,SAASwB,QAEzC5M,MAAMyB,yBAAyBT,GAEjC,OAAO,EAQTlB,gBAAgBkB,GACd,GAAIf,KAAK6M,wBAAyB,CAChC,MACMlC,EADM3K,KAAK4C,iBAAiBE,YACfqI,SAASnL,KAAK8M,YACjC,GAAI9M,KAAKuE,OACPvE,KAAKuE,OAAOwB,OAAO,CACjBlC,MAAO8G,QAEJ,CACS3K,KAAKsK,iBACb/D,SAASoE,SAGjB5K,MAAM2B,gBAAgBX,GAS1BlB,uBAAuBkB,GACjBf,KAAK6M,wBACP7M,KAAKuE,OAAS,KAEdxE,MAAM+B,uBAAuBf,IC5HnC,MAAMgM,UAAgCH,EAQpC/M,YAAYC,EAAMkN,EAAMhK,EAAQuG,EAAQ,IAAIlJ,SAC1CN,MAAMD,GAENE,KAAKiN,UAAYjN,KAAKG,aAAa,IAAIqM,kBAAgB,OAAQQ,IAC/DhN,KAAKE,WAAWqG,SAASgD,GAEzBvJ,KAAKwJ,UAAY,IAAIC,WAAS,SAAU,gBACxCzJ,KAAKwJ,UAAU/I,aAAa,aAAa8F,SAASgD,GAClDvJ,KAAKwJ,UAAU/I,aAAa,sBAAsB8F,SAAS,GAC3DvG,KAAKwJ,UAAU/I,aAAa,WAAW8F,SAAS,IAEhD,MAAMmD,EAAa,IAAIwD,SAAOF,EAAMA,EAAa,IAAPA,GAEpCG,EAAgB,IAAIjD,MAC1BiD,EAAcvM,GAAKoC,EACnBwF,EAAkBkB,EAAYyD,GAC9BnN,KAAK8J,OAAS,IAAIC,WAAS,SAAUL,EAAY1J,KAAKwJ,WAEtDxJ,KAAKiN,UAAUtI,GAAG,gBAAgB,KAChCqI,EAAOhN,KAAKiN,UAAUvM,WACtBgJ,EAAWjJ,aAAa,KAAK8F,SAASyG,GACtCtD,EAAWjJ,aAAa,KAAK8F,SAASyG,GACtCtD,EAAWjJ,aAAa,KAAK8F,SAAgB,IAAPyG,MAGxChN,KAAKE,WAAWyE,GAAG,gBAAgB,KACjC3E,KAAKwJ,UAAU/I,aAAa,aAAa8F,SAASvG,KAAKE,WAAWQ,eAEpEV,KAAKmK,SAASnK,KAAK8J,QAMrBjK,YACEE,MAAMiB,YACNhB,KAAKwJ,UAAU/I,aAAa,aAAa8F,SAASvG,KAAKM,oBAAoBI,YAM7Eb,cACEE,MAAMkB,cACNjB,KAAKwJ,UAAU/I,aAAa,aAAa8F,SAASvG,KAAKE,WAAWQ,aChDtE,MAAM0M,UAAkBxN,WAOtBC,YAAYmN,EAAO,GAAK1D,EAAY,MAClCvJ,MAAM,aAENC,KAAKM,oBAAsBN,KAAKG,aAAa,IAAIC,iBAAe,iBAAkB,IAAIC,QAAM,EAAG,EAAG,KAElGL,KAAKM,oBAAoBqE,GAAG,gBAAgB,KAC1C,MAAM4E,EAAQvJ,KAAKM,oBAAoBI,WAEvCV,KAAKqN,UAAUC,IACTA,aAAgB3N,GAAQ2N,EAAK7M,aAAa,kBAAkB8F,SAASgD,SAM7E,MAAMgE,EAAqB,IAAI3N,WAAS,aAExCI,KAAKmK,SAASoD,GAEd,MAAMC,EAAM,IAAInN,QAAM,EAAG,GAAK,IACxBoN,EAAQ,IAAIpN,QAAM,WAClBqN,EAAO,IAAIrN,QAAM,WACvBmN,EAAIjF,EAAI,EACRkF,EAAMlF,EAAI,EACVmF,EAAKnF,EAAI,EAET,CACE,MAAMoF,EAAgB,IAAItE,EAAqB,UAAW2D,EAAM1D,EAAWkE,GACrEhN,EAAM,IAAI0J,MAChB1J,EAAIK,IAAIsL,oBAAoB,IAAIC,OAAK,EAAG,EAAG,GAAc,GAAVJ,KAAKU,IACpDiB,EAAclN,aAAa,YAAY8F,SAAS/F,GAChD+M,EAAmBpD,SAASwD,GAE9B,CACE,MAAMC,EAAgB,IAAIvE,EAAqB,UAAW2D,EAAM1D,EAAWmE,GACrEjN,EAAM,IAAI0J,MAChB1J,EAAIK,IAAIsL,oBAAoB,IAAIC,OAAK,EAAG,EAAG,IAAe,GAAXJ,KAAKU,IACpDkB,EAAcnN,aAAa,YAAY8F,SAAS/F,GAChD+M,EAAmBpD,SAASyD,GAE9B,CACE,MAAMC,EAAgB,IAAIxE,EAAqB,UAAW2D,EAAM1D,EAAWoE,GAC3EH,EAAmBpD,SAAS0D,GAK9B,MAAMC,EAAoB,IAAPd,EACnB,CACE,MAAMe,EAAiB,IAAIhB,EACzB,WACAe,EACA,IAAI1B,OAAkB,GAAb0B,EAA+B,GAAbA,EAAkB,GAC7CJ,GAEIlN,EAAM,IAAI0J,MAChB6D,EAAetN,aAAa,YAAY8F,SAAS/F,GACjD+M,EAAmBpD,SAAS4D,GAE9B,CACE,MAAMC,EAAiB,IAAIjB,EACzB,WACAe,EACA,IAAI1B,QAAmB,GAAd0B,EAAgC,GAAbA,EAAkB,GAC9CN,GAEIhN,EAAM,IAAI0J,MAChB1J,EAAIK,IAAIsL,oBAAoB,IAAIC,OAAK,EAAG,EAAG,GAAc,GAAVJ,KAAKU,IACpDsB,EAAevN,aAAa,YAAY8F,SAAS/F,GACjD+M,EAAmBpD,SAAS6D,GAE9B,CACE,MAAMC,EAAiB,IAAIlB,EACzB,WACAe,EACA,IAAI1B,OAAkB,GAAb0B,EAA+B,GAAbA,EAAkB,GAC7CL,GAEIjN,EAAM,IAAI0J,MAChB1J,EAAIK,IAAIsL,oBAAoB,IAAIC,OAAK,EAAG,EAAG,GAAc,GAAVJ,KAAKU,IACpDuB,EAAexN,aAAa,YAAY8F,SAAS/F,GACjD+M,EAAmBpD,SAAS8D,GAK9B,MAAMC,EAAkB,IAAItO,WAAS,UAErCI,KAAKmK,SAAS+D,GAKd,CACE,MAAMC,EAAkB,IAAI9B,EAAoB,YAAoB,IAAPW,EAAa1D,EAAWkE,GAC/EhN,EAAM,IAAI0J,MAChB1J,EAAIK,IAAIuN,mBAAmB,IAAIC,eAAuB,GAAXrC,KAAKU,IAAsB,GAAXV,KAAKU,GAAW,IAC3EyB,EAAgB1N,aAAa,YAAY8F,SAAS/F,GAClD0N,EAAgB/D,SAASgE,GAE3B,CACE,MAAMG,EAAkB,IAAIjC,EAAoB,YAAoB,IAAPW,EAAa1D,EAAWmE,GAC/EjN,EAAM,IAAI0J,MAChB1J,EAAIK,IAAIsL,oBAAoB,IAAIC,OAAK,EAAG,EAAG,IAAe,GAAXJ,KAAKU,IACpD4B,EAAgB7N,aAAa,YAAY8F,SAAS/F,GAClD0N,EAAgB/D,SAASmE,GAE3B,CACE,MAAMC,EAAkB,IAAIlC,EAAoB,YAAoB,IAAPW,EAAa1D,EAAWoE,GAC/ElN,EAAM,IAAI0J,MAChB1J,EAAIK,IAAIsL,oBAAoB,IAAIC,OAAK,EAAG,EAAG,GAAc,GAAVJ,KAAKU,IACpD6B,EAAgB9N,aAAa,YAAY8F,SAAS/F,GAClD0N,EAAgB/D,SAASoE,IAqC7B1O,kBACE,MAAM2O,EAAaxO,KAAKyO,gBACxB,QAAmBnL,IAAfkL,EAA0B,CAC5B,MAAME,EAAYF,EAAW/N,aAAa,aAAaC,WAAWqC,QAElE,OADA2L,EAAU5D,GAAG7B,IAAI,EAAG,EAAG,GAChByF,EAAUvD,SAASnL,KAAK2O,gBAAgBjO,YAC1C,OAAOV,KAAK2O,gBAAgBjO,WASrCb,YAAY+O,GACV5O,KAAK6O,YAAW,GAQlBhP,eAAeoG,GACbjG,KAAKiG,MAAQA,EACbjG,KAAKqN,UAAUC,IACTA,aAAgB3N,GAAQ2N,EAAKwB,eAAe7I,GAAO,OCjM7D,MAAM8I,UAAkCC,WAOtCnP,YAAYoP,EAAqBC,GAC/BnP,QACAC,KAAKmP,SAAS,IAAIC,gBAAc,mBAAmBC,SAASJ,GAC5DjP,KAAKsP,UAAU,IAAIC,iBAAe,mBAAmBF,SAASH,GAE9DlP,KAAKwP,aAAe,IAAItF,MAQ1BrK,QAAQyN,GACNtN,KAAKmP,SAAS,IAAIC,gBAAc,kBAAoBpP,KAAKyP,iBAAiBJ,SAAS/B,EAAK7M,aAAa,cACrGT,KAAK0P,WAQP7P,WAAWyN,GAET,MAAMqC,EAAWrC,EAAK7M,aAAa,aACnC,IAAK,IAAImI,EAAI,EAAGA,EAAI5I,KAAKyP,eAAgB7G,IAAK,CAC5C,MAAMgH,EAAQ5P,KAAK6P,gBAAgBjH,GACnC,GAAIgH,EAAME,YAAcH,EAGtB,OAFA3P,KAAK+P,YAAYH,QACjB5P,KAAK0P,WAIT,MAAM,IAAI9J,MAAM,+CASlB/F,mBAAmBW,GACjB,MAAMwP,EAAShQ,KAAKwP,aAAatE,UAC3BpH,EAAQtD,EAAI2K,SAAS6E,GAC3BlM,EAAMjD,IAAIyK,mBASVtL,KAAKwP,aAAe1L,EAAMqH,SAASnL,KAAKwP,cACxC,IAAK,IAAI5G,EAAI,EAAGA,EAAI5I,KAAKyP,eAAgB7G,IAAK,CAC5C,MAAMgH,EAAQ5P,KAAK6P,gBAAgBjH,GAC7BqH,EAAUL,EAAMlP,WAChBwP,EAASpM,EAAMqH,SAAS8E,GAC9BL,EAAMrJ,SAAS2J,IAOnBrQ,WACE,MAAMsQ,EAAuBnQ,KAAKoQ,UAAU,kBAG5C,GAFApQ,KAAKwP,aAAe,IAAItF,MAEG,GAAvBlK,KAAKyP,eAEP,YADAU,EAAqBE,SAASrQ,KAAKwP,cAIrC,MAAMc,EAAiBtQ,KAAKuQ,SAAS,kBAAkB7P,WACvD,GAAI4P,GAAkBE,QAAMC,kBAAkBC,OAA9C,CAIO,GAAIJ,GAAkBE,QAAMC,kBAAkBE,MAAO,CAC1D,MAAMC,EAAU5Q,KAAK6P,gBAAgB,GAAGnP,WACxCV,KAAKwP,aAAa5O,GAAKgQ,EAAQhQ,GAAGmC,QAClC/C,KAAKwP,aAAa3O,IAAM+P,EAAQ/P,IAAIkC,aAC/B,GAAIuN,GAAkBE,QAAMC,kBAAkBI,QAAS,CAC5D7Q,KAAKwP,aAAa3O,IAAIoI,IAAI,EAAG,EAAG,EAAG,GACnC,IAAI6H,EAAe,EACnB,IAAK,IAAIlI,EAAI,EAAGA,EAAI5I,KAAKyP,eAAgB7G,IAAK,CAC5C,MAAMgI,EAAU5Q,KAAK6P,gBAAgBjH,GAAGlI,WACxCV,KAAKwP,aAAa5O,GAAGgK,WAAWgG,EAAQhQ,IAGpB,GAAhBkQ,GAAmB9Q,KAAKwP,aAAa3O,IAAI+J,WAAWgG,EAAQ/P,KAChEiQ,IAEF9Q,KAAKwP,aAAa5O,GAAGmQ,aAAa,EAAID,OAEjC,CAAA,GAAIR,GAAkBE,QAAMC,kBAAkBO,UASnD,MAAM,IAAIpL,MAAM,oCAT8C,CAC9D,IAAIkL,EAAe,EACnB,IAAK,IAAIlI,EAAI,EAAGA,EAAI5I,KAAKyP,eAAgB7G,IAAK,CAC5C,MAAMgI,EAAU5Q,KAAK6P,gBAAgBjH,GAAGlI,WACxCV,KAAKwP,aAAa5O,GAAGgK,WAAWgG,EAAQhQ,IACxCkQ,IAEF9Q,KAAKwP,aAAa5O,GAAGmQ,aAAa,EAAID,IAIxC9Q,KAAKwP,aAAa3O,IAAIyK,mBACtB6E,EAAqBE,SAASrQ,KAAKwP,mBA/BjCxP,KAAKwP,aAAeW,EAAqBzP,WAAWqC,SC1F1D,MAAMkO,EAAkB,CACtBC,SAAU,EACVR,OAAQ,EACRC,MAAO,EACPE,QAAS,EACTG,UAAW,GAeb,MAAMG,UAAuBC,eAQ3BvR,YAAYwR,GAGV,IAAIC,EACAC,EAHJxR,QAKKuR,EADLD,EAAQG,sBACcH,EAAQG,sBACR,IAAInR,QAAM,EAAI,IAAK,IAAM,IAAK,IAAM,IAAK,IAE3DgR,EAAQI,4BAA6BF,EAAeF,EAAQI,6BAE9DF,EAAeD,EAAeI,KAAK,IAAIrR,QAAM,SAAU,IACvDkR,EAAahJ,EAAI,IAGnBvI,KAAKS,aAAa,kBAAkB8F,SAAS+K,GAC7CtR,KAAKG,aAAa,IAAIC,iBAAe,wBAAyBmR,IAE9DvR,KAAK2R,aAAaC,aAAatE,GAASA,aAAgBuE,aAExD7R,KAAK8R,sBAAwB9R,KAAKG,aAChC,IAAI4R,uBAAqB,iBAAkBd,EAAgBJ,QAAS,CAAC,SAAU,QAAS,UAAW,YAGrG7Q,KAAKgS,oBAAsB,IAAIjD,EAC7B/O,KAAKS,aAAa,kBAClBT,KAAKS,aAAa,cActBgQ,+BACE,OAAOQ,EAQTpR,QACE,MAAMoS,EAAS,IAAId,EAEnB,OADAc,EAAOC,SAASlS,MACTiS,EASTpS,WAAWyN,EAAM6E,GACf,GAAI7E,aAAgB1N,WAAU,CAC5B,MAAMwS,EAAiBpS,KAAKS,aAAa,kBAAkBC,WAC3D0R,EAAe7J,EAAIvI,KAAKS,aAAa,iBAAiBC,WACtD4M,EAAK+E,aAAa,WAAarS,KAAKsS,QAASF,GAAgB,GAE7D,MAAMG,EAAevS,KAAKS,aAAa,yBAAyBC,WAChE4M,EAAKkF,cAAc9L,SAAS+L,IACtBA,aAAqB7S,YACvB6S,EAAUJ,aAAa,iBAAmBrS,KAAKsS,QAASC,GAAc,MAI1EvS,KAAKgS,oBAAoBU,QAAQpF,EAAM6E,IAU3CtS,aAAayN,EAAM6E,GACb7E,aAAgB1N,aAClB0N,EAAKqF,gBAAgB,WAAa3S,KAAKsS,SACvChF,EAAKkF,cAAc9L,SAAS+L,IACtBA,aAAqB7S,YACvB6S,EAAUE,gBAAgB,iBAAmB3S,KAAKsS,SAAS,MAI/DtS,KAAKgS,oBAAoBY,WAAWtF,EAAM6E,KCpHhD,MAAMU,UAAwBnN,EAQ5B7F,YAAYiT,EAAkBC,EAAeC,GAC3CjT,MAAM,mBACNC,KAAKiT,mBAAqBH,EAC1B9S,KAAKkT,gBAAkBH,EACvB/S,KAAKmT,eAAiBH,EAMxBnT,OACEG,KAAKiT,mBAAmBG,aAAapT,KAAKkT,iBAAiB,GAM7DrT,OACEG,KAAKiT,mBAAmBG,aAAapT,KAAKmT,gBAAgB,GAS5DtT,OAAOgG,GACL,MAAMC,EAAI/F,MAAM8G,OAAOhB,GAEjBwN,EAAY,GAClB,IAAK,MAAMC,KAAYtT,KAAKmT,eAC1BE,EAAU3O,KAAK4O,EAAS1M,WAG1B,OADAd,EAAEuN,UAAYA,EACPvN,EASTjG,SAASiG,EAAGD,GACV9F,MAAMqH,SAAStB,EAAGD,GAElB7F,KAAKiT,mBAAqBpN,EAAQiB,QAAQgM,iBAC1C9S,KAAKkT,gBAAkB,IAAIK,IAAIvT,KAAKiT,mBAAmBO,gBAEvD,MAAMC,EAAY5N,EAAQiB,QAAQC,MAAMC,UAClCgM,EAAe,IAAIO,IACzB,IAAK,MAAMG,KAAY5N,EAAEuN,UACvBL,EAAajP,IAAI0P,EAAUxM,YAAYyM,EAAU,IAEnD1T,KAAKmT,eAAiBH,EAEtBhT,KAAKiT,mBAAmBG,aAAapT,KAAKmT,gBAAgB,IAI9DnP,EAAgBqD,eAAe,kBAAmBwL,GCrElD,MAAMc,UAAkCjO,EAOtC7F,YAAY+T,EAAWC,GACrB9T,MAAM,+BACNC,KAAK4T,UAAYA,EACjB5T,KAAK6T,MAAQA,EACb7T,KAAK8T,uBAAuB9T,KAAK6T,OAMnChU,OACEG,KAAK8T,wBAAwB9T,KAAK6T,OAMpChU,OACEG,KAAK8T,uBAAuB9T,KAAK6T,OASnChU,uBAAuBgU,GACrB,IAAK,MAAMP,KAAYtT,KAAK4T,UAC1BN,EAAS7S,aAAa,WAAW8F,SAASsN,IAKhD7P,EAAgBqD,eAAe,4BAA6BsM,GCjC5D,MAAMI,UAAyB9P,eAU7BpE,YAAYiH,EAASuK,EAAU,IAM7B,GALAtR,QACAC,KAAK8G,QAAUA,EACf9G,KAAKgU,mBAAgB1Q,EACrBtD,KAAKiU,eAAiB,IAAI9C,EAAeE,IAER,IAA7BA,EAAQ6C,iBAA2B,CACrC,MAAMlH,EAAO,GACP1D,EAAmB,IAAP0D,EAClBhN,KAAKmU,UAAY,IAAI/G,EAAUJ,EAAM1D,GACrCtJ,KAAKmU,UAAUrF,eAAe9O,KAAKiU,eAAexT,aAAa,cAAc,GAC7ET,KAAKmU,UAAUtF,YAAW,GAC1B7O,KAAKmU,UAAU1T,aAAa,kBAAkB8F,SAAS,IAAIlG,QAAM,EAAG,EAAG,IACvEL,KAAKoU,kBAAmB,EAExBpU,KAAKiU,eAAe9J,SAASnK,KAAKmU,WAGhCnU,KAAK8G,QAAQuN,UACfrU,KAAKsU,YAAYtU,KAAK8G,QAAQuN,UASlCxU,YAAYwU,GACNrU,KAAKuU,YAAcF,GAIvBrU,KAAKuU,WAAaF,EAClBrU,KAAKuU,WAAWC,YAAYxU,KAAKiU,iBAJ/B1Q,QAAQC,KAAK,4CAcjB3D,WAAW4U,GACLzU,KAAKmU,WACPnU,KAAKiU,eAAexT,aAAa,kBAAkB8F,SAASkO,GAUhE5U,YAAY6U,GACV1U,KAAKoU,iBAAmBM,EAM1B7U,yBACE,IAAKG,KAAKmU,UAAW,OACrB,MAAMP,EAAY5T,KAAKiU,eAAeU,WAChCC,EAAUC,MAAMC,KAAKlB,GAAW9O,OAAS,EAC/C9E,KAAKmU,UAAUtF,WAAW+F,GAAW5U,KAAKoU,kBAC1CpU,KAAKuU,WAAWQ,gBAQlBlV,eACE,OAAOG,KAAKiU,eAAeU,WAS7B9U,aAAamT,EAAcgC,GAAa,GACtC,MAAMpB,EAAY,IAAIL,IAAIvT,KAAKiU,eAAeU,YACxC5B,EAAgB,IAAIQ,IAAIK,GAC9B,IAAK,MAAMN,KAAYN,EAChBY,EAAUqB,IAAI3B,KACjBA,EAAS4B,aAAY,GACrBtB,EAAU7P,IAAIuP,IAGlB,IAAK,MAAMA,KAAYM,EAChBZ,EAAaiC,IAAI3B,KACpBA,EAAS4B,aAAY,GACrBtB,EAAUuB,OAAO7B,IAWrB,GAPAtT,KAAKiU,eAAemB,SAASxB,GAGzBA,EAAU5G,KAAO,EAAGhN,KAAKqV,mBAAmBzB,EAAU0B,SAASC,OAAO1R,OACrE7D,KAAKqV,qBACVrV,KAAKwV,yBAEDR,EAAY,CACd,MAAMzQ,EAAS,IAAIsO,EAAgB7S,KAAM+S,EAAea,GACxD5P,EAAgBwG,cAAcC,UAAUlG,GAG1CvE,KAAKO,KAAK,mBAAoB,CAAEwS,cAAAA,EAAea,UAAAA,IAQjD/T,mBAAmByT,GACbtT,KAAKgU,eAAiBV,IACxBtT,KAAKgU,cAAgBV,EACrBtT,KAAKO,KAAK,uBAAwB,CAAE+S,SAAAA,KAUxCzT,oBAAoByT,EAAUmC,GAAmB,GAC/C,MAAM7B,EAAY,IAAIL,IAAIvT,KAAKiU,eAAeU,YACxC5B,EAAgB,IAAIQ,IAAIK,GAK9B,GAAI6B,IAAwC,GAAlB7B,EAAU5G,OAAa4G,EAAUqB,IAAI3B,IAAY,CACzE,IAAIoC,GAAQ,EACZ,GAAI9B,EAAUqB,IAAI3B,GAAW,CAC3B,IAAIqC,EAAQ,EACZrC,EAASjG,UAAUuI,IACbhC,EAAUqB,IAAIW,IAChBD,OAOJD,EAAQC,GAAS/B,EAAU5G,KAGzB0I,IACFb,MAAMC,KAAKlB,GAAWlN,SAAS4G,IAC7BA,EAAK4H,aAAY,MAEnBtB,EAAU8B,SAId,IAAIG,EACCjC,EAAUqB,IAAI3B,IAKjBA,EAAS4B,aAAY,GACrBtB,EAAUuB,OAAO7B,GACjBuC,GAAM,IANNvC,EAAS4B,aAAY,GACrBtB,EAAU7P,IAAIuP,GACduC,GAAM,GA2BR7V,KAAKiU,eAAemB,SAASxB,GAEzBiC,GAA0B,IAAnBjC,EAAU5G,KACnBhN,KAAKqV,mBAAmB/B,GACduC,IAEa,IAAnBjC,EAAU5G,KAAYhN,KAAKqV,mBAAmBzB,EAAU0B,SAASC,OAAO1R,OAChD,IAAnB+P,EAAU5G,MAAYhN,KAAKqV,sBAGtC,MAAM9Q,EAAS,IAAIsO,EAAgB7S,KAAM+S,EAAea,GACxD5P,EAAgBwG,cAAcC,UAAUlG,GAExCvE,KAAKwV,yBACLxV,KAAKO,KAAK,mBAAoB,CAAEwS,cAAAA,EAAea,UAAAA,IASjD/T,eAAeiW,GAAY,GACzB,MAAMlC,EAAY,IAAIL,IAAIvT,KAAKiU,eAAeU,YAC9C,GAAsB,GAAlBf,EAAU5G,KAAW,OAAO,EAChC,IAAI+F,EACA+C,IACF/C,EAAgB,IAAIQ,IAAIK,IAE1B,IAAK,MAAMN,KAAYM,EACrBN,EAAS4B,aAAY,GAKvB,GAHAtB,EAAU8B,QACV1V,KAAKiU,eAAemB,SAASxB,GAC7B5T,KAAKwV,yBACDM,EAAW,CACb,MAAMvR,EAAS,IAAIsO,EAAgB7S,KAAM+S,EAAea,GACxD5P,EAAgBwG,cAAcC,UAAUlG,GACxCvE,KAAKO,KAAK,mBAAoB,CAAEqT,UAAAA,EAAWb,cAAAA,IAE7C,OAAO,EASTlT,YAAYkW,EAAWN,GAAmB,GACxC,MAAM7B,EAAY,IAAIL,IAAIvT,KAAKiU,eAAeU,YACxC5B,EAAgB,IAAIQ,IAAIK,GAE1B6B,GACF7B,EAAU8B,QAGZ,IAAK,MAAMpC,KAAYyC,EAChBnC,EAAUqB,IAAI3B,KACjBA,EAAS4B,aAAY,GACrBtB,EAAU7P,IAAIuP,IAIlB,MAAM/O,EAAS,IAAIsO,EAAgB7S,KAAM+S,EAAea,GAExD5P,EAAgBwG,cAAcC,UAAUlG,GAExCvE,KAAKiU,eAAemB,SAASxB,GACN,IAAnBA,EAAU5G,KACZhN,KAAKqV,mBAAmBzB,EAAU0B,SAASC,OAAO1R,OACtB,IAAnB+P,EAAU5G,MACnBhN,KAAKqV,qBAEPrV,KAAKwV,yBACLxV,KAAKO,KAAK,mBAAoB,CAAEwS,cAAAA,EAAea,UAAAA,IAQjD/T,cAAckW,GACZ,MAAMnC,EAAY,IAAIL,IAAIvT,KAAKiU,eAAeU,YACxC5B,EAAgB,IAAIQ,IAAIK,GAE9B,IAAK,MAAMN,KAAYyC,EACjBnC,EAAUqB,IAAI3B,KAChBA,EAAS4B,aAAY,GACrBtB,EAAUuB,OAAO7B,IAIrBtT,KAAKiU,eAAemB,SAASxB,GAC7B,MAAMrP,EAAS,IAAIsO,EAAgB7S,KAAM+S,EAAea,GAExD5P,EAAgBwG,cAAcC,UAAUlG,GAEjB,IAAnBqP,EAAU5G,KACZhN,KAAKqV,mBAAmBzB,EAAU0B,SAASC,OAAO1R,OACtB,IAAnB+P,EAAU5G,MACnBhN,KAAKqV,qBAEPrV,KAAKwV,yBACLxV,KAAKO,KAAK,mBAAoB,CAAEwS,cAAAA,EAAea,UAAAA,IAMjD/T,4BACE,GAAIG,KAAKgU,cAAe,CACtB,MAAMJ,EAAY5T,KAAKiU,eAAeU,WAChCd,GAAS7T,KAAKgU,cAAcgC,aAC5BzR,EAAS,IAAIoP,EAA0BC,EAAWC,GACxD7P,EAAgBwG,cAAcC,UAAUlG,IAa5C1E,iBAAiBoW,EAAOC,EAAIC,EAAUR,GAEpCpS,QAAQ6S,IAAIH,GACZjW,KAAKqW,SAAWH,EAChBlW,KAAKsW,aAAeH,EACpBnW,KAAKuW,YAAcZ,EACnB3V,KAAKwW,SAAW,GASlB3W,cAAcyN,GACZ,OAAOtN,KAAKsW,aAAahJ,GAQ3BzN,oBACE,OAAwByD,MAAjBtD,KAAKqW,SAMdxW,oBACEG,KAAKqW,cAAW/S,EAOlBzD,KAAKyN,GACH,GAAItN,KAAKqW,SAAU,CACjB,GAAIxB,MAAM4B,QAAQnJ,GACZtN,KAAKsW,aAActW,KAAKwW,SAAWxW,KAAKwW,SAASE,OAAOpJ,EAAKqJ,OAAO3W,KAAKsW,eACxEtW,KAAKwW,SAAWxW,KAAKwW,SAASE,OAAOpJ,OACrC,CACL,GAAItN,KAAKsW,eAAiBtW,KAAKsW,aAAahJ,GAAO,OACnDtN,KAAKwW,SAAS9R,KAAK4I,GAEjBtN,KAAKwW,SAAS1R,QAAU9E,KAAKuW,cAC/BvW,KAAKqW,SAASrW,KAAKwW,UACnBxW,KAAKqW,cAAW/S,KC1YxB,MAAMsT,UAA0BlR,EAQ9B7F,YAAYyT,EAAUuD,EAAO/D,GACvBQ,GACFvT,MAAMuT,EAASnN,UAAY,UAC3BnG,KAAKsT,SAAWA,EAChBtT,KAAK6W,MAAQA,EACb7W,KAAK8S,iBAAmBA,EACxB9S,KAAK+S,cAAgB,IAAIQ,IAAIvT,KAAK8S,iBAAiBU,gBACnDxT,KAAK8W,cAAgB9W,KAAK6W,MAAM1M,SAASnK,KAAKsT,UAC9CtT,KAAK8S,iBAAiBM,aAAa,IAAIG,IAAI,CAACvT,KAAKsT,YAAY,GAE7DtT,KAAKsT,SAASyD,OAAO/W,OAErBD,QAOJF,OACE,GAAIG,KAAKsT,oBAAoBtE,WAAU,CAC1BhP,KAAKsT,SACb0D,cACMhX,KAAKsT,oBAAoB1T,YAClCI,KAAKsT,SAASjG,UAAUuI,IACtB,GAAIA,aAAuB5G,WAAU,CACxB4G,EACRoB,aAEJ,GAELhX,KAAK6W,MAAMI,YAAYjX,KAAK8W,eACxB9W,KAAK8S,kBAAkB9S,KAAK8S,iBAAiBM,aAAapT,KAAK+S,eAAe,GAMpFlT,OAEE,GAAIG,KAAKsT,oBAAoBtE,WAAU,CAC1BhP,KAAKsT,SACb4D,gBACMtB,uBAAuBhW,YAChCI,KAAKsT,SAASjG,UAAUuI,IACtB,GAAIA,aAAuB5G,WAAU,CACxB4G,EACRsB,eAEJ,GAELlX,KAAK6W,MAAM1M,SAASnK,KAAKsT,UACrBtT,KAAK8S,kBAAkB9S,KAAK8S,iBAAiBM,aAAa,IAAIG,IAAI,CAACvT,KAAKsT,YAAY,GAS1FzT,OAAOgG,GAOL,MANU,CACR/F,KAAME,KAAKF,KACXwT,SAAUtT,KAAKsT,SAASzM,OAAOhB,GAC/BsR,aAAcnX,KAAKsT,SAAS1M,UAC5BkQ,cAAe9W,KAAK8W,eAWxBjX,SAASiG,EAAGD,GACV,MAAMyN,EAAWnO,WAASC,eAAeU,EAAEwN,SAAS8D,MAC/C9D,GAILtT,KAAKF,KAAOgG,EAAEhG,KACdE,KAAKsT,SAAWA,EAChBtT,KAAKsT,SAASyD,OAAO/W,MAErBA,KAAKsT,SAASlM,SAAStB,EAAEwN,SAAUzN,GACnC7F,KAAK8W,cAAgB9W,KAAK6W,MAAM1M,SAASnK,KAAKsT,UAAU,GAAO,IAR7D/P,QAAQC,KAAK,qCAAsCsC,EAAEwN,UAczDzT,UACEG,KAAKsT,SAAS+D,UAAUrX,OAI5BgE,EAAgBqD,eAAe,oBAAqBuP,GC5GpD,MAAMU,UAA2B5R,EAQ/B7F,YAAYyT,EAAUiE,GAChBjE,GACFvT,MAAMuT,EAASnN,UAAY,UAC3BnG,KAAKsT,SAAWA,EAChBtT,KAAKwX,SAAWxX,KAAKsT,SAASmE,WAC9BzX,KAAK0X,cAAgB1X,KAAKwX,SAASG,cAAc3X,KAAKsT,UACtDtT,KAAKuX,SAAWA,EAChBvX,KAAKuX,SAASpN,SAASnK,KAAKsT,UAAU,IAEtCvT,QAOJF,OACEG,KAAKwX,SAASI,YAAY5X,KAAKsT,SAAUtT,KAAK0X,eAAe,GAM/D7X,OACEG,KAAKuX,SAASpN,SAASnK,KAAKsT,UAAU,GASxCzT,OAAOgG,GAOL,MANU,CACR/F,KAAME,KAAKF,KACXqX,aAAcnX,KAAKsT,SAAS1M,UAC5BiR,aAAc7X,KAAKuX,SAAS3Q,WAYhC/G,SAASiG,EAAGD,GACV,MAAMyN,EAAWxM,QAAQC,MAAMC,UAAUC,YAAYnB,EAAEqR,aAAc,GACrE,IAAK7D,EAEH,YADA/P,QAAQC,KAAK,mCAAoCsC,EAAEqR,cAGrD,MAAMI,EAAWzQ,QAAQC,MAAMC,UAAUC,YAAYnB,EAAE+R,aAAc,GAChEN,GAILvX,KAAKF,KAAOgG,EAAEhG,KACdE,KAAKsT,SAAWA,EAChBtT,KAAKuX,SAAWA,EAEhBvX,KAAKwX,SAAWxX,KAAKsT,SAASmE,WAC9BzX,KAAK0X,cAAgB1X,KAAKwX,SAASG,cAAc3X,KAAKsT,UACtDtT,KAAKuX,SAASpN,SAASnK,KAAKsT,UAAU,IATpC/P,QAAQC,KAAK,mCAAoCsC,EAAE+R,eAazD7T,EAAgBqD,eAAe,qBAAsBiQ,GC5ErD,MAAMQ,UAA8BpS,EAOlC7F,YAAYkY,EAAOjR,GAMjB,GALA/G,QACAC,KAAK+X,MAAQ,GACb/X,KAAKgY,WAAa,GAClBhY,KAAKqT,UAAY,GACjBrT,KAAKiY,YAAc,GACfF,EAAO,CACT/X,KAAK8S,iBAAmBhM,EAAQgM,iBAChC9S,KAAK+S,cAAgB,IAAIQ,IAAIvT,KAAK8S,iBAAiBU,gBACnDxT,KAAK+X,MAAQA,EACb/X,KAAKgT,aAAe,IAAIO,IAAIvT,KAAK+S,eAEjC,MAAMmF,EAAY,GAClBlY,KAAK+X,MAAMrR,SAAS4G,IAClB,MAAMuJ,EAAQvJ,EAAKmK,WACbU,EAAYtB,EAAMc,cAAcrK,GAQtC,GAPA4K,EAAUxT,KAAK4I,EAAKnH,WACpBmH,EAAKyJ,OAAO/W,MACZA,KAAKgY,WAAWtT,KAAKmS,GACrB7W,KAAKqT,UAAU3O,KAAK4I,EAAK1G,WACzB5G,KAAKiY,YAAYvT,KAAKyT,GAElBnY,KAAK8S,kBAAoB9S,KAAKgT,aAAaiC,IAAI3H,IAAOtN,KAAKgT,aAAamC,OAAO7H,GAC/EA,aAAgB0B,WAAU,CACjB1B,EACR0J,cACM1J,aAAgB1N,YACzB0N,EAAKD,UAAUuI,IACb,GAAIA,aAAuB5G,WAAU,CACxB4G,EACRoB,SAEDhX,KAAK8S,kBAAoB9S,KAAKgT,aAAaiC,IAAIW,IAAc5V,KAAKgT,aAAamC,OAAOS,MACzF,GAGLiB,EAAMI,YAAYkB,MAEpBnY,KAAK8S,iBAAiBM,aAAapT,KAAKgT,cAAc,GAEtDhT,KAAKF,KAAOoY,EAAY,YAO5BrY,OACEG,KAAK+X,MAAMrR,SAAQ,CAAC4G,EAAM6E,KAIxB,GAHAnS,KAAKgY,WAAW7F,GAAOyF,YAAYtK,EAAMtN,KAAKiY,YAAY9F,IAAQ,GAAO,GAGrE7E,aAAgB0B,WAAU,CACjB1B,EACR4J,gBACMtB,uBAAuBhW,YAChC0N,EAAKD,UAAUuI,IACb,GAAIA,aAAuB5G,WAAU,CACxB4G,EACRsB,eAEJ,MAGHlX,KAAK8S,kBAAkB9S,KAAK8S,iBAAiBM,aAAapT,KAAK+S,eAAe,GAMpFlT,OACMG,KAAK8S,kBAAkB9S,KAAK8S,iBAAiBM,aAAapT,KAAKgT,cAAc,GAGjFhT,KAAK+X,MAAMrR,SAAQ,CAAC4G,EAAM6E,KAGxB,GAFAnS,KAAKgY,WAAW7F,GAAO8E,YAAYjX,KAAKiY,YAAY9F,IAEhD7E,aAAgB0B,WAAU,CACjB1B,EACR0J,cACMpB,uBAAuBhW,YAChC0N,EAAKD,UAAUuI,IACb,GAAIA,aAAuB5G,WAAU,CACxB4G,EACRoB,aAEJ,MAYTnX,OAAOiH,GACL,MAAMhB,EAAI,CACRhG,KAAME,KAAKF,KACXiY,MAAO,GACP1E,UAAWrT,KAAKqT,UAChB4E,YAAajY,KAAKiY,aAKpB,OAHAjY,KAAK+X,MAAMrR,SAAS4G,IAClBxH,EAAEiS,MAAMrT,KAAK4I,EAAKzG,aAEbf,EAUTjG,SAASiG,EAAGgB,GACV9G,KAAKF,KAAOgG,EAAEhG,KACdgG,EAAEuN,UAAU3M,SAASgN,IACnB,MAAMpG,EAAOxG,EAAQC,MAAMC,UAAUC,YAAYyM,EAAU,GAC3D,IAAKpG,EAEH,YADA/J,QAAQC,KAAK,mCAAoCkQ,GAGnD,MAAMmD,EAAQvJ,EAAKmK,WACnBzX,KAAKgY,WAAWtT,KAAKmS,GACrB7W,KAAKqT,UAAU3O,KAAK4I,EAAK1G,WACzB5G,KAAKiY,YAAYvT,KAAKmS,EAAMc,cAAcrK,OAS9CzN,UACEG,KAAK+X,MAAMrR,SAAS4G,GAASA,EAAK+J,UAAUrX,SAIhDgE,EAAgBqD,eAAe,wBAAyByQ,GCtJxD,MAAMM,UAAsBC,WAM1BxY,YAAYiH,GACV/G,QAEK+G,GAASvD,QAAQ+U,MAAM,iCAC5BtY,KAAK8G,QAAUA,EACf9G,KAAKuY,UAAW,EACXzR,EAAQgM,kBACXvP,QAAQ+U,MAAM,sFAChBtY,KAAK8S,iBAAmBhM,EAAQgM,iBAEhC9S,KAAKwY,cAAgB,IAAIC,OAAK,EAAG,GACjCzY,KAAK0Y,iBAAmB,IAAIjP,WAAS,SAAU,qBAC/CzJ,KAAK0Y,iBAAiBjY,aAAa,aAAa8F,SAAS,IAAIlG,QAAM,YACnEL,KAAK2Y,iBAAmB,IAAIzO,MAC5BlK,KAAK2Y,iBAAiB/X,GAAGqI,IAAI,GAAK,GAAK,GACvCjJ,KAAK2Y,iBAAiB7N,GAAG7B,IAAI,EAAG,EAAG,GAEnCjJ,KAAK4Y,SAAW,IAAI7O,WAAS,gBAAiB/J,KAAKwY,cAAexY,KAAK0Y,kBACvE1Y,KAAK4Y,SAASnY,aAAa,WAAW8F,UAAS,GAC/CvG,KAAK8G,QAAQuN,SAASG,YAAYxU,KAAK4Y,UAMzC/Y,eACEE,MAAM8Y,eACN7Y,KAAK8Y,WAAa9Y,KAAK8G,QAAQuN,SAAS0E,cAAcC,MAAMC,OAC5DjZ,KAAK8G,QAAQuN,SAAS0E,cAAcC,MAAMC,OAAS,OAMrDpZ,iBACEE,MAAMmZ,iBACNlZ,KAAK8G,QAAQuN,SAAS0E,cAAcC,MAAMC,OAASjZ,KAAK8Y,WAM1DjZ,oBAAoBiT,GAClB9S,KAAK8S,iBAAmBA,EAG1BjT,mBAAmBqW,GACjBlW,KAAKmZ,oBAAsBjD,EAM7BrW,eACEE,MAAM8Y,eAMRhZ,iBACEE,MAAMmZ,iBACNlZ,KAAK2Y,iBAAiB7N,GAAG7B,IAAI,EAAG,EAAG,GACnCjJ,KAAK4Y,SAASnY,aAAa,aAAa8F,SAASvG,KAAK2Y,kBACtD3Y,KAAK4Y,SAASnY,aAAa,WAAW8F,UAAS,GAUjD1G,aAAawB,EAAUyC,GACrB,MAAMgH,EAAK,IAAIsO,OAAM,EAAI/X,EAASgY,WAAc,EAAI,EAAIhY,EAASiY,YAAe,GAC1EtM,EAAOlJ,EAAMqH,SAASL,GAC5B9K,KAAK2Y,iBAAiB7N,GAAG7B,IAAI+C,KAAKuN,IAAIvM,EAAK9D,GAAI8C,KAAKuN,IAAIvM,EAAK7D,GAAI,GAEjE,MACMvI,EADSZ,KAAKwZ,eAAevW,SAASa,EAAMV,MAAM,KACtC+H,SAASL,GAAI7H,SAAS,IAAImW,OAAK,EAAG,IAEpDpZ,KAAK2Y,iBAAiB/X,GAAGsI,EAAItI,EAAGsI,EAChClJ,KAAK2Y,iBAAiB/X,GAAGuI,GAAKvI,EAAGuI,EACjCnJ,KAAK4Y,SAASnY,aAAa,aAAa8F,SAASvG,KAAK2Y,kBASxD9Y,qBAAqBkB,IAQrBlB,cAAckB,IACc,UAAtBA,EAAM0Y,aAA4C,GAAhB1Y,EAAM2Y,SAAgB3Y,EAAM4Y,UAChE3Z,KAAKwZ,eAAiBzY,EAAM6Y,WAC5B5Z,KAAKuY,UAAW,EAEhBxX,EAAMI,mBAUVtB,cAAckB,GACZ,GAAIf,KAAKwZ,eAAgB,CACvB,MAAM1V,EAAQ9D,KAAKwZ,eAAevW,SAASlC,EAAM6Y,YACpC9V,EAAMgB,SAGR,IACT9E,KAAKuY,UAAW,EAEhBvY,KAAK4Y,SAASnY,aAAa,WAAW8F,UAAS,GAC/CvG,KAAK6Z,aAAa9Y,EAAMM,SAAUyC,IAEpC/C,EAAMI,mBAUVtB,YAAYkB,GACV,GAAIf,KAAKwZ,eAAgB,CAEvB,GAAIxZ,KAAKuY,SAAU,CACjBvY,KAAK4Y,SAASnY,aAAa,WAAW8F,UAAS,GAC/C,MAAMuT,EAAe/Y,EAAM6Y,WACrBG,EAAK,IAAIX,OACbpN,KAAKgO,IAAIha,KAAKwZ,eAAetQ,EAAG4Q,EAAa5Q,GAC7C8C,KAAKgO,IAAIha,KAAKwZ,eAAerQ,EAAG2Q,EAAa3Q,IAEzC8Q,EAAK,IAAIb,OACbpN,KAAKkO,IAAIla,KAAKwZ,eAAetQ,EAAG4Q,EAAa5Q,GAC7C8C,KAAKkO,IAAIla,KAAKwZ,eAAerQ,EAAG2Q,EAAa3Q,IAG/C,IAAIgR,EAAYpZ,EAAMM,SAAS+Y,mBAAmBL,EAAIE,GAEtD,GAAIja,KAAKmZ,oBAAqB,CAC5B,MAAMkB,EAAS,GACf,IAAK,IAAIzR,EAAI,EAAGA,EAAIuR,EAAUrV,OAAQ8D,IAAK,CACzC,MAAM0K,EAAWtT,KAAKmZ,oBAAoBgB,EAAUvR,IAC/CyR,EAAOC,SAAShH,IACnB+G,EAAO3V,KAAK4O,GAGhB6G,EAAYE,EAGd,IAAKra,KAAK8S,iBAAkB,KAAM,0EAClC,GAAI9S,KAAK8S,iBAAiByH,oBACxBva,KAAK8S,iBAAiB0H,KAAKL,OACtB,CAEL,MAAMM,EAAmB,IAAIlH,IAAI,IAAI4G,GAAWxD,QAAQzN,KAAQA,EAAEuO,qBAAsB9X,MAEnFoB,EAAM+K,SAGT9L,KAAK8S,iBAAiB4H,cAAcD,GAFpCza,KAAK8S,iBAAiB6H,YAAYF,GAAmB1Z,EAAM6Z,SAK7D5a,KAAK2Y,iBAAiB7N,GAAG7B,IAAI,EAAG,EAAG,GACnCjJ,KAAK4Y,SAASnY,aAAa,aAAa8F,SAASvG,KAAK2Y,uBAEnD,CACL,MAAMkC,EAAmB9Z,EAAMM,SAASyZ,iBAAiB/Z,EAAM6Y,YAC/D,GAAwBtW,MAApBuX,GAAmCA,EAAiBE,SAAStD,qBAAsB9X,EAgBrFK,KAAK8S,iBAAiBkI,qBAhBwE,CAC9F,IAAI1H,EAAWuH,EAAiBE,SAGhC,GAFI/a,KAAKmZ,sBAAqB7F,EAAWtT,KAAKmZ,oBAAoB7F,IAE9DtT,KAAK8S,iBAAiByH,oBACxBva,KAAK8S,iBAAiB0H,KAAKlH,QAE3B,GAAKvS,EAAM+K,SAEJ,CACL,MAAMiM,EAAQ,IAAIxE,IAClBwE,EAAMhU,IAAIuP,GACVtT,KAAK8S,iBAAiB4H,cAAc3C,QAJpC/X,KAAK8S,iBAAiBmI,oBAAoB3H,GAAWvS,EAAM6Z,UAWnE5a,KAAKwZ,oBAAiBlW,EACtBvC,EAAMI,mBAaVtB,yBAAyBkB,GACvB,GAAoB,GAAhBA,EAAM2Y,OAAa,CACrB,IAAK1Z,KAAK8S,iBAAkB,KAAM,0EAClC,MAAM+H,EAAmB9Z,EAAM8B,WAAWqY,mBAClB5X,MAApBuX,GAAmCA,EAAiBE,SAAStD,qBAAsB9X,IACrFK,KAAK8S,iBAAiBmI,oBAAoBJ,EAAiBE,UAC3Dha,EAAMI,qBC9Od,MAAMga,EAoWN,WACE,MAAO,CACLC,OAoLF,SAAgBC,GACd,OAAOA,EAAOC,QAAQ,2BAA4B,SApLlDC,eAAgBA,EAChBC,SA2CF,SAAkBC,GAChB,MAAMC,EAAYH,EAAeE,GAAKE,cACtC,OA9BF,WAKE,MAAMC,EAAO,wBACPC,EAAO,aAEb,MAAO,CACLC,KAAMF,EACNG,MAAOH,EACPI,IAAK,4BACLC,IAAK,gCACLC,IAAK,YACLC,IAAKN,EACLO,KAAMP,EACNQ,IAAK,YACLC,KAAM,aACNC,IAAK,iBAYAC,GAAQd,IAAc,IA5C7Be,UA6KF,SAAmBC,EAAStF,GAC1B,MAAO,QAAUA,EAAO,WAAasF,GA7KrCC,UA8CF,SAAmBlB,GACjB,OAAmC,IAA5BA,EAAImB,OAAO,aA9ClBC,aAiEF,SAAsBC,GACpB,OAAIA,EAAOC,OACF,IAAIC,SAAQ,SAAUC,GAC3BH,EAAOC,OAAOE,MAnBpB,SAAgBH,GACd,OAAO,IAAIE,SAAQ,SAAUC,GAC3B,MAAMC,EAAeC,OAAOC,KAAKN,EAAOO,YAAYC,MAAM,KAAK,IACzDxY,EAASoY,EAAapY,OACtByY,EAAc,IAAIC,WAAW1Y,GAEnC,IAAK,IAAI8D,EAAI,EAAGA,EAAI9D,EAAQ8D,IAAK2U,EAAY3U,GAAKsU,EAAaO,WAAW7U,GAE1EqU,EACE,IAAIS,KAAK,CAACH,GAAc,CACtBnG,KAAM,kBAYL2F,CAAOD,IAtEda,WAyEF,SAAoBlC,EAAKmC,GACvB,MAAMC,EAAMC,SAASC,eAAeC,qBAC9BC,EAAOJ,EAAIK,cAAc,QAC/BL,EAAIM,KAAKC,YAAYH,GACrB,MAAM1V,EAAIsV,EAAIK,cAAc,KAI5B,OAHAL,EAAIQ,KAAKD,YAAY7V,GACrB0V,EAAKK,KAAOV,EACZrV,EAAE+V,KAAO7C,EACFlT,EAAE+V,MAhFTC,aA2GF,SAAsB9C,GACpB,MAAM+C,EAAU,IACZC,EAAWC,KAAKrN,QAAQsN,YAG1BlD,IAAQ,KAAKmD,KAAKnD,GAAO,IAAM,MAAO,IAAIoD,MAAOC,WAGnD,OAAO,IAAI9B,SAAQ,SAAUC,GAC3B,MAAM8B,EAAU,IAAIC,eASpB,IAAIC,EACJ,GARAF,EAAQG,mBAAqBC,EAC7BJ,EAAQK,UAAYC,EACpBN,EAAQO,aAAe,OACvBP,EAAQM,QAAUb,EAClBO,EAAQQ,KAAK,MAAO9D,GAAK,GACzBsD,EAAQS,OAGJf,EAAWC,KAAKrN,QAAQoO,iBAAkB,CAC5C,MAAMnC,EAAQmB,EAAWC,KAAKrN,QAAQoO,iBAAiBnC,MAAM,KACzDA,GAASA,EAAM,KACjB2B,EAAc3B,EAAM,IAIxB,SAAS6B,IACP,GAA2B,IAAvBJ,EAAQW,WAAkB,OAE9B,GAAuB,MAAnBX,EAAQY,OAOV,YANIV,EACFhC,EAAQgC,GAERW,EAAK,0BAA4BnE,EAAM,aAAesD,EAAQY,SAMlE,MAAME,EAAU,IAAIC,WACpBD,EAAQE,UAAY,WAClB,MAAMrD,EAAUmD,EAAQ3P,OAAOoN,MAAM,KAAK,GAC1CL,EAAQP,IAEVmD,EAAQG,cAAcjB,EAAQkB,UAGhC,SAASZ,IACHJ,EACFhC,EAAQgC,GAERW,EAAK,cAAgBpB,EAAU,uCAAyC/C,GAI5E,SAASmE,EAAKM,GACZ3c,QAAQ+U,MAAM4H,GACdjD,EAAQ,SAnKZkD,IAkFF,WACE,IAAIhO,EAAQ,EAEZ,OAAO,WACL,MAAO,IAAMiO,IAAoBjO,IAEjC,SAASiO,IAEP,OAAQ,QAAWpU,KAAKqU,SAAWrU,KAAKsU,IAAI,GAAI,IAAO,GAAGC,SAAS,KAAKC,OAAO,KA1F9EL,GACLM,MA+KF,SAAeC,GACb,OAAO,SAAUC,GACf,OAAO,IAAI3D,SAAQ,SAAUC,GAC3B2D,YAAW,WACT3D,EAAQ0D,KACPD,QAnLPG,QAwLF,SAAiBC,GACf,MAAMC,EAAQ,GACRjc,EAASgc,EAAUhc,OACzB,IAAK,IAAI8D,EAAI,EAAGA,EAAI9D,EAAQ8D,IAAKmY,EAAMrc,KAAKoc,EAAUlY,IACtD,OAAOmY,GA3LPC,YA8LF,SAAqB3F,GACnB,OAAOA,EAAOC,QAAQ,KAAM,OAAOA,QAAQ,MAAO,QA9LlD2F,UA2FF,SAAmBC,GACjB,OAAO,IAAIlE,SAAQ,SAAUC,EAASkE,GACpC,MAAMC,EAAQ,IAAIC,MAClBD,EAAME,OAAS,WACbrE,EAAQmE,IAEVA,EAAMG,QAAUJ,EAChBC,EAAMI,IAAMN,MAjGdO,MAgMF,SAAeC,GACb,MAAMC,EAAaC,EAAGF,EAAM,qBACtBG,EAAcD,EAAGF,EAAM,sBAC7B,OAAOA,EAAKI,YAAcH,EAAaE,GAlMvCE,OAqMF,SAAgBL,GACd,MAAMM,EAAYJ,EAAGF,EAAM,oBACrBO,EAAeL,EAAGF,EAAM,uBAC9B,OAAOA,EAAKQ,aAAeF,EAAYC,IA/KzC,SAAS1G,EAAeE,GACtB,MAAM0G,EAAQ,kBAAkBC,KAAK3G,GACrC,OAAI0G,EAAcA,EAAM,GACZ,GA+Kd,SAASP,EAAGF,EAAMW,GAChB,MAAMxe,EAAQsZ,OAAOmF,iBAAiBZ,GAAMa,iBAAiBF,GAC7D,OAAOG,WAAW3e,EAAMyX,QAAQ,KAAM,MAjkB7BmH,GACPC,EAokBN,WACE,MAAMC,EAAY,8BAElB,MAAO,CACLC,UAyCF,SAAmBvH,EAAQuC,EAASiF,GAClC,OAAIC,IAA0B9F,QAAQC,QAAQ5B,GAEvC2B,QAAQC,QAAQ5B,GACpB0H,KAAKC,GACLD,MAAK,SAAUE,GACd,IAAI9D,EAAOnC,QAAQC,QAAQ5B,GAM3B,OALA4H,EAAKvc,SAAQ,SAAU+U,GACrB0D,EAAOA,EAAK4D,MAAK,SAAU1H,GACzB,OAAO6H,EAAO7H,EAAQI,EAAKmC,EAASiF,SAGjC1D,KAGX,SAAS2D,IACP,OAAQK,EAAc9H,KAxDxB8H,cAAeA,EACfzE,KAAM,CACJsE,SAAUA,EACVE,OAAQA,IAIZ,SAASC,EAAc9H,GACrB,OAAqC,IAA9BA,EAAOuB,OAAO+F,GAGvB,SAASK,EAAS3H,GAChB,MAAMnL,EAAS,GACf,IAAIiS,EACJ,KAA4C,QAApCA,EAAQQ,EAAUP,KAAK/G,KAC7BnL,EAAOxL,KAAKyd,EAAM,IAEpB,OAAOjS,EAAOyG,QAAO,SAAU8E,GAC7B,OAAQN,EAAKwB,UAAUlB,MAI3B,SAASyH,EAAO7H,EAAQI,EAAKmC,EAASiF,GACpC,OAAO7F,QAAQC,QAAQxB,GACpBsH,MAAK,SAAUtH,GACd,OAAOmC,EAAUzC,EAAKwC,WAAWlC,EAAKmC,GAAWnC,KAElDsH,KAAKF,GAAO1H,EAAKoD,cACjBwE,MAAK,SAAUK,GACd,OAAOjI,EAAKsB,UAAU2G,EAAMjI,EAAKK,SAASC,OAE3CsH,MAAK,SAAUM,GACd,OAAOhI,EAAOC,QAGlB,SAAoBG,GAClB,OAAO,IAAI6H,OAAO,kBAAoBnI,EAAKC,OAAOK,GAAO,eAAgB,KAJjD8H,CAAW9H,GAAM,KAAO4H,EAAU,UAzmBhDG,GACVC,EAqoBN,WACE,MAAO,CACLC,WAMF,WACE,OAAOC,IACJZ,MAAK,SAAUa,GACd,OAAO5G,QAAQ6G,IACbD,EAASE,KAAI,SAAUC,GACrB,OAAOA,EAAQ9G,iBAIpB8F,MAAK,SAAUiB,GACd,OAAOA,EAAWC,KAAK,UAf3BvF,KAAM,CACJiF,QAASA,IAkBb,SAASA,IACP,OAAO3G,QAAQC,QAAQ9B,EAAK0F,QAAQ/C,SAASoG,cAC1CnB,MAgBH,SAAqBmB,GACnB,MAAMC,EAAW,GAQjB,OAPAD,EAAYxd,SAAQ,SAAU0d,GAC5B,IACEjJ,EAAK0F,QAAQuD,EAAMD,UAAY,IAAIzd,QAAQyd,EAASzf,KAAKJ,KAAK6f,IAC9D,MAAO5e,GACPhC,QAAQ6S,IAAI,sCAAwCgO,EAAM9F,KAAM/Y,EAAEgb,gBAG/D4D,KAxBNpB,MAKH,SAA4BoB,GAC1B,OAAOA,EACJxN,QAAO,SAAU0N,GAChB,OAAOA,EAAKjN,OAASkN,QAAQC,kBAE9B5N,QAAO,SAAU0N,GAChB,OAAO3B,EAAQS,cAAckB,EAAKrL,MAAMuJ,iBAAiB,cAV5DQ,MAAK,SAAUyB,GACd,OAAOA,EAAMV,IAAIW,MAyBrB,SAASA,EAAWC,GAClB,MAAO,CACLzH,QAAS,WACP,MAAMW,GAAW8G,EAAYC,kBAAoB,IAAIrG,KACrD,OAAOoE,EAAQE,UAAU8B,EAAYE,QAAShH,IAEhD4D,IAAK,WACH,OAAOkD,EAAY1L,MAAMuJ,iBAAiB,WAhsBlCsC,GACZC,EAssBN,WACE,MAAO,CACLlC,UA6BF,SAASA,EAAUlB,GACjB,OAAMA,aAAgBqD,QAEfC,EAAiBtD,GAAMqB,MAAK,WACjC,OAAIrB,aAAgBuD,iBAAyBC,EAASxD,GAAMwB,SAEnDlG,QAAQ6G,IACb1I,EAAK0F,QAAQa,EAAKyD,YAAYrB,KAAI,SAAUsB,GAC1C,OAAOxC,EAAUwC,UAPcpI,QAAQC,QAAQyE,GAYvD,SAASsD,EAAiBtD,GACxB,MAAM2D,EAAa3D,EAAK1I,MAAMuJ,iBAAiB,cAE/C,OAAK8C,EAEE3C,EACJE,UAAUyC,GACVtC,MAAK,SAAUuC,GACd5D,EAAK1I,MAAMuM,YAAY,aAAcD,EAAS5D,EAAK1I,MAAMwM,oBAAoB,kBAE9EzC,MAAK,WACJ,OAAOrB,KARa1E,QAAQC,QAAQyE,KA5C1ChD,KAAM,CACJwG,SAAUA,IAId,SAASA,EAASO,GAChB,MAAO,CACLvC,OAGF,SAAgBL,GACd,OAAI1H,EAAKwB,UAAU8I,EAAQjE,KAAaxE,QAAQC,UAEzCD,QAAQC,QAAQwI,EAAQjE,KAC5BuB,KAAKF,GAAO1H,EAAKoD,cACjBwE,MAAK,SAAUK,GACd,OAAOjI,EAAKsB,UAAU2G,EAAMjI,EAAKK,SAASiK,EAAQjE,SAEnDuB,MAAK,SAAUM,GACd,OAAO,IAAIrG,SAAQ,SAAUC,EAASkE,GACpCsE,EAAQnE,OAASrE,EACjBwI,EAAQlE,QAAUJ,EAClBsE,EAAQjE,IAAM6B,WA/tBXqC,GAGTC,EAAiB,CAErBlG,sBAAkBnc,EAElBqb,WAAW,GAGPF,EAAa,CACjBmH,MAAOA,EACPC,MA2FF,SAAenE,EAAMrQ,GACnB,OAAOyU,EAAKpE,EAAMrQ,GAAW,IAAI0R,MAAK,SAAUjG,GAC9C,OAAOA,EAAOO,gBA5FhB0I,OAqGF,SAAgBrE,EAAMrQ,GAEpB,OAAOyU,EAAKpE,EADZrQ,EAAUA,GAAW,IACM0R,MAAK,SAAUjG,GACxC,OAAOA,EAAOO,UAAU,aAAchM,EAAQ2U,SAAW,OAvG3DjJ,OAgHF,SAAgB2E,EAAMrQ,GACpB,OAAOyU,EAAKpE,EAAMrQ,GAAW,IAAI0R,KAAK5H,EAAK0B,eAhH3CoJ,YAkEF,SAAqBvE,EAAMrQ,GACzB,OAAOyU,EAAKpE,EAAMrQ,GAAW,IAAI0R,MAAK,SAAUjG,GAC9C,OAAOA,EAAOoJ,WAAW,MAAMC,aAAa,EAAG,EAAGhL,EAAKsG,MAAMC,GAAOvG,EAAK4G,OAAOL,IAAO0B,SAnEzFgD,SA4EF,SAAkB1E,EAAMrQ,GACtB,OAAOyU,EAAKpE,EAAMrQ,GAAW,IAAI0R,MAAK,SAAUjG,GAC9C,OAAOA,MA7ET4B,KAAM,CACJ+E,UAAWA,EACXqB,OAAQA,EACR3J,KAAMA,EACNuH,QAASA,EACTrR,QAAS,KAmBb,SAASuU,EAAMlE,EAAMrQ,GAGnB,OA2FF,SAAqBA,QAEqB,IAA7BA,EAAQoO,iBACjBhB,EAAWC,KAAKrN,QAAQoO,iBAAmBkG,EAAelG,iBAE1DhB,EAAWC,KAAKrN,QAAQoO,iBAAmBpO,EAAQoO,sBAGpB,IAAtBpO,EAAQsN,UACjBF,EAAWC,KAAKrN,QAAQsN,UAAYgH,EAAehH,UAEnDF,EAAWC,KAAKrN,QAAQsN,UAAYtN,EAAQsN,UAvG9C0H,CADAhV,EAAUA,GAAW,IAEd2L,QAAQC,QAAQyE,GACpBqB,MAAK,SAAUrB,GACd,OAAO4E,EAAU5E,EAAMrQ,EAAQsF,QAAQ,MAExCoM,KAAKwD,GACLxD,KAAKyD,GACLzD,MAWH,SAAsBhgB,GAChBsO,EAAQoV,UAAS1jB,EAAMiW,MAAM0N,gBAAkBrV,EAAQoV,SAEvDpV,EAAQoQ,QAAO1e,EAAMiW,MAAMyI,MAAQpQ,EAAQoQ,MAAQ,MACnDpQ,EAAQ0Q,SAAQhf,EAAMiW,MAAM+I,OAAS1Q,EAAQ0Q,OAAS,MAEtD1Q,EAAQ2H,OACV2N,OAAOC,KAAKvV,EAAQ2H,OAAOtS,SAAQ,SAAUmgB,GAC3C9jB,EAAMiW,MAAM6N,GAAYxV,EAAQ2H,MAAM6N,MAG1C,OAAO9jB,KArBNggB,MAAK,SAAUhgB,GACd,OAmRN,SAAwB2e,EAAMD,EAAOM,GACnC,OAAO/E,QAAQC,QAAQyE,GACpBqB,MAAK,SAAUrB,GAEd,OADAA,EAAKoF,aAAa,QAAS,iCACpB,IAAIC,eAAgBC,kBAAkBtF,MAE9CqB,KAAK5H,EAAK6F,aACV+B,MAAK,SAAUkE,GACd,MAAO,yDAA2DA,EAAQ,sBAE3ElE,MAAK,SAAUmE,GACd,MACE,kDACAzF,EACA,aACAM,EACA,KACAmF,EACA,YAGHnE,MAAK,SAAUxG,GACd,MAAO,oCAAsCA,KAzStC4K,CAAepkB,EAAOsO,EAAQoQ,OAAStG,EAAKsG,MAAMC,GAAOrQ,EAAQ0Q,QAAU5G,EAAK4G,OAAOL,OAwGpG,SAASoE,EAAKsB,EAAS/V,GACrB,OAAOuU,EAAMwB,EAAS/V,GACnB0R,KAAK5H,EAAK8F,WACV8B,KAAK5H,EAAKsF,MAAM,MAChBsC,MAAK,SAAU3B,GACd,MAAMtE,EAWV,SAAmBsK,GACjB,MAAMtK,EAASgB,SAASI,cAAc,UAItC,GAHApB,EAAO2E,MAAQpQ,EAAQoQ,OAAStG,EAAKsG,MAAM2F,GAC3CtK,EAAOiF,OAAS1Q,EAAQ0Q,QAAU5G,EAAK4G,OAAOqF,GAE1C/V,EAAQoV,QAAS,CACnB,MAAMY,EAAMvK,EAAOoJ,WAAW,MAC9BmB,EAAIC,UAAYjW,EAAQoV,QACxBY,EAAIE,SAAS,EAAG,EAAGzK,EAAO2E,MAAO3E,EAAOiF,QAG1C,OAAOjF,EAtBU0K,CAAUJ,GAEzB,OADAtK,EAAOoJ,WAAW,MAAMuB,UAAUrG,EAAO,EAAG,GACrCtE,KAwBb,SAASwJ,EAAU5E,EAAM/K,EAAQ+Q,GAC/B,OAAKA,IAAQ/Q,GAAWA,EAAO+K,GAExB1E,QAAQC,QAAQyE,GACpBqB,MAQH,SAAsBrB,GACpB,OAAIA,aAAgBiG,kBAA0BxM,EAAK8F,UAAUS,EAAKrE,aAC3DqE,EAAK4E,WAAU,MATrBvD,MAAK,SAAUhgB,GACd,OAWJ,SAAuB6kB,EAAU7kB,EAAO4T,GACtC,MAAMkR,EAAWD,EAASzC,WAC1B,OAAwB,IAApB0C,EAAS/iB,OAAqBkY,QAAQC,QAAQla,GAE3C+kB,EAAqB/kB,EAAOoY,EAAK0F,QAAQgH,GAAWlR,GAAQoM,MAAK,WACtE,OAAOhgB,KAGT,SAAS+kB,EAAqBC,EAAQF,EAAUlR,GAC9C,IAAIwI,EAAOnC,QAAQC,UAUnB,OATA4K,EAASnhB,SAAQ,SAAU0e,GACzBjG,EAAOA,EACJ4D,MAAK,WACJ,OAAOuD,EAAUlB,EAAOzO,MAEzBoM,MAAK,SAAUiF,GACVA,GAAYD,EAAO3J,YAAY4J,SAGlC7I,GA9BA8I,CAAcvG,EAAM3e,EAAO4T,MAEnCoM,MAAK,SAAUhgB,GACd,OA+BJ,SAAsB6kB,EAAU7kB,GAC9B,OAAMA,aAAiBgiB,QAEhB/H,QAAQC,UACZ8F,KAAKmF,GACLnF,KAAKoF,GACLpF,KAAKqF,GACLrF,KAAKsF,GACLtF,MAAK,WACJ,OAAOhgB,KAR6BA,EAWxC,SAASmlB,IAGP,SAASI,EAAUC,EAAQC,GAIzB,SAASC,EAAeF,EAAQC,GAC9BrN,EAAK0F,QAAQ0H,GAAQ7hB,SAAQ,SAAU5G,GACrC0oB,EAAOjD,YAAYzlB,EAAMyoB,EAAOhG,iBAAiBziB,GAAOyoB,EAAO/C,oBAAoB1lB,OALnFyoB,EAAO3D,QAAS4D,EAAO5D,QAAU2D,EAAO3D,QACvC6D,EAAeF,EAAQC,GAJ9BF,EAAUnL,OAAOmF,iBAAiBsF,GAAW7kB,EAAMiW,OAcrD,SAASmP,IAKP,SAASO,EAAmBjD,GAC1B,MAAMzM,EAAQmE,OAAOmF,iBAAiBsF,EAAUnC,GAC1C/I,EAAU1D,EAAMuJ,iBAAiB,WAEvC,GAAgB,KAAZ7F,GAA8B,SAAZA,EAAoB,OAE1C,MAAMxX,EAAYiW,EAAKgF,MACvBpd,EAAMmC,UAAYnC,EAAMmC,UAAY,IAAMA,EAC1C,MAAMyjB,EAAe7K,SAASI,cAAc,SAI5C,SAAS0K,EAAyB1jB,EAAWugB,EAASzM,GACpD,MAAM6P,EAAW,IAAM3jB,EAAY,IAAMugB,EACnCb,EAAU5L,EAAM4L,QAAUkE,EAAc9P,GAAS+P,EAAoB/P,GAC3E,OAAO8E,SAASkL,eAAeH,EAAW,IAAMjE,EAAU,KAE1D,SAASkE,EAAc9P,GACrB,MAAM0D,EAAU1D,EAAMuJ,iBAAiB,WACvC,OAAOvJ,EAAM4L,QAAU,aAAelI,EAAU,IAGlD,SAASqM,EAAoB/P,GAC3B,OAAOmC,EAAK0F,QAAQ7H,GAAO8K,IAAImF,GAAgBhF,KAAK,MAAQ,IAE5D,SAASgF,EAAenpB,GACtB,OAAOA,EAAO,KAAOkZ,EAAMuJ,iBAAiBziB,IAASkZ,EAAMwM,oBAAoB1lB,GAAQ,cAAgB,MAjB7G6oB,EAAavK,YAAYwK,EAAyB1jB,EAAWugB,EAASzM,IACtEjW,EAAMqb,YAAYuK,GAdnB,CAAC,UAAW,UAAUjiB,SAAQ,SAAU+e,GACvCiD,EAAmBjD,MAoCvB,SAAS2C,IACHR,aAAoBsB,sBAAqBnmB,EAAMomB,UAAYvB,EAAS/jB,OACpE+jB,aAAoBwB,kBAAkBrmB,EAAM+jB,aAAa,QAASc,EAAS/jB,OAGjF,SAASwkB,IACDtlB,aAAiBsmB,aACvBtmB,EAAM+jB,aAAa,QAAS,8BAEtB/jB,aAAiBumB,gBACtB,CAAC,QAAS,UAAU5iB,SAAQ,SAAU6iB,GACrC,MAAM1lB,EAAQd,EAAMymB,aAAaD,GAC5B1lB,GAELd,EAAMiW,MAAMuM,YAAYgE,EAAW1lB,QA9G9B4lB,CAAa/H,EAAM3e,MAReia,QAAQC,UA4HvD,SAASsJ,EAAW7E,GAClB,OAAO+B,EAAUC,aAAaX,MAAK,SAAU6B,GAC3C,MAAM8E,EAAY5L,SAASI,cAAc,SAGzC,OAFAwD,EAAKtD,YAAYsL,GACjBA,EAAUtL,YAAYN,SAASkL,eAAepE,IACvClD,KAIX,SAAS8E,EAAa9E,GACpB,OAAOoD,EAAOlC,UAAUlB,GAAMqB,MAAK,WACjC,OAAOrB,KC7TX,SAASrU,EAASqU,EAAMiI,EAAOC,GAC7B,GAAKA,EAAKlI,EAAMiI,GAEhB,IADAjI,EAAOA,EAAKmI,WACLnI,GACLrU,EAASqU,EAAMiI,EAAQ,EAAGC,GAC1BlI,EAAOA,EAAKoI,YAqBhB,MAAMC,EAAM,2EAA2EjlB,OACjFklB,EAAkB,CAACC,EAAMjd,EAAMkd,EAAKC,KACxC1L,EAAWmH,MAAMqE,GAAMlH,MAAM7B,IAG3B,MAAMkJ,EAAOlJ,EAAImJ,UAAU,EAAGN,GAAO,iBAAiB/c,EAAKyU,SAASzU,EAAK+U,UAAYb,EAAImJ,UAAUN,GAC7F3I,EAAQ,IAAIC,MAClBD,EAAME,OAAS,WACb6I,EAAS/I,EAAO8I,IAGlB9I,EAAMI,IAAM4I,MAGVE,EAAQ,IAAIC,QAAM,EAAG,GAMZ,MAAMC,UAAuB5qB,WAM1CC,YAAYiH,EAAS2jB,GACnB1qB,MAAM,kBAENC,KAAK0qB,eAAc,GACnB1qB,KAAK8G,QAAUA,EACf9G,KAAK2qB,iBAAmBF,EACxBzqB,KAAK2qB,iBAAiB3R,MAAM4R,QAAU,OAQtC,MAAMC,EAAW,IAAIjrB,WAAS,UAC9BI,KAAKmK,SAAS0gB,GAAU,GACxB7qB,KAAK8qB,OAAQ,EAGb,MAAMC,EAAiB,IAAIC,gBAAgBC,IACzCF,EAAeG,aAEf,MAAMC,EAAW,IAAIjhB,MACfkhB,EAAM,KACZD,EAASrgB,GAAG7B,IAAImiB,EAAKA,EAAKA,GAC1BD,EAAStqB,IAAIuN,mBAAmB,IAAIC,cAAYrC,KAAKU,GAAIV,KAAKU,GAAI,IAGlEme,EAASpqB,aAAa,YAAY8F,SAAS4kB,GAE3CnrB,KAAKgN,KAAO,IAAIZ,OAAKqe,EAAeY,YAAcD,EAAKX,EAAea,aAAeF,EAAK,GAK1F/d,EAASod,EAAgB,GAAG,CAACR,EAAMN,KACjC,GAAsB,UAAlBM,EAAK/kB,UAAuB,CAC9B,MAAM8H,EA3EhB,SAAkBid,GAChB,MAAMsB,EAAgBtB,EAAKuB,mBAK3B,MAAO,CACL/J,MALe8J,EAAc1I,IAAI,SAAShf,OAChB0nB,EAAc1I,IAAI,eAAehf,MAAQ0nB,EAAc1I,IAAI,gBAAgBhf,OAKrGke,OAJgBwJ,EAAc1I,IAAI,UAAUhf,OACpB0nB,EAAc1I,IAAI,cAAchf,MAAQ0nB,EAAc1I,IAAI,iBAAiBhf,QAsEhF4nB,CAASxB,GAEhBkB,EAAW,IAAIjhB,MAErBihB,EAASrgB,GAAG7B,IAAI+D,EAAKyU,OAAQzU,EAAK+U,OAAQ,GAK1CoJ,EAASvqB,GAAGqI,IACVghB,EAAKyB,WAA0B,GAAb1e,EAAKyU,MAA2C,GAA7BgJ,EAAeY,YACpDpB,EAAK0B,UAA0B,GAAd3e,EAAK+U,OAA6C,GAA9B0I,EAAea,cACnD3B,GAGH,MAAMiC,EAAQ,IAAIniB,WAAS,oBAAqB,qBAChDmiB,EAAMnrB,aAAa,aAAa8F,SAAS,IAAIlG,QAAM,GAAK,GAAK,KAC7D,MAAM+gB,EAAQ,IAAIyK,YAClBD,EAAMnrB,aAAa,aAAa8F,SAAS6a,GAEzC,MAAMrG,EAAW,IAAIhR,WAAS,gBAAiBugB,EAAOsB,EAAOT,GAC7DpQ,EAAS2P,eAAc,GACvBG,EAAS1gB,SAAS4Q,GAAU,GAE5B,MAAM+Q,EAAa,GACf9e,EAAKyU,MAAQ,GAAKzU,EAAK+U,OAAS,GAClCiI,EAAgBC,EAAMjd,EAAMid,EAAK8B,GAAK9B,EAAK/kB,WAAW,CAACke,EAAM8G,KAE3D4B,EAAW5B,GAAO9G,EAClBhC,EAAM4K,QAAQhf,EAAKyU,MAAOzU,EAAK+U,OAAQqB,MAyB3C,OArByB,IAAI6I,kBAAkBC,IAC7C,GAAkB,GAAdlf,EAAKyU,OAA6B,GAAfzU,EAAK+U,OAAa,OAGzC,MAAMmI,EAAMD,EAAK8B,GAAK9B,EAAK/kB,UACtB4mB,EAAW5B,GAMd9I,EAAM4K,QAAQhf,EAAKyU,MAAOzU,EAAK+U,OAAQ+J,EAAW5B,IALlDF,EAAgBC,EAAMjd,EAAMkd,GAAK,CAAC9G,EAAM8G,KACtC4B,EAAW5B,GAAO9G,EAClBhC,EAAM4K,QAAQhf,EAAKyU,MAAOzU,EAAK+U,OAAQqB,SAO5B+I,QAAQlC,EAAM,CAC7BmC,YAAY,EACZC,eAAe,EACfC,WAAW,EACXC,SAAS,KAEJ,EAET,OAAO,KAGTvsB,KAAK8qB,OAAQ,EACb9qB,KAAKO,KAAK,YAEZwqB,EAAeoB,QAAQ1B,GASzB5qB,WACEG,KAAK2qB,iBAAiB3R,MAAM4R,QAAU,QAMxC/qB,aACEG,KAAK2qB,iBAAiB3R,MAAM4R,QAAU,OAUxC/qB,eAAe2sB,EAAWC,EAAMhH,GAG9B,MAAM1kB,EAAQ,IAAI2rB,WAChBF,EACA7F,OAAOgG,OACL,CACEnE,OAAQ/C,EACRmH,KAAMzP,OACN0P,SAAS,EAETC,YAAY,GAEdL,IAQJ,OAHAhH,EAAQsH,cAAchsB,GAGfA,GCzMX,MAAMisB,UAAiB3U,WAMrBxY,YAAYiH,EAAS2jB,GACnB1qB,MAAM+G,GACN9G,KAAK8G,QAAUA,EAEf9G,KAAK2qB,iBAAmBF,EACxBzqB,KAAKitB,aAAe,IAAIzC,EAAe1jB,EAAS9G,KAAK2qB,kBAKrD,MAAMuC,EAAa,IAAIzjB,WAAS,aAAc,eAC9CyjB,EAAWxC,eAAc,GACzBwC,EAAWzsB,aAAa,aAAa8F,SAAS,IAAIlG,QAAM,IAAK,EAAG,IAEhE,MAAM8sB,EAAO,IAAIC,QACjBD,EAAKE,eAAe,GACpBF,EAAKG,eAAe,GACpBH,EAAKI,wBAAwB,EAAG,EAAG,GACnC,MAAM7kB,EAAYykB,EAAKxkB,mBAAmB,aAC1CD,EAAUI,YAAY,GAAGG,IAAI,EAAK,EAAK,GACvCP,EAAUI,YAAY,GAAGG,IAAI,EAAK,GAAM,GACxCkkB,EAAKK,sBACLxtB,KAAKytB,kBAAoB,IAAIvjB,MAC7BlK,KAAKytB,kBAAkB3iB,GAAG7B,IAAI,EAAG,EAAG,IACpCjJ,KAAKytB,kBAAkB5sB,IAAIsL,oBAAoB,IAAIC,OAAK,EAAG,EAAG,IAAe,GAAXJ,KAAKU,IAEvE1M,KAAK0tB,gBAAkB,IAAI3jB,WAAS,sBAAuBojB,EAAMD,GACjEltB,KAAK0tB,gBAAgBhD,eAAc,GAEnC1qB,KAAK2tB,eAAgB,EACrB3tB,KAAK4tB,QAAS,EAEd5tB,KAAK8G,QAAQuN,SAASwZ,gBAAgB9K,MAAM+K,IAC1CA,EAAKnpB,GAAG,qBAAsB5D,IACxBf,KAAK4tB,SAAW7sB,EAAM8S,OAAO7T,KAAK+tB,gBAU5CluB,UACE,MAAO,WAOTA,eACEE,MAAM8Y,eAMRhZ,iBACMG,KAAK4tB,QAAQ5tB,KAAK+tB,UACtBhuB,MAAMmZ,iBASRrZ,UAAUmuB,EAAcC,EAAmBC,GACzCluB,KAAKitB,aAAakB,WAClBnuB,KAAKguB,aAAeA,EACpBhuB,KAAKiuB,kBAAoBA,EAEzB,MAAMG,EAAapuB,KAAKitB,aAAaxsB,aAAa,YAAYC,WAI9D,GAHA0tB,EAAWvtB,IAAIsL,oBAAoB,IAAIC,OAAK,EAAG,EAAG,IAAe,GAAXJ,KAAKU,IAGvD1M,KAAKiuB,kBAAmB,CAC1B,MAAMI,EAAOruB,KAAKguB,aAAaM,cAAc7tB,aAAa,aAAaC,WACjE6tB,EAAOvuB,KAAKiuB,kBAAkBK,cAAc7tB,aAAa,aAAaC,WACtE8tB,EAAcH,EAAKztB,GAAGqC,SAASirB,EAAQttB,IACvC6tB,EAAcF,EAAK3tB,GAAGqC,SAASirB,EAAQttB,IACzC4tB,EAAY9iB,MAAM+iB,GAAaprB,IAAI6qB,EAAQrtB,IAAI6tB,YAAc,EAC/DN,EAAWxtB,GAAGqI,IAAI,KAAO,IAAM,KAE/BmlB,EAAWxtB,GAAGqI,KAAK,KAAO,IAAM,UAGlCmlB,EAAWxtB,GAAGqI,IAAI,GAAI,IAAM,KAK9B,GAFAjJ,KAAKitB,aAAaxsB,aAAa,YAAY8F,SAAS6nB,GAEhDpuB,KAAKguB,eACPhuB,KAAKguB,aAAaW,aAAaxkB,SAASnK,KAAKitB,cAAc,GACvDjtB,KAAKiuB,mBAAmBjuB,KAAKiuB,kBAAkBU,aAAaxkB,SAASnK,KAAK0tB,iBAAiB,GAE3F1tB,KAAK8G,QAAQ8nB,SAAS,CACxB,MAAMC,EAAc,KAClB7uB,KAAK8G,QAAQ8nB,QAAQE,IAAI,eAAgB,CACvCC,cAAe,KACfC,YAAa,CACXC,aAAcjvB,KAAKguB,aAAa1b,QAChC6Y,SAAUiD,EAAWvnB,SACrBmG,KAAMhN,KAAKitB,aAAajgB,KAAKnG,aAI9B7G,KAAKitB,aAAanC,MAGrB+D,IAFA7uB,KAAKitB,aAAatoB,GAAG,QAASkqB,GAMpC7uB,KAAK4tB,QAAS,EAMhB/tB,UACEG,KAAKitB,aAAaiC,aAEdlvB,KAAKguB,eACPhuB,KAAKguB,aAAaW,aAAaQ,oBAAoBnvB,KAAKitB,cACpDjtB,KAAKiuB,mBACPjuB,KAAKiuB,kBAAkBU,aAAaQ,oBAAoBnvB,KAAK0tB,iBAG3D1tB,KAAK8G,QAAQ8nB,SACf5uB,KAAK8G,QAAQ8nB,QAAQE,IAAI,eAAgB,CACvCC,cAAe,KACfK,iBAAkB,CAChBH,aAAcjvB,KAAKguB,aAAa1b,YAKxCtS,KAAK4tB,QAAS,EAUhB/tB,iBAAiBiF,GACf9E,KAAKytB,kBAAkB3iB,GAAG7B,IAAI,EAAG,EAAGnE,GACpC9E,KAAK0tB,gBAAgBjtB,aAAa,YAAY8F,SAASvG,KAAKytB,mBAQ9D5tB,qBACE,MAAMwvB,EAAarvB,KAAK0tB,gBAAgBjtB,aAAa,aAAaC,WAC5D4uB,EAAaD,EAAWxuB,IAAIC,WAAWyuB,SACvCttB,EAAM,IAAItB,MAAI0uB,EAAWzuB,GAAI0uB,GAE7BE,EAAWxvB,KAAKitB,aAAaxsB,aAAa,aAAaC,WACvD+uB,EAAYzvB,KAAKitB,aAAajgB,KAAK7B,SAASqkB,EAAS1kB,IAErDwf,EAAQ,IAAI3pB,MAAI6uB,EAAS5uB,GAAI4uB,EAAS3uB,IAAIC,WAAWyuB,UACrDG,EAAMztB,EAAIG,kBAAkBkoB,GAClC,GAAIoF,GAAO,EAGT,YADA1vB,KAAK2vB,iBAAiB,IAGxB,MAAMC,EAAYP,EAAWzuB,GAAGmD,IAAIurB,EAAWlsB,MAAMssB,IAAMzsB,SAASqnB,EAAMpnB,OACpEgG,EAAI0mB,EAAUvsB,IAAImsB,EAAS3uB,IAAIgvB,YAAcJ,EAAUvmB,EACvDC,EAAIymB,EAAUvsB,IAAImsB,EAAS3uB,IAAI6tB,YAAce,EAAUtmB,EAC7D,GAAI6C,KAAKuN,IAAIrQ,GAAK,IAAO8C,KAAKuN,IAAIpQ,GAAK,GAGrC,YADAnJ,KAAK2vB,iBAAiB,IAGxB3vB,KAAK2vB,iBAAiBD,EAAMF,EAAS1kB,GAAG1B,GACxC,MAAM0mB,EAAO9vB,KAAK2qB,iBAAiBoF,wBACnC,MAAO,CACLC,QAAShkB,KAAKikB,MAAM/mB,GAAK4mB,EAAKrO,MAAQqO,EAAKrO,MAAQ,GACnDyO,QAASlkB,KAAKikB,MAAM9mB,GAAK2mB,EAAK/N,OAAS+N,EAAK/N,OAAS,IAUzDliB,cAAc2sB,EAAWC,GACvB,MAAM0D,EAAMnwB,KAAKowB,qBACjB,GAAID,EAAK,CACPA,EAAIE,QAAUF,EAAIG,MAAQH,EAAIG,MAAQH,EAAII,QAAUJ,EAAIH,QACxDG,EAAIK,QAAUL,EAAIM,MAAQN,EAAIM,MAAQN,EAAIO,QAAUP,EAAID,QAExD,IAAIzK,EAAU3H,SAAS6S,iBAAiBR,EAAIH,QAASG,EAAID,SAYzD,OAXIzK,GACEA,EAAQmL,aAAYnL,EAAUA,EAAQmL,WAAWD,iBAAiBR,EAAIH,QAASG,EAAID,UACnFzK,GAAWzlB,KAAK6wB,WACd7wB,KAAK6wB,UAAU7wB,KAAKitB,aAAa6D,eAAe,aAAcnK,OAAOgG,OAAOF,EAAM0D,GAAMnwB,KAAK6wB,UACjG7wB,KAAK6wB,SAAWpL,EAChBzlB,KAAKitB,aAAa6D,eAAe,aAAcnK,OAAOgG,OAAOF,EAAM0D,GAAMnwB,KAAK6wB,WAEhF7wB,KAAKitB,aAAa6D,eAAetE,EAAW7F,OAAOgG,OAAOF,EAAM0D,GAAMnwB,KAAK6wB,WAE3E7wB,KAAK6wB,SAAW,KAEX7wB,KAAK6wB,SACH7wB,KAAK6wB,WACd7wB,KAAKitB,aAAa6D,eAAe,aAAcnK,OAAOgG,OAAOF,EAAM0D,GAAMnwB,KAAK6wB,UAC9E7wB,KAAK6wB,SAAW,MAQpBhxB,cAAckB,GACZ,GAAIA,EAAM0Y,cAAgBsX,gBAAcC,IAClCjwB,EAAM8B,YAAc7C,KAAKiuB,mBAAqBjuB,KAAK4tB,OAAQ,CAC7D5tB,KAAK2tB,eAAgB,EACrB,MAAMnF,EAASxoB,KAAKixB,cAAc,YAAa,CAC7CvX,OAAQ3Y,EAAM2Y,OAAS,IAGvB1Z,KAAKkxB,kBADH1I,GAGuB,KAG3BznB,EAAMI,mBASZtB,YAAYkB,GACV,GAAIA,EAAM0Y,cAAgBsX,gBAAcC,IAClCjwB,EAAM8B,YAAc7C,KAAKiuB,mBAAqBjuB,KAAK4tB,OAAQ,CAC7D5tB,KAAK2tB,eAAgB,EACrB,MAAMnF,EAASxoB,KAAKixB,cAAc,UAAW,CAC3CvX,OAAQ3Y,EAAM2Y,OAAS,IAErB8O,GAAUxoB,KAAKkxB,mBAAqB1I,GACtCxoB,KAAKixB,cAAc,UAAW,CAC5BvX,OAAQ3Y,EAAM2Y,OAAS,IAG3B1Z,KAAKkxB,kBAAoB,KAEzBnwB,EAAMI,mBASZtB,cAAckB,GACZ,GAAIA,EAAM0Y,cAAgBsX,gBAAcC,GACtC,GAAKhxB,KAAK4tB,OA8BH,CAKL,MAAMM,EAAUntB,EAAMowB,QACG,MACvB,MAAM9C,EAAOruB,KAAKguB,aAAaM,cAAc7tB,aAAa,aAAaC,WACjE8tB,EAAcH,EAAKztB,GAAGqC,SAASirB,EAAQttB,IAE7C,OADA4tB,EAAYljB,qBACRkjB,EAAY/iB,QAAQ4iB,EAAKxtB,IAAI6tB,YAAwB,GAAV1iB,KAAKU,MAElD1M,KAAK+tB,UACDhtB,EAAMqwB,cAAgBpxB,MACxBe,EAAMa,eAAe5B,OAEhB,IAKPqxB,IACFrxB,KAAKixB,cAAc,YAAa,IAGlClwB,EAAMI,sBAvDU,CAChB,IACGJ,EAAMuwB,YAAY,IACnBvwB,EAAMuwB,YAAY,GAAGC,gBACpBxwB,EAAMuwB,YAAY,IACnBvwB,EAAMuwB,YAAY,GAAGC,cAErB,OAMF,MAAMrD,EAAUntB,EAAMowB,QAChBE,EAAmB,CAACG,EAAOC,KAE/B,MAAMpD,EAAOmD,EAAMlD,cAAc7tB,aAAa,aAAaC,WACrD8tB,EAAcH,EAAKztB,GAAGqC,SAASirB,EAAQttB,IAE7C,OADA4tB,EAAYljB,mBACRkjB,EAAY/iB,QAAQ4iB,EAAKxtB,IAAI6tB,YAAwB,IAAV1iB,KAAKU,KAClD1M,KAAK0xB,UAAUF,EAAOC,EAAOvD,GAC7BntB,EAAMG,WAAWlB,MACjBe,EAAMI,mBACC,IAKX,GAAIkwB,EAAiBtwB,EAAMuwB,YAAY,GAAIvwB,EAAMuwB,YAAY,IAAK,OAClE,GAAID,EAAiBtwB,EAAMuwB,YAAY,GAAIvwB,EAAMuwB,YAAY,IAAK,SCnT1E,MAAMK,UAA0BjsB,EAM9B7F,YAAYujB,GACVrjB,MAAM,qBAENC,KAAK4xB,YAAc,GACnB5xB,KAAK6xB,WAAa,GAClB7xB,KAAK8xB,UAAY,GAEb1O,GAAMpjB,KAAK+F,OAAOqd,GAMxBvjB,OACE,IAAK,IAAI+I,EAAI,EAAGA,EAAI5I,KAAK4xB,YAAY9sB,OAAQ8D,IACvC5I,KAAK4xB,YAAYhpB,IAAM5I,KAAK6xB,WAAWjpB,IACzC5I,KAAK4xB,YAAYhpB,GAAGnI,aAAa,aAAa8F,SAASvG,KAAK6xB,WAAWjpB,IAQ7E/I,OACE,IAAK,IAAI+I,EAAI,EAAGA,EAAI5I,KAAK4xB,YAAY9sB,OAAQ8D,IACvC5I,KAAK4xB,YAAYhpB,IAAM5I,KAAK8xB,UAAUlpB,IACxC5I,KAAK4xB,YAAYhpB,GAAGnI,aAAa,aAAa8F,SAASvG,KAAK8xB,UAAUlpB,IAS5E/I,OAAO+E,GACL,GAAIA,EAAWmtB,QACb/xB,KAAK4xB,YAAYhtB,EAAWotB,WAAaptB,EAAWmtB,QACpD/xB,KAAK6xB,WAAWjtB,EAAWotB,WAAaptB,EAAWmtB,QAAQtxB,aAAa,aAAaC,gBAChF,GAAIkE,EAAWqtB,WACpB,IAAK,IAAIrpB,EAAI,EAAGA,EAAIhE,EAAWstB,aAAaptB,OAAQ8D,IAAK,CACvD,MAAMupB,EAAOvtB,EAAWstB,aAAatpB,GAChC5I,KAAK4xB,YAAYO,KACtBnyB,KAAK4xB,YAAYO,GAAM1xB,aAAa,aAAa8F,SAAS3B,EAAWqtB,WAAWrpB,IAChF5I,KAAK8xB,UAAUK,GAAQvtB,EAAWqtB,WAAWrpB,IAGjD5I,KAAKO,KAAK,UAAWqE,GAQvB/E,OAAOgG,GACL,MAAMC,EAAI/F,MAAM8G,OAAOhB,GAEjBwN,EAAY,GAClB,IAAK,IAAIzK,EAAI,EAAGA,EAAI5I,KAAK4xB,YAAY9sB,OAAQ8D,IACvC5I,KAAK4xB,YAAYhpB,GACnByK,EAAUzK,GAAK5I,KAAK4xB,YAAYhpB,GAAGhC,UAEnCyM,EAAU3O,KAAK,MAKnB,OAFAoB,EAAEuN,UAAYA,EAEPvN,EAQTjG,SAASiG,EAAGD,GACV9F,MAAMqH,SAAStB,EAAGD,GAElB,MAAM4N,EAAY5N,EAAQiB,QAAQC,MAAMC,UACxChH,KAAK4xB,YAAc,GACnB,IAAK,IAAIhpB,EAAI,EAAGA,EAAI9C,EAAEuN,UAAUvO,OAAQ8D,IAAK,CAC3C,MAAM8K,EAAW5N,EAAEuN,UAAUzK,GAC7B,GAAI8K,GAAwB,IAAZA,EAAgB,CAC9B,MAAMqe,EAAUte,EAAUxM,YAAYyM,EAAU,GAC5Cqe,GAAWte,IACbzT,KAAK4xB,YAAYhpB,GAAKmpB,EACtB/xB,KAAK6xB,WAAWjpB,GAAKmpB,EAAQtxB,aAAa,aAAaC,cAW/Db,eAAeiG,GACb9F,KAAK+F,OAAOD,IAIhB9B,EAAgBqD,eAAe,oBAAqBsqB,GAMpD,MAAMS,UAA0B/Z,WAK9BxY,YAAYiH,GACV/G,MAAM+G,GAEN9G,KAAK8G,QAAUA,EACf9G,KAAKqyB,qBAAuB,EAE5BryB,KAAKsyB,cAAgB,GACrBtyB,KAAKuyB,gBAAkB,GACvBvyB,KAAKwyB,kBAAoB,EACzBxyB,KAAKyyB,gBAAkB,GACvBzyB,KAAK0yB,yBAA2B,GAChC1yB,KAAK2yB,kBAAoB,GACzB3yB,KAAK4yB,mBAAqB,GAC1B5yB,KAAK6yB,sBAAwB,GAM/BhzB,eACEE,MAAM8Y,eAEN7Y,KAAK8G,QAAQuN,SAAS0E,cAAcC,MAAMC,OAAS,YAEnD,MAAM6Z,EAAuBjwB,IAEtB7C,KAAK+yB,aAUZ/yB,KAAK8G,QAAQuN,SAASwZ,gBAAgB9K,MAAM+K,IAC1C,IAAK,MAAMjrB,KAAcirB,EAAKkF,iBAC5BF,IAEF9yB,KAAKizB,sBAAwBnF,EAAKnpB,GAAG,mBAAoB5D,GAAU+xB,EAAoB/xB,EAAM8B,iBAOjGhD,iBACEE,MAAMmZ,iBAENlZ,KAAK8G,QAAQuN,SAASwZ,gBAAgB9K,MAAM+K,IAI1CA,EAAKoF,mBAAmB,kBAAmBlzB,KAAKizB,0BAYpDpzB,eAAeszB,GACb,IAAIC,EACJ,GAAmB,GAAfD,EAAKruB,OACPsuB,EAAUpzB,KAAKuyB,gBAAgBY,EAAK,IAAIrwB,iBACnC,GAAmB,GAAfqwB,EAAKruB,OAAa,CAC3B,MAAMuuB,EAAOrzB,KAAKuyB,gBAAgBY,EAAK,IAAIrwB,YACrCwwB,EAAOtzB,KAAKuyB,gBAAgBY,EAAK,IAAIrwB,YAE3CuwB,EAAKxyB,IAAI0yB,UAAUD,EAAKzyB,KAExBuyB,EAAU,IAAIlpB,MACdkpB,EAAQxyB,GAAKyyB,EAAKzyB,GAAG8Q,KAAK4hB,EAAK1yB,GAAI,IACnCwyB,EAAQvyB,IAAMwyB,EAAKxyB,IAAI6Q,KAAK4hB,EAAKzyB,IAAK,IAEtC,IAAIuK,EAAOkoB,EAAK1yB,GAAGqC,SAASowB,EAAKzyB,IACjCwK,EAAKE,mBACL,MAAMC,EAAO6nB,EAAQvyB,IAAIgvB,WACrBzkB,EAAK/H,IAAIkI,GAAQ,IAAKH,EAAOA,EAAKmkB,UAEtC,MAAM/jB,EAAQJ,EAAKK,QAAQF,GAC3B,GAAIC,EAAQ,EAAG,CACb,MAAMgoB,EAAOjoB,EAAKG,MAAMN,GACxBooB,EAAKloB,mBACL,MAAMmoB,EAAQ,IAAIC,OAClBD,EAAMtnB,oBAAoBqnB,EAAMhoB,GAChC4nB,EAAQvyB,IAAM4yB,EAAMtoB,SAASioB,EAAQvyB,MAGzC,OAAOuyB,EAMTvzB,aACE,IAAK,IAAI+I,EAAI,EAAGA,EAAI5I,KAAKyyB,gBAAgB3tB,OAAQ8D,IAAK,CACpD,MAAM+qB,EAAW3zB,KAAKyyB,gBAAgB7pB,GACtC,IAAK+qB,EAAU,SACf,MAAMP,EAAUpzB,KAAK4zB,eAAe5zB,KAAK4yB,mBAAmBhqB,IAC5D5I,KAAK6yB,sBAAsBjqB,GAAKwqB,EAAQloB,UAAUC,SAASwoB,EAASlzB,aAAa,aAAaC,aASlGb,cAAckB,GACZ,GAAIA,EAAM0Y,cAAgBsX,gBAAcC,GAAI,CAC1C,MAAMjF,EAAKhrB,EAAM8B,WAAWyP,QAC5BtS,KAAKuyB,gBAAgBxG,GAAMhrB,EAAM8B,WAGjC,MAAMkY,EAAW/a,KAAK0yB,yBAAyB3G,GAC/C,GAAIhR,EAAU,CAMZ,IAAIoX,EAAOnyB,KAAKyyB,gBAAgBoB,QAAQ9Y,GACxC,IAAa,GAAToX,EAAY,CACdA,EAAOnyB,KAAKyyB,gBAAgB3tB,OAC5B9E,KAAKwyB,oBACLxyB,KAAKyyB,gBAAgB/tB,KAAKqW,GAC1B/a,KAAK4yB,mBAAmBT,GAAQ,CAACpG,GACjC/rB,KAAK2yB,kBAAkB5G,GAAMoG,EAE7B,MAAM2B,EAAa,CACjB/B,QAAShX,EACTiX,UAAWG,GAERnyB,KAAKuE,OAIRvE,KAAKuE,OAAOwB,OAAO+tB,IAHnB9zB,KAAKuE,OAAS,IAAIotB,EAAkBmC,GACpC9vB,EAAgBwG,cAAcC,UAAUzK,KAAKuE,cAK/CvE,KAAK2yB,kBAAkB5G,GAAMoG,EAC7BnyB,KAAK4yB,mBAAmBT,GAAMztB,KAAKqnB,GAErC/rB,KAAK+zB,aACLhzB,EAAMI,oBAUZtB,YAAYkB,GACV,GAAIA,EAAM0Y,cAAgBsX,gBAAcC,GAAI,CAC1C,MAAMjF,EAAKhrB,EAAM8B,WAAWyP,QAG5B,GADAtS,KAAKqyB,4BAC8B/uB,IAA/BtD,KAAK2yB,kBAAkB5G,GAAmB,CAC5C,MAAMoG,EAAOnyB,KAAK2yB,kBAAkB5G,GAC9BoH,EAAOnzB,KAAK4yB,mBAAmBT,GACrCgB,EAAKa,OAAOb,EAAKU,QAAQ9H,GAAK,GACX,GAAfoH,EAAKruB,SACP9E,KAAKwyB,oBACLxyB,KAAKyyB,gBAAgBN,QAAQ7uB,EAE7BtD,KAAKuE,YAASjB,GAEhBtD,KAAK2yB,kBAAkB5G,QAAMzoB,EAC7BtD,KAAK+zB,aACLhzB,EAAMI,oBAUZtB,cAAckB,GACZ,GAAIA,EAAM0Y,cAAgBsX,gBAAcC,GAAI,CAC1C,IAAKhxB,KAAKuE,OAsBR,YArBAxD,EAAMuwB,YAAY5qB,SAAS7D,IACzB,MAAMkpB,EAAKlpB,EAAWyP,QAChBuI,EAAmBhY,EAAWqY,mBACpC,GAAIL,EAAkB,CACpB,MAAME,EAAWF,EAAiBE,SAC9B/a,KAAK0yB,yBAAyB3G,IAAOhR,IACnC/a,KAAK0yB,yBAAyB3G,IAChC/rB,KAAK0yB,yBAAyB3G,GAAIpZ,gBAAgB,gBAEpDoI,EAAS1I,aAAa,eAAgB,IAAIhS,QAAM,EAAG,EAAG,EAAG,KACzDL,KAAK0yB,yBAAyB3G,GAAMhR,QAGtC,GAAI/a,KAAK0yB,yBAAyB3G,GAAK,CACpB/rB,KAAK0yB,yBAAyB3G,GACtCpZ,gBAAgB,gBACzB3S,KAAK0yB,yBAAyB3G,GAAM,SAQ5C,MAAMkG,EAAa,GACbC,EAAe,GACrB,IAAK,IAAItpB,EAAI,EAAGA,EAAI5I,KAAKyyB,gBAAgB3tB,OAAQ8D,IAAK,CAEpD,IADiB5I,KAAKyyB,gBAAgB7pB,GACvB,SACf,MAAMwqB,EAAUpzB,KAAK4zB,eAAe5zB,KAAK4yB,mBAAmBhqB,IAC5DqpB,EAAWvtB,KAAK0uB,EAAQjoB,SAASnL,KAAK6yB,sBAAsBjqB,KAC5DspB,EAAaxtB,KAAKkE,GAGpB5I,KAAKuE,OAAOwB,OAAO,CAAEksB,WAAAA,EAAYC,aAAAA,IAEjCnxB,EAAMI,mBASVtB,qBAAqBkB,GACfA,EAAM0Y,YAAgBsX,gBAAcC,ICxW7B,MAAMiD,UAAuB5b,WAM1CxY,YAAYiH,GACV/G,MAAM+G,ICLV,MAAMotB,UAAuBD,EAM3Bp0B,YAAYiH,GACV/G,MAAM+G,GAEDA,GAASvD,QAAQ+U,MAAM,iCAC5BtY,KAAK8G,QAAUA,EACf9G,KAAKm0B,MAAQ,EACbn0B,KAAKo0B,wBAAyB,EAC9Bp0B,KAAKwO,WAAa,eAAgB1H,EAAUA,EAAQ0H,WAAa1H,EAAQC,MAAMC,UAE/EhH,KAAKE,WAAaF,KAAKG,aAAa,IAAIC,iBAAe,QAAS,IAAIC,QAAM,GAAK,GAAK,MAEpFL,KAAKq0B,uBAAyBr0B,KAAKq0B,uBAAuB/vB,KAAKtE,MAOjEH,sBAAsBgD,GACf7C,KAAKs0B,sBACRt0B,KAAKs0B,oBAAsB,IAAIC,QAAM,KACrCv0B,KAAKw0B,uBAAyB,IAAI/qB,WAAS,qBAAsB,eACjEzJ,KAAKw0B,uBAAuB/zB,aAAa,aAAa8F,SAASvG,KAAKE,WAAWQ,YAC/EV,KAAKw0B,uBAAuB9J,eAAc,IAE5C,MAAM3P,EAAW,IAAIhR,WAAS,oBAAqB/J,KAAKs0B,oBAAqBt0B,KAAKw0B,wBAClFzZ,EAAS2P,eAAc,GAEvB7nB,EAAW8rB,aAAaxkB,SAAS4Q,GAAU,GAG7Clb,uBAAuBkB,GACrBf,KAAKy0B,sBAAsB1zB,EAAM8B,YAMnChD,eACEE,MAAM8Y,eAEN7Y,KAAK8Y,WAAa9Y,KAAK8G,QAAQuN,SAAS0E,cAAcC,MAAMC,OAC5DjZ,KAAK8G,QAAQuN,SAAS0E,cAAcC,MAAMC,OAAS,YAEnDjZ,KAAK8G,QAAQuN,SAASwZ,gBAAgB9K,MAAM+K,IAC1C,IAAK,MAAMjrB,KAAcirB,EAAKkF,iBAC5BhzB,KAAKy0B,sBAAsB5xB,GAE7BirB,EAAKnpB,GAAG,kBAAmB3E,KAAKq0B,2BAOpCx0B,iBACEE,MAAMmZ,iBAENlZ,KAAK8G,QAAQuN,SAAS0E,cAAcC,MAAMC,OAASjZ,KAAK8Y,WAExD9Y,KAAK8G,QAAQuN,SAASwZ,gBAAgB9K,MAAM+K,IAI1CA,EAAKrpB,IAAI,kBAAmBzE,KAAKq0B,2BAUrCx0B,eAAekB,GACb,GAAIA,EAAM8Z,iBAAkB,CAC1B,MAAM5Y,EAAMlB,EAAMmB,WACZ1B,EAAMR,KAAK00B,kBAAkB3xB,QAEnC,OADAvC,EAAII,GAAKqB,EAAIK,YAAYvB,EAAM8Z,iBAAiB1Y,MACzC3B,EAGT,MAAMyB,EAAMlB,EAAMmB,WACZyyB,EAAW,IAAIh0B,MAAIX,KAAK00B,kBAAkB9zB,GAAIZ,KAAK00B,kBAAkB7zB,IAAIC,YACzEqB,EAAOF,EAAIG,kBAAkBuyB,GACnC,GAAIxyB,EAAO,EAAK,CACd,MAAM3B,EAAMR,KAAK00B,kBAAkB3xB,QAEnC,OADAvC,EAAII,GAAKqB,EAAIK,YAAYH,GAClB3B,EAGT,MAAMo0B,EAAS7zB,EAAMM,SAASwzB,YACxBr0B,EAAMo0B,EAAOn0B,aAAa,aAAaC,WAAWqC,QAExD,OADAvC,EAAII,GAAKqB,EAAIK,YAAYsyB,EAAOE,oBACzBt0B,EAQTX,YAAYW,GACVR,KAAKm0B,MAAQ,EAQft0B,YAAYk1B,IASZl1B,WAAWk1B,IASXl1B,cAAck1B,IAYdl1B,cAAckB,GAEZ,GAAIA,EAAM0Y,cAAgBsX,gBAAcC,GACtChxB,KAAKwB,yBAAyBT,OACzB,CACL,GAAIA,EAAM4Y,OAAQ,OAClB,GAAkB,GAAd3Z,KAAKm0B,MACP,GAAoB,GAAhBpzB,EAAM2Y,QAAqC,UAAtB3Y,EAAM0Y,YAAyB,CACtDzZ,KAAK00B,kBAAoB,IAAIxqB,MAE7B,MAAM1J,EAAMR,KAAKg1B,eAAej0B,GAChCf,KAAKi1B,YAAYz0B,GACjBO,EAAMI,uBACGJ,EAAM2Y,YAIQ,GAAhB3Y,EAAM2Y,SAEf1V,EAAgBwG,cAAc0qB,SAC9Bl1B,KAAKm0B,MAAQ,GAEfpzB,EAAMI,kBACNJ,EAAMY,kBASV9B,cAAckB,GACZ,GAAIA,EAAM0Y,cAAgBsX,gBAAcC,GACtChxB,KAAK0B,gBAAgBX,QAChB,GAAIf,KAAKm0B,MAAQ,EAAG,CACzB,MAAM3zB,EAAMR,KAAKg1B,eAAej0B,GAChCf,KAAKm1B,WAAW30B,EAAII,IACpBG,EAAMI,kBACNJ,EAAMY,kBASV9B,YAAYkB,GACV,GAAIA,EAAM0Y,cAAgBsX,gBAAcC,GACtChxB,KAAK8B,uBAAuBf,QACvB,GAAIf,KAAKm0B,MAAQ,EAAG,CACzB,MAAM3zB,EAAMR,KAAKg1B,eAAej0B,GAChCf,KAAKo1B,cAAc50B,EAAII,IACvBG,EAAMI,mBASVtB,QAAQkB,IAYRlB,aAAakB,IASblB,UAAUkB,IASVlB,QAAQkB,IAWRlB,cAAckB,IAYdlB,yBAAyBkB,GACvB,IAAKf,KAAKq1B,mBAAoB,CAE5Br1B,KAAKq1B,mBAAqBt0B,EAAM8B,WAChC7C,KAAK00B,kBAAoB,IAAIxqB,MAC7B,MAAM1J,EAAMR,KAAK00B,kBAAkB3xB,QACnCvC,EAAII,GAAKZ,KAAKq1B,mBAAmBvyB,YAAYlC,GAC7CZ,KAAKi1B,YAAYz0B,EAAKR,KAAK8G,QAAQC,MAAMC,WAE3CjG,EAAMI,kBAQRtB,gBAAgBkB,GACd,GAAIf,KAAKq1B,oBAAsBr1B,KAAKm0B,MAAQ,EAAG,CAE7C,MAAM3zB,EAAMR,KAAKq1B,mBAAmBvyB,YACpC9C,KAAKm1B,WAAW30B,EAAII,IACpBG,EAAMI,mBASVtB,uBAAuBkB,GACrB,GAAIf,KAAKm0B,MAAQ,GACXn0B,KAAKq1B,oBAAsBt0B,EAAM8B,WAAY,CAC/C,MAAMrC,EAAMR,KAAKq1B,mBAAmBvyB,YACpC9C,KAAKo1B,cAAc50B,EAAII,IACL,GAAdZ,KAAKm0B,QAAYn0B,KAAKq1B,wBAAqB/xB,GAC/CvC,EAAMI,oBC7Sd,MAAMm0B,UAAyB5vB,EAK7B7F,YAAYC,GACVC,MAAMD,GAQRD,gBAAgB2O,EAAYhO,GAC1BR,KAAKwO,WAAaA,EAClB,MAAM1O,EAAOE,KAAKwO,WAAW+mB,mBAAmBv1B,KAAK+a,SAAS5U,WAC9DnG,KAAK+a,SAASya,QAAQ11B,GACtBE,KAAK+a,SAASta,aAAa,aAAa8F,SAAS/F,GACjDR,KAAKwO,WAAWrE,SAASnK,KAAK+a,UAQhClb,OACEG,KAAKwO,WAAWyI,YAAYjX,KAAKwO,WAAWmJ,cAAc3X,KAAK+a,WAMjElb,OACEG,KAAKwO,WAAWrE,SAASnK,KAAK+a,UAAU,GAAO,GASjDlb,OAAOgG,GACL,MAAMC,EAAI/F,MAAM8G,OAAOhB,GACvBC,EAAE2vB,eAAiBz1B,KAAKwO,WAAW5H,UACnCd,EAAE4vB,aAAe11B,KAAK+a,SAAS5U,UAC/BL,EAAE6vB,YAAc31B,KAAK+a,SAASta,aAAa,YAAYC,WAEvD,MAAMsH,EAAWhI,KAAK+a,SAASta,aAAa,YAAYC,WAExD,OADAoF,EAAEyD,MAAQvB,EAASvH,aAAa,aAAaC,WACtCoF,EASTjG,SAASiG,EAAGD,GACV,MAAM4N,EAAY5N,EAAQiB,QAAQC,MAAMC,UACxChH,KAAKwO,WAAaiF,EAAUxM,YAAYnB,EAAE2vB,eAAgB,GAC1Dz1B,KAAK+a,SAASya,QAAQx1B,KAAKwO,WAAW+mB,mBAAmBzvB,EAAE4vB,eAC3D,MAAMl1B,EAAM,IAAI0J,MAKhB,GAJA1J,EAAI4G,SAAStB,EAAE6vB,aACf31B,KAAK+a,SAASta,aAAa,YAAY8F,SAAS/F,GAChDR,KAAK41B,WAAa51B,KAAKwO,WAAWrE,SAASnK,KAAK+a,UAAU,GAEtDjV,EAAEyD,MAAO,CACX,MAAMA,EAAQ,IAAIlJ,QAAM,GAAK,GAAK,IAClCkJ,EAAMnC,SAAStB,EAAEyD,OACAvJ,KAAK+a,SAASta,aAAa,YAAYC,WAC/CD,aAAa,aAAa8F,SAASgD,IAchD1J,YCpFF,MAAMg2B,UAAyBP,EAS7Bz1B,YAAY2O,EAAYhO,EAAK+I,EAAOD,GAClCvJ,MAAM,eAENC,KAAKmtB,KAAO,IAAIC,QAAM,GACtBptB,KAAKmtB,KAAKE,eAAe,GACzBrtB,KAAKmtB,KAAKG,eAAe,GACzBttB,KAAKmtB,KAAKI,wBAAwB,EAAG,EAAG,GAExC,MAAMvlB,EAAW,IAAIyB,WAAS,OAAQ,kBACtCzB,EAASvH,aAAa,aAAa8F,SAAS,IAAIlG,QAAM,GAAK,GAAK,KAChEL,KAAK+a,SAAW,IAAIhR,WAAS,OAAQ/J,KAAKmtB,KAAMnlB,GAE5CuB,GACFvB,EAASvH,aAAa,aAAa8F,SAASgD,GAG1CD,IACFtJ,KAAKmtB,KAAK2I,cAAgBxsB,GAGxBkF,GAAchO,GAChBR,KAAK+1B,gBAAgBvnB,EAAYhO,GASrCX,OAAO+E,GACDA,EAAWoxB,KACbh2B,KAAKmtB,KAAKxkB,mBAAmB,aAAaG,YAAY,GAAGmtB,aAAarxB,EAAWoxB,IACjFh2B,KAAKmtB,KAAK5sB,KAAK,oBAGjBP,KAAKO,KAAK,UAAWqE,GASvB/E,SAASiG,EAAGD,GAEV,GADA9F,MAAMqH,SAAStB,EAAGD,GACdC,EAAEyD,MAAO,CACX,MAAMA,EAAQ,IAAIlJ,QAClBkJ,EAAMnC,SAAStB,EAAEyD,OACjBvB,SAASvH,aAAa,aAAa8F,SAASgD,GAG1CzD,EAAEwD,YACJtJ,KAAKmtB,KAAK2I,cAAgBhwB,EAAEwD,YAKlCtF,EAAgBqD,eAAe,mBAAoBwuB,GCnEnD,MAAMK,UAAuBhC,EAK3Br0B,YAAYiH,GACV/G,MAAM+G,GAEN9G,KAAK81B,cAAgB91B,KAAKG,aAAa,IAAIqM,kBAAgB,gBAAiB,IAAM,CAAC,EAAG,MAQxF3M,YAAYW,GACVR,KAAKuE,OAAS,IAAIsxB,EAAiB71B,KAAKwO,WAAYhO,GACpDwD,EAAgBwG,cAAcC,UAAUzK,KAAKuE,QAE7CvE,KAAKQ,IAAMA,EAAI0K,UACflL,KAAKm0B,MAAQ,EACbn0B,KAAK8E,OAAS,EAQhBjF,WAAWk1B,GACT,MAAM/xB,EAAShD,KAAKQ,IAAIwI,cAAc+rB,GACtC/0B,KAAK8E,OAAS9B,EAAO8B,SACrB9E,KAAKuE,OAAOwB,OAAO,CAAEiwB,GAAIhzB,IAQ3BnD,cAAck1B,GACO,GAAf/0B,KAAK8E,QACPd,EAAgBwG,cAAc0qB,SAEhCl1B,KAAKm0B,MAAQ,EACbn0B,KAAKO,KAAK,kBAQZV,yBAAyBkB,GACvB,GAAkB,GAAdf,KAAKm0B,MAAY,CACnB,MAAMgC,EAAap1B,EAAMM,SAAS+0B,aAClCp2B,KAAK81B,cAAcvvB,SAAsB,KAAb4vB,GAE9Bp2B,MAAMyB,yBAAyBT,IC5DnC,MAAMs1B,UAAyBf,EAO7Bz1B,YAAY2O,EAAYhO,EAAK+I,GAC3BxJ,MAAM,eAEN,MAAMu2B,EAAO,IAAIzsB,OAAK,EAAK,GACrB7B,EAAW,IAAIyB,WAAS,OAAQ,uBACtCzJ,KAAK+a,SAAW,IAAIhR,WAAS,OAAQusB,EAAMtuB,GAEvCwG,GAAchO,IAChBwH,EAASvH,aAAa,aAAa8F,SAASgD,GAC5CvJ,KAAK+1B,gBAAgBvnB,EAAYhO,IASrCX,OAAO+E,GACDA,EAAW0H,QACbtM,KAAK+a,SAASta,aAAa,YAAYC,WAAWD,aAAa,UAAU8F,SAAS3B,EAAW0H,QAC3F1H,EAAWmd,QACb/hB,KAAK+a,SAASta,aAAa,YAAYC,WAAWD,aAAa,UAAU8F,SAAS3B,EAAWmd,QAE/F/hB,KAAKO,KAAK,UAAWqE,IAIzBZ,EAAgBqD,eAAe,mBAAoBgvB,GCnCnD,MAAME,UAA2BjB,EAO/Bz1B,YAAY2O,EAAYhO,GACtBT,MAAM,gBAENC,KAAKw2B,OAAS,IAAIC,SAAO,EAAG,IAC5Bz2B,KAAKw2B,OAAOV,cAAgB,IAE5B,MAAM9tB,EAAW,IAAIyB,WAAS,SAAU,kBACxCzB,EAASvH,aAAa,aAAa8F,SAAS,IAAIlG,QAAM,GAAK,GAAK,KAEhEL,KAAK+a,SAAW,IAAIhR,WAAS,SAAU/J,KAAKw2B,OAAQxuB,GAEhDwG,GAAchO,GAChBR,KAAK+1B,gBAAgBvnB,EAAYhO,GASrCX,OAAO+E,GACL5E,KAAKw2B,OAAO/1B,aAAa,UAAU8F,SAAS3B,EAAW0H,QACvDtM,KAAKO,KAAK,UAAWqE,GAQvB/E,SACE,MAAMiG,EAAI/F,MAAM8G,SAEhB,OADAf,EAAEwG,OAAStM,KAAKw2B,OAAO/1B,aAAa,UAAUC,WACvCoF,EAQTjG,eAAeiG,GACbvC,QAAQ6S,IAAI,sBAAuBtQ,GAC/BA,EAAEwG,QAAQtM,KAAKw2B,OAAO/1B,aAAa,UAAU8F,SAAST,EAAEwG,SAIhEtI,EAAgBqD,eAAe,qBAAsBkvB,GCvDrD,MAAMG,UAAyBpB,EAO7Bz1B,YAAY2O,EAAYhO,GACtBT,MAAM,cAENC,KAAK8vB,KAAO,IAAIrX,OAAK,EAAG,GACxBzY,KAAK8vB,KAAKgG,cAAgB,IAE1B,MAAM9tB,EAAW,IAAIyB,WAAS,SAAU,kBACxCzB,EAASvH,aAAa,aAAa8F,SAAS,IAAIlG,QAAM,GAAK,GAAK,KAChEL,KAAK+a,SAAW,IAAIhR,WAAS,OAAQ/J,KAAK8vB,KAAM9nB,GAE5CwG,GAAchO,GAChBR,KAAK+1B,gBAAgBvnB,EAAYhO,GASrCX,OAAO+E,GAKL,GAJIA,EAAW+xB,WACb32B,KAAK8vB,KAAKrvB,aAAa,KAAK8F,SAAS3B,EAAW+xB,SAAS,IACzD32B,KAAK8vB,KAAKrvB,aAAa,KAAK8F,SAAS3B,EAAW+xB,SAAS,KAEvD/xB,EAAWhE,GAAI,CACjB,MAAMJ,EAAMR,KAAK+a,SAASta,aAAa,YAAYC,WACnDF,EAAII,GAAGwG,SAASxC,EAAWhE,IAC3BZ,KAAK+a,SAASta,aAAa,YAAY8F,SAAS/F,GAGlDR,KAAKO,KAAK,UAAWqE,IAIzBZ,EAAgBqD,eAAe,mBAAoBqvB,GC1CnD,MAAME,UAAiCtB,EASrCz1B,YAAY2O,EAAYhO,EAAK+I,EAAOD,EAAY,MAC9CvJ,MAAM,sBAENC,KAAK62B,KAAO,EACZ72B,KAAK82B,YAAc,IAEnB92B,KAAKmtB,KAAO,IAAIC,QAChBptB,KAAKmtB,KAAKE,eAAertB,KAAK82B,aAC9B92B,KAAKmtB,KAAKG,eAAettB,KAAK82B,YAAc,GAC5C92B,KAAKmtB,KAAKxkB,mBAAmB,aAAapC,SAAS,EAAG,IAAI6F,QAC1DpM,KAAKmtB,KAAK2I,cAAgBxsB,EAE1B,MAAMtB,EAAW,IAAIyB,WAAS,eAAgB,kBAC9CzB,EAASvH,aAAa,iBAAiB8F,SAAS+C,GAC5CC,GACFvB,EAASvH,aAAa,aAAa8F,SAASgD,GAG9CvJ,KAAK+a,SAAW,IAAIhR,WAAS,eAAgB/J,KAAKmtB,KAAMnlB,GAEpDwG,GAAchO,GAChBR,KAAK+1B,gBAAgBvnB,EAAYhO,GASrCX,OAAO+E,GAGL5E,KAAK62B,OAEL,IAAIE,GAAU,EACV/2B,KAAK62B,MAAQ72B,KAAKmtB,KAAK6J,mBACzBh3B,KAAK82B,YAAc92B,KAAK82B,YAAc,IACtC92B,KAAKmtB,KAAKE,eAAertB,KAAK82B,aAC9B92B,KAAKmtB,KAAKG,eAAettB,KAAK82B,YAAc,GAC5CC,GAAU,GAGZ/2B,KAAKmtB,KAAKxkB,mBAAmB,aAAapC,SAASvG,KAAK62B,KAAMjyB,EAAWqyB,OAEzEj3B,KAAKmtB,KAAKI,wBAAwBvtB,KAAK62B,KAAO,EAAG72B,KAAK62B,KAAO,EAAG72B,KAAK62B,MAEjEE,EACF/2B,KAAKmtB,KAAK5sB,KAAK,0BAA2B,CACxC22B,iBAAiB,IAGnBl3B,KAAKmtB,KAAK5sB,KAAK,kBAAmB,CAChC22B,iBAAiB,IAGrBl3B,KAAKO,KAAK,UAAWqE,GASvB/E,OAAOgG,GACL,MAAMC,EAAI/F,MAAM8G,OAAOhB,GACvBC,EAAEgwB,cAAgB91B,KAAKmtB,KAAK2I,cAC5B,MAAM9tB,EAAWhI,KAAK+a,SAASta,aAAa,YAAYC,WAExD,OADAoF,EAAEyD,MAAQvB,EAASvH,aAAa,aAAaC,WACtCoF,EASTjG,SAASiG,EAAGD,GAQV,GANIC,EAAEgwB,gBACJ91B,KAAKmtB,KAAK2I,cAAgBhwB,EAAEgwB,cAE5B91B,KAAK+a,SAASoc,cAAc12B,aAAa,iBAAiB8F,SAAST,EAAEgwB,gBAGnEhwB,EAAEyD,MAAO,CACX,MAAMA,EAAQ,IAAIlJ,QAAM,GAAK,GAAK,IAClCkJ,EAAMnC,SAAStB,EAAEyD,OACjBvJ,KAAK+a,SAASoc,cAAc12B,aAAa,aAAa8F,SAASgD,GAGjExJ,MAAMqH,SAAStB,EAAGD,IAItB7B,EAAgBqD,eAAe,2BAA4BuvB,GC1G3D,MAAMQ,WAA2B9B,EAM/Bz1B,YAAY2O,EAAYhO,EAAK+I,GAC3BxJ,MAAM,eAAgByO,GAEtBxO,KAAKq3B,OAAS,IAAIC,SAAO,EAAG,GAAI,IAChC,MAAMtvB,EAAW,IAAIyB,WAAS,SAAU,uBACxCzJ,KAAK+a,SAAW,IAAIhR,WAAS,SAAU/J,KAAKq3B,OAAQrvB,GAEhDwG,GAAchO,GAAO+I,IACvBvB,EAASvH,aAAa,aAAa8F,SAASgD,GAC5CvJ,KAAK+1B,gBAAgBvnB,EAAYhO,IASrCX,OAAO+E,GACL5E,KAAKq3B,OAAO52B,aAAa,UAAU8F,SAAS3B,EAAW0H,QAEvDtM,KAAKO,KAAK,UAAWqE,GAQvB/E,SACE,MAAMiG,EAAI/F,MAAM8G,SAEhB,OADAf,EAAEwG,OAAStM,KAAKq3B,OAAO52B,aAAa,UAAUC,WACvCoF,EAQTjG,eAAeiG,GACTA,EAAEwG,QAAQtM,KAAKq3B,OAAO52B,aAAa,UAAU8F,SAAST,EAAEwG,SAIhEtI,EAAgBqD,eAAe,qBAAsB+vB,ICnDrD,MAAMG,WAA2BjC,EAO/Bz1B,YAAY2O,EAAYhO,EAAK+I,GAC3BxJ,MAAM,gBAENC,KAAKw3B,OAAS,IAAItqB,SAAO,EAAG,EAAG,GAAG,GAClC,MAAMlF,EAAW,IAAIyB,WAAS,SAAU,uBACxCzJ,KAAK+a,SAAW,IAAIhR,WAAS,SAAU/J,KAAKw3B,OAAQxvB,GAEhDwG,GAAchO,IAChBwH,EAASvH,aAAa,aAAa8F,SAASgD,GAC5CvJ,KAAK+1B,gBAAgBvnB,EAAYhO,IASrCX,OAAO+E,GAIL,GAHIA,EAAW+xB,UACb32B,KAAKw3B,OAAOC,YAAY7yB,EAAW+xB,SAAS,GAAI/xB,EAAW+xB,SAAS,IAElE/xB,EAAWhE,GAAI,CACjB,MAAMJ,EAAMR,KAAK+a,SAASta,aAAa,YAAYC,WACnDF,EAAII,GAAGwG,SAASxC,EAAWhE,IAC3BZ,KAAK+a,SAASta,aAAa,YAAY8F,SAAS/F,GAE9CoE,EAAWmd,QACb/hB,KAAKw3B,OAAO/2B,aAAa,KAAK8F,SAAS3B,EAAWmd,QAEpD/hB,KAAKO,KAAK,UAAWqE,IAIzBZ,EAAgBqD,eAAe,qBAAsBkwB,IC/CrD,MAAMG,WAAoBrf,WACxBxY,cACEE,QACAC,KAAK23B,MAAQ,GACb33B,KAAK43B,UAAY,GAGnB/3B,aAAag4B,EAAUC,GACrB93B,KAAK23B,MAAME,GAAYC,EAGzBj4B,SAASg4B,GACP,MAAMC,EAAO93B,KAAK23B,MAAME,GACxB,IAAKC,EAAM,MAAMlyB,MAAM,iBAAkBiyB,GACrCC,EAAKjf,cAAcif,EAAKjf,eAC5B7Y,KAAK43B,UAAUlzB,KAAK1E,KAAK23B,MAAME,IAGjCh4B,UACE,GAA6B,GAAzBG,KAAK43B,UAAU9yB,OACjB,MAAMc,MAAM,uBAEd,MAAMkyB,EAAO93B,KAAK43B,UAAU53B,KAAK43B,UAAU9yB,OAAS,GAChDgzB,EAAK5e,gBAAgB4e,EAAK5e,iBAC9BlZ,KAAK43B,UAAU7yB,MAOjBlF,aACE,OAAIG,KAAK43B,UAAU9yB,OAAS,EACnB9E,KAAK43B,UAAU53B,KAAK43B,UAAU9yB,OAAS,GAEzC,GAOTjF,iBACE,GAAIG,KAAK43B,UAAU9yB,OAAS,EAAG,CAC7B,MAAMgzB,EAAO93B,KAAK43B,UAAU53B,KAAK43B,UAAU9yB,OAAS,GACpD,IAAK,MAAMolB,KAAOlqB,KAAK23B,MACrB,GAAI33B,KAAK23B,MAAMzN,IAAQ4N,EAAM,OAAO5N,EAGxC,MAAO,GAWTrqB,cAAckB,GACZ,IAAK,IAAI6H,EAAI5I,KAAK43B,UAAU9yB,OAAS,EAAG8D,GAAK,EAAGA,IAAK,CACnD,MAAMkvB,EAAO93B,KAAK43B,UAAUhvB,GAC5B,GAAIkvB,EAAKC,gBACPD,EAAKC,cAAch3B,IACdA,EAAMi3B,aAAa,OAU9Bn4B,cAAckB,GACZ,IAAK,IAAI6H,EAAI5I,KAAK43B,UAAU9yB,OAAS,EAAG8D,GAAK,EAAGA,IAAK,CACnD,MAAMkvB,EAAO93B,KAAK43B,UAAUhvB,GAC5B,GAAIkvB,EAAKG,gBACPH,EAAKG,cAAcl3B,IACdA,EAAMi3B,aAAa,OAU9Bn4B,YAAYkB,GACV,IAAK,IAAI6H,EAAI5I,KAAK43B,UAAU9yB,OAAS,EAAG8D,GAAK,EAAGA,IAAK,CACnD,MAAMkvB,EAAO93B,KAAK43B,UAAUhvB,GAC5B,GAAIkvB,EAAKI,cACPJ,EAAKI,YAAYn3B,IACZA,EAAMi3B,aAAa,OAU9Bn4B,qBAAqBkB,GACnB,IAAK,IAAI6H,EAAI5I,KAAK43B,UAAU9yB,OAAS,EAAG8D,GAAK,EAAGA,IAAK,CACnD,MAAMkvB,EAAO93B,KAAK43B,UAAUhvB,GAC5B,GAAIkvB,EAAKK,uBACPL,EAAKK,qBAAqBp3B,IACrBA,EAAMi3B,aAAa,OAU9Bn4B,QAAQkB,GACN,IAAK,IAAI6H,EAAI5I,KAAK43B,UAAU9yB,OAAS,EAAG8D,GAAK,EAAGA,IAAK,CACnD,MAAMkvB,EAAO93B,KAAK43B,UAAUhvB,GAC5B,GAAIkvB,EAAKM,UACPN,EAAKM,QAAQr3B,IACRA,EAAMi3B,aAAa,OAa9Bn4B,aAAakB,GACX,IAAK,IAAI6H,EAAI5I,KAAK43B,UAAU9yB,OAAS,EAAG8D,GAAK,EAAGA,IAAK,CACnD,MAAMkvB,EAAO93B,KAAK43B,UAAUhvB,GAC5B,GAAIkvB,EAAKO,eACPP,EAAKO,aAAat3B,IACbA,EAAMi3B,aAAa,OAU9Bn4B,UAAUkB,GACR,IAAK,IAAI6H,EAAI5I,KAAK43B,UAAU9yB,OAAS,EAAG8D,GAAK,EAAGA,IAAK,CACnD,MAAMkvB,EAAO93B,KAAK43B,UAAUhvB,GAC5B,GAAIkvB,EAAKQ,YACPR,EAAKQ,UAAUv3B,IACVA,EAAMi3B,aAAa,OAU9Bn4B,QAAQkB,GACN,IAAK,IAAI6H,EAAI5I,KAAK43B,UAAU9yB,OAAS,EAAG8D,GAAK,EAAGA,IAAK,CACnD,MAAMkvB,EAAO93B,KAAK43B,UAAUhvB,GAC5B,GAAIkvB,EAAKS,UACPT,EAAKS,QAAQx3B,IACRA,EAAMi3B,aAAa,QCxJhC,MAAMQ,WAAqB/0B,EASzB5D,YAAYC,EAAMgF,EAAS,GAAKwH,EAAS,IAAM/C,EAAQ,IAAIlJ,QAAM,YAC/DN,MAAMD,GAENE,KAAKy4B,YAAcz4B,KAAKG,aAAa,IAAIqM,kBAAgB,SAAU1H,IACnE9E,KAAK04B,kBAAoB14B,KAAKG,aAAa,IAAIqM,kBAAgB,eAAgBF,IAC/EtM,KAAK24B,eAAiB34B,KAAKG,aAAa,IAAIqM,kBAAgB,YAAsB,IAATF,IACzEtM,KAAKE,WAAWqG,SAASgD,GAEzBvJ,KAAKwJ,UAAY,IAAIC,WAAS,SAAU,qBACxCzJ,KAAKwJ,UAAU/I,aAAa,aAAa8F,SAASvG,KAAKE,WAAWQ,YAElE,MAAMk4B,EAAY,IAAInvB,WAAS,SAAU,qBACzCmvB,EAAUn4B,aAAa,aAAa8F,SAAS,IAAIlG,QAAM,GAAK,GAAK,KAEjE,MAAMw4B,EAAU,IAAIlvB,WAAkB,IAAT2C,EAAe,EAAG,GAAI,GAAG,GAAM,GACtD5C,EAAa,IAAI4tB,SAAOhrB,EAAQ,IAEtCtM,KAAK8J,OAAS,IAAIC,WAAS,SAAUL,EAAY1J,KAAKwJ,WACtDxJ,KAAK84B,QAAU,IAAI/uB,WAAS,UAAW8uB,EAAS74B,KAAKwJ,WACrDxJ,KAAK+4B,OAAS,IAAIhvB,WAAS,SAAU8uB,EAASD,GAC9C54B,KAAK2M,UAAY,IAAIzC,MACrBlK,KAAKg5B,WAAa,IAAI9uB,MACtBlK,KAAKi5B,UAAY,IAAI/uB,MAErBlK,KAAK24B,eAAeh0B,GAAG,gBAAgB,KACrCk0B,EAAQp4B,aAAa,UAAU8F,SAASvG,KAAK24B,eAAej4B,eAE9DV,KAAK04B,kBAAkB/zB,GAAG,gBAAgB,KACxC+E,EAAWjJ,aAAa,UAAU8F,SAASvG,KAAK04B,kBAAkBh4B,eAEpEV,KAAKy4B,YAAY9zB,GAAG,gBAAgB,KAClC3E,KAAKk5B,eAAel5B,KAAK6D,UAE3B7D,KAAKE,WAAWyE,GAAG,gBAAgB,KACjC3E,KAAKwJ,UAAU/I,aAAa,aAAa8F,SAASvG,KAAKE,WAAWQ,eAGpEV,KAAKmK,SAASnK,KAAK8J,QACnB9J,KAAKmK,SAASnK,KAAK84B,SACnB94B,KAAKmK,SAASnK,KAAK+4B,QAEnB/4B,KAAKk5B,eAAe,GAMtBr5B,YACEE,MAAMiB,YACNhB,KAAKwJ,UAAU/I,aAAa,aAAa8F,SAASvG,KAAKM,oBAAoBI,YAM7Eb,cACEE,MAAMkB,cACNjB,KAAKwJ,UAAU/I,aAAa,aAAa8F,SAASvG,KAAKE,WAAWQ,YASpEb,eAAeoG,GACbjG,KAAKiG,MAAQA,EACb,MAAMizB,EAAiB,KACrBl5B,KAAKk5B,eAAejzB,EAAMvF,aAE5Bw4B,IACAjzB,EAAMtB,GAAG,eAAgBu0B,GAS3Br5B,eAAegE,GACb7D,KAAK6D,MAAQA,EACb,MAAM8H,EAAQ3L,KAAKiG,OAASjG,KAAKiG,MAAMkzB,WAAan5B,KAAKiG,MAAMkzB,WAAa,CAAC,EAAG,GAC1EtwB,EAAI+C,gBAAcwtB,MAAMv1B,EAAO8H,EAAM,GAAIA,EAAM,GAAI,EAAG,GACtD7G,EAAS9E,KAAKy4B,YAAY/3B,WAChCV,KAAKg5B,WAAWluB,GAAG1B,EAAIP,EAAI/D,EAC3B9E,KAAK2M,UAAU/L,GAAGwI,EAAIP,EAAI/D,EAC1B9E,KAAKi5B,UAAUr4B,GAAGwI,EAAIP,EAAI/D,EAC1B9E,KAAKi5B,UAAUnuB,GAAG1B,GAAK,EAAIP,GAAK/D,EAChC9E,KAAK8J,OAAOrJ,aAAa,YAAY8F,SAASvG,KAAK2M,WACnD3M,KAAK84B,QAAQr4B,aAAa,YAAY8F,SAASvG,KAAKg5B,YACpDh5B,KAAK+4B,OAAOt4B,aAAa,YAAY8F,SAASvG,KAAKi5B,WAWrDp5B,YAAYkB,GAEVf,KAAK2M,UAAU7B,GAAG5B,EAAIlJ,KAAK2M,UAAU7B,GAAG3B,EAAInJ,KAAK2M,UAAU7B,GAAG1B,EAAI,IAClEpJ,KAAK8J,OAAOrJ,aAAa,YAAY8F,SAASvG,KAAK2M,WAC9C3M,KAAKiG,QAIVjG,KAAKuE,OAAS,IAAIyB,EAAqBhG,KAAKiG,OAC5CjC,EAAgBwG,cAAcC,UAAUzK,KAAKuE,SAQ/C1E,OAAOkB,GACL,MAAM+D,EAAS9E,KAAKy4B,YAAY/3B,WAC1BiL,EAAQ3L,KAAKiG,OAASjG,KAAKiG,MAAMkzB,WAAan5B,KAAKiG,MAAMkzB,WAAa,CAAC,EAAG,GAC1Et1B,EAAQ+H,gBAAcC,MAC1BD,gBAAcwtB,MAAMr4B,EAAM8C,MAAO,EAAGiB,EAAQ6G,EAAM,GAAIA,EAAM,IAC5DA,EAAM,GACNA,EAAM,IAER,IAAK3L,KAAKiG,MAGR,OAFAjG,KAAKk5B,eAAer1B,QACpB7D,KAAK6D,MAAQA,GAIf7D,KAAKuE,OAAOwB,OAAO,CACjBlC,MAAAA,IASJhE,UAAUkB,GACRf,KAAKuE,OAAS,KAEdvE,KAAK2M,UAAU7B,GAAG5B,EAAIlJ,KAAK2M,UAAU7B,GAAG3B,EAAInJ,KAAK2M,UAAU7B,GAAG1B,EAAI,EAClEpJ,KAAK8J,OAAOrJ,aAAa,YAAY8F,SAASvG,KAAK2M,WASrD9M,OAAOgG,GACL,MAAMwzB,EAAOt5B,MAAM8G,OAAOhB,GAE1B,OADI7F,KAAKiG,QAAOozB,EAAKC,YAAct5B,KAAKiG,MAAMW,WACvCyyB,EASTx5B,SAASw5B,EAAMxzB,GACb9F,MAAMqH,SAASiyB,EAAMxzB,GAEjBwzB,EAAKC,aACPzzB,EAAQoB,YAAYoyB,EAAKC,aAAavW,MAAM9c,IAC1CjG,KAAK8O,eAAe7I,kBAMnBR,SAAS,eAAgB+yB,ICtLlC,MAAMe,WAAkB1uB,EAUtBhL,YAAYC,EAAM05B,EAAY,EAAGC,EAAW,EAAGC,EAAe,IAAMnwB,EAAQ,IAAIlJ,QAAM,EAAG,EAAG,IAC1FN,MAAMD,GACNE,KAAK25B,eAAiB35B,KAAKG,aAAa,IAAIqM,kBAAgB,YAAagtB,IACzEx5B,KAAK45B,cAAgB55B,KAAKG,aAAa,IAAIqM,kBAAgB,WAAYitB,IACvEz5B,KAAK04B,kBAAoB14B,KAAKG,aAAa,IAAIqM,kBAAgB,eAAgBktB,IAI/E15B,KAAKE,WAAWqG,SAASgD,GAEzBvJ,KAAKwJ,UAAY,IAAIC,WAAS,YAAa,gBAC3CzJ,KAAKwJ,UAAU/I,aAAa,aAAa8F,SAASgD,GAElD,MAAMswB,EAAU,IAAIpD,SAAO+C,EAAW,GAAIC,GACpC/vB,EAAa,IAAI4tB,SAAOoC,EAAc,IAE5C15B,KAAK8J,OAAS,IAAIC,WAAS,SAAUL,EAAY1J,KAAKwJ,WACtDxJ,KAAK85B,IAAM,IAAI/vB,WAAS,MAAO8vB,EAAS75B,KAAKwJ,WAC7CxJ,KAAK2M,UAAY,IAAIzC,MACrBlK,KAAK+5B,oBAAsB,IAAI7vB,MAC/BlK,KAAK+5B,oBAAoBn5B,GAAGsI,EAAIswB,EAChCx5B,KAAK8J,OAAOrJ,aAAa,iBAAiB8F,SAASvG,KAAK+5B,qBAMxD/5B,KAAK2L,MAAQ,CAAC,EAAG8tB,GACjBz5B,KAAK45B,cAAcj1B,GAAG,gBAAgB,KACpC,MAAM80B,EAAWz5B,KAAK45B,cAAcl5B,WACpCm5B,EAAQp5B,aAAa,SAAS8F,SAASkzB,GACvCz5B,KAAK2L,MAAQ,CAAC,EAAG8tB,MAEnBz5B,KAAK25B,eAAeh1B,GAAG,gBAAgB,KACrC,MAAM60B,EAAYx5B,KAAK25B,eAAej5B,WACtCm5B,EAAQp5B,aAAa,UAAU8F,SAASizB,GACxCx5B,KAAK+5B,oBAAoBn5B,GAAGsI,EAAIswB,EAChCx5B,KAAK8J,OAAOrJ,aAAa,iBAAiB8F,SAASvG,KAAK+5B,wBAE1D/5B,KAAK04B,kBAAkB/zB,GAAG,gBAAgB,KACxC+E,EAAWjJ,aAAa,UAAU8F,SAASvG,KAAK04B,kBAAkBh4B,eAGpEV,KAAKE,WAAWyE,GAAG,gBAAgB,KACjC3E,KAAKwJ,UAAU/I,aAAa,aAAa8F,SAASvG,KAAKE,WAAWQ,eAGpEV,KAAKmK,SAASnK,KAAK8J,QACnB9J,KAAKmK,SAASnK,KAAK85B,KAGnB95B,KAAK8O,eAAe9O,KAAK8J,OAAOrJ,aAAa,cAAc,GAW7DZ,eAAekB,GACTA,EAAM8Z,kBAAoB9Z,EAAM8Z,iBAAiBE,UAAY/a,KAAK8J,QAAQ9J,KAAKgB,YAQrFnB,eAAekB,GACbf,KAAKiB,cAQPpB,cAAckB,GAIRA,EAAM8Z,kBAAoB9Z,EAAM8Z,iBAAiBE,UAAY/a,KAAK8J,QAAQ/J,MAAMg4B,cAAch3B,GAMpGlB,YACEE,MAAMiB,YACNhB,KAAKwJ,UAAU/I,aAAa,aAAa8F,SAASvG,KAAKM,oBAAoBI,YAM7Eb,cACEE,MAAMkB,cACNjB,KAAKwJ,UAAU/I,aAAa,aAAa8F,SAASvG,KAAKE,WAAWQ,YAsBpEb,eAAeoG,EAAOmE,GAAQ,GAE5B,GADApK,KAAKiG,MAAQA,EACTmE,EACF,GAAIpK,KAAKiG,iBAAiB+zB,eAAc,CACtC,MAAM3vB,EAAgB,KACpBrK,KAAKS,aAAa,aAAa8F,SAASN,EAAMvF,aAEhD2J,IACApE,EAAMtB,GAAG,eAAgB0F,QACpB,GAAIrK,KAAKiG,iBAAiBuG,kBAAiB,CAChD,MAAMnC,EAAgB,KACpBrK,KAAK2M,UAAU9L,IAAIsL,oBAAoB,IAAIC,OAAK,EAAG,EAAG,GAAInG,EAAMvF,YAChEV,KAAK8J,OAAOrJ,aAAa,aAAa8F,SAASvG,KAAK2M,YAEtDtC,IACApE,EAAMtB,GAAG,eAAgB0F,IAwB/BxK,aACE,OAAOG,KAAK8J,OAAOrJ,aAAa,aAAaC,WAQ/Cb,YAAYkB,GACVf,KAAKuK,QAAUvK,KAAKS,aAAa,aAAaC,WAAWqC,QACzD/C,KAAKuK,QAAQO,GAAG7B,IAAI,EAAG,EAAG,GAC1BjJ,KAAK+K,SAAW,IAAIb,MAGpBlK,KAAKoL,KAAOpL,KAAKS,aAAa,aAAaC,WAAWG,IAAIgvB,WAE1D7vB,KAAKoL,KAAKE,mBAEVtL,KAAKuE,OAAS,IAAIyB,EAAqBhG,KAAKiG,OAC5CjC,EAAgBwG,cAAcC,UAAUzK,KAAKuE,QAG7CvE,KAAK+5B,oBAAoBjvB,GAAG5B,EAAIlJ,KAAK+5B,oBAAoBjvB,GAAG3B,EAAInJ,KAAK+5B,oBAAoBjvB,GAAG1B,EAAI,IAChGpJ,KAAK8J,OAAOrJ,aAAa,iBAAiB8F,SAASvG,KAAK+5B,qBAExD/5B,KAAKO,KAAK,aAQZV,OAAOkB,GACL,MAAMwK,EAAOxK,EAAMyB,QAAQS,SAASjD,KAAKuK,QAAQ3J,IACjD2K,EAAKD,mBAEL,IAAIE,EAAQxL,KAAKoL,KAAKK,QAAQF,GAO9B,GANIvL,KAAKoL,KAAKM,MAAMH,GAAMlI,IAAIrD,KAAKuK,QAAQ1J,IAAIC,YAAc,IAAG0K,GAASA,GAErExL,KAAK2L,QACPH,EAAQI,gBAAcC,MAAML,EAAOxL,KAAK2L,MAAM,GAAI3L,KAAK2L,MAAM,KAG3D5K,EAAM+K,SAAU,CAElB,MAAMC,EAAYC,KAAKC,SAAS,MAChCT,EAAQQ,KAAKE,MAAMV,EAAQO,GAAaA,EAG1C/L,KAAK+K,SAASlK,IAAIsL,oBAAoB,IAAIC,OAAK,EAAG,EAAG,GAAIZ,GAEzD,MACM3H,EADS7D,KAAKuK,QAAQY,SAASnL,KAAK+K,UAGtC/K,KAAKuE,OACHvE,KAAKiG,iBAAiB+zB,eACxBh6B,KAAKuE,OAAOwB,OAAO,CACjBlC,MAAAA,IAEO7D,KAAKiG,iBAAiBuG,mBAC/BxM,KAAKuE,OAAOwB,OAAO,CACjBlC,MAAO2H,IAIPxL,KAAKiG,iBAAiB+zB,eACxBh6B,KAAKiG,MAAMM,SAAS1C,GACX7D,KAAKiG,iBAAiBuG,mBAC/BxM,KAAKiG,MAAMM,SAASiF,GAU1B3L,UAAUkB,GACRf,KAAKuE,OAAS,KACdvE,KAAK+5B,oBAAoBjvB,GAAG5B,EAAIlJ,KAAK+5B,oBAAoBjvB,GAAG3B,EAAInJ,KAAK+5B,oBAAoBjvB,GAAG1B,EAAI,EAChGpJ,KAAK8J,OAAOrJ,aAAa,iBAAiB8F,SAASvG,KAAK+5B,qBAExD/5B,KAAKO,KAAK,WASZV,OAAOgG,GACL,MAAMwzB,EAAOt5B,MAAM8G,OAAOhB,GAE1B,OADI7F,KAAKiG,QAAOozB,EAAKC,YAAct5B,KAAKiG,MAAMW,WACvCyyB,EASTx5B,SAASw5B,EAAMxzB,GACb9F,MAAMqH,SAASiyB,EAAMxzB,GAEjBwzB,EAAKC,aACPzzB,EAAQoB,YAAYoyB,EAAKC,aAAavW,MAAM9c,IAC1CjG,KAAK8O,eAAe7I,kBAMnBR,SAAS,YAAa8zB,IClT/B,MAAMlC,GAAS,IAAIC,SAAO,MACpBnK,GAAO,IAAIC,QAAM,GACvBD,GAAKE,eAAe,GACpBF,GAAKG,eAAe,GACpBH,GAAKI,wBAAwB,EAAG,EAAG,GACnCJ,GAAKxkB,mBAAmB,aAAaG,YAAY,GAAGmtB,aAAa,IAAI7pB,OAAK,EAAG,EAAG,IAOhF,MAAM6tB,WAAwBr6B,WAM5BC,YAAYC,EAAO,kBAAmByJ,EAAQ,IAAIlJ,QAAM,YACtDN,MAAMD,GAENE,KAAKE,WAAaF,KAAKG,aAAa,IAAIC,iBAAe,QAASmJ,IAChEvJ,KAAKk6B,eAAiBl6B,KAAKG,aAAa,IAAIg6B,kBAAgB,QAAS,OAErEn6B,KAAKo6B,eAAiB,IAAI3wB,WAAS,SAAU,gBAC7CzJ,KAAKo6B,eAAe35B,aAAa,aAAa8F,SAASvG,KAAKE,WAAWQ,YACvEV,KAAKo6B,eAAe35B,aAAa,sBAAsB8F,SAAS,GAChEvG,KAAKo6B,eAAe35B,aAAa,WAAW8F,SAAS,IAErDvG,KAAKq6B,aAAe,IAAI5wB,WAAS,OAAQ,eACzCzJ,KAAKq6B,aAAa55B,aAAa,aAAa8F,SAASvG,KAAKE,WAAWQ,YACrEV,KAAKq6B,aAAa55B,aAAa,WAAW8F,SAAS,IAEnDvG,KAAKs6B,YAAc,IAAIvwB,WAAS,GAAGjK,eAAmBu3B,GAAQr3B,KAAKo6B,gBACnEp6B,KAAKu6B,UAAY,IAAIxwB,WAAS,GAAGjK,aAAiBu3B,GAAQr3B,KAAKo6B,gBAE/Dp6B,KAAKmK,SAASnK,KAAKs6B,aACnBt6B,KAAKmK,SAASnK,KAAKu6B,WAEnBv6B,KAAKw6B,aAAe,IAAIzwB,WAAS,OAAQojB,GAAMntB,KAAKq6B,cACpDr6B,KAAKw6B,aAAa9P,eAAc,GAChC1qB,KAAKmK,SAASnK,KAAKw6B,cAEnBx6B,KAAKiW,MAAQ,IAAIwkB,QAAM,YACvBz6B,KAAKiW,MAAMxV,aAAa,YAAY8F,SAAS,IAC7CvG,KAAKiW,MAAMxV,aAAa,mBAAmB8F,SAASvG,KAAKE,WAAWQ,YAEpEV,KAAK06B,UAAY,IAAIC,gBAAc,oBAAqB36B,KAAKiW,OAC7DjW,KAAK06B,UAAUj6B,aAAa,YAAY8F,SAAS,IAAI2D,OACrDlK,KAAK06B,UAAUj6B,aAAa,kBAAkB8F,SAAS,MACvDvG,KAAK06B,UAAUj6B,aAAa,mBAAmB8F,UAAS,GACxDvG,KAAK06B,UAAUj6B,aAAa,aAAa8F,UAAS,GAClDvG,KAAK06B,UAAUj6B,aAAa,qBAAqB8F,UAAS,GAC1DvG,KAAK06B,UAAUj6B,aAAa,SAAS8F,SAAS,GAE9CvG,KAAKmK,SAASnK,KAAK06B,WAEnB16B,KAAKE,WAAWyE,GAAG,gBAAgB,KACjC,MAAM4E,EAAQvJ,KAAKE,WAAWQ,WAC9BV,KAAKo6B,eAAe35B,aAAa,aAAa8F,SAASgD,GACvDvJ,KAAKq6B,aAAa55B,aAAa,aAAa8F,SAASgD,GACrDvJ,KAAKiW,MAAMxV,aAAa,mBAAmB8F,SAASgD,MAOxD1J,oBACE,MAAM+6B,EAAW56B,KAAKs6B,YAAY75B,aAAa,aAAaC,WAGtDm6B,EAFS76B,KAAKu6B,UAAU95B,aAAa,aAAaC,WAElCE,GAAGqC,SAAS23B,EAASh6B,IACrCk6B,EAAWD,EAAO/1B,SAElBi2B,EAAUH,EAAS73B,QACzBg4B,EAAQl6B,IAAIm6B,4BAA4BH,EAAQ,IAAIzuB,OAAKyuB,EAAOzxB,EAAGyxB,EAAO3xB,EAAG2xB,EAAO1xB,IACpF4xB,EAAQjwB,GAAG1B,EAAI0xB,EAEf96B,KAAKw6B,aAAa/5B,aAAa,aAAa8F,SAASw0B,GAGrD,MAAME,EAA0B,IAAXH,EAErB96B,KAAKiW,MAAMxV,aAAa,QAAQ8F,SAAS,GAAGic,WAAWyY,EAAaC,QAAQ,MAAMl7B,KAAKk6B,eAAex5B,cAEtGm6B,EAAOvvB,mBACP,MAAM6vB,EAAWP,EAASh6B,GAAGmD,IAAI82B,EAAOz3B,MAAiB,GAAX03B,IACxCM,EAAW,IAAIlxB,MAAIixB,GACzBC,EAASv6B,IAAIm6B,4BAA4BH,EAAQ,IAAIzuB,OAAKyuB,EAAOzxB,EAAGyxB,EAAO3xB,EAAG2xB,EAAO1xB,IACrFnJ,KAAK06B,UAAUj6B,aAAa,aAAa8F,SAAS60B,GAQpDv7B,kBAAkBw7B,GAChB,MAAM1wB,EAAS3K,KAAKs6B,YAAY75B,aAAa,aAAaC,WAC1DiK,EAAO/J,GAAKy6B,EACZr7B,KAAKs6B,YAAY75B,aAAa,aAAa8F,SAASoE,GACpD3K,KAAKs7B,oBAQPz7B,gBAAgBw7B,GACd,MAAME,EAASv7B,KAAKu6B,UAAU95B,aAAa,aAAaC,WACxD66B,EAAO36B,GAAKy6B,EACZr7B,KAAKu6B,UAAU95B,aAAa,aAAa8F,SAASg1B,GAClDv7B,KAAKs7B,oBAQPz7B,yBAAyB27B,GACvBx7B,KAAKs6B,YAAY5P,eAAe8Q,GAChCx7B,KAAKu6B,UAAU7P,eAAe8Q,GAOhC37B,qBACE,OAAOG,KAAKiW,MAAMxV,aAAa,QAAQC,uBAIlC+E,SAAS,kBAAmBw0B,ICxIrC,MAAM5C,GAAS,IAAIC,SAAO,KAAO,GAAI,IAAI,GACnCnK,GAAO,IAAIC,QAAM,MAClBC,eAAe,MACfC,eAAe,MACfC,wBAAwB,EAAG,EAAG,MAC9B5kB,mBAAmB,aAAaG,YAAY,GAAGmtB,aAAa,IAAI7pB,OAAK,EAAG,EAAG,IAMhF,MAAMqvB,WAAqB77B,WAMzBC,YAAYC,EAAO,eAAgByJ,EAAQ,IAAIlJ,QAAM,YACnDN,MAAMD,GAENE,KAAKE,WAAaF,KAAKG,aAAa,IAAIC,iBAAe,QAASmJ,IAEhEvJ,KAAKo6B,eAAiB,IAAI3wB,WAAS,SAAU,gBAC7CzJ,KAAKo6B,eAAe35B,aAAa,aAAa8F,SAASvG,KAAKE,WAAWQ,YACvEV,KAAKo6B,eAAe35B,aAAa,sBAAsB8F,SAAS,GAChEvG,KAAKo6B,eAAe35B,aAAa,WAAW8F,SAAS,IAErDvG,KAAK07B,gBAAkB,IAAIjyB,WAAS,SAAU,gBAC9CzJ,KAAK07B,gBAAgBj7B,aAAa,aAAa8F,SAAS,IAAIlG,QAAM,EAAG,EAAG,IACxEL,KAAK07B,gBAAgBj7B,aAAa,sBAAsB8F,SAAS,GACjEvG,KAAK07B,gBAAgBj7B,aAAa,WAAW8F,SAAS,IAEtDvG,KAAKq6B,aAAe,IAAI5wB,WAAS,OAAQ,eACzCzJ,KAAKq6B,aAAa55B,aAAa,aAAa8F,SAASvG,KAAKE,WAAWQ,YACrEV,KAAKq6B,aAAa55B,aAAa,WAAW8F,SAAS,IAEnDvG,KAAK27B,QAAU,IAAI5xB,WAAS,UAAWstB,GAAQr3B,KAAKo6B,gBACpDp6B,KAAK47B,QAAU,IAAI7xB,WAAS,UAAWstB,GAAQr3B,KAAK07B,iBACpD17B,KAAKmK,SAASnK,KAAK27B,SACnB37B,KAAKmK,SAASnK,KAAK47B,SAMrB/7B,sBACEG,KAAK27B,QAAQxxB,SAAS,IAAIJ,WAAS,OAAQojB,GAAMntB,KAAKq6B,eAAe,GACrEr6B,KAAK47B,QAAQzxB,SAAS,IAAIJ,WAAS,OAAQojB,GAAMntB,KAAKq6B,eAAe,GAErEr6B,KAAKiW,MAAQ,IAAIwkB,QAAM,YACvBz6B,KAAKiW,MAAMxV,aAAa,YAAY8F,SAAS,IAC7CvG,KAAKiW,MAAMxV,aAAa,mBAAmB8F,SAASvG,KAAKE,WAAWQ,YAEpEV,KAAK06B,UAAY,IAAIC,gBAAc,oBAAqB36B,KAAKiW,OAC7DjW,KAAK06B,UAAUj6B,aAAa,YAAY8F,SAAS,IAAI2D,OACrDlK,KAAK06B,UAAUj6B,aAAa,kBAAkB8F,SAAS,MACvDvG,KAAK06B,UAAUj6B,aAAa,mBAAmB8F,UAAS,GACxDvG,KAAK06B,UAAUj6B,aAAa,aAAa8F,UAAS,GAClDvG,KAAK06B,UAAUj6B,aAAa,qBAAqB8F,UAAS,GAC1DvG,KAAK06B,UAAUj6B,aAAa,SAAS8F,SAAS,GAE9CvG,KAAKmK,SAASnK,KAAK06B,WAEnB16B,KAAKE,WAAWyE,GAAG,gBAAgB,KACjC,MAAM4E,EAAQvJ,KAAKE,WAAWQ,WAC9BV,KAAKo6B,eAAe35B,aAAa,aAAa8F,SAASgD,GACvDvJ,KAAKq6B,aAAa55B,aAAa,aAAa8F,SAASgD,GACrDvJ,KAAKiW,MAAMxV,aAAa,mBAAmB8F,SAASgD,MAKtD,MAAM8kB,EAAOruB,KAAK27B,QAAQl7B,aAAa,aAAaC,WAC9C6tB,EAAOvuB,KAAK47B,QAAQn7B,aAAa,aAAaC,WAE9Cm7B,EAAQxN,EAAKxtB,IAAIC,WACjBg7B,EAAQvN,EAAK1tB,IAAIC,WAEjB0yB,EAAOqI,EAAMnwB,MAAMowB,GAAOC,YAC1BC,EAAWxI,EAAK9nB,MAAMmwB,GAAOE,YAC7BE,EAAWzI,EAAK9nB,MAAMowB,GAAOC,YAE7BG,EAAO,IAAIv7B,MAAI0tB,EAAKztB,GAAIo7B,GACxBG,EAAO,IAAIx7B,MAAI4tB,EAAK3tB,GAAIq7B,GACxBG,EAASF,EAAKv4B,mBAAmBw4B,GAEjC3wB,EAAQwwB,EAASvwB,QAAQwwB,GAEzBb,EAAW,IAAIlxB,MACrBkxB,EAASx6B,GAAGgK,WAAWsxB,EAAK55B,YAAY85B,EAAO,KAC/ChB,EAASx6B,GAAGgK,WAAWuxB,EAAK75B,YAAY85B,EAAO,KAC/ChB,EAASx6B,GAAGmQ,aAAa,IAEzBsd,EAAKxtB,IAAIm6B,4BAA4BgB,EAAUH,GAC/C77B,KAAK27B,QAAQl7B,aAAa,aAAa8F,SAAS8nB,GAChDE,EAAK1tB,IAAIm6B,4BAA4BiB,EAAUJ,GAC/C77B,KAAK47B,QAAQn7B,aAAa,aAAa8F,SAASgoB,GAEhD,MAAM8N,EAAW,IAAInyB,MACrBmyB,EAASvxB,GAAG1B,EAAIgzB,EAAO,GACvBp8B,KAAK27B,QAAQW,SAAS,GAAG77B,aAAa,YAAY8F,SAAS81B,GAC3D,MAAME,EAAW,IAAIryB,MACrBqyB,EAASzxB,GAAG1B,EAAIgzB,EAAO,GACvBp8B,KAAK47B,QAAQU,SAAS,GAAG77B,aAAa,YAAY8F,SAASg2B,GAE3Dv8B,KAAKiW,MAAMxV,aAAa,QAAQ8F,SAAS,IAAIiF,GAASQ,KAAKU,GAAK,MAAMwuB,QAAQ,QAE9El7B,KAAK06B,UAAUj6B,aAAa,aAAa8F,SAAS60B,GAQpDv7B,QAAQW,GACNR,KAAK27B,QAAQl7B,aAAa,aAAa8F,SAAS/F,GAChDR,KAAK47B,QAAQn7B,aAAa,aAAa8F,SAAS/F,GAQlDX,UACE,OAAOG,KAAK27B,QAAQl7B,aAAa,aAAaC,WAQhDb,QAAQW,GACNR,KAAK47B,QAAQn7B,aAAa,aAAa8F,SAAS/F,GAChDR,KAAKw8B,kCAIA/2B,SAAS,eAAgBg2B,ICpJlC,MAAMgB,WAA0B/2B,EAM9B7F,YAAY68B,GACV38B,MAAM,qBAEF28B,IACF18B,KAAK08B,YAAcA,GAUvB78B,OAAOujB,GACLpjB,KAAK08B,YAAYt1B,SAASgc,EAAKuZ,iBAC/B38B,KAAKO,KAAK,UAAW6iB,GAMvBvjB,MACEG,KAAK08B,YAAYE,0BAAyB,GAM5C/8B,OACE0D,QAAQ6S,IAAI,0BACZpW,KAAKwO,WAAaxO,KAAK08B,YAAYjlB,WACnCzX,KAAK41B,WAAa51B,KAAKwO,WAAWmJ,cAAc3X,KAAK08B,aACrD18B,KAAKwO,WAAWyI,YAAYjX,KAAK41B,YAMnC/1B,OACE0D,QAAQ6S,IAAI,0BACZpW,KAAKwO,WAAWoJ,YAAY5X,KAAK08B,YAAa18B,KAAK41B,YASrD/1B,OAAOgG,GACL,MAAMC,EAAI/F,MAAM8G,OAAOhB,GAIvB,OAHAC,EAAE2vB,eAAiBz1B,KAAK08B,YAAYjlB,WAAW7Q,UAC/Cd,EAAE+2B,gBAAkB13B,WAASG,iBAAiBtF,KAAK08B,aACnD52B,EAAE62B,gBAAkB38B,KAAK08B,YAAY71B,OAAOhB,GACrCC,EASTjG,SAASiG,EAAGD,GACV,MACM2I,EADY3I,EAAQiB,QAAQC,MAAMC,UACXC,YAAYnB,EAAE2vB,eAAgB,GACvDjnB,IACFxO,KAAK08B,YAAcv3B,WAAS23B,uBAAuBh3B,EAAE+2B,iBACrD78B,KAAK08B,YAAYt1B,SAAStB,EAAE62B,iBAC5BnuB,EAAWrE,SAASnK,KAAK08B,cAO7B78B,YAGFmE,EAAgBqD,eAAe,oBAAqBo1B,ICrFpD,MAAMM,WAA4B1kB,WAMhCxY,YAAYiH,GACV/G,QAEAC,KAAKE,WAAaF,KAAKG,aAAa,IAAIC,iBAAe,QAAS,IAAIC,QAAM,aACrEyG,GAASvD,QAAQ+U,MAAM,iCAC5BtY,KAAK8G,QAAUA,EACf9G,KAAKg9B,kBAAoB,KACzBh9B,KAAKi9B,iBAAmB,KACxBj9B,KAAKk9B,iBAAmB,KACxBl9B,KAAKm0B,MAAQ,EAMft0B,eACEE,MAAM8Y,eACF7Y,KAAK8G,SAAW9G,KAAK8G,QAAQuN,WAC/BrU,KAAK8Y,WAAa9Y,KAAK8G,QAAQuN,SAAS0E,cAAcC,MAAMC,OAC5DjZ,KAAK8G,QAAQuN,SAAS0E,cAAcC,MAAMC,OAAS,aAOvDpZ,iBAME,GALAE,MAAMmZ,iBACFlZ,KAAK8G,SAAW9G,KAAK8G,QAAQuN,WAC/BrU,KAAK8G,QAAQuN,SAAS0E,cAAcC,MAAMC,OAASjZ,KAAK8Y,YAGxC,GAAd9Y,KAAKm0B,MAAY,CACnB,MAAM3lB,EAAaxO,KAAK08B,YAAYjlB,WACpCjJ,EAAWyI,YAAYzI,EAAWmJ,cAAc3X,KAAK08B,cACrD18B,KAAK08B,YAAc,KAEf18B,KAAKk9B,mBACPl9B,KAAKk9B,iBAAiBvqB,gBAAgB,WAAW,GACjD3S,KAAKk9B,iBAAmB,MAEtBl9B,KAAKi9B,mBACPj9B,KAAKi9B,iBAAiBtqB,gBAAgB,WAAW,GACjD3S,KAAKi9B,iBAAmB,MAE1Bj9B,KAAKm0B,MAAQ,GAUjBt0B,qBAAqBkb,EAAUoiB,GAC7B,MAAM38B,EAAMua,EAASta,aAAa,aAAaC,WAC/C,GAAIqa,EAASqiB,aAAa,aAAc,CACtC,MAAMC,EAAYtiB,EAASta,aAAa,aAAaC,WAErD,OAAQ28B,GACN,IAAK,OAAQ,CACX,MAAMC,EAAWH,EAAIl6B,SAASzC,EAAII,IAC5B28B,EAAQ/8B,EAAIK,IAAIgvB,WACtB,OAAOrvB,EAAII,GAAGmD,IAAIw5B,EAAMn6B,MAAMk6B,EAASj6B,IAAIk6B,KAE7C,IAAK,SAAU,CACb,MAAMD,EAAWH,EAAIl6B,SAASzC,EAAII,IAC5B0L,EAASyO,EAASta,aAAa,UAAUC,WAAaF,EAAIsK,GAAG5B,EAC7Ds0B,EAAQh9B,EAAIK,IAAIC,WACtBw8B,EAASG,gBAAgBD,EAAMp6B,MAAMk6B,EAASj6B,IAAIm6B,KAClD,MAAM14B,EAASw4B,EAASx4B,SACxB,OAAOtE,EAAII,GAAGmD,IAAIu5B,EAASl6B,MAAMkJ,EAASxH,IAE5C,QACEvB,QAAQ6S,IAAI,wBAAyBinB,SAGpC,GAAItiB,EAASqiB,aAAa,eAAgB,CAC/C,MAAMM,EAAc3iB,EAASta,aAAa,eAAeC,WAEzD,OAAQg9B,GACN,IAAK,QAAS,CACZ,MAAMC,EAAWR,EAAIl6B,SAASzC,EAAII,IAC5B48B,EAAQh9B,EAAIK,IAAIC,WACtB,OAAOq8B,EAAIl6B,SAASu6B,EAAMp6B,MAAMu6B,EAASt6B,IAAIm6B,KAE/C,IAAK,WAAY,CACf,MAAMG,EAAWR,EAAIl6B,SAASzC,EAAII,IAC5B48B,EAAQh9B,EAAIK,IAAIC,WAChB88B,EAAcp9B,EAAII,GAAGmD,IAAIy5B,EAAMp6B,MAAMu6B,EAASt6B,IAAIm6B,KAElDlxB,EAASyO,EAASta,aAAa,UAAUC,WAAaF,EAAIsK,GAAG5B,EAC7D20B,EAAYV,EAAIl6B,SAAS26B,GACzB94B,EAAS+4B,EAAU/4B,SACzB,OAAO84B,EAAY75B,IAAI85B,EAAUz6B,MAAMkJ,EAASxH,IAElD,QACEvB,QAAQ6S,IAAI,2BAA4BsnB,KAWhD79B,cAAckB,GAEZ,KAAIA,EAAM4Y,QAAiC,UAAtB5Y,EAAM0Y,aAA4C,IAAjB1Y,EAAM2Y,SAAkB3Y,EAAM8Z,iBAEpF,GAAkB,GAAd7a,KAAKm0B,OACP,GAAIn0B,KAAKi9B,iBAAkB,CACzB,MAAMh7B,EAAMlB,EAAMmB,WAClB,IAAI47B,EACJ,GAAI/8B,EAAM8Z,iBACRijB,EAAS77B,EAAIiB,MAAMa,IAAI9B,EAAIkB,IAAIC,MAAMrC,EAAM8Z,iBAAiB1Y,WACvD,CACL,MAAMmoB,EAAQ,IAAI3pB,MAAI,IAAIyL,OAAQ,IAAIA,OAAK,EAAG,EAAG,IAC3C0uB,EAAW74B,EAAIG,kBAAkBkoB,GACvCwT,EAAS77B,EAAIiB,MAAMa,IAAI9B,EAAIkB,IAAIC,MAAM03B,IAGvC,MAAMiD,EAAW/9B,KAAKg+B,qBAAqBh+B,KAAKi9B,iBAAkBa,GAC5Dv0B,EAAQvJ,KAAKE,WAAWQ,WAE9BV,KAAK08B,YAAc,IAAIzC,GAAgB,mBAAoB1wB,GAC3DvJ,KAAK08B,YAAYuB,kBAAkBF,GACnC/9B,KAAK08B,YAAYwB,gBAAgBH,GACjC/9B,KAAK8G,QAAQC,MAAMC,UAAUmD,SAASnK,KAAK08B,aAE3C18B,KAAKg9B,kBAAoB,IAAIP,GAAkBz8B,KAAK08B,aACpD14B,EAAgBwG,cAAcC,UAAUzK,KAAKg9B,mBAE7Ch9B,KAAKm0B,QACLpzB,EAAMI,wBAEH,GAAkB,GAAdnB,KAAKm0B,OACVn0B,KAAKk9B,iBAAkB,CACzB,MAAMj7B,EAAMlB,EAAMmB,WACZ47B,EAAS77B,EAAIiB,MAAMa,IAAI9B,EAAIkB,IAAIC,MAAMrC,EAAM8Z,iBAAiB1Y,OAC5D47B,EAAW/9B,KAAKg+B,qBAAqBh+B,KAAKi9B,iBAAkBa,GAC5DK,EAASn+B,KAAKg+B,qBAAqBh+B,KAAKk9B,iBAAkBY,GAChE99B,KAAK08B,YAAYuB,kBAAkBF,GACnC/9B,KAAK08B,YAAYwB,gBAAgBC,GAE7Bn+B,KAAKi9B,mBACPj9B,KAAKi9B,iBAAiBtqB,gBAAgB,WAAW,GACjD3S,KAAKi9B,iBAAmB,MAEtBj9B,KAAKk9B,mBACPl9B,KAAKk9B,iBAAiBvqB,gBAAgB,WAAW,GACjD3S,KAAKk9B,iBAAmB,MAE1Bl9B,KAAKm0B,MAAQ,EACbn0B,KAAK08B,YAAc,KACnB37B,EAAMI,mBAUZtB,cAAckB,GAEZ,KAAIA,EAAM4Y,QAAiC,UAAtB5Y,EAAM0Y,aAA4C,IAAjB1Y,EAAM2Y,QAE5D,GAAkB,GAAd1Z,KAAKm0B,MAAY,CACnB,GAAIpzB,EAAM8Z,iBAAkB,CAC1B,MAAME,SAAEA,GAAaha,EAAM8Z,kBACvBE,EAASqiB,aAAa,cAAgBriB,EAASqiB,aAAa,kBACzDriB,GAAY/a,KAAKi9B,mBAChBj9B,KAAKi9B,kBACPj9B,KAAKi9B,iBAAiBtqB,gBAAgB,WAAW,GAEnD3S,KAAKi9B,iBAAmBliB,EACxB/a,KAAKi9B,iBAAiB5qB,aAAa,UAAW,IAAIhS,QAAM,EAAG,EAAG,EAAG,KAAM,SAIvEL,KAAKi9B,mBACPj9B,KAAKi9B,iBAAiBtqB,gBAAgB,WAAW,GACjD3S,KAAKi9B,iBAAmB,MAG5Bl8B,EAAMI,uBACD,GAAkB,GAAdnB,KAAKm0B,MAAY,CAC1B,GAAIpzB,EAAM8Z,iBAAkB,CAC1B,MAAME,SAAEA,GAAaha,EAAM8Z,iBACvBE,GAAY/a,KAAKi9B,kBAAoBliB,GAAY/a,KAAKk9B,mBACpDniB,EAASqiB,aAAa,cAAgBriB,EAASqiB,aAAa,kBAC1Dp9B,KAAKk9B,mBACPl9B,KAAKk9B,iBAAiBvqB,gBAAgB,WAAW,GACjD3S,KAAKk9B,iBAAmB,MAG1Bl9B,KAAKk9B,iBAAmBniB,EACxB/a,KAAKk9B,iBAAiB7qB,aAAa,UAAW,IAAIhS,QAAM,EAAG,EAAG,EAAG,KAAM,SAIvEL,KAAKk9B,mBACPl9B,KAAKk9B,iBAAiBvqB,gBAAgB,WAAW,GACjD3S,KAAKk9B,iBAAmB,MAI5Bn8B,EAAMI,mBASVtB,YAAYkB,KCnOd,MAAMq9B,WAAmC/lB,WAMvCxY,YAAYiH,GACV/G,QAEAC,KAAKE,WAAaF,KAAKG,aAAa,IAAIC,iBAAe,QAAS,IAAIC,QAAM,aACrEyG,GAASvD,QAAQ+U,MAAM,iCAC5BtY,KAAK8G,QAAUA,EACf9G,KAAKg9B,kBAAoB,KACzBh9B,KAAKi9B,iBAAmB,KACxBj9B,KAAKk9B,iBAAmB,KACxBl9B,KAAKm0B,MAAQ,EAMft0B,eACEE,MAAM8Y,eACF7Y,KAAK8G,SAAW9G,KAAK8G,QAAQuN,WAC/BrU,KAAK8Y,WAAa9Y,KAAK8G,QAAQuN,SAAS0E,cAAcC,MAAMC,OAC5DjZ,KAAK8G,QAAQuN,SAAS0E,cAAcC,MAAMC,OAAS,aAOvDpZ,iBAME,GALAE,MAAMmZ,iBACFlZ,KAAK8G,SAAW9G,KAAK8G,QAAQuN,WAC/BrU,KAAK8G,QAAQuN,SAAS0E,cAAcC,MAAMC,OAASjZ,KAAK8Y,YAGxC,GAAd9Y,KAAKm0B,MAAY,CACnB,MAAM3lB,EAAaxO,KAAK08B,YAAYjlB,WACpCjJ,EAAWyI,YAAYzI,EAAWmJ,cAAc3X,KAAK08B,cACrD18B,KAAK08B,YAAc,KAEf18B,KAAKk9B,mBACPl9B,KAAKk9B,iBAAiBvqB,gBAAgB,WAAW,GACjD3S,KAAKk9B,iBAAmB,MAEtBl9B,KAAKi9B,mBACPj9B,KAAKi9B,iBAAiBtqB,gBAAgB,WAAW,GACjD3S,KAAKi9B,iBAAmB,MAE1Bj9B,KAAKm0B,MAAQ,GASjBt0B,cAAckb,EAAUmP,IAQxBrqB,uBAAuBkb,EAAUoiB,GAC/B,MAAM38B,EAAMua,EAASta,aAAa,aAAaC,WAC/C,GAAIqa,EAASqiB,aAAa,aAAc,CACtC,MAAMC,EAAYtiB,EAASta,aAAa,aAAaC,WAErD,OAAQ28B,GACN,IAAK,SAAU,CACb,MAAMC,EAAWH,EAAIl6B,SAASzC,EAAII,IAC5B48B,EAAQh9B,EAAIK,IAAIC,WACtB,OAAON,EAAII,GAAGmD,IAAIy5B,EAAMp6B,MAAMk6B,EAASj6B,IAAIm6B,KAE7C,QACEj6B,QAAQ6S,IAAI,wBAAyBinB,SAGpC,GAAItiB,EAASqiB,aAAa,eAAgB,CAC/C,MAAMM,EAAc3iB,EAASta,aAAa,eAAeC,WAEzD,OAAQg9B,GACN,IAAK,WACL,IAAK,OAAQ,CACX,MAAMC,EAAWR,EAAIl6B,SAASzC,EAAII,IAC5B48B,EAAQh9B,EAAIK,IAAIC,WACtB,OAAON,EAAII,GAAGmD,IAAIy5B,EAAMp6B,MAAMu6B,EAASt6B,IAAIm6B,KAE7C,QACEj6B,QAAQ6S,IAAI,2BAA4BsnB,KAWhD79B,cAAckB,GAEZ,KAAIA,EAAM4Y,QAAiC,UAAtB5Y,EAAM0Y,aAA4C,IAAjB1Y,EAAM2Y,SAAkB3Y,EAAM8Z,iBAEpF,GAAkB,GAAd7a,KAAKm0B,OACP,GAAIn0B,KAAKi9B,iBAAkB,CACzB,MAAMh7B,EAAMlB,EAAMmB,WAClB,IAAI47B,EACJ,GAAI/8B,EAAM8Z,iBACRijB,EAAS77B,EAAIiB,MAAMa,IAAI9B,EAAIkB,IAAIC,MAAMrC,EAAM8Z,iBAAiB1Y,WACvD,CACL,MAAMmoB,EAAQ,IAAI3pB,MAAI,IAAIyL,OAAQ,IAAIA,OAAK,EAAG,EAAG,IAC3C0uB,EAAW74B,EAAIG,kBAAkBkoB,GACvCwT,EAAS77B,EAAIiB,MAAMa,IAAI9B,EAAIkB,IAAIC,MAAM03B,IAGvC,MAAMiD,EAAW/9B,KAAKq+B,uBAAuBr+B,KAAKi9B,iBAAkBa,GAC9Dv0B,EAAQvJ,KAAKE,WAAWQ,WAE9BV,KAAK08B,YAAc,IAAIzC,GAAgB,mBAAoB1wB,GAC3DvJ,KAAK08B,YAAYuB,kBAAkBF,GACnC/9B,KAAK08B,YAAYwB,gBAAgBH,GACjC/9B,KAAK8G,QAAQC,MAAMC,UAAUmD,SAASnK,KAAK08B,aAE3C18B,KAAKg9B,kBAAoB,IAAIP,GAAkBz8B,KAAK08B,aACpD14B,EAAgBwG,cAAcC,UAAUzK,KAAKg9B,mBAE7Ch9B,KAAKm0B,QACLpzB,EAAMI,wBAEH,GAAkB,GAAdnB,KAAKm0B,OACVn0B,KAAKk9B,iBAAkB,CACzB,MAAMj7B,EAAMlB,EAAMmB,WACZ47B,EAAS77B,EAAIiB,MAAMa,IAAI9B,EAAIkB,IAAIC,MAAMrC,EAAM8Z,iBAAiB1Y,OAClE,IAAIg8B,EAASn+B,KAAKq+B,uBAAuBr+B,KAAKk9B,iBAAkBY,GAChE,MAAMC,EAAW/9B,KAAKq+B,uBAAuBr+B,KAAKi9B,iBAAkBkB,GACpEA,EAASn+B,KAAKq+B,uBAAuBr+B,KAAKk9B,iBAAkBa,GAC5D/9B,KAAK08B,YAAYuB,kBAAkBF,GACnC/9B,KAAK08B,YAAYwB,gBAAgBC,GAE7Bn+B,KAAKi9B,mBACPj9B,KAAKi9B,iBAAiBtqB,gBAAgB,WAAW,GACjD3S,KAAKi9B,iBAAmB,MAEtBj9B,KAAKk9B,mBACPl9B,KAAKk9B,iBAAiBvqB,gBAAgB,WAAW,GACjD3S,KAAKk9B,iBAAmB,MAE1Bl9B,KAAKm0B,MAAQ,EACbn0B,KAAK08B,YAAc,KACnB37B,EAAMI,mBAUZtB,UAAUkb,GACR,GAAIA,EAASqiB,aAAa,aAAc,CAEtC,MAAmC,UADbriB,EAASta,aAAa,aACvBC,WAEvB,GAAIqa,EAASqiB,aAAa,eAAgB,CACxC,MAAMkB,EAAkBvjB,EAASta,aAAa,eAC9C,MAAqC,QAA9B69B,EAAgB59B,YAAsD,YAA9B49B,EAAgB59B,YASnEb,cAAckB,GAEZ,KAAIA,EAAM4Y,QAAiC,UAAtB5Y,EAAM0Y,aAA4C,IAAjB1Y,EAAM2Y,QAE5D,GAAkB,GAAd1Z,KAAKm0B,MAAY,CACnB,GAAIpzB,EAAM8Z,iBAAkB,CAC1B,MAAME,SAAEA,GAAaha,EAAM8Z,iBAC3B,GAAIE,GAAY/a,KAAKi9B,kBAAoBj9B,KAAKu+B,UAAUxjB,GAAW,CAC7D/a,KAAKi9B,kBACPj9B,KAAKi9B,iBAAiBtqB,gBAAgB,WAAW,GAEnD3S,KAAKi9B,iBAAmBliB,EAExB,MAAMxR,EAAQvJ,KAAKE,WAAWQ,WAAWqC,QACzCwG,EAAMhB,EAAI,GACVvI,KAAKi9B,iBAAiB5qB,aAAa,UAAW9I,GAAO,SAGnDvJ,KAAKi9B,mBACPj9B,KAAKi9B,iBAAiBtqB,gBAAgB,WAAW,GACjD3S,KAAKi9B,iBAAmB,MAG5Bl8B,EAAMI,uBACD,GAAkB,GAAdnB,KAAKm0B,MAAY,CAC1B,GAAIpzB,EAAM8Z,iBAAkB,CAC1B,MAAME,SAAEA,GAAaha,EAAM8Z,iBAC3B,GAAIE,GAAY/a,KAAKi9B,kBAAoBliB,GAAY/a,KAAKk9B,kBAAoBl9B,KAAKu+B,UAAUxjB,GAAW,CAClG/a,KAAKk9B,mBACPl9B,KAAKk9B,iBAAiBvqB,gBAAgB,WAAW,GACjD3S,KAAKk9B,iBAAmB,MAG1Bl9B,KAAKk9B,iBAAmBniB,EACxB,MAAMxR,EAAQvJ,KAAKE,WAAWQ,WAAWqC,QACzCwG,EAAMhB,EAAI,GACVvI,KAAKk9B,iBAAiB7qB,aAAa,UAAW9I,GAAO,SAGnDvJ,KAAKk9B,mBACPl9B,KAAKk9B,iBAAiBvqB,gBAAgB,WAAW,GACjD3S,KAAKk9B,iBAAmB,MAG5Bn8B,EAAMI,mBASVtB,YAAYkB,KC1Od,MAAMy9B,WAA0BnmB,WAM9BxY,YAAYiH,GACV/G,QAEAC,KAAKE,WAAaF,KAAKG,aAAa,IAAIC,iBAAe,QAAS,IAAIC,QAAM,aACrEyG,GAASvD,QAAQ+U,MAAM,iCAC5BtY,KAAK8G,QAAUA,EACf9G,KAAKi9B,iBAAmB,KAM1Bp9B,eACEE,MAAM8Y,eACF7Y,KAAK8G,SAAW9G,KAAK8G,QAAQuN,WAC/BrU,KAAK8Y,WAAa9Y,KAAK8G,QAAQuN,SAAS0E,cAAcC,MAAMC,OAC5DjZ,KAAK8G,QAAQuN,SAAS0E,cAAcC,MAAMC,OAAS,aAOvDpZ,iBACEE,MAAMmZ,iBACFlZ,KAAK8G,SAAW9G,KAAK8G,QAAQuN,WAC/BrU,KAAK8G,QAAQuN,SAAS0E,cAAcC,MAAMC,OAASjZ,KAAK8Y,YAS5DjZ,cAAckB,GAEZ,KAAIA,EAAM4Y,QAAiC,UAAtB5Y,EAAM0Y,aAA4C,IAAjB1Y,EAAM2Y,SAAkB3Y,EAAM8Z,kBAEhF7a,KAAKi9B,iBAAkB,CACzB,MAAMh7B,EAAMlB,EAAMmB,WAClB,IAAI47B,EACJ,GAAI/8B,EAAM8Z,iBACRijB,EAAS77B,EAAIiB,MAAMa,IAAI9B,EAAIkB,IAAIC,MAAMrC,EAAM8Z,iBAAiB1Y,WACvD,CACL,MAAMmoB,EAAQ,IAAI3pB,MAAI,IAAIyL,OAAQ,IAAIA,OAAK,EAAG,EAAG,IAC3C0uB,EAAW74B,EAAIG,kBAAkBkoB,GACvCwT,EAAS77B,EAAIiB,MAAMa,IAAI9B,EAAIkB,IAAIC,MAAM03B,IAEvC,MAAM/f,EAAW/a,KAAKi9B,iBAChBz8B,EAAMua,EAASta,aAAa,aAAaC,WAC/C,IAAI+9B,EACAC,EACJ,GAAI3jB,EAASqiB,aAAa,aAAc,CACtC,MAAMC,EAAYtiB,EAASta,aAAa,aAAaC,WACrD,OAAQ28B,GACN,IAAK,SAAU,CACb,MAAMC,EAAWQ,EAAO76B,SAASzC,EAAII,IAC/B0L,EAASyO,EAASta,aAAa,UAAUC,WAAaF,EAAIsK,GAAG5B,EAC7Ds0B,EAAQh9B,EAAIK,IAAIC,WACtBw8B,EAASG,gBAAgBD,EAAMp6B,MAAMk6B,EAASj6B,IAAIm6B,KAClD,MAAM14B,EAASw4B,EAASx4B,SACxB25B,EAAUj+B,EAAII,GACd89B,EAAUD,EAAQ16B,IAAIu5B,EAASl6B,MAAMkJ,EAASxH,IAEhD,QACEvB,QAAQ6S,IAAI,wBAAyBinB,SAGpC,GAAItiB,EAASqiB,aAAa,eAAgB,CAC/C,MAAMM,EAAc3iB,EAASta,aAAa,eAAeC,WACzD,OAAQg9B,GACN,IAAK,WAAY,CACf,MAAMC,EAAWG,EAAO76B,SAASzC,EAAII,IAC/B48B,EAAQh9B,EAAIK,IAAIC,WACtB29B,EAAUj+B,EAAII,GAAGmD,IAAIy5B,EAAMp6B,MAAMu6B,EAASt6B,IAAIm6B,KAE9C,MAAMlxB,EAASyO,EAASta,aAAa,UAAUC,WAAaF,EAAIsK,GAAG5B,EAC7D20B,EAAYC,EAAO76B,SAASw7B,GAC5B35B,EAAS+4B,EAAU/4B,SACzB45B,EAAUD,EAAQ16B,IAAI85B,EAAUz6B,MAAMkJ,EAASxH,IAEjD,QACEvB,QAAQ6S,IAAI,2BAA4BsnB,IAI9C,MAAMn0B,EAAQvJ,KAAKE,WAAWQ,WAExBg8B,EAAc,IAAIzC,GAAgB,gBAAiB1wB,GACzDmzB,EAAYuB,kBAAkBQ,GAC9B/B,EAAYwB,gBAAgBQ,GAC5BhC,EAAYE,0BAAyB,GACrC58B,KAAK8G,QAAQC,MAAMC,UAAUmD,SAASuyB,GAEtC,MAAMM,EAAoB,IAAIP,GAAkBC,GAChD14B,EAAgBwG,cAAcC,UAAUuyB,GAEpCh9B,KAAKi9B,kBAAkBj9B,KAAKi9B,iBAAiBtqB,gBAAgB,WAAW,GAC5E5R,EAAMI,mBASVtB,cAAckB,GAEZ,KAAIA,EAAM4Y,QAAiC,UAAtB5Y,EAAM0Y,aAA4C,IAAjB1Y,EAAM2Y,QAEvD1Z,KAAKuY,UACR,GAAIxX,EAAM8Z,iBAAkB,CAC1B,MAAME,SAAEA,GAAaha,EAAM8Z,iBAC3B,IACGE,EAASqiB,aAAa,cAAiE,UAAjDriB,EAASta,aAAa,aAAaC,YACzEqa,EAASqiB,aAAa,gBAAqE,YAAnDriB,EAASta,aAAa,eAAeC,aAE1Eqa,GAAY/a,KAAKi9B,iBAAkB,CACjCj9B,KAAKi9B,kBACPj9B,KAAKi9B,iBAAiBtqB,gBAAgB,WAAW,GAEnD3S,KAAKi9B,iBAAmBliB,EACxB,MAAMxR,EAAQvJ,KAAKE,WAAWQ,WAAWqC,QACzCwG,EAAMhB,EAAI,GACVvI,KAAKi9B,iBAAiB5qB,aAAa,UAAW9I,GAAO,SAIrDvJ,KAAKi9B,mBACPj9B,KAAKi9B,iBAAiBtqB,gBAAgB,WAAW,GACjD3S,KAAKi9B,iBAAmB,MAWhCp9B,YAAYkB,KCrJd,MAAM49B,WAAyBtmB,WAM7BxY,YAAYiH,GACV/G,QAEAC,KAAKE,WAAaF,KAAKG,aAAa,IAAIC,iBAAe,QAAS,IAAIC,QAAM,aACrEyG,GAASvD,QAAQ+U,MAAM,iCAC5BtY,KAAK8G,QAAUA,EACf9G,KAAKg9B,kBAAoB,KACzBh9B,KAAKi9B,iBAAmB,KACxBj9B,KAAK4+B,uBAAyB,KAC9B5+B,KAAKk9B,iBAAmB,KACxBl9B,KAAKm0B,MAAQ,EAMft0B,eACEE,MAAM8Y,eACF7Y,KAAK8G,SAAW9G,KAAK8G,QAAQuN,WAC/BrU,KAAK8Y,WAAa9Y,KAAK8G,QAAQuN,SAAS0E,cAAcC,MAAMC,OAC5DjZ,KAAK8G,QAAQuN,SAAS0E,cAAcC,MAAMC,OAAS,aAOvDpZ,iBAKE,GAJAE,MAAMmZ,iBACFlZ,KAAK8G,SAAW9G,KAAK8G,QAAQuN,WAC/BrU,KAAK8G,QAAQuN,SAAS0E,cAAcC,MAAMC,OAASjZ,KAAK8Y,YAExC,GAAd9Y,KAAKm0B,MAAY,CACnB,MAAM3lB,EAAaxO,KAAK08B,YAAYjlB,WACpCjJ,EAAWyI,YAAYzI,EAAWmJ,cAAc3X,KAAK08B,cACrD18B,KAAK08B,YAAc,KAEf18B,KAAKk9B,mBACPl9B,KAAKk9B,iBAAiBvqB,gBAAgB,WAAW,GACjD3S,KAAKk9B,iBAAmB,MAEtBl9B,KAAKi9B,mBACPj9B,KAAKi9B,iBAAiBtqB,gBAAgB,WAAW,GACjD3S,KAAKi9B,iBAAmB,MAE1Bj9B,KAAKm0B,MAAQ,GASjBt0B,aAAakb,GACX,MAAMujB,EAAkBvjB,EAASta,aAAa,eAC9C,OACE69B,IAC+B,SAA9BA,EAAgB59B,YACe,QAA9B49B,EAAgB59B,YACc,YAA9B49B,EAAgB59B,YAStBb,cAAckB,GAEZ,GAAIA,EAAM4Y,QAAiC,UAAtB5Y,EAAM0Y,aAA4C,IAAjB1Y,EAAM2Y,SAAkB3Y,EAAM8Z,iBAAkB,OAEtG,MAAMgkB,EAAgB,CAAC9jB,EAAU+iB,EAAQgB,KACvC,MAAMt+B,EAAM,IAAI0J,MACVo0B,EAAkBvjB,EAASta,aAAa,eAC9C,GAAI69B,EAAiB,CACnB,MAAMZ,EAAcY,EAAgB59B,WACpC,OAAQg9B,GACN,IAAK,QAAS,CACZ,MAAMqB,EAAUhkB,EAASta,aAAa,WAAWC,WAC3Ci9B,EAAWG,EAAO76B,SAAS87B,EAAQC,aACzC,IAAIxB,EAAQuB,EAAQE,MAAMl8B,QACtBy6B,EAAMn6B,IAAItC,EAAMmB,WAAWiB,KAAO,IAAGq6B,EAAQA,EAAMjO,UAEvD,MAAM2P,EAAUpB,EAChB,GAAIgB,EAAW,CACb,MAAMjD,EAAQ2B,EACR1B,EAAQgD,EAAUj+B,IAAIC,WACtBq+B,EAAWL,EAAUl+B,GAAGqC,SAAS66B,GACjCtK,EAAOqI,EAAMnwB,MAAMowB,GAAOC,YAChCmD,EAAQt0B,WAAW4oB,EAAKpwB,MAAM+7B,EAAS97B,IAAImwB,KAG7ChzB,EAAIK,IAAIm6B,4BAA4BwC,EAAO,IAAIpxB,OAAKoxB,EAAMp0B,EAAGo0B,EAAMt0B,EAAGs0B,EAAMr0B,IAC5E3I,EAAII,GAAKs+B,EAAQj8B,SAASu6B,EAAMp6B,MAAMu6B,EAASt6B,IAAIm6B,KACnD,MAEF,IAAK,OAAQ,CACX,MAAM4B,EAAYrkB,EAASta,aAAa,aAAaC,WAC/C2+B,EAAYtkB,EAASta,aAAa,aAAaC,WAC/C4+B,EAAcvkB,EAASta,aAAa,eAAeC,WACnD88B,EAAQ4B,EAAUv+B,IAAIC,WACtBy+B,EAAYzB,EAAO76B,SAASm8B,EAAUx+B,IAAIyC,IAAIm6B,GAC9CgC,EAAgBF,EAActzB,KAAKyzB,IAAIJ,GAAaE,EAC1D,IAAIL,EAAUpB,EACd,GAAIgB,EAAW,CACb,MAAMY,EAAOZ,EAAUl+B,GAAGqC,SAASm8B,EAAUx+B,IAC7C8+B,EAAKjC,gBAAgBD,EAAMp6B,MAAMs8B,EAAKr8B,IAAIm6B,KAC1C0B,EAAUE,EAAUx+B,GAAGmD,IAAI27B,EAAK3D,YAAY34B,MAAMo8B,IAClDN,EAAQt0B,WAAW4yB,EAAMp6B,MAAMm8B,IAEjC,MAAMI,EAAMT,EAAQj8B,SAASm8B,EAAUx+B,IACvCJ,EAAIK,IAAIm6B,4BAA4BwC,EAAOmC,GAC3C,MAAMC,EAAM,IAAIlM,OAChBkM,EAAIzzB,oBAAoB,IAAIC,OAAK,EAAG,EAAG,GAAIizB,GAC3C7+B,EAAIK,IAAIg/B,gBAAgBD,GACxBp/B,EAAII,GAAKs+B,EAET,MACM1zB,EADS4zB,EAAUv+B,IAAIC,WACR2K,QAAQjL,EAAIK,IAAIC,YACrCyC,QAAQ6S,IAAI5K,EAAO6zB,GACnB,MAEF,IAAK,WAAY,CACf,MAAMD,EAAYrkB,EAASta,aAAa,aAAaC,WAC/C4L,EAASyO,EAASta,aAAa,UAAUC,WAAa0+B,EAAUt0B,GAAG5B,EACnEs0B,EAAQ4B,EAAUv+B,IAAIC,WACtBy+B,EAAYzB,EAAO76B,SAASm8B,EAAUx+B,IAAIyC,IAAIm6B,GAC9CI,EAAcwB,EAAUx+B,GAAGmD,IAAIy5B,EAAMp6B,MAAMm8B,IAE3C1B,EAAYC,EAAO76B,SAAS26B,GAC5B94B,EAAS+4B,EAAU/4B,SACzB,IAAIo6B,EAAUtB,EAAY75B,IAAI85B,EAAUz6B,MAAMkJ,EAASxH,IACvD,GAAIg6B,EAAW,CACb,MAAMY,EAAOZ,EAAUl+B,GAAGqC,SAASm8B,EAAUx+B,IAC7C8+B,EAAKjC,gBAAgBD,EAAMp6B,MAAMs8B,EAAKr8B,IAAIm6B,KAC1C0B,EAAUE,EAAUx+B,GAAGmD,IAAI27B,EAAK3D,YAAY34B,MAAMkJ,IAClD4yB,EAAQt0B,WAAW4yB,EAAMp6B,MAAMm8B,IAEjC,MAAMI,EAAMT,EAAQj8B,SAASm8B,EAAUx+B,IACvCJ,EAAIK,IAAIm6B,4BAA4BwC,EAAOmC,GAC3C,MAAMC,EAAM,IAAIlM,OAChBkM,EAAIzzB,oBAAoB,IAAIC,OAAK,EAAG,EAAG,GAAc,GAAVJ,KAAKU,IAChDlM,EAAIK,IAAIg/B,gBAAgBD,GACxBp/B,EAAII,GAAKs+B,EACT,MAEF,QACE37B,QAAQ6S,IAAI,2BAA4BsnB,IAI9C,OAAOl9B,GAGT,GAAkB,GAAdR,KAAKm0B,MAAY,CACnB,MAAMpZ,SAAEA,GAAaha,EAAM8Z,iBAC3B,GAAI7a,KAAK8/B,aAAa/kB,GAAW,CAC/B,MAAMxR,EAAQvJ,KAAKE,WAAWQ,WAC9BV,KAAK08B,YAAc,IAAIjB,GAAa,eAAgBlyB,GACpDvJ,KAAK8G,QAAQC,MAAMC,UAAUmD,SAASnK,KAAK08B,aAE3C,MAAMz6B,EAAMlB,EAAMmB,WACZ47B,EAAS77B,EAAIiB,MAAMa,IAAI9B,EAAIkB,IAAIC,MAAMrC,EAAM8Z,iBAAiB1Y,OAC5DksB,EAAOwQ,EAAc9jB,EAAU+iB,GACrC99B,KAAK08B,YAAYqD,QAAQ1R,GAEzBruB,KAAKggC,UAAYjlB,EACjB/a,KAAKigC,QAAUnC,EAEf99B,KAAKm0B,QACLpzB,EAAMI,wBAEH,GAAkB,GAAdnB,KAAKm0B,MAAY,CAC1B,MAAMpZ,SAAEA,GAAaha,EAAM8Z,iBAC3B,GAAI7a,KAAK8/B,aAAa/kB,GAAW,CAC/B,MAAM9Y,EAAMlB,EAAMmB,WAEZqsB,EAAOsQ,EAAc9jB,EADZ9Y,EAAIiB,MAAMa,IAAI9B,EAAIkB,IAAIC,MAAMrC,EAAM8Z,iBAAiB1Y,QAG5DksB,EAAOwQ,EAAc7+B,KAAKggC,UAAWhgC,KAAKigC,QAAS1R,GACzDvuB,KAAK08B,YAAYqD,QAAQ1R,GAGzBruB,KAAK08B,YAAYwD,QAAQ3R,GAEzB,MAAMyO,EAAoB,IAAIP,GAAkBz8B,KAAK08B,aACrD14B,EAAgBwG,cAAcC,UAAUuyB,GAEpCh9B,KAAKi9B,kBAAkBj9B,KAAKi9B,iBAAiBtqB,gBAAgB,WAAW,GACxE3S,KAAKk9B,kBAAkBl9B,KAAKk9B,iBAAiBvqB,gBAAgB,WAAW,GAE5E3S,KAAKm0B,MAAQ,EACbpzB,EAAMI,oBAUZtB,cAAckB,GAEZ,KAAIA,EAAM4Y,QAAiC,UAAtB5Y,EAAM0Y,aAA4C,IAAjB1Y,EAAM2Y,QAE5D,GAAkB,GAAd1Z,KAAKm0B,MACP,GAAIpzB,EAAM8Z,iBAAkB,CAC1B,MAAME,SAAEA,GAAaha,EAAM8Z,iBAC3B,GAAI7a,KAAK8/B,aAAa/kB,IAChBA,GAAY/a,KAAKi9B,iBAAkB,CACjCj9B,KAAKi9B,kBACPj9B,KAAKi9B,iBAAiBtqB,gBAAgB,WAAW,GAEnD3S,KAAKi9B,iBAAmBliB,EACxB,MAAMxR,EAAQvJ,KAAKE,WAAWQ,WAAWqC,QACzCwG,EAAMhB,EAAI,GACVvI,KAAKi9B,iBAAiB5qB,aAAa,UAAW9I,GAAO,SAIrDvJ,KAAKi9B,mBACPj9B,KAAKi9B,iBAAiBtqB,gBAAgB,WAAW,GACjD3S,KAAKi9B,iBAAmB,WAGvB,GAAkB,GAAdj9B,KAAKm0B,MACd,GAAIpzB,EAAM8Z,iBAAkB,CAC1B,MAAME,SAAEA,GAAaha,EAAM8Z,iBAC3B,GAAIE,GAAY/a,KAAKi9B,kBAAoBliB,GAAY/a,KAAKk9B,kBAAoBl9B,KAAK8/B,aAAa/kB,GAAW,CACrG/a,KAAKk9B,kBACPl9B,KAAKk9B,iBAAiBvqB,gBAAgB,WAAW,GAEnD3S,KAAKk9B,iBAAmBniB,EAExB,MAAMxR,EAAQvJ,KAAKE,WAAWQ,WAAWqC,QACzCwG,EAAMhB,EAAI,GACVvI,KAAKk9B,iBAAiB7qB,aAAa,UAAW9I,GAAO,SAGnDvJ,KAAKk9B,mBACPl9B,KAAKk9B,iBAAiBvqB,gBAAgB,WAAW,GACjD3S,KAAKk9B,iBAAmB,MAWhCr9B,YAAYkB,GACNf,KAAKuY,WACPvY,KAAKuY,UAAW,EAChBvY,KAAKg9B,kBAAoB,KACrBh9B,KAAKi9B,kBAAkBj9B,KAAKi9B,iBAAiBtqB,gBAAgB,WAAW,GAC5E5R,EAAMI,gHCvQZ,cAA+B+yB,EAK7Br0B,YAAYiH,GACV/G,MAAM+G,GAQRjH,YAAYW,GACVR,KAAKuE,OAAS,IAAIgyB,EAAmBv2B,KAAKwO,WAAYhO,GACtDwD,EAAgBwG,cAAcC,UAAUzK,KAAKuE,QAE7CvE,KAAKQ,IAAMA,EACXR,KAAKm0B,MAAQ,EACbn0B,KAAKsM,OAAS,EAQhBzM,WAAWk1B,GACT/0B,KAAKsM,OAASyoB,EAAGoL,WAAWngC,KAAKQ,IAAII,IACrCZ,KAAKuE,OAAOwB,OAAO,CAAEuG,OAAQtM,KAAKsM,SAClCtM,KAAK8G,QAAQuN,SAAS+rB,cAQxBvgC,cAAck1B,GACO,GAAf/0B,KAAKsM,QACPtI,EAAgBwG,cAAc0qB,SAGhCl1B,KAAKuE,OAAS,KACdvE,KAAKm0B,MAAQ,EACbn0B,KAAKO,KAAK,0DC7Cd,cAA6B2zB,EAK3Br0B,YAAYiH,GACV/G,MAAM+G,GAQRjH,YAAYW,GACVR,KAAKQ,IAAMA,EACXR,KAAKgQ,OAASxP,EAAI0K,UAClBlL,KAAKuE,OAAS,IAAI8xB,EAAiBr2B,KAAKwO,WAAYhO,EAAKR,KAAKE,WAAWQ,YACzEsD,EAAgBwG,cAAcC,UAAUzK,KAAKuE,QAE7CvE,KAAKm0B,MAAQ,EACbn0B,KAAKqgC,QAAU,EACfrgC,KAAKsgC,QAAU,EAQjBzgC,WAAWk1B,GACT,GAAkB,GAAd/0B,KAAKm0B,MAAY,CACnB,MAAMwL,EAAM5K,EAAG9xB,SAASjD,KAAKQ,IAAII,IAEjCZ,KAAKqgC,QAAUV,EAAI76B,SACnB9E,KAAKuE,OAAOwB,OAAO,CAAEuG,OAAQtM,KAAKqgC,eAElCrgC,KAAKsgC,QAAUtgC,KAAKgQ,OAAOhH,cAAc+rB,GAAI5rB,EAC7CnJ,KAAKuE,OAAOwB,OAAO,CAAEgc,OAAQ/hB,KAAKsgC,UAStCzgC,cAAck1B,GAMZ,GALoB,GAAhB/0B,KAAKqgC,UACPr8B,EAAgBwG,cAAc0qB,SAC9Bl1B,KAAKm0B,MAAQ,EACbn0B,KAAKO,KAAK,mBAEM,GAAdP,KAAKm0B,MAAY,CACnBn0B,KAAKm0B,MAAQ,EAEb,MAAMoM,EAAO,IAAI7M,OACjB6M,EAAKp0B,oBAAoB,IAAIC,OAAK,EAAG,EAAG,GAAc,GAAVJ,KAAKU,IACjD1M,KAAK00B,kBAAkB7zB,IAAMb,KAAK00B,kBAAkB7zB,IAAIsK,SAASo1B,GACjEvgC,KAAK00B,kBAAkB9zB,GAAKm0B,EAC5B/0B,KAAKgQ,OAAShQ,KAAK00B,kBAAkBxpB,eACd,GAAdlL,KAAKm0B,QACdn0B,KAAKm0B,MAAQ,EACbn0B,KAAKO,KAAK,gEC/DhB,cAA+B2zB,EAM7Br0B,YAAYiH,GACV/G,MAAM+G,GAQRjH,YAAYW,GACVR,KAAKuE,OAAS,IAAIgzB,GAAmBv3B,KAAKwO,WAAYhO,EAAKR,KAAKE,WAAWQ,YAC3EsD,EAAgBwG,cAAcC,UAAUzK,KAAKuE,QAE7CvE,KAAKQ,IAAMA,EACXR,KAAKgQ,OAASxP,EAAI0K,UAClBlL,KAAKm0B,MAAQ,EACbn0B,KAAKsgC,QAAU,EAQjBzgC,WAAWk1B,GACT,GAAkB,GAAd/0B,KAAKm0B,MAAY,CACnB,MAAMrwB,EAAQ9D,KAAKgQ,OAAOhH,cAAc+rB,GAGxC/0B,KAAKuE,OAAOwB,OAAO,CACjB4wB,SAAU,CAAC3qB,KAAKuN,IAAIzV,EAAMoF,GAAI8C,KAAKuN,IAAIzV,EAAMqF,IAC7CvI,GAAIZ,KAAKQ,IAAII,GAAGmD,IAAID,EAAMV,MAAM,WAE7B,CACL,MAAMu8B,EAAM3/B,KAAKgQ,OAAOhH,cAAc+rB,GACtC/0B,KAAKuE,OAAOwB,OAAO,CAAEgc,OAAQ4d,EAAIx2B,KASrCtJ,cAAck1B,GACZ,GAAkB,GAAd/0B,KAAKm0B,MAAY,CACnBn0B,KAAKm0B,MAAQ,EACbn0B,KAAKwgC,IAAMzL,EAEX,MAAMwL,EAAO,IAAI7M,OACjB6M,EAAKp0B,oBAAoB,IAAIC,OAAK,EAAG,EAAG,GAAc,GAAVJ,KAAKU,IACjD1M,KAAK00B,kBAAkB7zB,IAAMb,KAAK00B,kBAAkB7zB,IAAIsK,SAASo1B,GACjEvgC,KAAK00B,kBAAkB9zB,GAAKm0B,EAC5B/0B,KAAKgQ,OAAShQ,KAAK00B,kBAAkBxpB,eACd,GAAdlL,KAAKm0B,QACdn0B,KAAKm0B,MAAQ,EACbn0B,KAAKO,KAAK,2EC9DhB,cAAqC21B,EAMnCr2B,YAAYiH,GACV/G,MAAM+G,GAEN9G,KAAKygC,GAAKzgC,KAAKG,aAAa,IAAIugC,mBAAiB,sCAAsC,IAQzF7gC,YAAYW,GACV,MAAM+I,EAAQvJ,KAAKE,WAAWQ,WACxBo1B,EAAgB91B,KAAK81B,cAAcp1B,WAEzCV,KAAKuE,OAAS,IAAIqyB,EAAyB52B,KAAKwO,WAAYhO,EAAK+I,EAAOusB,GACxE9xB,EAAgBwG,cAAcC,UAAUzK,KAAKuE,QAE7CvE,KAAKQ,IAAMA,EACXR,KAAKgQ,OAASxP,EAAI0K,UAClBlL,KAAKm0B,MAAQ,EACbn0B,KAAK2gC,MAAQngC,EAAII,GACjBZ,KAAK8E,OAAS,EAQhBjF,WAAWk1B,GACT,MAAM6L,EAAI5gC,KAAKgQ,OAAOhH,cAAc+rB,GAC9BjxB,EAAQ88B,EAAE39B,SAASjD,KAAK2gC,OAAO77B,SACrC9E,KAAKuE,OAAOwB,OAAO,CACjBkxB,MAAO2J,IAGT5gC,KAAK8E,QAAUhB,EACf9D,KAAK2gC,MAAQC,EAQf/gC,cAAck1B,GACO,GAAf/0B,KAAK8E,QACPd,EAAgBwG,cAAc0qB,SAGhCl1B,KAAKm0B,MAAQ,EACbn0B,KAAKO,KAAK,kGC3Dd,cAA6B2zB,EAK3Br0B,YAAYiH,GACV/G,MAAM+G,GAQRjH,YAAYW,GACVR,KAAKuE,OAAS,IAAImyB,EAAiB12B,KAAKwO,WAAYhO,GACpDwD,EAAgBwG,cAAcC,UAAUzK,KAAKuE,QAE7CvE,KAAKQ,IAAMA,EACXR,KAAKgQ,OAASxP,EAAI0K,UAClBlL,KAAKm0B,MAAQ,EACbn0B,KAAK6gC,MAAQ,EAQfhhC,WAAWk1B,GACT,GAAkB,GAAd/0B,KAAKm0B,MAAY,CACnB,MAAMrwB,EAAQ9D,KAAKgQ,OAAOhH,cAAc+rB,GAEtC/0B,KAAK6gC,MAAQ70B,KAAKuN,IAAIzV,EAAMoF,GAAK8C,KAAKuN,IAAIzV,EAAMqF,GAGlDnJ,KAAKuE,OAAOwB,OAAO,CACjB4wB,SAAU,CAAC3qB,KAAKuN,IAAIzV,EAAMoF,GAAI8C,KAAKuN,IAAIzV,EAAMqF,IAC7CvI,GAAIZ,KAAKQ,IAAII,GAAGmD,IAAID,EAAMV,MAAM,WAE7B,CACL,MAAMu8B,EAAM3/B,KAAKgQ,OAAOhH,cAAc+rB,GACtC/0B,KAAKuE,OAAOwB,OAAO,CAAEgc,OAAQ4d,EAAIx2B,KASrCtJ,cAAck1B,GACM,GAAd/0B,KAAK6gC,OACP78B,EAAgBwG,cAAc0qB,SAEhCl1B,KAAKm0B,MAAQ,EACbn0B,KAAKO,KAAK,+DCxDd,cAA+B2zB,EAM7Br0B,YAAYiH,GACV/G,MAAM+G,GAQRjH,YAAYW,GACVR,KAAKuE,OAAS,IAAI6yB,GAAmBp3B,KAAKwO,WAAYhO,EAAKR,KAAKE,WAAWQ,YAC3EsD,EAAgBwG,cAAcC,UAAUzK,KAAKuE,QAE7CvE,KAAKQ,IAAMA,EACXR,KAAKm0B,MAAQ,EACbn0B,KAAKsM,OAAS,EAQhBzM,WAAWk1B,GACT/0B,KAAKsM,OAASyoB,EAAGoL,WAAWngC,KAAKQ,IAAII,IACrCZ,KAAKuE,OAAOwB,OAAO,CAAEuG,OAAQtM,KAAKsM,SAQpCzM,cAAck1B,GACO,GAAf/0B,KAAKsM,QACPtI,EAAgBwG,cAAc0qB,SAEhCl1B,KAAKm0B,MAAQ,EACbn0B,KAAKO,KAAK,+RC9Cd,cAAwCZ,EAMtCE,YAAYC,GACVC,MAAMD,GASRD,eAAeoG,EAAOmE,GAAQ,GAE5B,GADApK,KAAKiG,MAAQA,EACTmE,EAAO,CACT,MAAMC,EAAgB,KACpBrK,KAAKS,aAAa,aAAa8F,SAASN,EAAMvF,aAEhD2J,IACApE,EAAMtB,GAAG,eAAgB0F,IAS7BxK,iBACE,OAAOG,KAAKiG,MAAQjG,KAAKiG,MAAQjG,KAAKS,aAAa,aAYrDZ,kBAAkBkB,GAChBf,KAAK+B,SAAW,IAAIpB,MACpB,MAAMsB,EAAMlB,EAAMmB,WACZ4+B,EAAY//B,EAAMM,SAASwzB,YAAYp0B,aAAa,aAAaC,WACvEV,KAAK+B,SAASoB,IAAM29B,EAAUjgC,IAAIC,WAClC,MACMyJ,EADQvK,KAAKsK,iBACG5J,WACtBV,KAAK+B,SAASmB,MAAQqH,EAAQ3J,GAC9B,MAAMuB,EAAOF,EAAIG,kBAAkBpC,KAAK+B,UAGxC,OAFAhB,EAAMsB,QAAUJ,EAAIK,YAAYH,GAChCnC,KAAKuC,YAAYxB,IACV,EASTlB,kBAAkBkB,GAChB,MAAMkB,EAAMlB,EAAMmB,WACZC,EAAOF,EAAIG,kBAAkBpC,KAAK+B,UAGxC,OAFAhB,EAAMyB,QAAUP,EAAIK,YAAYH,GAChCnC,KAAKyC,OAAO1B,IACL,EASTlB,gBAAgBkB,GACd,MAAMkB,EAAMlB,EAAMmB,WAClB,GAAID,EAAK,CACP,MAAME,EAAOF,EAAIG,kBAAkBpC,KAAK+B,UACxChB,EAAM2B,WAAaT,EAAIK,YAAYH,GAIrC,OADAnC,KAAK2C,UAAU5B,IACR,EAWTlB,YAAYkB,GACVf,KAAKqC,QAAUtB,EAAMsB,QACrB,MAAM4D,EAAQjG,KAAKsK,iBACnBtK,KAAKuK,QAAUtE,EAAMvF,WAErBV,KAAKuE,OAAS,IAAIyB,EAAqBC,GACvCjC,EAAgBwG,cAAcC,UAAUzK,KAAKuE,QAQ/C1E,OAAOkB,GACL,MAAM2J,EAAU3J,EAAMyB,QAAQS,SAASjD,KAAKqC,SAEtCsI,EAAS3K,KAAKuK,QAAQxH,QAC5B4H,EAAO/J,GAAGgK,WAAWF,GAErB1K,KAAKuE,OAAOwB,OAAO,CACjBlC,MAAO8G,IASX9K,UAAUkB,GACRf,KAAKuE,OAAS"}