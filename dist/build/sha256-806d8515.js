const A=()=>{const A=window.navigator.userAgent;let g=null;return/macintosh/i.test(A)?g="macOS":/ios/i.test(A)?g="iOS":/win/i.test(A)?g="Windows":/android/i.test(A)?g="Android":/linux/i.test(A)&&(g="Linux"),g},g=function(){if(!globalThis.navigator)return{OS:"Node",isMobileDevice:!1,isIOSDevice:!1,browserName:"Node",webGLSupported:!1,deviceCategory:"High",hardwareConcurrency:4};const g=null!=(navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/webOS/i)||navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i)||navigator.userAgent.match(/BlackBerry/i)||navigator.userAgent.match(/Pixel/i)||navigator.userAgent.match(/Windows Phone/i)),I=function(){const A=navigator.userAgent;let g,I,C,i=navigator.appName,e=""+parseFloat(navigator.appVersion),t=parseInt(navigator.appVersion,10);return navigator.brave?(i="Brave",I=A.indexOf("Chrome"),e=A.substring(I+7,A.indexOf(" ",I+7))):-1!=(I=A.indexOf("Opera"))?(i="Opera",e=A.substring(I+6),-1!=(I=A.indexOf("Version"))&&(e=A.substring(I+8))):-1!=(I=A.indexOf("MSIE"))?(i="Microsoft Internet Explorer",e=A.substring(I+5)):-1!=(I=A.indexOf("Edge"))?(i="Edge",e=A.substring(I+4)):-1!=(I=A.indexOf("Chrome"))?(i="Chrome",e=A.substring(I+7,A.indexOf(" ",I+7))):-1!=(I=A.indexOf("Safari"))?(i="Safari",e=A.substring(I+7),-1!=(I=A.indexOf("Version"))&&(e=A.substring(I+8))):-1!=(I=A.indexOf("Firefox"))?(i="Firefox",e=A.substring(I+8)):(g=A.lastIndexOf(" ")+1)<(I=A.lastIndexOf("/"))&&(i=A.substring(g,I),e=A.substring(I+1),i.toLowerCase()==i.toUpperCase()&&(i=navigator.appName)),-1!=(C=e.indexOf(";"))&&(e=e.substring(0,C)),-1!=(C=e.indexOf(" "))&&(e=e.substring(0,C)),t=parseInt(""+e,10),isNaN(t)&&(e=""+parseFloat(navigator.appVersion),t=parseInt(navigator.appVersion,10)),{browserName:i,fullVersion:e,majorVersion:t,appName:navigator.appName,userAgent:navigator.userAgent}}(),C=function(){let A,g;try{A=document.createElement("canvas").getContext("webgl")}catch(A){}if(!A)return{vendor:"Unknown",renderer:"Unknown",gpuVendor:"Unknown",maxTextureSize:0,supportsWebGL:!1,supportsWebGL2:!1};try{g=document.createElement("canvas").getContext("webgl2")}catch(A){}const I=A.getExtension("WEBGL_debug_renderer_info");if(!I)return console.warn("Unable to determine GPU Info:"),{vendor:"Unknown",renderer:"Unknown",gpuVendor:"Unknown",maxTextureSize:0,supportsWebGL:null!=A,supportsWebGL2:null!=g};const C=A.getParameter(I.UNMASKED_VENDOR_WEBGL),i=A.getParameter(I.UNMASKED_RENDERER_WEBGL),e=A.getParameter(A.MAX_TEXTURE_SIZE);let t;return i.match(/NVIDIA/i)?t="NVidia":i.match(/AMD/i)||i.match(/Radeon/i)?t="AMD":i.match(/Intel/i)?t="Intel":i.match(/Mali/i)?t="ARM":i.match(/Apple/i)?t="Apple":i.match(/Adreno/i)?t="Adreno":i.match(/Swiftshader/i)?(t="Google",console.warn("Hardware rendering is disabled or not working on your system. Falling back to the Swiftshader. Expect poor performance:",i)):console.warn("Unable to determine GPU vendor:",i),{vendor:C,renderer:i,gpuVendor:t,maxTextureSize:e,supportsWebGL:!0,supportsWebGL2:null!=g}}();let i="Low";if(C.supportsWebGL)if(g)i="Low";else{const A=C.renderer.replace(/[()]/g,"").split(" ");if("NVidia"==C.gpuVendor){const g=A.indexOf("GTX");if(-1!=g){const I=A[g+1];if(I.endsWith("M")){i=parseInt(I.substring(0,I.length-2))>=900?"Medium":"Low"}else{i=parseInt(I)>=1030?"High":"Medium"}}else i=A.includes("RTX")||A.includes("TITAN")||A.includes("Quadro")?"High":"Low"}else if("AMD"==C.gpuVendor){const g=A.indexOf("Radeon");if(-1!=g){const I=A.indexOf("RX");if(-1!=I)if("Vega"==A[I+1])i="High";else{const g=A[I+1];let C;g.endsWith("X")?(C=parseInt(g.substring(0,g.length-2)),i="High"):C=parseInt(g),i=C>=480?"High":"Medium"}else if("Pro"==A[g+1]){i=parseInt(A[I+1])>=450?"Medium":"Low"}else if("Sky"==A[g+1]){i=parseInt(A[I+1])>=700?"Medium":"Low"}else i="Low"}else i=A.includes("FirePro")||A.includes("Quadro")?"High":"Low"}else("Adreno"==C.gpuVendor||"Intel"==C.gpuVendor||"Google"==C.gpuVendor)&&(i="Low")}let e=globalThis.navigator.hardwareConcurrency;return e||(e=g?4:6),{OS:A(),isMobileDevice:g,isIOSDevice:null!=(navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i)),browserName:I.browserName,fullVersion:I.fullVersion,majorVersion:I.majorVersion,appName:I.appName,userAgent:I.userAgent,webGLSupported:C.supportsWebGL,gpuDesc:C,deviceCategory:i,hardwareConcurrency:e}}();globalThis.ZeaSystemDesc||(globalThis.ZeaSystemDesc=g);let I={},C={},i=[];class e{static register(A,g){if(A in I)return void console.warn(`There's a class registered with '${A}' name. Second registration failed.`);const e=i.length;i.push(g),C[e]=A,I[A]=e}static getClassDefinition(A){if(!(A in I))throw new Error(`${A} class is not registered`);return i[I[A]]}static getClassName(A){const g=i.indexOf(A);if(g>=0&&C[g])return C[g];throw new Error("class is not registered")}static constructClass(A){const g=i[I[A]];if(!g)throw new Error(`${A} class is not registered`);return new g}static flush(){I={},C={},i=[]}}class t{static replaceAll(A,g,I){return A.replace(new RegExp(g,"g"),I)}static stringifyJSONWithFixedPrecision(A,g=0,I=5){return JSON.stringify(A,((A,g)=>g&&g.toFixed?Number(g.toFixed(I)):g),g)}static hashStr(A){let g,I,C,i=0;if(0===A.length)return i;for(g=0,C=A.length;g<C;g++)I=A.charCodeAt(g),i=(i<<5)-i+I,i|=0;return Math.abs(i)}}class B{constructor(A=0,g=0){A instanceof Float32Array||A instanceof Uint32Array||A instanceof Int32Array?this.__data=A:"number"==typeof A&&"number"==typeof g?(this.__data=new Float32Array(2),this.__data[0]=A,this.__data[1]=g):"object"==typeof A?(this.__data=new Float32Array(2),this.fromJSON(A)):this.__data=new Float32Array(2)}get x(){return this.__data[0]}set x(A){this.__data[0]=A}get y(){return this.__data[1]}set y(A){this.__data[1]=A}set(A,g){this.__data[0]=A,this.__data[1]=g}setFromOther(A){this.x=A.x,this.y=A.y}isEqual(A){return this.x==A.x&&this.y==A.y}notEqual(A){return this.x!=A.x&&this.y!=A.y}approxEqual(A,g=Number.EPSILON){return Math.abs(this.x-A.x)<g&&Math.abs(this.y-A.y)<g}add(A){return new B(this.x+A.x,this.y+A.y)}addInPlace(A){this.x+=A.x,this.y+=A.y}subtract(A){return new B(this.x-A.x,this.y-A.y)}subtractInPlace(A){return this.x-=A.x,this.y-=A.y,this}scale(A){return new B(this.x*A,this.y*A)}scaleInPlace(A){this.x*=A,this.y*=A}invert(){return new B(1/this.x,1/this.y)}invertInPlace(){return this.x=1/this.x,this.y=1/this.y,this}multiply(A){return new B(this.x*A.x,this.y*A.y)}multiplyInPlace(A){this.x*=A.x,this.y*=A.y}lengthSquared(){const A=this.__data[0],g=this.__data[1];return A*A+g*g}length(){return Math.sqrt(this.lengthSquared())}distanceTo(A){const g=this.__data[0]-A.x,I=this.__data[1]-A.y;return Math.sqrt(g*g+I*I)}normalize(){const A=this.__data[0],g=this.__data[1];let I=A*A+g*g;return I<Number.EPSILON?new B:(I=1/Math.sqrt(I),new B(A*I,g*I))}normalizeInPlace(){const A=this.__data[0],g=this.__data[1];let I=A*A+g*g;I<Number.EPSILON||(I=1/Math.sqrt(I),this.set(A*I,g*I))}dot(A){return this.x*A.x+this.y*A.y}cross(A){return this.x*A.y-this.y*A.x}angleTo(A){const g=this.normalize().dot(A.normalize());return g>1?0:g<-1?Math.PI:Math.acos(g)}signedAngleTo(A){const g=this.angleTo(A);return this.cross(A)<0?-g:g}rotate(A){const g=Math.cos(A),I=Math.sin(A);return new B(this.x*g-this.y*I,this.x*I+this.y*g)}lerp(A,g){const I=this.x,C=this.y;return new B(I+g*(A.x-I),C+g*(A.y-C))}setRandomDir(A=1){const g=2*Math.random()*Math.PI;return this.__data[0]=Math.cos(g)*A,this.__data[1]=Math.sin(g)*A,this}setRandom(A=1){return this.__data[0]=Math.random()*A,this.__data[1]=Math.random()*A,this}clone(){return new B(this.__data[0],this.__data[1])}asArray(){return this.__data}toString(){return t.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.x,y:this.y}}fromJSON(A){this.x=A.x,this.y=A.y}readBinary(A){this.x=A.loadFloat32(),this.y=A.loadFloat32()}static intersectionOfLines(A,g,I,C){const i=(A.x-g.x)*(I.y-C.y)-(A.y-g.y)*(I.x-C.x);if(0==i)return null;const e=A.x*g.y-A.y*g.x,t=I.x*C.y-I.y*C.x,o=I.x-C.x,s=A.x-g.x,a=I.y-C.y,l=A.y-g.y;return new B((e*o-s*t)/i,(e*a-l*t)/i)}isValid(){for(const A of this.__data)if(A==1/0||isNaN(A))return!1;return!0}}class o{constructor(A=0,g=0,I=0){if(A instanceof Float32Array||A instanceof Uint32Array)this.__data=A;else if(A instanceof ArrayBuffer){console.warn("deprecated, please use new Vec3(new Float32Array(buffer, byteOffset, 3))");const I=A,C=g;this.__data=new Float32Array(I,C,3)}else"number"==typeof A&&"number"==typeof g&&"number"==typeof I?(this.__data=new Float32Array(3),this.__data[0]=A,this.__data[1]=g,this.__data[2]=I):null!=A&&"object"==typeof A?(this.__data=new Float32Array(3),this.fromJSON(A)):this.__data=new Float32Array(3)}get x(){return this.__data[0]}set x(A){this.__data[0]=A}get y(){return this.__data[1]}set y(A){this.__data[1]=A}get z(){return this.__data[2]}set z(A){this.__data[2]=A}get xy(){return new B(this.__data[0],this.__data[1])}get yz(){return new B(this.__data[1],this.__data[2])}set(A,g,I){this.x=A,this.y=void 0!==g?g:A,this.z=void 0!==I?I:A}setDataArray(A){this.__data=A}setFromOther(A){this.x=A.x,this.y=A.y,this.z=A.z}isNull(){return Math.abs(this.x)<Number.EPSILON&&Math.abs(this.y)<Number.EPSILON&&Math.abs(this.z)<Number.EPSILON}is111(){return Math.abs(1-this.x)<Number.EPSILON&&Math.abs(1-this.y)<Number.EPSILON&&Math.abs(1-this.z)<Number.EPSILON}isEqual(A){return this.x==A.x&&this.y==A.y&&this.z==A.z}notEqual(A){return this.x!=A.x&&this.y!=A.y&&this.z!=A.z}approxEqual(A,g=Number.EPSILON){return Math.abs(this.x-A.x)<g&&Math.abs(this.y-A.y)<g&&Math.abs(this.z-A.z)<g}add(A){return new o(this.x+A.x,this.y+A.y,this.z+A.z)}addInPlace(A){this.x+=A.x,this.y+=A.y,this.z+=A.z}subtract(A){return new o(this.x-A.x,this.y-A.y,this.z-A.z)}subtractInPlace(A){this.x-=A.x,this.y-=A.y,this.z-=A.z}multiply(A){return new o(this.x*A.x,this.y*A.y,this.z*A.z)}multiplyInPlace(A){this.x*=A.x,this.y*=A.y,this.z*=A.z}divide(A){return new o(this.x/A.x,this.y/A.y,this.z/A.z)}divideInPlace(A){this.x/=A.x,this.y/=A.y,this.z/=A.z}scale(A){return new o(this.x*A,this.y*A,this.z*A)}scaleInPlace(A){this.x*=A,this.y*=A,this.z*=A}negate(){return new o(-this.x,-this.y,-this.z)}inverse(){return new o(1/this.x,1/this.y,1/this.z)}lengthSquared(){const A=this.__data[0],g=this.__data[1],I=this.__data[2];return A*A+g*g+I*I}length(){return Math.sqrt(this.lengthSquared())}distanceTo(A){const g=this.__data[0]-A.x,I=this.__data[1]-A.y,C=this.__data[2]-A.z;return Math.sqrt(g*g+I*I+C*C)}normalize(){let A=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];return A<Number.EPSILON?new o:(A=1/Math.sqrt(A),new o(this.__data[0]*A,this.__data[1]*A,this.__data[2]*A))}normalizeInPlace(){let A=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];if(A<Number.EPSILON)return;A=Math.sqrt(A);const g=1/A;return this.__data[0]*=g,this.__data[1]*=g,this.__data[2]*=g,A}resize(A){const g=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];if(g<Number.EPSILON)return;const I=A/Math.sqrt(g);return new o(this.__data[0]*I,this.__data[1]*I,this.__data[2]*I)}resizeInPlace(A){const g=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];if(g<Number.EPSILON)return;const I=A/Math.sqrt(g);this.__data[0]*=I,this.__data[1]*=I,this.__data[2]*=I}dot(A){return this.x*A.x+this.y*A.y+this.z*A.z}cross(A){const g=this.x,I=this.y,C=this.z,i=A.x,e=A.y,t=A.z;return new o(I*t-C*e,C*i-g*t,g*e-I*i)}angleTo(A){const g=this.dot(A);return g>1?0:Math.acos(g)}lerp(A,g){const I=this.x,C=this.y,i=this.z;return new o(I+g*(A.x-I),C+g*(A.y-C),i+g*(A.z-i))}abs(){return new o(Math.abs(this.x),Math.abs(this.y),Math.abs(this.z))}setRandomDir(A=1){const g=2*Math.random()*Math.PI,I=2*Math.random()-1,C=Math.sqrt(1-I*I)*A;return this.__data[0]=Math.cos(g)*C,this.__data[1]=Math.sin(g)*C,this.__data[2]=I*A,this}setRandom(A=1){return this.__data[0]=(Math.random()-.5)*A,this.__data[1]=(Math.random()-.5)*A,this.__data[2]=(Math.random()-.5)*A,this}clone(){return new o(this.__data[0],this.__data[1],this.__data[2])}asArray(){return this.__data}toString(){return t.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.x,y:this.y,z:this.z}}fromJSON(A){this.x=A.x,this.y=A.y,this.z=A.z}readBinary(A){this.x=A.loadFloat32(),this.y=A.loadFloat32(),this.z=A.loadFloat32()}isValid(){for(const A of this.__data)if(A==1/0||isNaN(A))return!1;return!0}}class s{constructor(A=0,g=0,I=0,C=0){if(A instanceof Float32Array||A instanceof Uint32Array)this.__data=A;else if(A instanceof ArrayBuffer){console.warn("deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))");const I=A,C=g;this.__data=new Float32Array(I,C,4)}else"number"==typeof A&&"number"==typeof g&&"number"==typeof I&&"number"==typeof C?(this.__data=new Float32Array(4),this.__data[0]=A,this.__data[1]=g,this.__data[2]=I,this.__data[3]=C):null!=A&&"object"==typeof A?(this.__data=new Float32Array(4),this.fromJSON(A)):this.__data=new Float32Array(4)}get x(){return this.__data[0]}set x(A){this.__data[0]=A}get y(){return this.__data[1]}set y(A){this.__data[1]=A}get z(){return this.__data[2]}set z(A){this.__data[2]=A}get t(){return this.__data[3]}set t(A){this.__data[3]=A}get w(){return this.__data[3]}set w(A){this.__data[3]=A}get xyz(){return new o(this.__data[0],this.__data[1],this.__data[2])}set(A,g,I,C){this.x=A,this.y=g,this.z=I,this.t=C}setFromOther(A){this.x=A.x,this.y=A.y,this.z=A.z,this.t=A.t}isEqual(A){return this.x==A.x&&this.y==A.y&&this.z==A.z&&this.t==A.t}notEqual(A){return this.x!=A.x&&this.y!=A.y&&this.z!=A.z&&this.t!=A.t}approxEqual(A,g=Number.EPSILON){return Math.abs(this.x-A.x)<g&&Math.abs(this.y-A.y)<g&&Math.abs(this.z-A.z)<g&&Math.abs(this.t-A.t)<g}add(A){return new s(this.x+A.x,this.y+A.y,this.z+A.z,this.t+A.t)}addInPlace(A){this.x+=A.x,this.y+=A.y,this.z+=A.z,this.t+=A.t}subtract(A){return new s(this.x-A.x,this.y-A.y,this.z-A.z,this.t-A.t)}subtractInPlace(A){this.x-=A.x,this.y-=A.y,this.z-=A.z,this.t-=A.t}multiply(A){return new s(this.x*A.x,this.y*A.y,this.z*A.z,this.t*A.t)}multiplyInPlace(A){this.x*=A.x,this.y*=A.y,this.z*=A.z,this.t*=A.t}divide(A){return new s(this.x/A.x,this.y/A.y,this.z/A.z,this.t/A.t)}divideInPlace(A){this.x/=A.x,this.y/=A.y,this.z/=A.z,this.t/=A.t}scale(A){return new s(this.x*A,this.y*A,this.z*A,this.t*A)}scaleInPlace(A){this.set(this.x*A,this.y*A,this.z*A,this.t*A)}length(){const A=this.__data[0],g=this.__data[1],I=this.__data[2],C=this.__data[2];return Math.sqrt(A*A+g*g+I*I+C*C)}lengthSquared(){const A=this.__data[0],g=this.__data[1],I=this.__data[2],C=this.__data[3];return A*A+g*g+I*I+C*C}normalize(){const A=this.__data[0],g=this.__data[1],I=this.__data[2],C=this.__data[3];let i=A*A+g*g+I*I+C*C;return i<Number.EPSILON?new s:(i=1/Math.sqrt(i),new s(A*i,g*i,I*i))}normalizeInPlace(){const A=this.__data[0],g=this.__data[1],I=this.__data[2],C=this.__data[3];let i=A*A+g*g+I*I+C*C;i<Number.EPSILON||(i=1/Math.sqrt(i),this.set(A*i,g*i,I*i,C*i))}dot(A){return this.x*A.x+this.y*A.y+this.z*A.z+this.t*A.t}cross(A){const g=this.x,I=this.y,C=this.z,i=this.t,e=A.x,t=A.y,B=A.z,o=A.t;return new s(I*B-C*t,C*o-i*B,i*e-g*o,g*t-I*e)}angleTo(A){const g=this.normalize(),I=A.normalize(),C=g.dot(I);return C>1?0:Math.acos(C)}lerp(A,g){const I=this.x,C=this.y,i=this.z,e=this.t;return new s(I+g*(A.x-I),C+g*(A.y-C),i+g*(A.z-i),e+g*(A.t-e))}clone(){return new s(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}toVec3(){return new o(this.__data[0],this.__data[1],this.__data[2])}asArray(){return this.__data}toString(){return t.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.x,y:this.y,z:this.z,t:this.t}}fromJSON(A){this.x=A.x,this.y=A.y,this.z=A.z,this.t=A.t}readBinary(A){this.x=A.loadFloat32(),this.y=A.loadFloat32(),this.z=A.loadFloat32(),this.t=A.loadFloat32()}isValid(){for(const A of this.__data)if(A==1/0||isNaN(A))return!1;return!0}}class a{constructor(A=0,g=0,I=0,C=255){if(A instanceof Uint8Array)this.__data=A;else if(A instanceof ArrayBuffer){const I=A,C=g;this.__data=new Uint8Array(I,C,4)}else this.__data=new Uint8Array(4),"string"==typeof A?A.startsWith("#")?this.setFromHex(A):this.setFromCSSColorName(A):(this.__data[0]=A,this.__data[1]=g,this.__data[2]=I,this.__data[3]=C)}get r(){return this.__data[0]}set r(A){this.__data[0]=A}get g(){return this.__data[1]}set g(A){this.__data[1]=A}get b(){return this.__data[2]}set b(A){this.__data[2]=A}get a(){return this.__data[3]}set a(A){this.__data[3]=A}set(A,g,I,C=255){this.r=A,this.g=g,this.b=I,this.a=C}setFromOther(A){this.r=A.r,this.g=A.g,this.b=A.b,this.a=A.a}setFromArray(A){this.r=A[0],this.g=A[1],this.b=A[2],this.a=4==A.length?A[3]:1}setFromHex(A){const g=function(A){const g=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(A);return g?{r:parseInt(g[1],16),g:parseInt(g[2],16),b:parseInt(g[3],16)}:null}(A);g?this.set(g.r,g.g,g.b):console.warn("Invalid hex code:"+A)}setFromCSSColorName(A){if(A.startsWith("#"))this.setFromHex(A);else{const g={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",honeydew:"#f0fff0",hotpink:"#ff69b4","indianred ":"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgrey:"#d3d3d3",lightgreen:"#90ee90",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370d8",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#d87093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"}[A.toLowerCase()];g&&this.setFromHex(g)}}toHex(){function A(A){const g=A.toString(16);return 1==g.length?"0"+g:g}return"#"+A(this.r)+A(this.g)+A(this.b)}equal(A){return this.r==A.r&&this.g==A.g&&this.b==A.b&&this.a==A.a}notEquals(A){return this.r!=A.r&&this.g!=A.g&&this.b!=A.b&&this.a!=A.a}approxEqual(A,g=Number.EPSILON){return Math.abs(this.r-A.r)<g&&Math.abs(this.g-A.g)<g&&Math.abs(this.b-A.b)<g&&Math.abs(this.a-A.a)<g}add(A){return new a(this.r+A.r,this.g+A.g,this.b+A.b,this.a+A.a)}subtract(A){return new a(this.r-A.r,this.g-A.g,this.b-A.b,this.a-A.a)}scale(A){return new a(this.r*A,this.g*A,this.b*A,this.a*A)}scaleInPlace(A){this.r*=A,this.g*=A,this.b*=A,this.a*=A}applyGamma(A){this.set(Math.pow(this.r,A),Math.pow(this.g,A),Math.pow(this.b,A),this.a)}toLinear(A=2.2){return new a(Math.pow(this.r,A),Math.pow(this.g,A),Math.pow(this.b,A),this.a)}toGamma(A=2.2){return new a(Math.pow(this.r,1/A),Math.pow(this.g,1/A),Math.pow(this.b,1/A),this.a)}luminance(){return.2126*this.r+.7152*this.g+.0722*this.b}lerp(A,g){const I=this.r,C=this.g,i=this.b,e=this.a;return new a(I+g*(A.r-I),C+g*(A.g-C),i+g*(A.b-i),e+g*(A.a-e))}static random(A=0,g=!1){return A>0?new a(A+Math.random()*(1-A),A+Math.random()*(1-A),A+Math.random()*(1-A),g?A+Math.random()*(1-A):1):A<0?new a(Math.random()*(1+A),Math.random()*(1+A),Math.random()*(1+A),g?Math.random()*(1+A):1):new a(Math.random(),Math.random(),Math.random(),g?Math.random():1)}clone(){return new a(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}asArray(){return this.__data}as3ComponentArray(){return[this.__data[0],this.__data[1],this.__data[2]]}toJSON(){return{r:this.r,g:this.g,b:this.b,a:this.a}}fromJSON(A){this.r=A.r,this.g=A.g,this.b=A.b,this.a=A.a}toCSSString(){return"rgba("+Math.round(255*this.r)+", "+Math.round(255*this.g)+", "+Math.round(255*this.b)+", "+this.a+")"}}class l{constructor(A=0,g=0,I=0,C=1){if(A instanceof Float32Array)this.__data=A;else if(A instanceof ArrayBuffer){console.warn("deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))");const I=A,C=g;this.__data=new Float32Array(I,C,4)}else this.__data=new Float32Array(4),"string"==typeof A?A.startsWith("#")?this.setFromHex(A):this.setFromCSSColorName(A):(this.__data[0]=A,this.__data[1]=g,this.__data[2]=I,this.__data[3]=C)}get r(){return this.__data[0]}set r(A){this.__data[0]=A}get g(){return this.__data[1]}set g(A){this.__data[1]=A}get b(){return this.__data[2]}set b(A){this.__data[2]=A}get a(){return this.__data[3]}set a(A){this.__data[3]=A}set(A,g,I,C=1){this.r=A,this.g=g,this.b=I,this.a=C}setFromOther(A){this.r=A.r,this.g=A.g,this.b=A.b,this.a=A.a}setFromScalarArray(A){this.r=A[0],this.g=A[1],this.b=A[2],this.a=4==A.length?A[3]:1}getAsRGBArray(){return[255*this.r,255*this.g,255*this.b]}getAsRGBDict(){return{r:255*this.r,g:255*this.g,b:255*this.b}}setFromRGB(A,g,I,C){this.r=A/255,this.g=g/255,this.b=I/255,this.a=C?C/255:1}setFromRGBArray(A){this.r=A[0]/255,this.g=A[1]/255,this.b=A[2]/255,this.a=4==A.length?A[3]/255:1}setFromRGBDict(A){this.r=A.r/255,this.g=A.g/255,this.b=A.b/255,this.a=4==A.a?A.a/255:1}setFromHex(A){const g=function(A){const g=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(A);return g?{r:parseInt(g[1],16),g:parseInt(g[2],16),b:parseInt(g[3],16)}:null}(A);g?this.setFromRGB(g.r,g.g,g.b):console.warn("Invalid hex code:"+A)}setFromCSSColorName(A){if(A.startsWith("#"))this.setFromHex(A);else{const g={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",honeydew:"#f0fff0",hotpink:"#ff69b4","indianred ":"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgrey:"#d3d3d3",lightgreen:"#90ee90",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370d8",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#d87093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"}[A.toLowerCase()];g&&this.setFromHex(g)}}toHex(){function A(A){const g=Math.round(255*A).toString(16);return 1==g.length?"0"+g:g}return"#"+A(this.r)+A(this.g)+A(this.b)}isEqual(A){return this.r==A.r&&this.g==A.g&&this.b==A.b&&this.a==A.a}notEquals(A){return this.r!=A.r&&this.g!=A.g&&this.b!=A.b&&this.a!=A.a}approxEqual(A,g=Number.EPSILON){return Math.abs(this.r-A.r)<g&&Math.abs(this.g-A.g)<g&&Math.abs(this.b-A.b)<g&&Math.abs(this.a-A.a)<g}add(A){return new l(this.r+A.r,this.g+A.g,this.b+A.b,this.a+A.a)}addInPlace(A){this.r+=A.r,this.g+=A.g,this.b+=A.b,this.a+=A.a}subtract(A){return new l(this.r-A.r,this.g-A.g,this.b-A.b,this.a-A.a)}scale(A){return new l(this.r*A,this.g*A,this.b*A,this.a*A)}scaleInPlace(A){this.r*=A,this.g*=A,this.b*=A,this.a*=A}applyGamma(A){this.set(Math.pow(this.r,A),Math.pow(this.g,A),Math.pow(this.b,A),this.a)}toLinear(A=2.2){return new l(Math.pow(this.r,A),Math.pow(this.g,A),Math.pow(this.b,A),this.a)}toGamma(A=2.2){return new l(Math.pow(this.r,1/A),Math.pow(this.g,1/A),Math.pow(this.b,1/A),this.a)}luminance(){return.2126*this.r+.7152*this.g+.0722*this.b}lerp(A,g){const I=this.r,C=this.g,i=this.b,e=this.a;return new l(I+g*(A.r-I),C+g*(A.g-C),i+g*(A.b-i),e+g*(A.a-e))}static random(A=0,g=!1){return A>0?new l(A+Math.random()*(1-A),A+Math.random()*(1-A),A+Math.random()*(1-A),g?A+Math.random()*(1-A):1):A<0?new l(Math.random()*(1+A),Math.random()*(1+A),Math.random()*(1+A),g?Math.random()*(1+A):1):new l(Math.random(),Math.random(),Math.random(),g?Math.random():1)}clone(){return new l(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}asArray(){return this.__data}as3ComponentArray(){return[this.__data[0],this.__data[1],this.__data[2]]}toJSON(){return{r:this.r,g:this.g,b:this.b,a:this.a}}fromJSON(A){this.r=A.r,this.g=A.g,this.b=A.b,this.a=A.a}readBinary(A){this.r=A.loadFloat32(),this.g=A.loadFloat32(),this.b=A.loadFloat32(),this.a=A.loadFloat32()}toCSSString(){return"rgba("+Math.round(255*this.r)+", "+Math.round(255*this.g)+", "+Math.round(255*this.b)+", "+this.a+")"}}class n{constructor(A=0,g=0,I=0,C=0){if("number"!=typeof C||isNaN(C))switch(C){case"XYZ":this.order=0;break;case"YZX":this.order=1;break;case"ZXY":this.order=2;break;case"XZY":this.order=3;break;case"ZYX":this.order=4;break;case"YXZ":this.order=5;break;default:throw new Error("Invalid Euler Angles Order:"+C)}else this.order=C;if(A instanceof ArrayBuffer){const I=A,C=g;this.__data=new Float32Array(I,C,4)}else this.__data=new Float32Array(3),this.__data[0]=A,this.__data[1]=g,this.__data[2]=I}get x(){return this.__data[0]}set x(A){this.__data[0]=A}get y(){return this.__data[1]}set y(A){this.__data[1]=A}get z(){return this.__data[2]}set z(A){this.__data[2]=A}set(A,g,I){this.__data[0]=A,this.__data[1]=g,this.__data[2]=I}toString(){return t.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.__data[0],y:this.__data[1],z:this.__data[2],order:this.order}}fromJSON(A){this.__data[0]=A.x,this.__data[1]=A.y,this.__data[2]=A.z,this.order=A.order}}class d{constructor(A=1,g=0,I=0,C=0,i=1,e=0,t=0,B=0,s=1){if(A instanceof o&&g instanceof o&&I instanceof o)this.__data=new Float32Array(9),this.set(A.x,A.y,A.z,g.x,g.y,g.z,I.x,I.y,I.z);else if(A instanceof Float32Array)this.__data=A;else if(A instanceof ArrayBuffer){console.warn("Deprecated, please use new Vec3(new Float32Array(buffer, byteOffset, 9))");const I=A,C=g;this.__data=new Float32Array(I,C,9)}else this.__data=new Float32Array(9),this.set(A,g,I,C,i,e,t,B,s)}get m00(){return this.__data[0]}set m00(A){this.__data[0]=A}get m01(){return this.__data[1]}set m01(A){this.__data[1]=A}get m02(){return this.__data[2]}set m02(A){this.__data[2]=A}get m10(){return this.__data[3]}set m10(A){this.__data[3]=A}get m11(){return this.__data[4]}set m11(A){this.__data[4]=A}get m12(){return this.__data[5]}set m12(A){this.__data[5]=A}get m20(){return this.__data[6]}set m20(A){this.__data[6]=A}get m21(){return this.__data[7]}set m21(A){this.__data[7]=A}get m22(){return this.__data[8]}set m22(A){this.__data[8]=A}get xAxis(){return new o(new Float32Array(this.__data.buffer,0,3))}set xAxis(A){this.xAxis.set(A.x,A.y,A.z)}get yAxis(){return new o(new Float32Array(this.__data.buffer,12,3))}set yAxis(A){this.yAxis.set(A.x,A.y,A.z)}get zAxis(){return new o(new Float32Array(this.__data.buffer,24,3))}set zAxis(A){this.zAxis.set(A.x,A.y,A.z)}set(A=1,g=0,I=0,C=0,i=1,e=0,t=0,B=0,o=1){this.__data[0]=A,this.__data[1]=g,this.__data[2]=I,this.__data[3]=C,this.__data[4]=i,this.__data[5]=e,this.__data[6]=t,this.__data[7]=B,this.__data[8]=o}setIdentity(){this.set()}setFromMat(A){this.__data[0]=A.m00,this.__data[1]=A.m01,this.__data[2]=A.m02,this.__data[3]=A.m10,this.__data[4]=A.m11,this.__data[5]=A.m12,this.__data[6]=A.m20,this.__data[7]=A.m21,this.__data[8]=A.m22}setFromDirectionAndUpvector(A,g){const I=A,C=I.length();if(C<Number.EPSILON)return void this.setIdentity();I.scaleInPlace(1/C);const i=g.cross(I),e=i.length();e>Number.EPSILON&&i.scaleInPlace(1/e);const t=I.cross(i),B=t.length();B>Number.EPSILON&&t.scaleInPlace(1/B),this.set(i.x,i.y,i.z,t.x,t.y,t.z,I.x,I.y,I.z)}inverse(){const A=this.__data[0],g=this.__data[1],I=this.__data[2],C=this.__data[3],i=this.__data[4],e=this.__data[5],t=this.__data[6],B=this.__data[7],o=this.__data[8],s=o*i-e*B,a=-o*C+e*t,l=B*C-i*t;let n=A*s+g*a+I*l;return n?(n=1/n,new d(s*n,(-o*g+I*B)*n,(e*g-I*i)*n,a*n,(o*A-I*t)*n,(-e*A+I*C)*n,l*n,(-B*A+g*t)*n,(i*A-g*C)*n)):(console.warn("Unable to invert Mat3"),new d)}invertInPlace(){const A=this.__data[0],g=this.__data[1],I=this.__data[2],C=this.__data[3],i=this.__data[4],e=this.__data[5],t=this.__data[6],B=this.__data[7],o=this.__data[8],s=o*i-e*B,a=-o*C+e*t,l=B*C-i*t;let n=A*s+g*a+I*l;return n?(n=1/n,this.set(s*n,(-o*g+I*B)*n,(e*g-I*i)*n,a*n,(o*A-I*t)*n,(-e*A+I*C)*n,l*n,(-B*A+g*t)*n,(i*A-g*C)*n),!0):(console.warn("Unable to invert Mat3"),!1)}transpose(){return new d(this.__data[0],this.__data[3],this.__data[6],this.__data[1],this.__data[4],this.__data[7],this.__data[2],this.__data[5],this.__data[8])}transposeInPlace(){const A=this.__data[1],g=this.__data[2],I=this.__data[5];this.__data[1]=this.__data[3],this.__data[2]=this.__data[6],this.__data[3]=A,this.__data[5]=this.__data[7],this.__data[6]=g,this.__data[7]=I}transformVec3(A){return new o(this.__data[0]*A.x+this.__data[1]*A.y+this.__data[2]*A.z,this.__data[3]*A.x+this.__data[4]*A.y+this.__data[5]*A.z,this.__data[6]*A.x+this.__data[7]*A.y+this.__data[8]*A.z)}clone(){return new d(this.__data[0],this.__data[1],this.__data[2],this.__data[3],this.__data[4],this.__data[5],this.__data[6],this.__data[7],this.__data[8])}readBinary(A){this.__data=A.loadFloat32Array(9)}toJSON(){return this.__data}fromJSON(A){this.__data=new Float32Array(A)}toString(){return t.stringifyJSONWithFixedPrecision(this.toJSON())}asArray(){return this.__data}}class h{constructor(A=1,g=0,I=0,C=0,i=0,e=1,t=0,B=0,o=0,s=0,a=1,l=0,n=0,d=0,h=0,c=1){if(A instanceof Float32Array)this.__data=A;else if(A instanceof ArrayBuffer){const I=A,C=g;this.__data=new Float32Array(I,C,16)}else this.__data=new Float32Array(16),this.set(A,g,I,C,i,e,t,B,o,s,a,l,n,d,h,c)}get m00(){return this.__data[0]}set m00(A){this.__data[0]=A}get m01(){return this.__data[1]}set m01(A){this.__data[1]=A}get m02(){return this.__data[2]}set m02(A){this.__data[2]=A}get m03(){return this.__data[3]}set m03(A){this.__data[3]=A}get m10(){return this.__data[4]}set m10(A){this.__data[4]=A}get m11(){return this.__data[5]}set m11(A){this.__data[5]=A}get m12(){return this.__data[6]}set m12(A){this.__data[6]=A}get m13(){return this.__data[7]}set m13(A){this.__data[7]=A}get m20(){return this.__data[8]}set m20(A){this.__data[8]=A}get m21(){return this.__data[9]}set m21(A){this.__data[9]=A}get m22(){return this.__data[10]}set m22(A){this.__data[10]=A}get m23(){return this.__data[11]}set m23(A){this.__data[11]=A}get m30(){return this.__data[12]}set m30(A){this.__data[12]=A}get m31(){return this.__data[13]}set m31(A){this.__data[13]=A}get m32(){return this.__data[14]}set m32(A){this.__data[14]=A}get m33(){return this.__data[15]}set m33(A){this.__data[15]=A}get xAxis(){return new o(new Float32Array(this.__data.buffer,0,3))}set xAxis(A){this.xAxis.set(A.x,A.y,A.z)}get yAxis(){return new o(new Float32Array(this.__data.buffer,16,3))}set yAxis(A){this.yAxis.set(A.x,A.y,A.z)}get zAxis(){return new o(new Float32Array(this.__data.buffer,32,3))}set zAxis(A){this.zAxis.set(A.x,A.y,A.z)}get translation(){return new o(new Float32Array(this.__data.buffer,48,3))}set translation(A){this.translation.set(A.x,A.y,A.z)}set(A=1,g=0,I=0,C=0,i=0,e=1,t=0,B=0,o=0,s=0,a=1,l=0,n=0,d=0,h=0,c=1){this.__data[0]=A,this.__data[1]=g,this.__data[2]=I,this.__data[3]=C,this.__data[4]=i,this.__data[5]=e,this.__data[6]=t,this.__data[7]=B,this.__data[8]=o,this.__data[9]=s,this.__data[10]=a,this.__data[11]=l,this.__data[12]=n,this.__data[13]=d,this.__data[14]=h,this.__data[15]=c}setIdentity(){this.set()}setDataArray(A){this.__data=A}setFromMat4(A){this.__data[0]=A.m00,this.__data[1]=A.m01,this.__data[2]=A.m02,this.__data[3]=A.m03,this.__data[4]=A.m10,this.__data[5]=A.m11,this.__data[6]=A.m12,this.__data[7]=A.m13,this.__data[8]=A.m20,this.__data[9]=A.m21,this.__data[10]=A.m22,this.__data[11]=A.m23,this.__data[12]=A.m30,this.__data[13]=A.m31,this.__data[14]=A.m32,this.__data[15]=A.m33}toMat3(){return new d(this.__data[0],this.__data[1],this.__data[2],this.__data[4],this.__data[5],this.__data[6],this.__data[8],this.__data[9],this.__data[10])}transposeInPlace(){const A=this.__data[1],g=this.__data[2],I=this.__data[3],C=this.__data[6],i=this.__data[7],e=this.__data[11];this.__data[1]=this.__data[4],this.__data[2]=this.__data[8],this.__data[3]=this.__data[12],this.__data[4]=A,this.__data[6]=this.__data[9],this.__data[7]=this.__data[13],this.__data[8]=g,this.__data[9]=C,this.__data[11]=this.__data[14],this.__data[12]=I,this.__data[13]=i,this.__data[14]=e}transpose(){return new h(this.__data[0],this.__data[4],this.__data[8],this.__data[12],this.__data[1],this.__data[5],this.__data[9],this.__data[13],this.__data[2],this.__data[6],this.__data[10],this.__data[14],this.__data[3],this.__data[7],this.__data[11],this.__data[15])}inverse(){const A=this.__data[0],g=this.__data[1],I=this.__data[2],C=this.__data[3],i=this.__data[4],e=this.__data[5],t=this.__data[6],B=this.__data[7],o=this.__data[8],s=this.__data[9],a=this.__data[10],l=this.__data[11],n=this.__data[12],d=this.__data[13],c=this.__data[14],r=this.__data[15],G=A*e-g*i,m=A*t-I*i,Q=A*B-C*i,E=g*t-I*e,b=g*B-C*e,Z=I*B-C*t,y=o*d-s*n,u=o*c-a*n,R=o*r-l*n,V=s*c-a*d,F=s*r-l*d,S=a*r-l*c;let w=G*S-m*F+Q*V+E*R-b*u+Z*y;return w?(w=1/w,new h((e*S-t*F+B*V)*w,(I*F-g*S-C*V)*w,(d*Z-c*b+r*E)*w,(a*b-s*Z-l*E)*w,(t*R-i*S-B*u)*w,(A*S-I*R+C*u)*w,(c*Q-n*Z-r*m)*w,(o*Z-a*Q+l*m)*w,(i*F-e*R+B*y)*w,(g*R-A*F-C*y)*w,(n*b-d*Q+r*G)*w,(s*Q-o*b-l*G)*w,(e*u-i*V-t*y)*w,(A*V-g*u+I*y)*w,(d*m-n*E-c*G)*w,(o*E-s*m+a*G)*w)):(console.warn("Unable to invert Mat4"),this)}invertInPlace(){const A=this.__data[0],g=this.__data[1],I=this.__data[2],C=this.__data[3],i=this.__data[4],e=this.__data[5],t=this.__data[6],B=this.__data[7],o=this.__data[8],s=this.__data[9],a=this.__data[10],l=this.__data[11],n=this.__data[12],d=this.__data[13],h=this.__data[14],c=this.__data[15],r=A*e-g*i,G=A*t-I*i,m=A*B-C*i,Q=g*t-I*e,E=g*B-C*e,b=I*B-C*t,Z=o*d-s*n,y=o*h-a*n,u=o*c-l*n,R=s*h-a*d,V=s*c-l*d,F=a*c-l*h;let S=r*F-G*V+m*R+Q*u-E*y+b*Z;return S?(S=1/S,this.set((e*F-t*V+B*R)*S,(I*V-g*F-C*R)*S,(d*b-h*E+c*Q)*S,(a*E-s*b-l*Q)*S,(t*u-i*F-B*y)*S,(A*F-I*u+C*y)*S,(h*m-n*b-c*G)*S,(o*b-a*m+l*G)*S,(i*V-e*u+B*Z)*S,(g*u-A*V-C*Z)*S,(n*E-d*m+c*r)*S,(s*m-o*E-l*r)*S,(e*y-i*R-t*Z)*S,(A*R-g*y+I*Z)*S,(d*G-n*Q-h*r)*S,(o*Q-s*G+a*r)*S),!0):(console.warn("Unable to invert Mat4"),!1)}setInverse(A){const g=A.__data[0],I=A.__data[1],C=A.__data[2],i=A.__data[3],e=A.__data[4],t=A.__data[5],B=A.__data[6],o=A.__data[7],s=A.__data[8],a=A.__data[9],l=A.__data[10],n=A.__data[11],d=A.__data[12],h=A.__data[13],c=A.__data[14],r=A.__data[15],G=g*t-I*e,m=g*B-C*e,Q=g*o-i*e,E=I*B-C*t,b=I*o-i*t,Z=C*o-i*B,y=s*h-a*d,u=s*c-l*d,R=s*r-n*d,V=a*c-l*h,F=a*r-n*h,S=l*r-n*c;let w=G*S-m*F+Q*V+E*R-b*u+Z*y;if(!w)throw new Error("Unable to invert Mat4");w=1/w,this.set((t*S-B*F+o*V)*w,(C*F-I*S-i*V)*w,(h*Z-c*b+r*E)*w,(l*b-a*Z-n*E)*w,(B*R-e*S-o*u)*w,(g*S-C*R+i*u)*w,(c*Q-d*Z-r*m)*w,(s*Z-l*Q+n*m)*w,(e*F-t*R+o*y)*w,(I*R-g*F-i*y)*w,(d*b-h*Q+r*G)*w,(a*Q-s*b-n*G)*w,(t*u-e*V-B*y)*w,(g*V-I*u+C*y)*w,(h*m-d*E-c*G)*w,(s*E-a*m+l*G)*w)}multiply(A){const g=this.__data[0],I=this.__data[1],C=this.__data[2],i=this.__data[3],e=this.__data[4],t=this.__data[5],B=this.__data[6],o=this.__data[7],s=this.__data[8],a=this.__data[9],l=this.__data[10],n=this.__data[11],d=this.__data[12],c=this.__data[13],r=this.__data[14],G=this.__data[15],m=A.asArray();let Q=m[0],E=m[1],b=m[2],Z=m[3];const y=new h;return y.m00=Q*g+E*e+b*s+Z*d,y.m01=Q*I+E*t+b*a+Z*c,y.m02=Q*C+E*B+b*l+Z*r,y.m03=Q*i+E*o+b*n+Z*G,Q=m[4],E=m[5],b=m[6],Z=m[7],y.m10=Q*g+E*e+b*s+Z*d,y.m11=Q*I+E*t+b*a+Z*c,y.m12=Q*C+E*B+b*l+Z*r,y.m13=Q*i+E*o+b*n+Z*G,Q=m[8],E=m[9],b=m[10],Z=m[11],y.m20=Q*g+E*e+b*s+Z*d,y.m21=Q*I+E*t+b*a+Z*c,y.m22=Q*C+E*B+b*l+Z*r,y.m23=Q*i+E*o+b*n+Z*G,Q=m[12],E=m[13],b=m[14],Z=m[15],y.m30=Q*g+E*e+b*s+Z*d,y.m31=Q*I+E*t+b*a+Z*c,y.m32=Q*C+E*B+b*l+Z*r,y.m33=Q*i+E*o+b*n+Z*G,y}multiplyInPlace(A){const g=this.asArray(),I=g[0],C=g[1],i=g[2],e=g[3],t=g[4],B=g[5],o=g[6],s=g[7],a=g[8],l=g[9],n=g[10],d=g[11],h=g[12],c=g[13],r=g[14],G=g[15],m=A.asArray();let Q=m[0],E=m[1],b=m[2],Z=m[3];return this.m00=Q*I+E*t+b*a+Z*h,this.m01=Q*C+E*B+b*l+Z*c,this.m02=Q*i+E*o+b*n+Z*r,this.m03=Q*e+E*s+b*d+Z*G,Q=m[4],E=m[5],b=m[6],Z=m[7],this.m10=Q*I+E*t+b*a+Z*h,this.m11=Q*C+E*B+b*l+Z*c,this.m12=Q*i+E*o+b*n+Z*r,this.m13=Q*e+E*s+b*d+Z*G,Q=m[8],E=m[9],b=m[10],Z=m[11],this.m20=Q*I+E*t+b*a+Z*h,this.m21=Q*C+E*B+b*l+Z*c,this.m22=Q*i+E*o+b*n+Z*r,this.m23=Q*e+E*s+b*d+Z*G,Q=m[12],E=m[13],b=m[14],Z=m[15],this.m30=Q*I+E*t+b*a+Z*h,this.m31=Q*C+E*B+b*l+Z*c,this.m32=Q*i+E*o+b*n+Z*r,this.m33=Q*e+E*s+b*d+Z*G,this}postMultiplyInPlace(A){const g=A.asArray(),I=g[0],C=g[1],i=g[2],e=g[3],t=g[4],B=g[5],o=g[6],s=g[7],a=g[8],l=g[9],n=g[10],d=g[11],h=g[12],c=g[13],r=g[14],G=g[15],m=this.asArray();let Q=m[0],E=m[1],b=m[2],Z=m[3];return this.m00=Q*I+E*t+b*a+Z*h,this.m01=Q*C+E*B+b*l+Z*c,this.m02=Q*i+E*o+b*n+Z*r,this.m03=Q*e+E*s+b*d+Z*G,Q=m[4],E=m[5],b=m[6],Z=m[7],this.m10=Q*I+E*t+b*a+Z*h,this.m11=Q*C+E*B+b*l+Z*c,this.m12=Q*i+E*o+b*n+Z*r,this.m13=Q*e+E*s+b*d+Z*G,Q=m[8],E=m[9],b=m[10],Z=m[11],this.m20=Q*I+E*t+b*a+Z*h,this.m21=Q*C+E*B+b*l+Z*c,this.m22=Q*i+E*o+b*n+Z*r,this.m23=Q*e+E*s+b*d+Z*G,Q=m[12],E=m[13],b=m[14],Z=m[15],this.m30=Q*I+E*t+b*a+Z*h,this.m31=Q*C+E*B+b*l+Z*c,this.m32=Q*i+E*o+b*n+Z*r,this.m33=Q*e+E*s+b*d+Z*G,this}translateInPlace(A){const g=this.__data,I=A.x,C=A.y,i=A.z;return g[12]=g[0]*I+g[4]*C+g[8]*i+g[12],g[13]=g[1]*I+g[5]*C+g[9]*i+g[13],g[14]=g[2]*I+g[6]*C+g[10]*i+g[14],g[15]=g[3]*I+g[7]*C+g[11]*i+g[15],this}setLookAt(A,g,I){const C=A.subtract(g),i=C.length();if(i<Number.EPSILON)return void this.setIdentity();C.scaleInPlace(1/i);const e=I.cross(C),t=e.length();t>Number.EPSILON&&e.scaleInPlace(1/t);const B=C.cross(e),o=B.length();o>Number.EPSILON&&B.scaleInPlace(1/o),this.set(e.x,e.y,e.z,0,B.x,B.y,B.z,0,C.x,C.y,C.z,0,A.x,A.y,A.z,1)}setRotation(A,g){const I=A.length();if(Math.abs(I)<Number.EPSILON)return null;const C=A.x/I,i=A.y/I,e=A.z/I,t=Math.sin(g),B=Math.cos(g),o=1-B,s=this.__data;return s[0]=C*C*o+B,s[1]=i*C*o+e*t,s[2]=e*C*o-i*t,s[3]=0,s[4]=C*i*o-e*t,s[5]=i*i*o+B,s[6]=e*i*o+C*t,s[7]=0,s[8]=C*e*o+i*t,s[9]=i*e*o-C*t,s[10]=e*e*o+B,s[11]=0,s[12]=0,s[13]=0,s[14]=0,s[15]=1,this}setXRotation(A){const g=Math.sin(A),I=Math.cos(A),C=this.__data;return C[0]=1,C[1]=0,C[2]=0,C[3]=0,C[4]=0,C[5]=I,C[6]=g,C[7]=0,C[8]=0,C[9]=-g,C[10]=I,C[11]=0,C[12]=0,C[13]=0,C[14]=0,C[15]=1,this}setYRotation(A){const g=Math.sin(A),I=Math.cos(A),C=this.__data;return C[0]=I,C[1]=0,C[2]=-g,C[3]=0,C[4]=0,C[5]=1,C[6]=0,C[7]=0,C[8]=g,C[9]=0,C[10]=I,C[11]=0,C[12]=0,C[13]=0,C[14]=0,C[15]=1,this}setZRotation(A){const g=Math.sin(A),I=Math.cos(A),C=this.__data;return C[0]=I,C[1]=g,C[2]=0,C[3]=0,C[4]=-g,C[5]=I,C[6]=0,C[7]=0,C[8]=0,C[9]=0,C[10]=1,C[11]=0,C[12]=0,C[13]=0,C[14]=0,C[15]=1,this}transformVec4(A){const g=this.__data,I=A.x,C=A.y,i=A.z,e=A.t;return new s(g[0]*I+g[4]*C+g[8]*i+g[12]*e,g[1]*I+g[5]*C+g[9]*i+g[13]*e,g[2]*I+g[6]*C+g[10]*i+g[14]*e,g[3]*I+g[7]*C+g[11]*i+g[15]*e)}transformVec3(A){const g=this.__data,I=A.x,C=A.y,i=A.z;return new o(g[0]*I+g[4]*C+g[8]*i+g[12],g[1]*I+g[5]*C+g[9]*i+g[13],g[2]*I+g[6]*C+g[10]*i+g[14])}rotateVec3(A){const g=this.__data,I=A.x,C=A.y,i=A.z;return new o(g[0]*I+g[4]*C+g[8]*i,g[1]*I+g[5]*C+g[9]*i,g[2]*I+g[6]*C+g[10]*i)}setPerspectiveMatrix(A,g,I,C){const i=Math.tan(.5*Math.PI-.5*A),e=1/(I-C);this.set(i/g,0,0,0,0,i,0,0,0,0,(I+C)*e,-1,0,0,I*C*e*2,0)}setOrthographicMatrix(A,g,I,C,i,e){const t=1/(A-g),B=1/(I-C),o=1/(i-e);this.set(-2*t,0,0,0,0,-2*B,0,0,0,0,2*o,0,(A+g)*t,(C+I)*B,(e+i)*o,1)}setScale(A,g,I){A instanceof o?this.set(A.x,0,0,0,0,A.y,0,0,0,0,A.z,0,0,0,0,1):this.set(A,0,0,0,0,g,0,0,0,0,I,0,0,0,0,1)}setFromMat3x4Array(A){this.set(A[0],A[1],A[2],0,A[3],A[4],A[5],0,A[6],A[7],A[8],0,A[9],A[10],A[11],1)}clone(){return new h(this.__data[0],this.__data[1],this.__data[2],this.__data[3],this.__data[4],this.__data[5],this.__data[6],this.__data[7],this.__data[8],this.__data[9],this.__data[10],this.__data[11],this.__data[12],this.__data[13],this.__data[14],this.__data[15])}toString(){return t.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return this.__data}fromJSON(A){this.__data=new Float32Array(A)}readBinary(A){this.__data=A.loadFloat32Array(16)}asArray(){return this.__data}}class c{constructor(A=0,g=0,I=0,C=1){if(A instanceof Float32Array)this.__data=A;else if(A instanceof ArrayBuffer){console.warn("deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))");const I=A,C=g;this.__data=new Float32Array(I,C,4)}else this.__data=new Float32Array(4),"object"==typeof A?(this.__data[0]=0,this.__data[1]=0,this.__data[2]=0,this.__data[3]=1,this.fromJSON(A)):(this.__data[0]=A,this.__data[1]=g,this.__data[2]=I,this.__data[3]=C)}get x(){return this.__data[0]}set x(A){this.__data[0]=A}get y(){return this.__data[1]}set y(A){this.__data[1]=A}get z(){return this.__data[2]}set z(A){this.__data[2]=A}get w(){return this.__data[3]}set w(A){this.__data[3]=A}set(A,g,I,C){this.__data[0]=A,this.__data[1]=g,this.__data[2]=I,this.__data[3]=C}setDataArray(A){this.__data=A}setFromOther(A){this.__data[0]=A.x,this.__data[1]=A.y,this.__data[2]=A.z,this.__data[3]=A.w}setFromEulerAngles(A){const g=new o;switch(A.order){case 0:g.set(A.x,-A.y,A.z);break;case 1:g.set(A.y,-A.z,A.x);break;case 2:g.set(A.z,-A.x,A.y);break;case 3:g.set(A.x,A.z,A.y);break;case 4:g.set(A.z,A.y,A.x);break;case 5:g.set(A.y,A.x,A.z);break;default:throw new Error(`Invalid EulerAngles order: ${A.order}`)}const I=.5*g.x,C=.5*g.y,i=.5*g.z,e=Math.cos(I),t=Math.cos(C),B=Math.cos(i),s=Math.sin(I),a=Math.sin(C),l=Math.sin(i),n=e*B,d=e*l,h=s*B,c=s*l,r=t*h-a*d,G=t*c+a*n,m=t*d-a*h;switch(this.w=t*n+a*c,A.order){case 0:this.x=r,this.y=-G,this.z=m;break;case 1:this.x=m,this.y=r,this.z=-G;break;case 2:this.x=-G,this.y=m,this.z=r;break;case 3:this.x=r,this.y=m,this.z=G;break;case 4:this.x=m,this.y=G,this.z=r;break;case 5:this.x=G,this.y=r,this.z=m;break;default:throw new Error(`Invalid EulerAngles order: ${A.order}`)}}toEulerAngles(A){const g=new o;switch(A){case 0:g.set(this.z,this.x,this.y);break;case 1:g.set(this.x,this.y,this.z);break;case 2:g.set(this.y,this.z,this.x);break;case 3:g.set(this.y,-this.x,this.z);break;case 4:g.set(this.x,-this.z,this.y);break;case 5:g.set(this.z,-this.y,this.x);break;default:throw new Error("Invalid rotation order:"+A)}const I=new o,C=g.x*g.y+g.z*this.w;if(C>.49999)I.y=2*Math.atan2(g.x,this.w),I.z=.5*Math.PI,I.x=0;else if(C<-.49999)I.y=-2*Math.atan2(g.x,this.w),I.z=-.5*Math.PI,I.x=0;else{const A=g.x*g.x,i=g.y*g.y,e=g.z*g.z;I.y=Math.atan2(2*g.y*this.w-2*g.x*g.z,1-2*i-2*e),I.z=Math.asin(2*C),I.x=Math.atan2(2*g.x*this.w-2*g.y*g.z,1-2*A-2*e)}switch(A){case 0:return new n(I.y,I.z,I.x,A);case 1:return new n(I.x,I.y,I.z,A);case 2:return new n(I.z,I.x,I.y,A);case 3:return new n(-I.y,I.x,I.z,A);case 4:return new n(I.x,I.z,-I.y,A);case 5:return new n(I.z,-I.y,I.x,A)}}setFromAxisAndAngle(A,g){const I=g/2,C=A.normalize().scale(Math.sin(I));this.set(C.x,C.y,C.z,Math.cos(I))}setFromDirectionAndUpvector(A,g){const I=new d;I.setFromDirectionAndUpvector(A,g),this.setFromMat3(I)}setFrom2Vectors(A,g){const I=A.cross(g),C=A.dot(g),i=Math.sqrt(2*(1+C));this.set(I.x/i,I.y/i,I.z/i,i/2),this.normalizeInPlace()}setFromMat3(A){const g=A.asArray(),I=g[0]+g[4]+g[8];let C;if(I>0)C=Math.sqrt(I+1),this.__data[3]=.5*C,C=.5/C,this.__data[0]=(g[5]-g[7])*C,this.__data[1]=(g[6]-g[2])*C,this.__data[2]=(g[1]-g[3])*C;else{let A=0;g[4]>g[0]&&(A=1),g[8]>g[3*A+A]&&(A=2);const I=(A+1)%3,i=(A+2)%3;C=Math.sqrt(g[3*A+A]-g[3*I+I]-g[3*i+i]+1),this.__data[A]=.5*C,C=.5/C,this.__data[3]=(g[3*I+i]-g[3*i+I])*C,this.__data[I]=(g[3*I+A]+g[3*A+I])*C,this.__data[i]=(g[3*i+A]+g[3*A+i])*C}this.normalizeInPlace()}setFromMat4(A){const g=A.asArray(),I=g[0]+g[5]+g[10];let C;if(I>0)C=Math.sqrt(I+1),this.__data[3]=.5*C,C=.5/C,this.__data[0]=(g[6]-g[9])*C,this.__data[1]=(g[8]-g[2])*C,this.__data[2]=(g[1]-g[4])*C;else{let A=0;g[5]>g[0]&&(A=1),g[10]>g[4*A+A]&&(A=2);const I=(A+1)%3,i=(A+2)%3;C=Math.sqrt(g[4*A+A]-g[4*I+I]-g[4*i+i]+1),this.__data[A]=.5*C,C=.5/C,this.__data[3]=(g[4*I+i]-g[4*i+I])*C,this.__data[I]=(g[4*I+A]+g[4*A+I])*C,this.__data[i]=(g[4*i+A]+g[4*A+i])*C}this.normalizeInPlace()}isIdentity(){return this.getAngle()<Number.EPSILON}getAngle(){return 2*Math.acos(this.w)}isEqual(A){return this.x==A.x&&this.y==A.y&&this.z==A.z&&this.w==A.w}notEquals(A){return this.x!=A.x&&this.y!=A.y&&this.z!=A.z&&this.w!=A.w}approxEqual(A,g=Number.EPSILON){return Math.abs(this.x-A.x)<g&&Math.abs(this.y-A.y)<g&&Math.abs(this.z-A.z)<g&&Math.abs(this.w-A.w)<g}add(A){return new c(this.x+A.x,this.y+A.y,this.z+A.z,this.w+A.w)}addInPlace(A){this.x+=A.x,this.y+=A.y,this.z+=A.z,this.w+=A.w}subtract(A){return new c(this.x-A.x,this.y-A.y,this.z-A.z,this.w-A.w)}scale(A){return new c(this.x*A,this.y*A,this.z*A,this.w*A)}scaleInPlace(A){this.x*=A,this.y*=A,this.z*=A,this.w*=A}length(){const A=this.__data[0],g=this.__data[1],I=this.__data[2],C=this.__data[3];return Math.sqrt(A*A+g*g+I*I+C*C)}lengthSquared(){const A=this.__data[0],g=this.__data[1],I=this.__data[2],C=this.__data[3];return A*A+g*g+I*I+C*C}normalize(){const A=this.__data[0],g=this.__data[1],I=this.__data[2],C=this.__data[3];let i=A*A+g*g+I*I+C*C;return i<Number.EPSILON?new c:(i=1/Math.sqrt(i),new c(A*i,g*i,I*i,C*i))}normalizeInPlace(){const A=this.__data[0],g=this.__data[1],I=this.__data[2],C=this.__data[3];let i=A*A+g*g+I*I+C*C;i<Number.EPSILON||(i=1/Math.sqrt(i),this.set(A*i,g*i,I*i,C*i))}dot(A){return this.x*A.x+this.y*A.y+this.z*A.z+this.w*A.w}cross(A){const g=this.x,I=this.y,C=this.z,i=this.w,e=A.x,t=A.y,B=A.z,o=A.w;return new c(I*B-C*t,C*o-i*B,i*e-g*o,g*t-I*e)}conjugate(){return new c(-this.x,-this.y,-this.z,this.w)}inverse(){return this.conjugate()}alignWith(A){this.dot(A)<0&&this.set(-this.x,-this.y,-this.z,-this.w)}multiply(A){const g=this.__data[0],I=this.__data[1],C=this.__data[2],i=this.__data[3],e=A.__data[0],t=A.__data[1],B=A.__data[2],o=A.__data[3];return new c(g*o+i*e+I*B-C*t,I*o+i*t+C*e-g*B,C*o+i*B+g*t-I*e,i*o-g*e-I*t-C*B)}multiplyInPlace(A){const g=this.__data[0],I=this.__data[1],C=this.__data[2],i=this.__data[3],e=A.__data[0],t=A.__data[1],B=A.__data[2],o=A.__data[3];this.set(g*o+i*e+I*B-C*t,I*o+i*t+C*e-g*B,C*o+i*B+g*t-I*e,i*o-g*e-I*t-C*B)}rotateVec3(A){const g=new c(A.x,A.y,A.z,0),I=this.multiply(g).multiply(this.conjugate());return new o(I.x,I.y,I.z)}rotateX(A){A*=.5;const g=this.x,I=this.y,C=this.z,i=this.w,e=Math.sin(A),t=Math.cos(A);this.x=g*t+i*e,this.y=I*t+C*e,this.z=C*t-I*e,this.w=i*t-g*e}rotateY(A){A*=.5;const g=this.x,I=this.y,C=this.z,i=this.w,e=Math.sin(A),t=Math.cos(A);this.x=g*t-C*e,this.y=I*t+i*e,this.z=C*t+g*e,this.w=i*t-I*e}rotateZ(A){A*=.5;const g=this.x,I=this.y,C=this.z,i=this.w,e=Math.sin(A),t=Math.cos(A);this.x=g*t+I*e,this.y=I*t-g*e,this.z=C*t+i*e,this.w=i*t-C*e}toMat3(){const A=this.x,g=this.y,I=this.z,C=this.w,i=A+A,e=g+g,t=I+I,B=A*i,o=g*i,s=g*e,a=I*i,l=I*e,n=I*t,h=C*i,c=C*e,r=C*t,G=new d;return G.m00=1-s-n,G.m10=o-r,G.m20=a+c,G.m01=o+r,G.m11=1-B-n,G.m21=l-h,G.m02=a-c,G.m12=l+h,G.m22=1-B-s,G}getXaxis(){const A=this.x*this.y,g=this.x*this.z,I=this.y*this.y,C=this.y*this.w,i=this.z*this.z,e=this.z*this.w;return new o(1-2*(i+I),2*(A+e),2*(g-C))}getYaxis(){const A=this.x*this.x,g=this.x*this.y,I=this.x*this.w,C=this.y*this.z,i=this.z*this.z,e=this.z*this.w;return new o(2*(g-e),1-2*(i+A),2*(C+I))}getZaxis(){const A=this.x*this.x,g=this.x*this.z,I=this.x*this.w,C=this.y*this.y,i=this.y*this.z,e=this.y*this.w;return new o(2*(e+g),2*(i-I),1-2*(C+A))}mirror(A){switch(A){case 0:case 0:default:return new c(this.z,this.w,this.x,this.y);case 1:return new c(-this.w,this.z,this.y,-this.x);case 2:return new c(this.x,this.y,this.z,-this.w)}}toMat4(){const A=this.x,g=this.y,I=this.z,C=this.w,i=A+A,e=g+g,t=I+I,B=A*i,o=g*i,s=g*e,a=I*i,l=I*e,n=I*t,d=C*i,c=C*e,r=C*t,G=new h;return G.m00=1-s-n,G.m10=o-r,G.m20=a+c,G.m01=o+r,G.m11=1-B-n,G.m21=l-d,G.m02=a-c,G.m12=l+d,G.m22=1-B-s,G}lerp(A,g){const I=new c(this.x+g*(A.x-this.x),this.y+g*(A.y-this.y),this.z+g*(A.z-this.z),this.w+g*(A.w-this.w));return I.normalizeInPlace(),I}slerp(A,g){const I=this.dot(A);if(I>.999)return this;const C=Math.acos(I),i=Math.sin(C),e=Math.sin(g*C),t=Math.sin((1-g)*C)/i,B=e/i,o=new c(t*this.x+B*A.x,t*this.y+B*A.y,t*this.z+B*A.z,t*this.w+B*A.w);return o.normalizeInPlace(),o}clone(){return new c(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}asArray(){return this.__data}toString(){return t.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.x,y:this.y,z:this.z,w:this.w}}fromJSON(A){this.__data[0]=A.x,this.__data[1]=A.y,this.__data[2]=A.z,this.__data[3]=A.w,this.normalizeInPlace()}readBinary(A){this.x=A.loadFloat32(),this.y=A.loadFloat32(),this.z=A.loadFloat32(),this.w=A.loadFloat32()}}class r{static radToDeg(A){return A/(Math.PI/180)}static degToRad(A){return A*(Math.PI/180)}static isNumeric(A){return!isNaN(parseFloat(A))&&isFinite(A)}static randomInt(A,g){return A=Math.ceil(A),g=Math.floor(g),Math.floor(Math.random()*(g-A))+A}static lerp(A,g,I){return A+I*(g-A)}static clamp(A,g,I){return Math.min(Math.max(A,g),I)}static nearestPow2(A){return Math.pow(2,Math.round(Math.log(A)/Math.log(2)))}static nearestPow10(A){return Math.pow(10,Math.round(Math.log10(A)/Math.log10(10)))}static nextPow2(A){if(0==this.fract(Math.log2(A)))return A;let g=0;for(;A>0;)g++,A>>=1;return 1<<g}static fract(A){return 0==A?0:A<0?A>-1?-A:-A%Math.floor(-A):A<1?A:A%Math.floor(A)}static remap(A,g,I,C,i){return C+(A-g)/(I-g)*(i-C)}static smoothStep(A,g,I){const C=this.clamp((I-A)/(g-A),0,1);return C*C*(3-2*C)}static linStep(A,g,I){return this.clamp((I-A)/(g-A),0,1)}static decode16BitFloatFrom2xUInt8(A){const g=A[0],I=(120&g)>>3;let C=0==I?0:2048;const i=C+((7&g)<<8)+A[1];C=0==I?1:0;return(128&g?1:-1)*i*Math.pow(2,I+C-16)}static encode16BitFloatInto2xUInt8(A){const g=new Uint8Array(2),I=A>=0?128:0;A=Math.abs(A);let C,i=15,e=1024;for(let g=15;g>0;g--)A<e&&(e/=2,i--);C=0==i?A/e/2:(A-e)/e;const t=Math.round(2048*C),B=t/256,o=t-256*B;return g[0]=I+8*i+B,g[1]=o,A>=2048&&(g[0]=255),g}static encode16BitFloat(A){const g=new Float32Array(1);g[0]=A;return(A=>{let g=A>>16&32768,I=A>>12&2047;const C=A>>23&255;return C<103?g:C>142?(g|=31744,g|=(255==C?0:1)&&8388607&A,g):C<113?(I|=2048,g|=(I>>114-C)+(I>>113-C&1),g):(g|=C-112<<10|I>>1,g+=1&I,g)})(new Int32Array(g.buffer)[0])}static decode16BitFloat(A){const g=(32768&A)>>15,I=(31744&A)>>10,C=1023&A;return 0==I?(g?-1:1)*Math.pow(2,-14)*(C/Math.pow(2,10)):31==I?C?NaN:1/0*(g?-1:1):(g?-1:1)*Math.pow(2,I-15)*(1+C/Math.pow(2,10))}static convertFloat32ArrayToUInt16Array(A){const g=new Uint16Array(A.length),I=new Int32Array(A.buffer),C=A=>{let g=A>>16&32768,I=A>>12&2047;const C=A>>23&255;return C<103?g:C>142?(g|=31744,g|=(255==C?0:1)&&8388607&A,g):C<113?(I|=2048,g|=(I>>114-C)+(I>>113-C&1),g):(g|=C-112<<10|I>>1,g+=1&I,g)};for(let i=0;i<A.length;i++)g[i]=C(I[i]);return g}}class G{constructor(A,g){this.start=A instanceof o?A:new o,this.dir=g instanceof o?g:new o}closestPoint(A){const g=A.subtract(this.start).dot(this.dir);if(g<Number.EPSILON)return 0;const I=this.dir.dot(this.dir);return I<Number.EPSILON?0:g/I}closestPointOnLineSegment(A,g){const I=this.dir,C=g.subtract(A),i=C.length();C.normalizeInPlace();const e=this.start.subtract(A),t=I.dot(I),B=I.dot(C),o=C.dot(C),s=I.dot(e),a=C.dot(e);if(0==t&&0==o)return[this.start.distanceTo(A),0];if(0==t)return[0,0];if(0==o)return[this.closestPoint(A),0];const l=t*o-B*B;let n,d;return l<.001?(n=0,d=B>o?s/B:a/o):(n=(B*a-o*s)/l,d=(t*a-B*s)/l),[n,r.clamp(d/i,0,1)]}pointAtDist(A){return this.start.add(this.dir.scale(A))}intersectRayVector(A){const g=this.dir,I=A.dir,C=this.start.subtract(A.start),i=g.dot(g),e=g.dot(I),t=I.dot(I),B=g.dot(C),o=I.dot(C);if(0==i&&0==t)return this.start.distanceTo(A.start);if(0==i)return A.closestPoint(this.start);if(0==t)return this.closestPoint(A.start);const s=i*t-e*e;let a,l;return s<.001?(a=0,l=e>t?B/e:o/t):(a=(e*o-t*B)/s,l=(i*o-e*B)/s),[a,l]}intersectRayPlane(A){const g=this.start.subtract(A.start),I=A.dir.dot(this.dir),C=-A.dir.dot(g);if(Math.abs(I)<Number.PRECISION)return-1;const i=C/I;return i<-Number.PRECISION?-1:i}intersectRayBox3(A,g=0){const I=new o(1/this.dir.x,1/this.dir.y,1/this.dir.z),C=[];C[0]=I.x<0?1:0,C[1]=I.y<0?1:0,C[2]=I.z<0?1:0;const i=[];if(g>0){const I=A.diagonal();I.normalizeInPlace(),I.scaleInPlace(g),i[0]=A.p0.subtract(I),i[1]=A.p1.add(I)}else i[0]=A.p0,i[1]=A.p1;let e=(i[C[0]].x-this.start.x)*I.x,t=(i[1-C[0]].x-this.start.x)*I.x;const B=(i[C[1]].y-this.start.y)*I.y,s=(i[1-C[1]].y-this.start.y)*I.y;if(e>s||B>t)return!1;B>e&&(e=B),s<t&&(t=s);const a=(i[C[2]].z-this.start.z)*I.z,l=(i[1-C[2]].z-this.start.z)*I.z;return!(e>l||a>t)&&(a>e&&(e=a),l<t&&(t=l),!0)}clone(){return new G(this.start.clone(),this.dir.clone())}toJSON(){return{start:this.start.toJSON(),dir:this.dir.toJSON()}}fromJSON(A){this.start.fromJSON(A.start),this.dir.fromJSON(A.dir)}toString(){return t.stringifyJSONWithFixedPrecision(this.toJSON())}}class m{constructor(A,g,I){if(A instanceof Float32Array)this.setFromFloat32Array(A);else{if(A instanceof o)this.tr=A;else{if(A instanceof c&&null==g&&null==I)return this.tr=new o,this.ori=A,void(this.sc=new o(1,1,1));this.tr=new o}this.ori=g instanceof c?g:new c,this.sc=I instanceof o?I:new o(1,1,1)}}set(A,g,I){this.tr=A,this.ori=g,I instanceof o&&(this.sc=I)}setFromOther(A){this.tr=A.tr,this.ori=A.ori,this.sc=A.sc}isIdentity(){return this.tr.isNull()&&this.ori.isIdentity()&&this.sc.is111()}isEqual(A){return this.tr.isEqual(A.tr)&&this.ori.isEqual(A.ori)&&this.sc.isEqual(A.sc)}approxEqual(A,g=Number.EPSILON){return(!A.tr||this.tr.approxEqual(A.tr,g))&&(!A.ori||this.ori.approxEqual(A.ori,g))&&(!A.sc||this.sc.approxEqual(A.sc,g))}setLookAt(A,g,I){const C=A.subtract(g);if(C.length()<Number.EPSILON)throw new Error("Invalid dir");this.ori.setFromDirectionAndUpvector(C,I),this.tr=A}multiply(A){let g=this.sc;if(Math.abs(this.sc.y-this.sc.x)>.001||Math.abs(this.sc.z-this.sc.x)>.001||Math.abs(this.sc.z-this.sc.y)>.001){const A=this.ori.toMat4(),I=new h(this.sc.x,0,0,0,0,this.sc.y,0,0,0,0,this.sc.z,0,0,0,0,1).multiply(A);g=new o(I.xAxis.length(),I.yAxis.length(),I.zAxis.length())}return new m(this.tr.add(this.ori.rotateVec3(this.sc.multiply(A.tr))),this.ori.multiply(A.ori),g.multiply(A.sc))}inverse(){const A=new m;if(A.ori=this.ori.inverse(),Math.abs(this.sc.y-this.sc.x)>.001||Math.abs(this.sc.z-this.sc.x)>.001||Math.abs(this.sc.z-this.sc.y)>.001){const g=A.ori.toMat4(),I=new h(this.sc.x,0,0,0,0,this.sc.y,0,0,0,0,this.sc.z,0,0,0,0,1).multiply(g);A.sc=new o(1/I.xAxis.length(),1/I.yAxis.length(),1/I.zAxis.length())}else A.sc=this.sc.inverse();return A.tr=A.ori.rotateVec3(this.tr.negate().multiply(A.sc)),A}transformVec3(A){return this.tr.add(this.ori.rotateVec3(this.sc.multiply(A)))}toMat4(){const A=new h(this.sc.x,0,0,0,0,this.sc.y,0,0,0,0,this.sc.z,0,0,0,0,1),g=this.ori.toMat4(),I=new h;return I.translation=this.tr,I.multiply(g).multiply(A)}setFromMat4(A){this.tr=A.translation,this.ori.setFromMat4(A)}setFromFloat32Array(A){if(7==A.length)return this.tr=new o(new Float32Array(A.buffer,A.byteOffset,3)),this.ori=new c(new Float32Array(A.buffer,A.byteOffset+12,4)),void(this.sc=new o(1,1,1));if(8!=A.length){if(10==A.length)return this.tr=new o(new Float32Array(A.buffer,A.byteOffset,3)),this.ori=new c(new Float32Array(A.buffer,A.byteOffset+12,4)),void(this.sc=new o(new Float32Array(A.buffer,A.byteOffset+21,3)));console.warn("unitialized: float32array.length == ",A.length)}else{this.tr=new o(new Float32Array(A.buffer,A.byteOffset,3)),this.ori=new c(new Float32Array(A.buffer,A.byteOffset+12,4));const g=A[7];this.sc=new o(g,g,g)}}clone(){return new m(this.tr.clone(),this.ori.clone(),this.sc.clone())}toJSON(){return{tr:this.tr.toJSON(),ori:this.ori.toJSON(),sc:this.sc.toJSON()}}fromJSON(A){this.tr.fromJSON(A.tr),this.ori.fromJSON(A.ori),A.sc&&this.sc.fromJSON(A.sc)}readBinary(A){this.tr.readBinary(A),this.ori.readBinary(A),this.sc.readBinary(A)}toString(){return t.stringifyJSONWithFixedPrecision(this.toJSON())}}class Q{constructor(A,g){this.p0=A instanceof B?A:new B(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY),this.p1=g instanceof B?g:new B(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY)}set(A,g){this.p0=A,this.p1=g}reset(){this.p0.x=Number.POSITIVE_INFINITY,this.p1.x=Number.NEGATIVE_INFINITY,this.p0.y=Number.POSITIVE_INFINITY,this.p1.y=Number.NEGATIVE_INFINITY}isValid(){return this.p0.x!=Number.POSITIVE_INFINITY&&this.p1.x!=Number.NEGATIVE_INFINITY&&this.p0.y!=Number.POSITIVE_INFINITY&&this.p1.y!=Number.NEGATIVE_INFINITY}addPoint(A){(this.p0.x==Number.POSITIVE_INFINITY||A.x<this.p0.x)&&(this.p0.x=A.x),(this.p0.y==Number.POSITIVE_INFINITY||A.y<this.p0.y)&&(this.p0.y=A.y),(this.p1.y==Number.NEGATIVE_INFINITY||A.x>this.p1.x)&&(this.p1.x=A.x),(this.p1.y==Number.NEGATIVE_INFINITY||A.y>this.p1.y)&&(this.p1.y=A.y)}size(){return this.p1.distanceTo(this.p0)}diagonal(){return this.p1.subtract(this.p0)}center(){const A=this.p1.subtract(this.p0);return A.scaleInPlace(.5),A.addInPlace(this.p0),A}clone(){return new Q(this.p0.clone(),this.p1.clone())}toJSON(){return{p0:this.p0.toJSON(),p1:this.p1.toJSON()}}toString(){return t.stringifyJSONWithFixedPrecision(this.toJSON())}}class E{constructor(A=new o,g=0){this.pos=A instanceof o?A:new o,this.radius=g}clone(){return new E(this.pos.clone(),this.radius)}intersectsBox(A){return A.intersectsSphere(this)}toJSON(){return{pos:this.pos.toJSON(),radius:this.radius}}toString(){return t.stringifyJSONWithFixedPrecision(this.toJSON())}}class b{constructor(A,g){A instanceof Float32Array?(this.p0=new o(new Float32Array(A.buffer,A.byteOffset,3)),this.p1=new o(new Float32Array(A.buffer,A.byteOffset+12,3))):(this.p0=A instanceof o?A:new o(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY),this.p1=g instanceof o?g:new o(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY))}get min(){return this.p0}get max(){return this.p1}set(A,g){this.p0=A,this.p1=g}reset(){this.p0.x=Number.POSITIVE_INFINITY,this.p0.y=Number.POSITIVE_INFINITY,this.p0.z=Number.POSITIVE_INFINITY,this.p1.x=Number.NEGATIVE_INFINITY,this.p1.y=Number.NEGATIVE_INFINITY,this.p1.z=Number.NEGATIVE_INFINITY}isValid(){return this.p0.x!=Number.POSITIVE_INFINITY&&this.p1.x!=Number.NEGATIVE_INFINITY&&this.p0.y!=Number.POSITIVE_INFINITY&&this.p1.y!=Number.NEGATIVE_INFINITY&&this.p0.z!=Number.POSITIVE_INFINITY&&this.p1.z!=Number.NEGATIVE_INFINITY}addPoint(A){A.x!=Number.POSITIVE_INFINITY&&A.x!=Number.NEGATIVE_INFINITY&&(A.x<this.p0.x&&(this.p0.x=A.x),A.x>this.p1.x&&(this.p1.x=A.x)),A.y!=Number.POSITIVE_INFINITY&&A.y!=Number.NEGATIVE_INFINITY&&(A.y<this.p0.y&&(this.p0.y=A.y),A.y>this.p1.y&&(this.p1.y=A.y)),A.z!=Number.POSITIVE_INFINITY&&A.z!=Number.NEGATIVE_INFINITY&&(A.z<this.p0.z&&(this.p0.z=A.z),A.z>this.p1.z&&(this.p1.z=A.z))}addBox3(A,g){g?(this.addPoint(g.transformVec3(A.p0)),this.addPoint(g.transformVec3(new o(A.p0.x,A.p0.y,A.p1.z))),this.addPoint(g.transformVec3(new o(A.p0.x,A.p1.y,A.p0.z))),this.addPoint(g.transformVec3(new o(A.p1.x,A.p0.y,A.p0.z))),this.addPoint(g.transformVec3(new o(A.p0.x,A.p1.y,A.p1.z))),this.addPoint(g.transformVec3(new o(A.p1.x,A.p0.y,A.p1.z))),this.addPoint(g.transformVec3(new o(A.p1.x,A.p1.y,A.p0.z))),this.addPoint(g.transformVec3(A.p1))):(this.addPoint(A.p0),this.addPoint(A.p1))}size(){return this.p1.distanceTo(this.p0)}diagonal(){return this.p1.subtract(this.p0)}center(){const A=this.p1.subtract(this.p0);return A.scaleInPlace(.5),A.addInPlace(this.p0),A}toMat4(){const A=this.p1.x-this.p0.x,g=this.p1.y-this.p0.y,I=this.p1.z-this.p0.z;return new h(A,0,0,0,0,g,0,0,0,0,I,0,this.p0.x,this.p0.y,this.p0.z,1)}getBoundingSphere(){return new E(this.center(),.5*this.diagonal().length())}intersectsBox(A){return!(A.max.x<this.min.x||A.min.x>this.max.x||A.max.y<this.min.y||A.min.y>this.max.y||A.max.z<this.min.z||A.min.z>this.max.z)}intersectsSphere(A){return(new o).distanceTo(A.pos)<=A.radius*A.radius}intersectsPlane(A){let g,I;return A.normal.x>0?(g=A.normal.x*this.min.x,I=A.normal.x*this.max.x):(g=A.normal.x*this.max.x,I=A.normal.x*this.min.x),A.normal.y>0?(g+=A.normal.y*this.min.y,I+=A.normal.y*this.max.y):(g+=A.normal.y*this.max.y,I+=A.normal.y*this.min.y),A.normal.z>0?(g+=A.normal.z*this.min.z,I+=A.normal.z*this.max.z):(g+=A.normal.z*this.max.z,I+=A.normal.z*this.min.z),g<=-A.w&&I>=-A.w}clone(){return new b(this.p0.clone(),this.p1.clone())}toJSON(){return{p0:this.p0.toJSON(),p1:this.p1.toJSON()}}fromJSON(A){const g={x:r.isNumeric(A.p0.x)?A.p0.x:Number.POSITIVE_INFINITY,y:r.isNumeric(A.p0.y)?A.p0.y:Number.POSITIVE_INFINITY,z:r.isNumeric(A.p0.z)?A.p0.z:Number.POSITIVE_INFINITY},I={x:r.isNumeric(A.p1.x)?A.p1.x:Number.NEGATIVE_INFINITY,y:r.isNumeric(A.p1.y)?A.p1.y:Number.NEGATIVE_INFINITY,z:r.isNumeric(A.p1.z)?A.p1.z:Number.NEGATIVE_INFINITY};this.p0.fromJSON(g),this.p1.fromJSON(I)}setFromFloat32Array(A){this.p0=new o(A.buffer,A.byteOffset),this.p1=new o(A.buffer,A.byteOffset+12)}toString(){return t.stringifyJSONWithFixedPrecision(this.toJSON())}}class Z{constructor(A,g=0){this.normal=A instanceof o?A:new o,this.w=g}set(A,g,I,C){this.normal.set(A,g,I),this.w=C}divideScalar(A){this.normal.scaleInPlace(1/A),this.w/=A}distanceToPoint(A){return A.dot(this.normal)+this.w}normalizeInPlace(){const A=1/this.normal.length();this.normal.scaleInPlace(A),this.w*=A}clone(){return new Z(this.normal.clone(),this.w)}toJSON(){return{normal:this.normal.toJSON(),w:this.w}}fromJSON(A){this.normal.fromJSON(A.normal),this.w=A.w}toString(){return t.stringifyJSONWithFixedPrecision(this.toJSON())}}let y=0;class u{constructor(){this.__id=++y}getId(){return this.__id}getClassName(){return e.getClassName(Object.getPrototypeOf(this).constructor)}}class R{constructor(){}}class V extends u{constructor(){super(),this.listeners={}}on(A,g){if(!g)throw new Error("Missing listener.");this.listeners[A]||(this.listeners[A]=[]);const I=this.listeners[A];if(I.includes(g))throw new Error(`Listener "${g.name}" already connected to event "${A}".`);const C=I.length;return I[C]=g,C}once(A,g){const I=C=>{g(C),this.off(A,I)};return this.on(A,I)}off(A,g){if(!g)throw new Error("Missing callback function (listener).");if("number"==typeof g)return console.warn("Deprecated. Un-register using the original listener instead."),void this.removeListenerById(A,g);const I=this.listeners[A]||[],C=[];if(I.forEach(((A,I)=>{A===g&&C.push(I)})),0==C.length)throw new Error(`Listener "${g.name}" is not connected to "${A}" event`);for(const A of C)I[A]=null}removeListenerById(A,g){const I=this.listeners[A];if(I){if(!I[g])throw new Error("Invalid ID");I[g]=null}else console.warn("callback :"+g+" was not connected to this event:"+A)}emit(A,g=new R){(this.listeners[A]||[]).forEach((A=>{A&&A(g)}))}}class F extends R{constructor(A,g){super(),this.width=A,this.height=g}}class S extends V{constructor(A=0,g=0){super(),this.root={x:0,y:0,w:A,h:g}}fit(A){if(0==A.length)return;let g=!1;if(this.root.w<A[0].w&&(this.root.w=A[0].w,g=!0),this.root.h<A[0].h&&(this.root.h=A[0].h,g=!0),g){const A=new F(this.root.w,this.root.h);this.emit("resized",A)}A.forEach((A=>{A.fit=this.__addBlock(A)}))}__addBlock(A){const g=this.findNode(this.root,A.w,A.h);return g?this.splitNode(g,A.w,A.h):this.growNode(A.w,A.h)}addBlock(A){let g=!1;if(this.root.w<A.w&&(this.root.w=A.w,g=!0),this.root.h<A.h&&(this.root.h=A.h,g=!0),g){const A=new F(this.root.w,this.root.h);this.emit("resized",A)}const I=this.findNode(this.root,A.w,A.h);return I?this.splitNode(I,A.w,A.h):this.growNode(A.w,A.h)}findNode(A,g,I){return A.used?this.findNode(A.right,g,I)||this.findNode(A.down,g,I):g<=A.w&&I<=A.h?A:null}splitNode(A,g,I){return A.used=!0,A.down={x:A.x,y:A.y+I,w:A.w,h:A.h-I},A.right={x:A.x+g,y:A.y,w:A.w-g,h:I},A}growNode(A,g){const I=A<=this.root.w,C=g<=this.root.h,i=C&&this.root.h>=this.root.w+A,e=I&&this.root.w>=this.root.h+g;return i?this.growRight(A,g):e?this.growDown(A,g):C?this.growRight(A,g):I?this.growDown(A,g):null}growRight(A,g){this.root={used:!0,x:0,y:0,w:this.root.w+A,h:this.root.h,down:this.root,right:{x:this.root.w,y:0,w:A,h:this.root.h}};const I=this.findNode(this.root,A,g);let C;I&&(C=this.splitNode(I,A,g));const i=new F(this.root.w,this.root.h);return this.emit("resized",i),C}growDown(A,g){this.root={used:!0,x:0,y:0,w:this.root.w,h:this.root.h+g,down:{x:0,y:this.root.h,w:this.root.w,h:g},right:this.root};const I=this.findNode(this.root,A,g);let C;I&&(C=this.splitNode(I,A,g));const i=new F(this.root.w,this.root.h);return this.emit("resized",i),C}}class w{constructor(A=0,g=0){this.start=A,this.size=g}}class X extends V{constructor(){super(),this.freeList=[],this.allocations=[],this.allocationsMap={},this.allocatedSpace=0,this.reservedSpace=0,this.freeSpace=0}getAllocation(A){return this.allocations[this.allocationsMap[A]]}allocate(A,g){if(null!=this.allocationsMap[A]){const I=this.allocationsMap[A],C=this.allocations[I];if(g==C.size)return C;if(g<C.size){const A=C.size-g;return this.addBlock(I+1,new w(C.start+g,A)),this.freeBlock(I+1),C.size=g,C}{const i=I+1;if(this.freeList.includes(i)&&C.size+this.allocations[i].size>=g){const A=this.allocations[i];if(C.size+A.size==g)return C.size+=A.size,this.freeSpace-=A.size,this.freeList.splice(this.freeList.indexOf(i),1),this.removeBlock(i),C;{const I=g-C.size;return C.size+=I,this.freeSpace-=I,A.start+=I,A.size-=I,C}}delete this.allocationsMap[A],C.start+C.size==this.allocatedSpace?(this.removeBlock(I),this.allocatedSpace-=C.size):this.freeBlock(I)}}let I=-1;for(let A=0;A<this.freeList.length;A++){const C=this.freeList[A],i=this.allocations[C];if(i.size==g){I=C;break}i.size>g&&(I=C)}if(-1!=I){const C=this.allocations[I];if(this.freeSpace-=C.size,this.freeList.splice(this.freeList.indexOf(I),1),C.size>g){const A=C.size-g;this.addBlock(I+1,new w(C.start+g,A)),this.freeBlock(I+1),this.freeList.sort(((A,g)=>this.allocations[g].size-this.allocations[A].size)),this.allocations[I].size=g}this.allocationsMap[A]=I}else{const I=this.allocatedSpace,C=this.allocations.length;this.allocatedSpace+=g;const i=r.nextPow2(this.allocatedSpace);i>this.reservedSpace&&(this.reservedSpace=i,this.emit("resized",{reservedSpace:this.reservedSpace})),this.allocations.push(new w(I,g)),this.allocationsMap[A]=C}return this.allocations[this.allocationsMap[A]]}addBlock(A,g){this.allocations.splice(A,0,g);for(const g in this.allocationsMap)this.allocationsMap[g]>=A&&this.allocationsMap[g]++;for(let g=0;g<this.freeList.length;g++)this.freeList[g]>=A&&this.freeList[g]++}removeBlock(A){this.allocations.splice(A,1);for(const g in this.allocationsMap)this.allocationsMap[g]>A&&this.allocationsMap[g]--;for(let g=0;g<this.freeList.length;g++)this.freeList[g]>A&&this.freeList[g]--}freeBlock(A){const g=this.allocations[A];this.freeSpace+=g.size;const I=A-1;if(this.freeList.includes(I)){return this.allocations[I].size+=g.size,void this.removeBlock(A)}const C=A+1;if(this.freeList.includes(C)){const I=this.allocations[C];return I.start-=g.size,I.size+=g.size,void this.removeBlock(A)}this.freeList.push(A)}deallocate(A){const g=this.allocationsMap[A];if(null==g)throw new Error(`allocation ${A} does not exist.`);this.freeBlock(g),delete this.allocationsMap[A]}getFragmentation(){return this.freeSpace/this.allocatedSpace}defragment(){}verifyConsistency(){if(Object.keys(this.allocationsMap).length+this.freeList.length!=this.allocations.length)throw new Error("number of blocks does not match the number of allocations");for(const A in this.allocationsMap){const g=this.allocationsMap[A];if(this.freeList.includes(g))throw new Error("block of used memory is also on the free list")}let A=0;for(let g=0;g<this.allocations.length;g++){const I=this.allocations[g];if(I.start!=A)throw"blocks of memory are not sequential";A+=I.size}if(A!=this.allocatedSpace)throw`allocated size: ${this.allocatedSpace}  does not match allocated blocks: ${A}`;if(this.reservedSpace<this.allocatedSpace)throw`reserved space: ${this.reservedSpace} is less than allocated space: ${this.allocatedSpace}`}}class H{constructor(A,g,I,C,i){this.screenPos=A,this.pointerRay=g,this.intersectionPos=I,this.geomData=C,this.geomItem=i.geomItem,this.componentId=i.componentId,this.dist=i.dist}}class W extends R{constructor(A){super(),this.controller=A}}class Y extends R{constructor(A,g){super(),this.change=A,this.count=g}}class K extends R{constructor(A){super(),this.envMap=A}}class p extends R{constructor(A){super(),this.index=A}}class N extends R{constructor(){super(),this.propagating=!0}}class J extends N{constructor(A){super(),this.propagating=!0,this.sourceEvent=A,this.altKey=A.altKey,this.code=A.code,this.ctrlKey=A.ctrlKey,this.isComposing=A.isComposing,this.key=A.key,this.location=A.location,this.metaKey=A.metaKey,this.repeat=A.repeat,this.shiftKey=A.shiftKey,this.which=A.which}stopPropagation(){this.propagating=!1,this.sourceEvent&&this.sourceEvent.stopPropagation()}preventDefault(){this.sourceEvent&&this.sourceEvent.preventDefault()}}class D extends R{constructor(A){super(),this.name=A}}class f extends R{constructor(A){super(),this.name=A}}class M extends R{constructor(A){super(),this.range=A}}class L extends R{constructor(A){super(),this.scene=A}}class U extends R{constructor(A){super(),this.value=A}}class v extends R{constructor(A){super(),this.selected=A}}class k extends R{constructor(A){super(),this.shaderName=A}}class x extends R{constructor(A){super(),this.state=A}}class z extends R{constructor(A,g){super(),this.geomFileID=A,this.geomCount=g}}class T extends R{constructor(A,g){super(),this.isTextured=A,this.param=g}}class _ extends R{constructor(A,g){super(),this.isOpaque=A,this.isOpaqueStateChanged=g}}class P extends R{constructor(A,g){super(),this.interfaceType=A,this.viewXfo=g}}class O extends R{constructor(A){super(),this.visible=A}}class j extends P{constructor(A){super("VR",A),this.hmd="",this.controllers=[]}}const q={mouse:"mouse",touch:"touch",xr:"xr"};let $=null;class AA extends N{constructor(A){super(),this.pointerType=A}stopPropagation(){this.propagating=!1}setCapture(A){$=A}getCapture(){return $}releaseCapture(){$=null}}class gA extends AA{constructor(A,g,I,C){super(q.xr),this.buttonPressed=0,this.viewport=A,this.controller=g,this.button=I,this.buttonPressed=C}stopPropagation(){this.propagating=!1}setCapture(A){this.controller.capturedItem=A}getCapture(){return this.controller.capturedItem}releaseCapture(){this.controller.capturedItem=null}}class IA extends AA{constructor(A,g,I){super(q.xr),this.controllers=[],this.viewport=A,this.viewXfo=g,I.forEach((A=>{this.controllers.push(A)}))}}class CA extends R{constructor(A){super(),this.xrViewport=A}}class iA extends AA{constructor(A,g){super(q.mouse),this.sourceEvent=A,this.button=A.button,this.clientX=A.clientX,this.clientY=A.clientY;this.rendererX=1*(this.clientX-g.left),this.rendererY=1*(this.clientY-g.top),this.altKey=A.altKey,this.metaKey=A.metaKey,this.ctrlKey=A.ctrlKey,this.shiftKey=A.shiftKey}stopPropagation(){super.stopPropagation(),this.sourceEvent&&this.sourceEvent.stopPropagation()}preventDefault(){this.sourceEvent&&this.sourceEvent.preventDefault()}}class eA{constructor(A,g){this.clientX=0,this.clientY=0,this.screenX=0,this.screenY=0,this.pageX=0,this.pageY=0,this.radiusX=0,this.radiusY=0,this.rotationAngle=0,this.force=0,this.altitudeAngle=0,this.azimuthAngle=0,this.touchType="direct",this.identifier=A.identifier,this.clientX=A.clientX,this.clientY=A.clientY,this.screenX=A.screenX,this.screenY=A.screenY,this.pageX=A.pageX,this.pageY=A.pageY,this.radiusX=A.radiusX,this.radiusY=A.radiusY,this.rotationAngle=A.rotationAngle,this.force=A.force;this.rendererX=1*(this.clientX-g.left),this.rendererY=1*(this.clientY-g.top),this.touchPos=new B,this.touchRay=new G}}class tA extends AA{constructor(A,g){super(q.touch),this.touches=[],this.changedTouches=[],this.targetTouches=[],this.altKey=!1,this.metaKey=!1,this.ctrlKey=!1,this.shiftKey=!1,this.sourceEvent=A,this.sourceEvent.stopPropagation(),this.altKey=A.altKey,this.metaKey=A.metaKey,this.ctrlKey=A.ctrlKey,this.shiftKey=A.shiftKey;for(let I=0;I<A.touches.length;I++)this.touches.push(new eA(A.touches[I],g));if(A.changedTouches)for(let I=0;I<A.changedTouches.length;I++)this.changedTouches.push(new eA(A.changedTouches[I],g));if(A.targetTouches)for(let I=0;I<A.targetTouches.length;I++)this.targetTouches.push(new eA(A.targetTouches[I],g))}stopPropagation(){super.stopPropagation(),this.sourceEvent&&this.sourceEvent.stopPropagation()}preventDefault(){}}class BA extends iA{constructor(A,g){super(A,g),this.wheelDelta=A.wheelDelta,this.deltaMode=A.deltaMode,this.deltaX=A.deltaX,this.deltaY=A.deltaY,this.deltaZ=A.deltaZ}}class oA extends R{constructor(A,g){super(),this.index=A,this.childItem=g}}class sA extends R{constructor(A,g){super(),this.oldName=A,this.newName=g}}let aA=0;class lA extends V{constructor(){if(super(),"RefCounted"==this.constructor.name)throw new Error("RefCounted should not be instantiated directly.");this.__id=++aA,this.__refs=[],this.__destroyed=!1}getId(){return this.__id}numRefs(){return this.__refs.length}addRef(A){if(!A)throw new Error("Error in RefCounted.addRef: Must provide a referer");return this.__refs.push(A),!0}removeRef(A){if(!A)throw new Error("Error in RefCounted.removeRef: Must provide a referer");const g=this.__refs.indexOf(A);if(-1==g)throw new Error("Error in RefCounted.removeRef: referer not found in refs list.");this.__refs.splice(g,1),0==this.__refs.length&&this.destroy()}getRefer(A){return this.__refs[A]}getRefIndex(A){return this.__refs.indexOf(A)}isDestroyed(){return this.__destroyed}destroy(){this.__destroyed=!0,this.emit("destructing")}}class nA extends V{constructor(){super(),this.paramEventListenerIDs={},this.paramMapping={},this.params=[],this.deprecatedParamMapping={}}getNumParameters(){return this.params.length}getParameters(){return this.params}getParameterIndex(A){return this.paramMapping[A]}getParameterByIndex(A){return this.params[A]}hasParameter(A){return A in this.paramMapping}addParameterDeprecationMapping(A,g){this.deprecatedParamMapping[A]=g}getParameter(A){let g=this.paramMapping[A];if(null==g){const I=this.deprecatedParamMapping[A];if(!I)return null;console.warn(`Parameter name ${A} is now deprecated. Please use ${I} instead.`),g=this.paramMapping[I]}return this.params[g]}parameterValueChanged(A){this.emit("parameterValueChanged",A)}addParameter(A){return this.insertParameter(A,this.params.length)}insertParameter(A,g){const I=A.getName();null!=this.paramMapping[I]&&(console.warn("Replacing Parameter:"+I),this.removeParameter(I)),A.setOwner(this),this.paramEventListenerIDs[I]=A.on("valueChanged",(g=>{const I={param:A};for(const A in g)I[A]=g[A];this.parameterValueChanged(I)})),this.params.splice(g,0,A);for(let A=g;A<this.params.length;A++)this.paramMapping[this.params[A].getName()]=A;const C=new D(I);return this.emit("parameterAdded",C),A}removeParameter(A){if(null==this.paramMapping[A])throw new Error("Unable to remove Parameter:"+A);const g=this.paramMapping[A];this.params[this.paramMapping[A]].removeListenerById("valueChanged",this.paramEventListenerIDs[A]),this.params.splice(g,1),delete this.paramMapping[A];for(let A=g;A<this.params.length;A++)this.paramMapping[this.params[A].getName()]=A;const I=new f(A);this.emit("parameterRemoved",I)}replaceParameter(A){const g=A.getName();if(null==this.paramMapping[g])throw new Error("Unable to replace Parameter:"+g);const I=this.paramMapping[g];return this.removeParameter(g),this.insertParameter(A,I),A}toJSON(A){const g={type:this.getClassName()},I={};let C=0;for(const g of this.params){const i=g.toJSON(A);i&&(I[g.getName()]=i,C++)}return C>0&&(g.params=I),g}fromJSON(A,g){if(A.params)for(const I in A.params){const C=A.params[I],i=this.getParameter(I);i?C.paramPath?null==g||g.resolvePath(C.paramPath,(A=>{this.replaceParameter(A)}),(()=>{console.warn("Unable to resolve shared parameter:"+C.paramPath)})):i.fromJSON(C,g):console.warn("Param not found:"+I)}}readBinary(A,g){if((null==g?void 0:g.versions["zea-engine"].compare([0,0,3]))>=0){const I=A.loadUInt32();for(let C=0;C<I;C++){const I=A.loadStr(),C=A.loadStr();let i=this.getParameter(C);if(!i){if(i=e.constructClass(I),!i){console.error("Unable to construct prop:"+C+" of type:"+I);continue}i.setName(C),this.addParameter(i)}i.readBinary(A,g)}}}toString(A){return JSON.stringify(this.toJSON(),null,2)}copyFrom(A,g){let I=A.getNumParameters();for(;I--;){const g=A.getParameterByIndex(I),C=this.getParameter(g.getName());C?C.copyFrom(g):this.addParameter(g.clone())}}}let dA=0;class hA extends nA{constructor(A=""){super(),this.__ownerItem=void 0,this.__selectable=!0,this.__selected=!1,this.__metaData={},this.__name=A,this.__path=[this.__name],dA++}static getNumBaseItems(){return dA}getName(){return this.__name}setName(A){if(this.__name!=A){const g=this.__name;this.__name=A,this.updatePath();const I=new sA(g,A);this.emit("nameChanged",I)}}get name(){return this.getName()}set name(A){this.setName(A)}updatePath(){null==this.__ownerItem?this.__path=[this.__name]:(this.__path=this.__ownerItem.getPath().slice(),this.__path.push(this.__name))}getPath(){return this.__path}resolvePath(A,g=0){if(0==g&&("."!=A[0]&&A[0]!=this.__name||g++),g==A.length)return this;if(">"==A[g]&&g==A.length-1)return this.getParameter(A[g+1]);const I=this.getParameter(A[g]);if(I)return I;throw new Error("Invalid path:"+A+"["+g+"] member not found")}getOwner(){return this.__ownerItem}setOwner(A){this.__ownerItem!==A?this.__ownerItem=A:A||(this.__ownerItem=void 0),this.updatePath()}isSelectable(){return this.__selectable}setSelectable(A){if(this.__selectable!=A){this.__selectable=A;let g=new U(this.__selectable);return this.emit("selectabilityChanged",g),!0}return!1}isSelected(){return this.__selected}setSelected(A){this.__selected=A;let g=new v(this.__selected);this.emit("selectedChanged",g)}getMetadata(A){return this.__metaData[A]}hasMetadata(A){return A in this.__metaData}setMetadata(A,g){this.__metaData[A]=g}deleteMetadata(A){delete this.__metaData[A]}toJSON(A){const g=super.toJSON(A);return g.name=this.__name,g}fromJSON(A,g){A.name&&(this.__name=A.name),super.fromJSON(A,g)}readBinary(A,g){A.loadStr(),this.setName(A.loadStr()),super.readBinary(A,g)}clone(A){throw new Error(this.constructor.name+" does not implement its clone method")}copyFrom(A,g){super.copyFrom(A,g),this.setName(A.getName()),this.setSelectable(A.isSelectable())}}const cA=function(A,g,I,C,i){try{const e=new XMLHttpRequest;e.responseType=g,e.addEventListener("timeout",(g=>{throw new Error("The request for "+A+" timed out.")})),e.addEventListener("error",(g=>{throw new Error("The request for "+A+": xhr.readyState:"+e.readyState)})),e.addEventListener("abort",(g=>{throw new Error("The request for "+A+": xhr.readyState:"+e.readyState)})),e.addEventListener("progress",(A=>{i&&i(A.total,A.loaded)})),e.addEventListener("loadend",(A=>{200==e.status?I(e):C(e.statusText)})),e.open("GET",A,!0),e.send()}catch(A){C(A)}},rA=function(A,g,I,C){cA(A,"text",(A=>{g(A.responseText)}),(g=>{if(null==I)throw new Error("Unable to XHR File:"+A);I(g)}),C)},GA=function(A,g,I,C){cA(A,"arraybuffer",(A=>{g(A.response)}),(g=>{if(null==I)throw new Error("Unable to XHR File:"+A);I(g)}),C)};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
function mA(A,g,I,C){return new(I||(I=Promise))((function(i,e){function t(A){try{o(C.next(A))}catch(A){e(A)}}function B(A){try{o(C.throw(A))}catch(A){e(A)}}function o(A){var g;A.done?i(A.value):(g=A.value,g instanceof I?g:new I((function(A){A(g)}))).then(t,B)}o((C=C.apply(A,g||[])).next())}))}let QA=0;class EA extends V{constructor(A){super(),this.poolSize=Math.max(1,g.hardwareConcurrency-1),this.workers=[],this.workerTaskCount=[],this.taskPromiseResolves={},this.taskQueue=[],this.availableWorkers=[],this.terminationTimeouts=[],this.terminateWorkersWhenFree=!0,this.terminationLatency=2e3,this.terminateWorkersWhenFree=A}addTask(A,g){return this.addTaskCallback((()=>({taskData:A,transferables:g})))}addTaskCallback(A){QA++;const g=QA;return new Promise((I=>mA(this,void 0,void 0,(function*(){this.taskPromiseResolves[g]=I,this.taskQueue.push({taskId:g,dataFactory:A}),this.availableWorkers.length>0?this.consumeTask():this.workers.length<this.poolSize&&(yield this.addWorker(),this.consumeTask())}))))}consumeTask(){return mA(this,void 0,void 0,(function*(){const A=this.availableWorkers.pop();if(this.workerTaskCount[A]>0)return;if(0==this.taskQueue.length)return void(this.terminateWorkersWhenFree&&this.scheduleWorkerTermination(A));if(-1!=this.terminationTimeouts[A]?(clearTimeout(this.terminationTimeouts[A]),this.terminationTimeouts[A]=-1):this.workers[A]||(yield this.allocWorker(A)),0==this.taskQueue.length)return void(this.terminateWorkersWhenFree&&this.scheduleWorkerTermination(A));const g=this.taskQueue.pop(),{taskData:I,transferables:C}=g.dataFactory(A);I.taskId=g.taskId,this.workerTaskCount[A]++,this.workers[A].postMessage(I,C)}))}addWorker(){const A=this.workers.length;return this.workers.push(null),this.allocWorker(A)}allocWorker(A){return new Promise((g=>{this.constructWorker().then((I=>{I.onmessage=g=>{if(g.data.taskId in this.taskPromiseResolves){const I=g.data.taskId;if(delete g.data.taskId,this.taskPromiseResolves[I](g.data),delete this.taskPromiseResolves[I],this.workerTaskCount[A]--,this.workerTaskCount[A]>0)return;-1==this.availableWorkers.indexOf(A)&&this.availableWorkers.push(A),this.taskQueue.length>0?this.consumeTask():this.terminateWorkersWhenFree&&this.scheduleWorkerTermination(A)}else g.data.eventName&&(g.data.workerId=A,this.emit(g.data.eventName,g.data))},this.workers[A]=I,this.terminationTimeouts[A]=-1,this.workerTaskCount[A]=0,this.availableWorkers.push(A),g()}))}))}scheduleWorkerTermination(A){this.terminationTimeouts[A]=setTimeout((()=>{this.terminateWorker(A),this.terminationTimeouts[A]=-1}),this.terminationLatency)}terminateWorker(A){this.workers[A].terminate(),this.workers[A]=null}messageWorker(A,g){QA++;const I=QA;return new Promise((C=>{this.taskPromiseResolves[I]=C,g.taskId=I,this.workers[A].postMessage(g)}))}}function bA(A,g,I){var C=void 0===g?null:g,i=function(A,g){var I=atob(A);if(g){for(var C=new Uint8Array(I.length),i=0,e=I.length;i<e;++i)C[i]=I.charCodeAt(i);return String.fromCharCode.apply(null,new Uint16Array(C.buffer))}return I}(A,void 0!==I&&I),e=i.indexOf("\n",10)+1,t=i.substring(e)+(C?"//# sourceMappingURL="+C:""),B=new Blob([t],{type:"application/javascript"});return URL.createObjectURL(B)}function ZA(A,g,I){var C;return function(i){return C=C||bA(A,g,I),new Worker(C,i)}}var yA=ZA("",null,!1);const uA=Uint8Array.from(atob(""),(A=>A.charCodeAt(0)));class RA extends EA{constructor(){super(!0)}constructWorker(){return new Promise((A=>{const g=new yA;g.onmessage=I=>{"WASM_LOADED"==I.data.type&&A(g)},g.postMessage({type:"init",buffer:uA.buffer})}))}}class VA extends V{constructor(){super(),this.baseUrl="",this.loadCount=0,this.queue=[],this.__totalWork=0,this.__doneWork=0,this.plugins={},this.systemUrls={};const A="https://storage.googleapis.com/visualive-tmp/zea-engine-resources";this.systemUrls["ZeaEngine/Vive.vla"]=A+"/Vive.vla",this.systemUrls["ZeaEngine/Oculus.vla"]=A+"/Oculus.vla",this.commonResources={}}registerPlugin(A){A.init(this),this.plugins[A.getType()]=A}loadFile(A,g,I=!0){const C=this.plugins[A];if(!C)throw new Error(`There's no plugin registered for the type of file "${A}". Did you add the plugins script? See: https://docs.zea.live/zea-engine/#/adding-default-plugins`);if(I&&this.incrementWorkload(),this.loadCount<2e3){this.loadCount++;const A=C.loadFile(g);return A.then((()=>{for(this.loadCount--,this.incrementWorkDone(),this.emit("loaded",{url:g});this.loadCount<2e3&&this.queue.length>0;){this.queue.pop()()}}),(()=>{this.incrementWorkDone()})),A}return new Promise(((A,I)=>{this.queue.push((()=>{this.loadCount++;C.loadFile(g).then((I=>{for(this.loadCount--,this.incrementWorkDone(),this.emit("loaded",{url:g});this.loadCount<2e3&&this.queue.length>0;){this.queue.pop()()}A(I)}),(()=>{this.incrementWorkDone()}))}))}))}getCommonResource(A){return this.commonResources[A]}setCommonResource(A,g){this.commonResources[A]=g}incrementWorkload(A=1){this.__totalWork+=A;const g=this.__doneWork/this.__totalWork*100;this.emit("progressIncremented",{percent:g})}incrementWorkDone(A=1){this.__doneWork+=A;const g=this.__doneWork/this.__totalWork*100;if(this.emit("progressIncremented",{percent:g}),this.__doneWork>this.__totalWork)throw new Error("Mismatch between work loaded and work done.")}}const FA=new VA,SA=new class{constructor(){this.threadPool=new RA}init(A){this.resourceLoader=A}getType(){return"archive"}loadFile(A){this.resourceLoader.incrementWorkload(1);const g=new Promise(((g,I)=>{fetch(A).then((g=>(this.resourceLoader.incrementWorkDone(1),function(A){return!!A.ok&&A}(g)?g.arrayBuffer():(I(new Error(`loadArchive: ${g.status} - ${g.statusText} : ${A}`)),null)))).then((C=>{if(!C)return void I("Buffer is null");const i=A;this.threadPool.addTask({type:"unpack",resourceId:i,buffer:C},[C]).then((A=>{"FINISHED"===A.type?g(A.entries):"ERROR"===A.type&&I(new Error(`Unable to load Resource: ${i}`))}))}))}));return g}};FA.registerPlugin(SA);const wA=new class{init(A){this.resourceLoader=A}getType(){return"json"}loadFile(A){this.resourceLoader.incrementWorkload(1);return new Promise(((g,I)=>{fetch(A).then((C=>{this.resourceLoader.incrementWorkDone(1),!function(A){return!!A.ok&&A}(C)?I(`loadJSON: ${C.status} - ${C.statusText} : ${A}`):g(C.json())}))}))}};FA.registerPlugin(wA);const XA=new class{init(A){this.resourceLoader=A}getType(){return"text"}loadFile(A){this.resourceLoader.incrementWorkload(1);return new Promise(((g,I)=>{fetch(A).then((C=>{this.resourceLoader.incrementWorkDone(1),!function(A){return!!A.ok&&A}(C)?I(`loadText: ${C.status} - ${C.statusText} : ${A}`):g(C.text())}))}))}};FA.registerPlugin(XA);const HA=new class{init(A){this.resourceLoader=A}getType(){return"binary"}loadFile(A){this.resourceLoader.incrementWorkload(1);return new Promise(((g,I)=>{fetch(A).then((C=>{this.resourceLoader.incrementWorkDone(1),!function(A){return!!A.ok&&A}(C)?I(`loadBinary: ${C.status} - ${C.statusText} : ${A}`):g(C.arrayBuffer())}))}))}};FA.registerPlugin(HA);class WA{constructor(A=""){if(this.branch="",A){const g=A.split("-"),I=g[0].split(".");this.major=parseInt(I[0]),this.minor=parseInt(I[1]),this.patch=parseInt(I[2]),2==g.length&&(this.branch=g[1])}else this.major=0,this.minor=0,this.patch=0}compare(A){const g=[this.major,this.minor,this.patch];for(let I=0;I<3;I++)if(g[I]!==A[I])return g[I]-A[I];return 0}toString(){return`v${this.major}.${this.minor}.${this.patch}`+(""!=this.branch?`-${this.branch}`:"")}}class YA{constructor(A,g=0,I=!0){this.__data=A,this.__byteOffset=g,this.__dataView=new DataView(this.__data),this.__isMobileDevice=I,this.utf8decoder=new TextDecoder}get isMobileDevice(){return this.__isMobileDevice}get data(){return this.__data}get byteLength(){return this.__dataView.byteLength}get remainingByteLength(){return this.__dataView.byteLength-this.__byteOffset}pos(){return this.__byteOffset}seek(A){this.__byteOffset=A}advance(A){this.__byteOffset+=A}loadUInt8(){const A=this.__dataView.getUint8(this.__byteOffset);return this.__byteOffset+=1,A}loadUInt16(){const A=this.__dataView.getUint16(this.__byteOffset,!0);return this.__byteOffset+=2,A}loadUInt32(){const A=this.__dataView.getUint32(this.__byteOffset,!0);return this.__byteOffset+=4,A}loadSInt32(){const A=this.__dataView.getInt32(this.__byteOffset,!0);return this.__byteOffset+=4,A}loadFloat16(){const A=this.loadUInt16();return r.decode16BitFloat(A)}loadUFloat16(){const A=this.loadFloat16();return A<0?2048-A:A}loadFloat16From2xUInt8(){throw Error("loadFloat16From2xUInt8 not implemented!")}loadUInt32From2xUFloat16(){return this.loadUFloat16()+4096*this.loadUFloat16()}loadSInt32From2xFloat16(){return this.loadFloat16()+2048*this.loadFloat16()}loadFloat32(){const A=this.__dataView.getFloat32(this.__byteOffset,!0);return this.__byteOffset+=4,A}loadUInt8Array(A,g=!1){let I;return null==A&&(A=this.loadUInt32()),g?(I=new Uint8Array(this.__data.slice(this.__byteOffset,this.__byteOffset+A)),I.length!=A&&console.log("broken")):I=new Uint8Array(this.__data,this.__byteOffset,A),this.__byteOffset+=A,I}loadUInt16Array(A,g=!1){if(null==A&&(A=this.loadUInt32()),0==A)return new Uint16Array;let I;if(this.readPad(2),this.__isMobileDevice){I=new Uint16Array(A);for(let g=0;g<A;g++)I[g]=this.__dataView.getUint16(this.__byteOffset,!0),this.__byteOffset+=2}else g?(I=new Uint16Array(this.__data.slice(this.__byteOffset,this.__byteOffset+2*A)),I.length!=A&&console.log("broken")):I=new Uint16Array(this.__data,this.__byteOffset,A),this.__byteOffset+=2*A;return I}loadUInt32Array(A,g=!1){if(null==A&&(A=this.loadUInt32()),0==A)return new Uint32Array;let I;if(this.readPad(4),this.__isMobileDevice){I=new Uint32Array(A);for(let g=0;g<A;g++)I[g]=this.__dataView.getUint32(this.__byteOffset,!0),this.__byteOffset+=4}else g?(I=new Uint32Array(this.__data.slice(this.__byteOffset,this.__byteOffset+4*A)),I.length!=A&&console.log("broken")):I=new Uint32Array(this.__data,this.__byteOffset,A),this.__byteOffset+=4*A;return I}loadFloat32Array(A,g=!1){if(null==A&&(A=this.loadUInt32()),0==A)return new Float32Array;let I;if(this.readPad(4),this.__isMobileDevice){I=new Float32Array(A);for(let g=0;g<A;g++)I[g]=this.__dataView.getFloat32(this.__byteOffset,!0),this.__byteOffset+=4}else I=g?new Float32Array(this.__data.slice(this.__byteOffset,this.__byteOffset+4*A)):new Float32Array(this.__data,this.__byteOffset,A),this.__byteOffset+=4*A;return I}loadStr(){const A=this.loadUInt32(),g=new Uint8Array(this.__data,this.__byteOffset,A);return this.__byteOffset+=A,this.utf8decoder.decode(g)}loadStrArray(){const A=this.loadUInt32(),g=[];for(let I=0;I<A;I++)g[I]=this.loadStr();return g}loadSInt32Vec2(){const A=this.loadSInt32(),g=this.loadSInt32();return new B(A,g)}loadUInt32Vec2(){const A=this.loadUInt32(),g=this.loadUInt32();return new B(A,g)}loadFloat16Vec2(){const A=this.loadFloat16(),g=this.loadFloat16();return new B(A,g)}loadFloat32Vec2(){const A=this.loadFloat32(),g=this.loadFloat32();return new B(A,g)}loadFloat16Vec3(){const A=this.loadFloat16(),g=this.loadFloat16(),I=this.loadFloat16();return new o(A,g,I)}loadFloat32Vec3(){const A=this.loadFloat32(),g=this.loadFloat32(),I=this.loadFloat32();return new o(A,g,I)}loadFloat16Quat(){const A=this.loadFloat16(),g=this.loadFloat16(),I=this.loadFloat16(),C=this.loadFloat16();return new c(A,g,I,C)}loadFloat32Quat(){const A=this.loadFloat32(),g=this.loadFloat32(),I=this.loadFloat32(),C=this.loadFloat32();return new c(A,g,I,C)}loadRGBFloat32Color(){const A=this.loadFloat32(),g=this.loadFloat32(),I=this.loadFloat32();return new l(A,g,I)}loadRGBAFloat32Color(){const A=this.loadFloat32(),g=this.loadFloat32(),I=this.loadFloat32(),C=this.loadFloat32();return new l(A,g,I,C)}loadRGBUInt8Color(){const A=this.loadUInt8(),g=this.loadUInt8(),I=this.loadUInt8();return new l(A/255,g/255,I/255)}loadRGBAUInt8Color(){const A=this.loadUInt8(),g=this.loadUInt8(),I=this.loadUInt8(),C=this.loadUInt8();return new l(A/255,g/255,I/255,C/255)}loadBox2(){return new Q(this.loadFloat32Vec2(),this.loadFloat32Vec2())}loadBox3(){return new b(this.loadFloat32Vec3(),this.loadFloat32Vec3())}readPad(A){const g=this.__byteOffset%A;0!=g&&(this.__byteOffset+=A-g)}}var KA,pA;!function(A){A[A.OP_WRITE=0]="OP_WRITE",A[A.OP_READ_WRITE=1]="OP_READ_WRITE"}(KA||(KA={}));class NA extends V{constructor(A="",g,I){super(),this.dirty=!1,this.boundInputs=[],this.boundOutputs=[],this.cleaning=!1,this.dirtyOpIndex=0,this.firstOP_WRITE=0,this.name=A,this.__value=g,this.dataType=I}getName(){return this.name}setName(A){if(A===this.name)return;const g=this.name;this.name=A,this.emit("nameChanged",{newName:this.name,prevName:g})}getOwner(){return this.ownerItem}setOwner(A){this.ownerItem=A}getPath(){return this.ownerItem&&this.ownerItem instanceof hA?[...this.ownerItem.getPath(),this.name]:[this.name]}getDataType(){return this.dataType}bindOperatorInput(A){this.boundInputs.push(A)}unbindOperatorInput(A){const g=this.boundInputs.indexOf(A);this.boundInputs.splice(g,1)}bindOperatorOutput(A,g=-1){-1==g&&(g=this.boundOutputs.length),this.boundOutputs.splice(g,0,A);for(let A=g;A<this.boundOutputs.length;A++)this.boundOutputs[A].setParamBindIndex(A);return this.__findFirstOP_WRITE(),this.dirtyOpIndex=this.boundOutputs.length,this.setDirty(g),g}unbindOperatorOutput(A){const g=A.getParamBindIndex();this.boundOutputs.splice(g,1);for(let A=g;A<this.boundOutputs.length;A++)this.boundOutputs[A].setParamBindIndex(A);return this.__findFirstOP_WRITE(),this.dirtyOpIndex=this.boundOutputs.length,this.setDirty(Math.max(0,g-1)),g}__findFirstOP_WRITE(){if(this.firstOP_WRITE=this.boundOutputs.length,this.boundOutputs.length>0)for(this.firstOP_WRITE--;this.firstOP_WRITE>0&&this.boundOutputs[this.firstOP_WRITE].getMode()!=KA.OP_WRITE;this.firstOP_WRITE--);}setDirty(A){if(A<this.dirtyOpIndex){let g=this.firstOP_WRITE;if(g<=A){for(this.dirtyOpIndex=g,g++;g<this.boundOutputs.length;g++)g!=A&&this.boundOutputs[g].getOperator().setDirty();for(let A=0;A<this.boundInputs.length;A++)this.boundInputs[A].setDirty();return this.emit("valueChanged"),!0}}return!1}isDirty(){return this.dirtyOpIndex<this.boundOutputs.length}getDirtyBindingIndex(){return this.dirtyOpIndex}setCleanFromOp(A,g){if(g!=this.dirtyOpIndex)if(g<this.dirtyOpIndex)console.log("Parameter is cleaned when it was already clean to that point in the stack:",this.getPath());else if(this.boundOutputs[g].getMode()!=KA.OP_WRITE){const A=this.getClassName(),I=this.boundOutputs[g].getOperator(),C=I.getClassName();throw new Error(`Parameter: ${A} with name: ${this.getName()} is not cleaning all outputs during evaluation of op: ${C} with name: ${I.getName()}`)}this.__value=A,this.dirtyOpIndex=g+1}getValueFromOp(A){return this.dirtyOpIndex<A&&this._clean(A),this.__value}_clean(A){if(this.cleaning)throw new Error(`Cycle detected when cleaning: ${this.getPath()}. Operators need to be rebound to fix errors`);for(this.cleaning=!0;this.dirtyOpIndex<A;){const A=this.dirtyOpIndex;if(this.boundOutputs[this.dirtyOpIndex].getOperator().evaluate(),A==this.dirtyOpIndex){const A=this.boundOutputs[this.dirtyOpIndex].getOperator(),g=A.getClassName();console.warn(`Operator: ${g} with name: ${A.getName()} is not cleaning its outputs during evaluation`),this.dirtyOpIndex++}}this.cleaning=!1}getValue(){return this.dirtyOpIndex<this.boundOutputs.length&&this._clean(this.boundOutputs.length),this.__value}setValue(A){if(null==A)throw"undefined was passed into the set value for param:"+this.getName();if(this.boundOutputs.length>0)for(let g=this.boundOutputs.length-1;g>=0;g--){const I=this.boundOutputs[g];if(A=I.backPropagateValue(A),0==I.getMode())return}if("object"==typeof A||this.__value!=A){this.__value=A;for(let A=0;A<this.boundInputs.length;A++)this.boundInputs[A].paramValueChanged();this.emit("valueChanged")}}get value(){return this.getValue()}set value(A){this.setValue(A)}loadValue(A){this.__value=A}copyFrom(A,g){this.loadValue(A.__value)}readBinary(A,g){console.warn(`TODO: Parameter: ${this.constructor.name} with name: ${this.name} does not implement readBinary`)}destroy(){console.warn("nothing destroyed. This method was not overwritten in subclass")}}class JA extends NA{constructor(A="",g=0,I,C){super(A,g,"Number"),this.range=I,this.step=C}getRange(){return this.range}setRange(A){this.range=A}getStep(){return this.step}setStep(A){this.step=A}toJSON(A){const g={value:this.__value};return this.range&&(g.range=this.range),this.step&&(g.step=this.step),g}fromJSON(A,g){this.__value=A.value,A.range&&(this.range=A.range),A.step&&(this.step=A.step)}readBinary(A,g){this.__value=A.loadFloat32()}clone(){return new JA(this.name,this.__value,this.range,this.step)}}e.register("NumberParameter",JA),e.register("Property_SInt32",class extends JA{readBinary(A,g){this.__value=A.loadSInt32()}}),e.register("Property_UInt32",class extends JA{readBinary(A,g){this.__value=A.loadUInt32()}}),e.register("Property_Float32",class extends JA{readBinary(A,g){this.__value=A.loadFloat32()}});class DA extends JA{constructor(A,g,I=[]){super(A,g,[0,I.length],1),this.choices=I}getChoices(){return this.choices}setValue(A){"string"==typeof A?super.setValue(this.choices.indexOf(A)):super.setValue(A)}}e.register("MultiChoiceParameter",DA);class fA extends NA{constructor(A="",g){super(A,null!=g&&g,"Boolean")}readBinary(A,g){this.__value=0!=A.loadUInt8()}toJSON(A){return{value:this.__value}}fromJSON(A,g){this.__value=A.value,this.emit("valueChanged",{mode:0})}clone(){return new fA(this.name,this.__value)}}e.register("BooleanParameter",fA),e.register("Property_Boolean",fA);class MA extends NA{constructor(A="",g,I){super(A,g||new B,"Vec2"),this.range=I}getRange(){return this.range}setRange(A){this.range=A,this.emit("rangeChanged",{range:A})}readBinary(A,g){var I;null===(I=this.__value)||void 0===I||I.readBinary(A)}toJSON(A){var g;return{name:this.name,value:null===(g=this.__value)||void 0===g?void 0:g.toJSON()}}fromJSON(A,g){const I=new B;I.fromJSON(A.value),this.__value=I,A.name&&(this.name=A.name)}clone(){var A;const g=new MA(this.name,null===(A=this.__value)||void 0===A?void 0:A.clone());return this.range&&g.setRange(this.range),g}}e.register("Vec2Parameter",MA),e.register("Property_Vec2_32f",MA);class LA extends NA{constructor(A="",g,I){super(A,g||new o,"Vec3"),this.range=I}readBinary(A,g){var I;null===(I=this.__value)||void 0===I||I.readBinary(A)}toJSON(A){var g;return{name:this.name,value:null===(g=this.__value)||void 0===g?void 0:g.toJSON()}}fromJSON(A,g){const I=new o;I.fromJSON(A.value),this.__value=I,A.name&&(this.name=A.name)}clone(){var A;return new LA(this.name,null===(A=this.__value)||void 0===A?void 0:A.clone())}}e.register("Vec3Parameter",LA),e.register("Property_Vec3_32f",LA);class UA extends NA{constructor(A="",g){super(A,g||new s,"Vec4")}readBinary(A,g){var I;null===(I=this.__value)||void 0===I||I.readBinary(A)}toJSON(A){var g;return{name:this.name,value:null===(g=this.__value)||void 0===g?void 0:g.toJSON()}}fromJSON(A,g){const I=new s;I.fromJSON(A.value),this.__value=I,A.name&&(this.name=A.name)}clone(){var A;return new UA(this.name,null===(A=this.__value)||void 0===A?void 0:A.clone())}}e.register("Vec4Parameter",UA),e.register("Property_Vec4_32f",UA);class vA extends NA{constructor(A="",g){super(A,g||new Q,"Box2")}readBinary(A,g){this.__value.p0.readBinary(A),this.__value.p1.readBinary(A)}toJSON(A){return{value:{p0:this.__value.p0.toJSON(),p1:this.__value.p1.toJSON()}}}fromJSON(A,g){this.__value.p0.fromJSON(A.p0),this.__value.p1.fromJSON(A.p1)}clone(){var A;return new vA(this.name,null===(A=this.__value)||void 0===A?void 0:A.clone())}}e.register("Box2Parameter",vA),e.register("Property_Box2_32f",vA);class kA extends NA{constructor(A="",g){super(A,g||new b,"Box3")}readBinary(A,g){this.__value.p0.readBinary(A),this.__value.p1.readBinary(A)}toJSON(A){return{value:{p0:this.__value.p0.toJSON(),p1:this.__value.p1.toJSON()}}}fromJSON(A,g){A.value&&(this.__value.p0.fromJSON(A.value.p0),this.__value.p1.fromJSON(A.value.p1))}clone(){var A;return new kA(this.name,null===(A=this.__value)||void 0===A?void 0:A.clone())}}e.register("Box3Parameter",kA),e.register("Property_Box3_32f",kA);class xA extends NA{constructor(A="",g){super(A,g||new l,"Color")}readBinary(A,g){const I=A.loadRGBAFloat32Color();I.applyGamma(2.2),this.__value=I}toJSON(A){var g;return{value:null===(g=this.__value)||void 0===g?void 0:g.toJSON()}}fromJSON(A,g){var I;null===(I=this.__value)||void 0===I||I.fromJSON(A.value)}clone(){var A;return new xA(this.name,null===(A=this.__value)||void 0===A?void 0:A.clone())}}e.register("ColorParameter",xA),e.register("Property_Color_32f",xA);class zA extends NA{constructor(A="",g){super(A,g||new c,"Quat")}readBinary(A,g){var I;null===(I=this.__value)||void 0===I||I.readBinary(A)}toJSON(A){var g;return{value:null===(g=this.__value)||void 0===g?void 0:g.toJSON()}}fromJSON(A,g){const I=new c;I.fromJSON(A.value),this.__value=I}clone(){var A;return new zA(this.name,null===(A=this.__value)||void 0===A?void 0:A.clone())}}e.register("QuatParameter",zA),e.register("Property_Quat_32f",zA);class TA extends NA{constructor(A="",g){super(A,g||new d,"Mat3")}readBinary(A,g){var I;null===(I=this.__value)||void 0===I||I.readBinary(A)}toJSON(A){var g;return{value:null===(g=this.__value)||void 0===g?void 0:g.toJSON()}}fromJSON(A,g){const I=new d;I.fromJSON(A.value),this.__value=I}clone(){var A;return new TA(this.name,null===(A=this.__value)||void 0===A?void 0:A.clone())}}e.register("Mat3Parameter",TA),e.register("Property_Mat3_32f",TA);class _A extends NA{constructor(A="",g){super(A,g||new h,"Mat4")}readBinary(A,g){var I;null===(I=this.__value)||void 0===I||I.readBinary(A)}toJSON(A){var g;return{value:null===(g=this.__value)||void 0===g?void 0:g.toJSON()}}fromJSON(A,g){const I=new h;I.fromJSON(A.value),this.__value=I}clone(){var A;return new _A(this.name,null===(A=this.__value)||void 0===A?void 0:A.clone())}}e.register("Mat4Parameter",_A),e.register("Property_Mat4_32f",_A);class PA extends NA{constructor(A="",g){super(A,g||new m,"Xfo")}readBinary(A,g){this.__value.readBinary(A)}toJSON(A){return{name:this.name,value:this.__value.toJSON()}}fromJSON(A,g){const I=new m;I.fromJSON(A.value),this.__value=I,A.name&&(this.name=A.name)}clone(){return new PA(this.name,this.__value.clone())}}e.register("XfoParameter",PA),e.register("Property_Xfo_32f",PA);class OA extends NA{constructor(A="",g){super(A,g,"BaseImage")}toJSON(A){const g={name:this.name};return this.__value&&(g.imageType=this.__value.getClassName(),g.value=this.__value.toJSON()),g}fromJSON(A,g){var I;A.imageType&&(this.__value=e.constructClass(A.imageType),A.value&&(null===(I=this.__value)||void 0===I||I.fromJSON(A.value,g)))}clone(){return new OA(this.name,this.__value)}}e.register("ImageParameter",OA);class jA extends NA{constructor(A="",g=""){super(A,g,"String"),this.multiLine=!1}setMultiLine(A){this.multiLine=A}getMultiLine(){return this.multiLine}readBinary(A,g){this.__value=A.loadStr()}toJSON(A){return{value:this.__value}}fromJSON(A,g){this.__value=A.value?A.value:"",this.emit("valueChanged",{mode:0})}clone(){return new jA(this.name,this.__value)}}e.register("StringParameter",jA),e.register("Property_String",jA);class qA extends NA{constructor(A="",g=[]){super(A,g,"String[]")}readBinary(A,g){this.__value=A.loadStrArray()}toJSON(A){return{value:this.__value}}fromJSON(A,g){this.__value=A.value,this.emit("valueChanged",{mode:0})}clone(){return new qA(this.name,this.__value)}}e.register("StringListParameter",qA),e.register("Property_StringList",qA);class $A extends NA{constructor(A="",g){super(A,[],g)}filter(A){return!0}getCount(){var A;return(null===(A=this.__value)||void 0===A?void 0:A.length)||0}getElement(A){if(this.__value)return this.__value[A]}setElement(A,g){this.__value||(this.__value=[]),this.__value[A]=g,this.emit("valueChanged")}addElement(A){if((A||0==A)&&this.filter(A))return this.__value||(this.__value=[]),this.__value.push(A),this.emit("elementAdded",{elem:A,index:this.__value.length-1}),this.emit("valueChanged"),A}removeElement(A){this.__value||(this.__value=[]);const g=this.__value[A];this.__value.splice(A,1),this.emit("elementRemoved",{elem:g,index:A}),this.emit("valueChanged")}insertElement(A,g){this.__value&&this.filter(g)&&(this.__value.splice(A,0,g),this.emit("elementAdded",{elem:g,index:A}),this.emit("valueChanged"))}toJSON(A){const g=[];if(this.__value)for(const I of this.__value)"string"==typeof this.dataType?g.push(I):g.push(I.toJSON(A));return{value:g}}fromJSON(A,g){if(null!=A.items){this.__value=[];for(let I=0;I<A.items.length;I++){let C;if("string"==typeof this.dataType)C=A.items[I];else{if(!this.dataType)throw"No DataType";C=e.constructClass(this.dataType),C.fromJSON(A.items[I],g)}this.__value.push(C),this.emit("elementAdded",{elem:C,index:this.__value.length-1})}this.emit("valueChanged",{mode:0})}else console.warn("Invalid Parameter JSON")}clone(){const A=this.__value?this.__value.slice(0):[];if(!this.dataType)throw"This parameter does not have a DataType";const g=new $A(this.name,this.dataType);return g.setValue(A),g}destroy(){if(this.__value)for(let A=0;A<this.__value.length;A++)this.__value[A]instanceof NA&&this.__value[A].destroy(),this.removeElement(A)}}class Ag extends NA{constructor(A){super(A,{},"Struct"),this.members=[]}addMember(A){return this.__value&&(this.__value[A.getName()]=A.value),A.on("valueChanged",(()=>{this.__value&&(this.__value[A.getName()]=A.value)})),this.members.push(A),this.emit("valueChanged"),A}getParameter(A){for(const g of this.members)if(g.getName()==A)return g}getMember(A){return this.getParameter(A)}getMemberNames(){const A=[];for(let g=0;g<this.members.length;g++){const I=this.members[g];null!=I&&(A[g]=I.getName())}return A}toJSON(A){const g={},I=[];for(const g of this.members)I.push(g.toJSON(A));return g.members=I,g.name=this.name,g}fromJSON(A,g){if(null!=A.members){for(let I=0;I<A.members.length;I++)A.members[I]&&this.members[I].fromJSON(A.members[I],g);this.name=A.name}else console.warn("Invalid Parameter JSON")}clone(){return new Ag(this.name)}destroy(){for(const A of this.members)A.destroy()}}e.register("StructParameter",Ag);class gg extends V{constructor(A,g=KA.OP_WRITE){super(),this._op=null,this.__name=A,this._mode=g,this._param=void 0,this._paramBindIndex=-1,this.detached=!1}getName(){return this.__name}setOperator(A){this._op=A}getOperator(){return this._op}getMode(){return this._mode}isConnected(){return null!=this._param}getParam(){return this._param}setParam(A,g=-1){this._param&&this._param.unbindOperatorOutput(this),this._param=A,this._param&&(this._paramBindIndex=this._param.bindOperatorOutput(this,g)),this.emit("paramSet",{param:this._param})}getParamBindIndex(){return this._paramBindIndex}setParamBindIndex(A){this._paramBindIndex=A}setDirty(){this._param&&this._param.setDirty(this._paramBindIndex)}getValue(){if(this._param)return this._param.getValueFromOp(this._paramBindIndex);throw new Error("Cannot call getValue on OperatorOutput that is not connected:",this.__name)}backPropagateValue(A){return this._op&&(A=this._op.backPropagateValue(A)),A}setClean(A){this._param&&this._param.setCleanFromOp(A,this._paramBindIndex)}toJSON(A){const g=this._param?this._param.getPath():"";return{name:this.__name,paramPath:A&&A.makeRelative?A.makeRelative(g):g,paramBindIndex:this._paramBindIndex}}fromJSON(A,g){A.paramPath&&(null==g||g.resolvePath(A.paramPath,(g=>{this.setParam(g,A.paramBindIndex)}),(g=>{console.warn("OperatorOutput: '"+this.getName()+"'. Unable to connect to:"+A.paramPath)})))}detach(){this.detached=!0,this._paramBindIndex=this._param?this._param.unbindOperatorOutput(this):-1}reattach(){this.detached=!1,this._param&&(this._paramBindIndex=this._param.bindOperatorOutput(this,this._paramBindIndex))}rebind(){this._param&&(this._param.unbindOperatorOutput(this),this._paramBindIndex=this._param.bindOperatorOutput(this))}}class Ig extends gg{}class Cg extends gg{}class ig extends gg{}class eg extends hA{constructor(A=""){super(A),this.__inputs=new Map,this.__outputs=new Map}setDirty(){this.__outputs.forEach((A=>A.setDirty()))}parameterValueChanged(A){super.parameterValueChanged(A),this.setDirty()}addInput(A){return A.setOperator(this),this.__inputs.set(A.getName(),A),this.setDirty(),A}removeInput(A){"string"==typeof A&&(A=this.getInput(A)),A.getParam()&&A.setParam(void 0),this.__inputs.delete(A.getName())}getNumInputs(){return this.__inputs.size}getInputByIndex(A){return Array.from(this.__inputs.values())[A]}getInput(A){const g=this.__inputs.get(A);if(!g)throw`Couldn't find an Input with the name of '${A}'`;return g}addOutput(A){return A.setOperator(this),this.__outputs.set(A.getName(),A),this.setDirty(),A}removeOutput(A){if("string"==typeof A&&(A=this.getOutput(A)),!(A instanceof gg))throw new Error("removeOutput only accepts string or OperatorInput");A.getParam()&&A.setParam(),this.__outputs.delete(A.getName())}getNumOutputs(){return this.__outputs.size}getOutputByIndex(A){return Array.from(this.__outputs.values())[A]}getOutput(A){const g=this.__outputs.get(A);if(!g)throw new Error(`Couldn't find an Output with the name of '${A}'`);return g}evaluate(){throw new Error("Not yet implemented")}backPropagateValue(A){return A}toJSON(A){const g=super.toJSON(A);g.type=this.getClassName();const I=[];this.__inputs.forEach((g=>{I.push(g.toJSON(A))})),g.inputs=I;const C=[];return this.__outputs.forEach((g=>{C.push(g.toJSON(A))})),g.outputs=C,g}fromJSON(A,g){super.fromJSON(A,g),A.inputs&&A.inputs.forEach(((A,I)=>{let C;A.name?(C=this.getInput(A.name),C||(C=this.addInput(A.name))):C=this.getInputByIndex(I),C.fromJSON(A,g)})),A.outputs&&A.outputs.forEach(((A,I)=>{let C;A.name?(C=this.getOutput(A.name),C||(C=this.addOutput(A.name))):C=this.getOutputByIndex(I),C.fromJSON(A,g)}))}detach(){this.__inputs.forEach((A=>A.detach())),this.__outputs.forEach((A=>A.detach()))}reattach(){this.__inputs.forEach((A=>A.reattach())),this.__outputs.forEach((A=>A.reattach()))}rebind(){this.__outputs.forEach((A=>A.rebind()))}}class tg extends V{constructor(A){super(),this.detached=!1,this.name=A}getName(){return this.name}setOperator(A){this._op=A}getOperator(){return this._op}isConnected(){return null!=this.param}getParam(){return this.param}paramValueChanged(){this._op&&this._op.setDirty()}setParam(A){this.param&&this.param.unbindOperatorInput(this),this.param=A,this.param&&this.param.bindOperatorInput(this),this.emit("paramSet",{param:this.param})}getValue(){if(this.param)return this.param.value;throw new Error("Unable to getValue")}setValue(A){this.param&&this.param.setValue(A)}setDirty(){this._op&&this._op.setDirty()}toJSON(A){const g=this.param?this.param.getPath():[],I=A&&A.makeRelative?A.makeRelative(g):g;return{name:this.name,paramPath:I}}fromJSON(A,g){A.paramPath&&(null==g||g.resolvePath(A.paramPath,(A=>{this.setParam(A)}),(()=>{console.warn("OperatorInput: '"+this.getName()+"'. Unable to connect to:"+A.paramPath)})))}detach(){this.param&&this.param.unbindOperatorInput(this)}reattach(){this.detached=!1,this.param&&this.param.bindOperatorInput(this)}}class Bg extends tg{}class og extends eg{constructor(A,g){super("CalcGlobalXfoOperator"),this.parentGlobal=new Bg("ParentGlobal"),this.localXfo=new Bg("LocalXfo"),this.globalXfo=new Cg("GlobalXfo"),this.localXfo.setParam(g),this.globalXfo.setParam(A),this.addInput(this.parentGlobal),this.addInput(this.localXfo),this.addOutput(this.globalXfo)}backPropagateValue(A){if(this.parentGlobal.isConnected()){const g=this.parentGlobal.getValue();this.localXfo.setValue(g.inverse().multiply(A))}else this.localXfo.setValue(A)}evaluate(){const A=this.localXfo.getValue();if(this.parentGlobal.isConnected()){const g=this.parentGlobal.getValue();this.globalXfo.setClean(g.multiply(A))}else this.globalXfo.setClean(A)}}e.register("CalcGlobalXfoOperator",og);class sg extends kA{constructor(A="",g){super(A),this.dirty=!0,this.treeItem=g}setDirty(A){return this.dirty||(this.dirty=!0,this.emit("valueChanged")),!0}getValue(){return this.dirty&&(this.__value=this.treeItem._cleanBoundingBox(),this.dirty=!1),this.__value}clone(){var A;const g=new sg(this.name,this.treeItem);return g.value=null===(A=this.__value)||void 0===A?void 0:A.clone(),g}loadValue(A){this.__value=A.clone()}}class ag extends hA{constructor(A){super(A),this.disableBoundingBox=!1,this.__childItems=[],this.__childItemsEventHandlers=[],this.__childItemsMapping={},this.__childItemsMappingCorrupt=!1,this.globalXfoParam=new PA("GlobalXfo",new m),this.localXfoParam=new PA("LocalXfo",new m),this.boundingBoxParam=new sg("BoundingBox",this),this.visibleParam=new fA("Visible",!0),this.opacityParam=new JA("Opacity",1,[0,1]),this.__highlightMapping={},this.__highlights=[],this.__visible=!0,this.__visibleCounter=1,this.__opacity=1,this.addParameter(this.visibleParam),this.addParameter(this.opacityParam),this.addParameter(this.localXfoParam),this.addParameter(this.globalXfoParam),this.addParameter(this.boundingBoxParam),this.globalXfoOp=new og(this.globalXfoParam,this.localXfoParam),this.globalXfoParam.on("valueChanged",(A=>{this.setBoundingBoxDirty(),this.emit("globalXfoChanged",A)})),this.visibleParam.on("valueChanged",(()=>{this.__visibleCounter+=this.visibleParam.value?1:-1,this.updateVisibility()})),this.opacityParam.on("valueChanged",(()=>{this.updateOpacity()}))}setOwner(A){if(this.__ownerItem){const A=this.__ownerItem;if(A&&A instanceof ag){A.isVisible()||this.__visibleCounter++;const g=A.getChildIndex(this);g>=0&&A.unbindChild(g,this)}}if(super.setOwner(A),this.__ownerItem){const A=this.__ownerItem;A&&(A.isVisible()||this.__visibleCounter--,this.globalXfoOp.getInput("ParentGlobal").setParam(A.globalXfoParam))}else this.globalXfoOp.getInput("ParentGlobal").setParam(void 0);this.updateVisibility()}updatePath(){super.updatePath();for(const A of this.__childItems)A&&A.updatePath()}getParentItem(){return this.getOwner()}setParentItem(A){this.setOwner(A)}isVisible(){return this.__visibleCounter>0}setVisible(A){this.visibleParam.value=A}propagateVisibility(A){this.__visibleCounter+=A,this.updateVisibility()}updateVisibility(){const A=this.__visibleCounter>0;if(A!=this.__visible){this.__visible=A;for(const A of this.__childItems)A.propagateVisibility(this.__visible?1:-1);this.emit("visibilityChanged",new O(A));const g=this.__ownerItem;return g&&g instanceof ag&&g.setBoundingBoxDirty(),!0}return!1}get opacity(){return this.__opacity}isOpaque(){return this.__opacity>.999}updateOpacity(){const A=this.__opacity>.999,g=this.getParentItem();this.__opacity=g?this.opacityParam.value*g.__opacity:this.opacityParam.value;for(const A of this.__childItems)A.updateOpacity();const I=this.__opacity>.999;this.emit("opacityChanged",new _(I,A!=I))}addHighlight(A,g,I=!1){if(A in this.__highlightMapping)if(this.__highlights[this.__highlights.length-1]!=A){const I=this.__highlights.indexOf(A);this.__highlights.splice(I,1),this.__highlights.push(A),this.emit("highlightChanged",{name:A,color:g})}else this.__highlightMapping[A].isEqual(g)||(this.__highlightMapping[A]=g,this.emit("highlightChanged",{name:A,color:g}));else this.__highlights.push(A),this.__highlightMapping[A]=g,this.emit("highlightChanged",{name:A,color:g});I&&this.__childItems.forEach((C=>{C.addHighlight(A,g,I)}))}removeHighlight(A,g=!1){if(A in this.__highlightMapping){if(this.__highlights[this.__highlights.length-1]==A)if(this.__highlights.pop(),delete this.__highlightMapping[A],this.__highlights.length>0){const A=this.__highlights[this.__highlights.length-1],g=this.__highlightMapping[A];this.emit("highlightChanged",{name:A,color:g})}else this.emit("highlightChanged");else{const g=this.__highlights.indexOf(A);this.__highlights.splice(g,1),delete this.__highlightMapping[A],this.emit("highlightChanged")}g&&this.__childItems.forEach((I=>{I.removeHighlight(A,g)}))}}getHighlight(){return 0==this.__highlights.length?null:this.__highlightMapping[this.__highlights[this.__highlights.length-1]]}getHighlightName(){return 0==this.__highlights.length?null:this.__highlights[this.__highlights.length-1]}isHighlighted(){return this.__highlights.length>0}_cleanBoundingBox(){const A=new b;return this.__childItems.forEach((g=>{if(g.isVisible()){const I=g.boundingBoxParam.value;I&&A.addBox3(I)}})),A}setBoundingBoxDirty(){this.boundingBoxParam&&this.boundingBoxParam.setDirty(-1);const A=this.__ownerItem;A&&A instanceof ag&&A.setBoundingBoxDirty()}getChildren(){return this.__childItems}getNumChildren(){return this.__childItems.length}generateUniqueName(A){if(!(A in this.__childItemsMapping))return A;let g=1;A.length>4&&!Number.isNaN(parseInt(A.substring(A.length-4)))?g=parseInt(A.substr(A.length-4)):A.length>3&&!Number.isNaN(parseInt(A.substring(A.length-3)))?g=parseInt(A.substr(A.length-3)):A.length>2&&!Number.isNaN(parseInt(A.substring(A.length-2)))&&(g=parseInt(A.substr(A.length-2)));const I=[];for(const A of this.__childItems)A&&I.push(A.getName());let C=A;for(;;){let i=""+g;for(;i.length<2;)i="0"+i;if(C=A+i,!I.includes(C))break;g++}return C}updateChildNameMapping(A){for(let g=A;g<this.__childItems.length;g++)this.__childItemsMapping[this.__childItems[g].getName()]=g}childNameChanged(A){if(this.__childItemsMappingCorrupt)this.updateChildNameMapping(0),this.__childItemsMappingCorrupt=!1;else{const g=this.__childItemsMapping[A.oldName];null!=this.__childItemsMapping[A.newName]&&(this.__childItemsMappingCorrupt=!0),delete this.__childItemsMapping[A.oldName],this.__childItemsMapping[A.newName]=g}}insertChild(A,g,I=!1,C=!0){if(A.getName()in this.__childItemsMapping){if(!C)throw new Error("Item '"+A.getName()+"' is already a child of :"+this.getPath());A.setName(this.generateUniqueName(A.getName()))}if(!(A instanceof ag))throw new Error("Object is is not a tree item :"+A);const i={};if(i.nameChanged=A.on("nameChanged",(A=>{this.childNameChanged(A)})),I){const g=this.globalXfoParam.value,I=A.globalXfoParam.value,C=g.inverse().multiply(I);A.localXfoParam.value=C}this.setBoundingBoxDirty(),this.__highlights.forEach((g=>{const I=this.__highlightMapping[g];A.addHighlight(g,I,!0)})),this.__childItems.splice(g,0,A),this.__childItemsEventHandlers.splice(g,0,i);const e=A.getName();return this.__childItemsMapping[e]&&(this.__childItemsMappingCorrupt=!0),this.__childItemsMapping[e]=g,this.updateChildNameMapping(g),A.setOwner(this),this.emit("childAdded",new oA(g,A)),A}addChild(A,g=!0,I=!0){const C=this.__childItems.length;return this.insertChild(A,C,g,I),A}getChild(A){return this.__childItems[A]}getChildByName(A){const g=this.__childItemsMapping[A];return null!=g?this.__childItems[g]:null}getChildNames(){const A=[];for(let g=0;g<this.__childItems.length;g++){const I=this.__childItems[g];null!=I&&(A[g]=I.getName())}return A}unbindChild(A,g){const I=this.__childItemsEventHandlers[A];for(const A in I)g.removeListenerById(A,I[A]);this.__childItems.splice(A,1),this.__childItemsEventHandlers.splice(A,1),delete this.__childItemsMapping[g.getName()],this.updateChildNameMapping(A),this.setBoundingBoxDirty(),this.emit("childRemoved",{childItem:g,index:A})}removeChild(A){const g=this.__childItems[A];g&&(this.unbindChild(A,g),g.setOwner(void 0))}removeChildByName(A){const g=this.__childItemsMapping[A];if(null!=g)return this.removeChild(g)}removeChildByHandle(A){const g=this.__childItems.indexOf(A);if(-1==g)throw new Error("Error in removeChildByHandle. Child not found:"+A.getName());this.removeChild(g)}removeAllChildren(){let A=this.__childItems.length;for(;A--;)this.removeChild(A);this.setBoundingBoxDirty()}getChildIndex(A){return this.__childItems.indexOf(A)}resolvePath(A,g=0,I=!1){if("string"==typeof A&&(A=A.split("/")),0==g)if("."==A[0]||A[0]==this.__name)g++;else if(".."==A[0]){if(this.__ownerItem)return this.__ownerItem.resolvePath(A,g+1);if(I)throw Error("this.__ownerItem is undefined");console.warn("this.__ownerItem is undefined")}if(g==A.length)return this;const C=A[g],i=this.getChildByName(C);if(null==i){const I=this.getParameter(A[g]);if(I)return I;throw new Error(`Unable to resolve path : [${A.toString()}] after: ${this.getName()} \nNo child or parameter called : "${A[g]}"`)}return i.resolvePath(A,g+1)}traverse(A,g=!0){const I=(A,g)=>{const I=A.getChildren();for(const A of I)A&&C(A,g+1)},C=(g,C)=>{0!=A(g,C)&&I(g,C)};g?C(this,1):I(this,0)}onPointerDown(A){this.emit("pointerDown",A);const g=this.__ownerItem;A.propagating&&g&&g.onPointerDown(A)}onPointerUp(A){this.emit("pointerUp",A);const g=this.__ownerItem;A.propagating&&g&&g.onPointerUp(A)}onPointerMove(A){this.emit("pointerMove",A);const g=this.__ownerItem;A.propagating&&g&&g.onPointerMove(A)}onPointerEnter(A){this.emit("pointerEnter",A);const g=this.__ownerItem;A.propagating&&g&&g.onPointerEnter(A)}onPointerLeave(A){this.emit("pointerLeave",A);const g=this.__ownerItem;A.propagating&&g&&g.onPointerLeave(A)}onWheel(A){this.emit("mouseWheel",A);const g=this.__ownerItem;A.propagating&&g&&g.onWheel(A)}onTouchCancel(A){this.emit("touchCancel",A);const g=this.__ownerItem;A.propagating&&g&&g.onTouchCancel(A)}toJSON(A){let g=super.toJSON(A);const I={};for(const g of this.__childItems)if(g){const C=g.toJSON(A);C&&(I[g.getName()]=C)}return Object.keys(I).length>0&&(g?g.children=I:g={name:this.__name,children:I}),g}fromJSON(A,g,I){if(super.fromJSON(A,g),null!=A.children){const I=A.children;if(Array.isArray(I))for(const A of I){let I=this.getChildByName(A.name);I?I.fromJSON(A,g):A.type&&(I=e.constructClass(A.type),I&&(I.fromJSON(A,g),this.addChild(I,!1,!1)))}else for(const A in I){const C=I[A];let i=this.getChildByName(A);i?i.fromJSON(C,g):C.type&&(i=e.constructClass(C.type),i&&(i.fromJSON(C,g),this.addChild(i,!1,!1)))}}}readBinary(A,g){super.readBinary(A,g);const I=A.loadUInt8();this.setVisible(0!=(2&I));if(4&I){const g=new m;if(g.tr=A.loadFloat32Vec3(),g.ori=A.loadFloat32Quat(),32&I)g.sc=A.loadFloat32Vec3();else{const I=A.loadFloat32();g.sc.set(I,I,I)}this.localXfoParam.value=g}8&I&&this.boundingBoxParam.loadValue(new b(A.loadFloat32Vec3(),A.loadFloat32Vec3()));const C=A.loadUInt32();if(C>0){const I=A.loadUInt32Array(C);for(let i=0;i<C;i++)try{A.seek(I[i]);let C=A.loadStr();const t=e.constructClass(C);if(!t){const g=A.loadStr();console.warn("Unable to construct child:"+g+" of type:"+C);continue}A.seek(I[i]),t.readBinary(A,g),this.addChild(t,!1,!0)}catch(A){console.warn("Error loading tree item: ",A)}}}clone(A){const g=new ag("");return g.copyFrom(this,A),g}copyFrom(A,g){super.copyFrom(A,g),A.getChildren().forEach((A=>{A&&this.addChild(A.clone(g),!1,!1)}))}}e.register("TreeItem",ag);class lg extends NA{constructor(A="",g){super(A,void 0,"TreeItem"),this.listenerIDs={},this.owner=new ag(""),this.filterFn=g}emitTreeItemGlobalXfoChanged(A){this.emit("treeItemGlobalXfoChanged",A)}setOwner(A){this.owner=A}getOwner(){return this.owner}setFilterFn(A){this.filterFn=A}getFilterFn(){return this.filterFn}setValue(A){this.filterFn&&!this.filterFn(A)||this.__value!==A&&(this.__value&&this.__value.removeListenerById("globalXfoChanged",this.listenerIDs.globalXfoChanged),this.__value=A,this.__value&&(this.listenerIDs.globalXfoChanged=this.__value.on("globalXfoChanged",(A=>{this.emitTreeItemGlobalXfoChanged(A)}))),this.emit("valueChanged"))}toJSON(A){var g;return{value:A.makeRelative(null===(g=this.__value)||void 0===g?void 0:g.getPath())}}fromJSON(A,g){null!=A.value?g.resolvePath(A.value,(A=>{this.setValue(A)}),(()=>{console.warn("Unable to resolve tree item parameter value:"+A.paramPath)})):console.warn("Invalid Parameter JSON")}clone(A){const g=new lg(this.name,this.filterFn);return this.__value&&g.setValue(this.__value.clone(A)),g}}e.register("TreeItemParameter",lg);class ng extends R{constructor(A,g){super(),this.index=g,this.item=A}}class dg extends NA{constructor(A="",g){super(A,new Set,"TreeItem"),this.filterFn=g}setFilterFn(A){this.filterFn=A}getFilterFn(){return this.filterFn}getItem(A){return Array.from(this.__value)[A]}addItem(A,g=!0){if(this.filterFn&&!this.filterFn(A))return void console.warn("ItemSet __filterFn rejecting item:",A.getPath());this.__value.add(A);const I=Array.from(this.__value).indexOf(A);return this.emit("itemAdded",new ng(A,I)),g&&this.emit("valueChanged"),I}addItems(A,g=!0){A.forEach((A=>this.addItem(A,!1))),g&&this.emit("valueChanged")}removeItem(A,g=!0){const I=Array.from(this.__value)[A];return this.__value.delete(I),this.emit("itemRemoved",new ng(I,A)),g&&this.emit("valueChanged"),I}setItems(A,g=!0){const I=Array.from(this.__value);for(let g=I.length-1;g>=0;g--){const C=I[g];A.has(C)||this.removeItem(g,!1)}for(const g of A)this.__value.has(g)||this.addItem(g,!1);g&&this.emit("valueChanged")}clearItems(A=!0){this.__value.clear(),A&&this.emit("valueChanged")}getNumItems(){return this.__value.size}toJSON(A){this.__value||(this.__value=new Set);const g=[];if(A)for(const A of this.__value)g.push(A.getPath());return{value:g}}fromJSON(A,g){if(g)for(const I in A.value){const A=g.resolvePath(I);this.__value.add(A)}}clone(){return new dg(this.name,this.filterFn)}}class hg extends NA{constructor(A="",g){super(A,g,"Geometry"),this.listenerIDs={},g&&this.setValue(g)}emitBoundingBoxDirtied(A){this.emit("boundingBoxChanged",A)}setValue(A){this.__value!==A&&(this.__value&&this.__value.removeListenerById("boundingBoxChanged",this.listenerIDs.boundingBoxChanged),this.__value=A,this.__value&&(this.listenerIDs.boundingBoxChanged=this.__value.on("boundingBoxChanged",(A=>{this.emitBoundingBoxDirtied(A)}))),this.emit("valueChanged"))}loadValue(A){this.__value&&this.__value.removeListenerById("boundingBoxChanged",this.listenerIDs.boundingBoxChanged),this.__value=A,this.__value&&(this.listenerIDs.boundingBoxChanged=this.__value.on("boundingBoxChanged",(A=>{this.emitBoundingBoxDirtied(A)})))}toJSON(A){var g;return{name:this.name,value:null===(g=this.__value)||void 0===g?void 0:g.toJSON(A)}}fromJSON(A,g){A.name&&(this.name=A.name);const I=e.constructClass(A.value.type);I.fromJSON(A.value,g),this.__value=I}clone(){return new hg(this.name,this.__value)}}e.register("GeometryParameter",hg);class cg extends NA{constructor(A=""){super(A,"","FilePath")}getFilename(){if(!this.__value)throw"No file value";return this.__value.lastIndexOf("/")>-1?this.__value.substring(this.__value.lastIndexOf("/")+1):""}getExt(){const A=this.getFilename(),g=A.lastIndexOf(".");if(-1!=g)return A.substring(g).toLowerCase()}getStem(){const A=this.getFilename();if(A){const g=A.split(".");return 2==g.length?g[0]:A}return null}setValue(A){if(!A)throw new Error("Invalid value for setValue.");A!=this.__value&&(this.__value=A,this.emit("valueChanged"))}toJSON(A){return{value:this.__value}}fromJSON(A,g){A.value&&(this.__value=A.value)}clone(){const A=new cg(this.name);return this.__value&&A.setValue(this.__value),A}}e.register("FilePathParameter",cg);class rg extends NA{constructor(A="",g){super(A,g,"Material"),this.listenerIDs={},g&&this.setValue(g)}valueParameterValueChanged(A){this.emit("valueParameterValueChanged",A)}setValue(A){this.__value!==A&&(this.__value&&this.__value.removeListenerById("parameterValueChanged",this.listenerIDs.parameterValueChanged),this.__value=A,this.__value&&(this.listenerIDs.parameterValueChanged=this.__value.on("parameterValueChanged",(A=>{this.valueParameterValueChanged(A)}))),this.emit("valueChanged"))}loadValue(A){this.__value&&this.__value.removeListenerById("parameterValueChanged",this.listenerIDs.parameterValueChanged),this.__value=A,this.__value&&(this.listenerIDs.parameterValueChanged=this.__value.on("parameterValueChanged",(A=>{this.valueParameterValueChanged(A)})))}toJSON(A){let g={};return g.name=this.name,this.__value&&(g={value:A&&A.onlyPath?this.__value.getPath():this.__value.toJSON(A)}),g}fromJSON(A,g){if(null!=A.value)if(A.value instanceof Array||A.value instanceof String){if(g&&g.assetItem){const I=g.assetItem.getMaterialLibrary().getMaterial(A.value instanceof Array?A.value[1]:A.value);I&&this.loadValue(I)}}else{const I=e.constructClass(A.value.type);A.value&&I.fromJSON(A.value,g),this.loadValue(I)}else console.warn("Invalid Parameter JSON")}clone(){return new rg(this.name,this.__value)}}e.register("MaterialParameter",rg);class Gg extends hA{constructor(A){super(A),this.width=0,this.height=0,this.format="RGB",this.type="UNSIGNED_BYTE",this.loaded=!1,this.mipMapped=!0,this.wrapS="REPEAT",this.wrapT="REPEAT",this.minFilter="LINEAR",this.magFilter="LINEAR",this.alphaFromLuminance=!1,this.on("parameterValueChanged",(()=>{this.emit("updated")}))}isLoaded(){return this.loaded}getParams(){return{type:this.type,format:this.format,width:this.width,height:this.height,wrapS:this.wrapS,wrapT:this.wrapT,minFilter:this.minFilter,magFilter:this.magFilter,mipMapped:this.mipMapped,alphaFromLuminance:this.alphaFromLuminance}}}class mg extends JA{constructor(A="",g,I){super(A,g,I)}getImage(){return this.image}setImage(A){const g=()=>{this.emit("textureDisconnected")};A?(null!=this.image&&this.image!==A&&g(),this.image=A,this.emit("textureConnected"),this.emit("valueChanged",{mode:0})):null!=this.image&&(g(),this.image=void 0,this.emit("textureDisconnected"))}setValue(A){A instanceof Gg?this.setImage(A):super.setValue(A)}readBinary(A,g){super.readBinary(A,g);const I=A.loadStr();""!=I&&(console.log("Load Texture"),this.setImage(g.assetItem.materialLibrary.getImage(I)))}clone(){return new mg(this.name,this.__value,this.range)}}e.register("MaterialFloatParam",mg),function(A){A.Gamma="Gamma",A.Linear="Linear"}(pA||(pA={}));class Qg extends xA{constructor(A,g){super(A,g),this.listenerIDs={},this.colorSpace=pA.Gamma}getImage(){return this.image}imageUpdated(){this.emit("valueChanged")}setImage(A){const g=()=>{this.image&&(this.image.removeListenerById("updated",this.listenerIDs.updated),this.image=void 0),this.emit("textureDisconnected")};A?(null!=this.image&&this.image!==A&&g(),this.image=A,this.listenerIDs.updated=this.image.on("updated",(()=>{this.imageUpdated()})),this.emit("textureConnected"),this.emit("valueChanged")):null!=this.image&&(g(),this.image=void 0,this.emit("textureDisconnected"))}setValue(A){A instanceof Gg?this.setImage(A):super.setValue(A)}readBinary(A,g){super.readBinary(A,g);const I=A.loadStr();""!=I&&this.setImage(g.assetItem.materialLibrary.getImage(I)),this.colorSpace=pA.Linear}clone(){var A;const g=new Qg(this.name,null===(A=this.__value)||void 0===A?void 0:A.clone());return g.colorSpace=this.colorSpace,g}}function Eg(A,g){return!A.some(((A,I)=>Math.abs(g[I]-A)>.001))}e.register("MaterialColorParam",Qg);class bg extends u{constructor(A,g){super(),this.data=new Float32Array(0),this.dataTypeName=A,this.stride=g,this.initRange(0),this.splits={},this.splitValues=[]}setMesh(A){this.mesh=A}asArray(){return this.data}getDataTypeName(){return this.dataTypeName}getCount(){return this.data.length/this.stride}setCount(A){const g=this.data.length,I=A*this.stride;if(I>g){const A=new Float32Array(I);A.set(this.data,0),this.data=A,this.initRange(g)}else I<g&&(this.data=this.data.slice(0,I));this.splits={},this.splitValues=[]}initRange(A){for(let g=A;g<this.data.length;g++)this.data[g]=Number.NaN}get numElements(){return this.stride}getFloat32Value(A){return this.data[A]}setFloat32Value(A,g){this.data[A]=g}getSplits(){return this.splits}getFaceVertexValueRef_array(A,g){const I=this.mesh.getFaceVertexIndex(A,g);return I in this.splits&&A in this.splits[I]?this.splitValues[this.splits[I][A]]:this.data.subarray(I*this.stride,(I+1)*this.stride)}setFaceVertexValue_array(A,g,I){const C=this.mesh.getFaceVertexIndex(A,g);this.setFaceVertexValue_ByVertexIndex(A,C,I)}setFaceVertexValue_ByVertexIndex(A,g,I){const C=this.data.subarray(g*this.stride,(g+1)*this.stride);if(function(A){for(let g=0;g<A.length;g++)if(!Number.isNaN(A[g]))return!0;return!1}(C))if(Eg(C,I));else{if(g in this.splits){const C=this.splits[g];for(const g in C){const i=C[g];if(Eg(this.splitValues[i],I))return void(C[A]=i)}if(A in this.splits[g])return void(this.splitValues[this.splits[g][A]]=I)}else this.splits[g]={};this.splits[g][A]=this.splitValues.length,this.splitValues.push(I)}else C.set(I)}setSplitVertexValue_array(A,g,I){if(A in this.splits||(this.splits[A]={}),g in this.splits[A]){if(Eg(this.splitValues[this.splits[A][g]],I))return;console.warn("Face Vertex Already Split with different value")}this.splits[A][g]=this.splitValues.length,this.splitValues.push(I)}setSplitVertexValues(A,g,I){A in this.splits||(this.splits[A]={});const C=this.splitValues.length;this.splitValues.push(I);for(const I of g)this.splits[A][I]=C}generateSplitValues(A,g){if(0==g)return this.data;const I=this.getCount(),C=new Float32Array((I+g)*this.stride);C.set(this.data);for(const g in A){const i=A[g];for(const A in i){const e=I+i[A];if(g in this.splits&&A in this.splits[g]){const I=this.splits[g][A];this.splitValues[I].forEach(((A,g)=>{C[e*this.stride+g]=A}))}else{const A=parseInt(g);for(let g=0;g<this.stride;g++)C[e*this.stride+g]=this.data[A*this.stride+g]}}}return C}toJSON(A){return{data:this.data,dataType:this.dataTypeName,length:this.data.length/this.stride}}fromJSON(A){const g=A.data.map((A=>r.isNumeric(A)?A:Number.POSITIVE_INFINITY));this.data=Float32Array.from(g)}loadSplitValues(A){const g=A.loadUInt32Array();if(0==g.length)return;let I=0,C=0;for(;;){const A=g[I++],i=g[I++],e={};for(let A=0;A<i;A++){const A=g[I++],i=g[I++];e[A]=i,i>=C&&(C=i+1)}if(this.splits[A]=e,I>=g.length)break}const i=this.stride,e=A.loadFloat32Array(C*i);this.splitValues=[];for(let A=0;A<C;A++){const g=e.slice(A*i,A*i+i);this.splitValues.push(g)}}toString(){return JSON.stringify(this.toJSON(),null,2)}genBuffer(){return{values:this.data,count:this.getCount(),dataType:this.dataTypeName,normalized:this.normalized}}}class Zg extends bg{constructor(){super("Vec3",3),this.normalized=!1}getValueRef(A){if(A>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+A+". Num Vertices:"+this.data.length/3);const g=A*this.stride,I=this.data.subarray(g,g+this.stride);return new o(I)}getValue(A){if(A>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+A+". Num Vertices:"+this.data.length/3);const g=A*this.stride,I=this.data.slice(g,g+this.stride);return new o(I)}setValue(A,g){if(A>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+A+". Num Vertices:"+this.data.length/3);const I=A*this.stride;this.data.set(g.asArray(),I)}getFaceVertexValueRef(A,g){const I=this.getFaceVertexValueRef_array(A,g);return new o(I)}setFaceVertexValue(A,g,I){this.setFaceVertexValue_array(A,g,I.asArray())}setSplitVertexValue(A,g,I){this.setSplitVertexValue_array(A,g,I.asArray())}}e.register("Vec3Attribute",Zg);class yg extends bg{constructor(){super("Vec2",2),this.normalized=!1}getValueRef(A){if(A>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+A+". Num Vertices:"+this.data.length/3);const g=A*this.stride,I=this.data.subarray(g,g+this.stride);return new B(I)}getValue(A){if(A>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+A+". Num Vertices:"+this.data.length/3);const g=A*this.stride,I=this.data.slice(g,g+this.stride);return new B(I)}setValue(A,g){if(A>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+A+". Num Vertices:"+this.data.length/3);const I=A*this.stride;this.data.set(g.asArray(),I)}getFaceVertexValueRef(A,g){const I=this.getFaceVertexValueRef_array(A,g);return new B(I)}setFaceVertexValue(A,g,I){this.setFaceVertexValue_array(A,g,I.asArray())}setSplitVertexValue(A,g,I){this.setSplitVertexValue_array(A,g,I.asArray())}}e.register("Vec2Attribute",yg);const ug=(A,g,I,C,i)=>{for(let e=A[0];e<A[1];e++){const A=new o(C[3*e+0]/255,C[3*e+1]/255,C[3*e+2]/255);A.multiplyInPlace(I),A.addInPlace(g),i.setValue(e,A)}},Rg=(A,g,I,C,i)=>{for(let e=A[0];e<A[1];e++){const A=new o(C[3*e+0]/65535,C[3*e+1]/65535,C[3*e+2]/65535);A.multiplyInPlace(I),A.addInPlace(g),i.setValue(e,A)}},Vg=(A,g,I,C,i)=>{I.isNull()&&I.set(1,1,1);for(let e=A[0];e<A[1];e++){const A=new o(C[3*e+0]/255,C[3*e+1]/255,C[3*e+2]/255);A.multiplyInPlace(I),A.addInPlace(g),A.normalizeInPlace(),i.setValue(e,A)}},Fg=(A,g,I,C,i)=>{for(let e=A[0];e<A[1];e++){const A=new B(C[2*e+0]/255,C[2*e+1]/255);A.multiplyInPlace(I),A.addInPlace(g),i.setValue(e,A)}},Sg=(A,g,I,C,i)=>{for(let e=A[0];e<A[1];e++){const A=new B(C[2*e+0]/65535,C[2*e+1]/65535);A.multiplyInPlace(I),A.addInPlace(g),i.setValue(e,A)}};class wg extends nA{constructor(){super(),this.__boundingBox=new b,this.__boundingBoxDirty=!0,this.__metaData=new Map,this.__name="",this.__numVertices=0,this.__vertexAttributes=new Map,this.debugColor=new l(1,0,0,1),this.name="",this.addVertexAttribute("positions",new Zg)}clear(){this.setNumVertices(0)}setDebugName(A){this.name=A}addVertexAttribute(A,g){g.setCount(this.__numVertices),this.__vertexAttributes.set(A,g)}hasVertexAttribute(A){return this.__vertexAttributes.has(A)}getVertexAttribute(A){return this.__vertexAttributes.get(A)}getVertexAttributes(){const A={};for(const[g,I]of this.__vertexAttributes.entries())A[g]=I;return A}get positions(){return this.__vertexAttributes.get("positions")}numVertices(){return this.__numVertices}getNumVertices(){return this.__numVertices}setNumVertices(A){this.__numVertices=A,this.__vertexAttributes.forEach((A=>A.setCount(this.__numVertices))),this.setBoundingBoxDirty()}getBoundingBox(){return this.__boundingBoxDirty&&this.updateBoundingBox(),this.__boundingBox}setBoundingBoxDirty(){this.__boundingBoxDirty=!0,this.emit("boundingBoxChanged")}updateBoundingBox(){const A=this.positions,g=new b;if(A){const I=A.getCount();for(let C=0;C<I;C++)g.addPoint(A.getValueRef(C))}this.__boundingBox=g,this.__boundingBoxDirty=!1}getMetadata(A){return this.__metaData.get(A)}hasMetadata(A){return this.__metaData.has(A)}setMetadata(A,g){this.__metaData.set(A,g)}deleteMetadata(A){this.__metaData.delete(A)}genBuffers(A){const g={};for(const[A,I]of this.__vertexAttributes)g[A]=I.genBuffer();return{numVertices:this.numVertices(),attrBuffers:g}}freeBuffers(){}loadBaseGeomBinary(A,g){this.name=A.loadStr();const I=A.loadUInt8();this.debugColor=A.loadRGBFloat32Color();const C=A.loadUInt32();this.__boundingBox.set(A.loadFloat32Vec3(),A.loadFloat32Vec3()),this.setNumVertices(C);const i=this.positions;let e,t;2&I&&(e=this.getVertexAttribute("normals"),e||(e=new Zg,this.addVertexAttribute("normals",e))),4&I&&(t=this.getVertexAttribute("texCoords"),t||(t=new yg,this.addVertexAttribute("texCoords",t)));const B=A.loadUInt32();if(1==B){{const I=this.__boundingBox;if(g.versions["zea-engine"].compare([3,9,1])>=0){const g=A.loadUInt16Array(3*C);Rg([0,C],I.p0,I.diagonal(),g,i)}else{const g=A.loadUInt8Array(3*C);ug([0,C],I.p0,I.diagonal(),g,i)}}if(e){const g=new b(A.loadFloat32Vec3(),A.loadFloat32Vec3()),I=A.loadUInt8Array(3*C);Vg([0,C],g.p0,g.diagonal(),I,e),e.loadSplitValues(A)}if(t){const I=new Q(A.loadFloat32Vec2(),A.loadFloat32Vec2());if(g.versions["zea-engine"].compare([3,9,1])>=0){const g=A.loadUInt16Array(2*C);Sg([0,C],I.p0,I.diagonal(),g,t)}else{const g=A.loadUInt8Array(2*C);Fg([0,C],I.p0,I.diagonal(),g,t)}t.loadSplitValues(A)}}else{const I=[];let o,s=0;for(let g=0;g<B;g++){const g=A.loadUInt32(),C={range:[s,s+g],bbox:new b(A.loadFloat32Vec3(),A.loadFloat32Vec3()),normalsRange:new b,texCoordsRange:new Q};e&&C.normalsRange.set(A.loadFloat32Vec3(),A.loadFloat32Vec3()),t&&C.texCoordsRange.set(A.loadFloat32Vec2(),A.loadFloat32Vec2()),I.push(C),s+=g}o=g.versions["zea-engine"].compare([3,9,1])>=0?A.loadUInt16Array(3*C):A.loadUInt8Array(3*C);let a=null,l=null;e&&(a=A.loadUInt8Array(3*C)),t&&(l=A.loadUInt8Array(2*C));for(let A=0;A<B;A++){{const C=I[A].bbox;g.versions["zea-engine"].compare([3,9,1])>=0?Rg(I[A].range,C.p0,C.diagonal(),o,i):ug(I[A].range,C.p0,C.diagonal(),o,i)}if(a){const g=I[A].normalsRange;Vg(I[A].range,g.p0,g.diagonal(),a,e)}if(l){const i=I[A].texCoordsRange;g.versions["zea-engine"].compare([3,9,1])>=0?Sg([0,C],i.p0,i.diagonal(),l,t):Fg(I[A].range,i.p0,i.diagonal(),l,t)}}e&&e.loadSplitValues(A),t&&t.loadSplitValues(A)}}toJSON(A){const g=super.toJSON(A);A&&A.skipTopology||(g.numVertices=this.__numVertices||0);const I={};for(const[g,C]of this.__vertexAttributes.entries())A&&"skipAttributes"in A&&A.skipAttributes.includes(g)||(I[g]=C.toJSON(A));return g.vertexAttributes=I,g}fromJSON(A,g){this.clear(),super.fromJSON(A,g),this.setNumVertices(A.numVertices);for(const g in A.vertexAttributes){let I=this.__vertexAttributes.get(g);const C=A.vertexAttributes[g];I?I.fromJSON(C):console.warn("attr undefined, cannot execute fromJSON()")}this.emit("geomDataTopologyChanged")}toString(){return JSON.stringify(this.toJSON(),null,2)}}class Xg extends bg{constructor(){super("Vec4",4),this.normalized=!1}getValueRef(A){if(A>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+A+". Num Vertices:"+this.data.length/3);const g=A*this.stride,I=this.data.subarray(g,g+this.stride);return new s(I)}getValue(A){if(A>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+A+". Num Vertices:"+this.data.length/3);const g=A*this.stride,I=this.data.slice(g,g+this.stride);return new s(I)}setValue(A,g){if(A>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+A+". Num Vertices:"+this.data.length/3);const I=A*this.stride;this.data.set(g.asArray(),I)}getFaceVertexValueRef(A,g){const I=this.getFaceVertexValueRef_array(A,g);return new s(I)}setFaceVertexValue(A,g,I){this.setFaceVertexValue_array(A,g,I.asArray())}setSplitVertexValue(A,g,I){this.setSplitVertexValue_array(A,g,I.asArray())}}e.register("Vec4Attribute",Xg);class Hg extends bg{constructor(){super("Color",4),this.normalized=!1}getValueRef(A){if(A>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+A+". Num Vertices:"+this.data.length/3);const g=A*this.stride,I=this.data.subarray(g,g+this.stride);return new l(I)}getValue(A){if(A>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+A+". Num Vertices:"+this.data.length/3);const g=A*this.stride,I=this.data.slice(g,g+this.stride);return new l(I)}setValue(A,g){if(A>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+A+". Num Vertices:"+this.data.length/3);const I=A*this.stride;this.data.set(g.asArray(),I)}getFaceVertexValueRef(A,g){const I=this.getFaceVertexValueRef_array(A,g);return new l(I)}setFaceVertexValue(A,g,I){this.setFaceVertexValue_array(A,g,I.asArray())}setSplitVertexValue(A,g,I){this.setSplitVertexValue_array(A,g,I.asArray())}}e.register("ColorAttribute",Hg);class Wg extends wg{constructor(){super()}clear(){this.setNumVertices(0),this.emit("geomDataTopologyChanged")}readBinary(A,g){super.loadBaseGeomBinary(A,g),this.emit("geomDataChanged")}}e.register("Points",Wg);class Yg extends wg{constructor(){super(),this.__indices=new Uint32Array}clear(){this.setNumSegments(0),this.setNumVertices(0),this.emit("geomDataTopologyChanged")}getIndices(){return this.__indices}getNumSegments(){return this.__indices.length/2}getNumLineSegments(){return this.__indices.length/2}setNumSegments(A){if(A>this.getNumSegments()){const g=new Uint32Array(2*A);g.set(this.__indices),this.__indices=g}else this.__indices=this.__indices.slice(0,2*A)}setSegmentVertexIndices(A,g,I){if(A>=this.__indices.length/2)throw new Error("Invalid line index:"+A+". Num Segments:"+this.__indices.length/2);this.__indices[2*A+0]=g,this.__indices[2*A+1]=I}getSegmentVertexIndex(A,g){return A<this.getNumSegments()?this.__indices[2*A+g]:-1}genBuffers(A){const g=super.genBuffers();let I;return I=g.numVertices<Math.pow(2,8)?new Uint8Array(this.__indices):g.numVertices<Math.pow(2,16)?new Uint16Array(this.__indices):this.__indices,g.indices=I,g}readBinary(A,g){super.loadBaseGeomBinary(A,g),this.setNumSegments(A.loadUInt32());const I=A.loadUInt8();1==I?this.__indices=A.loadUInt8Array():2==I?this.__indices=A.loadUInt16Array():4==I&&(this.__indices=A.loadUInt32Array()),this.emit("geomDataChanged")}toJSON(A){const g=super.toJSON(A);return A&&A.skipTopology||(g.indices=Array.from(this.__indices)),g}fromJSON(A,g){super.fromJSON(A,g),A.indices&&(this.__indices=Uint32Array.from(A.indices))}}e.register("Lines",Yg);class Kg extends wg{constructor(){super(),this.edgeFaces=[],this.faceEdges=[[]],this.faceCounts=[],this.__faceVertexIndices=new Uint32Array,this.__logTopologyWarnings=!1,this.__edgeAttributes=new Map,this.__faceAttributes=new Map,this.numEdges=0,this.edgeVerts=[],this.vertexEdges=[],this.edgeAngles=new Float32Array,this.edgeVecs=[]}clear(){super.clear(),this.edgeVerts=[],this.vertexEdges=[],this.numEdges=0,this.edgeAngles=new Float32Array,this.emit("geomDataTopologyChanged")}addVertexAttribute(A,g){super.addVertexAttribute(A,g),g.setMesh(this)}getFaceCounts(){return this.faceCounts}getNumFaces(){return 0==this.faceCounts.length?0:this.faceCounts.reduce(((A,g)=>A+g))}getNumTriangles(){let A=0,g=1;for(const I of this.faceCounts)A+=I*g,g++;return A}setFaceCounts(A){let g=0,I=3;for(const C of A)g+=C*I,I++;if(0==this.getNumFaces())this.__faceVertexIndices=new Uint32Array(g);else{const C=new Uint32Array(g);let i=0,e=0;g=0,I=3,A.forEach(((A,g)=>{const t=i+Math.min(A,this.faceCounts[g])*I;C.set(this.__faceVertexIndices.slice(i,t),e),i+=this.faceCounts[g]*I,e+=A*I,I++})),this.__faceVertexIndices=C}this.faceCounts=A}getFaceVertexCount(A){let g=0,I=0;return this.faceCounts.some(((C,i)=>(g+=C,g>A&&(I=i+3,!0)))),I}getFaceVertexOffset(A){let g=0,I=0;return this.faceCounts.some(((C,i)=>g+C>A?(I+=(A-g)*(i+3),!0):(g+=C,I+=C*(i+3),!1))),I}setFaceVertexIndices(A,g){const I=this.getFaceVertexCount(A);if(g.length!=I)throw new Error(`Invalid indices for face:${A} vertexIndices:${g}. Expected ${I} indices`);const C=this.getFaceVertexOffset(A);this.__faceVertexIndices.set(g,C)}addFace(A){const g=[...this.faceCounts];if(g.length<=A.length-3){for(let I=g.length;I<A.length-3;I++)g[I]=0;g[A.length-3]=1}else g[A.length-3]++;this.setFaceCounts(g);let I=0,C=0;return this.faceCounts.some(((g,i)=>i+3==A.length?(I+=g-1,C+=(g-1)*(i+3),!0):(I+=g,C+=g*(i+3),!1))),this.__faceVertexIndices.set(A,C),I}getFaceVertexIndices(A){const g=[],I=this.getFaceVertexOffset(A),C=this.getFaceVertexCount(A);for(let A=0;A<C;A++)g.push(this.__faceVertexIndices[I+A]);return g}getFaceVertexIndex(A,g){const I=this.getFaceVertexOffset(A);return this.__faceVertexIndices[I+g]}addFaceAttribute(A,g){return g.setCount(this.getNumFaces()),this.__faceAttributes.set(A,g),g}hasFaceAttribute(A){return this.__faceAttributes.has(A)}getFaceAttribute(A){return this.__faceAttributes.get(A)}addEdgeAttribute(A,g){g.setCount(this.numEdges),this.__edgeAttributes.set(A,g)}hasEdgeAttribute(A){return this.__edgeAttributes.has(A)}getEdgeAttribute(A){return this.__edgeAttributes.get(A)}genTopologyInfo(){let A={};this.vertexEdges=[],this.edgeFaces=[],this.edgeVerts=[],this.faceEdges=[],this.numEdges=0;const g=this.positions,I=(I,C)=>{let i=I,e=C;if(e<i){const A=i;i=e,e=A}const t=i+">"+e;if(t in A)return A[t];const B=g.getValueRef(i),o=g.getValueRef(e).subtract(B),s={edgeIndex:this.edgeFaces.length/2,edgeVec:o};return A[t]=s,this.edgeFaces.push(-1),this.edgeFaces.push(-1),this.edgeVerts.push(i),this.edgeVerts.push(e),this.numEdges++,s},C=(A,g,C)=>{const i=I(A,g).edgeIndex;if(g<A){const A=2*i+0;this.__logTopologyWarnings&&-1!=this.edgeFaces[A]&&console.warn("Edge poly 0 already set. Mesh is non-manifold."),this.edgeFaces[A]=C}else{const A=2*i+1;this.__logTopologyWarnings&&-1!=this.edgeFaces[A]&&console.warn("Edge poly 1 already set. Mesh is non-manifold."),this.edgeFaces[A]=C}C in this.faceEdges||(this.faceEdges[C]=[]),this.faceEdges[C].push(i),null==this.vertexEdges[A]&&(this.vertexEdges[A]=new Set),null==this.vertexEdges[g]&&(this.vertexEdges[g]=new Set),this.vertexEdges[A].add(i),this.vertexEdges[g].add(i)},i=this.getNumFaces();for(let A=0;A<i;A++){const g=this.getFaceVertexIndices(A);for(let I=0;I<g.length;I++){C(g[I],g[(I+1)%g.length],A)}}}computeFaceNormals(){const A=this.positions,g=new Zg;this.addFaceAttribute("normals",g);const I=this.getNumFaces();for(let C=0;C<I;C++){const I=this.getFaceVertexIndices(C),i=A.getValueRef(I[0]);let e=A.getValueRef(I[1]);const t=new o;for(let g=2;g<I.length;g++){const C=A.getValueRef(I[g]),B=e.subtract(i),o=C.subtract(i);t.addInPlace(B.cross(o).normalize()),e=C}t.lengthSquared()<Number.EPSILON||g.setValue(C,t.normalize())}}calculateEdgeAngles(){0==this.vertexEdges.length&&this.genTopologyInfo(),this.computeFaceNormals();const A=this.positions,g=this.getFaceAttribute("normals");this.edgeVecs=[],this.edgeAngles=new Float32Array(this.numEdges);for(let I=0;I<this.edgeFaces.length;I+=2){const C=this.edgeVerts[I],i=this.edgeVerts[I+1],e=A.getValueRef(i).subtract(A.getValueRef(C));e.normalizeInPlace(),this.edgeVecs.push(e);const t=this.edgeFaces[I],B=this.edgeFaces[I+1];if(-1==t||-1==B){this.edgeAngles[I/2]=2*Math.PI;continue}const o=g.getValueRef(t),s=g.getValueRef(B);this.edgeAngles[I/2]=o.angleTo(s)}}computeVertexNormals(A=1){this.calculateEdgeAngles();const g=this.getFaceAttribute("normals"),I=new Zg;this.addVertexAttribute("normals",I);const C=(A,g)=>{I.setValue(A,g)},i=(A,g)=>{let I,C;const i=this.faceEdges[A];for(const A of i)(this.edgeVerts[2*A]==g||this.edgeVerts[2*A+1]==g)&&(I?C=this.edgeVecs[A]:I=this.edgeVecs[A]);return[I,C]};for(let t=0;t<this.vertexEdges.length;t++){if(null==this.vertexEdges[t])continue;const B=this.vertexEdges[t],s=[],a=A=>{let g=!1;for(const I of s)if(g=I.includes(A),g)break;g||s.push([A])};for(const g of B){const I=this.edgeFaces[2*g],C=this.edgeFaces[2*g+1];if(-1!=I&&-1!=C&&this.edgeAngles[g]<A){let A=-1,g=-1;for(let i=0;i<s.length;i++)-1==A&&s[i].includes(I)&&(A=i),-1==g&&s[i].includes(C)&&(g=i);-1==A&&-1==g?s.push([I,C]):-1!=A&&-1!=g?A!=g&&(s[A]=s[A].concat(s[g]),s.splice(g,1)):(-1==A&&s[g].push(I),-1==g&&s[A].push(C))}else-1!=I&&a(I),-1!=C&&a(C)}s.sort(((A,g)=>A.length<g.length?1:A.length>g.length?-1:0));let l=!0;for(const A of s){const B=new o;for(const I of A){const A=i(I,t);let C;A[0]&&A[1]?(C=A[0].angleTo(A[1]),B.addInPlace((e=I,g.getValueRef(e)).scale(C))):console.warn("variable weight is undefined because faceEdges[0] or faceEdges[1] is undefined")}B.normalizeInPlace(),l?(C(t,B),l=!1):I.setSplitVertexValues(t,A,B.asArray())}}var e;return I}computeHardEdgesIndices(A=1){0==this.edgeVerts.length&&this.calculateEdgeAngles();const g=[],I=A=>{g.push(this.edgeVerts[A]),g.push(this.edgeVerts[A+1])};for(let g=0;g<this.edgeAngles.length;g++)this.edgeAngles[g]>A&&I(2*g);return Uint32Array.from(g)}genBuffers(A){const g={};let I=0;for(const[,A]of this.__vertexAttributes){const C=A.getSplits();for(const A in C){A in g||(g[A]={});const i=C[A];for(const C in i){const i=parseInt(C);i in g[A]||(g[A][i]=I,I++)}}}const C=this.positions.getCount(),i=C+I;let e;A&&0==A.includeIndices||(e=this.generateTriangulatedIndices(i,C,g));const t={};for(const[A,C]of this.__vertexAttributes){let i;i=0==I?C.asArray():C.generateSplitValues(g,I);const e=C.stride,B=i.length/e;t[A]={values:i,count:B,dimension:e,normalized:"normals"==A,dataType:C.getDataTypeName()}}return{numVertices:this.numVertices(),numRenderVerts:i,indices:e,attrBuffers:t}}computeNumTriangles(){let A=3,g=0;for(const I of this.faceCounts)g+=I*(A-2),A++;return g}generateTriangulatedIndices(A,g,I){const C=this.computeNumTriangles();let i;i=A<Math.pow(2,8)?new Uint8Array(3*C):A<Math.pow(2,16)?new Uint16Array(3*C):new Uint32Array(3*C);let e=0;const t=function(A,C){A in I&&C in I[A]&&(A=g+I[A][C]),i[e]=A,e++},B=this.getNumFaces();for(let A=0;A<B;A++){const g=this.getFaceVertexIndices(A);for(let I=0;I<g.length;I++)I>=3&&(t(g[0],A),t(g[I-1],A)),t(g[I],A)}return i}readBinary(A,g){super.loadBaseGeomBinary(A,g),this.setFaceCounts(Array.from(A.loadUInt32Array()));const I=this.getNumFaces(),C=A.loadUInt8Array(I),i=A.loadSInt32Vec2(),e=A.loadUInt8();let t;if(1==e)t=A.loadUInt8Array();else if(2==e)t=A.loadUInt16Array();else{if(4!=e)throw Error("faceVertexIndexDeltas undefined");t=A.loadUInt32Array()}let B=3,o=0;const s=this.faceCounts.map(((A,g)=>{const I=o;return o+=A*B,B++,I}));let a=0,l=0;const n=[];for(let A=0;A<I;A++){const g=C[A],I=s[g],e=g+3;n[A]=I;for(let g=0;g<e;g++){const C=I+g,e=t[a+g]+i.x;if(0==A)this.__faceVertexIndices[C]=e;else{let I=n[A-1];I+=g<l?g:l-1,this.__faceVertexIndices[C]=this.__faceVertexIndices[I]+e}}a+=e,s[g]+=e,l=e}this.hasVertexAttribute("normals")||this.computeVertexNormals(),this.emit("geomDataChanged")}toJSON(A){const g=super.toJSON(A);return A&&A.skipTopology||(g.faceCounts=Array.from(this.faceCounts),g.faceVertexIndices=Array.from(this.__faceVertexIndices)),g}fromJSON(A,g){super.fromJSON(A,g),A.faceCounts&&(this.faceCounts=A.faceCounts),A.faceVertexIndices&&(this.__faceVertexIndices=Uint32Array.from(A.faceVertexIndices))}}e.register("Mesh",Kg);class pg extends V{constructor(A){super(),this.name=A.name,this.__buffers=A.geomBuffers,this.__buffers.attrBuffers,this.boundingBox=new b,this.boundingBox.p0.__data=A.bbox.p0.__data,this.boundingBox.p1.__data=A.bbox.p1.__data,this.__metaData=new Map}getNumVertices(){return this.__buffers.numVertices}getBoundingBox(){return this.boundingBox}genBuffers(){return this.__buffers}freeBuffers(){for(const A in this.__buffers.attrBuffers){this.__buffers.attrBuffers[A].values=null}this.__buffers.indices&&(this.__buffers.indices=null)}}class Ng extends pg{constructor(A){super(A)}}class Jg extends pg{constructor(A){super(A)}getNumLineSegments(){return this.__buffers.indices.length/2}}class Dg extends pg{constructor(A){super(A)}getNumTriangles(){return this.__buffers.indices.length/3}}class fg extends hA{}e.register("SubGeom",fg);class Mg extends pg{constructor(A,g){super(A),this.materials=[],this.subGeomMaterialIndices=new Uint8Array(0),this.subGeoms=[],this.counts=A.geomBuffers.counts;const I=g.getMaterials();A.geomBuffers.materialLibraryIndices.forEach(((A,g)=>{this.materials[g]=I[A]})),this.subGeomMaterialIndices=A.geomBuffers.subGeomMaterialIndices,this.__buffers.materials=this.materials}getNumTriangles(){return this.counts.TRIANGLES/3}getNumLineSegments(){return this.counts.LINES/2}getNumPoints(){return this.counts.POINTS}loadMetadata(A,g){A.loadUInt32Array().forEach(((I,C)=>{const i=new fg;A.seek(I),i.readBinary(A,g),this.subGeoms[C]=i}))}}class Lg extends Wg{constructor(){super(),this.dirtyTopology=!0,this.dirtyVertices=!0,this.topologyParams=[]}parameterValueChanged(A){this.setBoundingBoxDirty(),this.topologyParams.includes(A.param.getName())?(this.dirtyTopology=!0,this.emit("geomDataTopologyChanged")):(this.dirtyVertices=!0,this.setBoundingBoxDirty(),this.emit("geomDataChanged")),super.parameterValueChanged(A)}update(){this.dirtyTopology?(this.rebuild(),this.dirtyTopology=!1,this.dirtyVertices=!1,this.rebuild()):this.dirtyVertices&&(this.dirtyVertices=!1,this.resize(),this.dirtyVertices=!1)}getBoundingBox(){return this.update(),super.getBoundingBox()}getNumVertices(){return this.update(),super.getNumVertices()}genBuffers(A){return this.update(),super.genBuffers(A)}toJSON(A){A||(A={}),A.skipTopology=!0,A.skipAttributes=["positions","normals","texCoords"];const g=super.toJSON(A);return A.skipTopology=!1,A.skipAttributes=[],g}}class Ug extends Yg{constructor(){super(),this.dirtyTopology=!0,this.dirtyVertices=!0,this.topologyParams=[]}parameterValueChanged(A){this.setBoundingBoxDirty(),this.topologyParams.includes(A.param.getName())?(this.dirtyTopology=!0,this.emit("geomDataTopologyChanged")):(this.dirtyVertices=!0,this.setBoundingBoxDirty(),this.emit("geomDataChanged")),super.parameterValueChanged(A)}update(){this.dirtyTopology?(this.rebuild(),this.dirtyTopology=!1,this.dirtyVertices=!1,this.rebuild()):this.dirtyVertices&&(this.resize(),this.dirtyVertices=!1,this.resize())}getBoundingBox(){return this.update(),super.getBoundingBox()}getNumVertices(){return this.update(),super.getNumVertices()}genBuffers(A){return this.update(),super.genBuffers()}toJSON(A){A||(A={}),A.skipTopology=!0,A.skipAttributes=["positions","normals","texCoords"];const g=super.toJSON(A);return A.skipTopology=!1,A.skipAttributes=[],g}}class vg extends Kg{constructor(){super(),this.dirtyTopology=!0,this.dirtyVertices=!0,this.topologyParams=[]}parameterValueChanged(A){this.setBoundingBoxDirty(),this.topologyParams.includes(A.param.getName())?(this.dirtyTopology=!0,this.emit("geomDataTopologyChanged")):(this.dirtyVertices=!0,this.setBoundingBoxDirty(),this.emit("geomDataChanged")),super.parameterValueChanged(A)}update(){this.dirtyTopology?(this.vertexEdges=[],this.dirtyTopology=!1,this.dirtyVertices=!1,this.rebuild()):this.dirtyVertices&&(this.dirtyVertices=!1,this.resize())}getBoundingBox(){return this.update(),super.getBoundingBox()}getNumVertices(){return this.update(),super.getNumVertices()}computeVertexNormals(A=1){return this.update(),super.computeVertexNormals(A)}computeHardEdgesIndices(A=1){return this.update(),super.computeHardEdgesIndices(A)}genBuffers(A){return this.update(),super.genBuffers(A)}toJSON(A){A||(A={}),A.skipTopology=!0,A.skipAttributes=["positions","normals","texCoords"];const g=super.toJSON(A);return A.skipTopology=!1,A.skipAttributes=[],g}}class kg extends Lg{constructor(A=1,g=1,I=1,C=1,i=!1){if(super(),this.topologyParams=[],isNaN(A)||isNaN(g)||isNaN(I)||isNaN(C))throw new Error("Invalid geom args");this.sizeXParam=this.addParameter(new JA("X",A)),this.sizeYParam=this.addParameter(new JA("Y",g)),this.divisionsXParam=this.addParameter(new JA("XDivisions",I)),this.divisionsYParam=this.addParameter(new JA("YDivisions",C)),i&&this.addVertexAttribute("texCoords",new yg),this.topologyParams.push("XDivisions"),this.topologyParams.push("YDivisions")}rebuild(){const A=this.divisionsXParam.value,g=this.divisionsYParam.value;this.setNumVertices(A*g);const I=this.getVertexAttribute("texCoords");if(I)for(let C=0;C<g;C++){const i=C/(g-1);for(let g=0;g<A;g++){const e=g/(A-1);I.getValueRef(C*A+g).set(e,i)}}this.resize()}resize(){const A=this.divisionsXParam.value,g=this.divisionsYParam.value,I=this.sizeXParam.value,C=this.sizeYParam.value,i=this.getVertexAttribute("positions");if(i)for(let e=0;e<g;e++){const t=(e/(g-1)-.5)*C;for(let g=0;g<A;g++){const C=(g/(A-1)-.5)*I;i.getValueRef(e*A+g).set(C,t,0)}}}}e.register("PointGrid",kg);class xg extends Ug{constructor(A=1,g=1){if(super(),isNaN(A)||isNaN(g))throw new Error("Invalid geom args");this.sizeXParam=this.addParameter(new JA("X",A)),this.sizeXParam.on("valueChanged",this.resize.bind(this)),this.sizeYParam=this.addParameter(new JA("Y",g)),this.sizeYParam.on("valueChanged",this.resize.bind(this)),this.rebuild()}rebuild(){this.setNumVertices(4),this.setNumSegments(4),this.setSegmentVertexIndices(0,0,1),this.setSegmentVertexIndices(1,1,2),this.setSegmentVertexIndices(2,2,3),this.setSegmentVertexIndices(3,3,0),this.resize(!1)}resize(){const A=this.sizeXParam.value,g=this.sizeYParam.value,I=this.getVertexAttribute("positions");I&&(I.getValueRef(0).set(-.5*A,-.5*g,0),I.getValueRef(1).set(.5*A,-.5*g,0),I.getValueRef(2).set(.5*A,.5*g,0),I.getValueRef(3).set(-.5*A,.5*g,0))}}e.register("Rect",xg);class zg extends Ug{constructor(A=1,g=32,I=2*Math.PI){if(super(),this.topologyParams=[],isNaN(A)||isNaN(g))throw new Error("Invalid geom args");this.radiusParam=this.addParameter(new JA("Radius",A)),this.angleParam=this.addParameter(new JA("Angle",I)),this.sidesParam=this.addParameter(new JA("Sides",g>=3?g:3,[3,200],1)),this.topologyParams.push("Sides")}rebuild(){const A=this.sidesParam.value;this.setNumVertices(A);const g=this.angleParam.value<2*Math.PI;g?this.setNumSegments(A-1):this.setNumSegments(A);for(let I=0;I<(g?A-1:A);I++)this.setSegmentVertexIndices(I,I,(I+1)%A);this.resize()}resize(){const A=this.radiusParam.value,g=this.sidesParam.value,I=this.angleParam.value/g,C=this.getVertexAttribute("positions");if(C)for(let i=0;i<g;i++)C.getValueRef(i).set(Math.cos(I*i)*A,Math.sin(I*i)*A,0)}}e.register("Circle",zg);class Tg extends Ug{constructor(A=1){if(super(),isNaN(A))throw new Error("Invalid geom args");this.sizeParam=this.addParameter(new JA("Size",A))}rebuild(){this.setNumVertices(6),this.setNumSegments(3),this.setSegmentVertexIndices(0,0,1),this.setSegmentVertexIndices(1,2,3),this.setSegmentVertexIndices(2,4,5),this.resize()}resize(){const A=this.sizeParam.value,g=this.getVertexAttribute("positions");g&&(g.getValueRef(0).set(-.5*A,0,0),g.getValueRef(1).set(.5*A,0,0),g.getValueRef(2).set(0,.5*A,0),g.getValueRef(3).set(0,-.5*A,0),g.getValueRef(4).set(0,0,.5*A),g.getValueRef(5).set(0,0,-.5*A))}}e.register("Cross",Tg);class _g extends Ug{constructor(A=1,g=1,I=1,C=!1){super(),this.sizeXParam=this.addParameter(new JA("X",A)),this.sizeYParam=this.addParameter(new JA("Y",g)),this.sizeZParam=this.addParameter(new JA("Z",I)),this.baseZAtZeroParam=this.addParameter(new fA("BaseZAtZero",C))}rebuild(){this.setNumVertices(8),this.setNumSegments(12),this.setSegmentVertexIndices(0,0,1),this.setSegmentVertexIndices(1,1,2),this.setSegmentVertexIndices(2,2,3),this.setSegmentVertexIndices(3,3,0),this.setSegmentVertexIndices(4,4,5),this.setSegmentVertexIndices(5,5,6),this.setSegmentVertexIndices(6,6,7),this.setSegmentVertexIndices(7,7,4),this.setSegmentVertexIndices(8,0,4),this.setSegmentVertexIndices(9,1,5),this.setSegmentVertexIndices(10,2,6),this.setSegmentVertexIndices(11,3,7),this.resize()}resize(){const A=this.sizeXParam.value,g=this.sizeYParam.value,I=this.sizeZParam.value,C=this.baseZAtZeroParam.value,i=this.getVertexAttribute("positions");if(i){let e=.5;C&&(e=1),i.getValueRef(0).set(.5*A,-.5*g,e*I),i.getValueRef(1).set(.5*A,.5*g,e*I),i.getValueRef(2).set(-.5*A,.5*g,e*I),i.getValueRef(3).set(-.5*A,-.5*g,e*I),e=-.5,C&&(e=0),i.getValueRef(4).set(.5*A,-.5*g,e*I),i.getValueRef(5).set(.5*A,.5*g,e*I),i.getValueRef(6).set(-.5*A,.5*g,e*I),i.getValueRef(7).set(-.5*A,-.5*g,e*I)}}}e.register("LinesCuboid",_g);class Pg extends Ug{constructor(A=1,g=1,I=10,C=10,i=!1){if(super(),this.topologyParams=[],isNaN(A)||isNaN(g)||isNaN(I)||isNaN(C))throw new Error("Invalid geom args");this.xParam=this.addParameter(new JA("X",A)),this.yParam=this.addParameter(new JA("Y",g)),this.xDivisionsParam=this.addParameter(new JA("XDivisions",I)),this.yDivisionsParam=this.addParameter(new JA("YDivisions",C)),this.skipCenterLinesParam=this.addParameter(new fA("SkipCenterLines",i)),this.topologyParams.push("XDivisions"),this.topologyParams.push("YDivisions"),this.topologyParams.push("SkipCenterLines")}rebuild(){const A=this.xDivisionsParam.value,g=this.yDivisionsParam.value,I=this.skipCenterLinesParam.value&&A%2==0&&g%2==0;this.setNumVertices(2*(A+g+2-(I?1:0))),this.setNumSegments(A+g+2-(I?1:0));let C=0;for(let g=0;g<=A;g++){if(I&&g==A/2)continue;const i=2*C,e=2*C+1;this.setSegmentVertexIndices(C,i,e),C++}for(let i=0;i<=g;i++){if(I&&i==A/2)continue;const g=2*C,e=2*C+1;this.setSegmentVertexIndices(C,g,e),C++}this.resize()}resize(){const A=this.getVertexAttribute("positions"),g=this.xDivisionsParam.value,I=this.yDivisionsParam.value,C=this.xParam.value,i=this.yParam.value,e=this.skipCenterLinesParam.value&&g%2==0&&I%2==0;let t=0;for(let I=0;I<=g;I++){if(e&&I==g/2)continue;const B=2*t,o=2*t+1,s=(I/g-.5)*C;A&&(A.getValueRef(B).set(s,-.5*i,0),A.getValueRef(o).set(s,.5*i,0)),t++}for(let B=0;B<=I;B++){if(e&&B==g/2)continue;const o=2*t,s=2*t+1,a=(B/I-.5)*i;A&&(A.getValueRef(o).set(-.5*C,a,0),A.getValueRef(s).set(.5*C,a,0)),t++}}}e.register("Grid",Pg);class Og extends vg{constructor(A=.5,g=1,I=32,C=!0,i=!0,e=!0){if(super(),this.topologyParams=[],isNaN(A)||isNaN(g)||isNaN(I))throw new Error("Invalid geom args");this.radiusParam=this.addParameter(new JA("Radius",A)),this.heightParam=this.addParameter(new JA("Height",g)),this.detailParam=this.addParameter(new JA("Detail",I>=3?I:3,[3,200],1)),this.capParam=this.addParameter(new fA("Cap",C)),i&&this.addVertexAttribute("normals",new Zg),e&&this.addVertexAttribute("texCoords",new yg),this.topologyParams.push("Detail"),this.topologyParams.push("Cap")}rebuild(){const A=this.detailParam.value,g=this.radiusParam.value,I=this.heightParam.value,C=this.capParam.value;let i=A+1;C&&(i+=1),this.setNumVertices(i);const e=A,t=A+1,o=this.getVertexAttribute("positions");if(o){o.getValueRef(e).set(0,0,I);for(let I=0;I<A;I++){const C=-I/A*2*Math.PI;o.getValueRef(I).set(g*Math.cos(C),g*Math.sin(C),0)}C&&o.getValueRef(t).set(0,0,0)}this.setFaceCounts([A+(C?A:0)]);for(let g=0;g<A;g++){const I=(g+1)%A;this.setFaceVertexIndices(g,[I,g,e])}if(C)for(let g=0;g<A;g++){const I=(g+1)%A;this.setFaceVertexIndices(A+g,[g,I,t])}const s=this.getVertexAttribute("texCoords");if(s){let g=0;for(let I=0;I<A;I++)"setFaceVertexValue"in s&&(s.setFaceVertexValue(g,0,new B((I+1)/A,0)),s.setFaceVertexValue(g,1,new B(I/A,0)),s.setFaceVertexValue(g,2,new B((I+.5)/A,1)));if(C)for(let I=0;I<A;I++)s.setFaceVertexValue(g,0,new B(I/A,0)),s.setFaceVertexValue(g,1,new B((I+1)/A,0)),s.setFaceVertexValue(g,2,new B((I+.5)/A,1)),g++}this.resize()}resize(){const A=this.detailParam.value,g=this.radiusParam.value,I=this.heightParam.value,C=A,i=A+1,e=this.getVertexAttribute("positions");if(e){e.getValueRef(C).set(0,0,I);for(let I=0;I<A;I++){const C=-I/A*2*Math.PI;e.getValueRef(I).set(g*Math.cos(C),g*Math.sin(C),0)}this.capParam.value&&e.getValueRef(i).set(0,0,0)}this.dirtyTopology=!1,this.dirtyVertices=!1;this.getVertexAttribute("normals")&&this.computeVertexNormals()}}e.register("Cone",Og);class jg extends vg{constructor(A=1,g=1,I=1,C=!1){if(super(),isNaN(A)||isNaN(g)||isNaN(I))throw new Error("Invalid geom args");this.sizeXParam=this.addParameter(new JA("X",A)),this.sizeYParam=this.addParameter(new JA("Y",g)),this.sizeZParam=this.addParameter(new JA("Z",I)),this.baseZAtZeroParam=this.addParameter(new fA("BaseZAtZero",C)),this.setFaceCounts([0,6]),this.setFaceVertexIndices(0,[0,1,2,3]),this.setFaceVertexIndices(1,[7,6,5,4]),this.setFaceVertexIndices(2,[1,0,4,5]),this.setFaceVertexIndices(3,[3,2,6,7]),this.setFaceVertexIndices(4,[0,3,7,4]),this.setFaceVertexIndices(5,[2,1,5,6]),this.setNumVertices(8),this.addVertexAttribute("normals",new Zg)}rebuild(){const A=this.getVertexAttribute("normals");if(A)for(let g=0;g<6;g++){let I;switch(g){case 0:I=new o(0,0,1);break;case 1:I=new o(0,0,-1);break;case 2:I=new o(1,0,0);break;case 3:I=new o(-1,0,0);break;case 4:I=new o(0,-1,0);break;default:I=new o(0,1,0)}A.setFaceVertexValue(g,0,I),A.setFaceVertexValue(g,1,I),A.setFaceVertexValue(g,2,I),A.setFaceVertexValue(g,3,I)}this.resize()}resize(){const A=this.sizeXParam.value,g=this.sizeYParam.value,I=this.sizeZParam.value,C=this.baseZAtZeroParam.value;let i=.5;const e=this.getVertexAttribute("positions");C&&(i=1),e&&(e.getValueRef(0).set(.5*A,-.5*g,i*I),e.getValueRef(1).set(.5*A,.5*g,i*I),e.getValueRef(2).set(-.5*A,.5*g,i*I),e.getValueRef(3).set(-.5*A,-.5*g,i*I),i=-.5,C&&(i=0),e.getValueRef(4).set(.5*A,-.5*g,i*I),e.getValueRef(5).set(.5*A,.5*g,i*I),e.getValueRef(6).set(-.5*A,.5*g,i*I),e.getValueRef(7).set(-.5*A,-.5*g,i*I))}}e.register("Cuboid",jg);class qg extends vg{constructor(A=.5,g=1,I=32,C=2,i=!0,e=!1){if(super(),this.topologyParams=[],isNaN(A)||isNaN(g)||isNaN(I)||isNaN(C))throw new Error("Invalid geom args");this.radiusParam=this.addParameter(new JA("Radius",A)),this.heightParam=this.addParameter(new JA("Height",g)),this.sidesParam=this.addParameter(new JA("Sides",I>=3?I:3,[3,200],1)),this.loopsParam=this.addParameter(new JA("Loops",C>=2?C:2,[1,200],1)),this.capsParam=this.addParameter(new fA("Caps",i)),this.baseZAtZeroParam=this.addParameter(new fA("BaseZAtZero",e)),this.addVertexAttribute("texCoords",new yg),this.addVertexAttribute("normals",new Zg),this.topologyParams.push("Sides"),this.topologyParams.push("Loops"),this.topologyParams.push("Caps")}rebuild(){const A=this.sidesParam.value,g=this.loopsParam.value,I=this.capsParam.value;let C=A*g;I&&(C+=2),this.setNumVertices(C),I?this.setFaceCounts([2*A,A]):this.setFaceCounts([0,A]);let i=0;if(I){for(let g=0;g<A;g++){const I=C-1,e=g,t=(g+1)%A;this.setFaceVertexIndices(i++,[I,e,t])}for(let I=0;I<A;I++){const e=A*(g-1)+I,t=C-2,B=A*(g-1)+(I+1)%A;this.setFaceVertexIndices(i++,[e,t,B])}}for(let I=0;I<g-1;I++)for(let g=0;g<A;g++){const C=A*I+(g+1)%A,e=A*I+g,t=A*(I+1)+g,B=A*(I+1)+(g+1)%A;this.setFaceVertexIndices(i++,[C,e,t,B])}const e=this.getVertexAttribute("normals");if(e){if(i=0,I){const g=new o(0,0,-1);for(let I=0;I<A;I++)e.setFaceVertexValue(i,0,g),e.setFaceVertexValue(i,1,g),e.setFaceVertexValue(i,2,g),i++;g.set(0,0,1);for(let I=0;I<A;I++)e.setFaceVertexValue(i,0,g),e.setFaceVertexValue(i,1,g),e.setFaceVertexValue(i,2,g),i++}for(let I=0;I<g-1;I++)for(let g=0;g<A;g++){let I=g/A*2*Math.PI;const C=new o(Math.sin(I),Math.cos(I),0);e.setFaceVertexValue(i,0,C),e.setFaceVertexValue(i,1,C),I=(g+1)/A*2*Math.PI;const t=new o(Math.sin(I),Math.cos(I),0);e.setFaceVertexValue(i,2,t),e.setFaceVertexValue(i,3,t),i++}}const t=this.getVertexAttribute("texCoords");if(t){if(i=0,I){for(let g=0;g<A;g++)t.setFaceVertexValue(i,0,new B(g/A,0)),t.setFaceVertexValue(i,1,new B((g+1)/A,0)),t.setFaceVertexValue(i,2,new B((g+.5)/A,1)),i++;for(let g=0;g<A;g++)t.setFaceVertexValue(i,0,new B(g/A,0)),t.setFaceVertexValue(i,1,new B((g+1)/A,0)),t.setFaceVertexValue(i,2,new B((g+.5)/A,1)),i++}for(let g=0;g<A;g++)t.setFaceVertexValue(i,0,new B((g+1)/A,0)),t.setFaceVertexValue(i,2,new B((g+1)/A,1)),t.setFaceVertexValue(i,1,new B(g/A,0)),t.setFaceVertexValue(i,3,new B(g/A,1)),i++}this.resize()}resize(){const A=this.sidesParam.value,g=this.loopsParam.value,I=this.radiusParam.value,C=this.heightParam.value,i=this.capsParam.value,e=this.baseZAtZeroParam.value;let t=A*g;i&&(t+=2);let B=0,o=.5;e&&(o=0);const s=this.getVertexAttribute("positions");if(s){for(let i=0;i<g;i++){const e=i/(g-1)*C-C*o;for(let g=0;g<A;g++){const C=g/A*2*Math.PI;s.getValueRef(B).set(Math.sin(C)*I,Math.cos(C)*I,e),B++}}i&&(s.getValueRef(t-1).set(0,0,C*(e?0:-.5)),s.getValueRef(t-2).set(0,0,C*(e?1:.5)))}this.dirtyTopology=!1,this.dirtyVertices=!1,this.computeVertexNormals()}}e.register("Cylinder",qg);class $g extends vg{constructor(A=.5,g=32){if(super(),this.topologyParams=[],isNaN(A)||isNaN(g))throw new Error("Invalid geom args");this.radiusParam=this.addParameter(new JA("Radius",A)),this.sidesParam=this.addParameter(new JA("Sides",g>=3?g:3,[3,200],1)),this.addVertexAttribute("texCoords",new yg),this.addVertexAttribute("normals",new Zg),this.topologyParams.push("Sides")}rebuild(){const A=this.sidesParam.value;this.setNumVertices(A+1),this.setFaceCounts([A]);const g=this.getVertexAttribute("positions");g&&g.getValueRef(0).set(0,0,0);for(let g=0;g<A;g++){const I=g%A+1,C=(g+1)%A+1;this.setFaceVertexIndices(g,[0,I,C])}const I=this.getVertexAttribute("normals");if(I){const g=new o(0,0,1);I.setValue(0,g);for(let C=0;C<A;C++)I.setValue(C+1,g)}const C=this.getVertexAttribute("texCoords");if(C){C.getValueRef(0).set(.5,.5);for(let g=0;g<A;g++){const I=g/A*2*Math.PI;C.getValueRef(g+1).set(.5*Math.sin(I)+.5,.5*Math.cos(I)+.5)}}this.resize()}resize(){const A=this.sidesParam.value,g=this.radiusParam.value,I=this.getVertexAttribute("positions");if(I)for(let C=0;C<A;C++){const i=C/A*2*Math.PI;I.getValueRef(C+1).set(Math.sin(i)*g,Math.cos(i)*g,0)}}}e.register("Disc",$g);class AI extends vg{constructor(A=1,g=1,I=1,C=1,i=!0,e=!0){if(super(),this.topologyParams=[],isNaN(A)||isNaN(g)||isNaN(I)||isNaN(C))throw new Error("Invalid geom args");this.sizeXParam=this.addParameter(new JA("SizeX",A)),this.sizeYParam=this.addParameter(new JA("SizeY",g)),this.detailXParam=this.addParameter(new JA("DetailX",I)),this.detailYParam=this.addParameter(new JA("DetailY",C)),i&&this.addVertexAttribute("normals",new Zg),e&&this.addVertexAttribute("texCoords",new yg),this.topologyParams.push("DetailX"),this.topologyParams.push("DetailY")}rebuild(){const A=this.detailXParam.value,g=this.detailYParam.value;this.setNumVertices((A+1)*(g+1)),this.setFaceCounts([0,A*g]);let I=0;for(let C=0;C<g;C++)for(let g=0;g<A;g++){const i=(A+1)*(C+1)+g,e=(A+1)*C+g,t=(A+1)*C+(g+1),B=(A+1)*(C+1)+(g+1);this.setFaceVertexIndices(I,[i,e,t,B]),I+=1}let C=0;const i=this.getVertexAttribute("normals");if(i)for(let I=0;I<=g;I++)for(let g=0;g<=A;g++)i.getValueRef(C).set(0,0,1),C++;C=0;const e=this.getVertexAttribute("texCoords");if(e)for(let I=0;I<=g;I++){const i=I/g;for(let g=0;g<=A;g++){const I=g/A;e.getValueRef(C).set(I,i),C++}}this.resize()}resize(){const A=this.sizeXParam.value,g=this.sizeYParam.value,I=this.detailXParam.value,C=this.detailYParam.value,i=this.getVertexAttribute("positions");if(!i)return;let e=0;for(let t=0;t<=C;t++){const B=(t/C-.5)*g;for(let g=0;g<=I;g++){const C=(g/I-.5)*A;i.getValueRef(e).set(C,B,0),e++}}}}e.register("Plane",AI);class gI extends vg{constructor(A=1,g=12,I=12,C=!0,i=!0){if(super(),this.radiusParam=new JA("Radius",1),this.sidesParam=new JA("Sides",12,[3,200],1),this.loopsParam=new JA("Loops",6,[3,200],1),isNaN(A)||isNaN(g)||isNaN(I))throw new Error("Invalid geom args");this.addParameter(this.radiusParam),this.addParameter(this.sidesParam),this.addParameter(this.loopsParam),this.radiusParam.value=A,this.sidesParam.value=g,this.loopsParam.value=I,C&&this.addVertexAttribute("normals",new Zg),i&&this.addVertexAttribute("texCoords",new yg),this.topologyParams.push("Sides"),this.topologyParams.push("Loops")}rebuild(){const A=this.radiusParam.value,g=this.sidesParam.value,I=this.loopsParam.value,C=2+g*I,i=2*g,e=g*I;this.setNumVertices(C),this.setFaceCounts([i,e]);const t=this.getVertexAttribute("positions"),s=this.getVertexAttribute("normals"),a=new o(0,0,1);let l=0;if(!t)return;t.getValueRef(l).set(0,0,A),s&&s.getValueRef(l).set(0,0,1),l++;for(let C=0;C<I;C++){const i=(C+1)/(I+1)*Math.PI;for(let I=0;I<g;I++){const C=-I/g*2*Math.PI;a.set(Math.sin(i)*Math.cos(C),Math.sin(i)*Math.sin(C),Math.cos(i)),t.getValueRef(l).setFromOther(a.scale(A)),s&&s.getValueRef(l).setFromOther(a),l++}}t.getValueRef(l).set(0,0,-A),s&&s.getValueRef(l).set(0,0,-1),l++;const n=this.getVertexAttribute("texCoords");let d=0;for(let A=0;A<g;A++){const C=0,i=(A+1)%g+1,e=A+1;if(this.setFaceVertexIndices(d,[C,i,e]),n){const C=new B(.5,0),i=new B((A+1)/(g-1),1/(I+1)),e=new B(A/(g-1),1/(I+1));n.setFaceVertexValue(d,0,C),n.setFaceVertexValue(d,1,i),n.setFaceVertexValue(d,2,e)}d++}for(let A=0;A<g;A++){const i=C-1,e=g*(I-1)+(A+1)%g+1,t=g*(I-1)+A+1;if(this.setFaceVertexIndices(d,[i,t,e]),n){const C=new B(.5,1),i=new B((A+1)/(g-1),1-1/(I+1)),e=new B(A/(g-1),1-1/(I+1));n.setFaceVertexValue(d,0,C),n.setFaceVertexValue(d,1,i),n.setFaceVertexValue(d,2,e)}d++}for(let A=0;A<I-1;A++)for(let C=0;C<g;C++){const i=g*A+C+1,e=g*A+(C+1)%g+1,t=g*(A+1)+(C+1)%g+1,o=g*(A+1)+C+1;this.setFaceVertexIndices(d,[i,e,t,o]),n&&(n.setFaceVertexValue(d,0,new B(C/g,(A+1)/I)),n.setFaceVertexValue(d,1,new B((C+1)/g,(A+1)/I)),n.setFaceVertexValue(d,2,new B((C+1)/g,(A+2)/I)),n.setFaceVertexValue(d,3,new B(C/g,(A+2)/I))),d++}}resize(){const A=this.radiusParam.value,g=this.sidesParam.value,I=this.loopsParam.value;if(!g||!I)return void console.warn("resize() failed");const C=this.getVertexAttribute("positions"),i=this.getVertexAttribute("normals");let e=0;const t=new o(0,0,1);C.getValueRef(e).set(0,0,A),i&&i.getValueRef(e).set(0,0,1),e++;for(let B=0;B<I;B++){const o=(B+1)/(I+1)*Math.PI;for(let I=0;I<g;I++){const B=-I/g*2*Math.PI;t.set(Math.sin(o)*Math.cos(B),Math.sin(o)*Math.sin(B),Math.cos(o)),C.getValueRef(e).setFromOther(t.scale(A)),i&&i.getValueRef(e).setFromOther(t),e++}}C.getValueRef(e).set(0,0,-A),i&&i.getValueRef(e).set(0,0,-1),e++}}e.register("Sphere",gI);class II extends vg{constructor(A=.5,g=3,I=32,C=2*Math.PI){if(super(),isNaN(A)||isNaN(g)||isNaN(I))throw new Error("Invalid geom args");this.innerRadiusParam=this.addParameter(new JA("InnerRadius",A)),this.outerRadiusParam=this.addParameter(new JA("OuterRadius",g)),this.detailParam=this.addParameter(new JA("Detail",I>=3?I:3,[3,200],1)),this.arcAngleParam=this.addParameter(new JA("ArcAngle",C)),this.addVertexAttribute("texCoords",new yg),this.addVertexAttribute("normals",new Zg),this.topologyParams.push("Detail"),this.topologyParams.push("ArcAngle")}rebuild(){const A=this.arcAngleParam.value<2*Math.PI,g=this.detailParam.value,I=g,C=2*g+(A?1:0),i=I*C;this.setNumVertices(i),this.setFaceCounts([0,I*C]);const e=this.getVertexAttribute("texCoords");if(e){let g=0;for(let i=0;i<(A?C-1:C);i++)for(let A=0;A<I;A++){const t=(i+1)%C,o=(A+1)%I,s=I*i+A,a=I*i+o,l=I*t+o,n=I*t+A;this.setFaceVertexIndices(g,[s,a,l,n]),e.setFaceVertexValue(g,0,new B(i/C,A/C)),e.setFaceVertexValue(g,1,new B(i/C,(A+1)/C)),e.setFaceVertexValue(g,2,new B((i+1)/C,(A+1)/C)),e.setFaceVertexValue(g,3,new B((i+1)/C,A/C)),g++}}this.resize()}resize(){const A=this.innerRadiusParam.value,g=this.outerRadiusParam.value,I=this.arcAngleParam.value,C=this.detailParam.value,i=I<2*Math.PI,e=C,t=2*C+(i?1:0),B=this.getVertexAttribute("positions"),o=this.getVertexAttribute("normals");if(!B||!o)return;let s=0;for(let C=0;C<t;C++){const a=-C/(i?t-1:t)*I,l=Math.cos(a),n=Math.sin(a);for(let I=0;I<e;I++){const C=I/e*2*Math.PI,i=Math.sin(C),t=Math.cos(C),a=g+t*A;B.getValueRef(s).set(l*a,n*a,A*i),o.getValueRef(s).set(l*t,n*t,i),s++}}}}e.register("Torus",II);class CI extends Gg{constructor(A){super(A),this.__data=new Uint8Array(4),this.format="RGBA",this.type="UNSIGNED_BYTE",this.width=1,this.height=1}isLoaded(){return this.loaded}isStream(){return!1}setData(A,g,I){this.__data!=I&&(this.width=A,this.height=g,this.__data=I,this.loaded?this.emit("updated"):(this.loaded=!0,this.emit("loaded")))}getParams(){const A=super.getParams();return A.data=this.__data,A}}e.register("DataImage2D",CI),e.register("DataImage",CI);const iI={};class eI extends Gg{constructor(A,g="",I={}){super(A),this.__data=null,this.type="UNSIGNED_BYTE",this.crossOrigin="anonymous",g&&""!=g&&this.load(g)}setCrossOrigin(A){this.crossOrigin=A}getDOMElement(){return this.__data}load(A,g="RGB"){return new Promise(((I,C)=>{if(!g){const I=A.lastIndexOf(".");if(-1!=I){".png"==A.substring(I).toLowerCase()&&(g="RGBA")}}this.format=g,this.loaded=!1;const i=()=>{this.url=A,this.width=this.__data.width,this.height=this.__data.height,this.loaded=!0,this.emit("loaded"),I()};A in iI?(this.__data=iI[A],this.__data.complete?i():(this.__data.addEventListener("load",i),this.__data.addEventListener("error",C))):(this.__data=new Image,this.__data.crossOrigin=this.crossOrigin,this.__data.src=A,this.__data.addEventListener("load",i),this.__data.addEventListener("error",C),iI[A]=this.__data)}))}setImageURL(A,g="RGB"){this.load(A,g)}getParams(){const A=super.getParams();return this.loaded&&(A.data=this.__data),A}readBinary(A,g){this.setName(A.loadStr());const I=A.loadStr();if("string"==typeof I&&""!=I){const A=g.url.substring(0,g.url.lastIndexOf("/"));this.load(A+"/"+I)}}}e.register("FileImage2D",eI),e.register("FileImage",eI);class tI extends eI{constructor(A,g,I){super(A,g,I)}}e.register("LDRImage",tI);class BI extends Gg{constructor(A,g={}){let I;super(A),this.exposure=1,this.hdrTint=new l(1,1,1,1),null!=A&&A.includes(".")&&(I=A,this.setName(A.substring(A.lastIndexOf("/")+1,A.lastIndexOf(".")))),this.type="FLOAT",I&&this.load(I)}__decodeData(A){return new Promise(((g,I)=>{const C=A.ldr,i=A.cdm,e=new Blob([C.buffer]),t=new Image;t.onload=()=>{this.width=t.width,this.height=t.height,this.__data={ldr:t,cdm:i},this.loaded?this.emit("updated"):(this.loaded=!0,this.emit("loaded")),g()},t.src=URL.createObjectURL(e)}))}load(A){return this.loaded=!1,new Promise(((g,I)=>{const C=A.lastIndexOf("/")>-1?A.substring(A.lastIndexOf("/")+1):"",i=C.substring(0,C.lastIndexOf("."));""==this.getName()&&this.setName(i),this.type="FLOAT",FA.loadFile("archive",A).then((A=>{if(!A.ldr||!A.cdm)for(const g in A)g.endsWith(".jpg")?(A.ldr=A[g],delete A[g]):g.endsWith(".bin")&&(A.cdm=A[g],delete A[g]);this.__decodeData(A).then((()=>{g()}))}),(A=>{this.emit("error",A),I(A)}))}))}isStream(){return!1}getParams(){const A=super.getParams();return this.loaded&&(A.data=this.__data,A.exposure=this.exposure),A}setHDRTint(A){this.hdrTint=A}getHDRTint(){return this.hdrTint}readBinary(A,g){this.setName(A.loadStr());let I=A.loadStr();"string"==typeof I&&""!=I&&this.load(I)}}e.register("HDRImage",BI);class oI extends eI{constructor(A,g,I){super(A,g,I),this.videoElem=new HTMLVideoElement,this.muteParam=new fA("Mute",!1),this.loopParam=new fA("Loop",!0),this.spatializeAudioParam=new fA("SpatializeAudio",!0),this.refDistanceParam=new JA("refDistance",2),this.maxDistanceParam=new JA("maxDistance",1e4),this.rolloffFactorParam=new JA("rolloffFactor",1),this.coneInnerAngleParam=new JA("coneInnerAngle",360),this.coneOuterAngleParam=new JA("coneOuterAngle",0),this.coneOuterGainParam=new JA("coneOuterGain",1),this.gainParam=new JA("Gain",2),this.format="RGB",this.type="UNSIGNED_BYTE",this.addParameter(this.muteParam),this.addParameter(this.loopParam),this.addParameter(this.spatializeAudioParam),this.addParameter(this.refDistanceParam),this.addParameter(this.maxDistanceParam),this.addParameter(this.rolloffFactorParam),this.addParameter(this.coneInnerAngleParam),this.addParameter(this.coneOuterAngleParam),this.addParameter(this.coneOuterGainParam),this.addParameter(this.gainParam).setRange([0,5])}getAudioSource(){return this.videoElem}load(A,g="RGB"){return new Promise(((g,I)=>{FA.incrementWorkload(1),this.videoElem.style.display="none",this.videoElem.preload="auto",this.videoElem.crossOrigin="anonymous",document.body.appendChild(this.videoElem),this.videoElem.addEventListener("loadedmetadata",(()=>{this.videoElem.muted=this.muteParam.value,this.muteParam.on("valueChanged",(()=>{this.videoElem.muted=this.muteParam.value})),this.videoElem.loop=this.loopParam.value,this.loopParam.on("valueChanged",(()=>{this.videoElem.loop=this.loopParam.value})),this.width=this.videoElem.videoHeight,this.height=this.videoElem.videoWidth,this.loaded=!0,FA.incrementWorkDone(1),this.emit("loaded"),g(C);let A=0;const I=()=>{if(this.videoElem.paused||this.videoElem.ended)return;const g=Math.floor(29.97*this.videoElem.currentTime);A!=g&&(this.emit("updated"),A=g),setTimeout(I,20)};I()}),!1),this.videoElem.src=A;const C=this.videoElem.play();void 0!==C&&C.then((A=>{console.log("Autoplay started!")})).catch((()=>{console.log("Autoplay was prevented.")}))}))}getParams(){const A=super.getParams();return this.loaded&&(A.data=this.videoElem),A}}function sI(A){this.data=A,this.pos=0}function aI(A){this.stream=new sI(A),this.output={}}e.register("LDRVideo",oI),sI.prototype.readByte=function(){return this.data[this.pos++]},sI.prototype.peekByte=function(){return this.data[this.pos]},sI.prototype.readBytes=function(A){for(var g=new Array(A),I=0;I<A;I++)g[I]=this.readByte();return g},sI.prototype.peekBytes=function(A){for(var g=new Array(A),I=0;I<A;I++)g[I]=this.data[this.pos+I];return g},sI.prototype.readString=function(A){for(var g="",I=0;I<A;I++)g+=String.fromCharCode(this.readByte());return g},sI.prototype.readBitArray=function(){for(var A=[],g=this.readByte(),I=7;I>=0;I--)A.push(!!(g&1<<I));return A},sI.prototype.readUnsigned=function(A){var g=this.readBytes(2);return A?(g[1]<<8)+g[0]:(g[0]<<8)+g[1]},aI.prototype.parse=function(A){return this.parseParts(this.output,A),this.output},aI.prototype.parseParts=function(A,g){for(var I=0;I<g.length;I++){var C=g[I];this.parsePart(A,C)}},aI.prototype.parsePart=function(A,g){var I,C=g.label;if(!g.requires||g.requires(this.stream,this.output,A))if(g.loop){for(var i=[];g.loop(this.stream);){var e={};this.parseParts(e,g.parts),i.push(e)}A[C]=i}else g.parts?(I={},this.parseParts(I,g.parts),A[C]=I):g.parser?(I=g.parser(this.stream,this.output,A),g.skip||(A[C]=I)):g.bits&&(A[C]=this.parseBits(g.bits))},aI.prototype.parseBits=function(A){var g={},I=this.stream.readBitArray();for(var C in A){var i=A[C];i.length?g[C]=I.slice(i.index,i.index+i.length).reduce((function(A,g){return 2*A+g}),0):g[C]=I[i.index]}return g};var lI=function(){return function(A){return A.readByte()}},nI=function(A){return function(g){return g.readBytes(A)}},dI=function(A){return function(g){return g.readString(A)}},hI=function(A){return function(g){return g.readUnsigned(A)}},cI=function(A,g){return function(I,C,i){for(var e=g(I,C,i),t=new Array(e),B=0;B<e;B++)t[B]=I.readBytes(A);return t}},rI={label:"blocks",parser:function(A){for(var g=[],I=A.readByte();0!==I;I=A.readByte())g=g.concat(A.readBytes(I));return g}},GI={label:"gce",requires:function(A){var g=A.peekBytes(2);return 33===g[0]&&249===g[1]},parts:[{label:"codes",parser:nI(2),skip:!0},{label:"byteSize",parser:lI()},{label:"extras",bits:{future:{index:0,length:3},disposal:{index:3,length:3},userInput:{index:6},transparentColorGiven:{index:7}}},{label:"delay",parser:hI(!0)},{label:"transparentColorIndex",parser:lI()},{label:"terminator",parser:lI(),skip:!0}]},mI={label:"image",requires:function(A){return 44===A.peekByte()},parts:[{label:"code",parser:lI(),skip:!0},{label:"descriptor",parts:[{label:"left",parser:hI(!0)},{label:"top",parser:hI(!0)},{label:"width",parser:hI(!0)},{label:"height",parser:hI(!0)},{label:"lct",bits:{exists:{index:0},interlaced:{index:1},sort:{index:2},future:{index:3,length:2},size:{index:5,length:3}}}]},{label:"lct",requires:function(A,g,I){return I.descriptor.lct.exists},parser:cI(3,(function(A,g,I){return Math.pow(2,I.descriptor.lct.size+1)}))},{label:"data",parts:[{label:"minCodeSize",parser:lI()},rI]}]},QI={label:"text",requires:function(A){var g=A.peekBytes(2);return 33===g[0]&&1===g[1]},parts:[{label:"codes",parser:nI(2),skip:!0},{label:"blockSize",parser:lI()},{label:"preData",parser:function(A,g,I){return A.readBytes(I.text.blockSize)}},rI]},EI={label:"frames",parts:[GI,{label:"application",requires:function(A,g,I){var C=A.peekBytes(2);return 33===C[0]&&255===C[1]},parts:[{label:"codes",parser:nI(2),skip:!0},{label:"blockSize",parser:lI()},{label:"id",parser:function(A,g,I){return A.readString(I.blockSize)}},rI]},{label:"comment",requires:function(A,g,I){var C=A.peekBytes(2);return 33===C[0]&&254===C[1]},parts:[{label:"codes",parser:nI(2),skip:!0},rI]},mI,QI],loop:function(A){var g=A.peekByte();return 33===g||44===g}},bI=[{label:"header",parts:[{label:"signature",parser:dI(3)},{label:"version",parser:dI(3)}]},{label:"lsd",parts:[{label:"width",parser:hI(!0)},{label:"height",parser:hI(!0)},{label:"gct",bits:{exists:{index:0},resolution:{index:1,length:3},sort:{index:4},size:{index:5,length:3}}},{label:"backgroundColorIndex",parser:lI()},{label:"pixelAspectRatio",parser:lI()}]},{label:"gct",requires:function(A,g){return g.lsd.gct.exists},parser:cI(3,(function(A,g){return Math.pow(2,g.lsd.gct.size+1)}))},EI];function ZI(A){var g=new aI(new Uint8Array(A));this.raw=g.parse(bI),this.raw.hasImages=!1;for(var I=0;I<this.raw.frames.length;I++)if(this.raw.frames[I].image){this.raw.hasImages=!0;break}}ZI.prototype.decompressFrame=function(A,g){if(A>=this.raw.frames.length)return null;var I=this.raw.frames[A];if(I.image){var C=I.image.descriptor.width*I.image.descriptor.height,i=function(A,g,I){var C,i,e,t,B,o,s,a,l,n,d,h,c,r,G,m,Q=4096,E=-1,b=I,Z=new Array(I),y=new Array(Q),u=new Array(Q),R=new Array(Q+1);for(B=(i=1<<(h=A))+1,C=i+2,s=E,e=(1<<(t=h+1))-1,l=0;l<i;l++)y[l]=0,u[l]=l;for(d=a=c=r=m=G=0,n=0;n<b;){if(0===r){if(a<t){d+=g[G]<<a,a+=8,G++;continue}if(l=d&e,d>>=t,a-=t,l>C||l==B)break;if(l==i){e=(1<<(t=h+1))-1,C=i+2,s=E;continue}if(s==E){R[r++]=u[l],s=l,c=l;continue}for(o=l,l==C&&(R[r++]=c,l=s);l>i;)R[r++]=u[l],l=y[l];c=255&u[l],R[r++]=c,C<Q&&(y[C]=s,u[C]=c,0==(++C&e)&&C<Q&&(t++,e+=C)),s=o}r--,Z[m++]=R[r],n++}for(n=m;n<b;n++)Z[n]=0;return Z}(I.image.data.minCodeSize,I.image.data.blocks,C);I.image.descriptor.lct.interlaced&&(i=function(A,g){for(var I=new Array(A.length),C=A.length/g,i=function(C,i){var e=A.slice(i*g,(i+1)*g);I.splice.apply(I,[C*g,g].concat(e))},e=[0,4,2,1],t=[8,8,4,2],B=0,o=0;o<4;o++)for(var s=e[o];s<C;s+=t[o])i(s,B),B++;return I}(i,I.image.descriptor.width));var e={pixels:i,dims:{top:I.image.descriptor.top,left:I.image.descriptor.left,width:I.image.descriptor.width,height:I.image.descriptor.height}};return I.image.descriptor.lct&&I.image.descriptor.lct.exists?e.colorTable=I.image.lct:e.colorTable=this.raw.gct,I.gce&&(e.delay=10*(I.gce.delay||10),e.disposalType=I.gce.extras.disposal,I.gce.extras.transparentColorGiven&&(e.transparentIndex=I.gce.transparentColorIndex)),g&&(e.patch=function(A){for(var g=A.pixels.length,I=new Uint8ClampedArray(4*g),C=0;C<g;C++){var i=4*C,e=A.pixels[C],t=A.colorTable[e];I[i]=t[0],I[i+1]=t[1],I[i+2]=t[2],I[i+3]=e!==A.transparentIndex?255:0}return I}(e)),e}return null},ZI.prototype.decompressFrames=function(A){for(var g=[],I=0;I<this.raw.frames.length;I++){this.raw.frames[I].image&&g.push(this.decompressFrame(I,A))}return g};const yI={};class uI extends eI{constructor(A,g="",I={}){super(A,g,I),this.streamAtlasDescParam=new UA("StreamAtlasDesc"),this.streamAtlasIndexParam=new JA("StreamAtlasIndex",0),this.format="RGBA",this.type="UNSIGNED_BYTE",this.__streamAtlas=!0,this.addParameter(this.streamAtlasDescParam),this.addParameter(this.streamAtlasIndexParam);const C=this.streamAtlasIndexParam;let i;C.setRange([0,1]);let e=0;const t=A=>{C.value=e,i&&setTimeout((()=>t(A)),this.getFrameDelay(e)),e=(e+1)%A};this.play=()=>{this.__resourcePromise.then((()=>{i=!0;let A=C.getRange();if(!A)return void console.warn("numFrames is null");const g=A[1];t(g)}))},this.stop=()=>{i=!1}}getFrameDelay(A){return 10*this.__unpackedData.frameDelays[A]}load(A,g="RGB"){return A in yI?(this.__resourcePromise=yI[A],this.__resourcePromise):(this.__resourcePromise=new Promise(((g,I)=>{FA.incrementWorkload(1),GA(A,(I=>{console.warn("Unpacking Gif client side:"+A);const C=performance.now(),i=new ZI(I).decompressFrames(!0),e=Math.sqrt(i.length),t=[e,e];r.fract(e)>0&&(t[0]=Math.floor(t[0]+1),r.fract(e)>.5?t[1]=Math.floor(t[1]+1):t[1]=Math.floor(t[1]));const B=i[0].dims.width,o=i[0].dims.height,s=document.createElement("canvas"),a=s.getContext("2d"),l=document.createElement("canvas"),n=l.getContext("2d");l.width=B,l.height=o;const d=document.createElement("canvas"),h=d.getContext("2d");let c;d.width=t[0]*B,d.height=t[1]*o;const G=[],m=(A,g)=>{const I=A.dims;G.push(A.delay/10),c&&I.width==c.width&&I.height==c.height||(s.width=I.width,s.height=I.height,c=null==a?void 0:a.createImageData(I.width,I.height)),c.data.set(A.patch),null==a||a.putImageData(c,0,0),2==A.disposalType&&(null==n||n.clearRect(0,0,l.width,l.height)),null==n||n.drawImage(s,I.left,I.top),null==h||h.drawImage(l,g%t[0]*B,Math.floor(g/t[0])*o)};for(let A=0;A<i.length;A++)m(i[A],A);FA.incrementWorkDone(1);const Q=null==h?void 0:h.getImageData(0,0,d.width,d.height),E=performance.now()-C;console.log(`Decode GIF '${A}' time:`+E),g({width:d.width,height:d.height,atlasSize:t,frameRange:[0,i.length],frameDelays:G,imageData:Q})}),(g=>{const C="Unable to Load URL:"+g+":"+A;console.warn(C),I(C)}))})),yI[A]=this.__resourcePromise,this.__resourcePromise.then((A=>{this.width=A.width,this.height=A.height,this.streamAtlasDescParam.value=new s(A.atlasSize[0],A.atlasSize[1],0,0),this.streamAtlasIndexParam.setRange(A.frameRange),this.__unpackedData=A,this.__data=A.imageData,this.loaded=!0,this.emit("loaded")})),this.__resourcePromise)}}e.register("GIFImage",uI);class RI extends BI{constructor(A,g={}){super(A,g),this.headlightModeParam=new fA("HeadLightMode",!1),this.addParameter(this.headlightModeParam),this.utf8decoder=new TextDecoder,this.shCoeffs=[]}__decodeData(A){const g=A.samples;if(g&&(this.luminanceData=JSON.parse(this.utf8decoder.decode(g)),this.luminanceData.shCoeffs))for(let A=0;A<9;A++)this.shCoeffs[A]=new l(this.luminanceData.shCoeffs[3*A+0],this.luminanceData.shCoeffs[3*A+1],this.luminanceData.shCoeffs[3*A+2]);return super.__decodeData(A)}dirToLuminance(A){const g=A.x,I=A.y,C=A.z,i=this.shCoeffs[0].scale(.886227);return i.addInPlace(this.shCoeffs[1].scale(1.023328*I)),i.addInPlace(this.shCoeffs[2].scale(1.023328*C)),i.addInPlace(this.shCoeffs[3].scale(1.023328*g)),i.addInPlace(this.shCoeffs[4].scale(.858086*g*I)),i.addInPlace(this.shCoeffs[5].scale(.858086*I*C)),i.addInPlace(this.shCoeffs[6].scale(.743125*C*C-.247708)),i.addInPlace(this.shCoeffs[7].scale(.858086*g*C)),i.addInPlace(this.shCoeffs[8].scale(.429043*(g*g-I*I))),i.luminance()}}e.register("EnvMap",RI);class VI extends V{constructor(){super(),this.__labelLibraries={},this.__language=function(){if(!globalThis.navigator)return"en";const A=new URLSearchParams(window.location.search);if(A.has("lang"))return A.get("lang");const g=globalThis.navigator;let I,C;const i=A=>A.startsWith("en")?"En":A.startsWith("es")?"Es":A.startsWith("fr")?"Fr":A.startsWith("gb")||A.startsWith("de")?"Gb":A;if(Array.isArray(g.languages))for(I=0;I<g.languages.length;I++)if(C=g.languages[I],C&&C.length)return i(C);return null}(),this.__foundLabelLibraries={}}loadLibrary(A,g){const I=A.substring(0,A.lastIndexOf("."));if(this.__foundLabelLibraries[I]=g,A.endsWith(".labels"))rA(g,(A=>{this.__labelLibraries[I]=JSON.parse(A),this.emit("labelLibraryLoaded",{library:I})}));else if(A.endsWith(".xlsx")){const A=globalThis.XLSX;GA(g,(g=>{const C=new Uint8Array(g),i=A.read(C,{type:"array"}),e={};i.SheetNames.forEach((function(g){A.utils.sheet_to_json(i.Sheets[g],{}).forEach((function(A){const g=A.Identifier;delete A.Identifier,e[g]=A}))})),this.__labelLibraries[I]=e,this.emit("labelLibraryLoaded",{library:I})}))}}isLibraryFound(A){return A in this.__foundLabelLibraries}isLibraryLoaded(A){return A in this.__labelLibraries}getLabelText(A,g){const I=this.__labelLibraries[A];if(!I)throw new Error("LabelLibrary: '"+A+"' not found in LabelManager. Found: ["+Object.keys(this.__labelLibraries)+"]");const C=I[g];if(!C)throw new Error("Label: '"+g+"' not found in LabelLibrary: '"+A+"'. Found: ["+Object.keys(I)+"]");const i=C[this.__language];if(!i){if(C.En)return C.En;throw new Error("labelText: '"+this.__language+"' not found in Label. Found: ["+Object.keys(C)+"]")}return i}setLabelText(A,g,I){let C=this.__labelLibraries[A];C||(C={},this.__labelLibraries[A]=C);let i=C[g];i||(i={},C[g]=i),i[this.__language]=I}setLanguage(A){this.__language=A}}const FI=new VI;class SI extends CI{constructor(A,g){super(A),this.requestedReRender=!1,this.libraryParam=new jA("Library"),this.textParam=new jA("Text",""),this.fontColorParam=new xA("FontColor",new l(0,0,0)),this.fontSizeParam=new JA("FontSize",22),this.fontParam=new jA("Font","Helvetica"),this.borderWidthParam=new JA("BorderWidth",2),this.outlineParam=new fA("Outline",!1),this.outlineColorParam=new xA("OutlineColor",new l(0,0,0)),this.backgroundParam=new fA("Background",!0),this.backgroundColorParam=new xA("BackgroundColor",new l("#FBC02D")),this.fillBackgroundParam=new fA("FillBackground",!0),this.strokeBackgroundOutlineParam=new fA("StrokeBackgroundOutline",!0),this.canvasElem=document.createElement("canvas");this.marginParam=new JA("Margin",11),this.borderRadiusParam=new JA("BorderRadius",11),this.addParameter(this.marginParam),this.addParameter(this.borderRadiusParam),this.addParameter(this.libraryParam),this.addParameter(this.textParam),this.addParameter(this.fontColorParam),this.addParameter(this.fontSizeParam),this.addParameter(this.fontParam),this.addParameter(this.borderWidthParam),this.addParameter(this.outlineParam),this.addParameter(this.outlineColorParam),this.addParameter(this.backgroundParam),this.addParameter(this.backgroundColorParam),this.addParameter(this.fillBackgroundParam),this.addParameter(this.strokeBackgroundOutlineParam);this.on("nameChanged",(()=>{this.loadLabelData()})),g&&(this.libraryParam.value=g),this.requestedReRender=!1,this.needsRender=!1,this.loadLabelData()}__parameterValueChanged(A){super.parameterValueChanged(A),this.requestedReRender||(this.requestedReRender=!0,this.loadLabelData())}loadLabelData(){Promise.all([(()=>new Promise((A=>{const g=this.libraryParam.value;if(""==g)return void A();if(!FI.isLibraryFound(g))return console.warn("Label Library not found:",g),void A();const I=()=>{try{const A=this.getName(),I=FI.getLabelText(g,A);this.textParam.value=I}catch(A){console.warn(A)}A()};FI.isLibraryLoaded(g)?I():FI.on("labelLibraryLoaded",(A=>{A.library==g&&I()}))})))(),(()=>new Promise((A=>{if(null!=document.fonts){const g=this.fontParam.value,I=this.fontSizeParam.value;document.fonts.load(I+'px "'+g+'"').then((()=>{A()}))}else A()})))()]).then((()=>{this.requestedReRender=!1,this.needsRender=!0,this.loaded?this.emit("updated"):(this.loaded=!0,this.emit("loaded"))}))}renderLabelToImage(){const A=this.canvasElem.getContext("2d",{alpha:!0});let g=this.textParam.value;""==g&&(g=this.getName());const I=this.fontParam.value,C=this.fontColorParam.value,i=this.fontSizeParam.value,e=this.marginParam.value,t=this.borderWidthParam.value,B=this.borderRadiusParam.value,o=this.outlineParam.value,s=this.outlineColorParam.value,a=this.backgroundParam.value,l=this.backgroundColorParam.value,n=this.fillBackgroundParam.value,d=this.strokeBackgroundOutlineParam.value,h=e+t,c=g.split("\n");A.font=i+'px "'+I+'"';let r=0;c.forEach((g=>{r=Math.max(A.measureText(g).width,r)}));const G=i;this.width=Math.ceil(r+2*h),this.height=Math.ceil(G*c.length+2*h),A.canvas.width=this.width,A.canvas.height=this.height,this.canvasElem.width=this.width,this.canvasElem.height=this.height,A.fillStyle="rgba(0, 0, 0, 0.0)",A.fillRect(0,0,this.width,this.height),a&&(A.fillStyle=l.toHex(),A.strokeStyle=s.toHex(),function(A,g,I,C,i,e,t=!1,B=!0,o){if(void 0===B&&(B=!0),void 0===e&&(e=5),"number"==typeof e)e={tl:e,tr:e,br:e,bl:e};else{const A={tl:0,tr:0,br:0,bl:0};for(const g in A)e[g]=e[g]||A[g]}A.beginPath(),A.moveTo(g+e.tl,I),A.lineTo(g+C-e.tr,I),A.quadraticCurveTo(g+C,I,g+C,I+e.tr),A.lineTo(g+C,I+i-e.br),A.quadraticCurveTo(g+C,I+i,g+C-e.br,I+i),A.lineTo(g+e.bl,I+i),A.quadraticCurveTo(g,I+i,g,I+i-e.bl),A.lineTo(g,I+e.tl),A.quadraticCurveTo(g,I,g+e.tl,I),A.closePath(),t&&A.fill(),B&&(A.lineWidth=o,A.stroke())}(A,t,t,this.width-2*t,this.height-2*t,B,n,d,t)),A.font=i+'px "'+I+'"',A.textAlign="left",A.fillStyle=C.toHex(),A.textBaseline="hanging",c.forEach(((g,I)=>{A.fillText(g,h,h+I*G)})),o&&(A.strokeStyle=s.toHex(),A.lineWidth=1.5,A.strokeText(g,h,h)),this.__data=A.getImageData(0,0,this.width,this.height),this.needsRender=!1,this.emit("labelRendered",{width:this.width,height:this.height,data:this.__data})}getParams(){return this.needsRender&&this.renderLabelToImage(),super.getParams()}}e.register("Label",SI);class wI extends Gg{constructor(){super("")}connectWebcam(A,g,I=!1){const C={width:A,height:g,frameRate:{ideal:60,max:60}};C.facingMode=I?{exact:"environment"}:{facingMode:"user"};const i=document.createElement("video");i.style.display="none",i.preload="auto",i.crossOrigin="anonymous",document.body.appendChild(i),navigator.mediaDevices.getUserMedia({audio:!1,video:C}).then((A=>{i.srcObject=A,i.onloadedmetadata=A=>{i.play(),this.width=i.videoWidth,this.height=i.videoHeight,console.log("Webcam:["+this.width+", "+this.height+"]"),this.__data=i,this.loaded=!0,this.emit("loaded");let g=0;const I=()=>{if(i.paused||i.ended)return;const A=Math.floor(60*i.currentTime);g!=A&&(this.emit("updated"),g=A),setTimeout(I,20)};I()}})).catch((function(A){}))}setVideoStream(A){this.loaded=!1,this.width=A.videoWidth,this.height=A.videoHeight,this.start(),this.__data=A,this.loaded=!0,this.emit("loaded")}stop(){clearInterval(this.__intervalId)}start(){this.__intervalId=setInterval((()=>{this.emit("updated")}),20)}isLoaded(){return this.loaded}getParams(){return{type:this.type,format:this.format,width:this.width,height:this.height,data:this.__data,flipY:!0}}}e.register("VideoStreamImage2D",wI);class XI extends hA{constructor(A,g){super(A),this.__isOpaque=!0,this.__isTextured=!1,this.__shaderName="",g&&this.setShaderName(g)}getShaderName(){return this.__shaderName}setShaderName(A){if(this.__shaderName==A)return;this.__shaderName=A;const g=e.getClassDefinition(A).getMaterialTemplate();if(!g)throw new Error("Error setting Shader. Material template not registered found:"+A);const I={};let C=g.getNumParameters();for(;C--;){const A=g.getParameterByIndex(C);this.getParameter(A.getName())||this.addParameter(A.clone()),I[A.getName()]=!0}for(const A of this.params)I[A.getName()]||this.removeParameter(A.getName());this.__shaderName=A,this.__checkOpacity({});const i=new k(A);this.emit("shaderNameChanged",i)}removeAllTextures(){for(const A of this.params)A instanceof Qg?A.getImage()&&A.setImage(null):A instanceof mg&&A.getImage()&&A.setImage(null)}getParamTextures(){const A={};for(const g of this.params)g instanceof Qg?g.getImage()&&(A[g.getName()]=g.getImage()):g instanceof mg&&g.getImage()&&(A[g.getName()]=g.getImage());return A}isOpaque(){return this.__isOpaque}__checkOpacity(A){let g=!0;try{this.getShaderClass().isOpaque()||(g=!1)}catch(A){}if(g){const A=this.getParameter("Opacity");if(A&&(A.value<.99||A instanceof mg&&A.getImage()))g=!1;else{const A=this.getParameter("BaseColor");if(A){if(A instanceof Qg){const I=A.getImage();I&&"RGBA"==I.format&&(g=!1)}if(g&&A.value){A.value.a<1&&(g=!1)}}}}if(g!=this.__isOpaque){this.__isOpaque=g;const A=new _(g,!0);this.emit("opacityChanged",A),this.emit("transparencyChanged",A)}}isTextured(){return this.__isTextured}__checkTextures(A){const g=A||{};let I=!1;for(const A of this.params)if(A instanceof Qg){if(A.getImage()){I=!0;break}}else if(A instanceof mg&&A.getImage()){I=!0;break}if(I!=this.__isTextured){this.__isTextured=I;let A=new T(I,g);this.emit("texturedChanged",A)}}parameterValueChanged(A){this.__checkOpacity(A),this.__checkTextures(A),super.parameterValueChanged(A)}getShaderClass(){return e.getClassDefinition(this.getShaderName())}toJSON(A){const g=super.toJSON(A);return g.shader=this.__shaderName,g}fromJSON(A,g={}){A.shader?(this.setShaderName(A.shader),super.fromJSON(A,g)):console.warn("Invalid Material JSON")}readBinary(A,g){let I=A.loadStr();if("StandardMaterial"==I&&(I="StandardSurfaceShader"),"TransparentMaterial"==I&&(I="StandardSurfaceShader"),this.setShaderName(I),g.versions["zea-engine"].compare([0,0,3])<0)throw`Loading zcad files of version ${g.versions["zea-engine"]} is not longer support`;super.readBinary(A,g),this.__checkOpacity(),this.__checkTextures()}clone(A){const g=new XI("clone","");return g.copyFrom(this,A),g}copyFrom(A,g){this.setShaderName(A.getShaderName()),super.copyFrom(A,g)}}e.register("Material",XI);class HI extends XI{constructor(A){super(A),this.baseColorParam=new Qg("BaseColor",new l(1,1,.5)),this.opacityParam=new JA("Opacity",1),this.lineThicknessParam=new JA("LineThickness",.01),this.overlayParam=new JA("Overlay",0),this.__shaderName="FatLinesShader",this.addParameter(this.baseColorParam),this.addParameter(this.opacityParam),this.addParameter(this.overlayParam),this.addParameter(this.lineThicknessParam)}}e.register("FatLinesMaterial",HI);class WI extends XI{constructor(A){super(A),this.baseColorParam=new Qg("BaseColor",new l(1,1,.5)),this.pointSizeParam=new JA("PointSize",1),this.roundedParam=new JA("Rounded",1),this.borderWidthParam=new JA("BorderWidth",.2),this.overlayParam=new JA("Overlay",0),this.__shaderName="FatPointsShader",this.addParameter(this.baseColorParam),this.addParameter(this.pointSizeParam),this.addParameter(this.roundedParam),this.addParameter(this.borderWidthParam),this.addParameter(this.overlayParam)}clone(A){const g=new WI;return g.copyFrom(this,A),g}}e.register("FatPointsMaterial",WI);class YI extends XI{constructor(A){super(A),this.baseColorParam=new Qg("BaseColor",new l(1,1,.5)),this.overlayParam=new mg("Overlay",0),this.__shaderName="FlatSurfaceShader",this.addParameter(this.baseColorParam),this.addParameter(this.overlayParam)}clone(A){const g=new YI;return g.copyFrom(this,A),g}}e.register("FlatSurfaceMaterial",YI);class KI extends XI{constructor(A){super(A),this.baseColorParam=new Qg("BaseColor",new l(1,1,.5)),this.opacityParam=new mg("Opacity",.7,[0,1]),this.overlayParam=new mg("Overlay",1e-6),this.hiddenEdgeColorParam=new Qg("HiddenEdgeColor",new l(.2,.2,.2,0)),this.__shaderName="LinesShader",this.addParameter(this.baseColorParam),this.addParameter(this.opacityParam),this.addParameter(this.overlayParam),this.addParameter(this.hiddenEdgeColorParam)}clone(A){const g=new KI;return g.copyFrom(this,A),g}}e.register("LinesMaterial",KI);class pI extends XI{constructor(A){super(A),this.baseColorParam=new Qg("BaseColor",new l(1,1,.5)),this.pointSizeParam=new mg("PointSize",2),this.overlayParam=new mg("Overlay",2e-5),this.__shaderName="PointsShader",this.addParameter(this.baseColorParam),this.addParameter(this.pointSizeParam),this.addParameter(this.overlayParam)}clone(A){const g=new pI;return g.copyFrom(this,A),g}}e.register("PointsMaterial",pI);class NI extends XI{constructor(A){super(A),this.baseColorParam=new Qg("BaseColor",new l(1,1,.5)),this.__shaderName="ScreenSpaceShader",this.addParameter(this.baseColorParam)}clone(A){const g=new NI;return g.copyFrom(this,A),g}}e.register("ScreenSpaceMaterial",NI);class JI extends XI{constructor(A){super(A),this.baseColorParam=new Qg("BaseColor",new l(1,1,.5)),this.opacityParam=new mg("Opacity",1,[0,1]),this.emissiveStrengthParam=new mg("EmissiveStrength",0,[0,1]),this.__shaderName="SimpleSurfaceShader",this.addParameter(this.baseColorParam),this.addParameter(this.opacityParam),this.addParameter(this.emissiveStrengthParam)}clone(A){const g=new JI;return g.copyFrom(this,A),g}}e.register("SimpleSurfaceMaterial",JI);class DI extends XI{constructor(A){super(A),this.baseColorParam=new Qg("BaseColor",new l(1,1,.5)),this.normalParam=new Qg("Normal",new l(1,1,.5)),this.ambientOcclusion=new mg("AmbientOcclusion",1,[0,1]),this.metallicParam=new mg("Metallic",.05,[0,1]),this.roughnessParam=new mg("Roughness",.5,[0,1]),this.reflectanceParam=new mg("Reflectance",.5,[0,1]),this.emissiveStrengthParam=new mg("EmissiveStrength",0,[0,1]),this.opacityParam=new mg("Opacity",1,[0,1]),this.edgeColorParam=new Qg("EdgeColor",new l(.2,.2,.2)),this.pointColorParam=new Qg("PointColor",new l(.1,.1,.1)),this.hiddenEdgeColorParam=new Qg("HiddenEdgeColor",new l(.2,.2,.2,0)),this.__shaderName="StandardSurfaceShader",this.addParameter(this.baseColorParam),this.addParameter(this.normalParam),this.addParameter(this.ambientOcclusion),this.addParameter(this.metallicParam),this.addParameter(this.roughnessParam),this.addParameter(this.reflectanceParam),this.addParameter(this.emissiveStrengthParam),this.addParameter(this.opacityParam),this.addParameter(this.edgeColorParam),this.addParameter(this.pointColorParam),this.addParameter(this.hiddenEdgeColorParam)}clone(A){const g=new DI;return g.copyFrom(this,A),g}}e.register("StandardSurfaceMaterial",DI);class fI extends V{constructor(){super(),this.assetItem=null}}class MI extends ag{constructor(A){super(A),this.srcTreePath=[],this.srcTree=null}setSrcTree(A){this.srcTree=A;const g=new fI,I=this.srcTree.clone(g);I.localXfoParam.value=new m,this.addChild(I,!1,!1)}getSrcTree(){return this.srcTree}readBinary(A,g){if(super.readBinary(A,g),this.srcTreePath=A.loadStrArray(),this.srcTreePath.length>0)try{g.addPLCB((()=>{g.resolvePath(this.srcTreePath,(A=>{this.setSrcTree(A)}),(A=>{console.warn(`Error loading InstanceItem: ${this.getPath()}, unable to resolve: ${this.srcTreePath}. `+A.message)}))}))}catch(A){console.warn(`Error loading InstanceItem: ${this.getPath()}: `+A)}}clone(A){const g=new MI;return g.copyFrom(this,A),g}copyFrom(A,g){super.copyFrom(A,g),this.srcTreePath=A.srcTreePath,this.srcTreePath.length>0&&0==this.getNumChildren()&&A.once("childAdded",(A=>{const g=A.childItem;this.setSrcTree(g)}))}}e.register("InstanceItem",MI);class LI extends ag{constructor(A){super(A),this.materialParam=new rg("Material"),this.overlay=!1,this.__cutAway=!1,this.__cutAwayVector=new o(1,0,0),this.__cutAwayDist=0,this.__layers=[]}setOverlay(A){this.overlay=A}isOverlay(){return this.overlay}addLayer(A){this.__layers.push(A)}getLayers(){return this.__layers}isCutawayEnabled(){return this.__cutAway}setCutawayEnabled(A){this.__cutAway=A,this.emit("cutAwayChanged")}getCutVector(){return this.__cutAwayVector}setCutVector(A){this.__cutAwayVector=A,this.emit("cutAwayChanged")}getCutDist(){return this.__cutAwayDist}setCutDist(A){this.__cutAwayDist=A,this.emit("cutAwayChanged")}readBinary(A,g){if(super.readBinary(A,g),g.versions["zea-engine"].compare([0,0,4])>=0){const I=A.loadStr();let C=g.assetItem.getMaterialLibrary().getMaterial(I,!1);if(C||(C=new XI(I,"SimpleSurfaceShader"),C.getParameter("BaseColor").loadValue(l.random(.25)),g.assetItem.getMaterialLibrary().addMaterial(C)),this.materialParam.loadValue(C),this.__layers=A.loadStrArray(),this.__layers.length>0)for(const A of this.__layers)g.addGeomToLayer(this,A)}}}let UI=!1;class vI extends eg{constructor(A,g,I){super("CalcGeomMatOperator"),this.globalXfo=new Bg("GlobalXfo"),this.geomOffsetXfo=new Bg("GeomOffsetXfo"),this.geomMat=new ig("GeomMat"),this.globalXfo.setParam(A),this.geomOffsetXfo.setParam(g),this.geomMat.setParam(I),this.addInput(this.globalXfo),this.addInput(this.geomOffsetXfo),this.addOutput(this.geomMat)}evaluate(){const A=this.globalXfo.getValue().toMat4(),g=this.geomOffsetXfo.getValue().toMat4();this.geomMat.setClean(A.multiply(g))}}class kI extends LI{constructor(A,g,I,C){super(A),this.listenerIDs={},this.geomIndex=-1,this.assetItem=null,this.cullable=!0,this.geomOffsetXfoParam=new PA("GeomOffsetXfo"),this.geomParam=new hg("Geometry"),this.geomMatParam=new _A("GeomMat"),this.addParameter(this.geomParam),this.addParameter(this.materialParam),this.addParameter(this.geomOffsetXfoParam),this.addParameter(this.geomMatParam);const i=()=>{this.setBoundingBoxDirty()};this.geomParam.on("valueChanged",i),this.geomParam.on("boundingBoxChanged",i),this.calcGeomMatOperator=new vI(this.globalXfoParam,this.geomOffsetXfoParam,this.geomMatParam),g&&this.geomParam.loadValue(g),I&&this.materialParam.loadValue(I),C&&(this.localXfoParam.value=C)}_cleanBoundingBox(){if(this.disableBoundingBox)return new b;const A=super._cleanBoundingBox();if(this.geomBBox){const g=this.geomMatParam.value;A.addPoint(g.transformVec3(this.geomBBox.p0)),A.addPoint(g.transformVec3(this.geomBBox.p1))}else{const g=this.geomParam.value;if(g)if(UI){const I=this.geomMatParam.value;if(g instanceof pg){const C=g.__buffers.attrBuffers.positions.values,i=A=>{const g=3*A;return new o(C.subarray(g,g+3))};for(let C=0;C<g.getNumVertices();C++)A.addPoint(I.transformVec3(i(C)))}else{const C=g.getVertexAttribute("positions");for(let i=0;i<g.getNumVertices();i++)A.addPoint(I.transformVec3(C.getValueRef(i)))}}else A.addBox3(g.getBoundingBox(),this.geomMatParam.value)}return A}fromJSON(A,g){super.fromJSON(A,g)}readBinary(A,g){super.readBinary(A,g);const I=A.loadUInt8(),C=A.loadUInt32(),i=g.assetItem.getGeometryLibrary();this.geomIndex=C,this.assetItem=g.assetItem;const e=i.getGeom(C);if(e)this.geomParam.loadValue(e);else{const A=A=>{const{range:I}=A;if(C>=I[0]&&C<I[1]){const A=i.getGeom(C);A?this.geomParam.value=A:console.warn("Geom not loaded:",this.getName()),i.removeListenerById("rangeLoaded",g)}},g=i.on("rangeLoaded",A)}if(4&I&&(this.geomOffsetXfoParam.value=new m(A.loadFloat32Vec3(),A.loadFloat32Quat(),A.loadFloat32Vec3())),g.versions["zea-engine"].compare([0,0,4])<0){if(I&8){const I=g.assetItem.getMaterialLibrary(),C=A.loadStr();let i=I.getMaterial(C);i||(console.warn("Geom :'"+this.__name+"' Material not found:"+C),i=I.getMaterial("Default")),this.materialParam.loadValue(i)}else this.materialParam.loadValue(g.assetItem.getMaterialLibrary().getMaterial("Default"))}g.versions["zea-engine"].compare([3,0,0])<0?A.loadFloat32Vec2():this.geomBBox=new b(A.loadFloat32Vec3(),A.loadFloat32Vec3())}toString(A){return JSON.stringify(this.toJSON(A),null,2)}clone(A){const g=new kI;return g.copyFrom(this,A),g}copyFrom(A,g){if(super.copyFrom(A,g),!A.geomParam.value&&-1!=A.geomIndex){const g=A.assetItem.getGeometryLibrary();this.assetItem=A.assetItem,this.geomIndex=A.geomIndex,this.geomBBox=A.geomBBox;const I=A=>{const{range:I}=A;if(this.geomIndex>=I[0]&&this.geomIndex<I[1]){const A=g.getGeom(this.geomIndex);A?this.geomParam.value=A:console.warn("Geom not loaded:",this.getName()),g.removeListenerById("rangeLoaded",this.listenerIDs.rangeLoaded)}};this.listenerIDs.rangeLoaded=g.on("rangeLoaded",I)}this.geomMatParam.setDirty(0)}static setCalculatePreciseBoundingBoxes(A){UI=A}}e.register("GeomItem",kI);class xI extends ag{constructor(A){super(A),this.itemsParam=new dg("Items",(A=>A instanceof ag)),this.__itemsEventHandlers=[],this.addParameter(this.itemsParam),this.__itemsParam=this.itemsParam,this.itemsParam.on("itemAdded",(A=>{this.bindItem(A.item,A.index)})),this.itemsParam.on("itemRemoved",(A=>{this.unbindItem(A.item,A.index)}))}setSearchRoot(A){this.searchRoot=A}setOwner(A){this.searchRoot&&this.searchRoot!=this.getOwner()||(this.searchRoot=A),super.setOwner(A)}bindItem(A,g){if(!(A instanceof ag))return;const I={};I.pointerDown=A.on("pointerDown",(A=>{this.onPointerDown(A)})),I.pointerUp=A.on("pointerUp",(A=>{this.onPointerUp(A)})),I.pointerMove=A.on("pointerMove",(A=>{this.onPointerMove(A)})),I.pointerEnter=A.on("pointerEnter",(A=>{this.onPointerEnter(A)})),I.pointerLeave=A.on("pointerLeave",(A=>{this.onPointerLeave(A)})),this.__itemsEventHandlers.splice(g,0,I)}unbindItem(A,g){if(!(A instanceof ag))return;const I=this.__itemsEventHandlers[g];for(let g in I){const C=g.split(".");if(C.length>1){const i=A.getParameter(C[0]);i&&i.removeListenerById(C[1],I[g])}else A.removeListenerById(g,I[g])}this.__itemsEventHandlers.splice(g,1)}addItem(A,g=!0){A?this.itemsParam.addItem(A,g):console.warn("Error adding item to group. Item is null")}removeItem(A,g=!0){const I=this.itemsParam.value;if(!I)return;const C=Array.from(I).indexOf(A);C&&this.itemsParam.removeItem(C,g)}clearItems(A=!0){const g=this.itemsParam.value;if(!g)return;const I=Array.from(g);for(let A=I.length-1;A>=0;A--)this.unbindItem(I[A],A);this.itemsParam.clearItems(A)}getItems(){return this.itemsParam.value}setItems(A){this.clearItems(!1),this.itemsParam.setItems(A)}toJSON(A){const g=super.toJSON(A),I=this.itemsParam.value;if(I){const C=Array.from(I),i=[];C.forEach((g=>{const I=g.getPath();i.push(A?A.makeRelative(I):I)})),g.treeItems=i}return g}fromJSON(A,g){if(super.fromJSON(A,g),!A.treeItems)return void console.warn("Invalid Parameter JSON");if(!g)throw new Error("Unable to load JSON on a BaseGroup without a load context");let I=A.treeItems.length;const C=A=>{g.resolvePath(A,(A=>{this.addItem(A),I--,0==I&&this.loadDone()}),(()=>{console.warn("BaseGroup: '"+this.getName()+"'. Unable to load item:"+A)}))};for(const g of A.treeItems)C(g)}loadDone(){}}class zI extends xI{constructor(A){super(A),this.highlightedParam=new fA("Highlighted",!1),this.highlightColorParam=new xA("HighlightColor",new l(.5,.5,1)),this.highlightFillParam=new JA("HighlightFill",0,[0,1]),this.addParameter(this.highlightedParam),this.highlightedParam.on("valueChanged",(()=>{this.updateHighlight()})),this.addParameter(this.highlightColorParam),this.highlightColorParam.on("valueChanged",(()=>{this.updateHighlight()})),this.addParameter(this.highlightFillParam),this.highlightFillParam.on("valueChanged",(()=>{this.updateHighlight()}))}updateVisibility(){if(super.updateVisibility()){const A=this.isVisible();return Array.from(this.itemsParam.value).forEach((g=>{g instanceof ag&&g.propagateVisibility(A?1:-1)})),!0}return!1}updateHighlight(){this.__updateHighlightHelper()}__updateHighlightHelper(){let A,g=!1;(this.highlightedParam.value||this.isSelected())&&(g=!0,A=this.highlightColorParam.value,A.a=this.highlightFillParam.value);const I="groupItemHighlight"+this.getId();Array.from(this.itemsParam.value).forEach((C=>{C instanceof ag&&(g?C.addHighlight(I,A,!0):C.removeHighlight(I,!0))}))}setSelected(A){super.setSelected(A),this.updateHighlight()}bindItem(A,g){super.bindItem(A,g);const I=this.__itemsEventHandlers[g];if(A instanceof ag){if(A instanceof ag&&this.highlightedParam.value){const g=this.highlightColorParam.value;g.a=this.highlightFillParam.value,A.addHighlight("groupItemHighlight"+this.getId(),g,!0)}this.isVisible()||A.propagateVisibility(-1),I["BoundingBox.valueChanged"]=A.boundingBoxParam.on("valueChanged",(A=>{this.setBoundingBoxDirty()}))}}unbindItem(A,g){super.unbindItem(A,g),A instanceof ag&&(this.highlightedParam.value&&A.removeHighlight("groupItemHighlight"+this.getId(),!0),this.isVisible()||A.propagateVisibility(1),A.traverse((A=>{A instanceof LI&&A.setCutawayEnabled(!1)}),!0))}clone(A){const g=new zI(this.__name+" clone");return g.copyFrom(this,A),g}}e.register("SelectionSet",zI);var TI=ZA("",null,!1);const _I=new class extends EA{constructor(){super(!0)}constructWorker(){const A=new TI;return Promise.resolve(A)}};let PI=0;class OI extends V{constructor(A){super(),this.listenerIDs={},this.streamInfos={},this.genBuffersOpts={},this.numGeoms=-1,this.geoms=[],this.basePath="",this.loadedCount=0,this.assetItem=A,PI++}isLoaded(){return-1==this.numGeoms||this.loadedCount==this.numGeoms}loadGeomFile(A,g=!1){return g&&FA.incrementWorkload(1),new Promise((I=>{const C=this.basePath+A+".zgeoms";FA.loadFile("archive",C,!1).then((A=>{const i=A[Object.keys(A)[0]],e=this.on("streamFileParsed",(A=>{A.geomFileID==C&&(g&&FA.incrementWorkDone(1),this.removeListenerById("streamFileParsed",e),I())}));this.readBinaryBuffer(C,i.buffer,this.loadContext)}))}))}loadGeomFilesStream(A,g,I){const C=A.numGeomsPerFile.length;FA.incrementWorkload(C),this.numGeoms=A.numGeoms,this.basePath=g,this.loadContext=I;for(let A=0;A<C;A++)this.loadGeomFile(A,!1)}setGenBufferOption(A,g){this.genBuffersOpts[A]=g}setNumGeoms(A){this.numGeoms=A}getNumGeoms(){return this.numGeoms}getGeom(A){return A>=this.geoms.length?null:this.geoms[A]}readBinaryBuffer(A,I,C){const i=new YA(I,0,g.isMobileDevice),e=i.loadUInt32(),t=i.loadUInt32();if(this.streamInfos[A]={total:e,done:0},0==e){const g=new z(A,0);return void this.emit("streamFileParsed",g)}-1==this.numGeoms&&(this.numGeoms=e);const B=i.loadUInt32Array(e),o=I.byteLength>2e7;if(PI>1&&!o){const g=[0,e],o=0;_I.addTask({geomFileID:A,toc:B,byteOffset:o,geomIndexOffset:t,geomsRange:g,isMobileDevice:i.isMobileDevice,bufferSlice:I,genBuffersOpts:this.genBuffersOpts,context:{versions:C.versions}},[I]).then((A=>{this.__receiveGeomDatas(A)}))}else{const g=2e6;let o=0;for(;o<e;){const s=B[o];let a,l,n=0,d=o;for(;d<e&&n<g;)d++,n=B[d]-s;d>=e?(a=[o,e],l=I.byteLength):(a=[o,d],l=B[a[1]]);const h=0==o&&d==e,c=h?0:B[a[0]],r=h?I:I.slice(s,l);o=d,_I.addTask({geomFileID:A,toc:B,byteOffset:c,geomIndexOffset:t,geomsRange:a,isMobileDevice:i.isMobileDevice,bufferSlice:r,genBuffersOpts:this.genBuffersOpts,context:{versions:C.versions}},[r]).then((A=>{this.__receiveGeomDatas(A)}))}}}__receiveGeomDatas(A){const{geomFileID:g,geomDatas:I,geomIndexOffset:C,geomsRange:i}=A,e=C+i[0],t=[e,C+i[1]];for(let A=0;A<I.length;A++){const g=I[A];if(!g.type)continue;let C;switch(g.type){case"Points":C=new Ng(g);break;case"Lines":C=new Jg(g);break;case"Mesh":case"Plane":case"Sphere":case"Cone":C=new Dg(g);break;case"CompoundGeom":C=new Mg(g,this.assetItem.getMaterialLibrary());break;default:throw new Error("Unsupported Geom type:")}this.geoms[e+A]=C}const B=new M(t);this.emit("rangeLoaded",B);const o=t[1]-t[0],s=this.streamInfos[g];if(s.done+=o,s.done==s.total){const A=new z(g,s.done);this.emit("streamFileParsed",A)}return this.loadedCount+=o,this.loadedCount==this.numGeoms&&this.emit("loaded"),this.loadedCount==this.numGeoms}toJSON(){return{numGeoms:this.geoms.length}}toString(){return JSON.stringify(this.toJSON(),null,2)}loadMetadata(A,I){const C=new YA(A.buffer,0,g.isMobileDevice),i=C.loadUInt32Array();for(let A=0;A<i.length;A++)try{const g=this.geoms[A];g||console.warn("Error loading metadata for geom that was not yet loaded: ",A),g instanceof Mg&&(C.seek(i[A]),g.loadMetadata(C,I))}catch(g){console.warn("Error loading geom metadata: ",A)}}}class jI extends V{constructor(A="MaterialLibrary"){super(),this.__images={},this.materials=[],this.__materialsMap={},this.name="",this.__name=A}clear(){this.__images={},this.materials=[],this.__materialsMap={}}getPath(){return[this.__name]}resolvePath(A,g=0){return null}getNumMaterials(){return this.materials.length}getMaterials(){return this.materials}getMaterialNames(){const A=[];return this.materials.forEach((g=>{A.push(g.getName())})),A}hasMaterial(A){return A in this.__materialsMap}addMaterial(A){A.setOwner(this),this.__materialsMap[A.getName()]=this.materials.length,this.materials.push(A)}getMaterial(A,g=!0){const I=this.__materialsMap[A];if(null==I&&g)throw new Error("Material:"+A+" not found in library:"+this.getMaterialNames());return this.materials[I]}hasImage(A){return A in this.__images}addImage(A){A.setOwner(this),this.__images[A.getName()]=A}getImage(A,g=!0){const I=this.__images[A];if(!I&&g)throw new Error("Image:"+A+" not found in library:"+this.getImageNames());return I}getImageNames(){const A=[];for(const g in this.__images)A.push(g);return A}load(A){const g=new XMLHttpRequest;g.open("GET",A,!0),g.ontimeout=()=>{throw new Error("The request for "+A+" timed out.")},g.onload=()=>{4===g.readyState&&(200===g.status?this.fromJSON(JSON.parse(g.responseText)):console.warn(g.statusText))},g.send(null)}toJSON(A={}){return{numMaterials:this.getNumMaterials()}}fromJSON(A,g={}){for(const g in A.textures){const I=new eI(g);I.fromJSON(A.textures[g]),this.__images[g]=I}for(const g in A.materials){const I=new XI(g);I.fromJSON(A.materials[g]),this.addMaterial(I)}}readBinary(A,g){this.name=A.loadStr();const I=A.loadUInt32();for(let C=0;C<I;C++){const I=A.loadStr(),C=e.constructClass(I);C.readBinary(A,g),this.__images[C.getName()]=C}const C=A.loadUInt32();if(C>0){const I=A.loadUInt32Array(C);for(let i=0;i<C;i++){let C;switch(A.loadStr()){case"StandardMaterial":case"TransparentMaterial":case"StandardSurfaceShader":C=e.constructClass("StandardSurfaceMaterial");break;case"SimpleSurfaceShader":case"SimpleSurfaceMaterial":C=e.constructClass("SimpleSurfaceMaterial");break;case"PointsShader":case"PointsMaterial":C=e.constructClass("PointsMaterial");break;case"FatPointsShader":case"FatPointsMaterial":C=e.constructClass("FatPointsMaterial");break;case"LinesShader":case"LinesMaterial":C=e.constructClass("LinesMaterial");break;default:C=new XI("")}A.seek(I[i]),C.readBinary(A,g),this.materials[i]=C,this.__materialsMap[C.getName()]=i}}this.emit("loaded")}toString(){return JSON.stringify(this.toJSON(),null,2)}}const qI=A=>{switch(A.toLowerCase()){case"millimeters":return.001;case"centimeters":return.01;case"decimeters":return.1;case"meters":return 1;case"kilometers":return 1e3;case"inches":return.0254;case"feet":return.3048;case"miles":return 1609.34}return 1};class $I extends ag{constructor(A=""){super(A),this.geomLibrary=new OI(this),this.materialLibrary=new jI,this.loaded=!1,this.unitsScale=1,this.units="meters"}load(A){return Promise.reject(`This method is not implemented for this Asset Item: ${A}`)}isLoaded(){return this.loaded}getEngineDataVersion(){return this.engineDataVersion}getGeometryLibrary(){return this.geomLibrary}getMaterialLibrary(){return this.materialLibrary}getUnitsConversion(){return this.unitsScale}readBinary(A,g){g.assetItem=this,g.units||(g.units="meters"),g.versions["zea-engine"]||(g.versions["zea-engine"]=new WA(A.loadStr())),this.engineDataVersion=g.versions["zea-engine"];const I=()=>{this.units=A.loadStr(),this.addParameter(new jA("FileUnits",this.units));const I=qI(this.units),C=qI(g.units);this.unitsScale=I/C,g.units=this.units;const i=this.localXfoParam,e=i.value;e.sc.scaleInPlace(this.unitsScale),i.value=e};let C;g.versions["zea-engine"].compare([0,0,6])>0&&I();const i={};g.addGeomToLayer=(A,g)=>{if(!i[g]){C||(C=new ag("Layers"),this.addChild(C,!1));const A=new zI(g);C.addChild(A,!1),i[g]=A}i[g].addItem(A)};const e=[];g.resolvePath=(A,g,I)=>{if(!A)throw new Error("Path not specified");try{const I=this.resolvePath(A);g(I)}catch(C){e.push((()=>{try{const I=this.resolvePath(A);g(I)}catch(A){if(!I)throw A;I(A)}}))}},g.addPLCB=A=>e.push(A),this.materialLibrary.readBinary(A,g),super.readBinary(A,g),g.versions["zea-engine"].compare([0,0,5])>=0&&g.versions["zea-engine"].compare([0,0,7])<0&&I();for(const A of e)A();this.loaded=!0}toJSON(A={}){A.makeRelative=A=>{const g=this.getPath(),I=A.slice(0,g.length);for(let C=0;C<I.length-1;C++)if(I[C]!=g[C])return console.warn("Param Path is not relative to the asset. May not be able to be resolved at load time:"+A),A;const C=A.slice(g.length-1);return C[0]=".",C},A.assetItem=this;return super.toJSON(A)}fromJSON(A,g={}){g||(g={}),g.assetItem=this,null==g.version&&(g.version=0),g.assetItem=this;const I=[];g.resolvePath=(A,g)=>{if(!A)throw new Error("Path not specified");const C=this.resolvePath(A);C?g(C):I.push((()=>{const I=this.resolvePath(A);I?g(I):console.warn("Path unable to be resolved:"+A)}))},g.addPLCB=A=>I.push(A),super.fromJSON(A,g);for(const A of I)A()}clone(A){const g=new $I;return g.copyFrom(this,A),g}copyFrom(A,g){this.geomLibrary=A.geomLibrary,this.materialLibrary=A.materialLibrary,this.loaded=A.loaded,A.loaded||A.once("loaded",(I=>{const C=A.localXfoParam.value,i=this.localXfoParam.value;i.sc=C.sc.clone(),this.localXfoParam.value=i,A.getChildren().forEach((A=>{A&&A!=$I&&this.addChild(A.clone(g),!1,!1)})),this.loaded=!0,this.emit("loaded",I)})),super.copyFrom(A,g)}}e.register("AssetItem",$I);class AC extends V{constructor(A){super(),this.units="meters",this.versions={},this.sdk="",this.url="",this.folder="",this.camera=null,this.assetItem=null,this.resources=null,this.xrefs={},this.xrefLoadCallback=null,this.postLoadCallbacks=[],this.asyncCount=0,A&&(this.units=A.units,this.sdk=A.sdk,this.camera=A.camera,this.resources=A.resources,this.xrefs=A.xrefs,this.xrefLoadCallback=A.xrefLoadCallback)}incrementAsync(){this.asyncCount++}decrementAsync(){this.asyncCount--,0==this.asyncCount&&this.emit("done")}resolvePath(A,g,I){try{const I=this.assetItem.resolvePath(A);g(I)}catch(C){this.postLoadCallbacks.push((()=>{try{const I=this.assetItem.resolvePath(A);g(I)}catch(A){if(!I)throw new Error(A.message);I(A)}}))}}addPLCB(A){this.postLoadCallbacks.push(A)}clone(){return new AC(this)}}class gC extends ag{constructor(A,g){super(A),this.imageParam=new OA("Image"),this.pixelsPerMeterParam=new JA("PixelsPerMeter",1e3),this.alphaParam=new JA("Alpha",1),this.colorParam=new xA("Color",new l(1,1,1)),this.alignedToCameraParam=new fA("AlignedToCamera",!1),this.drawOnTopParam=new fA("DrawOnTop",!1),this.fixedSizeOnscreenParam=new fA("FixedSizeOnscreen",!1),this.pivotParam=new MA("Pivot",new B(.5,0));const I=this.addParameter(this.imageParam);g&&(I.value=g),this.addParameter(this.pixelsPerMeterParam),this.addParameter(this.alphaParam),this.addParameter(this.colorParam),this.addParameter(this.alignedToCameraParam),this.addParameter(this.drawOnTopParam),this.addParameter(this.fixedSizeOnscreenParam),this.addParameter(this.pivotParam)}}e.register("BillboardItem",gC);class IC extends ag{constructor(A="Camera"){super(A),this.isOrthographicParam=new JA("isOrthographic",0),this.fovParam=new JA("fov",1),this.nearParam=new JA("near",.1),this.farParam=new JA("far",1e3),this.focalDistanceParam=new JA("focalDistance",5),this.viewHeight=0,this.__orthoIntervalId=-1,this.__focusIntervalId=-1,this.addParameter(this.isOrthographicParam),this.addParameter(this.fovParam),this.addParameter(this.nearParam),this.addParameter(this.farParam),this.addParameter(this.focalDistanceParam);const g=A=>{this.emit("projectionParamChanged",A)};this.isOrthographicParam.on("valueChanged",g),this.fovParam.on("valueChanged",g),this.nearParam.on("valueChanged",g),this.farParam.on("valueChanged",g),this.setPositionAndTarget(new o(3,3,1.75),new o(0,0,1)),this.setLensFocalLength("28mm"),this.adjustNearAndFarPlanesToFocalDist=!0,this.nearDistFactor=.01,this.farDistFactor=100,this.frameOnBoundingSphere=!1}getNear(){return this.nearParam.value}setNear(A){this.nearParam.value=A}getFar(){return this.farParam.value}setFar(A){this.farParam.value=A}getFov(){return this.fovParam.value}setFov(A){this.fovParam.value=A}getFrustumHeight(){return this.viewHeight}setFrustumHeight(A){this.viewHeight=A,this.emit("projectionParamChanged")}setLensFocalLength(A){const g={"10mm":100.4,"11mm":95,"12mm":90,"14mm":81.2,"15mm":77.3,"17mm":70.4,"18mm":67.4,"19mm":64.6,"20mm":61.9,"24mm":53.1,"28mm":46.4,"30mm":43.6,"35mm":37.8,"45mm":29.9,"50mm":27,"55mm":24.6,"60mm":22.6,"70mm":19.5,"75mm":18.2,"80mm":17.1,"85mm":16.1,"90mm":15.2,"100mm":13.7,"105mm":13,"120mm":11.4,"125mm":11,"135mm":10.2,"150mm":9.1,"170mm":8.1,"180mm":7.6,"210mm":6.5,"300mm":4.6,"400mm":3.4,"500mm":2.7,"600mm":2.3,"800mm":1.7};A in g?this.fovParam.value=r.degToRad(g[A]):console.warn("Camera lense focal length not supported:"+A)}getFocalDistance(){return this.focalDistanceParam.value}setFocalDistance(A){A<1e-4&&console.error("Never set focal distance to zero"),this.focalDistanceParam.value=A,this.adjustNearAndFarPlanesToFocalDist&&(this.nearParam.value=A*this.nearDistFactor,this.farParam.value=A*this.farDistFactor)}isOrthographic(){return 1==this.isOrthographicParam.value}setIsOrthographic(A,g=0){if(this.__orthoIntervalId&&clearInterval(this.__orthoIntervalId),A>.5){const A=this.fovParam.value,g=this.focalDistanceParam.value;this.viewHeight=Math.sin(.5*A)*g*2}if(0==g)this.isOrthographicParam.value=A;else{const I=Math.round(g/20);let C=0;const i=this.isOrthographicParam.value,e=()=>{const g=r.lerp(i,A,C/I);this.isOrthographicParam.value=g,C++,C<=I?this.__orthoIntervalId=window.setTimeout(e,20):(this.__orthoIntervalId=-1,this.emit("movementFinished"))};e()}}setPositionAndTarget(A,g){this.setFocalDistance(A.distanceTo(g));const I=new m;I.setLookAt(A,g,new o(0,0,1)),this.globalXfoParam.value=I,this.emit("movementFinished")}getTargetPosition(){const A=this.focalDistanceParam.value,g=this.globalXfoParam.value,I=g.ori.getZaxis();return I.scaleInPlace(-A),I.addInPlace(g.tr),I}frameView(A,g){const I=this.focalDistanceParam.value,C=this.fovParam.value,i=this.globalXfoParam.value.clone(),e=A.getWidth()/A.getHeight(),t=2*Math.atan(Math.tan(.5*C)*e);let s=I;if(this.frameOnBoundingSphere){const A=new b;for(const I of g)A.addBox3(I.boundingBoxParam.value);if(!A.isValid())return void console.warn("Bounding box not valid.");const e=i.ori.getZaxis().scale(-I),t=i.tr.add(e),B=A.center().subtract(t);i.tr.addInPlace(B),s=A.size()/Math.tan(C)}else{const A=[];if(g.forEach((g=>{g.traverse((g=>{if(!(g instanceof ag))return!1;if(g.disableBoundingBox)return!1;if(g instanceof kI){const I=g.geomParam.value;if(I){const C=I.getBoundingBox();if(C.isValid()){const I=g.geomMatParam.value;return A.push(I.transformVec3(C.p0)),A.push(I.transformVec3(new o(C.p0.x,C.p0.y,C.p1.z))),A.push(I.transformVec3(new o(C.p0.x,C.p1.y,C.p0.z))),A.push(I.transformVec3(new o(C.p1.x,C.p0.y,C.p0.z))),A.push(I.transformVec3(new o(C.p0.x,C.p1.y,C.p1.z))),A.push(I.transformVec3(new o(C.p1.x,C.p0.y,C.p1.z))),A.push(I.transformVec3(new o(C.p1.x,C.p1.y,C.p0.z))),void A.push(I.transformVec3(C.p1))}}}if(0==g.getNumChildren()){const I=g.boundingBoxParam.value;if(I.isValid())return A.push(new o(I.p0.x,I.p0.y,I.p0.z)),A.push(new o(I.p0.x,I.p0.y,I.p1.z)),A.push(new o(I.p0.x,I.p1.y,I.p0.z)),A.push(new o(I.p1.x,I.p0.y,I.p0.z)),A.push(new o(I.p0.x,I.p1.y,I.p1.z)),A.push(new o(I.p1.x,I.p0.y,I.p1.z)),A.push(new o(I.p1.x,I.p1.y,I.p0.z)),void A.push(new o(I.p1.x,I.p1.y,I.p1.z))}}))})),0==A.length)return;const I=this.isOrthographic()?0:t/2,a=this.isOrthographic()?0:C/2,l={};l.XPos=new o(Math.cos(I),0,Math.sin(I)),l.XNeg=new o(-Math.cos(I),0,Math.sin(I)),l.YPos=new o(0,Math.cos(a),Math.sin(a)),l.YNeg=new o(0,-Math.cos(a),Math.sin(a)),l.ZPos=new o(0,0,1),l.ZNeg=new o(0,0,-1);const n={},d={};for(const A in l)n[A]=i.ori.rotateVec3(l[A]),d[A]=Number.NEGATIVE_INFINITY;const h=new o;A.forEach(((A,g)=>{if(!Number.isFinite(A.x)||!Number.isFinite(A.y)||!Number.isFinite(A.z))return;const I=A.subtract(i.tr);for(const A in l){const g=I.dot(n[A]);g>d[A]&&g!=Number.POSITIVE_INFINITY&&(d[A]=g)}h.addInPlace(A)}));for(const A in d)if(d[A]==Number.POSITIVE_INFINITY)return;h.scaleInPlace(1/A.length);let c=0;if(this.isOrthographic()){const A=new o(.5*(-d.XNeg+d.XPos),.5*(-d.YNeg+d.YPos),.5*(-d.ZNeg+d.ZPos)),g=d.ZNeg+d.ZPos;c=2*g,A.z=-d.ZNeg+c,i.tr.addInPlace(i.ori.rotateVec3(A)),s=2*g;const I=d.XPos+d.XNeg,C=d.YPos+d.YNeg;this.viewHeight=Math.max(C,I/e);const t=.1;this.viewHeight+=this.viewHeight*t}else{const A=t/2,g=C/2,I=new B(Math.cos(A)*d.XPos,Math.sin(A)*d.XPos),e=I.add(new B(Math.sin(A),-Math.cos(A))),a=new B(-Math.cos(A)*d.XNeg,Math.sin(A)*d.XNeg),l=a.add(new B(-Math.sin(A),-Math.cos(A))),n=B.intersectionOfLines(I,e,a,l),r=new B(Math.cos(g)*d.YPos,Math.sin(g)*d.YPos),G=r.add(new B(Math.sin(g),-Math.cos(g))),m=new B(-Math.cos(g)*d.YNeg,Math.sin(g)*d.YNeg),Q=m.add(new B(-Math.sin(g),-Math.cos(g))),E=B.intersectionOfLines(r,G,m,Q);if(null===n||null===E)return void console.warn("xP or yP === null");c=Math.max(n.y,E.y);const b=new o(n.x,E.x,c);i.tr.addInPlace(i.ori.rotateVec3(b)),s=h.distanceTo(i.tr);const Z=s*.1;i.tr.addInPlace(i.ori.rotateVec3(new o(0,0,Z))),c+=Z}if(this.adjustNearAndFarPlanesToFocalDist){d.ZPos-=c,d.ZNeg+=c;const A=d.ZNeg*this.nearDistFactor,g=-d.ZPos*this.farDistFactor;this.nearParam.value=A,this.farParam.value=g}}this.setFocalDistance(s),this.globalXfoParam.value=i,this.emit("movementFinished")}updateProjectionMatrix(A,g){const I=this.isOrthographicParam.value,C=this.fovParam.value,i=this.nearParam.value,e=this.farParam.value,t=new h;if(I>0){const A=.5*this.viewHeight,I=-A,C=A,B=A*-g,o=A*g;t.setOrthographicMatrix(B,o,I,C,i,e)}I<1&&A.setPerspectiveMatrix(C,g,i,e),1==I?A.setFromMat4(t):I>0&&A.set(r.lerp(A.m00,t.m00,I),r.lerp(A.m01,t.m01,I),r.lerp(A.m02,t.m02,I),r.lerp(A.m03,t.m03,I),r.lerp(A.m10,t.m10,I),r.lerp(A.m11,t.m11,I),r.lerp(A.m12,t.m12,I),r.lerp(A.m13,t.m13,I),r.lerp(A.m20,t.m20,I),r.lerp(A.m21,t.m21,I),r.lerp(A.m22,t.m22,I),r.lerp(A.m23,t.m23,I),r.lerp(A.m30,t.m30,I),r.lerp(A.m31,t.m31,I),r.lerp(A.m32,t.m32,I),r.lerp(A.m33,t.m33,I))}}e.register("Camera",IC);class CC extends eg{constructor(A,g){super(),this.bindXfo=new m,this.invBindXfo=new m,this.groupGlobalXfo=new Bg("GroupGlobalXfo"),this.groupTransformXfo=new Cg("GroupTransformXfo"),this.groupGlobalXfo.setParam(A),this.groupTransformXfo.setParam(g),this.addInput(this.groupGlobalXfo),this.addOutput(this.groupTransformXfo)}setBindXfo(A){this.bindXfo=A,this.invBindXfo=A.inverse(),this.setDirty()}evaluate(){if(this.invBindXfo){const A=this.groupGlobalXfo.getValue();this.groupTransformXfo.setClean(A.multiply(this.invBindXfo))}else this.groupTransformXfo.setClean(new m)}}class iC extends eg{constructor(A,g){super(),this.groupTransformXfo=new Bg("GroupTransformXfo"),this.memberGlobalXfo=new Cg("MemberGlobalXfo",KA.OP_READ_WRITE),this.groupTransformXfo.setParam(A),this.memberGlobalXfo.setParam(g),this.addInput(this.groupTransformXfo),this.addOutput(this.memberGlobalXfo),this._enabled=!0}disable(){this._enabled=!1,this.setDirty()}enable(){this._enabled=!0,this.setDirty()}evaluate(){const A=this.memberGlobalXfo.getValue();if(this._enabled){const g=this.groupTransformXfo.getValue();this.memberGlobalXfo.setClean(g.multiply(A))}else this.memberGlobalXfo.setClean(A)}}const eC={disabled:0,manual:1,first:2,average:3,globalOri:4};class tC extends xI{constructor(A=""){super(A),this.initialXfoModeParam=new DA("InitialXfoMode",eC.average,["manual","first","average","global"]),this.groupTransformParam=new PA("GroupTransform",new m),this.calculatingGroupXfo=!1,this.memberXfoOps=[],this.addParameter(this.initialXfoModeParam),this.initialXfoModeParam.on("valueChanged",(()=>{this.calcGroupXfo()})),this.addParameter(this.groupTransformParam),this.groupTransformOp=new CC(this.globalXfoParam,this.groupTransformParam)}static get INITIAL_XFO_MODES(){return eC}updateHighlight(){setTimeout((()=>{let A,g=!1;this.isSelected()&&(g=!0,A=this.getHighlight(),A.a=.2);const I="kinematicGroupItemHighlight"+this.getId();Array.from(this.itemsParam.value).forEach((C=>{C instanceof ag&&(g?C.addHighlight(I,A,!0):C.removeHighlight(I,!0))}))}),1)}setSelected(A){super.setSelected(A),this.updateHighlight()}calcGroupXfo(){const A=Array.from(this.itemsParam.value);if(0==A.length)return;this.calculatingGroupXfo=!0,this.memberXfoOps.forEach((A=>A.disable()));const g=this.initialXfoModeParam.value;let I;if(g==eC.manual)I=this.globalXfoParam.value;else if(g==eC.first&&A[0]instanceof ag)I=A[0].globalXfoParam.value;else if(g==eC.average){I=new m,I.ori.set(0,0,0,0);let g=0;A.forEach(((A,C)=>{if(A instanceof ag){const C=A.globalXfoParam.value;I.tr.addInPlace(C.tr),I.ori.addInPlace(C.ori),g++}})),I.tr.scaleInPlace(1/g),I.ori.normalizeInPlace()}else{if(g!=eC.globalOri)throw new Error("Invalid GROUP_XFO_MODES.");{I=new m;let g=0;A.forEach(((A,C)=>{if(A instanceof ag){const C=A.globalXfoParam.value;I.tr.addInPlace(C.tr),g++}})),I.tr.scaleInPlace(1/g)}}this.globalXfoParam.value=I,this.groupTransformOp.setBindXfo(I),this.memberXfoOps.forEach((A=>A.enable())),this.calculatingGroupXfo=!1}bindItem(A,g){if(super.bindItem(A,g),A instanceof ag){if(this.isSelected()){const g=this.getHighlight();g.a=.2;const I="kinematicGroupItemHighlight"+this.getId();A.addHighlight(I,g,!0)}{const I=A.globalXfoParam,C=new iC(this.groupTransformParam,I);this.memberXfoOps.splice(g,0,C),this.__itemsEventHandlers[g]||(this.__itemsEventHandlers[g]={});this.__itemsEventHandlers[g]["BoundingBox.valueChanged"]=A.boundingBoxParam.on("valueChanged",(A=>{this.setBoundingBoxDirty()}))}}}unbindItem(A,g){if(super.unbindItem(A,g),A instanceof ag){if(this.isSelected()){const g="kinematicGroupItemHighlight"+this.getId();A.removeHighlight(g,!0)}this.memberXfoOps[g].detach(),this.memberXfoOps.splice(g,1),this.setBoundingBoxDirty()}}addItem(A,g=!0){super.addItem(A,g),g&&this.calcGroupXfo()}removeItem(A,g=!0){super.removeItem(A,g),g&&this.calcGroupXfo()}setItems(A){super.setItems(A),this.calcGroupXfo()}clearItems(A=!0){super.clearItems(A),this.memberXfoOps=[],A&&this.calcGroupXfo()}loadDone(){this.calculatingGroupXfo=!0,this.calcGroupXfo(),this.calculatingGroupXfo=!1}clone(A){const g=new tC;return g.copyFrom(this,A),g}}e.register("KinematicGroup",tC);class BC extends xI{constructor(A){super(A),this.materialParam=new rg("Material"),this.__backupMaterials={},this.addParameter(this.materialParam),this.materialParam.on("valueChanged",(()=>{this.updateMaterial()}))}updateHighlight(){this.__updateHighlightHelper()}__updateHighlightHelper(){let A,g=!1;this.isSelected()&&(A=this.getHighlight(),g=!0,A.a=.2);const I="kinematicGroupItemHighlight"+this.getId();Array.from(this.itemsParam.value).forEach((C=>{C instanceof ag&&(g?C.addHighlight(I,A,!0):C.removeHighlight(I,!0))}))}setSelected(A){super.setSelected(A),this.updateHighlight()}updateOpacity(){super.updateOpacity(),Array.from(this.itemsParam.value).forEach((A=>{A instanceof ag&&(A.opacityParam.value=this.opacity)}))}updateMaterial(){this.updateMaterialHelper()}updateMaterialHelper(){const A=this.materialParam.value;Array.from(this.itemsParam.value).forEach((g=>{g.traverse((g=>{if(g instanceof LI){const I=g.materialParam;if(A){const g=I.value;g==A||g&&"LinesShader"==g.getShaderName()||(this.__backupMaterials[I.getId()]=g,I.value=A)}else this.__backupMaterials[I.getId()]&&(I.value=this.__backupMaterials[I.getId()])}}))}))}bindItem(A,g){if(super.bindItem(A,g),!(A instanceof ag))return;if(this.isSelected()){const g=this.getHighlight();g.a=.2;const I="materialGroupItemHighlight"+this.getId();A.addHighlight(I,g,!0)}const I=this.materialParam.value;I&&A.traverse((A=>{if(A instanceof LI){const g=A.materialParam;if(I){const A=g.value;A==I||A&&"LinesShader"==A.getShaderName()||(this.__backupMaterials[g.getId()]=A,g.value=I)}}}),!0),A.opacityParam.value=this.opacity}unbindItem(A,g){if(super.unbindItem(A,g),A instanceof ag&&this.isSelected()){const g="materialGroupItemHighlight"+this.getId();A.removeHighlight(g,!0)}}clone(A){const g=new BC(this.__name+"clone");return g.copyFrom(this,A),g}}e.register("MaterialGroup",BC);class oC extends eg{constructor(A,g){super(),this.groupGlobalXfo=new Bg("GroupGlobalXfo"),this.cuttingPlane=new Ig("CuttingPlane"),this.groupGlobalXfo.setParam(A),this.cuttingPlane.setParam(g),this.addInput(this.groupGlobalXfo),this.addOutput(this.cuttingPlane)}evaluate(){const A=this.groupGlobalXfo.getValue(),g=A.ori.getZaxis(),I=A.tr.dot(g);this.cuttingPlane.setClean(new s(g.x,g.y,g.z,-I))}}class sC extends xI{constructor(A=""){super(A),this.cutAwayEnabledParam=new fA("CutAwayEnabled",!1),this.cutPlaneParam=new UA("CutPlane",new s(1,0,0)),this.addParameter(this.cutAwayEnabledParam),this.addParameter(this.cutPlaneParam),this.cutPlaneOp=new oC(this.globalXfoParam,this.cutPlaneParam),this.cutAwayEnabledParam.on("valueChanged",(A=>{this.updateCutaway(A)})),this.cutPlaneParam.on("valueChanged",(A=>{this.updateCutaway(A)}));const g=new XI("plane","FlatSurfaceShader");g.getParameter("BaseColor").value=new l(1,1,1,.2);const I=new kI("PlaneGeom",new AI(1,1),g);I.setSelectable(!1),this.addChild(I);const C=new XI("border","LinesShader");C.getParameter("BaseColor").value=new l(1,0,0,1);const i=new kI("BorderGeom",new xg(1,1),C);i.setSelectable(!1),this.addChild(i)}updateCutaway(A){const g=this.cutAwayEnabledParam.value,I=this.cutPlaneParam.value,C=I.xyz,i=I.w;A instanceof LI?(A.setCutawayEnabled(g),A.setCutVector(C),A.setCutDist(i)):Array.from(this.itemsParam.value).forEach((A=>{A.traverse((A=>{A instanceof LI&&(A.setCutawayEnabled(g),A.setCutVector(C),A.setCutDist(i))}),!0)}))}bindItem(A,g){if(!(A instanceof ag))return;this.cutAwayEnabledParam.value&&this.updateCutaway(A);const I=new b;Array.from(this.itemsParam.value).forEach((A=>{A instanceof ag&&I.addBox3(A.boundingBoxParam.value)}));{const A=I.p1.x-I.p0.x,g=I.p1.y-I.p0.y,C=new m;C.sc.set(A,g,1),this.getChild(0).localXfoParam.value=C,this.getChild(1).localXfoParam.value=C}}unbindItem(A,g){A instanceof ag&&A.traverse((A=>{A instanceof LI&&A.setCutawayEnabled(!1)}),!0)}clone(A){const g=new sC;return g.copyFrom(this,A),g}}e.register("CuttingPlane",sC);class aC extends $I{constructor(A){super(A),this.cadfileVersion=new WA("0,0,0"),this.metadataLoaded=!1}clone(A){const g=new aC;return g.copyFrom(this,A),g}copyFrom(A,g){super.copyFrom(A,g),A.loaded||A.once("geomsLoaded",(A=>{this.emit("geomsLoaded",A)}))}getVersion(){return this.cadfileVersion}readRootLevelBinary(A,g){g.versions={},g.versions["zea-cad"]=new WA(A.loadStr()),g.sdk=A.loadStr(),this.sdk=g.sdk,this.cadfileVersion=g.versions["zea-cad"],super.readBinary(A,g)}load(A,I=new AC){return this.loadPromise||(this.loadPromise=new Promise(((C,i)=>{const e=A.lastIndexOf("/")>-1?A.substring(0,A.lastIndexOf("/"))+"/":"",t=A.lastIndexOf("/")>-1?A.substring(A.lastIndexOf("/")+1):"",B=t.substring(0,t.lastIndexOf("."));this.url=A,(I=I.clone()).assetItem=this,I.url=A,I.folder=e,I.on("done",(()=>{this.loaded=!0,C(),this.emit("loaded");const A=[];this.geomLibrary.isLoaded()||A.push(new Promise((A=>this.geomLibrary.once("loaded",A)))),this.traverse((A=>{A instanceof aC&&!A.geomLibrary.isLoaded()&&new Promise((g=>A.once("geomsLoaded",g)))})),Promise.all(A).then((()=>{this.emit("geomsLoaded")}))})),I.incrementAsync(),FA.incrementWorkload(1),this.geomLibrary.once("loaded",(()=>{FA.incrementWorkDone(1)})),FA.loadFile("archive",A).then((C=>{if(!C.tree2&&!C.tree)return console.error("Corrupt zcad file. Missing 'tree':",A),FA.incrementWorkDone(1),void I.decrementAsync();const i=new YA((C.tree2||C.tree).buffer,0,g.isMobileDevice),o=this.getName();if(this.readRootLevelBinary(i,I),""!=o&&this.setName(o),I.versions["zea-cad"]=this.getVersion(),I.versions["zea-engine"]=this.getEngineDataVersion(),C.geoms)this.geomLibrary.readBinaryBuffer(t,C.geoms.buffer,I),C.geomsdata&&(this.geomLibrary.loadMetadata(C.geomsdata,I),this.metadataLoaded=!0);else if(C["geomLibrary.json"]){const g=JSON.parse(new TextDecoder("utf-8").decode(C["geomLibrary.json"])),i=e+B;0==g.numGeomFiles?(console.error("Corrupt zcad file. Missing 'geoms':",A),FA.incrementWorkDone(1)):this.geomLibrary.loadGeomFilesStream(g,i,I)}else FA.incrementWorkDone(1);I.decrementAsync()}),(A=>{I.decrementAsync(),FA.incrementWorkDone(1),this.emit("error",A),i(A)}))}))),this.loadPromise}loadMetadata(A=""){return this.metadataLoaded?Promise.resolve():(this.metadataLoadPromise||(this.metadataLoadPromise=new Promise(((g,I)=>{if(this.metadataLoaded&&g(),""==A){const g=this.url,I=g.substring(0,g.lastIndexOf("."));A=I+".zmetadata"}console.log(A),FA.incrementWorkload(),FA.loadFile("archive",A).then((A=>{const I=new AC;I.versions["zea-cad"]=this.getVersion(),I.versions["zea-engine"]=this.getEngineDataVersion(),this.geomLibrary.loadMetadata(A.geomsdata,I),FA.incrementWorkDone(1),this.metadataLoaded=!0,g()}),(A=>{FA.incrementWorkDone(1),this.emit("error",A),I(A)}))}))),this.metadataLoadPromise)}}e.register("CADAsset",aC);class lC extends ag{constructor(A){super(A)}clone(A){const g=new lC;return g.copyFrom(this,A),g}}e.register("CADAssembly",lC);class nC extends ag{constructor(A){super(A)}clone(A){const g=new nC;return g.copyFrom(this,A),g}}e.register("CADPart",nC);class dC extends kI{constructor(A){super(A),this.shattered=!1}setShatterState(A){this.shattered!=A&&(this.shattered=A,this.emit("shatterStateChanged",new x(A)))}clone(A){const g=new dC;return g.copyFrom(this,A),g}readBinary(A,g){if(g.versions["zea-engine"].compare([3,9,0])<0){if(LI.prototype.readBinary.call(this,A,g),A.loadSInt32(),g.versions["zea-cad"].compare([0,0,4])<0){const I=A.loadStr();let C=g.assetItem.getMaterialLibrary().getMaterial(I,!1);C||(C=new XI(I,"SimpleSurfaceShader"),C.getParameter("BaseColor").setValue(l.random(.25)),g.assetItem.getMaterialLibrary().addMaterial(C)),this.materialParam.setValue(C)}if(g.versions["zea-cad"].compare([0,0,2])>=0&&g.versions["zea-cad"].compare([0,0,4])<0){this.__layers=A.loadStrArray();for(const A of this.__layers)g.addGeomToLayer(this,A)}}else super.readBinary(A,g)}}e.register("CADBody",dC);const hC=new jg(1,1,1);let cC=null;class rC extends kI{addHighlight(A,g,I=!1){}removeHighlight(A,g=!1){}}class GC extends ag{constructor(A){super(A),this.materialMapping={}}clone(A){const g=new GC;return g.copyFrom(this,A),g}setSelected(A){super.setSelected(A),A?this.activate():this.deactivate()}activate(){}deactivate(){}addHighlight(A,g,I=!1){if(super.addHighlight(A,g,!1),I){const A=g.clone();A.a=1;const I={};this.traverse((g=>{if(g instanceof rC)return!1;if(g instanceof kI){const C=g.materialParam.value;if(this.materialMapping[g.getId()]=C,!(C.getId()in I)){const i=C.clone();if(i.hasParameter("BaseColor")){const g=i.getParameter("BaseColor");g instanceof Qg&&(g.colorSpace=pA.Gamma),g.setValue(A)}if(i.hasParameter("EdgeColor")){const g=i.getParameter("EdgeColor");g instanceof Qg&&(g.colorSpace=pA.Gamma),g.setValue(A)}i.hasParameter("Overlay")&&i.getParameter("Overlay").setValue(.85),i.__isOpaque=!1,g.materialParam.value=i,I[C.getId()]=i}g.materialParam.value=I[C.getId()]}}))}const C=this.getOwner().getOwner().getOwner();if(C){const I={},i={},e=this.getParameter("LinkedEntities");if(e){e.getValue().forEach(((e,t)=>{if(""==e)return;const B=e.split(", "),o=B.pop();try{const e=C.resolvePath(B);if(e&&e instanceof dC)if(0==e.getNumChildren())e.setShatterState(!0),I[e.getId()]||(I[e.getId()]=e,i[e.getId()]=[]),i[e.getId()].push(o);else{const I=e.getChildByName(o);I&&I.addHighlight(A,g,!0)}else console.log("linkedEntity.addHighlight(name, color, true):",B)}catch(A){console.log(t+":"+A.message)}}));for(let C in I){const e=I[C],t=i[C];e.addHighlight(A+":"+t.toString(),g,!0)}}}}removeHighlight(A,g=!1){super.removeHighlight(A,!1),g&&this.traverse((A=>{A instanceof kI&&A.getId()in this.materialMapping&&(A.materialParam.value=this.materialMapping[A.getId()],delete this.materialMapping[A.getId()])}));const I=this.getOwner().getOwner().getOwner();if(I){const g={},C={},i=this.getParameter("LinkedEntities");if(i){i.getValue().forEach((i=>{if(""==i)return;const e=i.split(", "),t=e.pop();try{const i=I.resolvePath(e);if(i&&i instanceof dC)if(0==i.getNumChildren())i.setShatterState(!1),g[i.getId()]||(g[i.getId()]=i,C[i.getId()]=[]),C[i.getId()].push(t);else{const g=i.getChildByName(t);g&&g.removeHighlight(A,!0)}else console.log("linkedEntity.addHighlight(name, color, true):failed")}catch(A){console.log(A.message)}}));for(let I in g){const i=g[I],e=C[I];i.removeHighlight(A+":"+e.toString(),!0)}}}}readBinary(A,g){super.readBinary(A,g),this.traverse((A=>{if(A instanceof kI){const g=A.materialParam.value;"StandardSurfaceShader"==g.getShaderName()&&g.setShaderName("FlatSurfaceShader"),A.__opacity=.99}})),g.assetItem.getGeometryLibrary().once("loaded",(()=>{this.traverse((A=>{if(A.getName().startsWith("Text")){const g=[];return A.traverse((A=>{if(A instanceof kI){const I=A.geomParam.value.getBoundingBox();cC||(cC=new YI("plane"),cC.baseColorParam.value=new l(1,1,0,.001),cC.overlayParam.value=-.001);const C=new rC("plane",hC,cC),i=A.localXfoParam.value.multiply(A.geomOffsetXfoParam.value);i.tr.addInPlace(I.center()),i.sc.multiplyInPlace(I.diagonal()),C.localXfoParam.value=i,g.push(C)}}),!1),g.forEach((g=>A.addChild(g,!1))),!1}}),!1)}))}}e.register("PMIItem",GC);class mC extends GC{constructor(A){super(A),this.camera=null}clone(A){const g=new mC;return g.copyFrom(this,A),g}activate(){super.activate();let A=[];this.hasParameter("GraphicalElements")&&(A=this.getParameter("GraphicalElements").getValue());const g=(()=>{let A=this;for(;A&&!(A instanceof aC);)A=A.getParentItem();return A instanceof aC?A:null})(),I=this.getParentItem().getParentItem(),C=I.getParentItem();if(C){const g=[];I.traverse((A=>{A instanceof mC||A instanceof GC&&g.push(A)})),g.forEach((g=>{const I=A.includes(g.getName());g.setVisible(I)}))}if(this.camera){const A=this.localXfoParam.value.clone(),I=this.getParameter("TargetPoint").getValue().clone(),C=this.getParameter("CameraType").getValue();A.tr.scaleInPlace(g.unitsScale),I.scaleInPlace(g.unitsScale);const i=A.tr.distanceTo(I);if(A.sc.set(1,1,1),this.camera.globalXfoParam.value=A,this.camera.setFocalDistance(i),"Camera_Orthographic"==C&&(this.camera.setIsOrthographic(1,0),this.hasParameter("CameraZoom")&&g)){const A=1/this.getParameter("CameraZoom").getValue()*g.unitsScale*2;this.camera.setFrustumHeight(A)}}if(this.hasParameter("ClippingPlaneOrigin")){const A=this.getParameter("ClippingPlaneOrigin").getValue(),I=this.getParameter("ClippingPlaneNormal").getValue(),i=!0,e=-A.dot(I)*g.unitsScale;C.traverse((A=>{if(A instanceof GC)return!1;A instanceof kI&&(A.setCutawayEnabled(i),A.setCutVector(I),A.setCutDist(e))}))}else C.traverse((A=>{if(A instanceof GC)return!1;A instanceof kI&&A.setCutawayEnabled(!1)}))}deactivate(){super.deactivate()}readBinary(A,g){super.readBinary(A,g),g.camera&&(this.camera=g.camera)}}e.register("PMIView",mC);class QC extends aC{constructor(A){super(A)}clone(A){const g=new QC;return g.copyFrom(this,A),g}readBinary(A,g){A.loadStr();const I=A.loadStr();this.setName(I);let C=A.loadStr();const i=new m;if(g.versions["zea-cad"].compare([3,6,2])>0?(i.tr=A.loadFloat32Vec3(),i.ori=A.loadFloat32Quat(),this.localXfoParam.value=i):""==I&&this.setName(C),g.incrementAsync(),g.xrefs[C]){const A=g.xrefs[C],e=()=>{this.copyFrom(A),this.setName(I),this.localXfoParam.value=i,this.loaded=!0,this.emit("loaded"),g.decrementAsync()};A.loaded?e():A.on("loaded",e)}else{let A;g.resources?g.resources[C]?A=g.resources[C]:(C.includes("/")?C=C.slice(C.lastIndexOf("/")+1):C.includes("\\")&&(C=C.slice(C.lastIndexOf("\\")+1)),g.resources[C]?A=g.resources[C]:g.xrefLoadCallback&&(A=g.xrefLoadCallback.call(g,C,this))):g.xrefLoadCallback?A=g.xrefLoadCallback.call(g,C,this):(C.includes("/")?C=C.slice(C.lastIndexOf("/")+1):C.includes("\\")&&(C=C.slice(C.lastIndexOf("\\")+1)),A=g.folder+C+".zcad"),A?(g.xrefs[C]=this,this.load(A,new AC(g)).then((()=>{g.decrementAsync()}),(()=>{g.decrementAsync()}))):(g.decrementAsync(),console.warn(`While Loading ${this.getPath()} unable to resolve ${C}`))}}}e.register("XRef",QC);const EC={OPAQUE:1,TRANSPARENT:2,OVERLAY:4};class bC extends nA{constructor(){super(),this.enabled=!0,this.passIndex=-1,this.__gl=null,this.renderer=null,this.__renderer=null,this.enabledParam=new fA("Enabled",!0),this.enabled=!0,this.passIndex=0,this.addParameter(this.enabledParam),this.enabledParam.on("valueChanged",(()=>this.enabled=this.enabledParam.value))}parameterValueChanged(A){super.parameterValueChanged(A),this.renderer&&this.renderer.requestRedraw()}init(A,g){if(null==g)throw new Error("Missing constructor argument.");this.__gl=A.gl,this.renderer=A,this.__renderer=A,this.passIndex=g}setPassIndex(A){this.passIndex=A}getPassType(){return EC.OPAQUE}itemAddedToScene(A,g){throw Error(`${this.constructor.name} must implement itemAddedToScene and itemRemovedFromScene`)}itemRemovedFromScene(A,g){throw Error(`${this.constructor.name} must implement itemAddedToScene and itemRemovedFromScene`)}startPresenting(){}stopPresenting(){}draw(A){throw Error("draw not implemented on GLPass")}drawHighlightedGeoms(A){}drawGeomData(A){}getGeomItemAndDist(A){throw Error("getGeomItemAndDist not implemented on GLPass")}}class ZC extends ag{constructor(A=5,g=50,I=new l("#DCDCDC")){super("GridTree"),this.disableBoundingBox=!0,this.setSelectable(!1);const C=new KI("gridMaterial");C.baseColorParam.value=I,C.overlayParam.value=0;const i=new Pg(A,A,g,g,!0),e=new kI("GridItem",i,C);e.setSelectable(!1),this.addChild(e,!1);const t=new Yg;t.setNumVertices(2),t.setNumSegments(1),t.setSegmentVertexIndices(0,0,1);const B=t.getVertexAttribute("positions");B.getValueRef(0).set(-.5*A,0,0),B.getValueRef(1).set(.5*A,0,0);const s=new KI("gridXAxisMaterial");s.baseColorParam.value=new l(I.luminance(),0,0),s.overlayParam.value=0;const a=new kI("xAxisLine",t,s);a.setSelectable(!1),this.addChild(a,!1);const n=new KI("gridYAxisMaterial");n.baseColorParam.value=new l(0,I.luminance(),0),n.overlayParam.value=0;const d=new kI("yAxisLine",t,n);d.setSelectable(!1);const h=new m;h.ori.setFromAxisAndAngle(new o(0,0,1),.5*Math.PI),d.geomOffsetXfoParam.value=h,this.addChild(d,!1)}_cleanBoundingBox(){return new b}}e.register("GridTreeItem",ZC);const yC=new l("#DCDCDC");class uC{constructor(){this.envMapParam=new OA("EnvMap"),this.displayEnvMapParam=new fA("Display EnvMap",!1),this.envMapLODParam=new JA("EnvMapLOD",0),this.root=new ag("root")}getRoot(){return this.root}getResourceLoader(){return FA}setEnvMap(A){this.envMapParam.value=A}setupGrid(A=5,g=50,I=yC){const C=new ZC(A,g,I);return this.root.addChild(C,!1),C}}class RC extends $I{constructor(A){super(A),this.geomLibrary.on("loaded",(()=>{this.emit("geomsLoaded")}))}readBinary(A,g){g.versions["zea-engine"]||(g.versions["zea-mesh"]=new WA(A.loadStr()));const I=A.loadUInt32();return super.readBinary(A,g),g.versions["zea-engine"].compare([2,1,0])<0&&A.loadFloat32Vec2(),this.geomLibrary.setNumGeoms(A.loadUInt32()),I}load(A,I=new AC){return new Promise(((C,i)=>{const e=A.lastIndexOf("/")>-1?A.substring(0,A.lastIndexOf("/"))+"/":"",t=A.lastIndexOf("/")>-1?A.substring(A.lastIndexOf("/")+1):"",B=t.substring(0,t.lastIndexOf("."));let o=0;I.assetItem=this,I.url=A,I.folder=e,FA.incrementWorkload(1),this.geomLibrary.on("loaded",(()=>{FA.incrementWorkDone(1)})),FA.loadFile("archive",A).then((A=>{let i;if(A.tree2)i=new YA(A.tree2.buffer,0,g.isMobileDevice);else{const C=A.tree?A.tree:A[Object.keys(A)[0]];i=new YA(C.buffer,0,g.isMobileDevice),I.versions["zea-engine"]=new WA}if(o=this.readBinary(i,I),this.loaded=!0,this.emit("loaded"),0==o&&A.geoms)this.geomLibrary.readBinaryBuffer(t,A.geoms.buffer,I);else{const A=e+B,g={numGeomsPerFile:o,numGeoms:this.geomLibrary.getNumGeoms()};this.geomLibrary.loadGeomFilesStream(g,A,I)}C()}),(A=>{this.emit("error",A),i(A)}))}))}}e.register("VLAAsset",RC);class VC extends nA{constructor(){super(),this.__activated=!1}activateTool(){if(this.__activated)throw new Error("Tool already activate");this.__activated=!0,this.emit("activatedChanged",{activated:this.__activated})}deactivateTool(){this.__activated=!1,this.emit("activatedChanged",{activated:this.__activated})}onPointerDown(A){}onPointerMove(A){}onPointerUp(A){}onPointerDoublePress(A){}onPointerEnter(A){}onPointerLeave(A){}onWheel(A){}onKeyDown(A){}onKeyUp(A){}onTouchCancel(A){}}const FC={pan:0,dolly:1,focussing:2,look:3,turntable:4,tumbler:5,trackball:6};class SC extends VC{constructor(A){super(),this.orbitAroundCursor=!1,this.zoomTowardGeomUnderCursor=!1,this.aimFocusOnTouchTap=2,this.aimFocusOnMouseClick=2,this.enabledWASDWalkMode=!1,this.defaultManipulationState=FC.turntable,this.pointerDown=!1,this.dragging=0,this.keyboardMovement=!1,this.keysPressed=[],this.velocity=new o,this.prevVelocityIntegrationTime=-1,this.ongoingTouches={},this.mouseWheelMovementDist=0,this.mouseWheelZoomCount=0,this.mouseWheelZoomId=-1,this.orbitRateParam=new JA("OrbitRate",g.isMobileDevice?.5:1),this.dollySpeedParam=new JA("DollySpeed",.02),this.mouseWheelDollySpeedParam=new JA("MouseWheelDollySpeed",.1),this.walkSpeedParam=new JA("WalkSpeed",5),this.walkModeCollisionDetection=new fA("WalkModeCollisionDetection",!1),this.appData=A,this.defaultManipulationState=FC.turntable,this.manipulationState=this.defaultManipulationState,this.addParameter(this.orbitRateParam),this.addParameter(this.dollySpeedParam),this.addParameter(this.mouseWheelDollySpeedParam),this.addParameter(this.walkSpeedParam),this.addParameter(this.walkModeCollisionDetection)}activateTool(){super.activateTool(),this.appData&&this.appData.renderer&&(this.prevCursor=this.appData.renderer.getGLCanvas().style.cursor,this.appData.renderer.getGLCanvas().style.cursor="cursor")}deactivateTool(){super.deactivateTool(),this.appData&&this.appData.renderer&&(this.appData.renderer.getGLCanvas().style.cursor=this.prevCursor)}setDefaultManipulationMode(A){if(this.defaultManipulationState="string"==typeof A?FC[A]:A,!Object.values(FC).includes(this.defaultManipulationState))throw new Error("Invalid Camera Manipulation Mode. Must be one of "+Object.keys(FC))}look(A,g){const{viewport:I}=A,C=I.getCamera(),i=this.orbitRateParam.value,e=C.globalXfoParam.value,t=new c;t.rotateZ(g.x/I.getWidth()*Math.PI*i),e.ori=t.multiply(e.ori);const B=new c;B.rotateX(g.y/I.getHeight()*Math.PI*i),e.ori.multiplyInPlace(B),C.globalXfoParam.value=e}turntable(A,g){const{viewport:I}=A,C=I.getCamera(),i=this.orbitRateParam.value,e=C.globalXfoParam.value,t=e.ori.inverse().rotateVec3(e.tr.subtract(this.orbitTarget)),B=new c;B.rotateZ(g.x/I.getWidth()*2*Math.PI*-i),e.ori=B.multiply(e.ori);const o=new c;o.rotateX(g.y/I.getHeight()*Math.PI*-i),e.ori.multiplyInPlace(o),e.tr=this.orbitTarget.add(e.ori.rotateVec3(t)),C.globalXfoParam.value=e}tumbler(A,g){const{viewport:I}=A,C=I.getCamera(),i=this.orbitRateParam.value,e=C.globalXfoParam.value,t=e.ori.getXaxis(),B=e.ori.getYaxis(),o=e.ori.getZaxis(),s=t.scale(-g.x).add(B.scale(g.y)).cross(o);s.normalizeInPlace();const a=g.length(),l=e.ori.inverse().rotateVec3(e.tr.subtract(this.orbitTarget)),n=new c;n.setFromAxisAndAngle(s,a/I.getWidth()*Math.PI*-i),e.ori=n.multiply(e.ori),e.tr=this.orbitTarget.add(e.ori.rotateVec3(l)),C.globalXfoParam.value=e}trackball(A,g){const{viewport:I}=A,C=I.getCamera(),i=this.orbitRateParam.value,e=C.globalXfoParam.value,t=e.ori.getXaxis(),B=e.ori.getYaxis(),o=e.ori.getZaxis(),s=t.scale(-g.x).add(B.scale(g.y)).cross(o);s.normalizeInPlace();const a=g.length(),l=e.ori.inverse().rotateVec3(e.tr.subtract(this.orbitTarget)),n=new c;n.setFromAxisAndAngle(s,a/I.getWidth()*Math.PI*-i),e.ori=n.multiply(e.ori),e.tr=this.orbitTarget.add(e.ori.rotateVec3(l)),C.globalXfoParam.value=e}pan(A,g){const{viewport:I}=A,C=I.getCamera(),i=new m,e=new o(1,0,0),t=new o(0,1,0);if(C.isOrthographic()){const A=C.getFrustumHeight(),B=A*(I.getWidth()/I.getHeight());i.tr=e.scale(-g.x/I.getWidth()*B),i.tr.addInPlace(t.scale(g.y/I.getHeight()*A))}else{const A=C.getFocalDistance(),B=C.getFov(),o=2*A*Math.tan(.5*B),s=o*(I.getWidth()/I.getHeight());i.tr=e.scale(-g.x/I.getWidth()*s),i.tr.addInPlace(t.scale(g.y/I.getHeight()*o))}const B=C.globalXfoParam.value;C.globalXfoParam.value=B.multiply(i)}dolly(A,g){const{viewport:I}=A,C=I.getCamera(),i=C.getFocalDistance(),e=()=>{const A=g.y*this.dollySpeedParam.value*i,I=new m;I.tr.set(0,0,A);const e=C.globalXfoParam.value;C.globalXfoParam.value=e.multiply(I)},t=()=>{const A=g.y*this.dollySpeedParam.value,I=C.getFrustumHeight(),i=I*A;C.setFrustumHeight(I+i)};C.isOrthographic()?t():e()}initDrag(A){const{pointerPos:g}=A;A.setCapture(this),this.pointerDown=!0;const I=A.viewport.getCamera(),C=I.globalXfoParam.value;if(this.orbitAroundCursor)if(null!=A.intersectionData&&this.orbitAroundCursor){this.orbitTarget=A.intersectionData.intersectionPos;const g=C.inverse().transformVec3(A.intersectionData.intersectionPos);I.setFocalDistance(-g.z)}else A.pointerRay?this.orbitTarget=A.pointerRay.pointAtDist(I.getFocalDistance()):this.orbitTarget=C.tr.add(C.ori.getZaxis().scale(-I.getFocalDistance()));else this.orbitTarget=C.tr.add(C.ori.getZaxis().scale(-I.getFocalDistance()));this.prevPointerPos=g,this.dragging=1}endDrag(A){A.getCapture()==this&&A.releaseCapture(),this.dragging=0,this.pointerDown=!1}aimFocus(A,g,I=-1,C=400){this.focusIntervalId&&clearInterval(this.focusIntervalId);const i=Math.round(C/20),e=this.manipulationState;let t=0;const B=()=>{const C=A.globalXfoParam.value,o=A.getFocalDistance(),s=g.subtract(C.tr),a=s.normalizeInPlace(),l=C.clone();if(e==FC.turntable||e==FC.look){{const A=C.ori.getZaxis().clone();A.z=0;const g=s.negate();g.z=0;const I=new c;I.setFrom2Vectors(A,g),l.ori=I.multiply(l.ori)}{const A=C.ori.getXaxis().clone(),g=C.ori.getZaxis().clone(),I=s.negate();I.subtractInPlace(A.scale(I.dot(A))),I.normalizeInPlace();const i=new c;g.cross(I).dot(A)>0?i.rotateX(g.angleTo(I)):i.rotateX(-g.angleTo(I)),l.ori=l.ori.multiply(i)}{const A=l.ori.getXaxis().clone(),g=A.clone();g.z=0,g.normalizeInPlace();const I=new c;I.setFrom2Vectors(A,g),l.ori=I.multiply(l.ori)}}else{const A=C.ori.getZaxis().clone(),g=s.negate(),I=new c;I.setFrom2Vectors(A,g),l.ori=I.multiply(l.ori)}const n=Math.pow(t/i,2),d=C.clone();if(d.ori=C.ori.lerp(l.ori,n),I>0){const A=s.scale(a-I);d.tr.addInPlace(A.scale(n))}A.setFocalDistance(o+(a-o)*n),A.globalXfoParam.value=d,t++,t<=i?this.focusIntervalId=setTimeout(B,20):(this.focusIntervalId=void 0,this.emit("movementFinished"),A.emit("movementFinished"))};B()}orientPointOfView(A,g,I,C=0,i=400){this.focusIntervalId&&clearInterval(this.focusIntervalId);const e=Math.round(i/20);let t=0;const B=()=>{const i=A.globalXfoParam.value,o=A.getTargetPosition(),s=Math.pow(t/e,2),a=g.subtract(i.tr),l=a.normalizeInPlace(),n=a.scale(l-C),d=i.tr.add(n.scale(s)),h=o.lerp(I,s);A.setPositionAndTarget(d,h),t++,t<=e?this.focusIntervalId=setTimeout(B,20):(this.focusIntervalId=void 0,this.emit("movementFinished"),A.emit("movementFinished"))};B()}onPointerDoublePress(A){const g=g=>{const I=A.viewport.getCamera(),C=I.globalXfoParam.value.tr.add(g.dir.scale(A.intersectionData.dist));this.aimFocus(I,C),A.aimTarget=C,A.aimDistance=A.intersectionData.dist,this.emit("aimingFocus",A),I.emit("aimingFocus",A),A.stopPropagation()};if(A.intersectionData&&this.aimFocusOnMouseClick){if(A.pointerType===q.mouse&&2==this.aimFocusOnMouseClick){const I=A;g(I.pointerRay),I.preventDefault()}if(A.pointerType===q.touch&&2==this.aimFocusOnTouchTap){g(A.pointerRay)}}}onPointerDown(A){if(A.pointerType===q.mouse){1==this.dragging&&this.endDrag(A),this.initDrag(A);const g=A;2==g.button?this.manipulationState=FC.pan:g.ctrlKey&&g.altKey?this.manipulationState=FC.dolly:g.ctrlKey||2==g.button?this.manipulationState=FC.look:this.manipulationState=this.defaultManipulationState,g.preventDefault()}else A.pointerType===q.touch&&this._onTouchStart(A);A.stopPropagation()}onPointerMove(A){0!=this.dragging&&(A.pointerType===q.mouse&&this._onMouseMove(A),A.pointerType===q.touch&&this._onTouchMove(A),this.dragging=2,A.stopPropagation())}_onMouseMove(A){if(!this.pointerDown)return;const g=A.pointerPos,I=g.subtract(this.prevPointerPos);switch(this.manipulationState){case FC.turntable:this.turntable(A,I);break;case FC.tumbler:this.tumbler(A,I);break;case FC.trackball:this.trackball(A,I);break;case FC.look:this.look(A,I);break;case FC.pan:this.pan(A,g.subtract(this.prevPointerPos));break;case FC.dolly:this.dolly(A,I)}this.prevPointerPos=g,A.preventDefault()}_onTouchMove(A){const g=A.touches;if(1==g.length){const I=g[0],C=new B(I.clientX,I.clientY),i=this.ongoingTouches[I.identifier];if(!i)return;const e=C.subtract(i.pos);switch(this.defaultManipulationState){case FC.look:e.scaleInPlace(6),this.look(A,e);break;case FC.turntable:this.turntable(A,e);break;case FC.tumbler:this.tumbler(A,e);break;case FC.trackball:this.trackball(A,e)}i.pos=C}else if(2==g.length){const I=g[0],C=this.ongoingTouches[I.identifier],i=g[1],e=this.ongoingTouches[i.identifier];if(!C||!e)return;const t=new B(I.clientX,I.clientY),s=new B(i.clientX,i.clientY),a=e.pos.subtract(C.pos).length()-s.subtract(t).length(),l=t.subtract(C.pos),n=s.subtract(e.pos),d=l.add(n);d.scaleInPlace(.5);const h=.002*a,{viewport:r}=A,G=r.getCamera(),Q=G.getFocalDistance(),E=G.getFov(),b=new o(1,0,0),Z=new o(0,1,0),y=2*Q*Math.tan(.5*E),u=y*(r.getWidth()/r.getHeight()),R=new m;R.tr=b.scale(-d.x/r.getWidth()*u),R.tr.addInPlace(Z.scale(d.y/r.getHeight()*y));const V=h*Q;switch(G.setFocalDistance(Q+V),R.tr.z+=V,this.defaultManipulationState){case FC.tumbler:case FC.trackball:const A=e.pos.subtract(C.pos),g=s.subtract(t);let I=A.normalize().angleTo(g.normalize());A.cross(g)<0&&(I=-I);const i=new c;i.rotateZ(I),R.ori.multiplyInPlace(i)}const F=G.globalXfoParam.value;G.globalXfoParam.value=F.multiply(R),C.pos=t,e.pos=s}}onPointerUp(A){if(1==this.dragging){if(this.endDrag(A),A.intersectionData&&(A.pointerType===q.mouse&&1==this.aimFocusOnMouseClick||A.pointerType===q.touch&&1==this.aimFocusOnTouchTap)){const g=A.viewport.getCamera(),I=g.globalXfoParam.value,C=(A.pointerType,A.pointerRay),i=I.tr.add(C.dir.scale(A.intersectionData.dist));this.aimFocus(g,i),A.aimTarget=i,A.aimDistance=A.intersectionData.dist,this.emit("aimingFocus",A),g.emit("aimingFocus",A),A.stopPropagation(),A.pointerType===q.mouse&&A.preventDefault()}}else if(2==this.dragging){if(A.pointerType===q.mouse){this.endDrag(A),this.emit("movementFinished");A.viewport.getCamera().emit("movementFinished")}else if(A.pointerType===q.touch){const g=A,{changedTouches:I,touches:C}=g;for(let A=0;A<I.length;A++)this.__endTouch(I[A]);0==Object.keys(this.ongoingTouches).length?this.endDrag(A):C.length||(this.endDrag(A),this.ongoingTouches={}),g.preventDefault()}A.stopPropagation()}}onPointerLeave(A){this.keysPressed.length>0&&(this.keysPressed=[],this.velocity.set(0,0,0),this.keyboardMovement=!1)}onWheel(A){const g=A.viewport.getCamera(),I=this.mouseWheelDollySpeedParam.value,C=A.shiftKey?.1:.5,i=g.globalXfoParam.value;let e;if(!g.isOrthographic())if(this.zoomTowardGeomUnderCursor)if(null!=A.intersectionData){e=i.tr.subtract(A.intersectionData.intersectionPos),e.normalizeInPlace();const I=i.inverse().transformVec3(A.intersectionData.intersectionPos);g.setFocalDistance(-I.z)}else{const I=A.pointerRay.pointAtDist(g.getFocalDistance());e=i.tr.subtract(I),e.normalizeInPlace()}else e=g.globalXfoParam.value.ori.getZaxis();const t=A.deltaY<0?-1:1,B=()=>{const A=g.getFocalDistance(),I=A*this.mouseWheelMovementDist;i.tr.addInPlace(e.scale(I)),g.setFocalDistance(A+I),g.globalXfoParam.value=i,this.mouseWheelZoomCount++,this.mouseWheelZoomCount<6?this.mouseWheelZoomId=window.setTimeout(B,10):(this.mouseWheelZoomId=-1,this.emit("movementFinished"),g.emit("movementFinished"))},o=()=>{const A=50*this.mouseWheelMovementDist;(new m).tr.set(0,0,A),i.tr.addInPlace(e.scale(A)),g.globalXfoParam.value=i},s=()=>{const I=g.getFrustumHeight(),C=I*this.mouseWheelMovementDist;if(g.setFrustumHeight(I+C),A.intersectionData&&this.zoomTowardGeomUnderCursor){const e=i.tr.subtract(A.intersectionData.intersectionPos),t=i.ori.getZaxis();e.subtractInPlace(t.scale(e.dot(t))),i.tr.addInPlace(e.scale(C/(I+C))),g.globalXfoParam.value=i}this.mouseWheelZoomCount++,this.mouseWheelZoomCount<6?this.mouseWheelZoomId=window.setTimeout(s,10):(this.mouseWheelZoomId=-1,this.emit("movementFinished"),g.emit("movementFinished"))};this.mouseWheelZoomId>0?(this.mouseWheelMovementDist+=t*I*C*.5/6,this.mouseWheelZoomCount=0):(this.mouseWheelMovementDist=t*I*C/6,this.mouseWheelZoomCount=0,g.isOrthographic()?s():A.ctrlKey?o():B()),A.preventDefault(),A.stopPropagation()}integrateVelocityChange(A){const{viewport:g}=A,I=g.getCamera(),C=performance.now();if(this.prevVelocityIntegrationTime>0){const A=(C-this.prevVelocityIntegrationTime)/1e3,i=this.walkSpeedParam.value;if(i>0){const C=new m;C.tr=this.velocity.normalize().scale(i*A);const e=I.globalXfoParam.value.multiply(C);if(this.walkModeCollisionDetection.value){const A=1.5,I=1.5,C=.5,i=new m(e.tr),t=new G(e.tr,new o(0,0,-1)),B=g.getRenderer().raycastCluster(i,t,I,C,EC.OPAQUE);if(B.length>0){let g=0;B.forEach((A=>{g+=A.dist})),g/=B.length,e.tr=t.start.add(t.dir.scale(g-A))}}I.globalXfoParam.value=e}}this.prevVelocityIntegrationTime=C}onKeyDown(A){if(!this.enabledWASDWalkMode)return;const g=A.key.toLowerCase();if(!this.keysPressed.includes(g)){switch(g){case"w":this.velocity.z-=1;break;case"s":this.velocity.z+=1;break;case"a":this.velocity.x-=1;break;case"d":this.velocity.x+=1;break;default:return}if(A.stopPropagation(),this.keysPressed.push(g),!this.keyboardMovement){this.keyboardMovement=!0,this.prevVelocityIntegrationTime=performance.now();const g=()=>{this.integrateVelocityChange(A),this.keyboardMovement&&window.requestAnimationFrame(g)};window.requestAnimationFrame(g)}}}onKeyUp(A){const g=A.key.toLowerCase();if(!this.keysPressed.includes(g))return;switch(g){case"w":this.velocity.z+=1;break;case"s":this.velocity.z-=1;break;case"a":this.velocity.x+=1;break;case"d":this.velocity.x-=1;break;default:return}A.stopPropagation();const I=this.keysPressed.indexOf(g);this.keysPressed.splice(I,1),0==this.keysPressed.length&&(this.keyboardMovement=!1)}__startTouch(A){this.ongoingTouches[A.identifier]={identifier:A.identifier,pos:new B(A.clientX,A.clientY)}}__endTouch(A){delete this.ongoingTouches[A.identifier]}_onTouchStart(A){const g=A.changedTouches;for(let A=0;A<g.length;A++)this.__startTouch(g[A]);this.initDrag(A)}onTouchEnd(A){A.preventDefault(),A.stopPropagation();const g=A.changedTouches;for(let A=0;A<g.length;A++)this.__endTouch(g[A]);0==Object.keys(this.ongoingTouches).length&&this.endDrag(A)}onTouchCancel(A){A.preventDefault();const g=A.touches;for(let A=0;A<g.length;A++)this.__endTouch(g[A]);0==Object.keys(this.ongoingTouches).length&&this.endDrag(A)}static get MANIPULATION_MODES(){return FC}}const wC=function(A,g){let I=null;if(null!=g.webglContextType)try{I=A.getContext(g.webglContextType,g),I.name=g.webglContextType}catch(A){}else{const C=["webgl2","webgl"];for(let i=0;i<C.length;i++){const e=C[i];try{I=A.getContext(e,g),I.name=e}catch(A){}if(I)break}}if(!I)throw new Error("WebGL not supported on your system");return I.sizeInBytes=function(A){switch(A){case this.BYTE:case this.UNSIGNED_BYTE:return 1;case this.SHORT:case this.UNSIGNED_SHORT:return 2;case this.INT:case this.UNSIGNED_INT:case this.FLOAT:return 4;default:throw new Error("unknown type")}},"webgl2"==I.name?(I.floatTexturesSupported=!0,I.__ext_float_linear=I.getExtension("OES_texture_float_linear"),I.__ext_texture_half_float_linear=I.getExtension("OES_texture_half_float_linear"),I.__ext_color_buffer_float=I.getExtension("EXT_color_buffer_float")):(I.__ext_float=I.getExtension("OES_texture_float"),I.__ext_float?(I.floatTexturesSupported=!0,I.__ext_float_linear=I.getExtension("OES_texture_float_linear")):console.warn("OES_texture_float is not available"),I.__ext_half_float=I.getExtension("OES_texture_half_float"),I.__ext_half_float&&(I.HALF_FLOAT=I.__ext_half_float.HALF_FLOAT_OES,I.floatTexturesSupported=!0,I.__ext_texture_half_float_linear=I.getExtension("OES_texture_half_float_linear")),I.__ext_color_buffer_float=I.getExtension("EXT_color_buffer_float"),I.__ext_std_derivatives=I.getExtension("OES_standard_derivatives"),I.__ext_Inst=I.getExtension("ANGLE_instanced_arrays"),I.__ext_Inst&&(I.vertexAttribDivisor=I.__ext_Inst.vertexAttribDivisorANGLE.bind(I.__ext_Inst),I.drawArraysInstanced=I.__ext_Inst.drawArraysInstancedANGLE.bind(I.__ext_Inst),I.drawElementsInstanced=I.__ext_Inst.drawElementsInstancedANGLE.bind(I.__ext_Inst)),I.__ext_VAO=I.getExtension("OES_vertex_array_object"),I.__ext_VAO&&(I.createVertexArray=I.__ext_VAO.createVertexArrayOES.bind(I.__ext_VAO),I.deleteVertexArray=I.__ext_VAO.deleteVertexArrayOES.bind(I.__ext_VAO),I.bindVertexArray=I.__ext_VAO.bindVertexArrayOES.bind(I.__ext_VAO)),I.__ext_element_index_uint=I.getExtension("OES_element_index_uint"),I.__ext_WEBGL_depth_texture=I.getExtension("WEBGL_depth_texture"),I.__ext_WEBGL_depth_texture&&(I.UNSIGNED_INT_24_8=I.__ext_WEBGL_depth_texture.UNSIGNED_INT_24_8_WEBGL),I.DRAW_FRAMEBUFFER=I.FRAMEBUFFER),I.__ext_frag_depth=I.getExtension("EXT_frag_depth"),I.setupInstancedQuad=function(){const A=new Float32Array([0,1,2,3]),g=new Uint16Array([0,1,2,2,1,3]);this.__quadVertexIdsBuffer=this.createBuffer(),this.bindBuffer(this.ARRAY_BUFFER,this.__quadVertexIdsBuffer),this.bufferData(this.ARRAY_BUFFER,A,this.STATIC_DRAW),this.__quadIndexBuffer=this.createBuffer(),this.bindBuffer(this.ELEMENT_ARRAY_BUFFER,this.__quadIndexBuffer),this.bufferData(this.ELEMENT_ARRAY_BUFFER,g,this.STATIC_DRAW),this.__quadattrbuffers={vertexIDs:{buffer:this.__quadVertexIdsBuffer,dataType:"Float32",dimension:1,count:A.length,shared:!0}}},I.drawQuad=function(){this.drawElements(this.TRIANGLES,6,this.UNSIGNED_SHORT,0)},I},XC=function(A,g){if(!g.width||!g.height){if(!g.width)throw new Error("Invalid texture params. 'width' not provided");if(!g.height)throw new Error("Invalid texture params. 'height' not provided")}const I=A.getParameter(A.MAX_TEXTURE_SIZE);if(g.width<=0||g.width>I||g.height<=0||g.height>I)throw new Error("GLTextureParams: Invalid texture size. width:"+g.width+" height:"+g.height+" maxSize:"+I);const C={width:g.width,height:g.height},i=g=>isNaN(g)?A[g]:g,e=(A,I)=>{A in g?C[A]=i(g[A]):I&&(C[A]=i(I))};if(e("format"),e("internalFormat",C.format),e("type",A.UNSIGNED_BYTE),e("minFilter",g.filter?g.filter:A.LINEAR),e("magFilter",g.filter?g.filter:A.LINEAR),e("wrapS",g.wrapS?g.wrapS:A.CLAMP_TO_EDGE),e("wrapT",g.wrapT?g.wrapT:A.CLAMP_TO_EDGE),e("flipY",!1),e("mipMapped",!1),e("depthInternalFormat"),e("depthFormat"),e("depthType"),g.createDepthTexture&&("webgl2"==A.name||A.__ext_WEBGL_depth_texture?(A.name,C.depthFormat=A.DEPTH_COMPONENT,C.depthType=A.UNSIGNED_INT):C.depthType=A.UNSIGNED_SHORT),C.format==A.FLOAT)if("webgl2"==A.name)C.filter!=A.LINEAR||A.__ext_float_linear||(console.warn("Floating point texture filtering not supported on result device"),C.filter=A.NEAREST);else if(A.__ext_float)C.filter!=A.LINEAR||A.__ext_float_linear||(console.warn("Floating point texture filtering not supported on result device"),C.filter=A.NEAREST);else{if(!A.__ext_half_float)throw new Error("OES_texture_half_float is not available");C.format=A.HALF_FLOAT,C.filter!=A.LINEAR||A.__ext_texture_half_float_linear||(console.warn("Half Float texture filtering not supported on result device"),C.filter=A.NEAREST)}else if(C.format==A.HALF_FLOAT)if("webgl2"==A.name);else{if(!A.__ext_half_float)throw new Error("OES_texture_half_float is not available");if(C.filter!=A.LINEAR||A.__ext_texture_half_float_linear||(console.warn("Half Float texture filtering not supported on result device"),C.filter=A.NEAREST),C.channels==A.RGB)throw new Error("OES_texture_half_float onlysupports RGBA textures")}else if("sRGB"==C.format&&!A.__ext_sRGB)throw new Error("EXT_sRGB is not available");return null!=C.format&&"webgl2"==A.name&&C.internalFormat==C.format&&(C.type==A.FLOAT?C.format==A.RED?C.internalFormat=A.R32F:C.format==A.RG?C.internalFormat=A.RG32F:C.format==A.RGB?C.internalFormat=A.RGB32F:C.format==A.RGBA&&(C.internalFormat=A.RGBA32F):C.type==A.HALF_FLOAT?C.format==A.RED?C.internalFormat=A.R16F:C.format==A.RGB?C.internalFormat=A.RGB16F:C.format==A.RGBA&&(C.internalFormat=A.RGBA16F):C.type==A.UNSIGNED_BYTE&&(C.format==A.RED&&(C.internalFormat=A.R8),C.format==A.RGB?C.internalFormat=A.RGB8:C.format==A.RGBA&&(C.internalFormat=A.RGBA8))),null!=C.depthFormat&&("webgl2"==A.name?C.depthType==A.UNSIGNED_SHORT?C.depthInternalFormat=A.DEPTH_COMPONENT16:C.depthType==A.UNSIGNED_INT&&(C.depthInternalFormat=A.DEPTH_COMPONENT24):C.depthInternalFormat=C.depthFormat),C};class HC extends lA{constructor(A,g){if(super(),this.__image=null,this.__internalFormat=0,this.__type=0,this.__format=0,this.__wrapParam=0,this.params={},this.__minFilter=0,this.__magFilter=0,this.__wrapS=0,this.__wrapT=0,this.__flipY=!1,this.__mipMapped=!1,this.invert=!1,this.alphaFromLuminance=!1,this.__gltex=null,this.__typeParam="",this.__formatParam="",this.__gl=A,this.ready=!1,this.width=0,this.height=0,this.textureType=1,this.textureDesc=[0,0,0,0],this.__loaded=!1,this.__bound=!1,null!=g)if(g instanceof Gg){this.__image=g;const A=()=>{const A=this.__image.getParams(),g=A.width,I=A.height,C=A.data;this.bufferData(C,g,I)};this.__image.on("updated",A),this.__image.isLoaded()?this.configure(this.__image.getParams()):this.__image.on("loaded",(()=>{this.configure(this.__image.getParams())}))}else this.configure(g)}isLoaded(){return this.__loaded}getImage(){return this.__image}getInternalFormat(){return this.__internalFormat}getType(){return this.__type}getFormat(){return this.__format}getWrap(){return this.__wrapParam}getMipMapped(){return this.__mipMapped}configure(A){const g=this.__gl,I=XC(g,A);this.params=I,this.__format=I.format,this.__internalFormat=I.internalFormat,this.__type=I.type,this.__minFilter=I.minFilter,this.__magFilter=I.magFilter,this.__wrapS=I.wrapS,this.__wrapT=I.wrapT,this.__flipY="flipY"in A&&A.flipY,this.__mipMapped="mipMapped"in A&&A.mipMapped,this.invert="invert"in A&&A.invert,this.alphaFromLuminance="alphaFromLuminance"in A&&A.alphaFromLuminance,this.textureType=1,this.textureDesc[0]=this.width,this.textureDesc[1]=this.height,1==this.textureType&&this.__format==g.RGBA&&(this.textureType=2),this.__gltex&&g.deleteTexture(this.__gltex),this.__gltex=g.createTexture(),this.__updateGLTexParams();const C=I.width,i=I.height,e=A.data;e?this.bufferData(e,C,i,!1,!1):this.resize(C,i,!1,!1),this.__loaded||(this.emit("ready"),this.__loaded=!0)}__updateGLTexParams(){const A=this.__gl;A.bindTexture(A.TEXTURE_2D,this.__gltex),A.texParameteri(A.TEXTURE_2D,A.TEXTURE_MAG_FILTER,this.__minFilter),A.texParameteri(A.TEXTURE_2D,A.TEXTURE_MIN_FILTER,this.__magFilter),A.texParameteri(A.TEXTURE_2D,A.TEXTURE_WRAP_S,this.__wrapS),A.texParameteri(A.TEXTURE_2D,A.TEXTURE_WRAP_T,this.__wrapT)}bufferData(A,g=-1,I=-1,C=!0,i=!0){const e=this.__gl;if(null!=A){if(A instanceof WebGLTexture)this.__gltex=A;else if(A instanceof HTMLImageElement||A instanceof ImageData||A instanceof HTMLCanvasElement||A instanceof HTMLImageElement||A instanceof HTMLVideoElement)C&&e.bindTexture(e.TEXTURE_2D,this.__gltex),e.texImage2D(e.TEXTURE_2D,0,this.__internalFormat,this.__format,this.__type,A),this.width=A.width,this.height=A.height;else{-1==g&&(g=this.width),-1==I&&(I=this.height);const i=g*I;let t;switch(this.__format){case e.RED:case e.RED_INTEGER:case e.ALPHA:case e.LUMINANCE:case e.LUMINANCE_ALPHA:t=1;break;case e.RG:t=2,e.pixelStorei(e.UNPACK_ALIGNMENT,2);break;case e.RGB:t=3;break;case e.RGBA:t=4;break;default:console.warn("Reaching default case: numChannels:=1"),t=1}A.length!=i*t&&console.warn("Invalid data for Image width:"+g+" height:"+I+" format:"+this.__formatParam+" type:"+this.__typeParam+" Data Length:"+A.length+" Expected:"+i*t);let B=A;this.__type==e.HALF_FLOAT&&A instanceof Float32Array&&(B=r.convertFloat32ArrayToUInt16Array(A)),C&&e.bindTexture(e.TEXTURE_2D,this.__gltex),"webgl2"==e.name?e.texImage2D(e.TEXTURE_2D,0,this.__internalFormat,g,I,0,this.__format,this.__type,B,0):e.texImage2D(e.TEXTURE_2D,0,this.__internalFormat,g,I,0,this.__format,this.__type,B),this.width=g,this.height=I}this.__mipMapped&&e.generateMipmap(e.TEXTURE_2D)}else C&&e.bindTexture(e.TEXTURE_2D,this.__gltex),e.texImage2D(e.TEXTURE_2D,0,this.__internalFormat,this.width,this.height,0,this.__format,this.__type,null),this.width=g,this.height=I;i&&this.emit("updated")}clear(){const A=this.__gl,g=this.width*this.height;let I,C;switch(this.__format){case A.RED:case A.RED_INTEGER:case A.ALPHA:case A.LUMINANCE:case A.LUMINANCE_ALPHA:I=1;break;case A.RG:I=2;break;case A.RGB:I=3;break;case A.RGBA:I=4;break;default:throw new Error("Invalid Format")}switch(this.__type){case A.UNSIGNED_BYTE:C=new Uint8Array(g*I);break;case A.HALF_FLOAT:C=new Uint16Array(g*I);break;case A.FLOAT:C=new Float32Array(g*I);break;default:throw new Error("Invalid Type")}"webgl2"==A.name?A.texImage2D(A.TEXTURE_2D,0,this.__internalFormat,this.width,this.height,0,this.__format,this.__type,C,0):A.texImage2D(A.TEXTURE_2D,0,this.__internalFormat,this.width,this.height,0,this.__format,this.__type,C)}resize(A,g,I=!1,C=!0){const i=this.__gl;if(this.width!=A||this.height!=g){const e=i.getParameter(i.MAX_TEXTURE_SIZE);if(A<0||A>e||g<0||g>e)throw new Error("gl-texture2d: Invalid texture size. width:"+A+" height:"+g+" maxSize:"+e);if(I){const I=i.createTexture();i.bindTexture(i.TEXTURE_2D,I),i.texImage2D(i.TEXTURE_2D,0,this.__internalFormat,A,g,0,this.__format,this.__type,null);const C=i.createFramebuffer();i.bindFramebuffer(i.FRAMEBUFFER,C),i.framebufferTexture2D(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,this.__gltex,0),i.bindTexture(i.TEXTURE_2D,I),i.copyTexImage2D(i.TEXTURE_2D,0,this.__internalFormat,0,0,this.width,this.height,0),i.bindFramebuffer(i.FRAMEBUFFER,null),i.deleteFramebuffer(C),this.__gl.deleteTexture(this.__gltex),this.__gltex=I,this.__updateGLTexParams()}else this.width>0&&this.height>0&&(this.__gl.deleteTexture(this.__gltex),this.__gltex=i.createTexture(),this.__updateGLTexParams()),i.bindTexture(i.TEXTURE_2D,this.__gltex),i.texImage2D(i.TEXTURE_2D,0,this.__internalFormat,A,g,0,this.__format,this.__type,null);if(this.width=A,this.height=g,C){const I=new F(A,g);this.emit("resized",I)}}}populate(A,g,I,C=0,i=0,e=!0){const t=this.__gl;e&&t.bindTexture(t.TEXTURE_2D,this.__gltex),t.texSubImage2D(t.TEXTURE_2D,0,C,i,g,I,this.__format,this.__type,A)}getSize(){return[this.width,this.height]}get glTex(){return this.__gltex}getTexHdl(){return this.__gltex}preBind(A,g){return{textureTypeUnif:g[A.name+"Type"],textureDescUnif:g[A.name+"Desc"]}}bindToUniform(A,g,I){if(!this.__loaded)return!1;if(!this.__gltex)throw new Error("Unable to bind non-initialized or deleted texture.");const C=A.boundTextures++,i=this.__gl;return i.activeTexture(i.TEXTURE0+C),i.bindTexture(i.TEXTURE_2D,this.__gltex),i.uniform1i(g.location,C),I&&(I.textureTypeUnif&&i.uniform1i(I.textureTypeUnif.location,this.textureType),I.textureDescUnif&&i.uniform4fv(I.textureDescUnif.location,this.textureDesc)),!0}destroy(){super.destroy(),this.__gl.deleteTexture(this.__gltex),this.__gltex=null}static getCachedGLTexture2D(A){return WC[A.getId()]}static setCachedGLTexture2D(A,g){WC[A.getId()]=g}}const WC={};let YC={bool:"Boolean",int:"SInt32",uint:"UInt32",float:"Float32",ivec2:"Vec2",ivec3:"Vec3",ivec4:"Vec4",vec2:"Vec2",vec3:"Vec3",vec4:"Vec4",color:"Color",mat3:"Mat3",mat4:"Mat4",sampler2D:"BaseImage",samplerCube:"BaseImage"};const KC=/\s+/;class pC{constructor(){this.__shaderModules={},this.materialTemplates={}}setShaderModule(A,g){A in this.__shaderModules||(this.__shaderModules[A]=g)}getShaderModule(A){return this.__shaderModules[A]}getShaderModuleNames(){const A=[];for(const g in this.__shaderModules)A.push(g);return A}parseAttr(A,g,I,C){if(!(A[1]in YC))throw new Error("Error while parsing \nType not recognized:"+A[1]);const i=A[2].slice(0,A[2].length-1);I.attributes[i]={type:YC[A[1]],instanced:g},"color"==A[1]&&(A[1]="vec4",A.join(" "))}handleImport(A,g,I,C,i){if(I in this.__shaderModules){const e=this.__shaderModules[I];if(!e)throw Error("snippet not loaded or does not exists!");const t=this.parseShaderHelper(g,e,C,i);C.push(I),A.glsl=A.glsl+t.glsl,A.numLines+=t.numLines,A.uniforms=Object.assign(Object.assign({},A.uniforms),t.uniforms),A.attributes=Object.assign(Object.assign({},A.attributes),t.attributes)}else console.log("shaderName: "+g),console.log("SNIPPET NOT FOUND: "+I)}parseShader(A,g){return this.parseShaderHelper(A,g,[],0)}parseShaderHelper(A,g,I,C){const i=(A,g)=>{A.glsl=A.glsl+g+"\n",A.numLines++};I.push(A);const e={glsl:"",numLines:0,uniforms:{},attributes:{}},t=(g=g.toString()).split("\n");for(let g=0;g<t.length;g++){let B=t[g];const o=B.trim(),s=o.split(KC);switch(s[0]){case"<%include":case"import":{const g=o.split(/'|"|`/)[1].split("/").pop();I.includes(g)||this.handleImport(e,A,g,I,C);break}case"attribute":this.parseAttr(s,!1,e,B),i(e,B);break;case"instancedattribute":this.parseAttr(s,!0,e,B),s[0]="attribute",B=s.join(" "),i(e,B);break;case"uniform":{let g=1;4==s.length&&(g=2);const I=s[g];if(!(I in YC))throw new Error("Error while parsing :"+A+" \nType not recognized:"+s[1]);const C=s[g+1].slice(0,s[g+1].length-1);C.includes("[")?e.uniforms[C.substring(0,C.indexOf("["))]=YC[I]:e.uniforms[C]=YC[I],"struct"==e.uniforms[C]&&console.log(s),"color"==s[1]&&(s[1]="vec4",B=s.join(" ")),i(e,B);break}default:i(e,B)}}return e}}const NC=new pC;let JC=0;class DC extends hA{constructor(A,g){super(g),A&&(this.__gl=A),this.__shaderStagesGLSL={},this.__shaderStages={},this.__shaderProgramHdls={},this.__gltextures={},this.__id=JC++}setGLContext(A){this.__gl=A}setShaderStage(A,g){this.__shaderStagesGLSL[A]=g,this.clearProgramsCache()}getShaderStage(A){return this.__shaderStagesGLSL[A]}clearProgramsCache(){const A=this.__gl;for(const g in this.__shaderProgramHdls){const I=this.__shaderProgramHdls[g];for(const g in I.shaderHdls)A.deleteShader(I.shaderHdls[g]);A.deleteProgram(I.shaderProgramHdl)}}static isOpaque(){return!0}static isOverlay(){return!1}__compileShaderStage(A,g,I,C){const i=this.__gl;if(C||(C=i.shaderopts),C){if(C.repl)for(const g in C.repl)A=t.replaceAll(A,g,C.repl[g]);if(C.directives){A=C.directives.join("\n")+"\n"+A}}let e;"webgl2"==i.name&&(A=t.replaceAll(A,"attribute","in"),A="vertexShader"==I?t.replaceAll(A,"varying","out"):t.replaceAll(A,"varying","in"),e="#version 300 es\n",A="#version 300 es\n"+(A=t.replaceAll(A,"texture2D","texture")));const B=i.createShader(g);if(!B)throw Error("shaderHdl not defined");if(i.shaderSource(B,A),i.compileShader(B),!i.getShaderParameter(B,i.COMPILE_STATUS)){console.log("Errors in :"+this.constructor.name);const g=i.getShaderInfoLog(B).split("\n"),C={};for(let A=0;A<g.length;A++){if(g[A].startsWith("'")){g[A-1]=g[A-1]+g[A],delete g[A],A--;continue}const I=g[A].split(":");if(I.length>=2){const i=parseInt(I[2]);isNaN(i)||(C[i]?C[i].push(g[A]):C[i]=[g[A]])}}const e=[],t=A.split("\n");for(const A in C){const g=Number.parseInt(A)-1;for(let A=Math.max(0,g-4);A<g;A++)e.push((g+1+" ").padStart(3)+t[A]);e.push((g+1+">").padStart(3)+t[g]);for(let A=g+1;A<Math.min(t.length-1,g+5);A++)e.push((g+1+" ").padStart(3)+t[A]);const I=C[A];for(const A of I)e.push(A)}throw new Error("An error occurred compiling the shader \n=================\n"+this.constructor.name+"."+I+": \n\n"+e.join("\n"))}return B}__createProgram(A){const g=this.__gl;this.__shaderCompilationAttempted=!0;const I=g.createProgram();if(!I)throw Error("shaderProgramHdl not defined");const C={};this.__shaderStages.VERTEX_SHADER||(this.__shaderStages.VERTEX_SHADER=NC.parseShader("VERTEX_SHADER",this.__shaderStagesGLSL.VERTEX_SHADER));const i=this.__shaderStages.VERTEX_SHADER.glsl;if(null!=i){const e=this.__compileShaderStage(i,g.VERTEX_SHADER,"vertexShader",A);if(!e)return!1;g.attachShader(I,e),C[g.VERTEX_SHADER]=e}this.__shaderStages.FRAGMENT_SHADER||(this.__shaderStages.FRAGMENT_SHADER=NC.parseShader("FRAGMENT_SHADER",this.__shaderStagesGLSL.FRAGMENT_SHADER));const e=this.__shaderStages.FRAGMENT_SHADER.glsl;if(null!=e){const i=Object.assign({},g.shaderopts,A);i.frag&&(i.defines=i.frag.defines+i.defines);const t=this.__compileShaderStage(e,g.FRAGMENT_SHADER,"fragmentShader",i);if(!t)return!1;g.attachShader(I,t),C[g.FRAGMENT_SHADER]=t}if(g.linkProgram(I),!g.getProgramParameter(I,g.LINK_STATUS)){const A=g.getProgramInfoLog(I);if(!A)throw Error("info not defined");if(A.includes("D3D shader compilation failed")){const A=g.getExtension("WEBGL_debug_shaders");if(A){const I=A.getTranslatedShaderSource(C[g.VERTEX_SHADER]);console.log(I)}}throw console.log("vertexShaderGLSL:"+i),console.log("fragmentShaderGLSL:"+e),new Error("Unable to link the shader program:"+this.constructor.name+"\n==================\n"+A)}const t=this.__extractAttributeAndUniformLocations(I,A);return t.shaderHdls=C,t.shaderProgramHdl=I,t}__extractAttributeAndUniformLocations(A,g){const I=this.__gl,C=this.getAttributes(),i={attrs:{},unifs:{}};for(const g in C){const e=I.getAttribLocation(A,g);if(null==e){console.warn("Shader attribute not found:"+g);continue}const t=C[g];i.attrs[g]={name:g,location:e,type:t.type,instanced:t.instanced}}const e=this.getUniforms();for(let C in e){const t=e[C];if(g&&g.repl)for(const A in g.repl)C=C.replace(A,g.repl[A]);const B=I.getUniformLocation(A,C);null!=B&&(i.unifs[C]={name:C,location:B,type:t})}return i}getAttributes(){const A={};for(const g in this.__shaderStages){const I=this.__shaderStages[g];for(const g in I.attributes)A[g]=I.attributes[g]}return A}getUniforms(){const A={};for(const g in this.__shaderStages){const I=this.__shaderStages[g];for(const g in I.uniforms)A[g]=I.uniforms[g]}return A}isCompiledForTarget(A){const g=A||this.getId();return null!=this.__shaderProgramHdls[g]}compileForTarget(A,g){const I=A||this.getId();let C=this.__shaderProgramHdls[I];return C||(C=this.__createProgram(g||{}),C.shaderkey=I,this.__shaderProgramHdls[I]=C,C)}compile(){this.compileForTarget()}bind(A,g){const I=this.__gl;if(A.glShader!=this){const C=this.compileForTarget(g,A.shaderopts);if(!C)return console.warn(this.constructor.name+" is not compiled for "+g),!1;const i=C.shaderProgramHdl;I.useProgram(i),A.glShader=this,A.shaderkey=C.shaderkey,A.unifs=C.unifs,A.attrs=C.attrs,A.boundTextures=0,A.glGeom=void 0,A.bindRendererUnifs&&A.bindRendererUnifs(C.unifs)}return A.supportsInstancing=!0,!0}unbind(A){return A.glShader=null,A.shaderkey="",A.unifs={},A.attrs={},!0}getGeomDataShaderName(){return""}getSelectedShaderName(){return""}static supportsInstancing(){return!0}static getPackedMaterialData(A){return new Float32Array(4)}static getMaterialTemplate(){throw new Error("Shader does not provide a material template.")}destroy(){const A=this.__gl;for(const g in this.__shaderProgramHdls){const I=this.__shaderProgramHdls[g];A.deleteProgram(I.shaderProgramHdl)}this.__shaderProgramHdls={}}}class fC{constructor(A,I,C=!1){this.colorTextureResizeEventId=-1,this.__depthTexture=null,this.__fbo=null,this.__prevBoundFbo=null,!g.isIOSDevice||"webgl"!=A.name||I.getType()!=A.FLOAT&&I.getType()!=A.HALF_FLOAT||console.error("IOS devices are unable to render to float textures."),this.__gl=A,this.__colorTexture=I,this.__createDepthTexture=C,this.__clearColor=new l(0,0,0,0),this.__colorTexture&&(this.colorTextureResizeEventId=this.__colorTexture.on("resized",(()=>{console.warn("This code path will be deprecated. Instead, resize the GLFbo and it will resize the texture."),this.resize(this.__colorTexture.width,this.__colorTexture.height,!1)}))),this.setup()}setClearColor(A){this.__clearColor=A}getWidth(){return this.__colorTexture.width}getHeight(){return this.__colorTexture.height}getSize(){return[this.__colorTexture.width,this.__colorTexture.height]}getColorTexture(){return this.__colorTexture}getDepthTextureGL(){return this.__depthTexture}get width(){return this.__colorTexture.width}get height(){return this.__colorTexture.height}get size(){return[this.__colorTexture.width,this.__colorTexture.height]}get colorTexture(){return this.__colorTexture}setColorTexture(A){const g=this.__gl;this.__colorTexture=A,g.framebufferTexture2D(g.FRAMEBUFFER,g.COLOR_ATTACHMENT0,g.TEXTURE_2D,this.__colorTexture.glTex,0)}get depthTextureGL(){return this.__depthTexture}setup(){const A=this.__gl;this.__fbo=A.createFramebuffer(),"webgl2"==A.name?A.bindFramebuffer(A.DRAW_FRAMEBUFFER,this.__fbo):A.bindFramebuffer(A.FRAMEBUFFER,this.__fbo),this.__colorTexture&&("webgl2"==A.name?A.framebufferTexture2D(A.DRAW_FRAMEBUFFER,A.COLOR_ATTACHMENT0,A.TEXTURE_2D,this.__colorTexture.glTex,0):A.framebufferTexture2D(A.FRAMEBUFFER,A.COLOR_ATTACHMENT0,A.TEXTURE_2D,this.__colorTexture.glTex,0)),this.__createDepthTexture&&this.createDepthTexture(),MC(A,this.width,this.height),"webgl2"==A.name?A.bindFramebuffer(A.DRAW_FRAMEBUFFER,null):A.bindFramebuffer(A.FRAMEBUFFER,null)}createDepthTexture(){const A=this.__gl;if("webgl2"==A.name||A.__ext_WEBGL_depth_texture)A.activeTexture(A.TEXTURE0),this.__depthTexture=A.createTexture(),A.bindTexture(A.TEXTURE_2D,this.__depthTexture),A.texParameteri(A.TEXTURE_2D,A.TEXTURE_MAG_FILTER,A.LINEAR),A.texParameteri(A.TEXTURE_2D,A.TEXTURE_MIN_FILTER,A.LINEAR),A.texParameteri(A.TEXTURE_2D,A.TEXTURE_WRAP_S,A.CLAMP_TO_EDGE),A.texParameteri(A.TEXTURE_2D,A.TEXTURE_WRAP_T,A.CLAMP_TO_EDGE),"webgl2"==A.name?(A.texImage2D(A.TEXTURE_2D,0,A.DEPTH_COMPONENT24,this.width,this.height,0,A.DEPTH_COMPONENT,A.UNSIGNED_INT,null),A.framebufferTexture2D(A.DRAW_FRAMEBUFFER,A.DEPTH_ATTACHMENT,A.TEXTURE_2D,this.__depthTexture,0)):(A.texImage2D(A.TEXTURE_2D,0,A.DEPTH_COMPONENT,this.width,this.height,0,A.DEPTH_COMPONENT,A.UNSIGNED_INT,null),A.framebufferTexture2D(A.FRAMEBUFFER,A.DEPTH_ATTACHMENT,A.TEXTURE_2D,this.__depthTexture,0));else{const g=A.createRenderbuffer();A.bindRenderbuffer(A.RENDERBUFFER,g),A.renderbufferStorage(A.RENDERBUFFER,A.DEPTH_COMPONENT16,this.width,this.height),A.framebufferRenderbuffer(A.FRAMEBUFFER,A.DEPTH_ATTACHMENT,A.RENDERBUFFER,g)}}resize(A,g,I=!0){const C=this.__gl;C.bindFramebuffer(C.FRAMEBUFFER,null),C.deleteFramebuffer(this.__fbo),I&&this.__colorTexture.resize(A,g,!1,!1),this.__fbo=C.createFramebuffer(),"webgl2"==C.name?C.bindFramebuffer(C.DRAW_FRAMEBUFFER,this.__fbo):C.bindFramebuffer(C.FRAMEBUFFER,this.__fbo),C.framebufferTexture2D(C.FRAMEBUFFER,C.COLOR_ATTACHMENT0,C.TEXTURE_2D,this.__colorTexture.glTex,0),this.__depthTexture&&(C.deleteTexture(this.__depthTexture),this.createDepthTexture()),MC(C,this.width,this.height)}bindForWriting(A){A&&(this.__prevBoundFbo=A.boundRendertarget,A.boundRendertarget=this.__fbo);const g=this.__gl;"webgl2"==g.name?g.bindFramebuffer(g.DRAW_FRAMEBUFFER,this.__fbo):g.bindFramebuffer(g.FRAMEBUFFER,this.__fbo),g.viewport(0,0,this.width,this.height)}unbindForWriting(A){A&&(A.boundRendertarget=this.__prevBoundFbo);const g=this.__gl;"webgl2"==g.name?g.bindFramebuffer(g.DRAW_FRAMEBUFFER,this.__prevBoundFbo):g.bindFramebuffer(g.FRAMEBUFFER,this.__prevBoundFbo)}bind(A){this.bindForWriting(A)}unbind(A){if(A)this.unbindForWriting(A);else{const A=this.__gl;A.bindFramebuffer(A.FRAMEBUFFER,null)}}bindForReading(A){const g=this.__gl;"webgl2"==g.name?g.bindFramebuffer(g.READ_FRAMEBUFFER,this.__fbo):g.bindFramebuffer(g.FRAMEBUFFER,this.__fbo)}unbindForReading(){const A=this.__gl;"webgl2"==A.name?A.bindFramebuffer(A.READ_FRAMEBUFFER,null):A.bindFramebuffer(A.FRAMEBUFFER,null)}clear(){const A=this.__gl;A.colorMask(!0,!0,!0,!0);const g=this.__clearColor.asArray();A.clearColor(g[0],g[1],g[2],g[3]),this.__createDepthTexture?A.clear(A.COLOR_BUFFER_BIT|A.DEPTH_BUFFER_BIT):A.clear(A.COLOR_BUFFER_BIT)}bindAndClear(A){this.bind(A),this.clear()}destroy(){const A=this.__gl;A.bindFramebuffer(A.FRAMEBUFFER,null),A.deleteFramebuffer(this.__fbo),this.__fbo=null,this.__colorTexture.removeListenerById("resized",this.colorTextureResizeEventId)}}function MC(A,g,I){let C;if(C="webgl2"==A.name?A.checkFramebufferStatus(A.DRAW_FRAMEBUFFER):A.checkFramebufferStatus(A.FRAMEBUFFER),C!==A.FRAMEBUFFER_COMPLETE)switch(A.bindTexture(A.TEXTURE_2D,null),"webgl2"==A.name?A.bindFramebuffer(A.DRAW_FRAMEBUFFER,null):A.bindFramebuffer(A.FRAMEBUFFER,null),console.warn("Error creating Fbo width:",g,", height:",I),C){case A.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw new Error("The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.");case A.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw new Error("There is no attachment.");case A.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("Height and width of the attachment are not the same.");case A.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.");case 36061:throw new Error("The framebuffer is unsupported");default:throw new Error("Incomplete Frambuffer")}}class LC extends V{constructor(A,g){super(),this.params={},this.flipY=!1,this.width=0,this.height=0,this.__gl=A,this.textureTargets=[],this.depthTexture=null,this.textureDesc=[0,0,0,0],this.clearColor=new l(0,0,0,0),this.colorMask=[!0,!0,!0,!0],g&&this.configure(g)}configure(A){const g=this.__gl,I=XC(g,A);this.textureTargets.forEach((A=>{g.deleteTexture(A)})),this.textureTargets=[],this.depthTexture&&(g.deleteTexture(this.depthTexture),this.depthTexture=null),this.frameBuffer&&g.deleteFramebuffer(this.frameBuffer),this.params=I,this.type=I.type,this.format=I.format,this.internalFormat=I.internalFormat,this.minFilter=I.minFilter?I.minFilter:I.filter,this.minFilter=I.magFilter?I.magFilter:I.filter,this.wrap=I.wrap,this.flipY=I.flipY,this.width=I.width,this.height=I.height,this.textureType=1,this.textureDesc[0]=this.width,this.textureDesc[1]=this.height;const C=null!=A.numColorChannels?A.numColorChannels:null!=I.format?1:0;for(let A=0;A<C;A++){g.activeTexture(g.TEXTURE0+1);const A=g.createTexture();g.bindTexture(g.TEXTURE_2D,A),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_S,I.wrapS),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_T,I.wrapT),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MIN_FILTER,I.minFilter),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MAG_FILTER,I.magFilter),g.texImage2D(g.TEXTURE_2D,0,this.internalFormat,I.width,I.height,0,this.format,this.type,null),this.textureTargets.push(A)}if(I.depthFormat){if("webgl"==g.name&&!g.__ext_WEBGL_depth_texture)throw new Error("Depth textures not support on this device");g.activeTexture(g.TEXTURE0),this.depthTexture=g.createTexture(),g.bindTexture(g.TEXTURE_2D,this.depthTexture),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_S,I.wrapS),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_T,I.wrapT),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MIN_FILTER,I.minFilter),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MAG_FILTER,I.magFilter),g.texImage2D(g.TEXTURE_2D,0,I.depthInternalFormat,I.width,I.height,0,I.depthFormat,I.depthType,null)}if(this.frameBuffer=g.createFramebuffer(),this.bindForWriting(),this.textureTargets.length>0){this.textureTargets.length>1&&"webgl"==g.name&&g.drawBuffers;const A=[];for(let I=0;I<this.textureTargets.length;I++)g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.COLOR_ATTACHMENT0+I,g.TEXTURE_2D,this.textureTargets[I],0),A.push(g.COLOR_ATTACHMENT0+I);this.textureTargets.length>1&&g.drawBuffers(A)}this.depthTexture&&g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.DEPTH_ATTACHMENT,g.TEXTURE_2D,this.depthTexture,0),this.checkFramebuffer()}checkFramebuffer(){this.bindForWriting();const A=this.__gl,g=A.checkFramebufferStatus(A.DRAW_FRAMEBUFFER);if(g!=A.FRAMEBUFFER_COMPLETE)switch(g){case A.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw new Error("The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.");case A.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw new Error("There is no attachment.");case A.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("Height and width of the attachment are not the same.");case A.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.");case 36061:throw new Error("The framebuffer is unsupported");default:throw new Error("Incomplete Frambuffer")}this.unbindForWriting()}bindForWriting(A,g=!1){A&&(this.__prevBoundFbo=A.boundRendertarget,A.boundRendertarget=this.frameBuffer);const I=this.__gl;"webgl2"==I.name?I.bindFramebuffer(I.DRAW_FRAMEBUFFER,this.frameBuffer):I.bindFramebuffer(I.FRAMEBUFFER,this.frameBuffer),I.viewport(0,0,this.width,this.height),g&&this.clear()}unbindForWriting(A){A&&(A.boundRendertarget=this.__prevBoundFbo);const g=this.__gl;g.bindFramebuffer("webgl2"==g.name?g.DRAW_FRAMEBUFFER:g.FRAMEBUFFER,this.__prevBoundFbo),this.__prevBoundFbo=null}clear(A=!0){const g=this.__gl,I=this.colorMask;g.colorMask(I[0],I[1],I[2],I[3]);const C=this.clearColor.asArray();g.clearColor(C[0],C[1],C[2],C[3]);let i=0;this.textureTargets.length>0&&(i|=g.COLOR_BUFFER_BIT),this.depthTexture&&(i|=g.DEPTH_BUFFER_BIT),g.clear(i)}bindForReading(){const A=this.__gl;"webgl2"==A.name?A.bindFramebuffer(A.READ_FRAMEBUFFER,this.frameBuffer):A.bindFramebuffer(A.FRAMEBUFFER,this.frameBuffer)}unbindForReading(){const A=this.__gl;"webgl2"==A.name?A.bindFramebuffer(A.READ_FRAMEBUFFER,null):A.bindFramebuffer(A.FRAMEBUFFER,null)}bindColorTexture(A,g,I=0){const C=this.__gl,i=A.boundTextures++;return C.uniform1i(g.location,i),C.activeTexture(C.TEXTURE0+i),C.bindTexture(C.TEXTURE_2D,this.textureTargets[I]),!0}bindDepthTexture(A,g){const I=this.__gl,C=A.boundTextures++;return I.uniform1i(g.location,C),I.activeTexture(I.TEXTURE0+C),I.bindTexture(I.TEXTURE_2D,this.depthTexture),!0}unbind(A){this.unbindForWriting(A)}resize(A,g,I=!1){const C=this.__gl;if(this.width!=A||this.height!=g){const i=C.getParameter(C.MAX_TEXTURE_SIZE);if(A<0||A>i||g<0||g>i)throw new Error(`GLRenderTarget: Invalid texture size. width: ${A} height: ${g} maxSize: ${i}`);I&&this.bindForReading();const e=this.params;for(let i=0;i<this.textureTargets.length;i++){const t=C.createTexture();C.bindTexture(C.TEXTURE_2D,t),C.texParameteri(C.TEXTURE_2D,C.TEXTURE_WRAP_S,e.wrapS),C.texParameteri(C.TEXTURE_2D,C.TEXTURE_WRAP_T,e.wrapT),C.texParameteri(C.TEXTURE_2D,C.TEXTURE_MIN_FILTER,e.minFilter),C.texParameteri(C.TEXTURE_2D,C.TEXTURE_MAG_FILTER,e.magFilter),C.texImage2D(C.TEXTURE_2D,0,this.internalFormat,A,g,0,this.format,this.type,null),I&&C.copyTexImage2D(C.TEXTURE_2D,0,this.internalFormat,0,0,Math.min(A,this.width),Math.min(g,this.height),0),C.deleteTexture(this.textureTargets[i]),this.textureTargets[i]=t}if(e.depthFormat){if("webgl"==C.name&&!C.__ext_WEBGL_depth_texture)throw new Error("Depth textures not support on this device");C.activeTexture(C.TEXTURE0);const i=C.createTexture();C.bindTexture(C.TEXTURE_2D,i),C.texParameteri(C.TEXTURE_2D,C.TEXTURE_WRAP_S,e.wrapS),C.texParameteri(C.TEXTURE_2D,C.TEXTURE_WRAP_T,e.wrapT),C.texParameteri(C.TEXTURE_2D,C.TEXTURE_MIN_FILTER,e.minFilter),C.texParameteri(C.TEXTURE_2D,C.TEXTURE_MAG_FILTER,e.magFilter),C.texImage2D(C.TEXTURE_2D,0,e.depthInternalFormat,A,g,0,e.depthFormat,e.depthType,null),I&&C.copyTexImage2D(C.TEXTURE_2D,0,this.internalFormat,0,0,Math.min(A,this.width),Math.min(g,this.height),0),C.deleteTexture(this.depthTexture),this.depthTexture=i}if(I&&this.unbindForReading(),this.width=A,this.height=g,this.frameBuffer&&C.deleteFramebuffer(this.frameBuffer),this.frameBuffer=C.createFramebuffer(),this.bindForWriting(),this.textureTargets.length>0){this.textureTargets.length>1&&"webgl"==C.name&&C.drawBuffers;const A=[];for(let g=0;g<this.textureTargets.length;g++)C.framebufferTexture2D(C.DRAW_FRAMEBUFFER,C.COLOR_ATTACHMENT0+g,C.TEXTURE_2D,this.textureTargets[g],0),A.push(C.COLOR_ATTACHMENT0+g);this.textureTargets.length>1&&C.drawBuffers(A)}this.depthTexture&&C.framebufferTexture2D(C.DRAW_FRAMEBUFFER,C.DEPTH_ATTACHMENT,C.TEXTURE_2D,this.depthTexture,0),this.checkFramebuffer()}}bindToUniform(A,g,I){const C=A.boundTextures++,i=this.__gl.TEXTURE0+C,e=this.__gl;return e.activeTexture(i),e.bindTexture(e.TEXTURE_2D,this.textureTargets[0]),e.uniform1i(g.location,C),I&&(I.textureTypeUnif&&e.uniform1i(I.textureTypeUnif.location,this.textureType),I.textureDescUnif&&this.__gl.uniform4fv(I.textureDescUnif.location,this.textureDesc)),!0}destroy(){const A=this.__gl;this.textureTargets.forEach((g=>{A.deleteTexture(g)})),this.textureTargets=[],this.depthTexture&&(A.deleteTexture(this.depthTexture),this.depthTexture=null),this.frameBuffer&&A.deleteFramebuffer(this.frameBuffer)}}var UC="#define GLSLIFY 1\n\n#ifdef ENABLE_MULTI_DRAW\n\n#ifdef EMULATE_MULTI_DRAW\n\nuniform int geomItemId;\nint getGeomItemId() {\n  return geomItemId;\n}\n\nvec4 getDrawItemIds() {\n  return vec4(float(geomItemId), 0.0, -1.0, -1.0);\n}\n\n#else // EMULATE_MULTI_DRAW\n\nuniform sampler2D drawIdsTexture;\n\nint getGeomItemId() {\n  ivec2 drawIdsTextureSize = textureSize(drawIdsTexture, 0);\n  ivec2 drawIdsArrayCoords = ivec2(gl_DrawID % drawIdsTextureSize.x, gl_DrawID / drawIdsTextureSize.x);\n  return int(texelFetch(drawIdsTexture, drawIdsArrayCoords, 0).r + 0.5);\n}\n\nvec4 getDrawItemIds() {\n  ivec2 drawIdsTextureSize = textureSize(drawIdsTexture, 0);\n  ivec2 drawIdsArrayCoords = ivec2(gl_DrawID % drawIdsTextureSize.x, gl_DrawID / drawIdsTextureSize.x);\n  vec4 color = texelFetch(drawIdsTexture, drawIdsArrayCoords, 0);\n  // Note: a 0 value in the texture means no sub-geom index is being rendered.\n  // subtract off 1 to get the true sub-geom index.\n  return vec4(color.r, color.g - 1.0, color.b, color.a);\n}\n\n#endif // EMULATE_MULTI_DRAW\n\n#else // ENABLE_MULTI_DRAW\n\nuniform int geomItemId;\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\nattribute float instancedIds;    // instanced attribute..\nuniform int instancedDraw;\n\nint getGeomItemId() {\n  if (instancedDraw == 0) {\n    return geomItemId;\n  }\n  else {\n    return int(instancedIds);\n  }\n}\n\nvec4 getDrawItemIds() {\n  if (instancedDraw == 0) {\n    return vec4(float(geomItemId), 0.0, -1.0, -1.0);\n  }\n  else {\n    return vec4(float(instancedIds), 0.0, -1.0, -1.0);\n  }\n}\n\n#else\n\nint getGeomItemId() {\n  return geomItemId;\n}\n\nvec4 getDrawItemIds() {\n    return vec4(float(geomItemId), 0.0, -1.0, -1.0);\n}\n\n#endif // ENABLE_FLOAT_TEXTURES\n#endif // ENABLE_MULTI_DRAW\n\n// For backwards compatibility with older plugins (UX.HandleShader)\nint getDrawItemId() {\n  return getGeomItemId();\n}\n";NC.setShaderModule("imageAtlas.glsl","#define GLSLIFY 1\n// Note: On mobile, I can't seem to pass around a stuct containing sampler2D.\n// I have to unpack the struct and pass its members. :(\n// struct ImageAtlas {\n//     sampler2D layout;\n//     sampler2D image;\n//     vec4 desc;\n// };\n\nimport 'GLSLUtils.glsl'\n\nvec4 getSubImageLayout(int index, in sampler2D atlasLayout, in vec4 atlasDesc){\n    return fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);\n}\nvec2 calcSubImageTexCoords(vec2 texCoord, int index, in sampler2D atlasLayout, in vec4 atlasDesc){\n    vec4 layoutData = fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);\n    // The following line is a hack to fix artifacts in our PBR lighting\n    // We were seeing loads of lighting garbage on some sufaces that were orthogonal\n    // to the world. The UV coordinates would have been landing right on the edges\n    // of our subimages and were often sampling outside the image. This couuld\n    // have been because of filtering, or an error in the uv coords. \n    texCoord = clamp(texCoord, vec2(0.01, 0.01), vec2(0.99, 0.99));\n    vec2 subimageTexel = texCoord * layoutData.zw;\n    // subimageTexel = clamp(subimageTexel, vec2(0.0, 0.0), vec2(1.0, 1.0));\n    return subimageTexel + layoutData.xy;\n}\nvec4 sampleSubImage(vec2 texCoord, int index, in sampler2D atlasLayout, in sampler2D atlasImage, in vec4 atlasDesc){\n    vec4 layoutData = fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);\n    vec2 atlasCoords = calcSubImageTexCoords(texCoord, index, atlasLayout, atlasDesc);\n    return texture2D(atlasImage, atlasCoords);\n}"),NC.setShaderModule("surfaceGeomData.glsl","#define GLSLIFY 1\n  uniform int floatGeomBuffer;\n  uniform int passId;\n  uniform int occlusionCulling;\n\n  import 'GLSLBits.glsl'\n  \n  vec4 setFragColor_geomData(vec3 v_viewPos, int floatGeomBuffer, int passId, float geomItemId, float elemItemId, int isOrthographic){\n    vec4 fragColor;\n\n    float viewDist;\n    if (isOrthographic > 0) {\n      viewDist = abs(v_viewPos.z);\n    } else {\n      viewDist = length(v_viewPos);\n    }\n    if (floatGeomBuffer != 0) {\n      fragColor.r = float(passId); \n      fragColor.g = float(geomItemId);\n      fragColor.b = elemItemId;\n      fragColor.a = viewDist;\n    }\n    else {\n      ///////////////////////////////////\n      // UInt8 buffer\n      fragColor.r = mod(geomItemId, 256.) / 255.;\n      fragColor.g = (floor(geomItemId / 256.) + float(passId) * 32.) / 255.;\n\n      // encode the dist as a 16 bit float\n      vec2 float16bits = encode16BitFloatInto2xUInt8(viewDist);\n      fragColor.b = float16bits.x;\n      fragColor.a = float16bits.y;\n    }\n\n#ifdef ENABLE_ES3\n    if (occlusionCulling != 0) {\n      // Calculate a simple stochastic transparency to reduce the cost of the reduction shader.\n      // We only need one pixel to be visible to consider the geometry visible, so here we \n      // keep only one in 7x7 (49) pixels. This signficatly reduces the cost of reducing the scene\n      // to the reduction data buffer.\n      // Note: this is not a stochastic transparency, as we are simply setting black pixels to \n      // reduce the number of reduction points for this geometry. The black pixels (not discarded)\n      // still occlude other geometries, but during reduction count to nothing.\n      int x = int(gl_FragCoord.x * 1000.0);\n      int y = int(gl_FragCoord.y * 1000.0);\n      if (x % 7 != 0 || y % 7 != 0) {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n      };\n    }\n#endif // ENABLE_ES3\n\n    return fragColor;\n  }\n\n  // Note: the older code imported drawItemId.glsl and newer code is importing geomItemId.glsl\n  // This code keeps compatibility with the older shaders.\n  vec4 setFragColor_geomData(vec3 v_viewPos, int floatGeomBuffer, int passId, float geomItemId, int isOrthographic){\n    return setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, geomItemId, -1.0, isOrthographic);\n  }"),NC.setShaderModule("surfaceHighlight.glsl","#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getHighlightColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);\n}\n#else\n\nuniform vec4 highlightColor;\n\nvec4 getHighlightColor(int id) {\n    return highlightColor;\n}\n\n#endif\n\nvec4 setFragColor_highlight(float v_geomItemId){\n  vec4 fragColor; \n  int geomItemId = int(v_geomItemId + 0.5);\n  fragColor = getHighlightColor(geomItemId);\n  return fragColor;\n}\n"),NC.setShaderModule("computeViewNormal.glsl","#define GLSLIFY 1\n  \n#ifdef ENABLE_ES3\nvec3 computeViewNormal(vec3 viewPos) {\n  vec3 fdx = dFdx(viewPos);\n  vec3 fdy = dFdy(viewPos);\n  return normalize(cross(fdx, fdy));\n}\n#else \nvec3 computeViewNormal(vec3 viewPos) {\n  return vec3(0.0, 0.0, 0.0);\n}\n#endif\n"),NC.setShaderModule("calcFatLinesViewPos.glsl","#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\nvec3 calcFatLinesViewPos(int vertexID, mat4 modelViewMatrix, inout vec3 viewNormal, inout vec2 texCoord, inout vec3 pos) {\n\n  int seqentialIndex_0 = int(mod(segmentIndices.x, 2.));\n  int seqentialIndex_1 = int(mod(segmentIndices.y, 2.));\n  int index_0 = int(segmentIndices.x) / 2;\n  int index_1 = int(segmentIndices.y) / 2;\n\n  vec3 viewPos;\n  vec4 data_0 = fetchTexel(positionsTexture, positionsTextureSize, index_0);\n  vec4 data_1 = fetchTexel(positionsTexture, positionsTextureSize, index_1);\n\n  // During XR sessions, there is a scaling applied to the view matrix\n  // which causes a distortion to the line width. We extract that scale here\n  // and use to correct the distortion.\n  // See also: FatPointsShader\n  vec3 viewZ = modelViewMatrix[2].xyz;\n  float viewScale = length(viewZ);\n\n  vec4 pos_0 = modelViewMatrix * vec4(data_0.xyz, 1.0);\n  vec4 pos_1 = modelViewMatrix * vec4(data_1.xyz, 1.0);\n  // Note: multiply the per-vertex line thickness with the line thickness uniform value;\n  float lineThickness_0 = LineThickness * data_0.w * viewScale;\n  float lineThickness_1 = LineThickness * data_1.w * viewScale;\n\n  if (vertexID < 2) {\n    pos = data_0.xyz;\n    viewPos = pos_0.xyz;\n  }\n  else {\n    pos = data_1.xyz;\n    viewPos = pos_1.xyz;\n  }\n  if (pos_1 != pos_0) {\n    vec3 segmentDir = normalize(pos_1.xyz - pos_0.xyz);\n    vec3 viewVector = normalize(viewPos);\n\n    if (vertexID < 2) {\n      vec3 segmentStartDir = segmentDir;\n      if (seqentialIndex_0 != 0) {\n        //if index_0 == 0, get the last index in the line as previous\n        int index_prev = (index_0 > 0) ? (index_0-1) : (positionsTextureSize-1);\n        vec4 data_prev = fetchTexel(positionsTexture, positionsTextureSize, index_prev);\n        vec4 pos_prev = modelViewMatrix * vec4(data_prev.xyz, 1.0);\n        segmentStartDir = normalize(segmentDir + normalize(pos_0.xyz - pos_prev.xyz));\n        // segmentStartDir = segmentDir;\n      }\n      // vec3 startBiTangent = normalize(cross(segmentStartDir, viewVector));\n      // viewNormal = normalize(cross(segmentStartDir, startBiTangent));\n      vec3 startBiTangent = normalize(vec3(-segmentStartDir.y, segmentStartDir.x, 0.0));\n      viewNormal = normalize(-viewVector);\n      // Move the endpoints to overlap a bit more.\n      //viewPos -= vec3(segmentStartDir * lineThickness_0 * 0.25);\n      if (mod(vertexIDs, 2.0) == 0.0) {\n        viewPos += vec3(startBiTangent * lineThickness_0);\n        texCoord.x = 1.0;\n      }\n      else {\n        viewPos -= vec3(startBiTangent * lineThickness_0);\n        texCoord.x = 0.0;\n      }\n      texCoord.y = 0.0;\n    }\n    else {\n      vec3 segmentEndDir = segmentDir;\n      if (seqentialIndex_1 != 0) {\n        //if index_1 == numPoints-1, get the first index in the line as next\n        int index_next = (index_1 < (positionsTextureSize-1)) ? (index_1+1) : 0;\n        vec4 data_next = fetchTexel(positionsTexture, positionsTextureSize, index_next);\n        vec4 pos_next = modelViewMatrix * vec4(data_next.xyz, 1.0);\n        segmentEndDir = normalize(segmentDir + normalize(pos_next.xyz - pos_1.xyz));\n        // segmentEndDir = segmentDir;\n      }\n      // vec3 endBiTangent = normalize(cross(segmentEndDir, viewVector));\n      // viewNormal = normalize(cross(segmentEndDir, endBiTangent));\n      vec3 endBiTangent = normalize(vec3(-segmentEndDir.y, segmentEndDir.x, 0.0));\n      viewNormal = normalize(-viewVector);\n      // Move the endpoints to overlap a bit more.\n      //viewPos += vec3(segmentEndDir * lineThickness_1 * 0.25);\n      if (mod(vertexIDs, 2.0) == 0.0) {\n        viewPos += vec3(endBiTangent * lineThickness_1);\n        texCoord.x = 1.0;\n      }\n      else {\n        viewPos -= vec3(endBiTangent * lineThickness_1);\n        texCoord.x = 0.0;\n      }\n      texCoord.y = 1.0;\n    }\n\n    // Move the line towards the viewer by the line thickness.\n    // this is to avoid depth issues when lines are rendered over meshes. \n    viewPos.z += (lineThickness_0 + lineThickness_1) * 0.5;\n  }\n\n  return viewPos;\n}\n\n"),NC.setShaderModule("constants.glsl","#define GLSLIFY 1\n#define PI 3.141592653589793\n#define TwoPI (2.0 * PI)\n#define HalfPI (0.5 * PI)\n\n"),NC.setShaderModule("convolve-helpers.glsl","#define GLSLIFY 1\n\n#ifdef ENVMAP_CUBE\n\nuniform samplerCube envMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return texture(envMap, dir);\n}\n\n#else \n\nuniform sampler2D   envMap;\n\nimport 'envmap-octahedral.glsl'\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = dirToSphOctUv(dir);\n  vec4 texel = texture2D(envMap, vec2(uv.x, 1.0 - uv.y));\n  return vec4(texel.rgb/texel.a, 1.0); // TODO: Check this line. Do we need it?\n}\n\n#endif \n\nvec3 cubeFaceUvToDir(float u, float v, int faceId) {\n\n  // normalize into [-1, 1] range\n  float n_u = 2.0 * u - 1.0;\n  float n_v = 2.0 * v - 1.0;\n\n  vec3 dir;\n  switch (faceId)\n  {\n  case 0: //TEXTURE_CUBE_MAP_POSITIVE_X:\n    dir.x = 1.0f;\n    dir.y = n_v;\n    dir.z = -n_u;\n    break;\n  case 1: //TEXTURE_CUBE_MAP_NEGATIVE_X:\n    dir.x = -1.0f;\n    dir.y = n_v;\n    dir.z = n_u;\n    break;\n  case 3: //TEXTURE_CUBE_MAP_POSITIVE_Y:\n    dir.x = n_u;\n    dir.y = 1.0f;\n    dir.z = -n_v;\n    break;\n  case 2: //TEXTURE_CUBE_MAP_NEGATIVE_Y:\n    dir.x = n_u;\n    dir.y = -1.0f;\n    dir.z = n_v;\n    break;\n  case 4: //TEXTURE_CUBE_MAP_POSITIVE_Z:\n    dir.x = n_u;\n    dir.y = n_v;\n    dir.z = 1.0f;\n    break;\n  case 5: //TEXTURE_CUBE_MAP_NEGATIVE_Z:\n    dir.x = -n_u;\n    dir.y = n_v;\n    dir.z = -1.0f;\n    break;\n  }\n  return normalize(dir);\n}\n\n"),NC.setShaderModule("cutaways.glsl","#define GLSLIFY 1\nconst int GEOMITEM_FLAG_CUTAWAY = 1; // 1<<0;\nconst int GEOMITEM_INVISIBLE_IN_GEOMDATA = 2; // 1<<1;\nconst int GEOMITEM_TRANSPARENT = 4; // 1<<1;\n\nuniform color cutColor;\n\n#ifdef ENABLE_FLOAT_TEXTURES\n  vec4 getCutaway(int id) {\n    return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 5);\n  }\n\n#else\n\n  uniform vec4 cutawayData;\n\n  vec4 getCutaway(int id) {\n    return cutawayData;\n  }\n\n#endif\n\n#define RAY_EPS 0.0000001\nstruct Ray {\n  vec3 start;\n  vec3 dir;\n};\n\nfloat intersectRayPlane(Ray ray, Ray plane) {\n  vec3 w = ray.start - plane.start;\n  float D = dot(plane.dir, ray.dir);\n  float N = dot(-plane.dir, w);\n\n  if (abs(D) < RAY_EPS) {\n    // segment is parallel to plane\n    if (N == 0.0)\n      return -1.0; // segment lies in plane\n    else\n      return -1.0; // no intersection\n  }\n  // they are not parallel\n  // compute intersect param\n  float sI = N / D;\n  if (sI < -RAY_EPS) {\n    return -1.0; // no intersection\n  }\n  return sI;\n}\n\nbool cutaway(vec3 worldPos, vec3 planeNormal, float planeDist) {\n\n  vec3 planePos = planeNormal * planeDist;\n  vec3 planeDir = worldPos + planePos;\n  float planeOffset = dot(planeDir, planeNormal);\n  if (planeOffset > 0.0) {\n    return true;\n  }\n  return false;\n}\n"),NC.setShaderModule("debugColors.glsl","#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\n\nvec3 getDebugColor(float id) {\n  int sel = int(round(mod(round(id), 16.0)));\n  \n  if (sel==0)\n    return vec3(0.0, 1.0, 1.0);\n  else if (sel==1)\n    return vec3(0.0, 1.0, 0.0);\n  else if (sel==2)\n    return vec3(1.0, 0.0, 1.0);\n  else if (sel==3)\n    return vec3(0.75, 0.75, 0.0);\n  else if (sel==4)\n    return vec3(0.0, 0.75, 0.75);\n  else if (sel==5)\n    return vec3(0.75, 0.0, 0.75);\n  else if (sel==6)\n    return vec3(0.45, 0.95, 0.0);\n  else if (sel==7)\n    return vec3(0.0, 0.45, 0.95);\n  else if (sel==8)\n    return vec3(0.95, 0.0, 0.45);\n  else if (sel==9)\n    return vec3(0.95, 0.45, 0.0);\n  else if (sel==10)\n    return vec3(0.0, 0.95, 0.45);\n  else if (sel==11)\n    return vec3(0.45, 0.0, 0.95);\n  else if (sel==12)\n    return vec3(0.45, 0.45, 0.95);\n  else if (sel==13)\n    return vec3(0.0, 0.0, 0.45);\n  else if (sel==14)\n    return vec3(0.0, 0.45, 0.45);\n  else if (sel==15)\n    return vec3(0.45, 0.0, 0.45);\n  else return vec3(0.2, 0.2, 0.2);\n}\n\n"),NC.setShaderModule("drawItemId.glsl",UC),NC.setShaderModule("geomItemId.glsl",UC),NC.setShaderModule("geomType.glsl","#define GLSLIFY 1\n\nconst int TRIANGLES = 0;\nconst int LINES = 1;\nconst int POINTS = 2;"),NC.setShaderModule("drawItemTexture.glsl","#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\nuniform sampler2D instancesTexture;\nuniform highp int instancesTextureSize;\n\n// See also: src\\Renderer\\GLSLConstants.js\n// const pixelsPerGLGeomItem = 8\nconst int pixelsPerItem = 8;\n\nvec4 getInstanceData(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 0);\n}\n\n#else\n\nuniform vec4 drawItemData;\n\nvec4 getInstanceData(int id) {\n  return drawItemData;\n}\n\n#endif\n\n"),NC.setShaderModule("envmap-dualfisheye.glsl","#define GLSLIFY 1\n\nvec2 dualfisheyeUVsFromDir(vec3 dir) {\n  vec2 result;\n  float angle = 0.465;\n  if (dir.x < 0.0) {\n    result = vec2(((dir.z * -angle) + 0.5) * 0.5, (dir.y * angle) + 0.5);\n  }\n  else {\n    result = vec2( 0.5 + ((dir.z * angle) + 0.5) * 0.5, (dir.y * angle) + 0.5);\n  }\n  return result;\n}\n\n"),NC.setShaderModule("envmap-equirect.glsl","#define GLSLIFY 1 \nimport 'constants.glsl'\n\nvec2 latLongUVsFromDir(vec3 dir) {\n  // Math function taken from...\n  // http://gl.ict.usc.edu/Data/HighResProbes/\n  // Note: Scaling from u=[0,2], v=[0,1] to u=[0,1], v=[0,1]\n  float phi = acos(dir.z);\n  float theta = atan(dir.x, dir.y);\n  return vec2((1.0 + theta / PI) / 2.0, phi / PI);\n}\n\n// Note: when u == 0.5 z = 1.0\nvec3 dirFromLatLongUVs(float u, float v) {\n  // http://gl.ict.usc.edu/Data/HighResProbes/\n  float theta = PI*((u * 2.0) - 1.0);\n  float phi = PI*v;\n  return vec3(sin(phi)*sin(theta), sin(phi)*cos(theta), cos(phi));\n}\n\nvec3 dirFromPolar(vec2 polar) {\n  float u = polar.x / (PI * 2.0);\n  float v = polar.y / PI;\n  return dirFromLatLongUVs(u, v);\n}\n\n"),NC.setShaderModule("envmap-octahedral.glsl","#define GLSLIFY 1\nimport 'constants.glsl'\nimport 'GLSLUtils.glsl'\n#define sectorize(value) step(0.0, (value))*2.0-1.0\n#define sum(value) dot(clamp((value), 1.0, 1.0), (value))\n\nvec2 dirToSphOctUv(vec3 normal) {\n  normal = normalize(normal);\n  vec3 aNorm = abs(normal);\n  vec3 sNorm = sectorize(normal);\n  \n  vec2 dir = aNorm.xy;\n  float orient = atan(dir.x, max(dir.y,0.0000000000000001))/HalfPI;\n\n  dir = vec2(aNorm.z, length(aNorm.xy));\n  float pitch = atan(dir.y, dir.x)/HalfPI;\n\n  vec2 uv = vec2(sNorm.x*orient, sNorm.y*(1.0-orient))*pitch;\n\n  if (normal.z < 0.0) {\n    uv = sNorm.xy - abs(uv.ts)*sNorm.xy;\n  }\n  vec2 res = uv*0.5+0.5;\n  // Flip-v\n  // return res;\n  return vec2(res.x, 1.0 - res.y);\n}\n\nvec3 sphOctUvToDir(vec2 uv) {\n  uv = uv*2.0-1.0;\n  // Flip-v\n  uv.y = -uv.y;\n  vec2 suv = sectorize(uv);\n  float sabsuv = sum(abs(uv));\n  float pitch = sabsuv*HalfPI;\n\n  if (pitch <= 0.0) {\n    return vec3(0.0, 0.0, 1.0);\n  }\n  if (abs(pitch - PI) < 0.000001) {\n    return vec3(0.0, 0.0, -1.0);\n  }\n  if (sabsuv > 1.0) {\n    uv = (1.0-abs(uv.ts))*suv;\n  }\n\n  float orient = (abs(uv.s)/sabsuv)*HalfPI;\n  float sOrient = sin(orient);\n  float cOrient = cos(orient);\n  float sPitch = sin(pitch);\n  float cPitch = cos(pitch);\n\n  return vec3(\n    sOrient*suv.s*sPitch,\n    cOrient*suv.t*sPitch,\n    cPitch\n  );\n}\n\n"),NC.setShaderModule("GLSLBits.glsl",'#define GLSLIFY 1\n    \n/////////////////////////////////////////////////////////////////\n// http://concord-consortium.github.io/lab/experiments/webgl-gpgpu/script.js\nfloat shift_right(float v, float amt) {\n  v = floor(v) + 0.5;\n  return floor(v / exp2(amt));\n}\nfloat shift_left(float v, float amt) {\n  return floor(v * exp2(amt) + 0.5);\n}\n\nfloat mask_last(float v, float bits) {\n  return mod(v, shift_left(1.0, bits));\n}\nfloat extract_bits(float num, float from, float to) {\n  from = floor(from + 0.5);\n  to = floor(to + 0.5);\n  return mask_last(shift_right(num, from), to - from);\n}\n\n/////////////////////////////////////////////////////////////////\n// https://stackoverflow.com/questions/18453302/how-do-you-pack-one-32bit-int-into-4-8bit-ints-in-glsl-webgl\n\nconst vec4 bitEnc = vec4(1.,255.,65025.,16581375.);\nconst vec4 bitDec = 1./bitEnc;\nvec4 EncodeFloatRGBA (float v) {\n  vec4 enc = bitEnc * v;\n  enc = fract(enc);\n  enc -= enc.yzww * vec2(1./255., 0.).xxxy;\n  return enc;\n}\nfloat DecodeFloatRGBA (vec4 v) {\n  return dot(v, bitDec);\n}\n\n/////////////////////////////////////////////////////////////////\n// https://gist.github.com/Flexi23/1713774\n// \nvec2 encode16BitFloatInto2xUInt8(float v) {\n  vec2 c = vec2(0.);\n\n  int signum = (v >= 0.) ? 128 : 0;\n  v = abs(v);\n  int exponent = 15;\n  float limit = 1024.; // considering the bias from 2^-5 to 2^10 (==1024)\n  for(int exp = 15; exp > 0; exp--) {\n    if ( v < limit) {\n      limit /= 2.;\n      exponent--;\n    }\n  }\n\n  float rest;\n  if (exponent == 0) {\n    rest = v / limit / 2.;      // "subnormalize" implicite preceding 0. \n  } \n  else {\n    rest = (v - limit)/limit;   // normalize accordingly to implicite preceding 1.\n  }\n\n  int mantissa = int(rest * 2048.);   // 2048 = 2^11 for the (split) 11 bit mantissa\n  int msb = mantissa / 256;           // the most significant 3 bits go into the lower part of the first byte\n  int lsb = mantissa - msb * 256;     // there go the other 8 bit of the lower significance\n\n  c.x = float(signum + exponent * 8 + msb) / 255.;    // color normalization for texture2D\n  c.y = float(lsb) / 255.;\n\n  if (v >= 2048.) {\n    c.y = 1.;\n  }\n\n  return c;\n}\n\nfloat decode16BitFloatFrom2xUInt8(vec2 c) {\n  float v = 0.;\n\n  int ix = int(c.x*255.); // 1st byte: 1 bit signum, 4 bits exponent, 3 bits mantissa (MSB)\n  int iy = int(c.y*255.); // 2nd byte: 8 bit mantissa (LSB)\n\n  int s = (c.x >= 0.5) ? 1 : -1;\n  ix = (s > 0) ? ix - 128 : ix;   // remove the signum bit from exponent\n  int iexp = ix / 8;              // cut off the last 3 bits of the mantissa to select the 4 exponent bits\n  int msb = ix - iexp * 8;        // subtract the exponent bits to select the 3 most significant bits of the mantissa\n\n  int norm = (iexp == 0) ? 0 : 2048;          // distinguish between normalized and subnormalized numbers\n  int mantissa = norm + msb * 256 + iy;       // implicite preceding 1 or 0 added here\n  norm = (iexp == 0) ? 1 : 0;                 // normalization toggle\n  float exponent = pow( 2., float(iexp + norm) - 16.); // -5 for the the exponent bias from 2^-5 to 2^10 plus another -11 for the normalized 12 bit mantissa \n  v = float( s * mantissa ) * exponent;\n\n  return v;\n}\n\n// TODO : Encoding Float32 to 4x UInt8\n// http://concord-consortium.github.io/lab/experiments/webgl-gpgpu/script.js\n// http://ultraist.hatenablog.com/entry/20110608/1307539319\n\n'),NC.setShaderModule("GLSLUtils.glsl","#define GLSLIFY 1\n\nint ftoi(float val) {\n  return int(floor(val + 0.5));\n}\nivec2 ftoi(vec2 v2) {\n  return ivec2(ftoi(v2.x), ftoi(v2.y));\n}\nivec3 ftoi(vec3 v4) {\n  return ivec3(ftoi(v4.x), ftoi(v4.y), ftoi(v4.z));\n}\nivec4 ftoi(vec4 v4) {\n  return ivec4(ftoi(v4.x), ftoi(v4.y), ftoi(v4.z), ftoi(v4.w));\n}\n\n#ifdef ENABLE_ES3\n\nint imod(int x, int y) {\n  return x % y;\n}\n\nvoid setFlag(inout int flags, int flag) {\n  flags |= flag;\n}\n\nvoid clearFlag(inout int flags, int flag) {\n  flags &= ~flag;\n}\n\nbool testFlag(int flags, int flag) {\n  return (flags & flag) != 0;\n}\n\n// private function: Mangle me...\nivec2 _pixelIndexToUV(int index, int textureWidth) {\n  return ivec2(index % textureWidth, index / textureWidth);\n}\n\nvec4 fetchTexel(sampler2D texture, int textureWidth, int index) {\n  return texelFetch(texture, _pixelIndexToUV(index, textureWidth), 0);\n}\n\nvec4 fetchTexel(sampler2D texture, ivec2 textureSize, ivec2 texCoord) {\n  return texelFetch(texture, texCoord, 0);\n}\n\nvec4 fetchTexel(sampler2D texture, ivec2 textureSize, int index) {\n    return texelFetch(texture, _pixelIndexToUV(index, textureSize.x), 0);\n}\n\n#else\n\n// TODO: integrate: https://gist.github.com/mattatz/70b96f8c57d4ba1ad2cd\n\nint max(int a, int b) {\n  return a > b ? a : b;\n}\nint min(int a, int b) {\n  return a < b ? a : b;\n}\n\nfloat round(float val) {\n  return floor(val + 0.4);\n}\n\nint imod(int x, int y) {\n  return x-y*(x/y);\n}\n\nvoid setFlag(inout int flags, int flag) {\n  flags += flag;\n}\nvoid clearFlag(inout int flags, int flag) {\n  flags -= flag;\n}\n\nbool testFlag(int flags, int flag) {\n  return imod(flags / flag, 2) != 0;\n}\n\n// private function: Mangle me...\nvec2 _pixelIndexToUV(int index, int textureSize) {\n  float flTexSize = float(textureSize);\n  float x = (float(imod(index, textureSize))+0.5)/flTexSize;\n  float y = (floor(float(index / textureSize))+0.5)/flTexSize;\n  return vec2(x, y);\n}\n\nvec4 fetchTexel(sampler2D texture, int textureSize, int index) {\n  vec2 texCoord = _pixelIndexToUV(index, textureSize);\n  return texture2D(texture, texCoord);\n}\n\nvec4 fetchTexel(sampler2D texture, ivec2 textureSize, ivec2 texCoord) {\n  vec2 ftextureSize = vec2(textureSize);\n  return texture2D(texture, (vec2(texCoord) + 0.5) / ftextureSize);\n}\n\n#endif // ENABLE_ES3\n\nint uvToPixelIndex(vec2 uv, int textureSize) {\n  return int(uv.x * float(textureSize)) + (int(floor(uv.y * float(textureSize))) * textureSize);\n}\n\n"),NC.setShaderModule("Hammersley.glsl","#define GLSLIFY 1\nfloat RadicalInverse_VdC(uint bits) \n{\n  bits = (bits << 16u) | (bits >> 16u);\n  bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\n  bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\n  bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\n  bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\n  return float(bits) * 2.3283064365386963e-10; // / 0x100000000\n}\n// ----------------------------------------------------------------------------\nvec2 Hammersley(uint i, uint N)\n{\n  return vec2(float(i)/float(N), RadicalInverse_VdC(i));\n} \n"),NC.setShaderModule("ImportanceSampleGGX.glsl","#define GLSLIFY 1\nimport 'constants.glsl'\n\nvec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)\n{\n  float a = roughness*roughness;\n\n  float phi = 2.0 * PI * Xi.x;\n  float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));\n  float sinTheta = sqrt(1.0 - cosTheta*cosTheta);\n\n  // from spherical coordinates to cartesian coordinates\n  vec3 H = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);\n\n  // from tangent-space vector to world-space sample vector\n  vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n  vec3 tangent   = normalize(cross(up, N));\n  vec3 bitangent = cross(N, tangent);\n\n  vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n  return normalize(sampleVec);\n} \n"),NC.setShaderModule("materialparams.glsl","#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\nimport 'gamma.glsl'\n\n#ifdef ENABLE_MULTI_DRAW\n \nuniform sampler2D materialsTexture;\nuniform highp ivec2 materialsTextureSize;\n\nvec4 getMaterialValue(vec2 materialCoords, int valueIndex) {\n  int index = ftoi(materialCoords.x) + valueIndex;\n  ivec2 texelCoords = ivec2(imod(index, materialsTextureSize.x), index / materialsTextureSize.x);\n  \n  return fetchTexel(materialsTexture, materialsTextureSize, texelCoords);\n}\n\n#else // ENABLE_MULTI_DRAW\n\n////////////////////////\n// Material Param Helpers.\n\nvec4 getColorParamValue(vec4 value, sampler2D tex, int texType, vec2 texCoord) {\n  if (texType == 0) {\n    return value;\n  }\n  else if (texType == 1 || texType == 2) {\n    // Note: we assume textures are always in gamma space, and must be converted\n    // to linear. I cann't find evidence that 8-bit textures can be in linear space.\n    // TODO: Use SRGB textures.\n    return toLinear(texture2D(tex, texCoord));\n  }\n  else if (texType == 3) {\n    // Float HDR Texture. We assume these textures are in linear space.\n    return texture2D(tex, texCoord);\n  }\n  else\n    return value;\n}\n\nfloat luminanceFromRGB(vec3 rgb) {\n  return 0.2126*rgb.r + 0.7152*rgb.g + 0.0722*rgb.b;\n}\n\nfloat getLuminanceParamValue(float value, sampler2D tex, int texType, vec2 texCoord) {\n  if (texType == 0)\n    return value;\n  else\n    return luminanceFromRGB(texture2D(tex, texCoord).rgb);\n}\n\n#endif // ENABLE_MULTI_DRAW\n"),NC.setShaderModule("modelMatrix.glsl","#define GLSLIFY 1\n#ifdef ENABLE_FLOAT_TEXTURES\nimport 'GLSLUtils.glsl'\nimport 'transpose.glsl'\nmat4 getMatrix(sampler2D texture, int textureSize, int index) {\n  // Unpack 3 x 4 matrix columns into a 4 x 4 matrix.\n  vec4 col0 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 1);\n  vec4 col1 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 2);\n  vec4 col2 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 3);\n  mat4 result = transpose(mat4(col0, col1, col2, vec4(0.0, 0.0, 0.0, 1.0)));\n  return result;\n}\n\nmat4 getModelMatrix(int id) {\n  return getMatrix(instancesTexture, instancesTextureSize, id);\n}\n\n#else\n\nuniform mat4 modelMatrix;\n\nmat4 getModelMatrix(int id) {\n  return modelMatrix;\n}\n\n#endif\n\n"),NC.setShaderModule("PBRSurfaceRadiance.glsl","#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\nconst int ENVMAP_FLAG_HEADLIGHT =  1; // 1<<0;\n\nstruct MaterialParams {\n  vec3 baseColor;\n  float ambientOcclusion;\n  float metallic;\n  float roughness;\n  float reflectance;\n  float opacity;\n  float emission;\n};\n\n#ifndef ENABLE_PBR\n\nvec4 pbrSurfaceRadiance(in MaterialParams material, vec3 normal, in vec3 viewVector) {\n  vec3 irradiance = vec3(dot(normal, viewVector));\n  float ao = material.ambientOcclusion; \n  return vec4(material.baseColor * ao * irradiance + (material.emission * material.baseColor), material.opacity);\n\n  // return vec4(material.baseColor * ao * irradiance , material.opacity);\n}\n\n#else\n\nuniform int envMapFlags;\nuniform samplerCube irradianceMap;\nuniform samplerCube prefilterMap;\nuniform sampler2D brdfLUT;\n\nvec3 sampleIrradiance(vec3 dir) {\n  return texture(irradianceMap, dir).rgb;\n}\n\nvec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness) {\n  return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(max(1.0 - cosTheta, 0.0), 5.0);\n}\n\nfloat luminance(vec3 color) {\n  return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n}\n\nvec4 pbrSurfaceRadiance(in MaterialParams material, vec3 normal, in vec3 viewVector) {\n  if (envMapFlags == -1) {\n    vec3 irradiance = vec3(dot(normal, viewVector));\n    float ao = material.ambientOcclusion; \n    return vec4(material.baseColor * ao * irradiance + (material.emission * material.baseColor), material.opacity);\n  }\n\n  vec3 N = normal;\n  vec3 V = viewVector;\n  vec3 R = reflect(-V, N);\n  float roughness = material.roughness * material.roughness;\n  vec3 diffuseColor = (1.0 - material.metallic) * material.baseColor;\n\n  // Note: The specular reflectance of metallic surfaces is chromatic\n  // https://google.github.io/filament/Filament.html#listing_fnormal\n  vec3 F0 = 0.16 * material.reflectance * material.reflectance * (1.0 - material.metallic) + material.baseColor * material.metallic;\n\n  float NdotV = dot(N, V);\n\n  vec3 F = fresnelSchlickRoughness(max(NdotV, 0.0), F0, roughness);\n\n  vec3 kS = F;\n  vec3 kD = 1.0 - kS;\n  kD *= 1.0 - material.metallic;\n  float ao = material.ambientOcclusion; \n  \n  vec3 irradiance;\n  vec3 irradianceSampleDir = normal;\n  \n  bool headLightMode = testFlag(envMapFlags, ENVMAP_FLAG_HEADLIGHT);\n  if (headLightMode) {\n    irradianceSampleDir = viewVector;\n  }\n  irradiance = sampleIrradiance(irradianceSampleDir);\n  // vec3 irradiance = shGetIrradianceAt(shCoefficients, N);\n  vec3 diffuse    = irradiance * diffuseColor;\n  \n  const float MAX_REFLECTION_LOD = 4.0;\n  vec3 prefilteredColor = textureLod(prefilterMap, R,  roughness * MAX_REFLECTION_LOD).rgb;   \n  vec2 envBRDF  = texture(brdfLUT, vec2(max(NdotV, 0.0), roughness)).rg;\n  vec3 specular = prefilteredColor * (F * envBRDF.x + envBRDF.y);\n  \n  vec3 radiance = (kD * diffuse + specular) * ao;\n  \n  // Now handle semi-transparent objects. We need to be able to linearly interpolate\n  // opacity to make objects disappear, so we need a continuous change.\n  float opacity = material.opacity;\n  vec4 transparent = vec4((radiance * opacity) + specular, opacity + luminance(specular) + luminance(F));\n  vec4 result = mix(transparent, vec4(radiance, 1.0), opacity);\n\n  // Add emission on as the final component.\n  // Note: emission allows a material to blend off its specular component, \n  // which can also be used to make an object completely disappear if also transparent.\n  return mix(result, vec4(material.baseColor, opacity), material.emission);\n}\n\n#endif // ENABLE_PBR\n"),NC.setShaderModule("SHCoeffs.glsl","#define GLSLIFY 1\nuniform vec3 shCoeffs[9];\n\nvec3 sampleSHCoeffs(vec3 dir) {\n  // dir is assumed to have unit length\n  float x = dir.x, y = dir.y, z = dir.z;\n  // band 0\n  vec3 result = shCoeffs[ 0 ] * 0.886227;\n  // band 1\n  result += shCoeffs[ 1 ] * 2.0 * 0.511664 * y;\n  result += shCoeffs[ 2 ] * 2.0 * 0.511664 * z;\n  result += shCoeffs[ 3 ] * 2.0 * 0.511664 * x;\n  // band 2\n  result += shCoeffs[ 4 ] * 2.0 * 0.429043 * x * y;\n  result += shCoeffs[ 5 ] * 2.0 * 0.429043 * y * z;\n  result += shCoeffs[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n  result += shCoeffs[ 7 ] * 2.0 * 0.429043 * x * z;\n  result += shCoeffs[ 8 ] * 0.429043 * ( x * x - y * y );\n  return result;\n}\n"),NC.setShaderModule("gamma.glsl","#define GLSLIFY 1\nconst float gamma_const = 2.2;\n\nfloat toLinear(float v) {\n  return pow(v, gamma_const);\n}\n\nvec2 toLinear(vec2 v) {\n  return pow(v, vec2(gamma_const));\n}\n\nvec3 toLinear(vec3 v) {\n  return pow(v, vec3(gamma_const));\n}\n\nvec4 toLinear(vec4 v) {\n  return vec4(toLinear(v.rgb), v.a);\n}\n\nfloat toGamma(float v) {\n  return pow(v, 1.0 / gamma_const);\n}\n\nvec2 toGamma(vec2 v) {\n  return pow(v, vec2(1.0 / gamma_const));\n}\n\nvec3 toGamma(vec3 v) {\n  return pow(v, vec3(1.0 / gamma_const));\n}\n\nvec4 toGamma(vec4 v) {\n  return vec4(toGamma(v.rgb), v.a);\n}\n\nfloat toGamma(float v, float gamma) {\n  return pow(v, 1.0 / gamma);\n}\n\nvec2 toGamma(vec2 v, float gamma) {\n  return pow(v, vec2(1.0 / gamma));\n}\n\nvec3 toGamma(vec3 v, float gamma) {\n  return pow(v, vec3(1.0 / gamma));\n}\n\nvec4 toGamma(vec4 v, float gamma) {\n  return vec4(toGamma(v.rgb, gamma), v.a);\n}\n\n"),NC.setShaderModule("inverse.glsl","#define GLSLIFY 1\n\n#ifndef ENABLE_ES3\n\nfloat inverse(float m) {\n  return 1.0 / m;\n}\n\nmat2 inverse(mat2 m) {\n  return mat2(m[1][1],-m[0][1],\n             -m[1][0], m[0][0]) / (m[0][0]*m[1][1] - m[0][1]*m[1][0]);\n}\n\nmat3 inverse(mat3 m) {\n  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\n  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\n  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\n\n  float b01 = a22 * a11 - a12 * a21;\n  float b11 = -a22 * a10 + a12 * a20;\n  float b21 = a21 * a10 - a11 * a20;\n\n  float det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),\n              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),\n              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\n#endif\n\n"),NC.setShaderModule("transpose.glsl","#define GLSLIFY 1\n\n#ifndef ENABLE_ES3\n\nfloat transpose(float m) {\n  return m;\n}\n\nmat2 transpose(mat2 m) {\n  return mat2(m[0][0], m[1][0],\n              m[0][1], m[1][1]);\n}\n\nmat3 transpose(mat3 m) {\n  return mat3(m[0][0], m[1][0], m[2][0],\n              m[0][1], m[1][1], m[2][1],\n              m[0][2], m[1][2], m[2][2]);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(m[0][0], m[1][0], m[2][0], m[3][0],\n              m[0][1], m[1][1], m[2][1], m[3][1],\n              m[0][2], m[1][2], m[2][2], m[3][2],\n              m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\n#endif\n\n"),NC.setShaderModule("quadVertexFromID.glsl","#define GLSLIFY 1\nattribute float vertexIDs;\n\nvec2 getQuadVertexPositionFromID() {\n  int vertexID = int(vertexIDs);\n  if (vertexID == 0)\n    return vec2(-0.5, -0.5);\n  else if (vertexID == 1)\n    return vec2(0.5, -0.5);\n  else if (vertexID == 2)\n    return vec2(-0.5, 0.5);\n  else if (vertexID == 3)\n    return vec2(0.5, 0.5);\n  return vec2(0,0);\n}\n"),NC.setShaderModule("unpackHDR.glsl","#define GLSLIFY 1\n\nvec3 decodeHDR(const in vec3 ldrPixel, const in float cdmAlpha) {\n  float avg = (cdmAlpha * 16.0 - 8.0);\n  float scl = 1.0;\n  vec3 color;\n  color.x = (tan((ldrPixel.x-0.5)*1.5)/scl)+avg;\n  color.y = (tan((ldrPixel.y-0.5)*1.5)/scl)+avg;\n  color.z = (tan((ldrPixel.z-0.5)*1.5)/scl)+avg;\n\n  // convert from logarithmic curve to linear curve.\n  // subtract the epsilon that was added during encoding.\n  const float eps = 0.001;\n  color.x = pow(10.0, color.x) - eps;\n  color.y = pow(10.0, color.y) - eps;\n  color.z = pow(10.0, color.z) - eps;\n  return color;\n}\n\nvec3 decodeHDR(sampler2D ldrSampler, sampler2D cdmSampler, vec2 texCoord) {\n#ifdef ENABLE_ES3\n  float cdm = texture2D(cdmSampler, texCoord).r;\n#else\n  float cdm = texture2D(cdmSampler, texCoord).a;\n#endif\n  return decodeHDR(texture2D(ldrSampler, texCoord).rgb, cdm);\n}\n\n");class vC extends DC{constructor(A){super(A,"UnpackHDRShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(position*2.0, 0.0, 1.0);\n}\n"),this.setShaderStage("FRAGMENT_SHADER"," \nprecision highp float;\n#define GLSLIFY 1\n\nvarying vec2 v_texCoord;\nuniform sampler2D ldrSampler;\nuniform sampler2D cdmSampler;\nuniform vec4 srcRegion; // pos, and size of the source region\n\nimport 'unpackHDR.glsl'\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec2 srcUv = srcRegion.xy + (v_texCoord * srcRegion.zw);\n\n  fragColor = vec4(decodeHDR(ldrSampler, cdmSampler, srcUv), 1.0);\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n\n")}}const kC=(A,g)=>{let I,C,i;switch(g){case"UInt8":I=1,C=4,i=A.UNSIGNED_BYTE;break;case"SInt8":I=1,C=4,i=A.BYTE;break;case"UInt16":I=1,C=4,i=A.UNSIGNED_SHORT;break;case"SInt16":I=1,C=4,i=A.SHORT;break;case"UInt32":I=1,C=4,i=A.UNSIGNED_INT;break;case"SInt32":I=1,C=4,i=A.INT;break;case"Float32":I=1,C=4,i=A.FLOAT;break;case"Vec2":I=2,C=4,i=A.FLOAT;break;case"Vec3":I=3,C=4,i=A.FLOAT;break;case"Vec4":case"Color":I=4,C=4,i=A.FLOAT;break;case"RGBA":I=4,C=1,i=A.UNSIGNED_BYTE;break;default:throw"Unhandled Type"}return{dimension:I,elementSize:C,dataType:i}};class xC{}class zC extends xC{constructor(A,g,I,C){super(),this.gl=A,this.shaderAttrs=g,this.glattrbuffers=I,this.indexBuffer=C}bind(A){const g=this.gl;for(const A in this.shaderAttrs){if("instancedIds"==A)continue;const I=this.shaderAttrs[A],C=I.location;if(-1==C)continue;const i=this.glattrbuffers[A];if(!i){g.disableVertexAttribArray(C);continue}const e=kC(this.gl,i.dataType),t=e.dimension*e.elementSize,B=null!=i.offset?i.offset*e.dimension*e.elementSize:0,o=1==i.normalized,s=I.instanced;g.enableVertexAttribArray(C),g.bindBuffer(g.ARRAY_BUFFER,i.buffer),g.vertexAttribPointer(C,e.dimension,e.dataType,o,t,B),g.vertexAttribDivisor&&(1==s?g.vertexAttribDivisor(C,1):g.vertexAttribDivisor(C,0))}return g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,this.indexBuffer),!0}unbind(){const A=this.gl;for(const g in this.shaderAttrs){const I=this.shaderAttrs[g],C=I.location;-1==C&&A.enableVertexAttribArray(C),I.instanced&&A.vertexAttribDivisor(C,0)}A.bindBuffer(A.ELEMENT_ARRAY_BUFFER,null)}destroy(){}}class TC extends xC{constructor(A,g,I,C){super(),this.gl=A,this.vao=A.createVertexArray(),A.bindVertexArray(this.vao);for(const C in g){if("instancedIds"==C)continue;const i=g[C],e=i.location;if(-1==e)continue;let t=I[C];if(!t&&(C.endsWith("Next")&&(t=I[C.substring(0,C.length-4)],i.offset=1),!t)){A.disableVertexAttribArray(e);continue}const B=kC(A,t.dataType),o=B.dimension*B.elementSize,s=null!=i.offset?i.offset*B.dimension*B.elementSize:0,a=1==t.normalized,l=i.instanced;A.enableVertexAttribArray(e),A.bindBuffer(A.ARRAY_BUFFER,t.buffer),A.vertexAttribPointer(e,B.dimension,B.dataType,a,o,s),A.vertexAttribDivisor&&(1==l?A.vertexAttribDivisor(e,1):A.vertexAttribDivisor(e,0))}this.indexBuffer=C,this.indexBuffer&&A.bindBuffer(A.ELEMENT_ARRAY_BUFFER,this.indexBuffer)}bind(A){const g=this.gl;return g.bindVertexArray(this.vao),this.indexBuffer&&g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,this.indexBuffer),!0}unbind(){const A=this.gl;A.bindVertexArray(null),this.indexBuffer&&A.bindBuffer(A.ELEMENT_ARRAY_BUFFER,null)}destroy(){const A=this.gl;this.indexBuffer&&(A.bindVertexArray(this.vao),A.bindBuffer(A.ELEMENT_ARRAY_BUFFER,null)),A.deleteVertexArray(this.vao)}}function _C(A,g,I,C){return null==A.createVertexArray?new zC(A,g,I,C):new TC(A,g,I,C)}class PC{constructor(A){this.stack=[],this.gl=A,this.pushGLStack()}pushGLStack(){this.top={enabled:new Set,disabled:new Set,functions:{}},this.stack.push(this.top)}popGLStack(){const A=this.top;this.top=this.stack.pop(),this.stack.length>0&&(A.enabled.forEach((A=>{let g;for(g=this.stack.length-1;g>=0;g--){const I=this.stack[g];if(I.enabled.has(A))break;if(I.disabled.has(A)){this.gl.disable(A);break}}g<0&&this.gl.disable(A)})),A.disabled.forEach((A=>{let g;for(g=this.stack.length-1;g>=0;g--){const I=this.stack[g];if(I.disabled.has(A))break;if(I.enabled.has(A)){this.gl.enable(A);break}}g<0&&this.gl.enable(A)})))}glEnable(A){this.gl.enable(A),this.top.enabled.add(A)}glDisable(A){this.gl.disable(A),this.top.disabled.add(A)}setGLParam(A,g){this.top[A]=g,Array.isArray(g)?this.gl[A](...g):this.gl[A](g)}}class OC extends PC{}class jC extends PC{toHighlightRenderState(){const A=new OC(this.gl);return A.boundRendertarget=this.boundRendertarget,A.viewXfo=this.viewXfo,A.viewScale=this.viewScale,A.region=this.region,A.cameraMatrix=this.cameraMatrix,A.viewport=this.viewport,A.viewports=this.viewports,A.vrPresenting=this.vrPresenting,A}}class qC extends PC{}class $C extends HC{constructor(A,g){super(A),this.listenerIDs={},this.fbo=null,this.srcLDRTex=null,this.srcCDMTex=null,this.unpackHDRShader=null,this.shaderBinding=null,this.hdrImage=g;const I=()=>{this.__unpackHDRImage(this.hdrImage.getParams())};this.listenerIDs.updated=this.hdrImage.on("updated",I),this.hdrImage.isLoaded()?I():this.listenerIDs.loaded=this.hdrImage.on("loaded",I)}getImage(){return this.hdrImage}__unpackHDRImage(A){const g=this.__gl,I=A.data.ldr,C=A.data.cdm;if(this.fbo)this.srcLDRTex.bufferData(I),this.srcCDMTex.bufferData(C);else{this.configure({format:"RGBA",type:"FLOAT",width:I.width,height:I.height,filter:"LINEAR",wrap:"CLAMP_TO_EDGE"}),this.fbo=new fC(this.__gl,this),this.fbo.setClearColor(new l(0,0,0,0)),this.srcLDRTex=new HC(this.__gl,{format:"RGB",type:"UNSIGNED_BYTE",width:I.width,height:I.height,filter:"NEAREST",mipMapped:!1,wrap:"CLAMP_TO_EDGE",data:I}),this.srcCDMTex=new HC(this.__gl,{format:"webgl2"==g.name?"RED":"ALPHA",type:"UNSIGNED_BYTE",width:I.width,height:I.height,filter:"NEAREST",mipMapped:!1,wrap:"CLAMP_TO_EDGE",data:C}),this.unpackHDRShader=new vC(this.__gl);const A=this.unpackHDRShader.compileForTarget("GLHDRImage",{directives:["#define ENABLE_ES3"]});this.shaderBinding=_C(this.__gl,A.attrs,g.__quadattrbuffers,g.__quadIndexBuffer)}this.fbo.bindAndClear();const i=new PC(g);this.unpackHDRShader.bind(i,"GLHDRImage"),this.shaderBinding.bind(i);const e=i.unifs;this.srcLDRTex.bindToUniform(i,e.ldrSampler),this.srcCDMTex.bindToUniform(i,e.cdmSampler),g.uniform4fv(e.srcRegion.location,[0,0,1,1]),g.drawQuad(),this.fbo.unbind(),this.emit("updated")}bindToUniform(A,g,I){return super.bindToUniform(A,g,I)}destroy(){super.destroy(),this.fbo&&(this.fbo.destroy(),this.srcLDRTex.destroy(),this.srcCDMTex.destroy()),this.unpackHDRShader&&this.unpackHDRShader.destroy(),this.shaderBinding&&this.shaderBinding.destroy(),"loaded"in this.listenerIDs&&this.hdrImage.removeListenerById("loaded",this.listenerIDs.loaded),this.hdrImage.removeListenerById("updated",this.listenerIDs.updated)}}class Ai extends DC{constructor(A){super(A,"PreComputeBRDFShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(position*2.0, 0.0, 1.0);\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nvarying vec2 v_texCoord;\n\nimport 'GLSLUtils.glsl'\nimport 'Hammersley.glsl'\nimport 'ImportanceSampleGGX.glsl'\n\nfloat GeometrySchlickGGX(float NdotV, float roughness)\n{\n  float a = roughness;\n  float k = (a * a) / 2.0;\n\n  float nom   = NdotV;\n  float denom = NdotV * (1.0 - k) + k;\n\n  return nom / denom;\n}\n// ----------------------------------------------------------------------------\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)\n{\n  float NdotV = max(dot(N, V), 0.0);\n  float NdotL = max(dot(N, L), 0.0);\n  float ggx2 = GeometrySchlickGGX(NdotV, roughness);\n  float ggx1 = GeometrySchlickGGX(NdotL, roughness);\n\n  return ggx1 * ggx2;\n}\n\nvec2 IntegrateBRDF(float NdotV, float roughness)\n{\n  vec3 V;\n  V.x = sqrt(1.0 - NdotV*NdotV);\n  V.y = 0.0;\n  V.z = NdotV;\n\n  float A = 0.0;\n  float B = 0.0;\n\n  vec3 N = vec3(0.0, 0.0, 1.0);\n\n  for(uint i = 0u; i < SAMPLE_COUNT; ++i)\n  {\n    vec2 Xi = Hammersley(i, SAMPLE_COUNT);\n    vec3 H  = ImportanceSampleGGX(Xi, N, roughness);\n    vec3 L  = normalize(2.0 * dot(V, H) * H - V);\n\n    float NdotL = max(L.z, 0.0);\n    float NdotH = max(H.z, 0.0);\n    float VdotH = max(dot(V, H), 0.0);\n\n    if (NdotL > 0.0)\n    {\n      float G = GeometrySmith(N, V, L, roughness);\n      float G_Vis = (G * VdotH) / (NdotH * NdotV);\n      float Fc = pow(1.0 - VdotH, 5.0);\n\n      A += (1.0 - Fc) * G_Vis;\n      B += Fc * G_Vis;\n    }\n  }\n  A /= float(SAMPLE_COUNT);\n  B /= float(SAMPLE_COUNT);\n  return vec2(A, B);\n}\n\nout vec2 fragColor;\nvoid main(void) {\n  vec2 integratedBRDF = IntegrateBRDF(v_texCoord.x, v_texCoord.y);\n  fragColor = integratedBRDF;\n}\n\n")}}class gi extends DC{constructor(A){super(A,"ConvolveIrradianceShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(position*2.0, 0.0, 1.0);\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\nimport 'constants.glsl'\nimport 'convolve-helpers.glsl'\n\nuniform float roughness;\nuniform int faceId;\nvarying vec2 v_texCoord;\n\nout vec4 fragColor;\nvoid main(void) {\n\n  vec3 N = cubeFaceUvToDir(v_texCoord.x, v_texCoord.y, faceId);   \n\n  vec3 irradiance = vec3(0.0);\n\n  vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n  vec3 tangent   = normalize(cross(up, N));\n  vec3 bitangent = cross(N, tangent);\n\n  float nrSamples = 0.0; \n  for(float phi = 0.0; phi < 2.0 * PI; phi += SAMPLE_DELTA)\n  {\n    for(float theta = 0.0; theta < 0.5 * PI; theta += SAMPLE_DELTA)\n    {\n      // spherical to cartesian (in tangent space)\n      // from spherical coordinates to cartesian coordinates\n      vec3 H = vec3(cos(phi) * sin(theta), sin(phi) * sin(theta), cos(theta));\n      // tangent space to world\n      vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n\n      irradiance += sampleEnvMap(normalize(sampleVec)).rgb * cos(theta) * sin(theta);\n      nrSamples++;\n    }\n  }\n  irradiance = PI * irradiance * (1.0 / float(nrSamples));\n\n  fragColor = vec4(irradiance, 1.0);\n}\n")}}class Ii extends DC{constructor(A){super(A,"ConvolveSpecularShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(position*2.0, 0.0, 1.0);\n}\n"),this.setShaderStage("FRAGMENT_SHADER","precision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'ImportanceSampleGGX.glsl'\nimport 'convolve-helpers.glsl'\nimport 'Hammersley.glsl'\n  \n  \nuniform float roughness;\nuniform int faceId;\nvarying vec2 v_texCoord;\n\nout vec4 fragColor;\nvoid main(void) {\n\n  vec3 N = cubeFaceUvToDir(v_texCoord.x, v_texCoord.y, faceId);   \n\n  vec3 R = N;\n  vec3 V = R;\n\n  float totalWeight = 0.0;   \n  vec3 prefilteredColor = vec3(0.0);     \n  for(uint i = 0u; i < SAMPLE_COUNT; ++i)\n  {\n    vec2 Xi = Hammersley(i, SAMPLE_COUNT);\n    vec3 H  = ImportanceSampleGGX(Xi, N, roughness);\n    vec3 L  = normalize(2.0 * dot(V, H) * H - V);\n\n    float NdotL = max(dot(N, L), 0.0);\n    if (NdotL > 0.0)\n    {\n      prefilteredColor += sampleEnvMap(L).rgb * NdotL;\n      totalWeight      += NdotL;\n    }\n  }\n  prefilteredColor = prefilteredColor / totalWeight;\n\n  fragColor = vec4(prefilteredColor, 1.0);\n}\n")}}class Ci extends V{constructor(A,g){super(),this.__gl=A;const I=A;this.maxFragmentShaderTextureUnits=A.getParameter(this.__gl.MAX_TEXTURE_IMAGE_UNITS),I.__quadVertexIdsBuffer||I.setupInstancedQuad(),this.textureType=1,this.textureDesc=[0,0,0,0],this.__convolved=!1,this.__fbos=[]}convolveProbe(A){const I=this.__gl,C=new PC(I);C.shaderopts={directives:["#define ENABLE_ES3","#define ENABLE_FLOAT_TEXTURES"]},"Low"==g.deviceCategory?(C.shaderopts.directives.push("#define SAMPLE_DELTA 0.1"),C.shaderopts.directives.push("#define SAMPLE_COUNT 64u")):"Medium"==g.deviceCategory?(C.shaderopts.directives.push("#define SAMPLE_DELTA 0.08"),C.shaderopts.directives.push("#define SAMPLE_COUNT 256u")):(C.shaderopts.directives.push("#define SAMPLE_DELTA 0.025"),C.shaderopts.directives.push("#define SAMPLE_COUNT 1024u")),this.brdfLUTTexture=I.createTexture(),I.bindTexture(I.TEXTURE_2D,this.brdfLUTTexture),I.texImage2D(I.TEXTURE_2D,0,I.RG16F,512,512,0,I.RG,I.FLOAT,null),I.texParameteri(I.TEXTURE_2D,I.TEXTURE_WRAP_S,I.CLAMP_TO_EDGE),I.texParameteri(I.TEXTURE_2D,I.TEXTURE_WRAP_T,I.CLAMP_TO_EDGE),I.texParameteri(I.TEXTURE_2D,I.TEXTURE_MIN_FILTER,I.LINEAR),I.texParameteri(I.TEXTURE_2D,I.TEXTURE_MAG_FILTER,I.LINEAR);const i=new Ai(this.__gl),e=i.compileForTarget("GLProbe",C.shaderopts),t=_C(this.__gl,e.attrs,I.__quadattrbuffers,I.__quadIndexBuffer),B=I.createFramebuffer();I.bindFramebuffer(I.DRAW_FRAMEBUFFER,B),I.framebufferTexture2D(I.DRAW_FRAMEBUFFER,I.COLOR_ATTACHMENT0,I.TEXTURE_2D,this.brdfLUTTexture,0),i.bind(C),t.bind(C),I.clear(I.COLOR_BUFFER_BIT|I.DEPTH_BUFFER_BIT),I.viewport(0,0,512,512),I.drawQuad(),I.bindFramebuffer(I.DRAW_FRAMEBUFFER,null),I.deleteFramebuffer(B),i.unbind(C),i.destroy();{const g=new gi(this.__gl),i=g.compileForTarget("GLProbe",C.shaderopts),e=_C(this.__gl,i.attrs,I.__quadattrbuffers,I.__quadIndexBuffer);g.bind(C,"GLProbe"),e.bind(C);const t=C.unifs;A.bindToUniform(C,t.envMap);const B=64;this.irradianceCubeTex=I.createTexture(),I.bindTexture(I.TEXTURE_CUBE_MAP,this.irradianceCubeTex),I.texParameteri(I.TEXTURE_CUBE_MAP,I.TEXTURE_MAG_FILTER,I.LINEAR),I.texParameteri(I.TEXTURE_CUBE_MAP,I.TEXTURE_MIN_FILTER,I.LINEAR_MIPMAP_LINEAR),I.texParameteri(I.TEXTURE_CUBE_MAP,I.TEXTURE_WRAP_S,I.CLAMP_TO_EDGE),I.texParameteri(I.TEXTURE_CUBE_MAP,I.TEXTURE_WRAP_T,I.CLAMP_TO_EDGE),I.texParameteri(I.TEXTURE_CUBE_MAP,I.TEXTURE_WRAP_R,I.CLAMP_TO_EDGE);for(let A=0;A<6;A++)I.texImage2D(I.TEXTURE_CUBE_MAP_POSITIVE_X+A,0,I.RGBA32F,B,B,0,I.RGBA,I.FLOAT,null);const o=I.createFramebuffer();I.bindFramebuffer(I.DRAW_FRAMEBUFFER,o);for(let A=0;A<6;++A)I.uniform1i(t.faceId.location,A),I.framebufferTexture2D(I.DRAW_FRAMEBUFFER,I.COLOR_ATTACHMENT0,I.TEXTURE_CUBE_MAP_POSITIVE_X+A,this.irradianceCubeTex,0),I.viewport(0,0,B,B),I.clearColor(1,0,0,1),I.clear(I.COLOR_BUFFER_BIT|I.DEPTH_BUFFER_BIT),I.drawQuad();I.bindFramebuffer(I.DRAW_FRAMEBUFFER,null),I.deleteFramebuffer(o),I.generateMipmap(I.TEXTURE_CUBE_MAP)}{const g=new Ii(this.__gl),i=g.compileForTarget("GLProbe",C.shaderopts),e=_C(this.__gl,i.attrs,I.__quadattrbuffers,I.__quadIndexBuffer);g.bind(C,"GLProbe"),e.bind(C);const t=C.unifs;A.bindToUniform(C,t.envMap),this.specularCubetex=I.createTexture(),I.bindTexture(I.TEXTURE_CUBE_MAP,this.specularCubetex),I.texParameteri(I.TEXTURE_CUBE_MAP,I.TEXTURE_MAG_FILTER,I.LINEAR),I.texParameteri(I.TEXTURE_CUBE_MAP,I.TEXTURE_MIN_FILTER,I.LINEAR_MIPMAP_LINEAR),I.texParameteri(I.TEXTURE_CUBE_MAP,I.TEXTURE_WRAP_S,I.CLAMP_TO_EDGE),I.texParameteri(I.TEXTURE_CUBE_MAP,I.TEXTURE_WRAP_T,I.CLAMP_TO_EDGE),I.texParameteri(I.TEXTURE_CUBE_MAP,I.TEXTURE_WRAP_R,I.CLAMP_TO_EDGE);const B=256;for(let A=0;A<6;A++)I.texImage2D(I.TEXTURE_CUBE_MAP_POSITIVE_X+A,0,I.RGBA32F,B,B,0,I.RGBA,I.FLOAT,null);I.generateMipmap(I.TEXTURE_CUBE_MAP);const o=5;for(let A=0;A<o;++A){const g=B*Math.pow(.5,A),C=B*Math.pow(.5,A),i=I.createFramebuffer();I.bindFramebuffer(I.DRAW_FRAMEBUFFER,i),I.viewport(0,0,g,C);const e=A/(o-1);I.uniform1f(t.roughness.location,e);for(let g=0;g<6;++g)I.uniform1i(t.faceId.location,g),I.framebufferTexture2D(I.DRAW_FRAMEBUFFER,I.COLOR_ATTACHMENT0,I.TEXTURE_CUBE_MAP_POSITIVE_X+g,this.specularCubetex,A),I.drawQuad();I.bindFramebuffer(I.DRAW_FRAMEBUFFER,null),I.deleteFramebuffer(i)}g.destroy()}this.__convolved=!0}bind(A){const g=this.__gl,{irradianceMap:I,prefilterMap:C,brdfLUT:i,envMapFlags:e}=A.unifs;if(!this.__convolved)return I&&g.uniform1i(I.location,this.maxFragmentShaderTextureUnits-1),C&&g.uniform1i(C.location,this.maxFragmentShaderTextureUnits-1),e&&g.uniform1i(e.location,-1),!1;if(i){const I=A.boundTextures++;g.activeTexture(this.__gl.TEXTURE0+I),g.bindTexture(g.TEXTURE_2D,this.brdfLUTTexture),g.uniform1i(i.location,I)}if(I){const C=A.boundTextures++,i=this.__gl.TEXTURE0+C;g.activeTexture(i),g.bindTexture(g.TEXTURE_CUBE_MAP,this.irradianceCubeTex),g.uniform1i(I.location,C)}if(C){const I=A.boundTextures++,i=this.__gl.TEXTURE0+I;g.activeTexture(i),g.bindTexture(g.TEXTURE_CUBE_MAP,this.specularCubetex),g.uniform1i(C.location,I)}return e&&g.uniform1i(e.location,0),!0}destroy(){}}class ii extends DC{constructor(A){super(A,"EnvMapShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\n\nimport 'inverse.glsl'\nimport 'transpose.glsl'\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID() * 2.0;\n  v_texCoord = position * 0.5 + 0.5;\n\n  mat4 inverseProjection = inverse(projectionMatrix);\n  mat3 inverseModelview = transpose(mat3(viewMatrix));\n\n  // transform from the normalized device coordinates back to the view space\n  vec3 unprojected = (inverseProjection * vec4(position, 0, 1)).xyz;\n\n  // transfrom from the view space back to the world space\n  // and use it as a sampling vector\n  v_worldDir = inverseModelview * unprojected;\n\n  gl_Position = vec4(position, 0, 1);\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'gamma.glsl'\nimport 'constants.glsl'\n\nuniform float focus;\nuniform float exposure;\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\nvarying vec2 v_texCoord;\n\n#define ENABLE_INLINE_GAMMACORRECTION\n\n#define ENV_MAP_LATLONG 0\n#define ENV_MAP_OCT 1\n#define ENV_MAP_CUBE 2\n#define ENV_MAP_irradianceMap 8\n#define ENV_MAP_prefilterMap 3\n#define ENV_MAP_STEREO_LATLONG 4\n#define ENV_MAP_DUALFISHEYE 5\n#define ENV_MAP_SH 6\n#define ENV_MAP_BRDF_LUT 7\n\n#define ENV_MAPTYPE ENV_MAP_OCT\n\n#if (ENV_MAPTYPE == ENV_MAP_LATLONG)  \n\nimport 'envmap-equirect.glsl'\n\nuniform sampler2D backgroundImage;\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = latLongUVsFromDir(normalize(dir));\n  vec4 texel = texture2D(backgroundImage, uv) * exposure;\n  return vec4(texel.rgb/texel.a, 1.0);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_OCT)  \n\nimport 'envmap-octahedral.glsl'\n\nuniform sampler2D   envMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = dirToSphOctUv(normalize(dir));\n  if (false) {\n    vec4 texel = texture2D(envMap, uv);\n    return vec4(texel.rgb/texel.a, 1.0);\n  }\n  else {\n    return texture2D(envMap, uv) * exposure;\n  }\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_CUBE)\n\nuniform samplerCube cubeMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return texture(cubeMap, dir, 0.0);// * exposure;\n  // return textureLod(cubeMap, dir, exposure);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_irradianceMap)\n\nuniform samplerCube irradianceMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return textureLod(irradianceMap, dir, exposure);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_prefilterMap)\n\nuniform samplerCube prefilterMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return textureLod(prefilterMap, dir, exposure);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_STEREO_LATLONG)  \n\nimport 'envmap-equirect.glsl'\nuniform int eye;// L = 0, R = 1;\nuniform sampler2D backgroundImage;\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = latLongUVsFromDir(normalize(v_worldDir));\n  uv.y *= 0.5;\n  if (eye == 1) {\n    uv.y += 0.5;\n  }\n  vec4 texel = texture2D(backgroundImage, uv) * exposure;\n  fragColor = vec4(texel.rgb/texel.a, 1.0);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_DUALFISHEYE)\n\nimport 'envmap-dualfisheye.glsl'\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = dualfisheyeUVsFromDir(dir);\n  return texture2D(backgroundImage, uv) * exposure;\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_SH)\n\nimport 'SHCoeffs.glsl'\n\nvec4 sampleEnvMap(vec3 dir) {\n\treturn vec4(sampleSHCoeffs(dir) * exposure, 1.0);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_BRDF_LUT)\n\nuniform sampler2D brdfLUT;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return texture2D(brdfLUT, v_texCoord);\n}\n#endif\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  fragColor = sampleEnvMap(normalize(v_worldDir));\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb);\n#endif\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}class ei extends Ci{constructor(A,g){super(A.gl,"EnvMap"),this.__srcGLTex=null,this.__envMapShader=null,this.__envMapShaderBinding=null,this.__renderer=A,this.__envMap=g,this.__backgroundFocus=0,this.__envMap.isLoaded()?this.init():this.__envMap.once("loaded",(A=>{this.init()}))}init(){const A=this.__renderer.gl;A.__quadVertexIdsBuffer||A.setupInstancedQuad(),this.__srcGLTex=new $C(A,this.__envMap),this.__envMapShader=new ii(A);const g=this.__envMapShader.compileForTarget("GLEnvMap",{directives:["#define ENABLE_ES3"]});this.__envMapShaderBinding=_C(A,g.attrs,A.__quadattrbuffers,A.__quadIndexBuffer);const I=this.__envMap.headlightModeParam,C=()=>{I.value?this.textureDesc[3]|=1:this.textureDesc[3]&=-2};C(),I.on("valueChanged",(()=>{C(),this.emit("updated")})),this.convolveProbe(this.__srcGLTex),this.emit("updated")}getEnvMap(){return this.__envMap}getBackgroundFocus(){return this.__backgroundFocus}setBackgroundFocus(A){this.__backgroundFocus=A,this.__renderer.requestRedraw()}draw(A){if(this.__envMap.isLoaded()){const g=this.__gl;{this.__envMapShader.bind(A,"GLEnvMap");const I=A.unifs,{envMap:C,focus:i,exposure:e}=A.unifs;C&&this.__srcGLTex.bindToUniform(A,C),i&&g.uniform1f(i.location,this.__backgroundFocus),e&&g.uniform1f(e.location,A.exposure),this.__envMapShaderBinding.bind(A),g.depthMask(!1),A.bindViewports(I,(()=>{g.drawQuad()})),g.depthMask(!0)}}}destroy(){super.destroy(),this.__srcGLTex&&this.__srcGLTex.destroy()}}function ti(A){var g=typeof A;return null!=A&&("object"==g||"function"==g)}var Bi="object"==typeof global&&global&&global.Object===Object&&global,oi="object"==typeof self&&self&&self.Object===Object&&self,si=Bi||oi||Function("return this")(),ai=function(){return si.Date.now()},li=/\s/;var ni=/^\s+/;function di(A){return A?A.slice(0,function(A){for(var g=A.length;g--&&li.test(A.charAt(g)););return g}(A)+1).replace(ni,""):A}var hi=si.Symbol,ci=Object.prototype,ri=ci.hasOwnProperty,Gi=ci.toString,mi=hi?hi.toStringTag:void 0;var Qi=Object.prototype.toString;var Ei=hi?hi.toStringTag:void 0;function bi(A){return null==A?void 0===A?"[object Undefined]":"[object Null]":Ei&&Ei in Object(A)?function(A){var g=ri.call(A,mi),I=A[mi];try{A[mi]=void 0;var C=!0}catch(A){}var i=Gi.call(A);return C&&(g?A[mi]=I:delete A[mi]),i}(A):function(A){return Qi.call(A)}(A)}var Zi=/^[-+]0x[0-9a-f]+$/i,yi=/^0b[01]+$/i,ui=/^0o[0-7]+$/i,Ri=parseInt;function Vi(A){if("number"==typeof A)return A;if(function(A){return"symbol"==typeof A||function(A){return null!=A&&"object"==typeof A}(A)&&"[object Symbol]"==bi(A)}(A))return NaN;if(ti(A)){var g="function"==typeof A.valueOf?A.valueOf():A;A=ti(g)?g+"":g}if("string"!=typeof A)return 0===A?A:+A;A=di(A);var I=yi.test(A);return I||ui.test(A)?Ri(A.slice(2),I?2:8):Zi.test(A)?NaN:+A}var Fi=Math.max,Si=Math.min;function wi(A,g,I){var C,i,e,t,B,o,s=0,a=!1,l=!1,n=!0;if("function"!=typeof A)throw new TypeError("Expected a function");function d(g){var I=C,e=i;return C=i=void 0,s=g,t=A.apply(e,I)}function h(A){return s=A,B=setTimeout(r,g),a?d(A):t}function c(A){var I=A-o;return void 0===o||I>=g||I<0||l&&A-s>=e}function r(){var A=ai();if(c(A))return G(A);B=setTimeout(r,function(A){var I=g-(A-o);return l?Si(I,e-(A-s)):I}(A))}function G(A){return B=void 0,n&&C?d(A):(C=i=void 0,t)}function m(){var A=ai(),I=c(A);if(C=arguments,i=this,o=A,I){if(void 0===B)return h(o);if(l)return clearTimeout(B),B=setTimeout(r,g),d(o)}return void 0===B&&(B=setTimeout(r,g)),t}return g=Vi(g)||0,ti(I)&&(a=!!I.leading,e=(l="maxWait"in I)?Fi(Vi(I.maxWait)||0,g):e,n="trailing"in I?!!I.trailing:n),m.cancel=function(){void 0!==B&&clearTimeout(B),s=0,C=o=i=B=void 0},m.flush=function(){return void 0===B?t:G(ai())},m}class Xi extends DC{constructor(A){super(A,"ScreenQuadShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\nuniform vec2 pos;\nuniform vec2 size;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(vec2(-1.0, -1.0) + (pos * 2.0) + (v_texCoord * abs(size) * 2.0), 0.0, 1.0);\n  if (size.x < 0.0)\n    v_texCoord.x = 1.0 - v_texCoord.x;\n  if (size.y < 0.0)\n    v_texCoord.y = 1.0 - v_texCoord.y;\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D image;\nuniform vec4 color;\nuniform int isTextured;\n\nvarying vec2 v_texCoord;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  if (isTextured != 0)\n    fragColor = texture2D(image, v_texCoord);\n  else \n    fragColor = color;\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}class Hi{constructor(A,g){this.__gl=A,this.__pos=[0,0],this.__size=[1,1],this.flipY=!0,this.__glshader=new Xi(A),A.__quadVertexIdsBuffer||A.setupInstancedQuad();const I=this.__glshader.compileForTarget("GLScreenQuad",g);this.__quadBinding=_C(this.__gl,I.attrs,A.__quadattrbuffers,A.__quadIndexBuffer),this.ready=!0}bind(A,g,I,C){const i=A.unifs,e=this.__gl;g&&g instanceof HC?(e.uniform1i(i.isTextured.location,1),g.bindToUniform(A,A.unifs.image)):g&&g instanceof l&&(e.uniform1i(i.isTextured.location,0),e.uniform4fv(i.color.location,g.asArray()));{const A=i.pos;if(A){let g=I?I instanceof B?I.asArray():I:this.__pos;e.uniform2fv(A.location,g)}}{const A=i.size;if(A){let g=C?C instanceof B?C.asArray():C:this.__size;e.uniform2fv(A.location,g)}}this.__quadBinding.bind(A)}bindShader(A){return this.__glshader.bind(A,"GLScreenQuad")}draw(A,g,I,C){this.bind(A,g,I,C);const i=this.__gl;i.drawElements(i.TRIANGLES,6,i.UNSIGNED_SHORT,0)}}class Wi extends lA{constructor(A,g){super(),this.genBufferOpts={},this.__indexBuffer=null,this.__gl=A,this.__geom=g,this.__glattrbuffers={},this.__shaderBindings={},this.buffersDirty=!0;this.__geom.on("geomDataChanged",(A=>{this.dirtyBuffers(A)}));this.__geom.on("geomDataTopologyChanged",(A=>{this.clearBuffers(),this.dirtyBuffers(A)}))}getGeom(){return this.__geom}dirtyBuffers(A){this.genBufferOpts=A,this.buffersDirty=!0,this.emit("updated")}genBuffers(A){}updateBuffers(A){this.genBuffers(A),this.buffersDirty=!1}bind(A){if(this.__destroyed)throw new Error("Error binding a destroyed geom");this.buffersDirty&&this.updateBuffers();let g=this.__shaderBindings[A.shaderkey];if(!g){g=_C(this.__gl,A.attrs,this.__glattrbuffers,this.__indexBuffer),this.__shaderBindings[A.shaderkey]=g}g.bind(A)}unbind(A){const g=this.__shaderBindings[A.shaderkey];g&&g.unbind(A)}draw(A){throw new Error("Not implemented. Implement this method in a derived class.")}drawInstanced(A,g){throw new Error("Not implemented. Implement this method in a derived class.")}bindAndDraw(A){this.bind(A),this.draw(A)}clearBuffers(){const A=this.__gl;for(const g in this.__glattrbuffers){const I=this.__glattrbuffers[g];I.shared||A.deleteBuffer(I.buffer)}this.__glattrbuffers={};for(const A in this.__shaderBindings){this.__shaderBindings[A].destroy()}this.__shaderBindings={}}destroy(){this.__geom.deleteMetadata("glgeom"),this.clearBuffers(),this.__destroyed=!0,this.emit("destructing")}}class Yi extends Wi{constructor(A,g){super(A,g),this.__numTriIndices=0,this.__indexDataType=0,this.__numVertices=0,this.__numTriangles=0,this.__numRenderVerts=0}genBuffers(){super.genBuffers();const A=this.__gl,g=this.__geom.genBuffers(),I=g.indices;this.__numTriIndices=g.indices.length,I instanceof Uint8Array&&(this.__indexDataType=this.__gl.UNSIGNED_BYTE),I instanceof Uint16Array&&(this.__indexDataType=this.__gl.UNSIGNED_SHORT),I instanceof Uint32Array&&(this.__indexDataType=this.__gl.UNSIGNED_INT),this.__numVertices=this.__geom.getNumVertices(),this.__numTriangles=I.length/3,this.__numRenderVerts=g.numRenderVerts,this.__indexBuffer&&A.deleteBuffer(this.__indexBuffer),this.__indexBuffer=A.createBuffer(),A.bindBuffer(A.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),A.bufferData(A.ELEMENT_ARRAY_BUFFER,g.indices,A.STATIC_DRAW);for(const I in g.attrBuffers){const C=g.attrBuffers[I];this.__glattrbuffers[I]&&this.__glattrbuffers[I].buffer&&A.deleteBuffer(this.__glattrbuffers[I].buffer);const i=A.createBuffer();A.bindBuffer(A.ARRAY_BUFFER,i),A.bufferData(A.ARRAY_BUFFER,C.values,A.STATIC_DRAW),this.__glattrbuffers[I]={buffer:i,dataType:C.dataType,normalized:C.normalized},"textureCoords"==I&&(this.__glattrbuffers.texCoords=this.__glattrbuffers.textureCoords)}}updateBuffers(A){const g=this.__gl;if(this.__numVertices!=this.__geom.getNumVertices())return void this.genBuffers();const I=this.__geom.genBuffers({includeIndices:!1});for(const A in I.attrBuffers){const C=I.attrBuffers[A],i=this.__glattrbuffers[A];g.bindBuffer(g.ARRAY_BUFFER,i.buffer),g.bufferData(g.ARRAY_BUFFER,C.values,g.STATIC_DRAW)}this.buffersDirty=!1}clearBuffers(){this.__gl.deleteBuffer(this.__indexBuffer),this.__indexBuffer=null,super.clearBuffers()}draw(A){this.__gl.drawElements(this.__gl.TRIANGLES,this.__numTriIndices,this.__indexDataType,0)}drawInstanced(A,g){this.__gl.drawElementsInstanced(this.__gl.TRIANGLES,this.__numTriIndices,this.__indexDataType,0,g)}destroy(){super.destroy();this.__gl.deleteBuffer(this.__indexBuffer),this.__indexBuffer=null}}const Ki={MSAA_RENDERBUFFER:0,COLORBUFFER:1,DEPTHBUFFER:2};class pi extends nA{constructor(A){super(),this.__fbo=null,this.offscreenBuffer=null,this.depthTexture=null,this.__backgroundTexture=null,this.__backgroundGLTexture=null,this.offscreenBufferFbo=null,this.__width=0,this.__height=0,this.__canvasWidth=0,this.__canvasHeight=0,this.fb=null,this.depthBuffer=null,this.EXT_frag_depth=null,this.depthRange=[0,0],this.backgroundColorParam=new xA("BackgroundColor",new l("#eeeeee")),this.doubleClickTimeParam=new JA("DoubleClickTimeMS",200),this.renderer=A,this.__renderer=A,this.addParameter(this.doubleClickTimeParam);const g=this.__renderer.gl;this.__gl=g,this.quad=new Yi(g,new AI(1,1)),"webgl2"==g.name&&(this.offscreenBuffer=new HC(g,{type:"UNSIGNED_BYTE",format:"RGBA",filter:"LINEAR",width:4,height:4}),this.depthTexture=new HC(g,{type:g.UNSIGNED_INT_24_8,format:g.DEPTH_STENCIL,internalFormat:"webgl2"==g.name?g.DEPTH24_STENCIL8:g.DEPTH_COMPONENT,filter:g.NEAREST,wrap:g.CLAMP_TO_EDGE,width:4,height:4})),this.highlightedGeomsBuffer=new HC(g,{type:"UNSIGNED_BYTE",format:"RGBA",filter:"NEAREST",width:4,height:4}),this.highlightedGeomsBufferFbo=new fC(g,this.highlightedGeomsBuffer,!0),this.highlightedGeomsBufferFbo.setClearColor(new l(0,0,0,0));const I=()=>{const A=this.backgroundColorParam.value;A instanceof Gg?A instanceof BI?(this.__backgroundTexture=A,this.__backgroundGLTexture=new $C(g,A)):(this.__backgroundTexture=A,this.__backgroundGLTexture=new HC(g,A)):A instanceof l?(this.__backgroundGLTexture&&(this.__backgroundGLTexture.destroy(),this.__backgroundGLTexture=null,this.__backgroundTexture=null),this.offscreenBufferFbo&&this.offscreenBufferFbo.setClearColor(new l(A.asArray()))):console.warn("Invalid background:"+A),this.emit("updated")};I(),this.backgroundColorParam.on("valueChanged",I)}getRenderer(){return this.renderer}getWidth(){return this.__width}getHeight(){return this.__height}resize(A,g){if(this.__canvasWidth==A&&this.__canvasHeight==g)return;this.__canvasWidth=A,this.__canvasHeight=g,this.__width=A,this.__height=g,this.resizeRenderTargets(A,g);const I=new F(this.__width,this.__height);this.emit("resized",I)}resizeRenderTargets(A,I){this.highlightedGeomsBuffer&&this.highlightedGeomsBufferFbo.resize(A,I);const C=this.__renderer.gl;if(this.renderer.outlineThickness>0&&"image"==this.renderer.outlineMethod){if("Safari"==g.browserName||"webgl"==C.name)return void console.warn("Disabling outlines on Safari due to a regression in WebKit",g);this.fb&&(C.deleteFramebuffer(this.fb[Ki.MSAA_RENDERBUFFER]),C.deleteFramebuffer(this.fb[Ki.COLORBUFFER]),C.deleteFramebuffer(this.fb[Ki.DEPTHBUFFER]),this.colorRenderbuffer&&C.deleteRenderbuffer(this.colorRenderbuffer),this.depthBuffer&&C.deleteRenderbuffer(this.depthBuffer)),this.offscreenBuffer.resize(A,I),this.depthTexture.resize(A,I),this.fb=[],this.fb[Ki.MSAA_RENDERBUFFER]=C.createFramebuffer(),C.bindFramebuffer(C.FRAMEBUFFER,this.fb[Ki.MSAA_RENDERBUFFER]),this.colorRenderbuffer=C.createRenderbuffer(),C.bindRenderbuffer(C.RENDERBUFFER,this.colorRenderbuffer),this.renderer.multiSampledScreenBuffer?C.renderbufferStorage(C.RENDERBUFFER,C.RGBA8,A,I):C.renderbufferStorageMultisample(C.RENDERBUFFER,4,C.RGBA8,A,I),C.framebufferRenderbuffer(C.FRAMEBUFFER,C.COLOR_ATTACHMENT0,C.RENDERBUFFER,this.colorRenderbuffer),this.depthBuffer=C.createRenderbuffer(),C.bindRenderbuffer(C.RENDERBUFFER,this.depthBuffer),this.renderer.multiSampledScreenBuffer?C.renderbufferStorage(C.RENDERBUFFER,C.DEPTH24_STENCIL8,A,I):C.renderbufferStorageMultisample(C.RENDERBUFFER,4,C.DEPTH24_STENCIL8,A,I),C.framebufferRenderbuffer(C.FRAMEBUFFER,C.DEPTH_ATTACHMENT,C.RENDERBUFFER,this.depthBuffer),this.fb[Ki.COLORBUFFER]=C.createFramebuffer(),C.bindFramebuffer(C.FRAMEBUFFER,this.fb[Ki.COLORBUFFER]),C.framebufferTexture2D(C.FRAMEBUFFER,C.COLOR_ATTACHMENT0,C.TEXTURE_2D,this.offscreenBuffer.glTex,0),C.bindFramebuffer(C.FRAMEBUFFER,null),this.fb[Ki.DEPTHBUFFER]=C.createFramebuffer(),C.bindFramebuffer(C.FRAMEBUFFER,this.fb[Ki.DEPTHBUFFER]),C.framebufferTexture2D(C.FRAMEBUFFER,C.DEPTH_ATTACHMENT,C.TEXTURE_2D,this.depthTexture.glTex,0),C.bindFramebuffer(C.FRAMEBUFFER,null);const i=C.checkFramebufferStatus("webgl2"==C.name?C.DRAW_FRAMEBUFFER:C.FRAMEBUFFER);if(i!==C.FRAMEBUFFER_COMPLETE)switch(i){case C.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw new Error("The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.");case C.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw new Error("There is no attachment.");case C.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("Height and width of the attachment are not the same.");case C.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.");case 36061:throw new Error("The framebuffer is unsupported");default:throw new Error("Incomplete Frambuffer")}}}draw(A){const I=this.__renderer.gl;A.pushGLStack();const C=A.boundRendertarget;if(this.renderer.outlineThickness>0&&"image"==this.renderer.outlineMethod){if("Safari"==g.browserName||"webgl"==I.name)console.warn("Disabling outlines on Safari due to a regression in WebKit",g);else{this.fb||this.resizeRenderTargets(this.__width,this.__height);const g=this.fb[Ki.MSAA_RENDERBUFFER];I.bindFramebuffer("webgl2"==I.name?I.DRAW_FRAMEBUFFER:I.FRAMEBUFFER,g),A.boundRendertarget=g}}else A.boundRendertarget||I.bindFramebuffer(I.FRAMEBUFFER,null);I.viewport(0,0,this.__width,this.__height);const i=this.backgroundColorParam.value.asArray();I.clearColor(i[0],i[1],i[2],i[3]),I.colorMask(!0,!0,!0,!1),I.clear(I.COLOR_BUFFER_BIT|I.DEPTH_BUFFER_BIT),A.glEnable(I.DEPTH_TEST),this.__renderer.drawScene(A);const e=A.toHighlightRenderState();if(this.drawHighlights(e),1!=e.stack.length&&console.warn(" corrupt highlightRenderState.stack.length:",e.stack.length),this.fb){const g=I;g.bindFramebuffer(g.READ_FRAMEBUFFER,this.fb[Ki.MSAA_RENDERBUFFER]),g.bindFramebuffer(g.DRAW_FRAMEBUFFER,this.fb[Ki.COLORBUFFER]),g.clearBufferfv(g.COLOR,0,[0,0,0,0]),g.blitFramebuffer(0,0,this.__width,this.__height,0,0,this.__width,this.__height,g.COLOR_BUFFER_BIT,g.LINEAR),I.bindFramebuffer(I.DRAW_FRAMEBUFFER,C),A.boundRendertarget=C,I.viewport(0,0,this.__width,this.__height),I.disable(I.DEPTH_TEST);const i=this.__renderer.screenQuad;i.bindShader(A),i.draw(A,this.offscreenBuffer),I.enable(I.DEPTH_TEST)}A.popGLStack(),this.renderer.emit("redrawOccurred")}drawSilhouettes(A){A.pushGLStack();const g=this.__renderer.gl,I=g;I.bindFramebuffer(I.READ_FRAMEBUFFER,this.fb[Ki.MSAA_RENDERBUFFER]),I.bindFramebuffer(I.DRAW_FRAMEBUFFER,this.fb[Ki.DEPTHBUFFER]),I.clearBufferfv(I.COLOR,0,[1,1,1,1]),I.blitFramebuffer(0,0,this.__width,this.__height,0,0,this.__width,this.__height,I.DEPTH_BUFFER_BIT,I.NEAREST),I.bindFramebuffer(I.DRAW_FRAMEBUFFER,this.fb[Ki.MSAA_RENDERBUFFER]),A.boundRendertarget=this.fb[Ki.MSAA_RENDERBUFFER],I.viewport(0,0,this.__width,this.__height),A.glEnable(g.BLEND),A.glDisable(g.DEPTH_TEST),I.blendEquation(I.FUNC_ADD),I.blendFunc(I.SRC_ALPHA,I.ONE_MINUS_SRC_ALPHA),I.depthMask(!1),this.renderer.silhouetteShader.bind(A);const C=A.unifs;this.depthTexture.bindToUniform(A,C.depthTexture),I.uniform2f(C.screenSize.location,this.__width,this.__height),I.uniform1f(C.outlineThickness.location,this.renderer.outlineThickness*window.devicePixelRatio);const i=this.renderer.outlineColor.asArray();I.uniform4f(C.outlineColor.location,i[0],i[1],i[2],i[3]),I.uniform1f(C.outlineSensitivity.location,this.renderer.outlineSensitivity),I.uniform1f(C.outlineDepthBias.location,this.renderer.outlineDepthBias),I.uniform2f(C.depthRange.location,this.depthRange[0],this.depthRange[1]),this.quad.bindAndDraw(A),I.depthMask(!0),A.popGLStack()}drawHighlights(A){if(this.highlightedGeomsBufferFbo){const g=this.__renderer.gl;this.highlightedGeomsBufferFbo.bindForWriting(A),this.highlightedGeomsBufferFbo.clear(),A.pushGLStack(),A.glEnable(g.CULL_FACE),A.glEnable(g.DEPTH_TEST),A.glDisable(g.BLEND),g.depthFunc(g.LESS),g.depthMask(!0),A.glShader=null,this.__renderer.drawHighlightedGeoms(A),this.highlightedGeomsBufferFbo.unbindForWriting(A),g.viewport(0,0,this.__width,this.__height);{this.renderer.highlightsShader.bind(A),A.pushGLStack(),A.glEnable(g.BLEND),g.blendEquation(g.FUNC_ADD),g.blendFunc(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA);const I=A.unifs;g.uniform1f(I.outlineThickness.location,this.renderer.highlightOutlineThickness),this.highlightedGeomsBuffer.bindToUniform(A,I.highlightDataTexture),g.uniform2f(I.highlightDataTextureSize.location,A.region[2],A.region[3]),this.quad.bindAndDraw(A),A.popGLStack()}A.popGLStack()}}getManipulator(){return this.manipulator}setManipulator(A){this.manipulator!=A&&(this.manipulator&&this.manipulator.deactivateTool&&this.manipulator.deactivateTool(),this.manipulator=A,this.manipulator.activateTool&&this.manipulator.activateTool())}onPointerDown(A){console.warn("@GLBaseViewport#onPointerDown - Implement me!")}onPointerUp(A){console.warn("@GLBaseViewport#onPointerUp - Implement me!")}onPointerMove(A){console.warn("@GLBaseViewport#onPointerMove - Implement me!")}onPointerEnter(A){console.warn("@GLBaseViewport#onPointerEnter - Implement me!")}onPointerLeave(A){console.warn("@GLBaseViewport#onPointerLeave - Implement me!")}onMouseLeave(A){}onKeyDown(A){}onKeyUp(A){}}class Ni extends pi{constructor(A,g,I,C){super(A),this.__geomDataBufferSizeFactor=1,this.debugGeomDataBuffer=!1,this.debugOcclusionBuffer=!1,this.debugReductionBuffer=!1,this.debugHighlightedGeomsBuffer=!1,this.__x=0,this.__y=0,this.region=[0,0,0,0],this.__cameraXfo=new m,this.__cameraMat=new h,this.__viewMat=new h,this.__geomDataBufferInvalid=!0,this.__screenPos=null,this.__name=g,this.__projectionMatrix=new h,this.__frustumDim=new B,this.__bl=new B(0,0),this.__tr=new B(1,1),this.__prevDownTime=0;const i=this.__renderer.gl;this.__geomDataBuffer=new HC(i,{type:A.floatGeomBuffer?"FLOAT":"UNSIGNED_BYTE",format:"RGBA",filter:"NEAREST",width:I<=1?1:Math.floor(I/this.__geomDataBufferSizeFactor),height:C<=1?1:Math.floor(C/this.__geomDataBufferSizeFactor)}),this.__geomDataBufferFbo=new fC(i,this.__geomDataBuffer,!0),this.__geomDataBufferFbo.setClearColor(new l(0,0,0,0)),this.__camera=new IC("DefaultCamera"),this.setCamera(this.__camera),this.setManipulator(new SC({renderer:A})),this.resize(I,C)}getBl(){return this.__bl}setBl(A){this.__bl.x=A,this.__bl.y=A,this.resize(this.__canvasWidth,this.__canvasHeight)}getTr(){return this.__tr}setTr(A){this.__tr.x=A,this.__tr.y=A,this.resize(this.__canvasWidth,this.__canvasHeight)}getPosX(){return this.__x}getPosY(){return this.__y}resize(A,g){if(this.__canvasWidth==A&&this.__canvasHeight==g)return;this.__canvasWidth=A,this.__canvasHeight=g,this.__x=A*this.__bl.x,this.__y=A*this.__bl.y,this.__width=A*this.__tr.x-A*this.__bl.x,this.__height=g*this.__tr.y-g*this.__bl.y,this.region=[this.__x,this.__y,this.__width,this.__height],this.__camera&&this.__updateProjectionMatrix(),this.resizeRenderTargets(this.__width,this.__height);const I=new F(this.__width,this.__height);this.emit("resized",I)}resizeRenderTargets(A,g){super.resizeRenderTargets(A,g),this.__geomDataBufferFbo&&(this.__geomDataBufferFbo.resize(Math.floor(this.__width/this.__geomDataBufferSizeFactor),Math.floor(this.__height/this.__geomDataBufferSizeFactor)),this.renderGeomDataFbo())}getCamera(){return this.__camera}setCamera(A){this.__camera=A,this.depthRange=[this.__camera.getNear(),this.__camera.getFar()];const g=A.globalXfoParam,I=()=>{this.__cameraXfo=g.value,this.__cameraMat=this.__cameraXfo.toMat4(),this.__viewMat=this.__cameraMat.inverse()};I(),g.on("valueChanged",(()=>{I(),this.invalidateGeomDataBuffer(),this.emit("updated");const A=new P("CameraAndPointer",this.__cameraXfo);this.emit("viewChanged",A)})),this.__camera.on("projectionParamChanged",(()=>{this.__updateProjectionMatrix(),this.depthRange=[this.__camera.getNear(),this.__camera.getFar()],this.emit("updated")})),this.__updateProjectionMatrix()}__updateProjectionMatrix(){const A=this.__width/this.__height;this.__camera.updateProjectionMatrix(this.__projectionMatrix,A);const g=Math.tan(this.__camera.getFov()/2)*this.__camera.getNear()*2,I=g*A;this.__frustumDim.set(I,g)}getProjectionMatrix(){return this.__projectionMatrix}getViewMatrix(){return this.__viewMat}frameView(A){this.__width>0&&this.__height>0?this.__camera.frameView(this,A):this.once("resized",(()=>this.frameView()))}calcScreenPosFromWorldPos(A){const g=this.__projectionMatrix.multiply(this.__viewMat).transformVec4(new s(A.x,A.y,A.z,1));return g.x/=g.w,g.y/=g.w,new B((.5*g.x+.5)*this.__width,(-.5*g.y+.5)*this.__height)}calcRayFromScreenPos(A){const g=this.__canvasHeight*(1-this.__tr.y);let I=(A.x-this.__x)/this.__width,C=(A.y-g)/this.__height;I=2*I-1,C=2*C-1;const i=this.__cameraMat,e=this.__projectionMatrix.inverse();if(null==e)return console.warn(`Unable to generate Ray from screen pos:${A.toString()} in region ${this.region}`),new G;let t,B;if(this.__camera.isOrthographic()){const A=e.transformVec3(new o(I,-C,-1));A.z=0,t=i.transformVec3(A),B=new o(0,0,-1)}else t=i.translation,B=e.transformVec3(new o(I,-C,-1));return B=i.rotateVec3(B).normalize(),new G(t,B)}renderGeomDataFbo(){if(this.__geomDataBufferFbo){const A=new qC(this.renderer.__gl);this.initRenderState(A),A.geomDataFbo=this.__geomDataBufferFbo,this.__geomDataBufferFbo.bindAndClear(A),this.__renderer.drawSceneGeomData(A),this.__geomDataBufferInvalid=!1,this.__geomDataBufferFbo.unbind()}}invalidateGeomDataBuffer(){this.__geomDataBufferInvalid=!0}getGeomDataAtPos(A,g){if(this.__geomDataBufferFbo){if(this.__geomDataBufferInvalid&&(this.renderGeomDataFbo(),this.__screenPos=null),A===this.__screenPos)return this.__intersectionData;this.__screenPos=A,this.__intersectionData=null;const I=this.__renderer.gl;I.finish(),this.__geomDataBufferFbo.bindForReading();const C=this.__geomDataBufferFbo.width,i=this.__geomDataBufferFbo.height,e=Math.floor(A.x*(C/this.__width)),t=Math.floor(A.y*(i/this.__height));let B,o;if(this.__renderer.floatGeomBuffer){if(o=new Float32Array(4),I.readPixels(e,i-t-1,1,1,I.RGBA,I.FLOAT,o),0==o[3])return null;B=63&Math.round(o[0])}else{if(o=new Uint8Array(4),I.readPixels(e,i-t-1,1,1,I.RGBA,I.UNSIGNED_BYTE,o),I.bindFramebuffer(I.FRAMEBUFFER,null),0==o[0]&&0==o[1])return;B=Math.floor(o[1]/32)}this.__geomDataBufferFbo.unbind();const s=this.__renderer.getPass(B);if(!s)return console.warn("Geom data buffer returns invalid pass id:",B),null;const a=s.getGeomItemAndDist(o);if(a){if(!a.geomItem.isSelectable())return null;g||(g=this.calcRayFromScreenPos(A));const I=g.start.add(g.dir.scale(a.dist));this.__intersectionData=new H(A,g,I,o,a)}return this.__intersectionData}return null}getGeomItemsInRect(A,g){var I;if(this.__geomDataBufferFbo){const C=this.__renderer.gl;C.finish();const i=this.__geomDataBufferFbo.width,e=this.__geomDataBufferFbo.height,t=i/this.__width,B=e/this.__height,o=Math.round(A.x*t),s=Math.round(A.y*B),a=Math.round(g.x*t),l=Math.round(g.y*B),n=Math.round(e-l),d=Math.round(o),h=Math.round(a-o),c=Math.round(l-s),r=h*c;let G;this.__geomDataBufferFbo.bindForReading(),this.__renderer.floatGeomBuffer?(G=new Float32Array(4*r),C.readPixels(d,n,h,c,C.RGBA,C.FLOAT,G)):(G=new Uint8Array(4*r),C.readPixels(d,n,h,c,C.RGBA,C.UNSIGNED_BYTE,G)),C.bindFramebuffer(C.FRAMEBUFFER,null);const m=new Set;for(let A=0;A<r;A++){let g;const C=G.subarray(4*A,4*(A+1));if(this.__renderer.floatGeomBuffer){if(0==C[3])continue;g=Math.round(C[0])}else{if(0==C[0]&&0==C[1])continue;g=Math.floor(C[1]/64)}const i=null===(I=this.__renderer.getPass(g))||void 0===I?void 0:I.getGeomItemAndDist(C);if(i){if(!i.geomItem.isSelectable())continue;m.add(i.geomItem)}}return m}return new Set}__getPointerPos(A,g){return new B((A-this.getPosX())*window.devicePixelRatio,(g-this.getPosY())*window.devicePixelRatio)}prepareUIEvent(A){A.viewport=this}onPointerDown(A){if(this.prepareUIEvent(A),A.pointerType===q.mouse){const g=A;g.pointerPos=this.__getPointerPos(g.rendererX,g.rendererY),g.pointerRay=this.calcRayFromScreenPos(g.pointerPos),g.intersectionData=this.getGeomDataAtPos(g.pointerPos,g.pointerRay)}else if(A.pointerType===q.touch){const g=A;if(1==g.touches.length){const A=g.touches[0];g.pointerPos=this.__getPointerPos(A.rendererX,A.rendererY),g.pointerRay=this.calcRayFromScreenPos(g.pointerPos),g.intersectionData=this.getGeomDataAtPos(g.pointerPos,g.pointerRay)}}const g=Date.now();if(g-this.__prevDownTime<this.doubleClickTimeParam.value&&(A instanceof iA||A instanceof tA&&1==A.touches.length)){if(this.manipulator&&(this.manipulator.onPointerDoublePress(A),!A.propagating))return;if(this.emit("pointerDoublePressed",A),!A.propagating)return}else this.__prevDownTime=g;A.getCapture()&&(A.getCapture().onPointerDown(A),!A.propagating)||(null==A.intersectionData||(A.intersectionData.geomItem.onPointerDown(A),A.propagating))&&(this.emit("pointerDown",A),A.propagating&&(!this.manipulator||(this.manipulator.onPointerDown(A),A.propagating)))}onPointerUp(A){if(this.prepareUIEvent(A),A.pointerType===q.mouse){const g=A;g.pointerPos=this.__getPointerPos(g.rendererX,g.rendererY),g.pointerRay=this.calcRayFromScreenPos(g.pointerPos),g.intersectionData=this.getGeomDataAtPos(g.pointerPos,g.pointerRay)}else if(A.pointerType===q.touch){const g=A;if(0==g.touches.length&&1==g.changedTouches.length){const A=g.changedTouches[0];g.pointerPos=this.__getPointerPos(A.rendererX,A.rendererY),g.pointerRay=this.calcRayFromScreenPos(g.pointerPos),g.intersectionData=this.getGeomDataAtPos(g.pointerPos,g.pointerRay)}}A.getCapture()&&(A.getCapture().onPointerUp(A),!A.propagating)||(null==A.intersectionData||(A.intersectionData.geomItem.onPointerUp(A),A.propagating))&&(this.emit("pointerUp",A),A.propagating&&(!this.manipulator||(this.manipulator.onPointerUp(A),A.propagating)))}onPointerMove(A){if(this.prepareUIEvent(A),A.pointerType===q.mouse){const g=A,I=this.__getPointerPos(g.rendererX,g.rendererY);g.pointerPos=I,g.pointerRay=this.calcRayFromScreenPos(I)}else if(A.pointerType===q.touch){const g=A;for(let A=0;A<g.touches.length;A++){const I=g.touches[A];I.touchPos=this.__getPointerPos(I.rendererX,I.rendererY),I.touchRay=this.calcRayFromScreenPos(I.touchPos)}g.pointerPos=g.touches[0].touchPos,g.pointerRay=g.touches[0].touchRay}if(!A.getCapture()||(A.getCapture().onPointerMove(A),A.propagating)){if(A.intersectionData=this.getGeomDataAtPos(A.pointerPos,A.pointerRay),A.intersectionData){if(A.intersectionData.geomItem!=this.pointerOverItem){if(this.pointerOverItem&&(A.leftGeometry=this.pointerOverItem,this.pointerOverItem.onPointerLeave(A),A.propagating&&this.emit("pointerLeaveGeom",A)),A.propagating=!0,this.pointerOverItem=A.intersectionData.geomItem,this.pointerOverItem.onPointerEnter(A),!A.propagating)return;this.emit("pointerOverGeom",A)}if(A.propagating=!0,A.intersectionData.geomItem.onPointerMove(A),!A.propagating)return}else if(this.pointerOverItem){if(A.leftGeometry=this.pointerOverItem,this.pointerOverItem.onPointerLeave(A),this.pointerOverItem=null,!A.propagating)return;this.emit("pointerLeaveGeom",A)}this.emit("pointerMove",A),A.propagating&&(!this.manipulator||(this.manipulator.onPointerMove(A),A.propagating))}}onPointerEnter(A){this.prepareUIEvent(A),this.emit("pointerEnter",A),A.propagating&&(!this.manipulator||!this.manipulator.onPointerEnter||(this.manipulator.onPointerEnter(A),A.propagating))}onPointerLeave(A){this.prepareUIEvent(A),this.emit("pointerLeave",A),A.propagating&&(!this.manipulator||!this.manipulator.onPointerLeave||(this.manipulator.onPointerLeave(A),A.propagating))}onKeyDown(A){this.prepareUIEvent(A),this.manipulator&&(this.manipulator.onKeyDown(A),!A.propagating)||this.emit("keyDown",A)}onKeyUp(A){this.prepareUIEvent(A),this.manipulator&&(this.manipulator.onKeyUp(A),!A.propagating)||this.emit("keyUp",A)}onWheel(A){this.prepareUIEvent(A),A.pointerPos=this.__getPointerPos(A.rendererX,A.rendererY),A.pointerRay=this.calcRayFromScreenPos(A.pointerPos),A.intersectionData=this.getGeomDataAtPos(A.pointerPos,A.pointerRay),(null==A.intersectionData||(A.intersectionData.geomItem.onWheel(A),A.propagating))&&(this.manipulator?this.manipulator.onWheel(A):this.emit("mouseWheel",A))}onTouchCancel(A){this.prepareUIEvent(A),A.getCapture()&&(A.getCapture().onTouchCancel(A),!A.propagating)||this.manipulator&&(this.manipulator.onTouchCancel(A),!A.propagating)||this.emit("touchCancel",A)}initRenderState(A){A.viewXfo=this.__cameraXfo,A.viewScale=1,A.region=this.region,A.cameraMatrix=this.__cameraMat,A.viewport=this,A.viewports=[{region:this.region,viewMatrix:this.__viewMat,projectionMatrix:this.__projectionMatrix,viewportFrustumSize:this.__frustumDim,isOrthographic:this.__camera.isOrthographic()?1:0,fovY:this.__camera.getFov()}]}draw(A){const g=this.__renderer.gl;if(this.initRenderState(A),A.pushGLStack(),A.glDisable(g.BLEND),A.glEnable(g.DEPTH_TEST),A.glEnable(g.CULL_FACE),super.draw(A),A.popGLStack(),this.debugGeomDataBuffer){this.renderGeomDataFbo();const A=new jC(this.__renderer.gl),g=this.__renderer.screenQuad;g.bindShader(A),g.draw(A,this.__geomDataBuffer,new B(0,0),new B(1,1))}if(this.debugHighlightedGeomsBuffer){const A=new jC(this.__renderer.gl),g=this.__renderer.screenQuad;g.bindShader(A),g.draw(A,this.highlightedGeomsBuffer,new B(0,0),new B(1,1))}if(this.debugOcclusionBuffer){const g=this.__renderer.glGeomItemLibrary.occlusionDataBuffer,I=this.__renderer.screenQuad;I.bindShader(A);const C=A.unifs.image;g.bindColorTexture(A,C);const i=this.__renderer.gl;i.enable(i.BLEND),i.blendEquation(i.FUNC_ADD),i.blendFunc(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA),I.draw(A,null,new B(0,0),new B(1,1)),i.disable(i.BLEND)}if(this.debugReductionBuffer){const g=this.__renderer.glGeomItemLibrary.reductionDataBuffer,I=this.__renderer.screenQuad;I.bindShader(A);const C=A.unifs.image;g.bindColorTexture(A,C);const i=this.__renderer.gl;i.enable(i.BLEND),i.blendEquation(i.FUNC_ADD),i.blendFunc(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA),I.draw(A,null,new B(0,0),new B(1,1)),i.disable(i.BLEND)}}}class Ji{constructor(A,g){this.__xrvp=A,this.__treeItem=new ag("XRHead"),g.addChild(this.__treeItem),this.__mat4=new h,this.__localXfo=new m}setVisible(A){if(A&&!this.hmdGeomItem){const A=this.__xrvp.getAsset();if(!A)return;const g=A.getChildByName("HMD");if(!g)return;this.hmdGeomItem=g.clone({assetItem:A}),this.hmdGeomItem&&(this.hmdGeomItem.localXfoParam.value=new m(new o(0,-.035,-.03),new c(0,1,0,Math.PI),new o(.001,.001,.001)),this.__treeItem.addChild(this.hmdGeomItem,!1))}this.hmdGeomItem&&(this.hmdGeomItem.visibleParam.value=A)}update(A){this.__mat4.setDataArray(A.transform.matrix),this.__localXfo.setFromMat4(this.__mat4),this.__treeItem.localXfoParam.value=this.__localXfo}getTreeItem(){return this.__treeItem}getXfo(){return this.__localXfo}}class Di extends V{constructor(A,I,C){if(super(),this.pressedButtons=[],this.raycastTick=5,this.raycastArea=.005,this.raycastDist=.04,this.pointerRay=new G,this.raycastAreaCache=0,this.raycastDistCache=0,this.rayCastRenderTargetProjMatrix=new h,this.capturedItem=null,this.xrvp=A,this.inputSource=I,this.id=C,this.buttonPressed=!1,this.inputSource.gamepad.buttons.forEach(((A,g)=>{0!=g&&(this.pressedButtons[g]=A.pressed)})),this.mat4=new h,this.xfo=new m,this.treeItem=new ag("XRController:"+I.handedness+C),!g.isMobileDevice){this.tipItem=new ag("Tip");const g=new m;if(g.tr.set(0,-.05,-.13),this.tipItem.localXfoParam.value=g,this.treeItem.addChild(this.tipItem,!1),A.getTreeItem().addChild(this.treeItem),"tracked-pointer"==I.targetRayMode){switch(I.profiles[0]){case"htc-vive":localStorage.setItem("ZeaEngine_XRDevice","Vive");break;case"oculus-touch":case"oculus-touch-v2":case"oculus-touch-v3":localStorage.setItem("ZeaEngine_XRDevice","Oculus")}A.loadHMDResources().then((A=>{if(!A)return;const g=new m;let C;if(g.ori.setFromAxisAndAngle(new o(0,1,0),Math.PI),g.sc.set(.001,.001,.001),"htc-vive"==I.profiles[0])C=A.getChildByName("Controller"),g.tr.set(0,-.035,-.085);else switch(I.handedness){case"left":C=A.getChildByName("LeftController"),g.tr.set(0,-.035,-.085),g.sc.scaleInPlace(.85);break;case"right":C=A.getChildByName("RightController"),g.tr.set(0,-.035,-.085),g.sc.scaleInPlace(.85);break;case"none":case"left-right":case"left-right-none":C=A.getChildByName("Controller")}if(C){const I=C.clone({assetItem:A});I.localXfoParam.value=g,this.treeItem.addChild(I,!1)}}))}}this.tick=0}getHandedness(){return this.inputSource.handedness}getId(){return this.id}getTreeItem(){return this.treeItem}getTipItem(){return this.tipItem}getTipXfo(){return this.tipItem.globalXfoParam.value}getTouchPadValue(){return this.touchpadValue}isButtonPressed(){return this.buttonPressed}getControllerStageLocalXfo(){return this.xfo}getControllerTipStageLocalXfo(){return this.xfo.multiply(this.tipItem.localXfoParam.value)}updatePose(A,g,I){const C=g.getPose(I.gripSpace,A);if(C&&C.transform){if(this.mat4.setDataArray(C.transform.matrix),this.xfo.setFromMat4(this.mat4),this.treeItem.localXfoParam.value=this.xfo,this.hitTested=!1,this.raycastDist>0&&this.raycastTick>0&&this.tick%this.raycastTick==0){const A=this.getGeomItemAtTip();if(null!=A){const g=new gA(this.xrvp,this,0,this.buttonPressed?1:0);g.intersectionData=A,g.pointerRay=this.pointerRay,A.geomItem!=this.pointerOverItem&&(this.pointerOverItem&&(g.leftGeometry=this.pointerOverItem,this.pointerOverItem.onPointerLeave(g),g.propagating&&this.xrvp.emit("pointerLeaveGeom",g)),g.propagating=!0,this.pointerOverItem=A.geomItem,this.pointerOverItem.onPointerEnter(g),g.propagating&&this.xrvp.emit("pointerOverGeom",g)),A.geomItem.onPointerMove(g)}else if(this.pointerOverItem){const A=new gA(this.xrvp,this,0,this.buttonPressed?1:0);A.pointerRay=this.pointerRay,A.leftGeometry=this.pointerOverItem,this.pointerOverItem.onPointerLeave(A),this.pointerOverItem=null}}this.inputSource.gamepad.buttons.forEach(((A,g)=>{if(0!=g)if(A.pressed&&!this.pressedButtons[g]){this.pressedButtons[g]=!0;const A=new gA(this.xrvp,this,g,1);A.intersectionData=this.getGeomItemAtTip(),A.pointerRay=this.pointerRay,this.emit("buttonPressed",A)}else if(!A.pressed&&this.pressedButtons[g]){this.pressedButtons[g]=!1;const A=new gA(this.xrvp,this,g,0);this.emit("buttonReleased",A)}})),this.tick++}}getGeomItemAtTip(){if(this.hitTested)return this.intersectionData;if(this.hitTested=!0,0==this.raycastDist)return null;const A=this.xrvp.getRenderer(),g=this.tipItem.globalXfoParam.value.clone();g.sc.set(1,1,1),this.pointerRay.start=g.tr,this.pointerRay.dir=g.ori.getZaxis().negate();const I=this.raycastDist*this.xrvp.stageScale,C=this.raycastArea*this.xrvp.stageScale;return I==this.raycastDistCache&&C==this.raycastAreaCache||(this.rayCastRenderTargetProjMatrix.setOrthographicMatrix(-.5*C,.5*C,-.5*C,.5*C,0,I),this.raycastDistCache=I,this.raycastAreaCache=C),this.intersectionData=A.raycastWithProjection(g,this.rayCastRenderTargetProjMatrix,this.pointerRay),this.intersectionData}}class fi extends VC{constructor(A){super(),this.listenerIDs={},this.__controllerTriggersHeld=[],this.xrvp=A,this.vrControllerToolTip=new gI(.015),this.vrControllerToolTipMat=new XI("Cross","FlatSurfaceShader"),this.vrControllerToolTipMat.getParameter("BaseColor").value=new l("#03E3AC"),this.listenerIDs={}}addIconToController(A){const g=new kI("HandleToolTip",this.vrControllerToolTip,this.vrControllerToolTipMat);g.setSelectable(!1),A.getTipItem().removeAllChildren(),A.getTipItem().addChild(g,!1)}activateTool(){super.activateTool();for(const A of this.xrvp.getControllers())this.addIconToController(A);this.listenerIDs.controllerAdded=this.xrvp.on("controllerAdded",(A=>{this.addIconToController(A.controller)}))}deactivateTool(){super.deactivateTool();for(const A of this.xrvp.getControllers())A.getTipItem().removeAllChildren();this.xrvp.removeListenerById("controllerAdded",this.listenerIDs.controllerAdded)}__initMoveStage(){if(1==this.__controllerTriggersHeld.length)this.__grabPos=this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr.clone(),this.stageXfo__GrabStart=this.xrvp.getXfo().clone(),this.__invOri=this.stageXfo__GrabStart.ori.inverse();else if(2==this.__controllerTriggersHeld.length){const A=this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr,g=this.__controllerTriggersHeld[1].getControllerTipStageLocalXfo().tr;this.__grabDir=g.subtract(A),this.__grabPos=A.lerp(g,.5),this.__grabDir.y=0,this.__grabDist=this.__grabDir.length(),this.__grabDir.scaleInPlace(1/this.__grabDist),this.stageXfo__GrabStart=this.xrvp.getXfo().clone(),this.__grab_to_stage=this.__grabPos.subtract(this.stageXfo__GrabStart.tr)}}onVRControllerButtonDown(A){if(0!=A.button)return;-1==this.__controllerTriggersHeld.indexOf(A.controller)&&(this.__controllerTriggersHeld.push(A.controller),this.__initMoveStage(),A.stopPropagation())}onVRControllerButtonUp(A){if(0!=A.button)return;const g=this.__controllerTriggersHeld.indexOf(A.controller);-1!=g&&(this.__controllerTriggersHeld.splice(g,1),this.__initMoveStage(),A.stopPropagation())}onVRControllerDoubleClicked(A){console.log("onVRControllerDoubleClicked:",this.__controllerTriggersHeld.length);const g=this.xrvp.getXfo().clone();g.sc.set(1,1,1),this.xrvp.setXfo(g)}onVRPoseChanged(A){if(1==this.__controllerTriggersHeld.length){const A=this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr,g=new m;g.tr=this.__grabPos.subtract(A);const I=this.stageXfo__GrabStart.multiply(g);this.xrvp.setXfo(I)}else if(2==this.__controllerTriggersHeld.length){const A=this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr,g=this.__controllerTriggersHeld[1].getControllerTipStageLocalXfo().tr,I=A.lerp(g,.5),C=g.subtract(A);C.y=0;const i=C.length();if(i<1e-4)return;C.scaleInPlace(1/i);const e=new m,t=Math.max(Math.min(this.__grabDist/i,10),.1);e.sc.set(t,t,t);let B=this.__grabDir.angleTo(C);this.__grabDir.cross(C).y>0&&(B=-B),e.ori.rotateY(B);const o=e.ori.rotateVec3(this.__grabPos);e.tr.addInPlace(this.__grabPos.subtract(o));const s=this.__grabPos.scale(1-t);e.tr.addInPlace(e.ori.rotateVec3(s));const a=this.__grabPos.subtract(I).scale(t);e.tr.addInPlace(e.ori.rotateVec3(a));const l=this.stageXfo__GrabStart.multiply(e);this.xrvp.setXfo(l)}}onPointerDown(A){A.pointerType===q.xr&&this.onVRControllerButtonDown(A)}onPointerMove(A){A.pointerType===q.xr&&this.onVRPoseChanged(A)}onPointerUp(A){A.pointerType===q.xr&&this.onVRControllerButtonUp(A)}onPointerDoublePress(A){A.pointerType===q.xr&&this.onVRControllerDoubleClicked(A)}}class Mi extends pi{constructor(A){super(A),this.viewXfo=new m,this.stageXfo=new m,this.invStageMatrix=new h,this.session=null,this.hmd="",this.region=[],this.projectionMatrices=[],this.viewMatrices=[],this.cameraMatrices=[],this.doubleClickTimeParam.value=300,this.__projectionMatricesUpdated=!1,this.__stageTreeItem=new ag("VRStage"),this.__stageTreeItem.setVisible(!1),this.__renderer.addTreeItem(this.__stageTreeItem),this.__xrhead=new Ji(this,this.__stageTreeItem),this.controllersMap={},this.controllers=[],this.controllerPointerDownTime=[],this.spectatorMode=!1,this.tick=0;const g=new m;g.ori.setFromAxisAndAngle(new o(1,0,0),.5*Math.PI),this.setXfo(g),this.setManipulator(new fi(this))}getRenderer(){return this.renderer}getAsset(){return this.__vrAsset}getTreeItem(){return this.__stageTreeItem}getVRHead(){return this.__xrhead}getXfo(){return this.stageXfo}setXfo(A){this.stageXfo=A,this.__stageTreeItem.globalXfoParam.value=A,this.invStageMatrix=A.inverse().toMat4(),this.stageScale=A.sc.x}getControllers(){return this.controllers}getHMDName(){return this.hmd}isPresenting(){return null!=this.session}setSpectatorMode(A){if(!A){const A=this.__renderer.gl;A.bindFramebuffer(A.FRAMEBUFFER,null),A.viewport(0,0,A.drawingBufferWidth,A.drawingBufferHeight);let g=this.backgroundColorParam.value.asArray();A.clearColor(g[0],g[1],g[2],g[3]),A.colorMask(!0,!0,!0,!0),A.clear(A.COLOR_BUFFER_BIT|A.DEPTH_BUFFER_BIT)}this.spectatorMode=A}__startSession(){const A=(g,I)=>{this.session&&(this.session.requestAnimationFrame(A),this.drawXRFrame(I))};this.session.requestAnimationFrame(A)}loadHMDResources(){if(g.isMobileDevice)return Promise.resolve(null);let A=localStorage.getItem("ZeaEngine_XRDevice");if(A||(A="Oculus",localStorage.setItem("ZeaEngine_XRDevice",A)),this.hmd!=A)this.hmdAssetPromise=void 0;else if(this.hmdAssetPromise)return this.hmdAssetPromise;return this.hmd=A,this.hmdAssetPromise=new Promise(((g,I)=>{{let I;switch(A){case"Vive":default:I="ZeaEngine/Vive.vla";break;case"Oculus":I="ZeaEngine/Oculus.vla"}if(!FA.commonResources[I]){const A=new RC(I);A.load(FA.systemUrls[I]),FA.commonResources[I]=A}this.__vrAsset=FA.getCommonResource(I);const C=()=>{const A=this.__vrAsset.getMaterialLibrary(),I=A.getMaterialNames();for(const g of I){const I=A.getMaterial(g,!1);I&&I.setShaderName("SimpleSurfaceShader")}this.__vrAsset.traverse((A=>{A.setSelectable(!1)})),g(this.__vrAsset)};this.__vrAsset.isLoaded()?C():this.__vrAsset.once("loaded",C)}})),this.hmdAssetPromise}startPresenting(){return new Promise(((A,I)=>{this.spectatorMode||this.setSpectatorMode(!1);(()=>{navigator.xr.requestSession("immersive-vr",{requiredFeatures:["local-floor"],optionalFeatures:["bounded-floor"]}).then((C=>{const i=this.__renderer.getViewport();if(i){const A=i.getCamera().globalXfoParam.value,g=new m;g.tr=A.tr.clone(),g.tr.z-=1.3;const I=A.ori.getZaxis();I.z=0,I.normalizeInPlace(),g.ori.setFromDirectionAndUpvector(I,new o(0,0,1)),this.setXfo(g)}C.addEventListener("end",(A=>{this.__stageTreeItem.setVisible(!1),this.session=null,this.emit("presentingChanged",new x(!1))}));const e=A=>{console.log("creating controller:",A.handedness,A.profiles);const g=this.controllers.length,I=new Di(this,A,g);this.controllersMap[A.handedness]=I,this.controllers[g]=I;const C=new W(I);return this.emit("controllerAdded",C),I};C.addEventListener("selectstart",(A=>{const g=this.controllersMap[A.inputSource.handedness];g&&(g.buttonPressed=!0,this.onPointerDown(new gA(this,g,0,1)))})),C.addEventListener("selectend",(A=>{const g=this.controllersMap[A.inputSource.handedness];g&&(g.buttonPressed=!1,this.onPointerUp(new gA(this,g,0,0)))})),C.addEventListener("inputsourceschange",(A=>{for(const g of A.added)0!=g.profiles.length&&e(g)})),this.session=C;const t=new XRWebGLLayer(C,this.__gl);C.updateRenderState({baseLayer:t}),this.__width=t.framebufferWidth,this.__height=t.framebufferHeight,this.region=[0,0,this.__width,this.__height],this.depthRange=[C.renderState.depthNear,C.renderState.depthFar],this.resizeRenderTargets(this.__width,this.__height);const B=g=>{this.__refSpace=g,this.__stageTreeItem.setVisible(!0),this.emit("presentingChanged",new x(!0)),this.loadHMDResources().then((()=>{this.__startSession(),A()}))};C.requestReferenceSpace(g.isMobileDevice?"local":"bounded-floor").catch((A=>{console.log("Falling back to local-floor reference space"),C.requestReferenceSpace("local-floor").then(B)})).then((A=>{B(A)})).catch((A=>{console.warn(A.message),I(new Error("Unable to start XR Session:"+A.message))}))})).catch((A=>{console.warn(A.message)}))})()}))}stopPresenting(){this.session&&this.session.end()}togglePresenting(){this.session?this.stopPresenting():this.startPresenting()}updateControllers(A){const g=this.session.inputSources;for(let I=0;I<g.length;I++){const C=g[I];if(0==C.profiles.length)return;this.controllers[I]?this.controllers[I].updatePose(this.__refSpace,A,C):console.warn("Missing controller")}}initCullingRenderState(A){A.viewXfo=this.viewXfo,A.viewScale=1,A.region=this.region,A.cameraMatrix=A.viewXfo.toMat4(),A.viewport=this,A.viewports=[{region:this.region,viewMatrix:A.cameraMatrix.inverse(),isOrthographic:0}]}drawXRFrame(A){const I=A.session,C=I.renderState.baseLayer,i=A.getViewerPose(this.__refSpace);if(!i)return;this.__xrhead.update(i);const e=this.__xrhead.getTreeItem().globalXfoParam.value;this.viewXfo=e;const t=i.views;if(!this.__projectionMatricesUpdated){this.projectionMatrices=[],this.viewMatrices=[],this.cameraMatrices=[];for(let A=0;A<t.length;A++){const g=t[A],I=new h;I.setDataArray(g.projectionMatrix),this.projectionMatrices[A]=I,this.viewMatrices[A]=new h,this.cameraMatrices[A]=new h}this.__projectionMatricesUpdated=!0}const B=this.__renderer.gl;B.bindFramebuffer(B.FRAMEBUFFER,C.framebuffer);let o=this.backgroundColorParam.value.asArray();B.clearColor(o[0],o[1],o[2],o[3]),B.colorMask(!0,!0,!0,!0),B.clear(B.COLOR_BUFFER_BIT|B.DEPTH_BUFFER_BIT),this.depthRange=[I.renderState.depthNear,I.renderState.depthFar];const s=new jC(this.__renderer.gl);s.boundRendertarget=C.framebuffer,s.region=this.region,s.viewport=this,s.vrviewport=this,s.viewports=[];for(let A=0;A<t.length;A++){const g=t[A];this.viewMatrices[A].setDataArray(g.transform.inverse.matrix),this.viewMatrices[A].multiplyInPlace(this.invStageMatrix);const I=C.getViewport(g);s.viewports.push({viewMatrix:this.viewMatrices[A],projectionMatrix:this.projectionMatrices[A],region:[I.x,I.y,I.width,I.height],isOrthographic:0})}s.viewXfo=e,s.viewScale=1/this.stageScale,s.cameraMatrix=s.viewXfo.toMat4(),s.region=this.region,s.vrPresenting=!0,this.draw(s);const a=new IA(this,e,this.controllers);this.updateControllers(A),a.getCapture()&&a.getCapture().onPointerMove(a),this.manipulator&&a.propagating&&this.manipulator.onPointerMove(a);const l=new j(s.viewXfo);if(l.hmd=this.hmd,l.controllers=this.controllers,l.viewport=this,l.vrviewport=this,this.emit("viewChanged",l),this.spectatorMode&&!g.isMobileDevice&&this.tick%5==0){const A=this.__renderer.getViewport();if(A){this.__xrhead.setVisible(!0);const g=new jC(this.renderer.__gl);A.draw(g),this.__xrhead.setVisible(!1)}}this.tick++}onPointerDown(A){A.intersectionData=A.controller.getGeomItemAtTip(),A.pointerRay=A.controller.pointerRay;const g=Date.now();if(g-this.controllerPointerDownTime[A.controller.id]<this.doubleClickTimeParam.value){if(this.emit("pointerDoublePressed",A),!A.propagating)return;if(this.manipulator&&(this.manipulator.onPointerDoublePress(A),!A.propagating))return}this.controllerPointerDownTime[A.controller.id]=g,A.getCapture()&&(A.getCapture().onPointerDown(A),!A.propagating)||(null==A.intersectionData||(A.intersectionData.geomItem.onPointerDown(A),A.propagating))&&(this.emit("pointerDown",A),A.propagating&&this.manipulator&&this.manipulator.onPointerDown(A))}onPointerUp(A){this.controllerPointerDownTime[A.controller.id]=0,A.pointerRay=A.controller.pointerRay,A.getCapture()&&(A.getCapture().onPointerUp(A),!A.propagating)||(A.intersectionData=A.controller.getGeomItemAtTip(),(null==A.intersectionData||(A.intersectionData.geomItem.onPointerUp(A),A.propagating))&&(this.emit("pointerUp",A),A.propagating&&(!this.manipulator||(this.manipulator.onPointerUp(A),A.propagating))))}}class Li extends u{constructor(A){super(),this.dirty=!1,this.unif=A}bind(A){}unbind(A){}destroy(){}}class Ui extends Li{constructor(A,g,I,C,i){super(C),this.gltexture=null,this.textureType=-1;const e=I.getName();switch(this.param=I,this.unif=C,this.textureUnif=i[e+"Tex"],this.textureTypeUnif=i[e+"TexType"],this.uniform1i=A.uniform1i.bind(A),this.unif.type){case"Boolean":case"SInt32":this.uniformXX=A.uniform1i.bind(A);break;case"UInt32":"webgl2"==A.name?this.uniformXX=A.uniform1ui.bind(A):this.uniformXX=A.uniform1i.bind(A);break;case"Float32":this.uniformXX=A.uniform1f.bind(A)}this.bind=this.bindValue;const t=I=>{let C=HC.getCachedGLTexture2D(I);C||(C="FLOAT"===I.type?new $C(A,I):new HC(A,I),HC.setCachedGLTexture2D(I,C)),this.texBinding=C.preBind(this.textureUnif,i),C.on("updated",(()=>{g.emit("updated")})),this.gltexture=C,this.gltexture.addRef(this),this.textureType=1,this.bind=this.bindTexture,g.emit("updated")};let B,o;if(this.update=()=>{try{B||("boolean"==typeof I.value?this.val=I.value?1:0:this.val=I.value)}catch(A){}g.emit("updated")},I instanceof mg){const A=A=>{A.isLoaded()?t(A):o=A.on("loaded",(()=>{t(B)})),B=A},C=()=>{HC.getCachedGLTexture2D(B).removeRef(this),this.texBinding=null,this.gltexture=null,this.textureType=-1,this.bind=this.bindValue,o&&B.removeListenerById("loaded",o),B=null,o=null,g.emit("updated")};I.getImage()&&A(I.getImage()),I.on("textureConnected",(()=>{A(I.getImage())})),I.on("textureDisconnected",(()=>{C()}))}this.dirty=!0,I.on("valueChanged",(()=>{this.dirty=!0,g.emit("updated")}))}bindValue(A){this.dirty&&(this.update(),this.dirty=!1),this.unif&&this.uniformXX(this.unif.location,this.val),this.textureTypeUnif&&this.uniform1i(this.textureTypeUnif.location,0)}bindTexture(A){this.dirty&&(this.update(),this.dirty=!1),this.gltexture.bindToUniform(A,this.textureUnif,this.texBinding)}}class vi extends Li{constructor(A,g,I,C){switch(super(C),this.param=I,this.unif.type){case"Vec2":this.uniformXX=A.uniform2fv.bind(A);break;case"Vec3":this.uniformXX=A.uniform3fv.bind(A);break;case"Vec4":this.uniformXX=A.uniform4fv.bind(A)}this.dirty=!0,I.on("valueChanged",(()=>{this.dirty=!0,g.emit("updated")}))}bind(A){this.dirty&&(this.values=this.param.value.asArray(),this.dirty=!1),this.uniformXX(this.unif.location,this.values)}unbind(){}destroy(){}}class ki extends Li{constructor(A,g,I,C){switch(super(C),this.values=new Float32Array(0),this.param=I,this.unif.type){case"Mat3":this.uniformMatrixXXX=A.uniformMatrix3fv.bind(A);break;case"Mat4":this.uniformMatrixXXX=A.uniformMatrix4fv.bind(A)}this.dirty=!0,I.on("valueChanged",(()=>{this.dirty=!0,g.emit("updated")}))}bind(A){this.dirty&&(this.values=this.param.value.asArray(),this.dirty=!1),this.uniformMatrixXXX(this.unif.location,!1,this.values)}unbind(){}destroy(){}}class xi extends Li{constructor(A,g,I,C,i){super(C);const e=I.getName();this.param=I,this.textureUnif=i[e+"Tex"],this.textureTypeUnif=i[e+"TexType"],this.values=Float32Array.from([0,0,0,0]),this.bind=this.bindValue;const t=I=>{B=I;let C=HC.getCachedGLTexture2D(I);C||(C="FLOAT"===I.type?new $C(A,I):new HC(A,I),HC.setCachedGLTexture2D(I,C)),this.texBinding=C.preBind(this.textureUnif,i),C.on("updated",(()=>{g.emit("updated")})),this.gltexture=C,this.gltexture.addRef(this),this.textureType=1,this.bind=this.bindTexture,g.emit("updated")};let B,o;const s=A=>{A.isLoaded()?t(A):o=A.once("loaded",(()=>{t(A)}))},a=()=>{this.gltexture.removeRef(this),this.gltexture=null,this.texBinding=null,this.textureType=null,o&&B.removeListenerById("loaded",o),this.bind=this.bindValue,B=null,o=null,g.emit("updated")};this.update=()=>{try{B||this.unif&&(I instanceof Qg&&I.colorSpace==pA.Gamma?this.values=I.value.toLinear().asArray():this.values=I.value.asArray())}catch(A){}g.emit("updated")},I instanceof Qg&&(I.getImage()&&s(I.getImage()),I.on("textureConnected",(()=>{s(I.getImage())})),I.on("textureDisconnected",(()=>{a()}))),this.dirty=!0,I.on("valueChanged",(()=>{this.dirty=!0})),this.uniform1i=A.uniform1i.bind(A),this.uniform4fv=A.uniform4fv.bind(A)}bindValue(A){this.unif&&(this.dirty&&(this.update(),this.dirty=!1),this.unif&&this.uniform4fv(this.unif.location,this.values),this.textureTypeUnif&&this.uniform1i(this.textureTypeUnif.location,0))}bindTexture(A){this.dirty&&(this.update(),this.dirty=!1),this.gltexture.bindToUniform(A,this.textureUnif,this.texBinding)}}const zi={};class Ti{constructor(A,g,I,C){this.uniformBindings=[];const i=i=>{const e=i.getName(),t=I[e];if(null!=t)switch(t.type){case"Boolean":case"UInt32":case"SInt32":case"Float32":this.uniformBindings.push(new Ui(A,g,i,t,I));break;case"Vec2":case"Vec3":case"Vec4":this.uniformBindings.push(new vi(A,g,i,t));break;case"Color":this.uniformBindings.push(new xi(A,g,i,t,I));break;case"Mat4":this.uniformBindings.push(new ki(A,g,i,t));break;default:return void console.warn("Param :"+e+" has unhandled data type:"+t.type)}else{if(I[e+"Tex"])return void this.uniformBindings.push(new xi(A,g,i,t,I));if(C){const A=g.getMaterial().getShaderName();zi[A]||(zi[A]={}),zi[A][e]||(console.warn("Material:"+g.getMaterial().getName(),"with Shader ",A,"Param has no unif",e),zi[A][e]=!0)}}},e=g.getMaterial().getParameters();for(const A of e)i(A)}bind(A){for(const g of this.uniformBindings)g.bind(A);return!0}unbind(A){for(const g of this.uniformBindings)g.unbind(A)}destroy(){for(const A of this.uniformBindings)A.destroy()}}class _i extends V{constructor(A,g,I){super(),this.__gl=A,this.__material=g,this.__glshader=I,this.__shaderBindings={},g.on("parameterValueChanged",(()=>this.emit("updated")))}getMaterial(){return this.__material}getGLShader(){return this.__glshader}bind(A,g){this.__boundTexturesBeforeMaterial=A.boundTextures;let I=this.__shaderBindings[A.shaderkey];if(!I){const C=this.__gl;I=new Ti(C,this,A.unifs,g),this.__shaderBindings[A.shaderkey]=I}I.bind(A)}unbind(A){A.boundTextures=this.__boundTexturesBeforeMaterial}}class Pi extends V{constructor(A){super(),this.materials=[],this.materialIndices={},this.glMaterials={},this.refCounts=[],this.freeIndices=[],this.dirtyIndices=new Set,this.materialsAllocator=new X,this.renderer=A,this.materialsAllocator.on("dataReallocated",(A=>{const g=A.id;this.dirtyIndices.add(g)}))}addMaterial(A){let g=this.materialIndices[A.getId()];if(null!=g)return this.refCounts[g]++,g;g=this.freeIndices.length?this.freeIndices.pop():this.materials.length,this.materials[g]=A,this.refCounts[g]=1,this.materialIndices[A.getId()]=g;const I=A.getShaderClass().getPackedMaterialData(A);this.materialsAllocator.allocate(g,I.length/4);return A.on("parameterValueChanged",(()=>{this.dirtyIndices.add(g),this.emit("updated")})),this.dirtyIndices.add(g),g}getGLMaterial(A){if(this.glMaterials[A.getId()])return this.glMaterials[A.getId()];const g=this.renderer.getOrCreateShader(A.getShaderName()),I=this.renderer.gl,C=new _i(I,A,g);return C.on("updated",(()=>{this.renderer.requestRedraw()})),A.setMetadata("glMaterial",C),this.glMaterials[A.getId()]=C,C}getMaterialAllocation(A){const g=this.materialIndices[A.getId()];if(null!=g)return this.materialsAllocator.getAllocation(g)}removeMaterial(A){const g=this.materialIndices[A.getId()];this.refCounts[g]--,this.refCounts[g]>0||(this.freeIndices.push(g),this.materialsAllocator.deallocate(g),this.materials[g]=null,delete this.materialIndices[A.getId()],this.dirtyIndices.has(g)&&this.dirtyIndices.delete(g))}uploadMaterials(A){const g=this.renderer.__gl,I=r.nextPow2(Math.ceil(Math.sqrt(this.materialsAllocator.reservedSpace))),C=A.boundTextures++;if(g.activeTexture(g.TEXTURE0+C),this.materialsTexture){if(this.materialsTexture.width<I){this.materialsTexture.resize(I,I);for(let A=0;A<this.materials.length;A++)this.materialsAllocator.getAllocation(A)&&this.dirtyIndices.add(A)}}else this.materialsTexture=new HC(this.renderer.__gl,{format:"RGBA",type:"FLOAT",width:I,height:I,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.materialsTexture.clear();const i=this.materialsTexture,e=this.materialsTexture.width;g.bindTexture(g.TEXTURE_2D,i.glTex),this.dirtyIndices.forEach((A=>{const I=this.materialsAllocator.getAllocation(A),C=this.materials[A],t=C.getShaderClass().getPackedMaterialData(C),B=I.start%e,o=Math.ceil((B+I.size)/e);let s=0,a=I.size,l=B;for(let A=0;A<o;A++){let A;l+a>e?(A=e-l,l=0):A=a;const C=(I.start+s)%e,B=Math.floor((I.start+s)/e),o=t.subarray(4*s,4*(s+A));g.texSubImage2D(g.TEXTURE_2D,0,C,B,A,1,i.getFormat(),i.getType(),o),s+=A,a-=A}})),this.dirtyIndices=new Set,g.bindTexture(g.TEXTURE_2D,null),A.boundTextures--}update(A){this.dirtyIndices.size>0&&this.uploadMaterials(A)}bind(A){if(this.dirtyIndices.size>0&&this.uploadMaterials(A),!this.materialsTexture)return!1;const{materialsTexture:g,materialsTextureSize:I}=A.unifs;if(g&&(this.materialsTexture.bindToUniform(A,g),I)){this.renderer.gl.uniform2i(I.location,this.materialsTexture.width,this.materialsTexture.height)}return!0}}class Oi extends Wi{constructor(A,g){super(A,g),this.__numVertices=9,this.__vboState=-1,this.genBuffers()}genBuffers(A){super.genBuffers(A);const g=this.__gl,I=this.__geom.genBuffers();for(const A in I.attrBuffers){const C=I.attrBuffers[A],i=g.createBuffer();g.bindBuffer(g.ARRAY_BUFFER,i),g.bufferData(g.ARRAY_BUFFER,C.values,g.STATIC_DRAW),this.__glattrbuffers[A]={buffer:i,dataType:C.dataType,normalized:C.normalized}}this.__numVertices=I.numVertices,this.__vboState=2}updateBuffers(A){const g=this.__gl,I=this.__geom.genBuffers(),C=I.numVertices!=this.__numVertices;for(const A in I.attrBuffers){const i=I.attrBuffers[A],e=this.__glattrbuffers[A];C&&(g.deleteBuffer(e.buffer),e.buffer=g.createBuffer()),g.bindBuffer(g.ARRAY_BUFFER,e.buffer),g.bufferData(g.ARRAY_BUFFER,i.values,g.STATIC_DRAW)}this.__numVertices=I.numVertices}bind(A){if(A.unifs.PointSize){const g=this.__gl;let I=this.__shaderBindings[A.shaderkey];if(!I){g.__quadVertexIdsBuffer||g.setupInstancedQuad();const C=Object.assign(this.__glattrbuffers,g.__quadattrbuffers);I=_C(this.__gl,A.attrs,C,g.__quadIndexBuffer),this.__shaderBindings[A.shaderkey]=I}return I.bind(A),!0}return super.bind(A),!0}draw(A){const g=this.__gl;A.unifs.PointSize?g.drawElementsInstanced(g.TRIANGLES,6,g.UNSIGNED_SHORT,0,this.__numVertices):g.drawArrays(g.POINTS,0,this.__numVertices)}drawInstanced(A,g){this.__gl.drawArraysInstanced(this.__gl.POINTS,0,this.__numVertices,g)}}class ji extends Wi{constructor(A,g){super(A,g),this.__numSegIndices=0,this.__numVertices=0,this.__fatBuffersNeedUpload=!1,this.fatBuffers=null,this.__buffersNeedUpload=!1,this.__indexDataType=0,this.__numSegIndices=0,this.__numVertices=0,this.__fatBuffersNeedUpload=!0}dirtyBuffers(A){super.dirtyBuffers(A),this.__fatBuffersNeedUpload=!0,this.emit("updated")}clearBuffers(){const A=this.__gl;if(A.deleteBuffer(this.__indexBuffer),this.__indexBuffer=null,this.fatBuffers&&this.fatBuffers.positionsTexture){this.fatBuffers.positionsTexture&&(this.fatBuffers.positionsTexture.destroy(),this.fatBuffers.positionsTexture=null);const g=this.fatBuffers.glattrbuffers.segmentIndices;g.buffer&&(A.deleteBuffer(g.buffer),this.fatBuffers.glattrbuffers.segmentIndices=null)}super.clearBuffers()}genFatBuffers(A){const g=this.__gl,I=this.__geom.genBuffers(),C=I.indices,i=I.numVertices!=this.__numVertices;g.__quadVertexIdsBuffer||g.setupInstancedQuad(),this.fatBuffers||(this.fatBuffers={drawCount:0,positionsTexture:null,glattrbuffers:{}},this.fatBuffers.glattrbuffers.vertexIDs=g.__quadattrbuffers.vertexIDs);const e=A.boundTextures++;g.activeTexture(this.__gl.TEXTURE0+e),this.fatBuffers.drawCount=C.length/2;const t=this.__geom.getVertexAttributes(),B=t.positions,s=t.lineThickness,a=new Float32Array(4*B.getCount());for(let A=0;A<B.getCount();A++){new o(new Float32Array(a.buffer,4*A*4,3)).setFromOther(B.getValueRef(A)),a[4*A+3]=s?s.getFloat32Value(A):1}i&&this.fatBuffers.positionsTexture&&(this.fatBuffers.positionsTexture.destroy(),this.fatBuffers.positionsTexture=null),this.fatBuffers.positionsTexture?this.fatBuffers.positionsTexture.bufferData(a,B.getCount(),1):this.fatBuffers.positionsTexture=new HC(this.__gl,{format:"RGBA",type:"FLOAT",width:B.getCount(),height:1,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",data:a,mipMapped:!1});const l=()=>{const A=new Float32Array(C.length);for(let g=0;g<C.length;g++){let I;I=g%2==0?g>0?C[g]==C[g-1]:C[g]==C[C.length-1]:g<C.length-1?C[g]==C[g+1]:C[g]==C[0],A[g]=(I?1:0)+2*C[g]}return A};if(this.fatBuffers.glattrbuffers.segmentIndices)(!this.genBufferOpts||this.genBufferOpts&&this.genBufferOpts.topologyChanged)&&(g.bindBuffer(g.ARRAY_BUFFER,this.fatBuffers.glattrbuffers.segmentIndices.buffer),g.bufferData(g.ARRAY_BUFFER,l(),g.STATIC_DRAW));else{const A=g.createBuffer();g.bindBuffer(g.ARRAY_BUFFER,A),g.bufferData(g.ARRAY_BUFFER,l(),g.STATIC_DRAW),this.fatBuffers.glattrbuffers.segmentIndices={buffer:A,dimension:2,dataType:"Vec2"}}this.__numSegIndices=C.length,this.__numVertices=I.numVertices,g.bindTexture(g.TEXTURE_2D,null),A.boundTextures--,this.__fatBuffersNeedUpload=!1}genBuffers(A){const g=this.__gl,I=this.__geom.genBuffers(),C=I.indices,i=I.numVertices!=this.__numVertices;this.__indexBuffer?(!this.genBufferOpts||this.genBufferOpts&&this.genBufferOpts.topologyChanged)&&(this.__numSegIndices!=C.length&&(g.deleteBuffer(this.__indexBuffer),this.__indexBuffer=g.createBuffer()),g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),g.bufferData(g.ELEMENT_ARRAY_BUFFER,C,g.STATIC_DRAW),this.__numSegIndices=C.length):(this.__indexBuffer=g.createBuffer(),g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),g.bufferData(g.ELEMENT_ARRAY_BUFFER,C,g.STATIC_DRAW));for(const A in I.attrBuffers){const C=I.attrBuffers[A];if(this.__glattrbuffers[A]){const I=this.__glattrbuffers[A];i&&(g.deleteBuffer(I.buffer),I.buffer=g.createBuffer()),g.bindBuffer(g.ARRAY_BUFFER,I.buffer),g.bufferData(g.ARRAY_BUFFER,C.values,g.STATIC_DRAW)}else{const I=g.createBuffer();g.bindBuffer(g.ARRAY_BUFFER,I),g.bufferData(g.ARRAY_BUFFER,C.values,g.STATIC_DRAW),this.__glattrbuffers[A]={buffer:I,dataType:C.dataType,normalized:C.normalized}}}this.__numSegIndices=C.length,this.__numVertices=I.numVertices,this.__buffersNeedUpload=!1,C instanceof Uint8Array&&(this.__indexDataType=this.__gl.UNSIGNED_BYTE),C instanceof Uint16Array&&(this.__indexDataType=this.__gl.UNSIGNED_SHORT),C instanceof Uint32Array&&(this.__indexDataType=this.__gl.UNSIGNED_INT)}bind(A){const g=this.__gl,I=A.unifs;if(I.LineThickness&&g.floatTexturesSupported){this.__fatBuffersNeedUpload&&this.genFatBuffers(A);const C=this.fatBuffers;let i=this.__shaderBindings[A.shaderkey];return i||(i=_C(this.__gl,A.attrs,C.glattrbuffers,g.__quadIndexBuffer),this.__shaderBindings[A.shaderkey]=i),i.bind(A),I.positionsTexture&&(C.positionsTexture.bindToUniform(A,I.positionsTexture),g.uniform1i(I.positionsTextureSize.location,C.positionsTexture.width)),!0}return super.bind(A),!0}drawPoints(){this.__gl.drawArrays(this.__gl.POINTS,0,this.__geom.numVertices())}draw(A){const g=this.__gl;A.unifs.LineThickness&&g.floatTexturesSupported?g.drawElementsInstanced(g.TRIANGLES,6,g.UNSIGNED_SHORT,0,this.fatBuffers.drawCount):g.drawElements(this.__gl.LINES,this.__numSegIndices,this.__indexDataType,0)}drawInstanced(A,g){const I=this.__gl,{occluded:C}=A.unifs;C&&I.uniform1i(C.location,0),I.drawElementsInstanced(this.__gl.LINES,this.__numSegIndices,this.__indexDataType,0,g),C&&(I.uniform1i(C.location,1),I.depthFunc(I.GREATER),I.drawElementsInstanced(this.__gl.LINES,this.__numSegIndices,this.__indexDataType,0,g),I.depthFunc(I.LEQUAL))}}const qi=(A,g)=>{const I=new Int32Array(g);return I.set(A),I};class $i extends V{constructor(A){super(),this.shaderAttrSpec={},this.freeGeomIndices=[],this.geoms=[],this.geomRefCounts=[],this.geomsDict={},this.glGeomsDict={},this.geomBuffersTmp=[],this.glattrbuffers={},this.shaderBindings={},this.attributesBufferNeedsRealloc=!1,this.attributesBufferNeedsAlloc=[],this.attributesAllocator=new X,this.dirtyGeomIndices=new Set,this.geomVertexOffsets=new Int32Array(1),this.geomVertexCounts=new Int32Array(1),this.numIndices=0,this.indicesBufferNeedsRealloc=!1,this.indicesAllocator=new X,this.indicesCounts=new Int32Array(1),this.indicesOffsets=new Int32Array(1),this.indexBuffer=null,this.freeDataAfterUpload=!0,this.__destroyed=!1,this.renderer=A,this.__gl=A.gl,this.attributesAllocator.on("resized",(()=>{this.attributesBufferNeedsRealloc=!0})),this.attributesAllocator.on("dataReallocated",(A=>{const g=A.id,I=A.allocation;this.dirtyGeomIndices.add(g),this.geomVertexOffsets[g]=I.start,this.geomVertexCounts[g]=I.size})),this.freeGeomIndices.push(0),this.indicesAllocator.on("resized",(()=>{this.indicesBufferNeedsRealloc=!0})),this.indicesAllocator.on("dataReallocated",(A=>{const g=A.id;this.dirtyGeomIndices.add(g)}));const g=Math.pow(2,23);this.attributesAllocator.reservedSpace=g,this.indicesAllocator.reservedSpace=4*g,this.attributesBufferNeedsRealloc=!0,this.indicesBufferNeedsRealloc=!0}constructGLGeom(A){let g=this.glGeomsDict[A.getId()];if(null!=g)return g;const I=this.__gl;if(A instanceof Kg||A instanceof Dg)g=new Yi(I,A);else if(A instanceof Yg||A instanceof Jg)g=new ji(I,A);else{if(!(A instanceof Wg||A instanceof Ng))throw new Error("Unsupported geom type:"+A.constructor.name);g=new Oi(I,A)}return this.glGeomsDict[A.getId()]=g,g.on("updated",(()=>{this.renderer.requestRedraw()})),g.addRef(this),g}addGeom(A){let g=this.geomsDict[A.getId()];if(null!=g)return this.geomRefCounts[g]++,g;if(0==this.freeGeomIndices.length){const A=this.geomVertexCounts.length,g=2*A;this.geomVertexCounts=qi(this.geomVertexCounts,g),this.geomVertexOffsets=qi(this.geomVertexOffsets,g),this.indicesCounts=qi(this.indicesCounts,g),this.indicesOffsets=qi(this.indicesOffsets,g);for(let I=g-1;I>=A;I--)this.freeGeomIndices.push(I)}g=this.freeGeomIndices.pop(),this.geoms[g]=A,this.geomRefCounts[g]=1,this.geomsDict[A.getId()]=g,this.dirtyGeomIndices.add(g),this.geomVertexCounts[g]=0,this.geomVertexOffsets[g]=0,this.indicesCounts[g]=0,this.indicesOffsets[g]=0;return A.on("geomDataChanged",(()=>{this.dirtyGeomIndices.add(g),this.emit("updated")})),A.on("geomDataTopologyChanged",(()=>{this.dirtyGeomIndices.add(g),this.emit("updated")})),g}removeGeom(A){const g=this.geomsDict[A.getId()];this.geomRefCounts[g]--,this.geomRefCounts[g]>0||(this.attributesAllocator.getAllocation(g)&&this.attributesAllocator.deallocate(g),this.indicesAllocator.getAllocation(g)&&this.indicesAllocator.deallocate(g),this.dirtyGeomIndices.has(g)&&this.dirtyGeomIndices.delete(g),this.geomVertexCounts[g]=0,this.geomVertexOffsets[g]=0,this.geoms[g]=null,this.freeGeomIndices.push(g),delete this.geomsDict[A.getId()],delete this.geomBuffersTmp[g],this.indicesCounts[g]=0,this.indicesOffsets[g]=0)}getGeom(A){return this.geoms[A]}getGeomOffsetAndCount(A){return[this.indicesOffsets[A],this.indicesCounts[A]]}getGeomBuffers(A){return this.geomBuffersTmp[A]}allocateBuffers(A){const g=this.geoms[A];if(!g)return;const I=g.genBuffers(),C=I.numRenderVerts?I.numRenderVerts:I.numVertices;if(this.geomVertexCounts[A]!=C)if(0==C)this.attributesAllocator.deallocate(A),this.geomVertexOffsets[A]=0,this.geomVertexCounts[A]=0;else{const g=this.attributesAllocator.allocate(A,C);this.geomVertexOffsets[A]=g.start,this.geomVertexCounts[A]=g.size}for(const A in I.attrBuffers)if(!this.shaderAttrSpec[A]){const g=I.attrBuffers[A],C=kC(this.__gl,g.dataType);this.shaderAttrSpec[A]={dataType:g.dataType,normalized:g.normalized,dimension:C.dimension,elementSize:C.elementSize},this.attributesBufferNeedsAlloc.push(A)}if(I.indices){const g=I.indices.length;if(this.indicesCounts[A]!=g)if(0==g)this.indicesAllocator.deallocate(A),this.indicesOffsets[A]=0,this.indicesCounts[A]=0;else{const I=this.indicesAllocator.allocate(A,g),C=4;this.indicesOffsets[A]=I.start*C,this.indicesCounts[A]=I.size}}else this.indicesOffsets[A]=this.geomVertexOffsets[A],this.indicesCounts[A]=this.geomVertexCounts[A];this.geomBuffersTmp[A]=I}genAttributesBuffers(){for(const A in this.shaderAttrSpec)this.genAttributesBuffer(A);this.attributesBufferNeedsAlloc=[]}genAttributesBuffer(A){const g=this.attributesAllocator.reservedSpace,I=this.__gl;{const C=this.shaderAttrSpec[A],i=g*C.dimension,e=I.createBuffer();I.bindBuffer(I.ARRAY_BUFFER,e);const t=i*C.elementSize;I.bufferData(I.ARRAY_BUFFER,t,I.STATIC_DRAW),this.glattrbuffers[A]&&this.glattrbuffers[A].buffer&&(I.bindBuffer(I.COPY_WRITE_BUFFER,e),I.bindBuffer(I.COPY_READ_BUFFER,this.glattrbuffers[A].buffer),I.copyBufferSubData(I.COPY_READ_BUFFER,I.COPY_WRITE_BUFFER,0,0,this.glattrbuffers[A].length*C.elementSize),I.deleteBuffer(this.glattrbuffers[A].buffer)),C.numValues=i;const B="textureCoords"==A?"texCoords":A;this.glattrbuffers[B]={buffer:e,dataType:C.dataType,normalized:C.normalized,length:i,dimension:C.dimension}}}genIndicesBuffers(){const A=this.indicesAllocator.reservedSpace;if(this.numIndices!=A){const g=this.__gl,I=g.createBuffer();g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,I);const C=4,i=A*C;g.bufferData(g.ELEMENT_ARRAY_BUFFER,i,g.STATIC_DRAW),this.indexBuffer&&(g.bindBuffer(g.COPY_WRITE_BUFFER,I),g.bindBuffer(g.COPY_READ_BUFFER,this.indexBuffer),g.copyBufferSubData(g.COPY_READ_BUFFER,g.COPY_WRITE_BUFFER,0,0,this.numIndices*C),g.deleteBuffer(this.indexBuffer)),this.indexBuffer=I,this.numIndices=A}}uploadBuffers(A){const g=this.__gl;let I=this.geomBuffersTmp[A];if(!I){const g=this.geoms[A];if(!g)return;I=g.genBuffers(),this.geomBuffersTmp[A]=I}const C=this.geomVertexCounts[A],i=I.numRenderVerts?I.numRenderVerts:I.numVertices;if(C!=i)throw new Error("Invalid allocation for this geom");if(0!=i){for(const C in I.attrBuffers){const i=this.shaderAttrSpec[C],e=I.attrBuffers[C],t=this.glattrbuffers[C];if(!e||!t)continue;g.bindBuffer(g.ARRAY_BUFFER,t.buffer);const B=i.elementSize,o=this.geomVertexOffsets[A]*B*i.dimension;g.bufferSubData(g.ARRAY_BUFFER,o,e.values)}if(g.bindBuffer(g.ARRAY_BUFFER,null),I.indices&&I.indices.length>0){const g=I.indices,C=this.indicesAllocator.getAllocation(A);if(C.size!=g.length)throw new Error("Invalid allocation for this geom");const i=this.attributesAllocator.getAllocation(A),e=new Uint32Array(C.size);for(let A=0;A<g.length;A++)e[A]=I.indices[A]+i.start;const t=this.__gl;t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer);const B=4,o=C.start*B;t.bufferSubData(t.ELEMENT_ARRAY_BUFFER,o,e),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)}this.emit("geomDataChanged",new p(A))}else{const g=new p(A);this.emit("geomDataChanged",g)}}cleanGeomBuffers(){if(this.dirtyGeomIndices.forEach((A=>{this.allocateBuffers(A)})),this.attributesBufferNeedsRealloc||this.indicesBufferNeedsRealloc){for(const A in this.shaderBindings){this.shaderBindings[A].destroy()}this.shaderBindings={},this.attributesBufferNeedsRealloc&&(this.genAttributesBuffers(),this.attributesBufferNeedsRealloc=!1),this.indicesBufferNeedsRealloc&&(this.genIndicesBuffers(),this.indicesBufferNeedsRealloc=!1)}else this.attributesBufferNeedsAlloc.length>0&&(this.attributesBufferNeedsAlloc.forEach((A=>{this.genAttributesBuffer(A)})),this.attributesBufferNeedsAlloc=[]);this.dirtyGeomIndices.forEach((A=>{this.uploadBuffers(A)})),this.dirtyGeomIndices=new Set}bind(A){this.dirtyGeomIndices.size>0&&this.cleanGeomBuffers();let g=this.shaderBindings[A.shaderkey];if(g)g.bind(A);else{g=_C(this.__gl,A.attrs,this.glattrbuffers,this.indexBuffer),this.shaderBindings[A.shaderkey]=g;{const A=this.__gl;A.drawElements(A.POINTS,1,A.UNSIGNED_INT,0),A.drawElements(A.LINES,2,A.UNSIGNED_INT,0),A.drawElements(A.TRIANGLES,3,A.UNSIGNED_INT,0);const g=new Uint32Array(1),I=4,C=this.indicesAllocator.allocatedSpace*I;A.bufferSubData(A.ELEMENT_ARRAY_BUFFER,C,g)}}return!0}unbind(A){const g=this.shaderBindings[A.shaderkey];g&&g.unbind(A)}clearBuffers(){const A=this.__gl;for(const g in this.glattrbuffers){const I=this.glattrbuffers[g];I.shared||A.deleteBuffer(I.buffer)}this.glattrbuffers={},this.indexBuffer&&(A.deleteBuffer(this.indexBuffer),this.indexBuffer=null);for(const A in this.shaderBindings){this.shaderBindings[A].destroy()}this.shaderBindings={}}destroy(){this.clearBuffers(),this.__destroyed=!0,this.emit("destructing")}}const Ae={GEOMITEM_FLAG_CUTAWAY:1,GEOMITEM_INVISIBLE_IN_GEOMDATA:2,GEOMITEM_TRANSPARENT:4};class ge extends V{constructor(A,g,I,C,i,e=!1){if(super(),this.listenerIDs={},this.shattered=!1,this.culled=!1,this.cutDataChanged=!1,this.cutData=[],this.geomMatrixDirty=!1,this.gl=A,this.geomItem=g,this.geomItemId=I,this.geomId=C,this.materialId=i,this.supportInstancing=e,this.visible=this.geomItem.isVisible(),this.listenerIDs.visibilityChanged=this.geomItem.on("visibilityChanged",(A=>{const g=!this.culled&&this.visible;this.visible=A.visible;const I=!this.culled&&this.visible;g!=I&&this.emit("visibilityChanged",new O(I))})),g instanceof dC&&(this.shattered=g.shattered),this.listenerIDs.shatterStateChanged=this.geomItem.on("shatterStateChanged",(A=>{this.shattered=A.state,this.emit("shatterStateChanged",A)})),!this.supportInstancing){this.cutDataChanged=!1,this.cutData=[0,0,0,0];const A=0;let I=0;this.geomItem.isCutawayEnabled()&&(I|=Ae.GEOMITEM_FLAG_CUTAWAY),g.isSelectable()||(I|=Ae.GEOMITEM_INVISIBLE_IN_GEOMDATA),g.materialParam.value.isOpaque()||(I|=Ae.GEOMITEM_TRANSPARENT),this.geomData=[I,A,0,0],this.geomMatrixDirty=!0,this.listenerIDs["GeomMat.valueChanged"]=this.geomItem.geomMatParam.on("valueChanged",(()=>{this.geomMatrixDirty=!0,this.emit("updated")})),this.listenerIDs.cutAwayChanged=this.geomItem.on("cutAwayChanged",(()=>{this.cutDataChanged=!0,this.emit("updated")}));const C=A=>{if(A.isOpaqueStateChanged){let g=this.geomData[0];A.isOpaque?g&=~Ae.GEOMITEM_TRANSPARENT:g|=Ae.GEOMITEM_TRANSPARENT,this.geomData[0],this.emit("updated")}};this.listenerIDs.opacityChanged=this.geomItem.on("opacityChanged",C),this.listenerIDs["material:opacityChanged"]=this.geomItem.materialParam.on("opacityChanged",C)}}getGeomItem(){return this.geomItem}isVisible(){return!this.culled&&this.visible}getGeomItemId(){return this.geomItemId}setCulled(A){const g=!this.culled&&this.visible;this.culled=A;const I=!this.culled&&this.visible;g!=I&&this.emit("visibilityChanged",new O(I))}bind(A){const g=this.gl,I=A.unifs;if(!this.supportInstancing){const A=I.modelMatrix;A&&(this.geomMatrixDirty&&(this.modelMatrixArray=this.geomItem.geomMatParam.value.asArray()),g.uniformMatrix4fv(A.location,!1,this.modelMatrixArray));const C=I.drawItemData;C&&g.uniform4fv(C.location,this.geomData);const i=I.cutawayData;if(i){if(this.cutDataChanged&&this.geomItem.isCutawayEnabled()){const A=this.geomItem.getCutVector(),g=this.geomItem.getCutDist();this.cutData=[A.x,A.y,A.z,g]}g.uniform4fv(i.location,this.cutData)}}const C=I.geomItemId;return C&&g.uniform1i(C.location,this.geomItemId),!0}destroy(){this.geomItem.removeListenerById("visibilityChanged",this.listenerIDs.visibilityChanged),this.supportInstancing||(this.geomItem.geomMatParam.removeListenerById("valueChanged",this.listenerIDs["GeomMat.valueChanged"]),this.geomItem.removeListenerById("cutAwayChanged",this.listenerIDs.cutAwayChanged))}}class Ie extends DC{constructor(A){super(A,"ReductionShader"),this.setShaderStage("VERTEX_SHADER","\n\nprecision highp float;\n\nuniform int reductionTextureWidth;\nuniform sampler2D geomDataTexture;\n\nivec2 texelCoordFromVertexId(){\n  ivec2 texSize = textureSize(geomDataTexture, 0);\n  return ivec2(\n    gl_VertexID % texSize.x, \n    gl_VertexID / texSize.x\n    );\n}\n\nvec2 pointPositionFromGeomItemId(int geomItemId){\n  vec2 result = vec2(\n    (float(geomItemId % reductionTextureWidth) + 0.5) / float(reductionTextureWidth), \n    (float(geomItemId / reductionTextureWidth) + 0.5) / float(reductionTextureWidth)\n    );\n  return vec2(-1.0, -1.0) + (result * 2.0);\n}\n\nvoid main()\n{\n  // Get the texel coordinate in the source geomdata buffer.\n  // there is one point for every pixel in the geomdata texture.\n  ivec2 texelCoord = texelCoordFromVertexId();\n  int geomItemId = int(texelFetch(geomDataTexture, texelCoord, 0).g + 0.5);\n\n  if (geomItemId > 0) {\n    vec2 position = pointPositionFromGeomItemId(geomItemId);\n    gl_Position = vec4(position, 0.0, 1.0);\n    gl_PointSize = 1.0;\n  } else {\n    // Move it off screen\n    gl_Position = vec4(-2.0, -2.0, 0.0, 1.0);\n    gl_PointSize = 0.0;\n  }\n}\n\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n\n")}}class Ce extends DC{constructor(A){super(A,"BoundingBoxShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec4 positions;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 cameraMatrix;\n\nuniform highp int occlusionCulling;\nuniform sampler2D reductionDataTexture;\n\nimport 'transpose.glsl'\nimport 'GLSLUtils.glsl'\nimport 'stack-gl/transpose.glsl'\nimport 'stack-gl/inverse.glsl'\nimport 'geomItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\nconst int GEOMITEM_INVISIBLE_IN_GEOMDATA = 2; // 1<<1;\n\n/* VS Outputs */\nvarying vec4 v_color;\n\nvoid main(void) {\n\n  int drawItemId = getGeomItemId();\n  vec4 geomItemData  = getInstanceData(drawItemId);\n  int flags = int(geomItemData.r + 0.5);\n\n  if (occlusionCulling != 0) {\n    // Check if in the reduction texture, this item is already flagged as visible.\n    // Note: we only draw bboxes for those that have been flagged as invisible, but might\n    // be just off screen, or onscreen, but were culled in the previous update.\n    int isVisible = int(fetchTexel(reductionDataTexture, textureSize(reductionDataTexture, 0), drawItemId).r);\n    if (isVisible > 0) {\n      return;\n    }\n    if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n      return;\n    }\n  }\n\n  vec4 bboxMin = fetchTexel(instancesTexture, instancesTextureSize, (drawItemId * pixelsPerItem) + 6);\n  vec4 bboxMax = fetchTexel(instancesTexture, instancesTextureSize, (drawItemId * pixelsPerItem) + 7);\n  mat4 viewProjectionMatrix = projectionMatrix * viewMatrix;\n\n  if (occlusionCulling != 0) {\n    // TODO: The bounding box stochastic\n    v_color = vec4(0.0, float(drawItemId), 0.0, 1.0);\n  } else {\n    v_color = fetchTexel(instancesTexture, instancesTextureSize, (drawItemId * pixelsPerItem) + 4);\n  }\n\n  vec4 pos = positions;\n  if (pos.x < 0.0) pos.x = bboxMin.x;\n  else if (pos.x > 0.0) pos.x = bboxMax.x;\n  if (pos.y < 0.0) pos.y = bboxMin.y;\n  else if (pos.y > 0.0) pos.y = bboxMax.y;\n  if (pos.z < 0.0) pos.z = bboxMin.z;\n  else if (pos.z > 0.0) pos.z = bboxMax.z;\n\n  gl_Position = viewProjectionMatrix * pos;\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\n/* VS Outputs */\nvarying vec4 v_color;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  int drawItemId = int(v_color.g);\n  fragColor = v_color;\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}var ie=ZA("",null,!1);function ee(A,g,I,C,i,e=0,t=0){return mA(this,void 0,void 0,(function*(){const B=A.fenceSync(A.SYNC_GPU_COMMANDS_COMPLETE,0);return A.flush(),yield function(A,g,I,C){return new Promise(((i,e)=>{!function t(){const B=A.clientWaitSync(g,I,0);B!=A.WAIT_FAILED?B!=A.TIMEOUT_EXPIRED?i():setTimeout(t,C):e()}()}))}(A,B,0,10),A.deleteSync(B),A.bindBuffer(g,I),A.getBufferSubData(g,C,i,e,t),A.bindBuffer(g,null),i}))}class te extends Yg{constructor(){super(),this.setNumVertices(8);const A=this.getVertexAttribute("positions");A.getValueRef(0).set(.5,-.5,.5),A.getValueRef(1).set(.5,.5,.5),A.getValueRef(2).set(-.5,.5,.5),A.getValueRef(3).set(-.5,-.5,.5),A.getValueRef(4).set(.5,-.5,-.5),A.getValueRef(5).set(.5,.5,-.5),A.getValueRef(6).set(-.5,.5,-.5),A.getValueRef(7).set(-.5,-.5,-.5),this.setNumSegments(34),this.setSegmentVertexIndices(0,0,1),this.setSegmentVertexIndices(1,0,2),this.setSegmentVertexIndices(2,0,3),this.setSegmentVertexIndices(3,0,4),this.setSegmentVertexIndices(4,0,5),this.setSegmentVertexIndices(5,0,6),this.setSegmentVertexIndices(6,0,7),this.setSegmentVertexIndices(7,1,0),this.setSegmentVertexIndices(8,1,2),this.setSegmentVertexIndices(9,1,3),this.setSegmentVertexIndices(10,1,4),this.setSegmentVertexIndices(11,1,5),this.setSegmentVertexIndices(12,1,6),this.setSegmentVertexIndices(13,1,7),this.setSegmentVertexIndices(14,2,0),this.setSegmentVertexIndices(15,2,1),this.setSegmentVertexIndices(16,2,3),this.setSegmentVertexIndices(17,2,4),this.setSegmentVertexIndices(18,2,5),this.setSegmentVertexIndices(19,2,6),this.setSegmentVertexIndices(20,2,7),this.setSegmentVertexIndices(21,3,1),this.setSegmentVertexIndices(22,3,2),this.setSegmentVertexIndices(23,3,0),this.setSegmentVertexIndices(24,3,4),this.setSegmentVertexIndices(25,3,5),this.setSegmentVertexIndices(26,3,6),this.setSegmentVertexIndices(27,3,7),this.setSegmentVertexIndices(28,4,5),this.setSegmentVertexIndices(29,4,6),this.setSegmentVertexIndices(30,4,7),this.setSegmentVertexIndices(31,5,6),this.setSegmentVertexIndices(32,5,7),this.setSegmentVertexIndices(33,6,7)}}class Be extends V{constructor(A,g){var I;super(),this.glGeomItems=[null],this.glGeomItemEventHandlers=[],this.glGeomItemsMap={},this.glGeomItemsIndexFreeList=[],this.dirtyItemIndices=[],this.dirtyWorkerItemIndices=new Set,this.removedItemIndices=[],this.glGeomItemsTexture=null,this.xrPresenting=!1,this.xrFovY=0,this.xrProjectionMatrix=new h,this.debugOcclusionBuffer=!1,this.inFrustumIndicesCount=0,this.drawIdsBufferDirty=!1,this.timer_query_ext=null,this.renderer=A,this.enableFrustumCulling=g.enableFrustumCulling||g.enableOcclusionCulling;const C=this.renderer.gl;this.enableOcclusionCulling=g.enableOcclusionCulling&&"webgl2"==C.name,this.debugOcclusionBuffer=null!==(I=g.debugOcclusionBuffer)&&void 0!==I&&I,this.enableFrustumCulling&&this.setupCullingWorker(A)}setupCullingWorker(A){this.worker=new ie,this.worker.postMessage({type:"Init",enableOcclusionCulling:this.enableOcclusionCulling});let g=!0;this.worker.onmessage=A=>{"InFrustumIndices"==A.data.type?this.enableOcclusionCulling?(A.data.newlyCulled&&this.applyCullResults(A.data),this.calculateOcclusionCulling(A.data.inFrustumIndices)):(this.applyCullResults(A.data),this.emitCullingUpdateData(A.data),g=!0):"CullResults"==A.data.type?(this.applyCullResults(A.data),this.emitCullingUpdateData(A.data),g=!0):"Done"==A.data.type&&this.renderer.emit("CullingUpdated"),g=!0};const I=()=>{const g=A.getViewport(),I=A.getViewport().getCamera(),C=g.getWidth()/g.getHeight();if(I.isOrthographic()){const g=I.getFrustumHeight(),i=g*C;this.worker.postMessage({type:"ViewportChanged",frustumHeight:g,frustumWidth:i,isOrthographic:!0,solidAngleLimit:A.solidAngleLimit})}else{const g=.5*I.getFov(),i=Math.atan(Math.tan(g)*C);this.worker.postMessage({type:"ViewportChanged",frustumHalfAngleX:i,frustumHalfAngleY:g,isOrthographic:!1,solidAngleLimit:A.solidAngleLimit})}};A.on("resized",I);const C=A.getViewport().getCamera();C.on("projectionParamChanged",(A=>{C.isOrthographic()&&I()})),I(),A.once("xrViewportSetup",(g=>{this.xrViewport=g.xrViewport;const C=g.xrViewport;C.on("presentingChanged",(g=>{if(this.xrPresenting=g.state,g.state){e=10;const g=Math.PI/180;let I=62*g,i=50*g;if("Vive"===C.getHMDName())I*=.6,i*=.6;else I*=.5,i*=.5;this.xrFovY=2*I;const t=1.24,B=C.depthRange[0],o=C.depthRange[1];this.xrProjectionMatrix.setPerspectiveMatrix(this.xrFovY,t,B,o),this.worker.postMessage({type:"ViewportChanged",frustumHalfAngleX:i,frustumHalfAngleY:I,isOrthographic:!1,solidAngleLimit:A.solidAngleLimit})}else e=5,I(),t()}))}));let i=0,e=5;A.on("viewChanged",(I=>{if(g){if(i%e==0){g=!1;const C=I.viewXfo.tr,i=I.viewXfo.ori;this.worker.postMessage({type:"ViewChanged",cameraPos:C.asArray(),cameraOri:i.asArray(),solidAngleLimit:A.solidAngleLimit})}i++}}));const t=()=>{const g=A.getViewport().getCamera().globalXfoParam.value,I=g.tr,C=g.ori;this.worker.postMessage({type:"ViewChanged",cameraPos:I.asArray(),cameraOri:C.asArray(),solidAngleLimit:A.solidAngleLimit})};if(A.getViewport().getCamera().on("movementFinished",t),t(),this.enableOcclusionCulling){const A=this.renderer.gl;this.timer_query_ext=A.getExtension("EXT_disjoint_timer_query_webgl2");let g=1/window.devicePixelRatio;const I=Math.ceil(this.renderer.getWidth()*g),C=Math.ceil(this.renderer.getHeight()*g);this.occlusionDataBuffer=new LC(A,{type:A.FLOAT,format:A.RGBA,minFilter:A.NEAREST,magFilter:A.NEAREST,width:I,height:C,depthType:A.UNSIGNED_SHORT,depthFormat:A.DEPTH_COMPONENT,depthInternalFormat:A.DEPTH_COMPONENT16}),this.renderer.on("resized",(A=>{this.xrPresenting||this.occlusionDataBuffer.resize(Math.ceil(A.width*g),Math.ceil(A.height*g))})),this.reductionDataBuffer=new LC(A,{type:A.UNSIGNED_BYTE,internalFormat:A.R8,format:A.RED,minFilter:A.NEAREST,magFilter:A.NEAREST,width:1,height:1,depthType:A.UNSIGNED_SHORT,depthFormat:A.DEPTH_COMPONENT,depthInternalFormat:A.DEPTH_COMPONENT16}),this.bbox=new ji(A,new te),this.reductionShader=new Ie(A),this.boundingBoxShader=new Ce(A),this.boundingBoxShader.compileForTarget("GLGeomItemLibrary",{directives:this.renderer.directives}),this.inFrustumIndicesCount=0}}applyCullResults(A){A.newlyCulled&&A.newlyCulled.forEach((A=>{this.glGeomItems[A]&&this.glGeomItems[A].setCulled(!0)})),A.newlyUnCulled&&A.newlyUnCulled.forEach((A=>{this.glGeomItems[A]&&this.glGeomItems[A].setCulled(!1)})),this.renderer.requestRedraw()}emitCullingUpdateData(A){var g,I;this.renderer.emit("CullingUpdated",{culled:null===(g=A.newlyCulled)||void 0===g?void 0:g.length,unCulled:null===(I=A.newlyUnCulled)||void 0===I?void 0:I.length,visible:A.visible,total:A.total,visibleGeomStats:A.visibleGeomStats,totalGeomStats:A.totalGeomStats})}updateCulledDrawIDsBuffer(A){const g=this.renderer.gl;if(!g.floatTexturesSupported)return void(this.drawIdsBufferDirty=!1);this.inFrustumDrawIdsBuffer&&this.inFrustumIndicesCount!=A.length&&(g.deleteBuffer(this.inFrustumDrawIdsBuffer),this.inFrustumDrawIdsBuffer=null),this.inFrustumDrawIdsBuffer||(this.inFrustumDrawIdsBuffer=g.createBuffer(),g.bindBuffer(g.ARRAY_BUFFER,this.inFrustumDrawIdsBuffer)),g.bindBuffer(g.ARRAY_BUFFER,this.inFrustumDrawIdsBuffer),g.bufferData(g.ARRAY_BUFFER,A,g.STATIC_DRAW),this.inFrustumIndicesCount=A.length,this.drawIdsBufferDirty=!1;const I=Math.max(4,r.nextPow2(Math.round(Math.sqrt(this.glGeomItems.length)+.5)));this.reductionDataBuffer.width!=I&&(this.reductionDataBuffer.resize(I,I),this.reductionDataArray=new Uint8Array(I*I))}calculateOcclusionCulling(A){if(A&&A.length>0&&this.updateCulledDrawIDsBuffer(A),0==this.inFrustumIndicesCount)return void this.worker.postMessage({type:"OcclusionData",visibleItems:[]});const g=this.renderer.gl,I=new qC(g);this.renderer.bindGLBaseRenderer(I),I.directives=[...this.renderer.directives,"#define DRAW_GEOMDATA"],I.shaderopts.directives=I.directives,I.floatGeomBuffer=!0,I.occlusionCulling=1,this.xrPresenting?(this.xrViewport.initCullingRenderState(I),I.viewports[0].fovY=this.xrFovY,I.viewports[0].projectionMatrix=this.xrProjectionMatrix):this.renderer.getViewport().initRenderState(I);const C=this.occlusionDataBuffer.width*this.occlusionDataBuffer.height,i=this.timer_query_ext,e=(A,I,e)=>{this.reductionDataBuffer.bindForWriting(A,I),I||(g.enable(g.BLEND),g.blendEquation(g.FUNC_ADD),g.blendFunc(g.SRC_COLOR,g.DST_COLOR)),this.reductionShader.bind(A);const{geomDataTexture:t,reductionTextureWidth:B}=A.unifs;t&&this.occlusionDataBuffer.bindToUniform(A,t),B&&g.uniform1i(B.location,this.reductionDataBuffer.width),i&&g.beginQuery(i.TIME_ELAPSED_EXT,e),g.drawArrays(g.POINTS,0,C),i&&g.endQuery(i.TIME_ELAPSED_EXT),I||g.disable(g.BLEND),this.reductionDataBuffer.unbindForWriting(A)};let t,B,o,s;i&&(t=g.createQuery(),g.beginQuery(i.TIME_ELAPSED_EXT,t)),(A=>{this.occlusionDataBuffer.bindForWriting(A,!0),A.glDisable(g.BLEND),A.glDisable(g.CULL_FACE),A.glEnable(g.DEPTH_TEST),g.depthFunc(g.LESS),g.depthMask(!0);this.renderer.getPass(0).drawGeomData(A);this.renderer.getPass(1).drawGeomData(A),this.occlusionDataBuffer.unbindForWriting(A)})(I),i&&g.endQuery(i.TIME_ELAPSED_EXT),i&&(B=g.createQuery()),e(I,!0,B),i&&(o=g.createQuery(),g.beginQuery(i.TIME_ELAPSED_EXT,o)),(()=>{this.occlusionDataBuffer.bindForWriting(I,!1),this.debugOcclusionBuffer||(g.colorMask(!0,!0,!0,!0),g.clearColor(0,0,0,0),g.clear(g.COLOR_BUFFER_BIT)),this.boundingBoxShader.bind(I,"GLGeomItemLibrary"),this.bbox.bind(I);const{instancesTexture:A,instancesTextureSize:C,instancedDraw:i,reductionDataTexture:e,occlusionCulling:t}=I.unifs;this.glGeomItemsTexture.bindToUniform(I,A),g.uniform1i(C.location,this.glGeomItemsTexture.width),g.uniform1i(i.location,1),g.uniform1i(t.location,1),this.reductionDataBuffer.bindColorTexture(I,e);const B=I.attrs.instancedIds.location;g.enableVertexAttribArray(B),g.bindBuffer(g.ARRAY_BUFFER,this.inFrustumDrawIdsBuffer),g.vertexAttribPointer(B,1,g.FLOAT,!1,4,0),g.vertexAttribDivisor(B,1),I.bindViewports(I.unifs,(()=>{this.bbox.drawInstanced(I,this.inFrustumIndicesCount)})),this.occlusionDataBuffer.unbindForWriting(I)})(),i&&g.endQuery(i.TIME_ELAPSED_EXT),i&&(s=g.createQuery()),e(I,!1,s);const a={numReductionPoints:C},l=(A,I)=>{const C=g.getQueryParameter(I,g.QUERY_RESULT_AVAILABLE),e=g.getParameter(i.GPU_DISJOINT_EXT);if(C&&!e){const C=g.getQueryParameter(I,g.QUERY_RESULT);a[A]=C/1e6,g.deleteQuery(I)}},n=this.reductionDataBuffer.width,d=this.reductionDataBuffer.height,h=g.RED,c=g.UNSIGNED_BYTE;this.reductionDataBuffer.bindForReading(),function(A,g,I,C,i,e,t,B){return mA(this,void 0,void 0,(function*(){const o=A.createBuffer();return A.bindBuffer(A.PIXEL_PACK_BUFFER,o),A.bufferData(A.PIXEL_PACK_BUFFER,B.byteLength,A.STREAM_READ),A.readPixels(g,I,C,i,e,t,0),A.bindBuffer(A.PIXEL_PACK_BUFFER,null),yield ee(A,A.PIXEL_PACK_BUFFER,o,0,B),A.deleteBuffer(o),B}))}(g,0,0,n,d,h,c,this.reductionDataArray).then((()=>{this.reductionDataBuffer.unbindForReading(),i&&(l("queryDrawScene",t),l("queryDrawCulledBBoxes",o),l("queryReduceSceneGeoms",B),l("queryReduceBBoxes",s),this.renderer.emit("occlusionCullingProfilingData",a)),this.worker.postMessage({type:"OcclusionData",visibleItems:this.reductionDataArray})}))}addGeomItem(A){let g=this.glGeomItemsMap[A.getId()];if(null!=g)return this.glGeomItems[g];performance.now();const I=A.materialParam;let C=I.value,i=-1;i=this.renderer.glMaterialLibrary.addMaterial(C);const e=()=>{this.renderer.glMaterialLibrary.removeMaterial(C),C=I.value,n.materialId=this.renderer.glMaterialLibrary.addMaterial(C),h(),d()};I.on("valueChanged",e);const t=A.geomParam;let B=t.value;const o=this.renderer.glGeomLibrary.addGeom(B),s=()=>{this.renderer.glGeomLibrary.removeGeom(B),B=t.value,n.geomId=this.renderer.glGeomLibrary.addGeom(B),this.enableFrustumCulling&&this.dirtyWorkerItemIndices.add(g),d()};t.on("valueChanged",s),this.glGeomItemsIndexFreeList.length>0?g=this.glGeomItemsIndexFreeList.pop():(g=this.glGeomItems.length,this.glGeomItems.push(null)),this.removedItemIndices.includes(g)&&this.removedItemIndices.splice(this.removedItemIndices.indexOf(g),1),this.dirtyItemIndices.push(g);const a=this.renderer.gl,l=a.floatTexturesSupported,n=new ge(a,A,g,o,i,l),d=()=>{this.dirtyItemIndices.includes(g)||(this.dirtyItemIndices.push(g),this.renderer.drawItemChanged())};A.geomMatParam.on("valueChanged",d),A.on("cutAwayChanged",d),A.on("highlightChanged",d),A.on("selectabilityChanged",d),A.on("opacityChanged",d);const h=()=>{this.enableFrustumCulling&&(this.dirtyWorkerItemIndices.has(g)||(this.dirtyWorkerItemIndices.add(g),this.renderer.drawItemChanged()))};return this.enableFrustumCulling&&this.dirtyWorkerItemIndices.add(g),A.on("visibilityChanged",h),A.on("opacityChanged",h),A.geomMatParam.on("valueChanged",h),t.on("boundingBoxChanged",h),this.glGeomItems[g]=n,this.glGeomItemEventHandlers[g]={geomItemChanged:d,materialChanged:e,geomChanged:s,workerItemDataChanged:h},this.glGeomItemsMap[A.getId()]=g,this.renderer.requestRedraw(),n}removeGeomItem(A){const g=this.glGeomItemsMap[A.getId()];if(null==g)return null;const I=this.glGeomItems[g],C=A.geomParam.value;this.renderer.glGeomLibrary.removeGeom(C);const i=A.materialParam.value;this.renderer.glMaterialLibrary.removeMaterial(i);const e=this.glGeomItemEventHandlers[g],t=A.geomParam;return A.materialParam.off("valueChanged",e.materialChanged),t.off("valueChanged",e.geomChanged),A.geomMatParam.off("valueChanged",e.geomItemChanged),A.off("cutAwayChanged",e.geomItemChanged),A.off("highlightChanged",e.geomItemChanged),A.off("selectabilityChanged",e.geomItemChanged),A.off("opacityChanged",e.geomItemChanged),A.off("visibilityChanged",e.workerItemDataChanged),A.geomMatParam.off("valueChanged",e.workerItemDataChanged),t.off("boundingBoxChanged",e.workerItemDataChanged),A.off("opacityChanged",e.workerItemDataChanged),this.glGeomItems[g]=null,this.glGeomItemEventHandlers[g]=null,this.glGeomItemsIndexFreeList.push(g),delete this.glGeomItemsMap[A.getId()],this.removedItemIndices.push(g),this.dirtyWorkerItemIndices.has(g)&&this.dirtyWorkerItemIndices.delete(g),this.renderer.requestRedraw(),I}getGeomItem(A){var g;if(!(A>=this.glGeomItems.length))return null===(g=this.glGeomItems[A])||void 0===g?void 0:g.geomItem;console.warn("Invalid Draw Item id:"+A+" NumItems:"+(this.glGeomItems.length-1))}getGLGeomItem(A){const g=this.glGeomItemsMap[A.getId()];return null!=g?this.glGeomItems[g]:null}populateDrawItemDataArray(A,g,I){const C=this.glGeomItems[A];if(!C)return;const{geomItem:i,geomId:e}=C,t=i.materialParam.value,B=32*g;let o=0;i.isCutawayEnabled()&&(o|=Ae.GEOMITEM_FLAG_CUTAWAY),i.isSelectable()||(o|=Ae.GEOMITEM_INVISIBLE_IN_GEOMDATA),t.isOpaque()&&i.isOpaque()||(o|=Ae.GEOMITEM_TRANSPARENT);const a=new s(new Float32Array(I.buffer,4*(B+0),4));a.set(o,i.opacity,0,0);const l=this.renderer.glMaterialLibrary.getMaterialAllocation(t);l&&(a.z=l.start),a.w=e;const n=i.geomMatParam.value,d=new s(new Float32Array(I.buffer,4*(B+4),4)),h=new s(new Float32Array(I.buffer,4*(B+8),4)),c=new s(new Float32Array(I.buffer,4*(B+12),4));d.set(n.xAxis.x,n.yAxis.x,n.zAxis.x,n.translation.x),h.set(n.xAxis.y,n.yAxis.y,n.zAxis.y,n.translation.y),c.set(n.xAxis.z,n.yAxis.z,n.zAxis.z,n.translation.z);const r=new s(new Float32Array(I.buffer,4*(B+16),4));if(i.isHighlighted()){const A=i.getHighlight();r.set(A.r,A.g,A.b,A.a)}const G=new s(new Float32Array(I.buffer,4*(B+20),4));if(i.isCutawayEnabled()){const A=i.getCutVector(),g=i.getCutDist();G.set(A.x,A.y,A.z,g)}const m=i.boundingBoxParam.value,Q=new s(new Float32Array(I.buffer,4*(B+24))),E=new s(new Float32Array(I.buffer,4*(B+28)));Q.set(m.p0.x,m.p0.y,m.p0.z,0),E.set(m.p1.x,m.p1.y,m.p1.z,0)}getCullingWorkerData(A,g,I){const C=A.boundingBoxParam.value,i=.5*C.size(),e=C.center();let t=0!=A.cullable;const B=g.getParameter("MaintainScreenSize");B&&B.value&&(t=!1),g.getShaderName().startsWith("ScreenSpace")&&(t=!1),g.hasParameter("PointSize")&&(t=!1),this.enableOcclusionCulling&&!A.isSelectable()&&(t=!1);const o=!A.isOpaque()||!g.isOpaque(),s={triangles:0,lines:0,points:0},a=A.geomParam.value;if(a instanceof Mg)s.triangles+=a.getNumTriangles(),s.lines+=a.getNumLineSegments(),s.points+=a.getNumPoints();else if(a instanceof Kg||a instanceof Dg)s.triangles+=a.getNumTriangles();else if(a instanceof Yg||a instanceof Jg)s.lines+=a.getNumLineSegments();else{if(!(a instanceof Wg||a instanceof Ng))throw new Error("Unsupported geom type:"+a.constructor.name);s.points+=a.getNumVertices()}return{id:I,boundingRadius:i,pos:e.asArray(),cullable:t,visible:A.isVisible(),transparent:o,geomStats:s}}uploadGeomItemsToWorker(){if(this.enableFrustumCulling){const A=[];this.dirtyWorkerItemIndices.forEach((g=>{const I=this.glGeomItems[g];if(!I)return;const{geomItem:C}=I,i=C.materialParam.value;A.push(this.getCullingWorkerData(C,i,g))})),this.worker.postMessage({type:"UpdateGeomItems",geomItems:A,removedItemIndices:this.removedItemIndices}),this.dirtyWorkerItemIndices.clear(),this.removedItemIndices=[]}}uploadGeomItems(A){const g=this.renderer.gl;if(!g.floatTexturesSupported)return;let I=Math.round(Math.sqrt(8*this.glGeomItems.length)+.5);I=r.nextPow2(I),I%8!=0&&(I+=8-I%8),this.glGeomItemsTexture?this.glGeomItemsTexture.width!=I&&(this.glGeomItemsTexture.resize(I,I),this.dirtyItemIndices=Array(I*I/8).fill(0).map(((A,g)=>g))):(this.glGeomItemsTexture=new HC(g,{format:"RGBA",type:"FLOAT",width:I,height:I,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.glGeomItemsTexture.clear()),g.bindTexture(g.TEXTURE_2D,this.glGeomItemsTexture.glTex);const C=this.glGeomItemsTexture.getType();for(let A=0;A<this.dirtyItemIndices.length;A++){const i=this.dirtyItemIndices[A],e=Math.floor(8*i/I);let t=i+1;for(let g=A+1;g<this.dirtyItemIndices.length;g++){const A=this.dirtyItemIndices[g];if(Math.floor(8*A/I)!=e)break;if(A!=t)break;t++}const B=t-i,o=8*i%I,s=8*B,a=1,l=new Float32Array(32*B);for(let A=i;A<t;A++)this.populateDrawItemDataArray(A,A-i,l);if(C==g.FLOAT)this.glGeomItemsTexture.populate(l,s,a,o,e,!1);else{const A=r.convertFloat32ArrayToUInt16Array(l);this.glGeomItemsTexture.populate(A,s,a,o,e,!1)}A+=B-1}this.removedItemIndices=[],this.dirtyItemIndices=[]}bind(A){(this.dirtyWorkerItemIndices.size>0||this.removedItemIndices.length>0)&&this.uploadGeomItemsToWorker(),this.dirtyItemIndices.length>0&&this.uploadGeomItems(A);const g=this.renderer.gl,{instancesTexture:I,instancesTextureSize:C}=A.unifs;I&&(this.glGeomItemsTexture.bindToUniform(A,I),g.uniform1i(C.location,this.glGeomItemsTexture.width))}}let oe,se=!1,ae=!1;const le={};class ne extends nA{constructor(A,I={}){var C;if(super(),this.listenerIDs={},this.directives=[],this.solidAngleLimit=.004,this.__glcanvas=null,this.__scene=null,this.__shaderDirectives={},this.__renderGeomDataFbosRequested=!1,this.__shaders={},this.__passes={},this.passAssignments={},this.__passesRegistrationOrder=[],this.__passCallbacks=[],this.__viewports=[],this.__activeViewport=void 0,this.__continuousDrawing=!1,this.__redrawRequested=!1,this.__isMobile=!1,this.__drawSuspensionLevel=0,this.__xrViewportPresenting=!1,this.floatGeomBuffer=!0,this.multiSampledScreenBuffer=!1,this.__supportXR=!1,this.__xrViewport=void 0,this.screenQuad=null,!g.gpuDesc)throw new Error("Unable to create renderer. WebGL not Supported");this.__isMobile=g.isMobileDevice,this.requestRedraw=this.requestRedraw.bind(this),this.__gl=this.setupWebGL(A,I),this.screenQuad=new Hi(this.__gl,{directives:this.directives}),this.bindEventHandlers();const i=this.addViewport("main");i.debugGeomDataBuffer=I.debugGeomDataBuffer,i.debugOcclusionBuffer=I.debugOcclusionBuffer,this.glMaterialLibrary=new Pi(this),this.glMaterialLibrary.on("updated",(()=>{this.requestRedraw()})),this.glGeomLibrary=new $i(this),this.glGeomLibrary.on("updated",(()=>{this.requestRedraw()})),this.glGeomItemLibrary=new Be(this,I),this.glGeomItemLibrary.on("updated",(()=>{this.requestRedraw()}));for(const A in le)for(const g of le[A])this.addPass(new g,parseInt(A),!1);this.__supportXR=null===(C=I.supportXR)||void 0===C||C,this.__xrViewportPromise=new Promise(((A,g)=>{var I,C;if(this.__supportXR&&(null===(I=navigator)||void 0===I?void 0:I.xr)){const g=()=>{this.__gl.makeXRCompatible().then((()=>{this.__xrViewport=this.__setupXRViewport();let g=new CA(this.__xrViewport);this.emit("xrViewportSetup",g),A(this.__xrViewport)}))};null===(C=navigator)||void 0===C||C.xr.isSessionSupported("immersive-vr").then((A=>{A&&g()})).catch((A=>{console.warn("Unable to setup XR:"+A)}))}}))}addShaderPreprocessorDirective(A,g){this.__shaderDirectives[A]=g?"#define "+A+" = "+g:"#define "+A;const I=[];for(const A in this.__shaderDirectives)I.push(this.__shaderDirectives[A]);this.directives=I}getWidth(){return this.__glcanvas.width}getHeight(){return this.__glcanvas.height}addViewport(A){const g=new Ni(this,A,this.getWidth(),this.getHeight());return g.on("updated",(()=>{this.requestRedraw()})),g.on("viewChanged",(A=>{this.__xrViewportPresenting||this.emit("viewChanged",A)})),this.__viewports.push(g),this.__activeViewport=g,g}getViewport(A=0){return this.__viewports[A]}getViewportAtPos(A,g){for(const I of this.__viewports){const C=I.getPosX(),i=I.getPosY(),e=I.getWidth(),t=I.getHeight();if(A>=C&&g>=i&&A<=e+C&&g<=t+i)return I}}activateViewport(A){this.__activeViewport!=A&&(this.__activeViewport=A)}activateViewportAtPos(A,g){if(this.__xrViewportPresenting)return;const I=this.getViewportAtPos(A,g);I&&I!=this.__activeViewport&&this.activateViewport(I)}getActiveViewport(){return this.__activeViewport}suspendDrawing(){this.__drawSuspensionLevel++}resumeDrawing(){this.__drawSuspensionLevel--,0==this.__drawSuspensionLevel&&(this.renderGeomDataFbos(),this.requestRedraw())}renderGeomDataFbos(){if(1==this.__renderGeomDataFbosRequested)return;this.__renderGeomDataFbosRequested=!0;window.requestAnimationFrame((()=>{for(const A of this.__viewports)A.renderGeomDataFbo();this.__renderGeomDataFbosRequested=!1}))}getScene(){return this.__scene}setScene(A){this.__scene=A,this.addTreeItem(this.__scene.getRoot());let g=new L(this.__scene);this.emit("sceneSet",g)}addTreeItem(A){if(!(A instanceof ag))return;const g=A.getId(),I={};if(this.listenerIDs[g]=I,A instanceof kI){const g=A.geomParam;if(null==g.value){const C=()=>{delete I["Geometry.valueChanged"],this.assignTreeItemToGLPass(A)};I["Geometry.valueChanged"]=g.once("valueChanged",C)}else this.assignTreeItemToGLPass(A)}else this.assignTreeItemToGLPass(A);for(const g of A.getChildren())g&&this.addTreeItem(g);I.childAdded=A.on("childAdded",(A=>{this.addTreeItem(A.childItem)})),I.childRemoved=A.on("childRemoved",(A=>{this.removeTreeItem(A.childItem)})),this.renderGeomDataFbos()}assignTreeItemToGLPass(A){if(A instanceof kI){const g=A;this.glGeomItemLibrary.addGeomItem(g)}let g=!1;for(let I=this.__passesRegistrationOrder.length-1;I>=0;I--){const C={continueInSubTree:!0};if(g=this.__passesRegistrationOrder[I].itemAddedToScene(A,C),g){if(this.passAssignments[A.getId()]=I,!C.continueInSubTree)return;break}}if(!g)for(const g of this.__passCallbacks){const I={continueInSubTree:!0};if(g.itemAddedFn(A,I)){if(!I.continueInSubTree)return;break}}}removeTreeItem(A){if(!(A instanceof ag))return;const g=A.getId(),I=this.listenerIDs[g];delete this.listenerIDs[g],A.removeListenerById("childAdded",I.childAdded),A.removeListenerById("childRemoved",I.childRemoved);const C=this.passAssignments[g];if(null!=C){const I={continueInSubTree:!0};this.getPass(C).itemRemovedFromScene(A,I),delete this.passAssignments[g]}for(const g of A.getChildren())g&&this.removeTreeItem(g);if(A instanceof kI){const g=A;if(I["Geometry.valueChanged"]){A.geomParam.removeListenerById("valueChanged",I["Geometry.valueChanged"])}this.glGeomItemLibrary.removeGeomItem(g)}this.renderGeomDataFbos()}get gl(){return this.__gl}getGL(){return this.__gl}handleResize(A,g){if(this.__xrViewportPresenting)return;const I=Math.max(4,A)*window.devicePixelRatio,C=Math.max(4,g)*window.devicePixelRatio;this.__glcanvas.width=I,this.__glcanvas.height=C,this.__viewports.forEach((A=>{A.resize(I,C)}));const i=new F(I,C);this.emit("resized",i),this.requestRedraw()}getDiv(){return this.__glcanvas.parentElement}setupWebGL(A,I={}){var C,i;const{tagName:e}=A;if(!["DIV","CANVAS"].includes(e))throw new Error("Only CANVAS and DIV are valid root elements.");const t="DIV"===e;this.__glcanvas=A,t?(console.warn("@GLBaseRenderer#setupWebGL.","Using a DIV as root element is deprecated.","Use a CANVAS instead.","See: https://docs.zea.live/zea-engine/#/getting-started/get-started-with-engine?id=basic-setup"),this.__glcanvas=document.createElement("canvas"),A.appendChild(this.__glcanvas)):this.__glcanvas=A,this.__glcanvas.style["touch-action"]="none",this.__glcanvas.parentElement.style.position="relative",this.__glcanvas.parentElement.style.overflow="hidden",this.__glcanvas.style.width="100%",this.__glcanvas.style.height="100%",this.__glcanvas.style.position="absolute";const B=function(A,g,I){var C=!0,i=!0;if("function"!=typeof A)throw new TypeError("Expected a function");return ti(I)&&(C="leading"in I?!!I.leading:C,i="trailing"in I?!!I.trailing:i),wi(A,g,{leading:C,maxWait:g,trailing:i})}((A=>{if(Array.isArray(A)&&A.length)for(const g of A){if(!g.contentRect)return;const A=Math.round(g.contentRect.width),I=Math.round(g.contentRect.height);this.handleResize(A,I)}}),500);window.addEventListener("resize",(()=>{const A=[{contentRect:{width:this.__glcanvas.parentElement.clientWidth,height:this.__glcanvas.parentElement.clientHeight}}];B(A)}));const o=new ResizeObserver(B);try{o.observe(this.__glcanvas.parentNode,{box:"device-pixel-content-box"})}catch(A){o.observe(this.__glcanvas.parentNode,{box:"content-box"})}this.handleResize(this.__glcanvas.parentElement.clientWidth,this.__glcanvas.parentElement.clientHeight);const s="macOS"===g.OS&&"Chrome"===g.browserName,a=g.isIOSDevice,l={preserveDrawingBuffer:!0};l.antialias=!s&&!a&&(null===(C=I.antialias)||void 0===C||C),l.depth=!0,l.stencil=!0,l.alpha=null!==(i=I.alpha)&&void 0!==i&&i,l.xrCompatible=!1,this.multiSampledScreenBuffer=l.antialias,l.powerPreference=I.powerPreference||"high-performance";const n=wC(this.__glcanvas,l);n||alert("Unable to create WebGL context. WebGL not supported."),"webgl2"==n.name&&this.addShaderPreprocessorDirective("ENABLE_ES3"),n.floatTexturesSupported&&this.addShaderPreprocessorDirective("ENABLE_FLOAT_TEXTURES");{const A="webgl2"==n.name?n.getExtension("WEBGL_multi_draw"):null;A&&!I.disableMultiDraw?(n.multiDrawArrays=A.multiDrawArraysWEBGL.bind(A),n.multiDrawElements=A.multiDrawElementsWEBGL.bind(A),n.multiDrawElementsInstanced=A.multiDrawElementsInstancedWEBGL.bind(A),n.multiDrawArraysInstanced=A.multiDrawArraysInstancedWEBGL.bind(A)):this.addShaderPreprocessorDirective("EMULATE_MULTI_DRAW")}return"Safari"==g.browserName&&"webgl"==n.name?this.floatGeomBuffer=!1:this.floatGeomBuffer=null!=I.floatGeomBuffer?I.floatGeomBuffer:n.floatTexturesSupported,n.floatGeomBuffer=this.floatGeomBuffer,n}bindEventHandlers(){const A=()=>this.getWidth()>0&&this.getHeight(),I=A=>!!g.isMobileDevice&&(console.warn("Mobile device is triggering mouse event:",A.type),!0);this.__glcanvas.addEventListener("mousedown",(A=>{if(I(A))return;const g=new iA(A,this.__glcanvas.getBoundingClientRect());se=!0,oe=this,this.activateViewportAtPos(g.rendererX,g.rendererY);const C=this.getActiveViewport();C&&C.onPointerDown(g),ae=!1})),document.addEventListener("mouseup",(g=>{if(I(g))return;if(oe!=this||!A())return;const C=new iA(g,this.__glcanvas.getBoundingClientRect());se=!1;const i=this.getActiveViewport();i&&i.onPointerUp(C),ae&&(i&&i.onPointerLeave(C),oe=void 0)})),document.addEventListener("mousemove",(g=>{if(I(g))return;if(oe!=this||!A())return;const C=new iA(g,this.__glcanvas.getBoundingClientRect());se||this.activateViewportAtPos(C.rendererX,C.rendererY);const i=this.getActiveViewport();i&&i.onPointerMove(C)})),this.__glcanvas.addEventListener("mouseenter",(A=>{if(!I(A)&&!se){oe=this;const g=new iA(A,this.__glcanvas.getBoundingClientRect());if(this.activateViewportAtPos(g.rendererX,g.rendererY),!se){const A=this.getActiveViewport();A&&A.onPointerEnter(g)}ae=!1}})),this.__glcanvas.addEventListener("mouseleave",(g=>{if(I(g))return;if(oe!=this||!A())return;const C=new iA(g,this.__glcanvas.getBoundingClientRect());if(se)ae=!0;else{const A=this.getActiveViewport();A&&A.onPointerLeave(C),oe=void 0}})),document.addEventListener("contextmenu",(g=>{oe==this&&A()&&(g.preventDefault(),g.stopPropagation())})),this.__glcanvas.addEventListener("touchstart",(A=>{oe=this;const g=this.getActiveViewport(),I=new tA(A,this.__glcanvas.getBoundingClientRect());g.onPointerDown(I)}),{passive:!0}),this.__glcanvas.addEventListener("touchend",(A=>{const g=this.getActiveViewport(),I=new tA(A,this.__glcanvas.getBoundingClientRect());g.onPointerUp(I)}),{passive:!0}),this.__glcanvas.addEventListener("touchmove",(A=>{const g=this.getActiveViewport(),I=new tA(A,this.__glcanvas.getBoundingClientRect());g.onPointerMove(I)}),{passive:!0}),this.__glcanvas.addEventListener("touchcancel",(A=>{const g=this.getActiveViewport(),I=new tA(A,this.__glcanvas.getBoundingClientRect());g.onTouchCancel(I)}),{passive:!0});window.addEventListener("wheel",(g=>{if(oe==this&&A()&&oe){const A=new BA(g,this.__glcanvas.getBoundingClientRect()),I=oe.getActiveViewport();I&&I.onWheel(A)}}),{passive:!1}),document.addEventListener("keydown",(g=>{if(oe!=this||!A())return;const I=new J(g),C=oe.getActiveViewport();C&&C.onKeyDown(I)})),document.addEventListener("keyup",(g=>{if(oe!=this||!A())return;const I=new J(g),C=oe.getActiveViewport();C&&C.onKeyUp(I)}))}getGLCanvas(){return this.__glcanvas}frameAll(A=0){this.__viewports[A].frameView([this.__scene.getRoot()])}getOrCreateShader(A){let g=this.__shaders[A];return g||(g=e.constructClass(A),g||console.error("@GLBaseRenderer#getOrCreateShader - Shader not registered with the Registry:",A),g.setGLContext(this.__gl),this.__shaders[A]=g),g}addPass(A,g=-1,I=!0){-1==g&&(g=A.getPassType()),this.__passes[g]||(this.__passes[g]=[]);let C=0;for(const A in this.__passes){if(A==g.toString())break;C+=this.__passes[A].length}if(C+=this.__passes[g].length,A.on("updated",(A=>{this.requestRedraw(),this.renderGeomDataFbos()})),A.init(this,C),this.__passes[g].push(A),I){let A=0;for(const g in this.__passes){const I=this.__passes[g];I.forEach(((g,I)=>{g.setPassIndex(A+I)})),A+=I.length}}return this.__passesRegistrationOrder.push(A),this.requestRedraw(),C}getPass(A){let g=0;for(const I in this.__passes){const C=this.__passes[I];if(A-g<C.length)return C[A-g];g+=C.length}}supportsVR(){var A;return console.warn("@GLBaseRenderer#supportVR - Deprecated Method. Please instead connect to the vrViewportSetup signal."),this.__supportXR&&null!=(null===(A=navigator)||void 0===A?void 0:A.xr)}__setupXRViewport(){const A=new Mi(this),g=A=>{this.emit("viewChanged",A)};return A.on("presentingChanged",(I=>{const C=I.state;if(this.__xrViewportPresenting!=C)if(this.__xrViewportPresenting=C,C){for(const A in this.__passes){const g=this.__passes[A];for(const A of g)A.startPresenting()}A.on("viewChanged",g)}else{A.off("viewChanged",g),this.emit("updated");for(const A in this.__passes){const g=this.__passes[A];for(const A of g)A.stopPresenting()}const I=this.getViewport().getCamera().globalXfoParam.value,C=new P("CameraAndPointer",I);this.emit("viewChanged",C),this.requestRedraw()}})),A}getVRViewport(){return this.__xrViewport}getXRViewport(){return this.__xrViewportPromise}isXRViewportPresenting(){return this.__xrViewportPresenting}isContinuouslyDrawing(){return this.__continuousDrawing}startContinuousDrawing(){if(this.isContinuouslyDrawing()||this.__xrViewportPresenting)return;const A=()=>{const g=new jC(this.gl);this.__continuousDrawing&&!this.__xrViewportPresenting&&window.requestAnimationFrame(A);for(const A of this.__viewports)A.draw(g)};this.__continuousDrawing=!0,window.requestAnimationFrame(A)}stopContinuousDrawing(){this.__continuousDrawing=!1}toggleContinuousDrawing(){this.__continuousDrawing?this.stopContinuousDrawing():this.startContinuousDrawing()}drawItemChanged(){for(const A of this.__viewports)A.invalidateGeomDataBuffer();this.requestRedraw()}requestRedraw(){if(this.__redrawRequested||this.__continuousDrawing||this.__xrViewportPresenting||this.__drawSuspensionLevel>0)return!1;return window.requestAnimationFrame((()=>{this.__redrawRequested=!1;const A=new jC(this.gl);for(const g of this.__viewports)g.draw(A);1!=A.stack.length&&console.warn(" corrupt renderstate.stack.length:",A.stack.length)})),this.__redrawRequested=!0,!0}forceRender(){if(!this.__redrawRequested)return void console.warn("@GlBaseRenderer#forceRender - Scene is not dirty");this.__redrawRequested=!1;const A=new jC(this.gl);for(const g of this.__viewports)g.draw(A)}bindGLBaseRenderer(A){A.gl=this.__gl,A.shaderopts={directives:this.directives};const g=this.__gl;A.viewports&&1!=A.viewports.length?(A.bindRendererUnifs=I=>{const{cameraMatrix:C}=I;C&&g.uniformMatrix4fv(C.location,!1,A.cameraMatrix.asArray())},A.bindViewports=(I,C)=>{A.viewports.forEach(((A,i)=>{let e=A.region;g.viewport(e[0],e[1],e[2],e[3]);const{viewMatrix:t,projectionMatrix:B,eye:o,isOrthographic:s}=I;t&&g.uniformMatrix4fv(t.location,!1,A.viewMatrix.asArray()),B&&g.uniformMatrix4fv(B.location,!1,A.projectionMatrix.asArray()),o&&g.uniform1i(o.location,i),s&&g.uniform1i(s.location,A.isOrthographic),C()}))}):(A.bindRendererUnifs=I=>{const{cameraMatrix:C,viewMatrix:i,projectionMatrix:e,eye:t,isOrthographic:B}=I;C&&g.uniformMatrix4fv(C.location,!1,A.cameraMatrix.asArray());const o=A.viewports[0];i&&g.uniformMatrix4fv(i.location,!1,o.viewMatrix.asArray()),e&&g.uniformMatrix4fv(e.location,!1,o.projectionMatrix.asArray()),t&&g.uniform1i(t.location,0),B&&g.uniform1i(B.location,o.isOrthographic)},A.bindViewports=(A,g)=>g())}drawScene(A){A.directives=[...this.directives,"#define DRAW_COLOR"],A.shaderopts.directives=A.directives;for(const g in this.__passes){const I=this.__passes[g];for(const g of I)g.enabled&&g.draw(A)}}drawHighlightedGeoms(A){this.bindGLBaseRenderer(A),A.directives=[...this.directives,"#define DRAW_HIGHLIGHT"],A.shaderopts.directives=A.directives;for(const g in this.__passes){const I=this.__passes[g];for(const g of I)g.enabled&&g.drawHighlightedGeoms(A)}}drawSceneGeomData(A,g=255){A.pushGLStack(),A.glEnable(this.__gl.DEPTH_TEST),A.glEnable(this.__gl.CULL_FACE),this.bindGLBaseRenderer(A),A.directives=[...this.directives,"#define DRAW_GEOMDATA"],A.shaderopts.directives=A.directives,A.floatGeomBuffer=this.floatGeomBuffer;for(const I in this.__passes){if(0==(Number.parseInt(I)&g))continue;const C=this.__passes[I];for(const g of C)g.enabled&&g.drawGeomData(A)}A.popGLStack()}static registerPass(A,g){le[g]||(le[g]=[]),le[g].push(A)}destroy(){this.resizeObserver.disconnect()}}class de extends DC{constructor(A){super(A,"HighlightsShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;    //(location = 0)\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  v_texCoord = positions.xy+0.5;\n  gl_Position = vec4(positions.xy*2.0, 0.0, 1.0);\n}\n\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nuniform float outlineThickness;\nuniform sampler2D highlightDataTexture;\nuniform vec2 highlightDataTextureSize;\n\nvarying vec2 v_texCoord;\n\nvec3 SobelFactor(vec3 ldc, vec3 ldl, vec3 ldr, vec3 ldu, vec3 ldd)\n{\n  return abs(ldl - ldc) +\n      abs(ldr - ldc) +\n      abs(ldu - ldc) +\n      abs(ldd - ldc);\n}\n\n// https://github.com/ssell/UnitySobelOutline/blob/2e1f4a5b4e703ae2c96aaf08d5518ce58abbaab9/Assets/Resources/Shaders/SobelOutlineHLSL.shader#L18\nvec4 SobelSample(vec2 uv)\n{\n  vec3 offset = vec3((1.0 / highlightDataTextureSize.x), (1.0 / highlightDataTextureSize.y), 0.0) * outlineThickness;\n\n  vec4 pixelCenter = texture2D(highlightDataTexture, uv);\n  vec3 pixelLeft   = texture2D(highlightDataTexture, uv - offset.xz).rgb;\n  vec3 pixelRight  = texture2D(highlightDataTexture, uv + offset.xz).rgb;\n  vec3 pixelUp     = texture2D(highlightDataTexture, uv + offset.zy).rgb;\n  vec3 pixelDown   = texture2D(highlightDataTexture, uv - offset.zy).rgb;\n\n  vec3 sobelNormalVec = SobelFactor(pixelCenter.rgb, pixelLeft, pixelRight, pixelUp, pixelDown);\n  \n  float sobelNormal = sobelNormalVec.x + sobelNormalVec.y + sobelNormalVec.z;\n  \n  float outlineDepthMultiplier = 10.0;\n  float outlineDepthBias = 2.5;\n  sobelNormal = pow(sobelNormal * outlineDepthMultiplier, outlineDepthBias);\n\n  sobelNormal = clamp(sobelNormal, 0.0, 1.0);\n\n  \n  float pixelCenterWeight = length(pixelCenter.rgb) > 0.0 ? 1.0 : 0.0;\n  float pixelLeftWeight   = length(pixelLeft) > 0.0 ? 1.0 : 0.0;\n  float pixelRightWeight  = length(pixelRight) > 0.0 ? 1.0 : 0.0;\n  float pixelUpWeight     = length(pixelUp) > 0.0 ? 1.0 : 0.0;\n  float pixelDownWeight   = length(pixelDown) > 0.0 ? 1.0 : 0.0;\n  \n  // Weight each neighbors contribution to the current pixel color.\n  pixelCenter.rgb = pixelCenter.rgb * pixelCenterWeight;\n  pixelLeft   *= pixelLeftWeight;\n  pixelRight  *= pixelRightWeight;\n  pixelUp     *= pixelUpWeight;\n  pixelDown   *= pixelDownWeight;\n\n  // Add all the weighted contributions, and then normalize.\n  vec3 outlineColor = pixelCenter.rgb + pixelLeft + pixelRight +  pixelUp + pixelDown;\n  outlineColor /= pixelCenterWeight + pixelLeftWeight + pixelRightWeight + pixelUpWeight + pixelDownWeight;\n\n  return mix(vec4(outlineColor, sobelNormal), pixelCenter, pixelCenter.a);\n}\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\nvoid main(void) {\n    \n  vec4 outlineColor = SobelSample(v_texCoord);\n  \n  if (outlineColor.a > 0.0001) {\n#ifndef ENABLE_ES3\n    gl_FragColor = outlineColor;\n#else\n    fragColor = outlineColor;\n#endif\n  }\n  else {\n      discard;\n  }\n}\n\n")}}class he extends DC{constructor(A){super(A,"SilhouetteShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\nattribute vec3 positions;    //(location = 0)\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  v_texCoord = positions.xy+0.5;\n  gl_Position = vec4(positions.xy*2.0, 0.0, 1.0);\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\n#ifndef ENABLE_ES3\n#extension GL_EXT_frag_depth: enable\n#endif\nprecision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D colorTexture;\nuniform sampler2D depthTexture;\nuniform vec2 screenSize;\nuniform vec2 depthRange;\n\nuniform float outlineThickness;\nuniform color outlineColor;\nuniform float outlineSensitivity;\nuniform float outlineDepthBias;\n\nvarying vec2 v_texCoord;\n\n// http://web.archive.org/web/20130416194336/http://olivers.posterous.com/linear-depth-in-glsl-for-real\nfloat LinearEyeDepth(float z_b) {\n  float z_n = 2.0 * z_b - 1.0;\n  float z_e = 2.0 * depthRange.x * depthRange.y / (depthRange.y + depthRange.x - z_n * (depthRange.y - depthRange.x));\n  return z_e;\n}\n\nfloat LogEyeDepth(float z_b) {\n  return depthRange.x + ((depthRange.y - depthRange.x) * z_b);\n}\n\n// https://www.vertexfragment.com/ramblings/unity-postprocessing-sobel-outline/#depth-based-outline\n// https://github.com/ssell/UnitySobelOutline/blob/2e1f4a5b4e703ae2c96aaf08d5518ce58abbaab9/Assets/Resources/Shaders/SobelOutlineHLSL.shader\n\nfloat SobelDepth(float ldc, float ldl, float ldr, float ldu, float ldd)\n{\n  return abs(ldl - ldc) +\n      abs(ldr - ldc) +\n      abs(ldu - ldc) +\n      abs(ldd - ldc);\n}\n\nfloat SobelSampleDepth(vec2 uv, vec3 offset)\n{\n  float pixelCenter = LinearEyeDepth(texture2D(depthTexture, uv).r);\n  float pixelLeft   = LinearEyeDepth(texture2D(depthTexture, uv - offset.xz).r);\n  float pixelRight  = LinearEyeDepth(texture2D(depthTexture, uv + offset.xz).r);\n  float pixelUp     = LinearEyeDepth(texture2D(depthTexture, uv + offset.zy).r);\n  float pixelDown   = LinearEyeDepth(texture2D(depthTexture, uv - offset.zy).r);\n\n  float  outlineDepthMultiplier = (1.0 / pixelCenter) * outlineSensitivity;\n\n  return SobelDepth(pixelCenter, pixelLeft, pixelRight, pixelUp, pixelDown) * outlineDepthMultiplier;\n}\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec3 offset = vec3((1.0 / screenSize.x), (1.0 / screenSize.y), 0.0) * outlineThickness;\n  float sobelDepth = SobelSampleDepth(v_texCoord, offset);\n  float sobelValue = pow(sobelDepth, outlineDepthBias);\n\n  float minEdgeValue = 0.25;\n  float maxEdgeValue = 0.55;\n  sobelDepth = smoothstep(minEdgeValue, maxEdgeValue, sobelValue);\n\n#ifdef ENABLE_ES3\n  fragColor = vec4(outlineColor.rgb, sobelDepth);\n#else\n  fragColor = vec4(mix(texture2D(colorTexture, v_texCoord).rgb, outlineColor.rgb, sobelDepth), 1.0);\n#ifdef  GL_EXT_frag_depth\n  gl_FragDepthEXT = texture2D(depthTexture, v_texCoord).r;\n#endif\n#endif\n\n  // float z = texture2D(depthTexture, v_texCoord).r;\n  // float near = depthRange.x * 2.0;    // the near plane\n  // float far = depthRange.y / 2.0;     // the far plane\n  // float c = (2.0 * near) / (far + near - z * (far - near));  // convert to linear values \n  // fragColor = vec4(vec3(c), 1.0);\n\n  \n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}const ce=EC.OPAQUE|EC.TRANSPARENT|EC.OVERLAY;class re extends ne{constructor(A,g={}){super(A,g),this.__exposure=1,this.__gamma=2.2,this.__glEnvMap=null,this.highlightOutlineThickness=1,this.renderMode="pbr",this.outlineMethod="geometry",this.outlineThickness=0,this.outlineColor=new l(.15,.15,.15,1),this.hiddenLineColor=new l(.15,.15,.15,0),this.outlineSensitivity=2,this.outlineDepthBias=.7,this.__rayCastRenderTarget=null,this.__backgroundMapShader=null,this.__backgroundMapShaderBinding=null,this.__rayCastRenderTargetProjMatrix=new h,this.__exposure=1,this.__gamma=2.2,this.__displayEnvironment=!0,this.__debugMode=0,this.rayCastDist=0,this.rayCastArea=0;const I=this.__gl;this.highlightsShader=new de(I),this.silhouetteShader=new he(I),this.__debugTextures=[void 0],this.addShaderPreprocessorDirective("ENABLE_INLINE_GAMMACORRECTION"),g.disableTextures||this.addShaderPreprocessorDirective("ENABLE_TEXTURES"),g.debugGeomIds&&this.addShaderPreprocessorDirective("DEBUG_GEOM_ID")}__bindEnvMap(A){const g=this.__gl;if(!(A instanceof RI)){const I=A;if("FLOAT"===I.type?this.__glBackgroundMap=new $C(this.__gl,I):this.__glBackgroundMap=new HC(this.__gl,I),this.__glBackgroundMap.on("loaded",(()=>{this.requestRedraw()})),this.__glBackgroundMap.on("updated",(()=>{this.requestRedraw()})),!this.__backgroundMapShader){g.__quadVertexIdsBuffer||g.setupInstancedQuad(),this.__backgroundMapShader=new ii(this.__gl);const A=this.__backgroundMapShader.compileForTarget();this.__backgroundMapShaderBinding=_C(this.__gl,A.attrs,g.__quadattrbuffers,g.__quadIndexBuffer)}return}if("webgl2"!==g.name)return;"FLOAT"===A.type&&(this.addShaderPreprocessorDirective("ENABLE_PBR"),this.__glEnvMap=new ei(this,A)),this.__glEnvMap.on("loaded",(A=>{this.requestRedraw()})),this.__glEnvMap.on("updated",(A=>{this.requestRedraw()}));const I=new K(this.__glEnvMap);this.emit("envMapAssigned",I)}setScene(A){const g=A.envMapParam;null!=g.value&&this.__bindEnvMap(g.value),g.on("valueChanged",(()=>{this.__bindEnvMap(g.value)}));const I=A.displayEnvMapParam;this.__displayEnvironment=I.value,I.on("valueChanged",(()=>{this.__displayEnvironment=I.value,this.requestRedraw()})),super.setScene(A)}addViewport(A){return super.addViewport(A)}get exposure(){return this.__exposure}set exposure(A){this.__exposure=A,this.requestRedraw()}get gamma(){return this.__gamma}set gamma(A){this.__gamma=A,this.requestRedraw()}get displayEnvironment(){return this.__displayEnvironment}set displayEnvironment(A){this.__displayEnvironment=A,this.requestRedraw()}raycastWithRay(A,g,I=.01,C=ce){const i=new m;return i.setLookAt(A.start,A.start.add(A.dir),new o(0,0,1)),this.raycast(i,A,g,I,C)}raycastWithXfo(A,g,I=.01,C=ce){const i=new G(A.tr,A.ori.getZaxis().negate());return this.raycast(A,i,g,I,C)}raycast(A,g,I,C=.01,i=ce){return this.rayCastDist==I&&this.rayCastArea==C||(this.__rayCastRenderTargetProjMatrix.setOrthographicMatrix(-.5*C,.5*C,-.5*C,.5*C,0,I),this.rayCastDist=I,this.rayCastArea=C),this.raycastWithProjection(A,this.__rayCastRenderTargetProjMatrix,g,i)}raycastWithProjection(A,g,I,C=ce){var i;const e=new qC(this.__gl);e.cameraMatrix=A.toMat4(),e.viewports=[{region:[0,0,3,3],viewMatrix:A.inverse().toMat4(),projectionMatrix:g,isOrthographic:1,fovY:0}];const t=this.__gl;this.__rayCastRenderTarget||(this.__rayCastRenderTarget=new LC(t,{type:"FLOAT",format:"RGBA",filter:"NEAREST",createDepthTexture:!0,width:3,height:3,numColorChannels:1})),this.__rayCastRenderTarget.bindForWriting(e,!0),t.enable(t.CULL_FACE),t.enable(t.DEPTH_TEST),t.depthFunc(t.LEQUAL),t.depthMask(!0),this.drawSceneGeomData(e,C),t.finish(),this.__rayCastRenderTarget.unbindForWriting(),this.__rayCastRenderTarget.bindForReading();const B=new Float32Array(36);t.readPixels(0,0,3,3,t.RGBA,t.FLOAT,B),this.__rayCastRenderTarget.unbindForReading();const o=[4,3,5,1,7];let s;for(const A of o)if(0!=B[4*A+3]){s=B.subarray(4*A,4*A+4);break}if(!s)return null;const a=63&Math.round(s[0]),l=null===(i=this.getPass(a))||void 0===i?void 0:i.getGeomItemAndDist(s);if(l){const A=I.start.add(I.dir.scale(l.dist));return{pointerRay:I,intersectionPos:A,geomItem:l.geomItem,componentId:-1,dist:l.dist,geomData:s}}return null}raycastCluster(A,g,I,C=.01,i=ce){const e=this.__gl;this.__rayCastRenderTarget||(this.__rayCastRenderTarget=new LC(e,{type:"FLOAT",format:"RGBA",filter:"NEAREST",createDepthTexture:!0,width:3,height:3,numColorChannels:1}),this.__rayCastRenderTargetProjMatrix=new h),this.rayCastDist==I&&this.rayCastArea==C||(this.__rayCastRenderTargetProjMatrix.setOrthographicMatrix(-.5*C,.5*C,-.5*C,.5*C,0,I),this.rayCastDist=I,this.rayCastArea=C);const t=new qC(this.__gl);t.viewports=[{region:[0,0,3,3],viewMatrix:A.inverse().toMat4(),projectionMatrix:this.__rayCastRenderTargetProjMatrix,isOrthographic:1}],t.cameraMatrix=A.toMat4(),this.__rayCastRenderTarget.bindForWriting(t,!0),e.enable(e.CULL_FACE),e.enable(e.DEPTH_TEST),e.depthFunc(e.LEQUAL),e.depthMask(!0),this.drawSceneGeomData(t,i),e.finish(),this.__rayCastRenderTarget.unbindForWriting(),this.__rayCastRenderTarget.bindForReading();const B=new Float32Array(36);e.readPixels(0,0,3,3,e.RGBA,e.FLOAT,B),this.__rayCastRenderTarget.unbindForReading();const o=[];for(let A=0;A<9;A++)if(0!=B[4*A+3]){const I=B.subarray(4*A,4*A+4),C=63&Math.round(I[0]),i=this.getPass(C);if(i){const A=i.getGeomItemAndDist(I);if(A){const C=g.start.add(g.dir.scale(A.dist));o.push({pointerRay:g,intersectionPos:C,geomItem:A.geomItem,componentId:-1,dist:A.dist,geomData:I})}}}return o}drawBackground(A){if(this.__glBackgroundMap&&this.__backgroundMapShader&&this.__backgroundMapShaderBinding){if(!this.__glBackgroundMap.isLoaded())return;const g=this.__gl;g.depthMask(!1),this.__backgroundMapShader.bind(A);const I=A.unifs;this.__glBackgroundMap.bindToUniform(A,I.backgroundImage),this.__backgroundMapShaderBinding.bind(A),g.drawQuad()}else this.__glEnvMap&&this.__glEnvMap.draw&&this.__glEnvMap.draw(A)}bindGLRenderer(A){super.bindGLBaseRenderer(A),A.envMap=this.__glEnvMap,A.exposure=this.__exposure,A.renderMode=this.renderMode,A.outlineThickness=this.outlineThickness,A.outlineColor=this.outlineColor,A.hiddenLineColor=this.hiddenLineColor,A.outlineMethod=this.outlineMethod,A.screenQuad=this.screenQuad}drawScene(A){this.bindGLRenderer(A),this.__displayEnvironment&&this.drawBackground(A),super.drawScene(A)}}class Ge extends V{constructor(A,g){super(),this.drawIdsArray=null,this.drawIdsBuffer=null,this.highlightedIdsArray=null,this.highlightedIdsBuffer=null,this.gl=A,this.glGeom=g,this.id=g?g.getGeom().getId():this.getId(),this.glGeomItems=[],this.glgeomItems_freeIndices=[],this.glgeomItemEventHandlers=[],this.drawIdsArray=null,this.drawIdsBuffer=null,this.drawIdsBufferDirty=!0,this.highlightedIdsArray=null,this.highlightedIdsBuffer=null,this.highlightedIdsBufferDirty=!0,this.visibleItems=[],this.highlightedItems=[]}getGLGeom(){return this.glGeom}getDrawCount(){return this.visibleItems.length}addGLGeomItem(A){let g;if(this.glgeomItems_freeIndices.length>0?g=this.glgeomItems_freeIndices.pop():(g=this.glGeomItems.length,this.glGeomItems.push(null)),A.geomItem.isVisible()){this.visibleItems.push(g);const A=new Y(1,this.visibleItems.length);this.emit("drawCountChanged",A)}A.geomItem.isHighlighted()&&(this.highlightedItems.push(g),this.highlightedIdsBufferDirty=!0);const I={};I.highlightChanged=I=>{if(A.geomItem.isHighlighted()){if(this.highlightedItems.includes(g))return;this.highlightedItems.push(g);const A=new Y(1,this.highlightedItems.length);this.emit("highlightedCountChanged",A)}else{this.highlightedItems.splice(this.highlightedItems.indexOf(g),1);const A=new Y(-1,this.highlightedItems.length);this.emit("highlightedCountChanged",A)}this.highlightedIdsBufferDirty=!0},A.geomItem.on("highlightChanged",I.highlightChanged),I.visibilityChanged=A=>{if(A.visible){this.visibleItems.push(g);const A=new Y(1,this.visibleItems.length);this.emit("drawCountChanged",A)}else{this.visibleItems.splice(this.visibleItems.indexOf(g),1);const A=new Y(-1,this.visibleItems.length);this.emit("drawCountChanged",A)}this.drawIdsBufferDirty=!0},A.geomItem.on("visibilityChanged",I.visibilityChanged),this.glGeomItems[g]=A,this.glgeomItemEventHandlers[g]=I,this.drawIdsBufferDirty=!0,A.GLGeomItemSet=this}removeGLGeomItem(A){const g=this.glGeomItems.indexOf(A),I=this.glgeomItemEventHandlers[g];if(A.geomItem.off("highlightChanged",I.highlightChanged),A.geomItem.off("visibilityChanged",I.visibilityChanged),this.glGeomItems[g]=null,this.glgeomItemEventHandlers[g]=null,A.GLGeomItemSet=null,this.glgeomItems_freeIndices.push(g),A.geomItem.isVisible()){this.visibleItems.splice(this.visibleItems.indexOf(g),1);const A=new Y(-1,this.visibleItems.length);this.emit("drawCountChanged",A)}if(A.geomItem.isHighlighted()){this.highlightedItems.splice(this.highlightedItems.indexOf(g),1);const A=new Y(-1,this.highlightedItems.length);this.emit("highlightedCountChanged",A)}this.drawIdsBufferDirty=!0,this.glGeomItems.length==this.glgeomItems_freeIndices.length&&this.destroy()}updateDrawIDsBuffer(){const A=this.gl;A.floatTexturesSupported?(this.drawIdsBuffer&&this.glGeomItems.length!=this.drawIdsArray.length&&(this.gl.deleteBuffer(this.drawIdsBuffer),this.drawIdsBuffer=null),this.drawIdsBuffer||(this.drawIdsBuffer=A.createBuffer(),A.bindBuffer(A.ARRAY_BUFFER,this.drawIdsBuffer)),A.bindBuffer(A.ARRAY_BUFFER,this.drawIdsBuffer),A.bufferData(A.ARRAY_BUFFER,this.getDrawIdsArray(),A.STATIC_DRAW),this.drawIdsBufferDirty=!1):this.drawIdsBufferDirty=!1}getDrawIdsArray(){return this.drawIdsBufferDirty&&(this.drawIdsArray&&this.glGeomItems.length==this.drawIdsArray.length||(this.drawIdsArray=new Float32Array(this.glGeomItems.length)),this.visibleItems.forEach(((A,g)=>{this.drawIdsArray[g]=this.glGeomItems[A].getGeomItemId()})),this.drawIdsBufferDirty=!1),this.drawIdsArray}updateHighlightedIDsBuffer(){const A=this.gl;A.floatTexturesSupported?(this.highlightedIdsBuffer&&this.glGeomItems.length>this.highlightedIdsArray.length&&(this.gl.deleteBuffer(this.highlightedIdsBuffer),this.highlightedIdsBuffer=null),this.highlightedIdsBuffer||(this.highlightedIdsBuffer=A.createBuffer()),A.bindBuffer(A.ARRAY_BUFFER,this.highlightedIdsBuffer),A.bufferData(A.ARRAY_BUFFER,this.getHighlightedIdsArray(),A.STATIC_DRAW),this.highlightedIdsBufferDirty=!1):this.highlightedIdsBufferDirty=!1}getHighlightedIdsArray(){return this.highlightedIdsBufferDirty&&((!this.highlightedIdsArray||this.highlightedItems.length>this.highlightedIdsArray.length)&&(this.highlightedIdsArray=new Float32Array(this.glGeomItems.length)),this.highlightedItems.forEach(((A,g)=>{this.highlightedIdsArray[g]=this.glGeomItems[A].getGeomItemId()})),this.highlightedIdsBufferDirty=!1),this.highlightedIdsArray}draw(A){0!=this.visibleItems.length&&(this.drawIdsBufferDirty&&this.updateDrawIDsBuffer(),this.__bindAndRender(A,this.visibleItems,this.drawIdsBuffer))}drawHighlighted(A){0!=this.highlightedItems.length&&(this.highlightedIdsBufferDirty&&this.updateHighlightedIDsBuffer(),this.__bindAndRender(A,this.highlightedItems,this.highlightedIdsBuffer))}drawGeomData(A){0!=this.visibleItems.length&&(this.drawIdsBufferDirty&&this.updateDrawIDsBuffer(),this.__bindAndRender(A,this.visibleItems,this.drawIdsBuffer))}__bindAndRender(A,g,I){const C=this.gl,i=A.unifs;if(A.glGeom!=this.glGeom&&(this.glGeom.bind(A),A.glGeom=this.glGeom),C.floatTexturesSupported&&C.drawElementsInstanced&&A.supportsInstancing){A.unifs.instancedDraw&&C.uniform1i(A.unifs.instancedDraw.location,1);const e=A.attrs.instancedIds.location;C.enableVertexAttribArray(e),C.bindBuffer(C.ARRAY_BUFFER,I),C.vertexAttribPointer(e,1,C.FLOAT,!1,4,0),C.vertexAttribDivisor(e,1),A.bindViewports(i,(()=>{this.glGeom.drawInstanced(A,g.length)}))}else A.unifs.instancedDraw&&C.uniform1i(A.unifs.instancedDraw.location,0),g.forEach((g=>{this.glGeomItems[g].bind(A),A.bindViewports(i,(()=>{this.glGeom.draw(A)}))}))}destroy(){this.drawIdsBuffer&&(this.gl.deleteBuffer(this.drawIdsBuffer),this.drawIdsBuffer=null),this.highlightedIdsBuffer&&(this.gl.deleteBuffer(this.highlightedIdsBuffer),this.highlightedIdsBuffer=null),this.emit("destructing")}}class me extends V{constructor(A,g){super(),this.glGeomItemSets={},this.pass=A,this.__gl=A.renderer.gl,this.glMaterial=g,this.glGeomItemSets={},this.drawCount=0;const I=g.getMaterial(),C=A=>{I.off("opacityChanged",C);for(const A in this.glGeomItemSets){const g=this.glGeomItemSets[A];for(const A of g.glGeomItems){const g=A.geomItem;this.pass.removeGeomItem(g),this.pass.renderer.assignTreeItemToGLPass(g)}}};I.on("opacityChanged",C)}getGLMaterial(){return this.glMaterial}addGLGeomItem(A,g){const I=g.getGeom().getId();let C=this.glGeomItemSets[I];C||(C=new Ge(this.__gl,g),this.addGeomItemSet(C)),C.addGLGeomItem(A)}drawCountChanged(A){this.drawCount+=A.change,this.emit("updated")}__materialChanged(){const A=this.glMaterial.getMaterial();if(!this.pass.checkMaterial(A))for(const A in this.glGeomItemSets){const g=this.glGeomItemSets[A];for(const A of g.glGeomItems){const g=A.geomItem;this.pass.removeGeomItem(g),this.pass.renderer.assignTreeItemToGLPass(g)}}}addGeomItemSet(A){const g=A.getGLGeom().getGeom().getId();this.glGeomItemSets[g]=A;const I=A.on("drawCountChanged",(A=>{this.drawCountChanged(A)}));A.once("destructing",(()=>{A.removeListenerById("drawCountChanged",I),delete this.glGeomItemSets[g],0==Object.keys(this.glGeomItemSets).length&&this.emit("destructing")}))}draw(A){if(0==this.drawCount)return;this.glMaterial.bind(A,!0);for(const g in this.glGeomItemSets){this.glGeomItemSets[g].draw(A)}this.glMaterial.unbind(A)}drawHighlighted(A){this.glMaterial.bind(A,!1);for(const g in this.glGeomItemSets){this.glGeomItemSets[g].drawHighlighted(A)}this.glMaterial.unbind(A)}drawGeomData(A){this.glMaterial.bind(A,!1);for(const g in this.glGeomItemSets){this.glGeomItemSets[g].draw(A)}this.glMaterial.unbind(A)}}class Qe extends V{constructor(A,g,I){super(),this.gl=A,this.pass=g,this.glShader=I.glShader,this.glgeomdatashader=I.glgeomdatashader,this.glselectedshader=I.glselectedshader,this.glMaterialGeomItemSets=[]}findMaterialGeomItemSets(A){for(const g of this.glMaterialGeomItemSets)if(g.glMaterial==A)return g;return null}addGLGeomItem(A,g,I){let C=this.findMaterialGeomItemSets(I);C||(C=new me(this.pass,I),this.addMaterialGeomItemSets(C)),C.addGLGeomItem(A,g)}addMaterialGeomItemSets(A){this.glMaterialGeomItemSets.push(A);const g=()=>{this.emit("updated")},I=()=>{A.off("updated",g),A.off("destructing",I);const C=this.glMaterialGeomItemSets.indexOf(A);this.glMaterialGeomItemSets.splice(C,1),0==this.glMaterialGeomItemSets.length&&this.emit("destructing")};A.on("updated",g),A.on("destructing",I)}removeMaterialGeomItemSets(A){const g=this.glMaterialGeomItemSets.indexOf(A);this.glMaterialGeomItemSets.splice(g,1)}getMaterialGeomItemSets(){return this.glMaterialGeomItemSets}draw(A){const g=this.glShader;if(this.glShader.bind(A)){this.pass.renderer.glGeomItemLibrary.bind(A);for(const g of this.glMaterialGeomItemSets)g.draw(A);g.unbind(A)}}drawHighlightedGeoms(A){if(this.glselectedshader&&this.glselectedshader.bind(A,"highlight")){this.pass.renderer.glGeomItemLibrary.bind(A);for(const g of this.glMaterialGeomItemSets)g.drawHighlighted(A);this.glselectedshader.unbind(A)}}drawGeomData(A){var g;if(!this.glgeomdatashader||!this.glgeomdatashader.bind(A,"geomData"))return;this.pass.renderer.glGeomItemLibrary.bind(A);const I=this.gl,{floatGeomBuffer:C,passId:i,occlusionCulling:e}=A.unifs;C&&I.uniform1i(C.location,A.floatGeomBuffer?1:0),i&&I.uniform1i(i.location,A.passIndex),e&&I.uniform1i(e.location,null!==(g=A.occlusionCulling)&&void 0!==g?g:0);for(const g of this.glMaterialGeomItemSets)g.drawGeomData(A);this.glgeomdatashader.unbind(A)}}class Ee extends DC{constructor(A){super(A,"BillboardShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 cameraMatrix;\nuniform int isOrthographic;\n\nimport 'GLSLUtils.glsl'\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\n// A sorted attribute of instance Ids so we draw from back to front.\ninstancedattribute float instanceIds;\n\nimport 'transpose.glsl'\nimport 'imageAtlas.glsl'\n\nuniform sampler2D atlasBillboards_layout;\nuniform vec4 atlasBillboards_desc;\n\nuniform sampler2D instancesTexture;\nuniform int instancesTextureSize;\nuniform int passId;\n\nconst int cols_per_instance = 7;\n\nmat4 getMatrix(sampler2D texture, int textureSize, int index) {\n  // Unpack 3 x 4 matix columns into a 4 x 4 matrix.\n  vec4 col0 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 0);\n  vec4 col1 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 1);\n  vec4 col2 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 2);\n  mat4 result = mat4(col0, col1, col2, vec4(0.0, 0.0, 0.0, 1.0));\n  return transpose(result);\n  // return mat4(1.0);\n}\n\nmat4 getModelMatrix(int id) {\n  return getMatrix(instancesTexture, instancesTextureSize, id);\n}\nvec4 getInstanceData(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 3);\n}\nvec4 getPivot(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 4);\n}\nvec4 getTintColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 5);\n}\n\n#else\n\nuniform vec4 atlasBillboards_desc;\n\nuniform mat4 modelMatrix;\nuniform vec2 pivot;\nuniform vec4 billboardData;\nuniform vec4 tintColor;\nuniform vec4 layoutData;\n\n#endif\n\nuniform int inVR;\n\nmat4 calcLookAtMatrix(vec3 origin, vec3 target, float roll) {\n  // vec3 rr = vec3(sin(roll), 0.0, cos(roll));\n  vec3 rr = vec3(0.0, 0.0, 1.0);\n  vec3 ww = normalize(target - origin);\n  vec3 uu = normalize(cross(rr, ww));\n  vec3 vv = normalize(cross(ww, uu));\n\n  return mat4(vec4(uu, 0.0), vec4(vv, 0.0), vec4(ww, 0.0), vec4(origin, 1.0));\n}\n\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\n/* VS Outputs */\nvarying float v_instanceID;\nvarying vec2 v_texCoord;\nvarying float v_alpha;\nvarying vec4 v_tint;\nvarying vec3 v_viewPos;\n\nvoid main(void) {\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\n  int instanceID = int(instanceIds);\n  v_instanceID = float(instanceID) + 0.25;\n\n  mat4 modelMatrix = getModelMatrix(instanceID);\n  vec2 pivot = getPivot(instanceID).xy;\n  vec4 billboardData = getInstanceData(instanceID);\n  vec4 layoutData = fetchTexel(atlasBillboards_layout, int(atlasBillboards_desc.z), int(billboardData.z));\n  v_tint = getTintColor(instanceID);\n\n#else\n\n  v_tint = tintColor;\n\n#endif\n\n  vec2 quadVertex = getQuadVertexPositionFromID();\n  \n  vec2 pos = quadVertex + vec2(0.5, 0.0) - pivot;\n  v_texCoord = vec2(quadVertex.x, -quadVertex.y) + 0.5;\n  v_alpha = billboardData.w;\n  v_texCoord *= layoutData.zw;\n  v_texCoord += layoutData.xy;\n\n  float scl = billboardData.x;\n  float width = layoutData.z * atlasBillboards_desc.x * scl;\n  float height = layoutData.w * atlasBillboards_desc.y * scl;\n  int flags = int(billboardData.y);\n\n  // Use cross platform bit flags methods\n  bool alignedToCamera = testFlag(flags, 4); // flag = 1<<2\n  bool drawOnTop = testFlag(flags, 8); // flag = 1 << 3\n  bool fixedSizeOnscreen = testFlag(flags, 16); // flag = 1 << 4\n\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n\n  // Note: items in front of the camera will have a negative value here.\n  float sc = 1.0;\n  if (fixedSizeOnscreen) {\n    sc = -modelViewMatrix[3][2];\n    \n    if (inVR == 1) {\n      // During XR sessions, there is a scaling applied to the view matrix\n      // which causes a distortion to the line width. We extract that scale here\n      // and use to correct the distortion.\n      // See also: FatPointsShader\n      vec3 viewZ = modelViewMatrix[2].xyz;\n      float viewScale = length(viewZ);\n      sc /= viewScale;\n    }\n  }\n  \n  mat4 modelViewProjectionMatrix;\n  if (alignedToCamera) {\n    if (inVR == 0) {\n      gl_Position = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n      gl_Position += vec4(pos.x * width * sc, (pos.y + 0.5) * height * sc, 0.0, 0.0);\n      v_viewPos = gl_Position.xyz;\n      gl_Position = projectionMatrix * gl_Position;\n    } else {\n      vec3 cameraPos = vec3(cameraMatrix[3][0], cameraMatrix[3][1], cameraMatrix[3][2]);\n      vec3 billboardPos = vec3(modelMatrix[3][0], modelMatrix[3][1], modelMatrix[3][2]);\n      mat4 lookAt = calcLookAtMatrix(billboardPos, cameraPos, 0.0);\n      mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * lookAt;\n      gl_Position = modelViewProjectionMatrix * vec4(pos.x * width * sc, (pos.y + 0.5) * height * sc, 0.0, 1.0);\n      v_viewPos = (modelViewMatrix * vec4(pos.x * width * sc, (pos.y + 0.5) * height * sc, 0.0, 1.0)).xyz;\n    }\n  }\n  else {\n    modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;\n    gl_Position = modelViewProjectionMatrix * vec4(pos.x * width, (pos.y + 0.5) * height, 0.0, 1.0);\n    v_viewPos = (modelViewMatrix * vec4(pos.x * width, (pos.y + 0.5) * height, 0.0, 1.0)).xyz;\n  }\n\n  // Use cross platform bit flags methods\n  if (drawOnTop) {\n    if (isOrthographic > 0){\n      gl_Position.z = mix(gl_Position.z, -1.0, 0.5);\n    } else {\n      gl_Position.z = mix(gl_Position.z, -gl_Position.z, 0.5);\n    }\n  }\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nimport 'imageAtlas.glsl'\n\nuniform sampler2D atlasBillboards;\n\n/* VS Outputs */\nvarying float v_instanceID;\nvarying vec2 v_texCoord;\nvarying float v_alpha;\nvarying vec4 v_tint;\nvarying vec3 v_viewPos;\n\nuniform sampler2D instancesTexture;\nuniform int instancesTextureSize;\n\n#if defined(DRAW_GEOMDATA)\n  uniform int isOrthographic;\n  import 'surfaceGeomData.glsl'\n#endif // DRAW_GEOMDATA\n\nconst int cols_per_instance = 7;\n\nvec4 getHilightColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 6);\n}\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  int instanceID = int(v_instanceID);\n  vec4 imageColor = texture2D(atlasBillboards, v_texCoord) * v_tint;\n  imageColor.a *= v_alpha;\n  if(imageColor.a < 0.1)\n    discard;\n\n#if defined(DRAW_COLOR)\n  fragColor = imageColor;\n  // fragColor.r = 1.0;\n  // fragColor.a = 1.0;\n#elif defined(DRAW_GEOMDATA)\n  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_instanceID, 0.0, isOrthographic);\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = getHilightColor(instanceID);\n  // Skip unhilighting labels.\n  if(fragColor.r < 0.001 && fragColor.g < 0.001 && fragColor.b < 0.001)\n    discard;\n#endif // DRAW_HIGHLIGHT\n  \n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}class be extends DC{constructor(A){super(A,"EnvProjectionShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;    //(location = 0)\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform vec3 projectionCenter;\n\nimport 'inverse.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\n \nvoid main()\n{\n  int geomItemId = getGeomItemId();\n  vec4 pos = vec4(positions, 1.);\n  mat4 modelMatrix = getModelMatrix(geomItemId);\n  mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;\n\n  gl_Position = modelViewProjectionMatrix * pos;\n\n  vec4 worldPos = modelMatrix * pos;\n  v_worldDir = worldPos.xyz - projectionCenter;\n}\n\n")}}new XI("EnvProjectionShader_template").addParameter(new LA("projectionCenter",new o(0,0,1.7)));class Ze extends DC{constructor(A){super(A,"FatLinesShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\ninstancedattribute vec2 segmentIndices;\nattribute float vertexIDs;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform int isOrthographic;\n\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\nuniform int geomItemId;\nint getGeomItemId() {\n  return geomItemId;\n}\n\nuniform sampler2D positionsTexture;\nuniform int positionsTextureSize;\n\nuniform float LineThickness;\nuniform float Overlay;\n\nimport 'calcFatLinesViewPos.glsl'\n\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\nvarying vec2 v_texCoord;\n\nvarying float v_geomItemId;\nvarying vec4 v_geomItemData;\nvarying float v_drawItemID;\nvarying vec3 v_worldPos;\n\nvoid main(void) {\n\n  int geomItemId = getGeomItemId();\n  v_geomItemId = float(geomItemId);\n  v_geomItemData = getInstanceData(geomItemId);\n\n  int vertexID = int(vertexIDs);\n\n  mat4 modelMatrix = getModelMatrix(geomItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n  vec3 pos;\n\n  #if defined(DRAW_COLOR)\n    v_viewPos       = calcFatLinesViewPos(vertexID, modelViewMatrix, v_viewNormal, v_texCoord, pos);\n  #elif defined(DRAW_GEOMDATA)\n    vec3  viewNormal;\n    vec2  texCoord;\n    v_viewPos       = calcFatLinesViewPos(vertexID, modelViewMatrix, viewNormal, texCoord, pos);\n    v_drawItemID = float(getGeomItemId());\n    v_worldPos      = (modelMatrix * vec4(pos, 1.0)).xyz;\n  #endif\n\n  gl_Position     = projectionMatrix * vec4(v_viewPos, 1.0);\n\n  if (isOrthographic > 0){\n    gl_Position.z -= mix(gl_Position.z, -1.0, Overlay);\n  } else {\n    gl_Position.z = mix(gl_Position.z, -gl_Position.z, Overlay);\n  }\n\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nuniform color BaseColor;\nuniform mat4 cameraMatrix;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\n/* VS Outputs */\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\nvarying vec2 v_texCoord;\nvarying float v_geomItemId;\nvarying vec4 v_geomItemData;\nvarying float v_drawItemID;\nvarying vec3 v_worldPos;\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\nimport 'cutaways.glsl'\nimport 'GLSLBits.glsl'\n\nuniform int floatGeomBuffer;\nuniform int passId;\n\n#if defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n  float treeItemOpacity = v_geomItemData.y;\n\n#if defined(DRAW_COLOR)\n  int debugLevel = 0;\n  if (debugLevel == 0) {\n\n    vec3 viewVector = mat3(cameraMatrix) * normalize(-v_viewPos);\n    vec3 normal = mat3(cameraMatrix) * v_viewNormal;\n    float NdotV = dot(normalize(normal), normalize(viewVector));\n\n    // Modulate the lighting using the texture coord so the line looks round.\n    NdotV *= cos((v_texCoord.x - 0.5) * 2.0);\n\n    vec4 color = BaseColor * NdotV;\n    fragColor = vec4(color.rgb, BaseColor.a * treeItemOpacity);\n  }\n  else {\n    fragColor = vec4(v_texCoord.x, 0.0, 0.0, 1.0);\n  }\n#elif defined(DRAW_GEOMDATA)\n  int geomItemId = int(v_geomItemId + 0.5);\n  int flags = int(v_geomItemData.x + 0.5);\n\n // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {\n    vec4 cutAwayData  = getCutaway(geomItemId);\n    vec3 planeNormal = cutAwayData.xyz;\n    float planeDist = cutAwayData.w;\n    if (cutaway(v_worldPos, planeNormal, planeDist)) {\n      discard;\n      return;\n    }\n  }\n  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n    discard;\n    return;\n  }\n\n  float dist = length(v_viewPos);\n\n  if (floatGeomBuffer != 0) {\n    fragColor.r = float(passId); \n    fragColor.g = float(v_drawItemID);\n    fragColor.b = 0.0;// TODO: store poly-id or something.\n    fragColor.a = dist;\n  }\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = setFragColor_highlight(v_geomItemId);\n#endif\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}bind(A,g){return!!super.bind(A,g)&&(A.supportsInstancing=!1,!0)}static supportsInstancing(){return!1}static getMaterialTemplate(){return ye}}const ye=new HI("FatLinesShader_template");e.register("FatLinesShader",Ze);class ue extends DC{constructor(A){super(A,"FlatSurfaceShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nattribute vec3 positions;\n#ifdef ENABLE_TEXTURES\nattribute vec2 texCoords;\n#endif\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform int isOrthographic;\n\nimport 'GLSLUtils.glsl'\n\nimport 'geomItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n#ifdef ENABLE_MULTI_DRAW\nimport 'materialparams.glsl'\n#else\nuniform float Overlay;\n#endif\n\n/* VS Outputs */\nvarying vec4 v_drawItemIds;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n\nvoid main(void) {\n  v_drawItemIds = getDrawItemIds();\n  int geomItemId = int(v_drawItemIds.x + 0.5);\n  v_geomItemData  = getInstanceData(geomItemId);\n\n  mat4 modelMatrix = getModelMatrix(geomItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n\n  vec4 pos = vec4(positions, 1.);\n  vec4 viewPos = (modelViewMatrix * pos);\n  gl_Position = projectionMatrix * viewPos;\n\n  v_viewPos = viewPos.xyz;\n#ifdef ENABLE_TEXTURES\n  v_textureCoord = texCoords;\n  v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y\n#endif\n\n  //////////////////////////////////////////////\n  // Overlay\n\n#ifdef ENABLE_MULTI_DRAW\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 materialValue1 = getMaterialValue(materialCoords, 1);\n  float overlay = materialValue1.x;\n#else\n  float overlay = Overlay;\n#endif\n\n  if (isOrthographic > 0){\n    gl_Position.z -= overlay;\n  } else {\n    gl_Position.z = mix(gl_Position.z, -gl_Position.z, overlay);\n  }\n\n  //////////////////////////////////////////////\n  \n  v_worldPos      = (modelMatrix * pos).xyz;\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\nimport 'cutaways.glsl'\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\n\n#ifdef DEBUG_GEOM_ID\nimport 'debugColors.glsl'\n#endif\n\n#ifndef ENABLE_MULTI_DRAW\n\nuniform color BaseColor;\n\n#ifdef ENABLE_TEXTURES\nuniform sampler2D BaseColorTex;\nuniform int BaseColorTexType;\n#endif\n\n#endif // ENABLE_MULTI_DRAW\n\n/* VS Outputs */\nvarying vec4 v_drawItemIds;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\n#if defined(DRAW_GEOMDATA)\n  uniform int isOrthographic;\n  import 'surfaceGeomData.glsl'\n#elif defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  int geomItemId = int(v_drawItemIds.x + 0.5);\n  int flags = int(v_geomItemData.x + 0.5);\n  float treeItemOpacity = v_geomItemData.y;\n\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) \n  {\n    vec4 cutAwayData   = getCutaway(geomItemId);\n    vec3 planeNormal = cutAwayData.xyz;\n    float planeDist = cutAwayData.w;\n    if (cutaway(v_worldPos, planeNormal, planeDist)) {\n      discard;\n      return;\n    }\n  }\n\n  //////////////////////////////////////////////\n  // Material\n#ifdef ENABLE_MULTI_DRAW\n\n  vec2 materialCoords = v_geomItemData.zw;\n  if (v_drawItemIds.z > 0.5) {\n    materialCoords.x = v_drawItemIds.z;\n  }\n  vec4 baseColor = getMaterialValue(materialCoords, 0);\n\n#else // ENABLE_MULTI_DRAW\n\n#ifndef ENABLE_TEXTURES\n  vec4 baseColor = BaseColor;\n#else\n  vec4 baseColor = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);\n#endif // ENABLE_TEXTURES\n\n#endif // ENABLE_MULTI_DRAW\n\n  baseColor.a *= treeItemOpacity;\n  if (baseColor.a < 0.001) discard;\n\n#if defined(DRAW_COLOR)\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {\n    if (!gl_FrontFacing) {\n#ifdef ENABLE_ES3\n      fragColor = cutColor;\n#else\n      gl_FragColor = cutColor;\n#endif\n      return;\n    }\n  }\n\n  //////////////////////////////////////////////\n  fragColor = baseColor;\n\n#ifdef DEBUG_GEOM_ID\n  // ///////////////////////\n  // Debug Draw ID (this correlates to GeomID within a GLGeomSet)\n  float geomId = v_geomItemData.w;\n  fragColor.rgb = getDebugColor(geomId);\n  // ///////////////////////\n#endif\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb);\n#endif\n\n#elif defined(DRAW_GEOMDATA)\n\n  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n    discard;\n    return;\n  }\n  if (occlusionCulling != 0) {\n    // Transparent geoms do not render to the occlusion buffer\n    if (testFlag(flags, GEOMITEM_TRANSPARENT)) {\n      discard;\n      return;\n    }\n  }\n  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_drawItemIds.x, v_drawItemIds.y, isOrthographic);\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = setFragColor_highlight(v_drawItemIds.x);\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}bind(A,g){super.bind(A,g),A.pushGLStack();const I=this.__gl;return A.glDisable(I.CULL_FACE),!0}unbind(A){return super.unbind(A),this.__gl,A.popGLStack(),!0}static getPackedMaterialData(A){const g=new Float32Array(8),I=A.getParameter("BaseColor");let C;C=I instanceof Qg&&I.colorSpace==pA.Gamma?I.value.toLinear():I.value,g[0]=C.r,g[1]=C.g,g[2]=C.b,g[3]=C.a;const i=A.getParameter("Overlay");return i&&(g[4]=i.getValue()),g}static getMaterialTemplate(){return Re}}const Re=new YI("FlatSurfaceShader_template");e.register("FlatSurfaceShader",ue);class Ve extends DC{constructor(A){super(A,"LinesShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nattribute vec3 positions;\nattribute vec3 positionsNext;\n\nimport 'GLSLUtils.glsl'\nimport 'geomItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform int isOrthographic;\n\n#ifdef ENABLE_MULTI_DRAW\nimport 'materialparams.glsl'\n#else\nuniform float Overlay;\n#endif\n\n/* VS Outputs */\nvarying float v_geomItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_worldPos;\nvarying vec3 v_nextVertexDist;\n\nvoid main(void) {\n  int geomItemId = getGeomItemId();\n  v_geomItemId = float(geomItemId);\n  v_geomItemData  = getInstanceData(geomItemId);\n\n  mat4 modelMatrix = getModelMatrix(geomItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n  vec4 viewPos = modelViewMatrix * vec4(positions, 1.0);\n  vec4 viewPosNext = modelViewMatrix * vec4(positionsNext, 1.0);\n\n#ifdef ENABLE_ES3\n  float nextVertexDist = length(viewPosNext.xyz - viewPos.xyz);\n  if (imod(gl_VertexID, 2) == 0) {\n    v_nextVertexDist.x = nextVertexDist;\n    v_nextVertexDist.y = 0.0;\n  } else {\n    v_nextVertexDist.x = 0.0;\n    v_nextVertexDist.y = nextVertexDist;\n  }\n  v_nextVertexDist.z = float(gl_VertexID);\n#endif\n\n  v_viewPos = viewPos.xyz;\n  gl_Position = projectionMatrix * viewPos;\n    \n\n  //////////////////////////////////////////////\n  // Overlay\n\n#ifdef ENABLE_MULTI_DRAW\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 materialValue1 = getMaterialValue(materialCoords, 1);\n  float overlay = materialValue1.y;\n#else\n  float overlay = Overlay;\n#endif\n\n   \n#if defined(DRAW_GEOMDATA)\n  float _overlay = mix(overlay, 1.0, 0.0001);\n#else\n  float _overlay = overlay;\n#endif\n\n  if (isOrthographic > 0){\n    gl_Position.z -= _overlay;\n  } else {\n    gl_Position.z = mix(gl_Position.z, -gl_Position.z, _overlay);\n  }\n\n  //////////////////////////////////////////////\n  \n  \n  vec4 pos = vec4(positions, 1.);\n  v_worldPos      = (modelMatrix * pos).xyz;\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\nimport 'cutaways.glsl'\nimport 'materialparams.glsl'\n\n#if defined(DRAW_COLOR)\n\nuniform int occluded;\nuniform vec4 hiddenLineColor;\n\n#ifndef ENABLE_MULTI_DRAW\n\nuniform color BaseColor;\nuniform float Opacity;\n\nuniform color OccludedColor;\n\n#endif // ENABLE_MULTI_DRAW\n\n#elif defined(DRAW_GEOMDATA)\n\nuniform int isOrthographic;\n\nimport 'surfaceGeomData.glsl'\n\n#elif defined(DRAW_HIGHLIGHT)\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getHighlightColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);\n}\n#else // ENABLE_FLOAT_TEXTURES\n\nuniform vec4 highlightColor;\n\nvec4 getHighlightColor() {\n  return highlightColor;\n}\n\n#endif // ENABLE_FLOAT_TEXTURES\n\n#endif // DRAW_HIGHLIGHT\n\n/* VS Outputs */\nvarying float v_geomItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_worldPos;\nvarying vec3 v_nextVertexDist;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  int geomItemId = int(v_geomItemId + 0.5);\n  int flags = int(v_geomItemData.x + 0.5);\n  float treeItemOpacity = v_geomItemData.y;\n\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) \n  {\n    vec4 cutAwayData   = getCutaway(geomItemId);\n    vec3 planeNormal = cutAwayData.xyz;\n    float planeDist = cutAwayData.w;\n    if (cutaway(v_worldPos, planeNormal, planeDist)) {\n      discard;\n      return;\n    }\n  }\n\n  //////////////////////////////////////////////\n  // Material\n\n#ifdef ENABLE_MULTI_DRAW\n\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 BaseColor = getMaterialValue(materialCoords, 0);\n  vec4 matValue1 = getMaterialValue(materialCoords, 1);\n  vec4 matValue2 = getMaterialValue(materialCoords, 2);\n  float Opacity  = matValue1.r;\n#endif // ENABLE_MULTI_DRAW\n\n  //////////////////////////////////////////////\n  // Color\n#if defined(DRAW_COLOR)\n\n  fragColor = BaseColor;\n  \n  if (occluded == 1) {\n    fragColor = hiddenLineColor;\n  }\n\n  fragColor.a *= Opacity * treeItemOpacity;\n\n  //////////////////////////////////////////////\n  // GeomData\n#elif defined(DRAW_GEOMDATA)\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n    discard;\n    return;\n  }\n  \n  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_geomItemId, 0.0, isOrthographic);\n  \n  //////////////////////////////////////////////\n  // Highlight\n#elif defined(DRAW_HIGHLIGHT)\n  \n  fragColor = getHighlightColor(geomItemId);\n\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}static getPackedMaterialData(A){const g=new Float32Array(8),I=A.getParameter("BaseColor");let C;return C=I instanceof Qg&&I.colorSpace==pA.Gamma?I.value.toLinear():I.value,g[0]=C.r,g[1]=C.g,g[2]=C.b,g[3]=C.a,g[4]=A.getParameter("Opacity").value,g[5]=A.getParameter("Overlay").value,g}static getMaterialTemplate(){return Fe}}const Fe=new KI("LinesShader_template");e.register("LinesShader",Ve);class Se extends DC{constructor(A){super(A,"PointsShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;\n\nimport 'GLSLUtils.glsl'\nimport 'geomItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform int isOrthographic;\n\n#ifdef ENABLE_MULTI_DRAW\nimport 'materialparams.glsl'\n#else\nuniform float PointSize;\nuniform float Overlay;\n#endif\n\n/* VS Outputs */\nvarying float v_geomItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\n\nvoid main(void) {\n  int geomItemId = getGeomItemId();\n  v_geomItemId = float(geomItemId);\n  v_geomItemData  = getInstanceData(geomItemId);\n\n  mat4 modelMatrix = getModelMatrix(geomItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n  \n  vec4 viewPos = modelViewMatrix * vec4(positions, 1.);\n  gl_Position = projectionMatrix * viewPos;\n  \n\n  //////////////////////////////////////////////\n  // Material\n#ifdef ENABLE_MULTI_DRAW\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 materialValue1 = getMaterialValue(materialCoords, 1);\n  int maintainScreenSize = int(materialValue1.x + 0.5);\n  float pointSize = materialValue1.x;\n  float overlay = materialValue1.y;\n#else\n  float pointSize = PointSize;\n  float overlay = Overlay;\n#endif\n  //////////////////////////////////////////////\n\n  // Note: as of 22/01/2021 gl_PointSize has stopped working again...\n  gl_PointSize = pointSize;\n\n#if defined(DRAW_GEOMDATA)\n  // Make the geom data point size at least 8 pixels across, else its impossible to hit.\n  gl_PointSize = max(8.0, pointSize);\n#endif\n\n  if (isOrthographic > 0){\n    gl_Position.z -= overlay;\n  } else {\n    gl_Position.z = mix(gl_Position.z, -gl_Position.z, overlay);\n  }\n  \n  v_viewPos = -viewPos.xyz;\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\n#ifndef ENABLE_MULTI_DRAW\n\nuniform color BaseColor;\n\n#endif\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\nimport 'cutaways.glsl'\nimport 'materialparams.glsl'\n\n#if defined(DRAW_GEOMDATA)\n\nuniform int floatGeomBuffer;\nuniform int passId;\n\nimport 'GLSLBits.glsl'\n\n#elif defined(DRAW_HIGHLIGHT)\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getHighlightColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);\n}\n#else // ENABLE_FLOAT_TEXTURES\n\nuniform vec4 highlightColor;\n\nvec4 getHighlightColor() {\n  return highlightColor;\n}\n\n#endif // ENABLE_FLOAT_TEXTURES\n\n#endif // DRAW_HIGHLIGHT\n\n/* VS Outputs */\nvarying float v_geomItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\n/* VS Outputs */\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\nvoid main(void) {\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  //////////////////////////////////////////////\n  // Color\n#if defined(DRAW_COLOR)\n\n#ifdef ENABLE_MULTI_DRAW\n\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 baseColor = getMaterialValue(materialCoords, 0);\n  vec4 matValue1 = getMaterialValue(materialCoords, 1);\n  float pointSize       = baseColor.a * matValue1.r;\n  float overlay      = matValue1.g;\n\n#else // ENABLE_MULTI_DRAW\n\n  vec4 baseColor = BaseColor;\n\n#endif // ENABLE_MULTI_DRAW\n\n  fragColor = baseColor;\n\n  //////////////////////////////////////////////\n  // GeomData\n#elif defined(DRAW_GEOMDATA)\n\n  float viewDist = length(v_viewPos);\n\n  if (floatGeomBuffer != 0) {\n    fragColor.r = float(passId); \n    fragColor.g = float(v_geomItemId);\n    fragColor.b = 0.0;// TODO: store poly-id or something.\n    fragColor.a = viewDist;\n  }\n  else {\n    ///////////////////////////////////\n    // UInt8 buffer\n    fragColor.r = mod(v_geomItemId, 256.) / 256.;\n    fragColor.g = (floor(v_geomItemId / 256.) + (float(passId) * 64.)) / 256.;\n\n    // encode the dist as a 16 bit float\n    vec2 float16bits = encode16BitFloatInto2xUInt8(viewDist);\n    fragColor.b = float16bits.x;\n    fragColor.a = float16bits.y;\n  }\n\n  //////////////////////////////////////////////\n  // Highlight\n#elif defined(DRAW_HIGHLIGHT)\n  \n  int geomItemId = int(v_geomItemId + 0.5);\n  fragColor = getHighlightColor(geomItemId);\n\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}static getPackedMaterialData(A){const g=new Float32Array(12),I=A.getParameter("BaseColor");let C;return C=I instanceof Qg&&I.colorSpace==pA.Gamma?I.value.toLinear():I.value,g[0]=C.r,g[1]=C.g,g[2]=C.b,g[3]=C.a,g[4]=A.getParameter("PointSize").value,g[5]=A.getParameter("Overlay").value,g}static getMaterialTemplate(){return we}}const we=new pI("PointsShader_template");e.register("PointsShader",Se);class Xe extends DC{constructor(A){super(A,"FatPointsShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\ninstancedattribute vec3 positions;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform int isOrthographic;\n\nimport 'GLSLUtils.glsl' \nimport 'inverse.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\nimport 'quadVertexFromID.glsl'\n\nuniform int geomItemId;\nint getGeomItemId() {\n  return geomItemId;\n}\n\nuniform float PointSize;\nuniform float Overlay;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\nvarying vec3 v_viewPos;\nvarying float v_geomItemId;\n\nvoid main(void) {\n  int geomItemId = getGeomItemId();\n  vec2 quadPointPos = getQuadVertexPositionFromID();\n  v_texCoord = quadPointPos + 0.5;\n\n  mat4 modelMatrix = getModelMatrix(geomItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n  \n  vec4 viewPos = modelViewMatrix * vec4(positions, 1.);\n\n  // During XR sessions, there is a scaling applied to the view matrix\n  // which causes a distortion to the line width. We extract that scale here\n  // and use to correct the distortion.\n  // See also: FatLinesShader\n  vec3 viewZ = modelViewMatrix[2].xyz;\n  float viewScale = length(viewZ);\n  viewPos += vec4(vec3(quadPointPos, 0.0) * PointSize * viewScale, 0.);\n\n  // Generate a quad which is 0.5 * PointSize closer towards\n  // us. This allows points to be visualized even if snug on \n  // a surface. (else they get fully clipped)\n  viewPos.z += 0.5 * PointSize;\n\n  v_geomItemId = float(getGeomItemId());\n  v_viewPos = -viewPos.xyz;\n  \n  gl_Position = projectionMatrix * viewPos;\n\n  if (isOrthographic > 0){\n    gl_Position.z -= Overlay;\n  } else {\n    gl_Position.z = mix(gl_Position.z, -gl_Position.z, Overlay);\n  }\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nimport 'constants.glsl'\n\nuniform color BaseColor;\nuniform float Rounded;\nuniform float BorderWidth;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\nvarying vec3 v_viewPos;\nvarying float v_geomItemId;\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\n#if defined(DRAW_GEOMDATA)\n  uniform int isOrthographic;\n  import 'surfaceGeomData.glsl'\n#elif defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\nfloat dist = length(v_texCoord - 0.5);\nif (dist > 0.5)\n  discard;\n\n#if defined(DRAW_COLOR)\n\n  if (dist > 0.5 - (BorderWidth * 0.5))\n    fragColor = vec4(0.,0.,0.,1.);\n  else {\n    // Modulate the lighting using the texture coord so the point looks round.\n    float NdotV = cos(dist * PI);\n\n    fragColor = BaseColor * mix(1.0, NdotV, Rounded);\n  }\n\n#elif defined(DRAW_GEOMDATA)\n  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_geomItemId, 0.0, isOrthographic);\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = setFragColor_highlight(v_geomItemId);\n#endif // DRAW_HIGHLIGHT\n\n  \n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}bind(A,g){return!!super.bind(A,g)&&(A.supportsInstancing=!1,!0)}static supportsInstancing(){return!1}static getMaterialTemplate(){return He}}const He=new WI("FatPointsShader_template");e.register("FatPointsShader",Xe);class We extends DC{constructor(A){super(A,"SimpleSurfaceShader"),this.setShaderStage("VERTEX_SHADER","precision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;\nattribute vec3 normals;\n#ifdef ENABLE_TEXTURES\nattribute vec2 texCoords;\n#endif\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\nimport 'GLSLUtils.glsl'\nimport 'transpose.glsl'\nimport 'inverse.glsl'\nimport 'geomItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying vec4 v_drawItemIds;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n\nvoid main(void) {\n  v_drawItemIds = getDrawItemIds();\n  int geomItemId = int(v_drawItemIds.x + 0.5);\n  v_geomItemData  = getInstanceData(geomItemId);\n\n  mat4 modelMatrix = getModelMatrix(geomItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n\n  vec4 pos = vec4(positions, 1.);\n  vec4 viewPos    = modelViewMatrix * pos;\n  gl_Position     = projectionMatrix * viewPos;\n\n  mat3 normalMatrix = mat3(transpose(inverse(modelViewMatrix)));\n  v_viewPos       = -viewPos.xyz;\n  v_viewNormal    = normalMatrix * normals;\n\n#ifdef ENABLE_TEXTURES\n  v_textureCoord  = texCoords;\n  // v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y\n#endif\n\n  v_worldPos      = (modelMatrix * pos).xyz;\n}\n"),this.setShaderStage("FRAGMENT_SHADER","precision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\nimport 'cutaways.glsl'\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\n\n#ifdef DEBUG_GEOM_ID\nimport 'debugColors.glsl'\n#endif\n\n/* VS Outputs */\nvarying vec4 v_drawItemIds;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n/* VS Outputs */\n\nuniform mat4 cameraMatrix;\nuniform int isOrthographic;\n\n#ifdef ENABLE_ES3\n    out vec4 fragColor;\n#endif\n\n#if defined(DRAW_COLOR)\n\n#ifndef ENABLE_MULTI_DRAW\n\nuniform color BaseColor;\nuniform float Opacity;\nuniform float EmissiveStrength;\n\n#ifdef ENABLE_TEXTURES\nuniform sampler2D BaseColorTex;\nuniform int BaseColorTexType;\nuniform sampler2D OpacityTex;\nuniform int OpacityTexType;\nuniform sampler2D EmissiveStrengthTex;\nuniform int EmissiveStrengthTexType;\n#endif // ENABLE_TEXTURES\n\n#endif // ENABLE_MULTI_DRAW\n\nimport 'computeViewNormal.glsl'\n  \n// end DRAW_COLOR\n#elif defined(DRAW_GEOMDATA)\n  import 'surfaceGeomData.glsl'\n#elif defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n  int geomItemId = int(v_drawItemIds.x + 0.5);\n  int elemId = int(v_drawItemIds.y + 0.5);\n  int perFaceMaterialId = int(v_drawItemIds.z);\n  int flags = int(v_geomItemData.x + 0.5);\n  float treeItemOpacity = v_geomItemData.y;\n\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) \n  {\n    vec4 cutAwayData   = getCutaway(geomItemId);\n    vec3 planeNormal = cutAwayData.xyz;\n    float planeDist = cutAwayData.w;\n    if (cutaway(v_worldPos, planeNormal, planeDist)) {\n      discard;\n      return;\n    }\n  }\n\n#if defined(DRAW_COLOR)\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) \n  {\n    if (!gl_FrontFacing) {\n#ifdef ENABLE_ES3\n      fragColor = cutColor;\n#else\n      gl_FragColor = cutColor;\n#endif\n      return;\n    }\n  }\n\n  //////////////////////////////////////////////\n  // Normals\n  \n  vec3 viewNormal;\n  if (length(v_viewNormal) < 0.1) {\n    viewNormal = computeViewNormal(v_viewPos);\n  } else {\n    viewNormal = normalize(v_viewNormal);\n  }\n  vec3 normal = normalize(mat3(cameraMatrix) * viewNormal);\n  \n  vec3 viewVector;\n  if (isOrthographic == 0)\n    viewVector = normalize(mat3(cameraMatrix) * normalize(v_viewPos));\n  else \n    viewVector = vec3(-cameraMatrix[2][0], -cameraMatrix[2][1], -cameraMatrix[2][2]);\n  \n  //////////////////////////////////////////////\n  // Material\n\n#ifdef ENABLE_MULTI_DRAW\n\n  vec2 materialCoords = v_geomItemData.zw;\n  if (v_drawItemIds.z > 0.5) {\n    materialCoords.x = v_drawItemIds.z;\n  }\n  vec4 baseColor      = getMaterialValue(materialCoords, 0);\n  vec4 matValue1      = getMaterialValue(materialCoords, 1);\n  float opacity       = baseColor.a * matValue1.r;\n  float emission      = matValue1.g;\n\n#else // ENABLE_MULTI_DRAW\n\n#ifndef ENABLE_TEXTURES\n  vec4 baseColor      = BaseColor;\n  float emission      = EmissiveStrength;\n  float opacity       = baseColor.a * Opacity;\n#else\n  vec4 baseColor      = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);\n  float opacity       = baseColor.a * getLuminanceParamValue(Opacity, OpacityTex, OpacityTexType, v_textureCoord) * treeItemOpacity;\n  float emission      = getLuminanceParamValue(EmissiveStrength, EmissiveStrengthTex, EmissiveStrengthTexType, v_textureCoord);\n#endif\n\n#endif // ENABLE_MULTI_DRAW\n\n  // Hacky simple irradiance. \n  float ndotv = dot(normal, viewVector);\n  if (ndotv < 0.0) {\n    normal = -normal;\n    ndotv = dot(normal, viewVector);\n\n    // Note: these 2 lines can be used to debug inverted meshes.\n    //baseColor = vec4(1.0, 0.0, 0.0, 1.0);\n    //ndotv = 1.0;\n  }\n\n  fragColor = vec4((ndotv * baseColor.rgb) + (emission * baseColor.rgb), opacity);\n\n  // Note: the 'treeItemOpacity' is not an input to the lighting, \n  // as we want to also blend off the specular reflections to make an object\n  // fade away to nothing. (not become a transparent glass object).\n  fragColor.a *= treeItemOpacity;\n\n#ifdef DEBUG_GEOM_ID\n  // ///////////////////////\n  // Debug Draw ID (this correlates to GeomID within a GLGeomSet)\n  float geomId = v_geomItemData.w;\n  fragColor.rgb = getDebugColor(geomId);\n  // ///////////////////////\n#endif\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb);\n#endif\n\n#elif defined(DRAW_GEOMDATA)\n\n  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n    discard;\n    return;\n  }\n  if (occlusionCulling != 0) {\n    // Transparent geoms do not render to the occlusion buffer\n    if (testFlag(flags, GEOMITEM_TRANSPARENT)) {\n      discard;\n      return;\n    }\n  }\n  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_drawItemIds.x, v_drawItemIds.y, isOrthographic);\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = setFragColor_highlight(v_drawItemIds.x);\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}")}static getPackedMaterialData(A){const g=new Float32Array(8),I=A.getParameter("BaseColor");let C;return C=I instanceof Qg&&I.colorSpace==pA.Gamma?I.value.toLinear():I.value,g[0]=C.r,g[1]=C.g,g[2]=C.b,g[3]=C.a,g[4]=A.getParameter("Opacity").value,g[5]=A.getParameter("EmissiveStrength").value,g}static getMaterialTemplate(){return Ye}}const Ye=new JI("SimpleSurfaceShader_template");e.register("SimpleSurfaceShader",We);class Ke extends DC{constructor(A){super(A,"StandardSuraceShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nattribute vec3 positions;\nattribute vec3 normals;\n#ifdef ENABLE_TEXTURES\nattribute vec2 texCoords;\n#endif\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform int isOrthographic;\n\n// Now that we render multiple types of geometry from a single shader\n// we need to know what kind of geometry it is...\nuniform int geomType;\n\nuniform float outlineThickness;\nuniform vec2 viewportSize;\n\n// should be imported by bottom 3\nimport 'GLSLUtils.glsl'\nimport 'transpose.glsl'\nimport 'inverse.glsl'\n\nimport 'geomItemId.glsl'\nimport 'geomType.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying vec4 v_drawItemIds;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n/* VS Outputs */\n\n#if defined(DRAW_COLOR)\n#elif defined(DRAW_GEOMDATA)\n#elif defined(DRAW_HIGHLIGHT)\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n\n  v_drawItemIds = getDrawItemIds();\n  int geomItemId = int(v_drawItemIds.x + 0.5);\n  v_geomItemData = getInstanceData(geomItemId);\n  mat4 modelMatrix = getModelMatrix(geomItemId);\n\n  vec4 pos = vec4(positions, 1.);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n  vec4 viewPos    = modelViewMatrix * pos;\n  gl_Position     = projectionMatrix * viewPos;\n  v_viewPos = -viewPos.xyz;\n  v_worldPos      = (modelMatrix * pos).xyz;\n\n  mat3 normalMatrix = mat3(transpose(inverse(modelViewMatrix)));\n  v_viewPos       = -viewPos.xyz;\n  v_viewNormal    = normalMatrix * normals;\n  \n  // offset slightly the lines and points to make them clearly defined.\n  // This ensures that lines drawn over surfaces are solid and not clipped\n  // at all by the surface.\n  if (geomType == TRIANGLES) {\n    if (outlineThickness > 0.00001) {\n      vec2 screenNormal = v_viewNormal.xy;\n      gl_Position.xy += normalize(screenNormal) * ((2.0 / viewportSize) * outlineThickness) * gl_Position.w;\n    }\n  }\n  else if (geomType == LINES) { // start 'LINES'\n    float overlay = 0.00003;\n    if (isOrthographic > 0){\n      gl_Position.z -= overlay;\n    } else {\n      gl_Position.z = mix(gl_Position.z, -gl_Position.z, overlay);\n    }\n  } // end 'LINES'\n  else if (geomType == POINTS) { // start 'POINTS'\n    float overlay = 0.00005;\n    if (isOrthographic > 0){\n      gl_Position.z -= overlay;\n    } else {\n      gl_Position.z = mix(gl_Position.z, -gl_Position.z, overlay);\n    }\n  }  // end 'POINTS'\n\n#ifdef ENABLE_TEXTURES\n  v_textureCoord  = texCoords;\n#endif\n\n}\n"),this.setShaderStage("FRAGMENT_SHADER","precision highp float;\nprecision highp int;\n#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl' \nimport 'cutaways.glsl'\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\nimport 'GLSLBits.glsl'\n\n/* VS Outputs */\nvarying vec4 v_drawItemIds;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n/* VS Outputs */\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\n// Now that we render multiple types of geometry from a single shader\n// we need to know what kind of geometry it is...\nuniform int geomType;\nimport 'geomType.glsl'\n\nuniform int isOrthographic;\n\n#if defined(DRAW_COLOR)\n\nuniform int renderMode;\nuniform int occluded;\nuniform float outlineThickness;\nuniform vec4 hiddenLineColor;\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\nuniform float exposure;\n#endif\n\nuniform mat4 cameraMatrix;\n\n#ifndef ENABLE_MULTI_DRAW\n\nuniform color BaseColor;\nuniform float AmbientOcclusion;\nuniform float Roughness;\nuniform float Metallic;\nuniform float Reflectance;\nuniform float EmissiveStrength;\nuniform float Opacity;\n\nuniform color EdgeColor;\nuniform color PointColor;\n\n#ifdef ENABLE_TEXTURES\nuniform sampler2D BaseColorTex;\nuniform int BaseColorTexType;\n\nuniform sampler2D AmbientOcclusionTex;\nuniform int AmbientOcclusionTexType;\n\n#ifdef ENABLE_PBR\nuniform sampler2D RoughnessTex;\nuniform int RoughnessTexType;\n\nuniform sampler2D MetallicTex;\nuniform int MetallicTexType;\n\nuniform sampler2D ReflectanceTex;\nuniform int ReflectanceTexType;\n\nuniform sampler2D NormalTex;\nuniform int NormalTexType;\n#endif // ENABLE_PBR\n\nuniform sampler2D EmissiveStrengthTex;\nuniform int EmissiveStrengthTexType;\n\n#endif // ENABLE_TEXTURES\n#endif // ENABLE_MULTI_DRAW\n\nimport 'PBRSurfaceRadiance.glsl'\n\n#ifdef ENABLE_PBR\nmat3 cotangentFrame( in vec3 normal, in vec3 pos, in vec2 texCoord ) {\n  // https://stackoverflow.com/questions/5255806/how-to-calculate-tangent-and-binormal\n  vec3 n = normal;\n  // derivations of the fragment position\n  vec3 pos_dx = dFdx( pos );\n  vec3 pos_dy = dFdy( pos );\n  // derivations of the texture coordinate\n  vec2 texC_dx = dFdx( texCoord );\n  vec2 texC_dy = dFdy( texCoord );\n  // tangent vector and binormal vector\n  vec3 t = -(texC_dy.y * pos_dx - texC_dx.y * pos_dy);\n  vec3 b = -(texC_dx.x * pos_dy - texC_dy.x * pos_dx);\n\n  t = t - n * dot( t, n ); // orthonormalization ot the tangent vectors\n  b = b - n * dot( b, n ); // orthonormalization of the binormal vectors to the normal vector\n  b = b - t * dot( b, t ); // orthonormalization of the binormal vectors to the tangent vector\n  mat3 tbn = mat3( normalize(t), normalize(b), n );\n\n  return tbn;\n}\n#endif\n\nimport 'computeViewNormal.glsl'\n\n#ifdef DEBUG_GEOM_ID\nimport 'debugColors.glsl'\n#endif\n\n// end DRAW_COLOR\n#elif defined(DRAW_GEOMDATA)\n\nimport 'surfaceGeomData.glsl'\n\n#elif defined(DRAW_HIGHLIGHT)\nimport 'surfaceHighlight.glsl'\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n  #ifndef ENABLE_ES3\n    vec4 fragColor;\n  #endif\n  \n  int geomItemId = int(v_drawItemIds.x + 0.5);\n  int elemId = int(v_drawItemIds.y + 0.5);\n  int perFaceMaterialId = int(v_drawItemIds.z);\n  int flags = int(v_geomItemData.x + 0.5);\n  float treeItemOpacity = v_geomItemData.y;\n\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {\n    vec4 cutAwayData   = getCutaway(geomItemId);\n    vec3 planeNormal = cutAwayData.xyz;\n    float planeDist = cutAwayData.w;\n    if (cutaway(v_worldPos, planeNormal, planeDist)) {\n        discard;\n        return;\n    }\n  }\n  vec2 materialCoords = v_geomItemData.zw;\n  if (v_drawItemIds.z > 0.5) {\n    materialCoords.x = v_drawItemIds.z;\n  }\n  \n#if defined(DRAW_COLOR)\n\n  if (geomType == TRIANGLES) { // start 'TRIANGLES'\n\n  // Cutaways\n    if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {\n      if (!gl_FrontFacing) {\n#ifdef ENABLE_ES3\n        fragColor = cutColor;\n#else\n        gl_FragColor = cutColor;\n#endif\n        return;\n      }\n    }\n\n    //////////////////////////////////////////////\n    // Normals\n    vec3 viewNormal;\n    if (length(v_viewNormal) < 0.1) {\n      viewNormal = computeViewNormal(v_viewPos);\n    } else {\n      viewNormal = normalize(v_viewNormal);\n    }\n    vec3 normal = normalize(mat3(cameraMatrix) * viewNormal);\n    \n    vec3 viewVector;\n    if (isOrthographic == 0)\n      viewVector = normalize(mat3(cameraMatrix) * normalize(v_viewPos));\n    else \n      viewVector = vec3(cameraMatrix[2][0], cameraMatrix[2][1], cameraMatrix[2][2]);\n      \n    if (dot(normal, viewVector) < 0.0) {\n      normal = -normal;\n      // Note: this line can be used to debug inverted meshes.\n      //material.baseColor = vec3(1.0, 0.0, 0.0);\n    }\n\n    //////////////////////////////////////////////\n    // Material\n\n    MaterialParams material;\n\n#ifdef ENABLE_MULTI_DRAW\n    vec4 matValue0      = getMaterialValue(materialCoords, 0);\n    vec4 matValue1      = getMaterialValue(materialCoords, 1);\n    vec4 matValue2      = getMaterialValue(materialCoords, 2);\n\n    material.baseColor     = matValue0.rgb;\n    material.ambientOcclusion      = matValue1.r;\n    material.metallic      = matValue1.g;\n    material.roughness     = matValue1.b;\n    material.reflectance   = matValue1.a;\n\n    material.emission      = matValue2.r;\n    material.opacity       = matValue2.g * matValue0.a;\n    if (material.opacity < 0.001) discard;\n\n#else // ENABLE_MULTI_DRAW\n\n#ifndef ENABLE_TEXTURES\n    material.baseColor     = BaseColor.rgb;\n    material.emission      = EmissiveStrength;\n\n#ifdef ENABLE_PBR\n    material.roughness     = Roughness;\n    material.metallic      = Metallic;\n    material.reflectance   = Reflectance;\n#endif\n\n#else // ENABLE_TEXTURES\n    // Planar YZ projection for texturing, repeating every meter.\n    // vec2 texCoord       = v_worldPos.xz * 0.2;\n    vec2 texCoord          = v_textureCoord;\n\n    vec4 baseColor         = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, texCoord);\n\n    material.ambientOcclusion = getLuminanceParamValue(AmbientOcclusion, AmbientOcclusionTex, AmbientOcclusionTexType, texCoord);\n    material.baseColor     = baseColor.rgb;\n    \n    material.opacity       = Opacity * baseColor.a;\n    if (material.opacity < 0.001) discard;\n\n#ifdef ENABLE_PBR\n\n    material.metallic      = getLuminanceParamValue(Metallic, MetallicTex, MetallicTexType, texCoord);\n    material.roughness     = getLuminanceParamValue(Roughness, RoughnessTex, RoughnessTexType, texCoord);\n\n    // TODO: Communicate that this tex contains the roughness as well.\n    if (MetallicTexType != 0) {\n      vec4 metallicRoughness = vec4(Metallic, Roughness, 0.0, 1.0);\n      metallicRoughness     = texture2D(MetallicTex, texCoord);\n      material.roughness     = metallicRoughness.g;\n      material.metallic     = metallicRoughness.b;\n    }\n\n    material.reflectance   = getLuminanceParamValue(Reflectance, ReflectanceTex, ReflectanceTexType, texCoord);\n#endif // ENABLE_PBR\n    material.emission         = getLuminanceParamValue(EmissiveStrength, EmissiveStrengthTex, EmissiveStrengthTexType, texCoord);\n#endif // ENABLE_TEXTURES\n\n#ifdef ENABLE_TEXTURES\n#ifdef ENABLE_PBR\n    if (NormalTexType != 0) {\n      mat3 tbn = cotangentFrame(normal, viewVector, texCoord);\n      normal = normalize(tbn * (texture2D(NormalTex, texCoord).rgb * 2.0 - 1.0));\n    }\n#endif // ENABLE_PBR\n#endif // ENABLE_TEXTURES\n#endif // ENABLE_MULTI_DRAW\n\n    if (outlineThickness > 0.00001) {\n#ifdef ENABLE_MULTI_DRAW\n      vec4 edgeColor      = getMaterialValue(materialCoords, 3);\n      vec4 matValue2      = getMaterialValue(materialCoords, 2);\n      float opacity       = matValue2.g;\n#else \n      vec4 edgeColor      = EdgeColor;\n      float opacity        = Opacity;\n#endif // ENABLE_MULTI_DRAW\n      edgeColor.a = edgeColor.a * opacity * treeItemOpacity;\n      if (edgeColor.a < 0.001) discard;\n      fragColor = edgeColor;\n    } else {\n      if (renderMode == 1) { // Flat\n        fragColor = vec4(material.baseColor, material.opacity);\n      } else if (renderMode == 2) { // Shaded\n        // simple irradiance. \n        float ndotv = dot(normal, viewVector);\n        fragColor = vec4((ndotv * material.baseColor) + (material.emission * material.baseColor), material.opacity);\n      } else if (renderMode == 3) { // PBR\n        fragColor = pbrSurfaceRadiance(material, normal, viewVector);\n      }\n      \n      // Note: the 'treeItemOpacity' is not an input to the PBR lighting, \n      // as we want to also blend off the specular reflections to make an object\n      // fade away to nothing. (not become a transparent glass object).\n      fragColor.a *= treeItemOpacity;\n\n      // Debugging code to help understand what might be happening in the shader.\n      // fragColor = vec4(texture2D(NormalTex, texCoord).rgb, 1.0);\n      // fragColor = metallicRoughness;\n      // fragColor = vec4(material.baseColor, 1.0);;\n      // fragColor = vec4(vec3(material.metallic), 1.0);;\n      // fragColor = vec4(vec3(material.roughness), 1.0);;\n      // fragColor = vec4(vec3(material.ambientOcclusion), 1.0);\n    }\n\n  } // end 'TRIANGLES'\n  else if (geomType == LINES) { // start 'LINES'\n    if (occluded == 1) {\n#ifdef ENABLE_MULTI_DRAW\n      vec4 matValue2      = getMaterialValue(materialCoords, 2);\n      float opacity       = matValue2.g;\n#else \n      float opacity        = Opacity;\n#endif // ENABLE_MULTI_DRAW\n      fragColor = hiddenLineColor;\n      fragColor.a = hiddenLineColor.a * opacity * treeItemOpacity;\n      if (fragColor.a < 0.001) discard;\n    } else {\n#ifdef ENABLE_MULTI_DRAW\n      vec4 edgeColor      = getMaterialValue(materialCoords, 3);\n      vec4 matValue2      = getMaterialValue(materialCoords, 2);\n      float opacity       = matValue2.g;\n#else \n      vec4 edgeColor      = EdgeColor;\n      float opacity        = Opacity;\n#endif // ENABLE_MULTI_DRAW\n      edgeColor.a = edgeColor.a * opacity * treeItemOpacity;\n      if (edgeColor.a < 0.001) discard;\n      fragColor = edgeColor;\n    }\n  } // end 'LINES'\n  else if (geomType == POINTS) { // start 'POINTS'\n#ifdef ENABLE_MULTI_DRAW\n    vec4 pointColor     = getMaterialValue(materialCoords, 4);\n    vec4 matValue2      = getMaterialValue(materialCoords, 2);\n    float opacity       = matValue2.g;\n#else \n    vec4 pointColor      = PointColor;\n    float opacity        = Opacity;\n#endif // ENABLE_MULTI_DRAW\n    pointColor.a = pointColor.a * opacity * treeItemOpacity;\n    if (pointColor.a < 0.001) discard;\n    fragColor = pointColor;\n  }  // end 'POINTS'\n  \n#ifdef DEBUG_GEOM_ID\n  // ///////////////////////\n  // Debug Draw ID (this correlates to GeomID within a GLGeomSet)\n  float geomId = v_geomItemData.w;\n  fragColor.rgb = getDebugColor(geomId);\n  // ///////////////////////\n#endif\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb * exposure);\n#endif\n\n// end DRAW_COLOR\n#elif defined(DRAW_GEOMDATA)\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n    discard;\n    return;\n  }\n  if (occlusionCulling != 0) {\n    // Transparent geoms do not render to the occlusion buffer\n    if (testFlag(flags, GEOMITEM_TRANSPARENT)) {\n      discard;\n      return;\n    }\n  }\n\n  // We can make geoms invisible to hide them. \n  // Avoid drawing GeomData for geoms that are completely transparent.\n  if (geomType == TRIANGLES) { // start 'TRIANGLES'\n    vec4 matValue0      = getMaterialValue(materialCoords, 0);\n    vec4 matValue2      = getMaterialValue(materialCoords, 2);\n    float opacity          = matValue2.g * matValue0.a * treeItemOpacity;\n    if (opacity < 0.001) {\n      discard;\n      return;\n    }\n  } // end 'TRIANGLES'\n  else if (geomType == LINES) { // start 'LINES'\n#ifdef ENABLE_MULTI_DRAW\n    vec4 edgeColor      = getMaterialValue(materialCoords, 3);\n#else \n    vec4 edgeColor      = EdgeColor;\n#endif // ENABLE_MULTI_DRAW\n    float opacity          = edgeColor.a * treeItemOpacity;\n    if (opacity < 0.001) {\n      discard;\n      return;\n    }\n  } // end 'LINES'\n  else if (geomType == POINTS) { // start 'POINTS'\n#ifdef ENABLE_MULTI_DRAW\n    vec4 pointColor      = getMaterialValue(materialCoords, 4);\n#else \n    vec4 pointColor      = PointColor;\n#endif // ENABLE_MULTI_DRAW\n    float opacity          = pointColor.a * treeItemOpacity;\n    if (opacity < 0.001) {\n      discard;\n      return;\n    }\n  }  // end 'POINTS'\n\n  \n  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_drawItemIds.x, v_drawItemIds.y, isOrthographic);\n   \n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = getHighlightColor(geomItemId);\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n\n}")}bind(A,g){if(super.bind(A,g),A instanceof jC){const g=A,I=this.__gl;g.envMap&&g.envMap.bind(g);const{exposure:C,cutColor:i,renderMode:e}=g.unifs;C&&I.uniform1f(C.location,g.exposure),g.renderMode&&e&&("flat"==g.renderMode||"flat-noedges"==g.renderMode?I.uniform1i(e.location,1):"shaded"==g.renderMode||"shaded-noedges"==g.renderMode?I.uniform1i(e.location,2):"pbr"!=g.renderMode&&"pbr-noedges"!=g.renderMode||I.uniform1i(e.location,3)),i&&I.uniform4f(i.location,.3,0,0,1)}return!0}static getPackedMaterialData(A){const g=new Float32Array(20),I=A.getParameter("BaseColor");let C;C=I instanceof Qg&&I.colorSpace==pA.Gamma?I.value.toLinear():I.value,g[0]=C.r,g[1]=C.g,g[2]=C.b,g[3]=C.a,g[4]=A.getParameter("AmbientOcclusion").value,g[5]=A.getParameter("Metallic").value,g[6]=A.getParameter("Roughness").value,g[7]=A.getParameter("Reflectance").value,g[8]=A.getParameter("EmissiveStrength").value,g[9]=A.getParameter("Opacity").value;const i=A.getParameter("EdgeColor").value;g[12]=i.r,g[13]=i.g,g[14]=i.b,g[15]=i.a;const e=A.getParameter("PointColor").value;return g[16]=e.r,g[17]=e.g,g[18]=e.b,g[19]=e.a,g}static getMaterialTemplate(){return pe}}const pe=new DI("StandardSurfaceShader_template");e.register("StandardSurfaceShader",Ke),e.register("TransparentSurfaceShader",Ke);class Ne extends DC{constructor(A){super(A,"ScreenSpaceShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;\n#ifdef ENABLE_TEXTURES\nattribute vec2 texCoords;\n#endif\n\nimport 'GLSLUtils.glsl'\nimport 'geomItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying float v_geomItemId;\nvarying vec4 v_geomItemData;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\n\nvoid main(void) {\n  int geomItemId = getGeomItemId();\n  v_geomItemId = float(geomItemId);\n  v_geomItemData  = getInstanceData(geomItemId);\n\n  mat4 modelMatrix = getModelMatrix(geomItemId);\n\n  gl_Position = (modelMatrix * vec4(positions, 1.0));\n\n  v_textureCoord = texCoords;\n  v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\n#ifdef ENABLE_MULTI_DRAW\nimport 'drawItemTexture.glsl'\n#endif // ENABLE_MULTI_DRAW\n\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\n\n#if defined(DRAW_COLOR)\n\n  #ifndef ENABLE_MULTI_DRAW\n\n    uniform color BaseColor;\n\n    #ifdef ENABLE_TEXTURES\n      uniform sampler2D BaseColorTex;\n      uniform int BaseColorTexType;\n    #endif\n\n  #endif // ENABLE_MULTI_DRAW\n#endif // DRAW_COLOR\n\n/* VS Outputs */\nvarying float v_geomItemId;\nvarying vec4 v_geomItemData;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\n\n#if defined(DRAW_GEOMDATA)\n  uniform int isOrthographic;\n  import 'surfaceGeomData.glsl'\n#elif defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif // DRAW_HIGHLIGHT\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n  \n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  //////////////////////////////////////////////\n  // Color\n#if defined(DRAW_COLOR)\n\n  #ifdef ENABLE_MULTI_DRAW\n\n    vec2 materialCoords = v_geomItemData.zw;\n    vec4 baseColor = getMaterialValue(materialCoords, 0);\n\n  #else // ENABLE_MULTI_DRAW\n\n  #ifndef ENABLE_TEXTURES\n    vec4 baseColor = BaseColor;\n  #else\n    vec4 baseColor      = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);\n  #endif\n\n  #endif // ENABLE_MULTI_DRAW\n\n    fragColor = baseColor;\n\n  #ifdef ENABLE_INLINE_GAMMACORRECTION\n    fragColor.rgb = toGamma(fragColor.rgb);\n  #endif\n\n  //////////////////////////////////////////////\n  // GeomData\n#elif defined(DRAW_GEOMDATA)\n  fragColor = setFragColor_geomData(vec3(0,0,0), floatGeomBuffer, passId, v_geomItemId, 0.0, isOrthographic);\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = setFragColor_highlight(v_geomItemId);\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}static isOverlay(){return!0}static getPackedMaterialData(A){const g=new Float32Array(8),I=A.getParameter("BaseColor").value;return g[0]=I.r,g[1]=I.g,g[2]=I.b,g[3]=I.a,g}static getMaterialTemplate(){return Je}}const Je=new NI("ScreenSpaceShader_template");e.register("ScreenSpaceShader",Ne);class De extends bC{constructor(){super(),this.materials={},this.listenerIDs={}}init(A,g){super.init(A,g)}itemAddedToScene(A,g){if(A instanceof kI){const g=A;return!!this.filterGeomItem(g)&&(this.addGeomItem(g),!0)}return!1}itemRemovedFromScene(A,g){return A instanceof kI&&(this.removeGeomItem(A),!0)}filterGeomItem(A){return!0}addGeomItem(A){const g={};this.listenerIDs[A.getId()]=g;const I=()=>{this.removeGeomItem(A),this.renderer.assignTreeItemToGLPass(A)};g["materialParam.valueChanged"]=A.materialParam.on("valueChanged",I),g["geomParam.valueChanged"]=A.geomParam.on("valueChanged",I);const C=A=>{A.isOpaqueStateChanged&&I()},i=A.materialParam.value;this.materials[A.getId()]=i,g["geomItem.opacityChanged"]=A.on("opacityChanged",C),g["material.opacityChanged"]=i.on("opacityChanged",C)}removeGeomItem(A){const g=A.getId(),I=this.listenerIDs[g];delete this.listenerIDs[g],A.materialParam.removeListenerById("valueChanged",I["materialParam.valueChanged"]),A.geomParam.removeListenerById("valueChanged",I["geomParam.valueChanged"]);const C=this.materials[A.getId()];delete this.materials[g],A.removeListenerById("opacityChanged",I["geomItem.opacityChanged"]),C.removeListenerById("opacityChanged",I["material.opacityChanged"])}constructShaders(A){let g,I;const C=this.__renderer.getOrCreateShader(A);return g=C.getGeomDataShaderName()?this.__renderer.getOrCreateShader(C.getGeomDataShaderName()):C,I=C.getSelectedShaderName()?this.__renderer.getOrCreateShader(C.getSelectedShaderName()):C,{glShader:C,glgeomdatashader:g,glselectedshader:I}}getGeomItemAndDist(A){let g,I,C=-1;A instanceof Float32Array?(g=Math.round(A[1]),C=Math.round(A[2]),I=A[3]):(g=A[0]+((63&A[1])<<8),I=r.decode16BitFloatFrom2xUInt8(A.slice(2,3)));const i=this.renderer.glGeomItemLibrary.getGeomItem(g);if(i)return{geomItem:i,componentId:C,dist:I}}}class fe extends DC{constructor(A){super(A,"FattenLinesShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\nattribute vec3 positions;  //(location = 0)\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  v_texCoord = positions.xy+0.5;\n  gl_Position = vec4(positions.xy*2.0, -1.0, 1.0);\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D colorTexture;\nuniform sampler2D depthTexture;\nuniform vec2 screenSize;\n\nuniform float growth;\n\nvarying vec2 v_texCoord;\n\nbool sampleNeiPixel(vec2 fragCoord, inout vec4 res) {\n  res = texture2D(colorTexture, fragCoord/screenSize);\n  if (res.a > 0.0) {\n    return true;\n  }\n  return false;\n}\n\nvec4 samplePixels(vec2 fragCoord) {\n  vec4 res = vec4(0.0);\n  \n  if (sampleNeiPixel(fragCoord, res)) return res; // M\n  \n  // Search surrounding pixels for geoms\n  if (sampleNeiPixel(fragCoord+vec2( 1, 0), res)) return res; // E\n  if (sampleNeiPixel(fragCoord+vec2(-1, 0), res)) return res; // W\n  if (sampleNeiPixel(fragCoord+vec2( 0, 1), res)) return res; // N\n  if (sampleNeiPixel(fragCoord+vec2( 0,-1), res)) return res; // S\n  if (sampleNeiPixel(fragCoord+vec2( 1, 1), res)) return res; // NW\n  if (sampleNeiPixel(fragCoord+vec2(-1, 1), res)) return res; // NE\n  if (sampleNeiPixel(fragCoord+vec2( 1,-1), res)) return res; // SW\n  if (sampleNeiPixel(fragCoord+vec2(-1,-1), res)) return res; // SE\n  \n  return res;\n}\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  fragColor = samplePixels(gl_FragCoord.xy);\n  if (fragColor.a < 0.0001) {\n    discard; \n  }\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}var Me,Le;!function(A){A[A.TRIANGLES=0]="TRIANGLES",A[A.LINES=1]="LINES",A[A.POINTS=2]="POINTS"}(Me||(Me={}));class Ue extends V{constructor(A){super(),this.glGeomItems=[],this.glGeomIdsMapping={},this.glgeomItemEventHandlers=[],this.freeIndices=[],this.dirtyGeomItems=new Set,this.drawIdsBufferDirty=!0,this.drawIdsArraysAllocators={},this.drawIdsArrays={},this.drawIdsTextures={},this.drawElementCounts={},this.drawElementOffsets={},this.drawOrderToIndex=[],this.indexToDrawIndex=[],this.highlightedItems={},this.highlightedIdsArraysAllocators={},this.highlightElementCounts={},this.highlightElementOffsets={},this.highlightedIdsArray={},this.highlightedIdsTextures={},this.dirtyHighlightedGeomItems=new Set,this.highlightedIdsBufferDirty=!0,this.linesGeomDataBuffer=null,this.fattenLinesShader=null,this.quad=null,this.fbo=null,this.renderer=A,this.gl=A.gl,this.renderer.glGeomLibrary.on("geomDataChanged",(A=>{const g=this.glGeomIdsMapping[A.index];null!=g&&g.forEach((A=>{this.dirtyGeomItems.add(A),this.drawIdsBufferDirty||(this.drawIdsBufferDirty=!0,this.emit("updated"))}))}))}addGLGeomItem(A){const g=this.freeIndices.length>0?this.freeIndices.pop():this.glGeomItems.length;this.glGeomIdsMapping[A.geomId]?this.glGeomIdsMapping[A.geomId].push(g):this.glGeomIdsMapping[A.geomId]=[g];const I={};A.visible&&(this.indexToDrawIndex[g]=this.drawOrderToIndex.length,this.drawOrderToIndex.push(g),this.dirtyGeomItems.add(g)),I.visibilityChanged=I=>{if(I.visible){const I=this.renderer.glGeomLibrary.getGeomBuffers(A.geomId);for(let C in I.counts){if(0==I.counts[C])continue;const i=this.drawIdsArraysAllocators[C];if(i){const e=i.getAllocation(g);if(e){const g=e.start;if(A.shattered)for(let A=0;A<e.size;A++)this.drawElementCounts[C][g+A]=I.subGeomCounts[C][A];else{const A=I.materialSubGeoms[C];for(let I=0;I<e.size;I++){const i=A[I];this.drawElementCounts[C][g+I]=i.count}}}}}}else for(let A in this.drawIdsArraysAllocators){const I=this.drawIdsArraysAllocators[A];if(I){const C=I.getAllocation(g);if(C){const g=C.start;for(let I=0;I<C.size;I++)this.drawElementCounts[A][g+I]=0}}}this.emit("updated")},A.on("visibilityChanged",I.visibilityChanged);const C=A=>{const I=A.indexOf(":");let C=[];var i,e;(-1!=I&&(C=A.substring(I+1).split(",").map((A=>Number.parseInt(A)))),!this.highlightedItems[g]||(i=this.highlightedItems[g],e=C,i.length!=e.length||i.some(((A,g)=>A!=e[g]))))&&(this.highlightedItems[g]=C,this.highlightedIdsBufferDirty=!0,this.emit("updated"))};A.geomItem.isHighlighted()&&C(A.geomItem.getHighlightName()),I.highlightChanged=A=>{A&&A.name?C(A.name):(delete this.highlightedItems[g],this.highlightedIdsBufferDirty=!0,this.emit("updated"))},A.geomItem.on("highlightChanged",I.highlightChanged),I.shatterStateChanged=A=>{this.dirtyGeomItems.add(g),this.drawIdsBufferDirty=!0,this.renderer.renderGeomDataFbos()},A.on("shatterStateChanged",I.shatterStateChanged);A.geomItem.geomParam.value.materials.forEach((A=>{this.renderer.glMaterialLibrary.addMaterial(A)}));this.glGeomItems[g]=A,this.glgeomItemEventHandlers[g]=I,this.drawIdsBufferDirty=!0,this.emit("updated")}removeGLGeomItem(A){const g=this.glGeomItems.indexOf(A),I=this.glGeomIdsMapping[A.geomId];I.splice(I.indexOf(g),1),0==I.length&&delete this.glGeomIdsMapping[A.geomId];const C=this.glgeomItemEventHandlers[g];A.geomItem.off("highlightChanged",C.highlightChanged),A.off("visibilityChanged",C.visibilityChanged),this.glGeomItems[g]=null,this.glgeomItemEventHandlers[g]=null,this.freeIndices.push(g),this.dirtyGeomItems.has(g)&&this.dirtyGeomItems.delete(g);for(let A in this.drawIdsArraysAllocators){const I=this.drawIdsArraysAllocators[A].getAllocation(g);if(I){for(let g=0;g<I.size;g++)this.drawElementOffsets[A][I.start+g]=0,this.drawElementCounts[A][I.start+g]=0;this.drawIdsArraysAllocators[A].deallocate(g)}}if(A.isVisible()){const A=this.drawOrderToIndex.indexOf(g);this.drawOrderToIndex.splice(A,1),this.indexToDrawIndex[g]=-1,this.drawIdsBufferDirty=!0}A.geomItem.isHighlighted()&&(delete this.highlightedItems[g],this.highlightedIdsBufferDirty=!0),this.emit("updated")}updateDrawIDsBuffer(A){this.dirtyGeomItems.forEach((A=>{const g=this.glGeomItems[A];if(g){const I=this.renderer.glGeomLibrary.getGeomBuffers(g.geomId);let C={};if(g.shattered)for(let A in I.subGeomCounts)C[A]=I.subGeomCounts[A].length;else for(let A in I.materialSubGeoms)C[A]=I.materialSubGeoms[A].length;for(let g in C){const I=C[g];this.drawIdsArraysAllocators[g]||(this.drawIdsArraysAllocators[g]=new X);const i=this.drawIdsArraysAllocators[g].getAllocation(A);if(i)for(let A=0;A<i.size;A++)this.drawElementCounts[g][i.start+A]=0;this.drawIdsArraysAllocators[g].allocate(A,I)}}}));let g=!1;for(let A in this.drawIdsArraysAllocators){const I=this.drawIdsArraysAllocators[A];(!this.drawElementCounts[A]||I.reservedSpace>this.drawElementCounts[A].length-1)&&(this.drawElementCounts[A]&&I.reservedSpace>this.drawElementCounts[A].length-1&&(g=!0),this.drawIdsArrays[A]=new Float32Array(4*I.reservedSpace),this.drawElementOffsets[A]=new Int32Array(I.reservedSpace+1),this.drawElementCounts[A]=new Int32Array(I.reservedSpace+1))}if(g)for(let A=0;A<this.drawOrderToIndex.length;A++)this.dirtyGeomItems.add(A);this.dirtyGeomItems.forEach((A=>{const g=this.glGeomItems[A];if(!g)return;const I=this.renderer.glGeomLibrary.getGeomOffsetAndCount(g.geomId),C=this.renderer.glGeomLibrary.getGeomBuffers(g.geomId),i=g.isVisible();if(g.shattered){let e=0;const t=(t,B,o)=>{const s=this.drawIdsArraysAllocators[o],a=this.drawIdsArrays[o],l=this.drawElementOffsets[o],n=this.drawElementCounts[o],d=s.getAllocation(A);if(!d)return;const h=C.materials;for(let A=0;A<t.length;A++){const o=d.start+A;if(l[o]=I[0]+4*t[A],n[o]=i?B[A]:0,a[4*o+0]=g.geomItemId,a[4*o+1]=e+1,h.length>0&&C.subGeomMaterialIndices[A]>0){const g=C.subGeomMaterialIndices[A]-1,I=C.materials[g];this.renderer.glMaterialLibrary.addMaterial(I);const i=this.renderer.glMaterialLibrary.getMaterialAllocation(I);a[4*o+2]=i.start}else a[4*o+2]=0;a[4*o+3]=0,e++}};t(C.subGeomOffsets.TRIANGLES,C.subGeomCounts.TRIANGLES,"TRIANGLES"),t(C.subGeomOffsets.LINES,C.subGeomCounts.LINES,"LINES"),t(C.subGeomOffsets.POINTS,C.subGeomCounts.POINTS,"POINTS")}else{const e=(e,t)=>{const B=this.drawIdsArraysAllocators[t],o=this.drawIdsArrays[t],s=this.drawElementOffsets[t],a=this.drawElementCounts[t],l=B.getAllocation(A);if(!l)return;const n=C.materials;for(let A=0;A<e.length;A++){const t=e[A],B=l.start+A;if(s[B]=I[0]+4*t.offset,a[B]=i?t.count:0,o[4*B+0]=g.geomItemId,o[4*B+1]=0,n.length>0&&t.materialId>=0&&C.materials[t.materialId]){const A=C.materials[t.materialId];this.renderer.glMaterialLibrary.addMaterial(A);const g=this.renderer.glMaterialLibrary.getMaterialAllocation(A);o[4*B+2]=g.start}else o[4*B+2]=0;o[4*B+3]=0}};for(let g in C.materialSubGeoms){if(!this.drawIdsArraysAllocators[g].getAllocation(A))continue;e(C.materialSubGeoms[g],g)}}}));const I=this.renderer.gl;if(!I.multiDrawElements)return;const C=C=>{const i=this.drawIdsArrays[C];let e=this.drawIdsTextures[C];const t=this.drawIdsArraysAllocators[C].reservedSpace,B=A.boundTextures++;I.activeTexture(I.TEXTURE0+B);const o=r.nextPow2(Math.ceil(Math.sqrt(t)));if(e){if(e.width<o||e.height<o){e.resize(o,o);for(let A=0;A<this.drawOrderToIndex.length;A++)this.dirtyGeomItems.add(A);g=!0}}else e=new HC(this.gl,{format:"RGBA",type:"FLOAT",width:o,height:o,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.drawIdsTextures[C]=e,g=!0;{const A=e,t=e.width;I.bindTexture(I.TEXTURE_2D,A.glTex);const B=0,o=0,s=1,a=A.getFormat(),l=A.getType();if(g){const A=this.drawIdsArraysAllocators[C].allocatedSpace,g=Math.ceil((o+A)/t);let e=0,n=A,d=o;for(let A=0;A<g;A++){let A;d+n>t?(A=t-d,d=0):A=n;const g=e%t,C=Math.floor(e/t),o=i.subarray(4*e,4*(e+A));if(o.length!=4*A)throw new Error("Invalid drawIds subarray :"+o.length+" width:"+A);I.texSubImage2D(I.TEXTURE_2D,B,g,C,A,s,a,l,o),e+=A,n-=A}}else{const A=this.drawIdsArraysAllocators[C];this.dirtyGeomItems.forEach((g=>{const C=A.getAllocation(g);if(!C)return;const e=C.start,o=C.size,n=e%t,d=Math.ceil((n+o)/t);let h=0,c=o,r=n;for(let A=0;A<d;A++){let A;r+c>t?(A=t-r,r=0):A=c;const g=(e+h)%t,C=Math.floor((e+h)/t),o=i.subarray(4*(e+h),4*(e+h+A));if(o.length!=4*A)throw new Error("Invalid drawIds subarray :"+o.length+" width:"+A);I.texSubImage2D(I.TEXTURE_2D,B,g,C,A,s,a,l,o),h+=A,c-=A}}))}}I.bindTexture(I.TEXTURE_2D,null),A.boundTextures--};for(let A in this.drawIdsArrays)C(A);this.dirtyGeomItems=new Set,this.drawIdsBufferDirty=!1}updateHighlightedIDsBuffer(A){if(this.highlightedIdsBufferDirty){this.highlightedIdsArraysAllocators={},this.highlightedIdsArray={},this.highlightElementOffsets={},this.highlightElementCounts={};for(let A in this.highlightedItems){const g=Number.parseInt(A),I=this.highlightedItems[A],C=this.glGeomItems[g],i=this.renderer.glGeomLibrary.getGeomBuffers(C.geomId);let e={TRIANGLES:0,LINES:0,POINTS:0};if(I.length>0)I.forEach((A=>{if(A<i.subGeomCounts.TRIANGLES.length)e.TRIANGLES+=1;else{const g=A-i.subGeomCounts.TRIANGLES.length;if(g<i.subGeomCounts.LINES.length)e.LINES+=1;else{g-i.subGeomCounts.LINES.length<i.subGeomCounts.POINTS.length&&(e.POINTS+=1)}}}));else for(let A in i.counts)i.counts[A]>0&&(e[A]=1);for(let A in e){const I=e[A];0!=I&&(this.highlightedIdsArraysAllocators[A]||(this.highlightedIdsArraysAllocators[A]=new X),this.highlightedIdsArraysAllocators[A].allocate(g,I))}}for(let A in this.highlightedIdsArraysAllocators){const g=this.highlightedIdsArraysAllocators[A];(!this.highlightElementCounts[A]||g.reservedSpace>this.highlightElementCounts[A].length-1)&&(this.highlightedIdsArray[A]=new Float32Array(4*g.reservedSpace),this.highlightElementOffsets[A]=new Int32Array(g.reservedSpace+1),this.highlightElementCounts[A]=new Int32Array(g.reservedSpace+1))}const A=4;for(let g in this.highlightedItems){const I=Number.parseInt(g),C=this.highlightedItems[g],i=this.glGeomItems[I],e=this.renderer.glGeomLibrary.getGeomOffsetAndCount(i.geomId),t=this.renderer.glGeomLibrary.getGeomBuffers(i.geomId);if(0!=C.length)C.forEach(((g,C)=>{const B=(t,B,o,s)=>{const a=this.highlightedIdsArraysAllocators[o],l=this.highlightedIdsArray[o],n=this.highlightElementOffsets[o],d=this.highlightElementCounts[o],h=a.getAllocation(I).start+C;n[h]=e[0]+t[s]*A,d[h]=B[s],l[4*h+0]=i.geomItemId,l[4*h+1]=g+1,l[4*h+2]=0,l[4*h+3]=0};if(g<t.subGeomCounts.TRIANGLES.length)B(t.subGeomOffsets.TRIANGLES,t.subGeomCounts.TRIANGLES,"TRIANGLES",g);else{const A=g-t.subGeomCounts.TRIANGLES.length;if(A<t.subGeomCounts.LINES.length)B(t.subGeomOffsets.LINES,t.subGeomCounts.LINES,"LINES",A);else{t.subGeomCounts.LINES.length;t.subGeomCounts.POINTS.length}}}));else for(let g in t.offsets){const C=t.counts[g];if(0==C)continue;const B=t.offsets[g],o=this.highlightedIdsArraysAllocators[g].getAllocation(I).start;this.highlightElementOffsets[g][o]=e[0]+B*A,this.highlightElementCounts[g][o]=C,this.highlightedIdsArray[g][4*o+0]=i.geomItemId}}this.highlightedIdsBufferDirty=!1}const g=this.renderer.gl;if(!g.multiDrawElements)return;const I=I=>{const C=this.highlightedIdsArray[I];if(!C||0==C.length)return;let i=this.highlightedIdsTextures[I];const e=this.highlightedIdsArraysAllocators[I].reservedSpace,t=A.boundTextures++;g.activeTexture(g.TEXTURE0+t);const B=r.nextPow2(Math.ceil(Math.sqrt(e)));i?(i.width<B||i.height<B)&&i.resize(B,B):(i=new HC(this.gl,{format:"RGBA",type:"FLOAT",width:B,height:B,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.highlightedIdsTextures[I]=i);{const A=i,e=i.width;g.bindTexture(g.TEXTURE_2D,A.glTex);const t=0,B=0,o=1,s=A.getFormat(),a=A.getType(),l=this.highlightedIdsArraysAllocators[I].allocatedSpace,n=Math.ceil((B+l)/e);let d=0,h=l,c=B;for(let A=0;A<n;A++){let A;c+h>e?(A=e-c,c=0):A=h;const I=d%e,i=Math.floor(d/e),B=C.subarray(4*d,4*(d+A));if(B.length!=4*A)throw new Error("Invalid drawIds subarray :"+B.length+" width:"+A);g.texSubImage2D(g.TEXTURE_2D,t,I,i,A,o,s,a,B),d+=A,h-=A}}g.bindTexture(g.TEXTURE_2D,null),A.boundTextures--};for(let A in this.highlightedIdsArray)I(A)}draw(A){if(0==this.drawOrderToIndex.length)return;this.drawIdsBufferDirty&&this.updateDrawIDsBuffer(A),A.pushGLStack();const g=this.drawIdsArrays,I=this.drawElementCounts,C=this.drawElementOffsets,i=this.drawIdsTextures,e=this.drawIdsArraysAllocators,t=this.gl,B=A.unifs;t.depthFunc(t.LEQUAL);const{drawIdsTexture:o,geomType:s,outlineThickness:a,viewportSize:l,occluded:n,renderMode:d}=A.unifs,h=A instanceof jC&&d?A.renderMode:null,c="flat-noedges"!=h&&"shaded-noedges"!=h&&"pbr-noedges"!=h,r=A instanceof jC&&a&&l&&"geometry"==A.outlineMethod&&A.outlineThickness>0&&c,G=r&&"wireframe"==h,m=A.hiddenLineColor&&A.hiddenLineColor.a>0&&n;if(G?(t.enable(t.STENCIL_TEST),t.clearStencil(0),t.clear(t.STENCIL_BUFFER_BIT),t.stencilOpSeparate(t.FRONT,t.DECR_WRAP,t.DECR_WRAP,t.DECR_WRAP),t.stencilOpSeparate(t.BACK,t.INCR_WRAP,t.INCR_WRAP,t.INCR_WRAP),t.stencilFunc(t.ALWAYS,0,255),t.enable(t.CULL_FACE),t.cullFace(t.BACK),t.disable(t.DEPTH_TEST),t.depthMask(!1),t.colorMask(!1,!1,!1,!1)):"hiddenline"==h?t.colorMask(!1,!1,!1,!1):t.disable(t.CULL_FACE),g.TRIANGLES&&e.TRIANGLES.allocatedSpace>0)if(t.multiDrawElements&&i.TRIANGLES.bindToUniform(A,o),s&&t.uniform1i(s.location,Me.TRIANGLES),a&&t.uniform1f(a.location,0),A.bindViewports(B,(()=>{this.multiDrawMeshes(A,g.TRIANGLES,I.TRIANGLES,C.TRIANGLES,e.TRIANGLES.allocatedSpace)})),r){if(t.enable(t.CULL_FACE),t.cullFace(t.FRONT),t.uniform1f(a.location,this.renderer.outlineThickness*window.devicePixelRatio),t.uniform2f(l.location,A.region[2]-A.region[0],A.region[3]-A.region[1]),"hiddenline"==h&&t.colorMask(!0,!0,!0,!1),G||(A.glEnable(t.BLEND),t.blendEquation(t.FUNC_ADD),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA)),A.bindViewports(B,(()=>{this.multiDrawMeshes(A,g.TRIANGLES,I.TRIANGLES,C.TRIANGLES,e.TRIANGLES.allocatedSpace)})),t.disable(t.CULL_FACE),t.cullFace(t.BACK),G){t.enable(t.DEPTH_TEST),t.depthMask(!0),t.colorMask(!0,!0,!0,!0),t.stencilFunc(t.NOTEQUAL,0,255),t.stencilOp(t.KEEP,t.KEEP,t.KEEP),A.glEnable(t.BLEND),t.blendEquation(t.FUNC_ADD),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA);const g=A.glShader,I=A.shaderkey,C=this.renderer.screenQuad;C.bindShader(A),C.draw(A,this.renderer.outlineColor),g.bind(A,I),this.renderer.glGeomItemLibrary.bind(A),this.renderer.glGeomLibrary.bind(A),this.renderer.glMaterialLibrary.bind(A),t.disable(t.STENCIL_TEST)}}else A.glEnable(t.BLEND),t.blendEquation(t.FUNC_ADD),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA);if(c&&g.LINES&&e.LINES.allocatedSpace>0&&(t.multiDrawElements&&i.LINES.bindToUniform(A,o),s&&t.uniform1i(s.location,Me.LINES),A.bindViewports(B,(()=>{this.multiDrawLines(A,g.LINES,I.LINES,C.LINES,e.LINES.allocatedSpace)})),m)){const{hiddenLineColor:i}=A.unifs;t.uniform1i(n.location,1),t.uniform4fv(i.location,A.hiddenLineColor.asArray()),t.depthFunc(t.GREATER),t.depthMask(!1),A.bindViewports(B,(()=>{this.multiDrawLines(A,g.LINES,I.LINES,C.LINES,e.LINES.allocatedSpace)})),t.depthFunc(t.LEQUAL),t.depthMask(!0),t.uniform1i(n.location,0)}if(g.POINTS&&e.POINTS.allocatedSpace>0&&(t.multiDrawElements&&i.POINTS.bindToUniform(A,o),s&&t.uniform1i(s.location,Me.POINTS),A.bindViewports(B,(()=>{this.multiDrawPoints(A,g.POINTS,I.POINTS,C.POINTS,e.POINTS.allocatedSpace)})),m)){const{hiddenLineColor:i}=A.unifs;t.uniform1i(n.location,1),t.uniform4fv(i.location,A.hiddenLineColor.asArray()),t.depthFunc(t.GREATER),t.depthMask(!1),A.bindViewports(B,(()=>{this.multiDrawPoints(A,g.POINTS,I.POINTS,C.POINTS,e.POINTS.allocatedSpace)})),t.depthFunc(t.LEQUAL),t.depthMask(!0),t.uniform1i(n.location,0)}s&&t.uniform1i(s.location,0),A.popGLStack()}drawGeomData(A){this.drawIdsBufferDirty&&this.updateDrawIDsBuffer(A),A.pushGLStack();const g=this.renderer.gl,I=A.unifs,{drawIdsTexture:C,geomType:i}=I,e=this.drawElementCounts,t=this.drawElementOffsets,B=this.drawIdsTextures,o=this.drawIdsArraysAllocators,s=this.drawIdsArrays;"wireframe"!=this.renderer.renderMode&&A.bindViewports(I,(()=>{s.TRIANGLES&&o.TRIANGLES.allocatedSpace>0&&(g.multiDrawElements&&B.TRIANGLES.bindToUniform(A,C),i&&g.uniform1i(i.location,Me.TRIANGLES),this.multiDrawMeshes(A,s.TRIANGLES,e.TRIANGLES,t.TRIANGLES,o.TRIANGLES.allocatedSpace))}));if(A.geomDataFbo){this.linesGeomDataBuffer||(this.linesGeomDataBuffer=new HC(g,{type:this.renderer.floatGeomBuffer?"FLOAT":"UNSIGNED_BYTE",format:"RGBA",filter:"NEAREST",width:1,height:2}),this.fattenLinesShader=new fe(g),this.quad=new Yi(g,new AI(1,1)));const I=A.geomDataFbo,C=I.width,i=I.height;if(this.linesGeomDataBuffer.width!=C||this.linesGeomDataBuffer.height!=i){this.fbo&&(g.deleteFramebuffer(this.fbo),this.fbo=null),this.linesGeomDataBuffer.resize(C,i),this.fbo=g.createFramebuffer();const A=this.linesGeomDataBuffer.glTex,e=I.__depthTexture;"webgl2"==g.name?(g.bindFramebuffer(g.DRAW_FRAMEBUFFER,this.fbo),g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.COLOR_ATTACHMENT0,g.TEXTURE_2D,A,0),g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.DEPTH_ATTACHMENT,g.TEXTURE_2D,e,0)):(g.bindFramebuffer(g.FRAMEBUFFER,this.fbo),g.framebufferTexture2D(g.FRAMEBUFFER,g.COLOR_ATTACHMENT0,g.TEXTURE_2D,A,0),g.framebufferTexture2D(g.FRAMEBUFFER,g.DEPTH_ATTACHMENT,g.TEXTURE_2D,e,0)),MC(g,C,i)}else"webgl2"==g.name?g.bindFramebuffer(g.DRAW_FRAMEBUFFER,this.fbo):g.bindFramebuffer(g.FRAMEBUFFER,this.fbo);g.colorMask(!0,!0,!0,!0),g.clearColor(0,0,0,0),g.clear(g.COLOR_BUFFER_BIT)}if(A.bindViewports(I,(()=>{s.LINES&&o.LINES.allocatedSpace>0&&(g.multiDrawElements&&B.LINES.bindToUniform(A,C),i&&g.uniform1i(i.location,Me.LINES),this.multiDrawLines(A,s.LINES,e.LINES,t.LINES,o.LINES.allocatedSpace)),s.POINTS&&o.POINTS.allocatedSpace>0&&(g.multiDrawElements&&B.POINTS.bindToUniform(A,C),i&&g.uniform1i(i.location,Me.POINTS),this.multiDrawPoints(A,s.POINTS,e.POINTS,t.POINTS,o.POINTS.allocatedSpace))})),this.linesGeomDataBuffer&&A.geomDataFbo){A.boundRendertarget=null,A.geomDataFbo.bindForWriting(A);const I=A.glShader,C=A.shaderkey;this.fattenLinesShader.bind(A),g.disable(g.DEPTH_TEST);const{colorTexture:i,screenSize:e}=A.unifs;this.linesGeomDataBuffer.bindToUniform(A,i);const t=A.geomDataFbo;g.uniform2f(e.location,t.width,t.height),this.quad.bindAndDraw(A),g.enable(g.DEPTH_TEST),I.bind(A,C),this.renderer.glGeomLibrary.bind(A),this.renderer.glMaterialLibrary.bind(A)}A.popGLStack()}drawHighlighted(A){if(0==Object.keys(this.highlightedItems).length)return;this.highlightedIdsBufferDirty&&this.updateHighlightedIDsBuffer(A),A.pushGLStack();const g=this.highlightedIdsArray,I=this.highlightElementCounts,C=this.highlightElementOffsets,i=this.highlightedIdsTextures,e=this.highlightedIdsArraysAllocators,t=A.unifs,B=this.renderer.gl;B.depthFunc(B.LEQUAL),A.glDisable(B.CULL_FACE);const{drawIdsTexture:o,geomType:s}=A.unifs;A.bindViewports(t,(()=>{g.TRIANGLES&&e.TRIANGLES.allocatedSpace>0&&(B.multiDrawElements&&i.TRIANGLES.bindToUniform(A,o),s&&B.uniform1i(s.location,Me.TRIANGLES),this.multiDrawMeshes(A,g.TRIANGLES,I.TRIANGLES,C.TRIANGLES,e.TRIANGLES.allocatedSpace)),g.LINES&&e.LINES.allocatedSpace>0&&(B.multiDrawElements&&i.LINES.bindToUniform(A,o),s&&B.uniform1i(s.location,Me.LINES),this.multiDrawLines(A,g.LINES,I.LINES,C.LINES,e.LINES.allocatedSpace)),g.POINTS&&e.POINTS.allocatedSpace>0&&(B.multiDrawElements&&i.POINTS.bindToUniform(A,o),s&&B.uniform1i(s.location,Me.POINTS),this.multiDrawPoints(A,g.POINTS,I.POINTS,C.POINTS,e.POINTS.allocatedSpace))})),s&&B.uniform1i(s.location,0),A.popGLStack()}multiDrawMeshes(A,g,I,C,i){const e=this.gl;if(e.multiDrawElements)e.multiDrawElements(e.TRIANGLES,I,0,e.UNSIGNED_INT,C,0,i);else{const{geomItemId:t}=A.unifs;for(let A=0;A<i;A++)e.uniform1i(t.location,g[4*A]),e.drawElements(e.TRIANGLES,I[A],e.UNSIGNED_INT,C[A])}}multiDrawLines(A,g,I,C,i){const e=this.gl;if(e.multiDrawElements)e.multiDrawElements(e.LINES,I,0,e.UNSIGNED_INT,C,0,i);else{const{geomItemId:t}=A.unifs;for(let A=0;A<i;A++)e.uniform1i(t.location,g[4*A]),e.drawElements(e.LINES,I[A],e.UNSIGNED_INT,C[A])}}multiDrawPoints(A,g,I,C,i){const e=this.gl;if(e.multiDrawElements)e.multiDrawElements(e.POINTS,I,0,e.UNSIGNED_INT,C,0,i);else{const{geomItemId:t}=A.unifs;for(let A=0;A<i;A++)e.uniform1i(t.location,g[4*A]),e.drawElements(e.POINTS,I[A],e.UNSIGNED_INT,C[A])}}sortItems(A){this.drawIdsBufferDirty}destroy(){for(let A in this.drawIdsTextures)this.drawIdsTextures[A].destroy();for(let A in this.highlightedIdsTextures)this.highlightedIdsTextures[A].destroy();this.emit("destructing")}}class ve extends V{constructor(A){super(),this.glGeomItems=[],this.glGeomIdsMapping={},this.glgeomItemEventHandlers=[],this.freeIndices=[],this.viewPos=new o,this.drawElementCounts=new Int32Array(0),this.drawElementOffsets=new Int32Array(0),this.highlightElementCounts=new Int32Array(0),this.highlightElementOffsets=new Int32Array(0),this.drawOrderToIndex=[],this.indexToDrawIndex=[],this.drawIdsArray=new Float32Array(0),this.drawIdsBufferDirty=!0,this.drawIdsTexture=null,this.highlightedItems=[],this.highlightedIdsArray=null,this.highlightedIdsTexture=null,this.highlightedIdsBufferDirty=!1,this.dirtyGeomIndices=new Set,this.renderer=A,this.gl=A.gl,this.renderer.glGeomLibrary.on("geomDataChanged",(A=>{this.dirtyGeomIndices.add(A.index)}))}addGLGeomItem(A){const g=this.freeIndices.length>0?this.freeIndices.pop():this.glGeomItems.length;this.glGeomIdsMapping[A.geomId]?this.glGeomIdsMapping[A.geomId].push(g):this.glGeomIdsMapping[A.geomId]=[g],this.indexToDrawIndex[g]=this.drawOrderToIndex.length,this.drawOrderToIndex.push(g);const I={};I.visibilityChanged=I=>{const C=this.indexToDrawIndex[g];if(I.visible){const g=this.renderer.glGeomLibrary.getGeomOffsetAndCount(A.geomId);this.drawElementCounts[C]=g[1]}else this.drawElementCounts[C]=0;this.emit("updated")},A.on("visibilityChanged",I.visibilityChanged),A.geomItem.isHighlighted()&&(this.highlightedItems.push(A),this.highlightedIdsBufferDirty=!0),I.highlightChanged=g=>{if(g&&g.name){if(this.highlightedItems.includes(A))return;this.highlightedItems.push(A)}else this.highlightedItems.splice(this.highlightedItems.indexOf(A),1);this.highlightedIdsBufferDirty=!0,this.emit("updated")},A.geomItem.on("highlightChanged",I.highlightChanged),this.glGeomItems[g]=A,this.glgeomItemEventHandlers[g]=I,this.drawIdsBufferDirty=!0,this.emit("updated")}removeGLGeomItem(A){const g=this.glGeomItems.indexOf(A),I=this.glGeomIdsMapping[A.geomId];I.splice(I.indexOf(g),1),0==I.length&&(delete this.glGeomIdsMapping[A.geomId],this.dirtyGeomIndices.has(A.geomId)&&this.dirtyGeomIndices.delete(A.geomId));const C=this.glgeomItemEventHandlers[g];if(A.geomItem.off("highlightChanged",C.highlightChanged),A.off("visibilityChanged",C.visibilityChanged),this.glGeomItems[g]=null,this.glgeomItemEventHandlers[g]=null,this.drawIdsArray[g]=0,this.drawElementOffsets[g]=0,this.drawElementCounts[g]=0,this.freeIndices.push(g),A.isVisible()){const A=this.drawOrderToIndex.indexOf(g);this.drawOrderToIndex.splice(A,1),this.indexToDrawIndex[g]=-1,this.drawElementCounts[A]=0,this.drawIdsBufferDirty=!0}if(A.geomItem.isHighlighted()){const g=this.highlightedItems.indexOf(A);this.highlightedItems.splice(g,1),this.highlightedIdsBufferDirty=!0}this.emit("updated")}cleanGeomIds(){this.dirtyGeomIndices.forEach((A=>{const g=this.glGeomIdsMapping[A];if(null!=g){const I=this.renderer.glGeomLibrary.getGeomOffsetAndCount(A);g.forEach((A=>{const g=this.glGeomItems[A];if(g.isVisible()){const C=this.indexToDrawIndex[A];this.drawElementOffsets[C]=I[0],this.drawElementCounts[C]=I[1],this.drawIdsArray[C]=g.geomItemId;const i=this.highlightedItems.indexOf(g);-1!=i&&(this.highlightElementOffsets[i]=I[0],this.highlightElementCounts[i]=I[1])}}))}})),this.dirtyGeomIndices=new Set}updateDrawIDsBuffer(A){(!this.drawIdsArray||this.drawOrderToIndex.length>this.drawIdsArray.length)&&(this.drawIdsArray=new Float32Array(this.drawOrderToIndex.length),this.drawElementOffsets=new Int32Array(this.drawOrderToIndex.length+1),this.drawElementCounts=new Int32Array(this.drawOrderToIndex.length+1)),this.drawOrderToIndex.forEach(((A,g)=>{const I=this.glGeomItems[A];if(!I)return;const C=this.renderer.glGeomLibrary.getGeomOffsetAndCount(I.geomId);this.drawElementOffsets[g]=C[0],this.drawElementCounts[g]=I.isVisible()?C[1]:0,this.drawIdsArray[g]=I.geomItemId,this.indexToDrawIndex[A]=g})),this.dirtyGeomIndices=new Set;const g=this.renderer.gl;if(!g.multiDrawElements)return;const I=A.boundTextures++;g.activeTexture(g.TEXTURE0+I);const C=2*r.nextPow2(Math.ceil(Math.sqrt(this.drawOrderToIndex.length)));this.drawIdsTexture?(this.drawIdsTexture.width<C||this.drawIdsTexture.height<C)&&this.drawIdsTexture.resize(C,C):this.drawIdsTexture=new HC(this.gl,{format:"webgl2"==g.name?"RED":"ALPHA",type:"FLOAT",width:C,height:C,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1});{const A=this.drawIdsTexture,I=this.drawIdsTexture.width;g.bindTexture(g.TEXTURE_2D,A.glTex);const C=0,i=0,e=1,t=A.getFormat(),B=A.getType(),o=Math.ceil((i+this.drawOrderToIndex.length)/I);let s=0,a=this.drawOrderToIndex.length,l=i;for(let A=0;A<o;A++){let A;l+a>I?(A=I-l,l=0):A=a;const i=s%I,o=Math.floor(s/I),n=this.drawIdsArray.subarray(s,s+A);g.texSubImage2D(g.TEXTURE_2D,C,i,o,A,e,t,B,n),s+=A,a-=A}}g.bindTexture(g.TEXTURE_2D,null),A.boundTextures--,this.drawIdsBufferDirty=!1}updateHighlightedIDsBuffer(A){if(this.highlightedIdsBufferDirty){(!this.highlightedIdsArray||this.highlightedItems.length>this.highlightedIdsArray.length)&&(this.highlightedIdsArray=new Float32Array(this.highlightedItems.length),this.highlightElementOffsets=new Int32Array(this.highlightedItems.length+1),this.highlightElementCounts=new Int32Array(this.highlightedItems.length+1)),this.highlightedItems.forEach(((A,g)=>{this.highlightedIdsArray[g]=A.geomItemId;const I=this.renderer.glGeomLibrary.getGeomOffsetAndCount(A.geomId);this.highlightElementOffsets[g]=I[0],this.highlightElementCounts[g]=I[1]}));for(let A=this.highlightedItems.length;A<this.highlightElementCounts.length;A++)this.highlightElementOffsets[A]=0,this.highlightElementCounts[A]=0;this.highlightedIdsBufferDirty=!1}const g=this.renderer.gl;if(!g.multiDrawElements)return;const I=A.boundTextures++;g.activeTexture(g.TEXTURE0+I);const C=r.nextPow2(Math.ceil(Math.sqrt(this.highlightedItems.length)));this.highlightedIdsTexture?(this.highlightedIdsTexture.width<C||this.highlightedIdsTexture.height<C)&&this.highlightedIdsTexture.resize(C,C):this.highlightedIdsTexture=new HC(this.gl,{format:"webgl2"==g.name?"RED":"ALPHA",type:"FLOAT",width:C,height:C,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1});{const A=this.highlightedIdsTexture,I=this.highlightedIdsTexture.width;g.bindTexture(g.TEXTURE_2D,A.glTex);const C=0,i=0,e=1,t=A.getFormat(),B=A.getType(),o=Math.ceil((i+this.highlightedIdsArray.length)/I);let s=0,a=this.highlightedIdsArray.length,l=i;for(let A=0;A<o;A++){let A;l+a>I?(A=I-l,l=0):A=a;const i=s%I,o=Math.floor(s/I),n=this.highlightedIdsArray.subarray(s,s+A);g.texSubImage2D(g.TEXTURE_2D,C,i,o,A,e,t,B,n),s+=A,a-=A}}g.bindTexture(g.TEXTURE_2D,null),A.boundTextures--}draw(A){if(this.drawIdsBufferDirty?this.updateDrawIDsBuffer(A):this.dirtyGeomIndices.size>0&&this.cleanGeomIds(),0!=this.drawIdsArray.length){if(this.drawIdsTexture){const{drawIdsTexture:g}=A.unifs;this.drawIdsTexture.bindToUniform(A,g)}this.bindAndRender(A,this.drawIdsArray,this.drawElementCounts,this.drawElementOffsets,this.drawOrderToIndex.length)}}drawHighlighted(A){if(0!=this.highlightedItems.length){if(this.highlightedIdsBufferDirty&&this.updateHighlightedIDsBuffer(A),this.highlightedIdsTexture){const{drawIdsTexture:g}=A.unifs;this.highlightedIdsTexture.bindToUniform(A,g)}this.bindAndRender(A,this.highlightedIdsArray,this.highlightElementCounts,this.highlightElementOffsets,this.highlightedItems.length)}}drawGeomData(A){if(this.drawIdsBufferDirty&&this.updateDrawIDsBuffer(A),0!=this.drawOrderToIndex.length){if(this.drawIdsTexture){const{drawIdsTexture:g}=A.unifs;this.drawIdsTexture.bindToUniform(A,g)}this.bindAndRender(A,this.drawIdsArray,this.drawElementCounts,this.drawElementOffsets,this.drawOrderToIndex.length)}}bindAndRender(A,g,I,C,i){const e=this.gl,t=A.unifs;t.instancedDraw&&e.uniform1i(A.unifs.instancedDraw.location,1),A.bindViewports(t,(()=>{this.multiDraw(A,g,I,C,i)}))}sortItems(A){const g=new Float32Array(this.drawOrderToIndex.length);this.drawOrderToIndex.forEach((I=>{const C=this.glGeomItems[I];if(C){const i=C.geomItem.boundingBoxParam.value,e=i.center(),t=i.size(),B=e.distanceTo(A)-t;g[I]=B}})),this.drawOrderToIndex.sort(((A,I)=>g[I]-g[A])),this.drawOrderToIndex.forEach(((A,g)=>{const I=this.glGeomItems[A];I&&(this.drawIdsArray[g]=I.geomItemId,this.indexToDrawIndex[A]=g)})),this.drawIdsBufferDirty=!0,this.viewPos=A}destroy(){this.drawIdsTexture&&this.drawIdsTexture.destroy(),this.highlightedIdsTexture&&this.highlightedIdsTexture.destroy(),this.emit("destructing")}}class ke extends ve{multiDraw(A,g,I,C,i){const{occluded:e,hiddenLineColor:t}=A.unifs,B=A.hiddenLineColor&&A.hiddenLineColor.a>0&&e&&t,o=this.gl;if(o.multiDrawArrays)o.multiDrawElements(o.LINES,I,0,o.UNSIGNED_INT,C,0,i),B&&(o.uniform1i(e.location,1),o.uniform4fv(t.location,A.hiddenLineColor.asArray()),o.depthFunc(o.GREATER),o.depthMask(!1),o.multiDrawElements(o.LINES,I,0,o.UNSIGNED_INT,C,0,i),o.depthFunc(o.LEQUAL),o.depthMask(!0),o.uniform1i(e.location,0));else{const{geomItemId:s}=A.unifs;for(let A=0;A<i;A++)o.uniform1i(s.location,g[A]),o.drawElements(o.LINES,I[A],o.UNSIGNED_INT,C[A]);if(B){o.uniform1i(e.location,1),o.uniform4fv(t.location,A.hiddenLineColor.asArray()),o.depthFunc(o.GREATER),o.depthMask(!1);for(let A=0;A<i;A++)o.uniform1i(s.location,g[A]),o.drawElements(o.LINES,I[A],o.UNSIGNED_INT,C[A]);o.depthFunc(o.LEQUAL),o.depthMask(!0),o.uniform1i(e.location,0)}}}}class xe extends ve{multiDraw(A,g,I,C,i){const e=this.gl;if(e.multiDrawArrays)e.multiDrawArrays(e.POINTS,C,0,I,0,i);else{const{geomItemId:t}=A.unifs;for(let A=0;A<i;A++)e.uniform1i(t.location,g[A]),e.drawArrays(e.POINTS,C[A],I[A])}}}!function(A){A[A.TRIANGLES=0]="TRIANGLES",A[A.LINES=1]="LINES",A[A.POINTS=2]="POINTS"}(Le||(Le={}));class ze extends ve{multiDraw(A,g,I,C,i){const e=this.gl,t=()=>{if(e.multiDrawElements)e.multiDrawElements(e.TRIANGLES,I,0,e.UNSIGNED_INT,C,0,i);else{const{geomItemId:t}=A.unifs;for(let A=0;A<i;A++)e.uniform1i(t.location,g[A]),e.drawElements(e.TRIANGLES,I[A],e.UNSIGNED_INT,C[A])}};e.depthFunc(e.LEQUAL);const{geomType:B,outlineThickness:o,viewportSize:s,renderMode:a}=A.unifs,l=A instanceof jC&&a?A.renderMode:null,n=A instanceof jC&&o&&s&&"geometry"==A.outlineMethod&&A.outlineThickness>0&&"flat-noedges"!=l&&"pbr-noedges"!=l,d=n&&"wireframe"==l;if(d?(e.enable(e.STENCIL_TEST),e.clearStencil(0),e.clear(e.STENCIL_BUFFER_BIT),e.stencilOpSeparate(e.FRONT,e.DECR_WRAP,e.DECR_WRAP,e.DECR_WRAP),e.stencilOpSeparate(e.BACK,e.INCR_WRAP,e.INCR_WRAP,e.INCR_WRAP),e.stencilFunc(e.ALWAYS,0,255),e.enable(e.CULL_FACE),e.cullFace(e.BACK),e.disable(e.DEPTH_TEST),e.depthMask(!1),e.colorMask(!1,!1,!1,!1)):"hiddenline"==l&&e.colorMask(!1,!1,!1,!1),B&&e.uniform1i(B.location,Le.TRIANGLES),o&&e.uniform1f(o.location,0),t(),n){const g=A;if(e.enable(e.CULL_FACE),e.cullFace(e.FRONT),e.uniform1f(o.location,g.outlineThickness*window.devicePixelRatio),e.uniform2f(s.location,A.region[2]-A.region[0],A.region[3]-A.region[1]),"hiddenline"==l&&e.colorMask(!0,!0,!0,!1),d||(e.enable(e.BLEND),e.blendEquation(e.FUNC_ADD),e.blendFunc(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA)),t(),e.disable(e.CULL_FACE),e.cullFace(e.BACK),d){e.enable(e.DEPTH_TEST),e.depthMask(!0),e.colorMask(!0,!0,!0,!0),e.stencilFunc(e.NOTEQUAL,0,255),e.stencilOp(e.KEEP,e.KEEP,e.KEEP),e.enable(e.BLEND),e.blendEquation(e.FUNC_ADD),e.blendFunc(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA);const A=g.glShader,I=g.shaderkey,C=g.screenQuad;C.bindShader(g),C.draw(g,g.outlineColor),A.bind(g,I),this.renderer.glGeomItemLibrary.bind(g),this.renderer.glGeomLibrary.bind(g),this.renderer.glMaterialLibrary.bind(g),e.disable(e.STENCIL_TEST)}}}}class Te extends V{constructor(A,g,I){super(),this.glGeomItemSets={},this.glGeomDataShaderKey="",this.glHighlightShaderKey="",this.pass=A,this.gl=g,this.glShader=I.glShader,this.glGeomDataShader=I.glgeomdatashader?I.glgeomdatashader:I.glShader,this.glHighlightShader=I.glselectedshader?I.glselectedshader:I.glShader,this.glShaderKey=I.glShader.getId()+"multidraw-draw",this.glGeomDataShader&&(this.glGeomDataShaderKey=this.glGeomDataShader.getId()+"multidraw-geomdata"),this.glHighlightShader&&(this.glHighlightShaderKey=this.glHighlightShader.getId()+"multidraw-highlight")}getOrCreateGLGeomItemSet(A){let g;if(A instanceof Mg){if(this.glGeomItemSets.CompoundGeom)return this.glGeomItemSets.CompoundGeom;g=new Ue(this.pass.renderer),this.glGeomItemSets.CompoundGeom=g}else if(A instanceof Kg||A instanceof Dg){if(this.glGeomItemSets.GLMesh)return this.glGeomItemSets.GLMesh;g=new ze(this.pass.renderer),this.glGeomItemSets.GLMesh=g}else if(A instanceof Yg||A instanceof Jg){if(this.glGeomItemSets.GLLines)return this.glGeomItemSets.GLLines;g=new ke(this.pass.renderer),this.glGeomItemSets.GLLines=g}else{if(!(A instanceof Wg||A instanceof Ng))throw new Error("Unsupported geom type:"+A.constructor.name);if(this.glGeomItemSets.GLPoints)return this.glGeomItemSets.GLPoints;g=new xe(this.pass.renderer),this.glGeomItemSets.GLPoints=g}return g.on("updated",(()=>{this.emit("updated")})),g}addGLGeomItem(A){const g=A.geomItem.geomParam.value,I=this.getOrCreateGLGeomItemSet(g);A.GLGeomItemSet=I,I.addGLGeomItem(A)}removeGLGeomItem(A){A.GLGeomItemSet.removeGLGeomItem(A),A.GLGeomItemSet=null}bindShader(A,g,I){const C=this.gl;if(A.isCompiledForTarget(I)||(C.multiDrawElements?g.shaderopts.directives.push("#define ENABLE_MULTI_DRAW\n#extension GL_ANGLE_multi_draw : enable"):g.shaderopts.directives.push("#define ENABLE_MULTI_DRAW"),A.compileForTarget(I,g.shaderopts),g.shaderopts.directives.pop()),!A.bind(g,I))throw new Error("Unable to bind shader:"+A);this.pass.renderer.glGeomItemLibrary.bind(g),this.pass.renderer.glGeomLibrary.bind(g),this.pass.renderer.glMaterialLibrary.bind(g)}draw(A){this.bindShader(this.glShader,A,this.glShaderKey);for(const g in this.glGeomItemSets)this.glGeomItemSets[g].draw(A);this.glShader.unbind(A)}drawHighlightedGeoms(A){if(this.glHighlightShader){this.bindShader(this.glHighlightShader,A,this.glHighlightShaderKey);for(const g in this.glGeomItemSets)this.glGeomItemSets[g].drawHighlighted(A);this.glHighlightShader.unbind(A)}}drawGeomData(A){var g;this.bindShader(this.glGeomDataShader,A,this.glGeomDataShaderKey);const I=A.gl,{floatGeomBuffer:C,passId:i,occlusionCulling:e,viewportSize:t}=A.unifs;C&&I.uniform1i(C.location,A.floatGeomBuffer?1:0),i&&I.uniform1i(i.location,A.passIndex),e&&I.uniform1i(e.location,null!==(g=A.occlusionCulling)&&void 0!==g?g:0);for(const g in this.glGeomItemSets)this.glGeomItemSets[g].drawGeomData(A);this.glGeomDataShader.unbind(A)}sortItems(A){for(const g in this.glGeomItemSets)this.glGeomItemSets[g].sortItems(A)}}class _e extends De{constructor(){super(),this.__glshadermaterials={},this.__glShaderGeomSets={}}getPassType(){return EC.OPAQUE}filterGeomItem(A){const g=A.materialParam.value;return A.isOpaque()&&g.isOpaque()}checkMaterial(A){return A.isOpaque()}removeAndReAddGeomItem(A){this.removeGeomItem(A),this.__renderer.assignTreeItemToGLPass(A)}addGeomItem(A){super.addGeomItem(A);const g=A.materialParam.value,I=this.renderer.glGeomLibrary,C=this.renderer.glGeomItemLibrary;if(!g.isTextured()&&g.getShaderClass().supportsInstancing()){const I=g.getShaderName();let C=this.__glShaderGeomSets[I];if(!C){const A=this.constructShaders(I);C=new Te(this,this.__gl,A),C.on("updated",(()=>{this.__renderer.requestRedraw()})),this.__glShaderGeomSets[I]=C}const i=this.renderer.glGeomItemLibrary.getGLGeomItem(A);return C.addGLGeomItem(i),i.GLShaderGeomSets=C,this.emit("updated"),!0}const i=I.constructGLGeom(A.geomParam.value),e=C.getGLGeomItem(A),t=g.getShaderName(),B=this.renderer.glMaterialLibrary.getGLMaterial(g);let o=this.__glshadermaterials[t];if(!o){const A=this.constructShaders(t);o=new Qe(this.__gl,this,A),this.__glshadermaterials[t]=o,o.on("updated",(()=>{this.__renderer.requestRedraw()}))}return o.addGLGeomItem(e,i,B),!0}removeGeomItem(A){super.removeGeomItem(A);const g=this.renderer.glGeomItemLibrary.getGLGeomItem(A);if(g.GLShaderGeomSets){return g.GLShaderGeomSets.removeGLGeomItem(g),g.GLShaderGeomSets=null,!0}if(g.GLGeomItemSet){return g.GLGeomItemSet.removeGLGeomItem(g),g.GLGeomItemSet=null,!0}return!0}removeMaterial(A){const g=A.getShaderName(),I=this.__glshadermaterials[g];if(!I||I!=A.getMetadata("glshaderMaterials"))return void console.warn("Material not found in pass");const C=A.getMetadata("glMaterialGeomItemSets");I.removeMaterialGeomItemSets(C)}__traverseTreeAndDraw(A){for(const g in this.__glShaderGeomSets)this.__glShaderGeomSets[g].draw(A);for(const g in this.__glshadermaterials)this.__glshadermaterials[g].draw(A);A.glGeom&&A.glGeom.unbind(A)}draw(A){const g=this.__gl;A.pushGLStack(),A.glDisable(g.BLEND),A.glEnable(g.DEPTH_TEST),A.glDisable(g.CULL_FACE),g.depthFunc(g.LEQUAL),g.depthMask(!0),this.__traverseTreeAndDraw(A);const I=this.renderer;I.outlineThickness>0&&"image"==I.outlineMethod&&A.viewport.drawSilhouettes(A),A.popGLStack()}drawHighlightedGeoms(A){const g=this.__gl;g.disable(g.CULL_FACE);for(const g in this.__glShaderGeomSets)this.__glShaderGeomSets[g].drawHighlightedGeoms(A);for(const g in this.__glshadermaterials){this.__glshadermaterials[g].drawHighlightedGeoms(A)}A.glGeom&&A.glGeom.unbind(A)}drawGeomData(A){A.passIndex=this.passIndex;const g=this.__gl;g.disable(g.BLEND),g.disable(g.CULL_FACE),g.enable(g.DEPTH_TEST),g.depthFunc(g.LEQUAL),g.depthMask(!0);for(const g in this.__glShaderGeomSets)this.__glShaderGeomSets[g].drawGeomData(A);for(const g in this.__glshadermaterials){this.__glshadermaterials[g].drawGeomData(A)}A.glGeom&&A.glGeom.unbind(A)}}re.registerPass(_e,EC.OPAQUE);class Pe extends _e{constructor(){super(),this.linesGeomDataBuffer=null,this.fattenLinesShader=null,this.quad=null,this.fbo=null}init(A,g){super.init(A,g)}filterGeomItem(A){const g=A.geomParam.value;return g instanceof Yg||g instanceof Jg||g instanceof Wg||g instanceof Ng}draw(A){const g=this.__gl;A.pushGLStack(),A.glEnable(g.BLEND),A.glEnable(g.DEPTH_TEST),g.blendFunc(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA),g.depthFunc(g.LEQUAL),g.depthMask(!0),this.__traverseTreeAndDraw(A),A.popGLStack()}drawGeomData(A){const g=this.__gl;if(A.geomDataFbo&&!A.occlusionCulling){this.linesGeomDataBuffer||(this.linesGeomDataBuffer=new HC(g,{type:this.__renderer.floatGeomBuffer?"FLOAT":"UNSIGNED_BYTE",format:"RGBA",filter:"NEAREST",width:1,height:2}),this.fattenLinesShader=new fe(g),this.quad=new Yi(g,new AI(1,1)));const I=A.geomDataFbo,C=I.width,i=I.height;if(this.linesGeomDataBuffer.width!=C||this.linesGeomDataBuffer.height!=i){this.fbo&&(g.deleteFramebuffer(this.fbo),this.fbo=null),this.linesGeomDataBuffer.resize(C,i),this.fbo=g.createFramebuffer();const A=this.linesGeomDataBuffer.glTex,e=I.__depthTexture;"webgl2"==g.name?(g.bindFramebuffer(g.DRAW_FRAMEBUFFER,this.fbo),g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.COLOR_ATTACHMENT0,g.TEXTURE_2D,A,0),g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.DEPTH_ATTACHMENT,g.TEXTURE_2D,e,0)):(g.bindFramebuffer(g.FRAMEBUFFER,this.fbo),g.framebufferTexture2D(g.FRAMEBUFFER,g.COLOR_ATTACHMENT0,g.TEXTURE_2D,A,0),g.framebufferTexture2D(g.FRAMEBUFFER,g.DEPTH_ATTACHMENT,g.TEXTURE_2D,e,0)),MC(g,C,i)}else"webgl2"==g.name?g.bindFramebuffer(g.DRAW_FRAMEBUFFER,this.fbo):g.bindFramebuffer(g.FRAMEBUFFER,this.fbo);g.colorMask(!0,!0,!0,!0),g.clearColor(0,0,0,0),g.clear(g.COLOR_BUFFER_BIT)}if(super.drawGeomData(A),A.geomDataFbo&&!A.occlusionCulling){A.geomDataFbo.bindForWriting(A),this.fattenLinesShader.bind(A);const{colorTexture:I,screenSize:C}=A.unifs;this.linesGeomDataBuffer.bindToUniform(A,I);const i=A.geomDataFbo;g.uniform2f(C.location,i.width,i.height),this.quad.bindAndDraw(A)}}}re.registerPass(Pe,EC.OPAQUE);class Oe extends De{constructor(){super(),this.itemCount=0,this.__glShaderGeomSets={},this.transparentItems=[],this.transparentItemIndices={},this.freeList=[],this.visibleItems=[],this.prevSortCameraPos=new o,this.sortCameraMovementDistance=0,this.reSort=!1}init(A,g){super.init(A,g),this.itemCount=0,this.__glShaderGeomSets={},this.transparentItems=[],this.transparentItemIndices={},this.freeList=[],this.visibleItems=[],this.prevSortCameraPos=new o(999,999,999),this.sortCameraMovementDistance=.25,this.reSort=!1}getPassType(){return EC.TRANSPARENT}filterGeomItem(A){const g=A.geomParam.value;if(g instanceof Yg||g instanceof Wg||g instanceof Ng||g instanceof Jg)return!1;const I=A.materialParam.value;return!A.isOpaque()||!I.isOpaque()}resortNeeded(){this.reSort=!0}addGeomItem(A){super.addGeomItem(A),this.itemCount++;const g=this.listenerIDs[A.getId()],I=A.materialParam.value,C=I.getShaderName(),i=this.constructShaders(C);if(!I.isTextured()&&I.getShaderClass().supportsInstancing()){let I=this.__glShaderGeomSets[C];I||(I=new Te(this,this.__gl,i),I.on("updated",(()=>{this.renderer.requestRedraw()})),this.__glShaderGeomSets[C]=I);const e=this.renderer.glGeomItemLibrary.getGLGeomItem(A);return I.addGLGeomItem(e),g["glGeomItem.visibilityChanged"]=e.on("visibilityChanged",(()=>{this.resortNeeded()})),this.emit("updated"),e.GLShaderGeomSets=I,void(this.reSort=!0)}const e=this.renderer.glGeomLibrary.constructGLGeom(A.geomParam.value),t=this.renderer.glGeomItemLibrary.getGLGeomItem(A);if(!t)throw new Error("glGeomItem not found for geomItem:"+A.getName());const B=this.renderer.glMaterialLibrary.getGLMaterial(I);g["glGeomItem.visibilityChanged"]=t.on("visibilityChanged",(A=>{if(A.visible)this.visibleItems.push(o);else{const A=this.visibleItems.indexOf(o);this.visibleItems.splice(A,1)}this.reSort=!0})),g["GeomMat.valueChanged"]=A.geomMatParam.on("valueChanged",(()=>{this.reSort=!0}));const o={geomItem:A,shaders:i,glGeom:e,glMaterial:B,glGeomItem:t,material:I};let s;s=this.freeList.length>0?this.freeList.pop():this.transparentItems.length,this.transparentItems[s]=o,this.transparentItemIndices[A.getId()]=s,A.isVisible()&&this.visibleItems.push(o),this.reSort=!0}removeGeomItem(A){this.itemCount--;const g=this.listenerIDs[A.getId()];super.removeGeomItem(A);const I=this.renderer.glGeomItemLibrary.getGLGeomItem(A);if(!I)throw new Error("glGeomItem not found for geomItem:"+A.getName());if(I.removeListenerById("visibilityChanged",g["glGeomItem.visibilityChanged"]),I.GLShaderGeomSets){I.GLShaderGeomSets.removeGLGeomItem(I),I.GLShaderGeomSets=null}else{const g=this.transparentItemIndices[A.getId()],I=this.transparentItems[g];delete this.transparentItemIndices[A.getId()],this.transparentItems[g]=null,this.freeList.push(g);const C=this.visibleItems.indexOf(I);-1!=C&&this.visibleItems.splice(C,1)}return this.emit("updated"),!0}sortItems(A){for(const g in this.__glShaderGeomSets)this.__glShaderGeomSets[g].sortItems(A);for(const g of this.visibleItems){const I=g.glGeomItem.geomItem.geomMatParam.value;g.dist=I.translation.distanceTo(A)}this.visibleItems.sort(((A,g)=>A.dist>g.dist?-1:A.dist<g.dist?1:0)),this.reSort=!1}_drawItem(A,g,I){I.currentGLMaterial!=g.glMaterial&&(I.currentGLMaterial=g.glMaterial,I.currentGLMaterial.bind(A)),I.currentGLGeom!=g.glGeom&&(I.currentGLGeom=g.glGeom,I.currentGLGeom.bind(A));g.glGeomItem.bind(A),A.bindViewports(A.unifs,(()=>{I.currentGLGeom.draw(A)}))}_drawItems(A){for(const g in this.__glShaderGeomSets)this.__glShaderGeomSets[g].draw(A);const g={currentglShader:null,currentGLMaterial:null,currentGLGeom:null};for(const I of this.visibleItems){const C=I.shaders.glShader;if(g.currentglShader!=C){if(!C.bind(A,"color"))continue;const I=this.__gl,i=A.unifs;i.instancedDraw&&I.uniform1i(i.instancedDraw.location,0),this.renderer.glGeomItemLibrary.bind(A),g.currentglShader=C}this._drawItem(A,I,g)}}draw(A){if(0==this.itemCount)return;const g=this.__gl,I=A.viewXfo.tr;if(this.reSort||I.distanceTo(this.prevSortCameraPos)>this.sortCameraMovementDistance)if(this.sortItems(I),this.prevSortCameraPos=I,A.vrviewport)this.sortCameraMovementDistance=.2*A.viewScale;else if(A.viewport){const g=A.viewport.getCamera();this.sortCameraMovementDistance=.3*g.getFocalDistance()}A.pushGLStack(),A.glEnable(g.BLEND),A.glEnable(g.DEPTH_TEST),A.glEnable(g.CULL_FACE),g.depthFunc(g.LESS),g.blendEquation(g.FUNC_ADD),A.pass="ADD",g.blendFunc(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA),g.cullFace(g.BACK),this._drawItems(A),A.popGLStack()}drawHighlightedGeoms(A){const g=this.__gl;g.disable(g.CULL_FACE);for(const g in this.__glShaderGeomSets)this.__glShaderGeomSets[g].drawHighlightedGeoms(A);const I={currentglShader:null,currentGLMaterial:null,currentGLGeom:null};for(const C of this.visibleItems){if(!C.geomItem.isHighlighted())continue;if(!C.shaders.glselectedshader)continue;const i=C.shaders;if(I.currentglShader!=i.glselectedshader){if(!i.glselectedshader.bind(A,"highlight"))continue;I.currentglShader=i.glselectedshader}const{floatGeomBuffer:e,passId:t,instancedDraw:B}=A.unifs;e&&g.uniform1i(e.location,g.floatGeomBuffer?1:0),t&&g.uniform1i(t.location,this.passIndex),B&&g.uniform1i(B.location,0),this.renderer.glGeomItemLibrary.bind(A),this._drawItem(A,C,I)}I.currentGLGeom&&I.currentGLGeom.unbind(A)}drawGeomData(A){const g=this.__gl;A.pushGLStack(),A.glEnable(g.DEPTH_TEST),A.glEnable(g.CULL_FACE);for(const g in this.__glShaderGeomSets)this.__glShaderGeomSets[g].drawGeomData(A);const I={currentglShader:null,currentGLMaterial:null,currentGLGeom:null};for(const C of this.visibleItems){if(!C.glGeomItem.geomItem.isSelectable())continue;const i=C.shaders;if(!i.glgeomdatashader)continue;if(I.currentglShader!=i.glgeomdatashader){if(!i.glgeomdatashader.bind(A,"geomdata"))continue;I.currentglShader=i.glgeomdatashader}const{floatGeomBuffer:e,passId:t,instancedDraw:B}=A.unifs;e&&g.uniform1i(e.location,g.floatGeomBuffer?1:0),t&&g.uniform1i(t.location,this.passIndex),B&&g.uniform1i(B.location,0),this.renderer.glGeomItemLibrary.bind(A),this._drawItem(A,C,I)}I.currentGLGeom&&I.currentGLGeom.unbind(A),A.popGLStack()}}re.registerPass(Oe,EC.TRANSPARENT);class je extends DC{constructor(A){super(A,"AtlasLayoutShader"),this.setShaderStage("VERTEX_SHADER","\n\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\nuniform vec2 pos;\nuniform vec2 size;\nuniform vec2 srctextureDim;\nconst int border = 2;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(vec2(-1.0, -1.0) + (pos * 2.0) + (v_texCoord * size * 2.0), 0.0, 1.0);\n\n  vec2 borderVec2 = vec2(float(border), float(border));\n  v_texCoord *= (srctextureDim + (borderVec2 * 2.0)) / srctextureDim;\n  v_texCoord -= borderVec2 / srctextureDim;\n}\n\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D srctexture;\nuniform vec2 srctextureDim;\nuniform bool alphaFromLuminance;\nuniform bool invert;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n\nfloat luminanceFromRGB(vec3 rgb) {\n  return 0.2126*rgb.r + 0.7152*rgb.g + 0.0722*rgb.b;\n}\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n  vec2 pixelCoord = v_texCoord*srctextureDim;\n  vec2 uv = v_texCoord;\n\n  // Wrap X coords\n  if (pixelCoord.x < 0.0) {\n    uv.x += 1.0/srctextureDim.x;\n    uv.y = 1.0 - uv.y;\n  }\n  else if (pixelCoord.x > srctextureDim.x) {\n    uv.x -= 1.0/srctextureDim.x;\n    uv.y = 1.0 - uv.y;\n  }\n\n  // Wrap Y coords\n  if (pixelCoord.y < 0.0) {\n    uv.y += 1.0/srctextureDim.y;\n    uv.x = 1.0 - uv.x;\n  }\n  else if (pixelCoord.y > srctextureDim.y) {\n    uv.y -= 1.0/srctextureDim.y;\n    uv.x = 1.0 - uv.x;\n  }\n\n  vec4 texel = texture2D(srctexture, uv);\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  // TODO: check why we pre-multiply alphas here.\n  // fragColor = vec4(texel.rgb/texel.a, texel.a);\n\n  if (alphaFromLuminance) {\n    fragColor = vec4(texel.rgb, luminanceFromRGB(texel.rgb));\n  }\n  else {\n    fragColor = texel;\n  }\n  \n  if (invert) {\n    fragColor = vec4(1.0) - fragColor;\n  }\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n\n")}}class qe extends LC{constructor(A,g,I="RGBA",C="FLOAT"){super(A),this.__asyncCount=0,this.loaded=!1,this.ready=!1,this.__layout=[],this.__layoutVec4s=[],this.__atlasLayoutShaderBinding=null,this.__atlasLayoutShader=null,this.__name=g,this.__formatParam=I,this.__typeParam=C,this.clearColor=new l(0,0,0,0),this.__subImages=[],this.__layoutNeedsRegeneration=!1,this.__asyncCount=0,this.loaded=!1}incAsyncCount(A=1){this.__asyncCount+=A,this.ready=!1}decAsyncCount(){this.__asyncCount>0&&(this.__asyncCount--,0==this.__asyncCount&&(this.loaded=!0,this.emit("loaded")))}isLoaded(){return 0==this.__asyncCount}addSubImage(A){if(A instanceof Gg){const g=new HC(this.__gl,A);A.isLoaded()||(this.incAsyncCount(),A.on("loaded",(()=>{this.decAsyncCount()}))),A.setMetadata("ImageAtlas_gltex",g),g.addRef(this);const I=()=>{this.__layoutNeedsRegeneration=!0,this.renderAtlas()};A.on("updated",I),this.__subImages.push(g)}else{const g=A;g.addRef(this),this.__subImages.push(g)}return this.__layoutNeedsRegeneration=!0,this.__subImages.length-1}removeSubImage(A){let g;if(A instanceof Gg){const I=A.getMetadata("ImageAtlas_gltex");g=this.__subImages.indexOf(I),A.deleteMetadata("ImageAtlas_gltex")}else g=this.__subImages.indexOf(A);this.__subImages[g].removeRef(this),this.__subImages.splice(g,1),this.__layoutNeedsRegeneration=!0}getSubImage(A){return this.__subImages[A]}numSubImages(){return this.__layout?this.__layout.length:this.__subImages.length}generateAtlasLayout(A){if(0==this.__subImages.length)return void(this.__layoutNeedsRegeneration=!1);const g=[];this.__subImages.forEach(((A,I)=>{g.push({w:A.width+4,h:A.height+4,area:A.width*A.height,index:I})})),g.sort(((A,g)=>A.area>g.area?-1:A.area<g.area?1:0));const I=new S;I.fit(g),this.__layout=[],g.forEach(((A,g)=>{A.fit?this.__layout[A.index]={pos:new B(A.fit.x+2,A.fit.y+2),size:new B(A.w,A.h)}:console.warn("Unable to fit image")}));const C=I.root.w,i=I.root.h;this.configure({width:C,height:i,format:"FLOAT"==this.__typeParam&&"RGB"==this.__formatParam?"RGBA":this.__formatParam,type:this.__typeParam,filter:"LINEAR"});const e=this.__gl;if(e.__quadVertexIdsBuffer||e.setupInstancedQuad(),!this.__atlasLayoutShader){this.__atlasLayoutShader=new je(this.__gl);const A=[];"webgl2"==e.name&&A.push("#define ENABLE_ES3");const g=this.__atlasLayoutShader.compileForTarget("GLImageAtlas",{directives:A});this.__atlasLayoutShaderBinding=_C(this.__gl,g.attrs,e.__quadattrbuffers,e.__quadIndexBuffer)}let t=Math.round(Math.sqrt(1*this.__layout.length)+.5);if(t=r.nextPow2(t),t%1!=0&&(t+=1-t%1),e.floatTexturesSupported){const A=new Float32Array(t*t*4);for(let g=0;g<this.__layout.length;g++){const I=this.__layout[g];new s(new Float32Array(A.buffer,4*g*4,4)).set(I.pos.x/C,I.pos.y/i,I.size.x/C,I.size.y/i)}this.__atlasLayoutTexture&&this.__atlasLayoutTexture.width==t&&this.__atlasLayoutTexture.height==t?this.__atlasLayoutTexture.bufferData(A,t,t):(this.__atlasLayoutTexture&&this.__atlasLayoutTexture.destroy(),this.__atlasLayoutTexture=new HC(e,{format:"RGBA",type:"FLOAT",filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1,width:t,height:t,data:A}))}else this.__layoutVec4s=[],this.__layout.forEach(((A,g)=>{this.__layoutVec4s[g]=[A.pos.x/C,A.pos.y/i,A.size.x/C,A.size.y/i]}));this.textureDesc[0]=this.width,this.textureDesc[1]=this.height,this.textureDesc[2]=this.__atlasLayoutTexture.width,this.__layoutNeedsRegeneration=!1}getLayoutData(A){return this.__layoutVec4s[A]}renderAtlas(A=!1,g=0){if(0==this.__subImages.length)return;this.__layoutNeedsRegeneration&&this.generateAtlasLayout();const I=this.__gl,C=new PC(I);this.bindForWriting(C,!0),this.__atlasLayoutShader.bind(C,"GLImageAtlas"),this.__atlasLayoutShaderBinding.bind(C);const i=new B(1/this.width,1/this.height),e=C.unifs;for(let A=g;A<this.__subImages.length;A++){const g=this.__subImages[A],t=this.__layout[A];g.bindToUniform(C,e.srctexture)&&(I.uniform2fv(e.pos.location,t.pos.multiply(i).asArray()),I.uniform2fv(e.size.location,t.size.multiply(i).asArray()),I.uniform2f(e.srctextureDim.location,g.width,g.height),I.uniform1i(e.alphaFromLuminance.location,g.alphaFromLuminance?1:0),I.uniform1i(e.invert.location,g.invert?1:0),I.drawQuad(),C.boundTextures--)}A&&this.cleanup(),this.unbind(C),this.emit("updated")}isReady(){return null!=this.__atlasLayoutTexture}bindToUniform(A,g){super.bindToUniform(A,g);const I=A.unifs;if(this.__atlasLayoutTexture){const C=I[g.name+"_layout"];C&&this.__atlasLayoutTexture.bindToUniform(A,C);const i=I[g.name+"_desc"];i&&this.__gl.uniform4fv(i.location,this.textureDesc)}else{const A=I[g.name+"_desc"];A&&this.__gl.uniform4f(A.location,this.width,this.height,0,0)}return!0}cleanup(){for(const A of this.__subImages)A.removeRef(this);this.__subImages=[],this.destroy()}destroy(){this.cleanup(),super.destroy()}}class $e extends bC{constructor(){super(),this.atlas=null,this.indexArrayUpdateNeeded=!1,this.instanceIdsBuffer=null,this.indexArray=new Float32Array(0),this.glshader=null,this.shaderComp={},this.shaderBinding=null,this.modelMatrixArray=[],this.billboardDataArray=[],this.tintColorArray=[],this.width=0,this.drawItemsTexture=null,this.billboards=[],this.dirtyBillboards=new Set,this.freeIndices=[],this.drawCount=0,this.threshold=0,this.updateRequested=!1,this.prevSortCameraPos=new o}init(A,g){super.init(A,g),this.atlas=new qe(this.renderer.gl,"Billboards","RGBA","UNSIGNED_BYTE"),this.atlas.clearColor=new l(1,1,1,0);const I=A=>this.emit("updated",A);this.atlas.on("loaded",I),this.atlas.on("updated",I)}getPassType(){return EC.TRANSPARENT}itemAddedToScene(A,g){return A instanceof gC&&(this.addBillboard(A),!0)}itemRemovedFromScene(A,g){return A instanceof gC&&(this.removeBillboard(A),!0)}addBillboard(A){const g=A.imageParam,I=g.value;if(!I)return void g.on("valueChanged",(()=>this.addBillboard(A)));let C;C=this.freeIndices.length>0?this.freeIndices.pop():this.billboards.length;const i=this.atlas.addSubImage(I);A.setMetadata("GLBillboardsPass_Index",C);const e=()=>{A.isVisible()?(this.drawCount++,this.dirtyBillboards.add(C)):this.drawCount--,this.reqUpdateIndexArray()};A.on("visibilityChanged",e);const t=()=>{A.isVisible()&&(this.dirtyBillboards.add(C),this.emit("updated"))};A.globalXfoParam.on("valueChanged",t),A.alphaParam.on("valueChanged",t),A.on("highlightChanged",t),A.isVisible()&&this.drawCount++,this.billboards[C]={billboard:A,imageIndex:i,visibilityChanged:e,updateBillboard:t},this.indexArrayUpdateNeeded=!0,this.requestUpdate()}removeBillboard(A){const g=A.getMetadata("GLBillboardsPass_Index");if(-1==g)return void console.warn("Billboard already removed.");const I=this.billboards[g],C=I.billboard.imageParam.value;this.atlas.removeSubImage(C),A.off("visibilityChanged",I.visibilityChanged),A.off("highlightChanged",I.updateBillboard),A.globalXfoParam.off("valueChanged",I.updateBillboard),A.alphaParam.off("valueChanged",I.updateBillboard),this.billboards[g]=null,this.freeIndices.push(g),A.isVisible()&&this.drawCount--,this.indexArrayUpdateNeeded=!0,this.requestUpdate()}populateBillboardDataArray(A,g,I){const C=A.billboard,i=C.globalXfoParam.value.toMat4(),e=C.pixelsPerMeterParam.value,t=C.pivotParam.value,B=1/e;let o=0;C.alignedToCameraParam.value&&(o|=4),C.drawOnTopParam.value&&(o|=8),C.fixedSizeOnscreenParam.value&&(o|=16);const a=C.alphaParam.value,l=C.colorParam.value,n=7*g*4,d=new s(new Float32Array(I.buffer,4*n,4)),h=new s(new Float32Array(I.buffer,4*(n+4),4)),c=new s(new Float32Array(I.buffer,4*(n+8),4)),r=new s(new Float32Array(I.buffer,4*(n+12),4));d.set(i.xAxis.x,i.yAxis.x,i.zAxis.x,i.translation.x),h.set(i.xAxis.y,i.yAxis.y,i.zAxis.y,i.translation.y),c.set(i.xAxis.z,i.yAxis.z,i.zAxis.z,i.translation.z),r.set(B,o,A.imageIndex,a);new s(new Float32Array(I.buffer,4*(n+16),4)).set(t.x,t.y,0,0);if(new s(new Float32Array(I.buffer,4*(n+20),4)).set(l.r,l.g,l.b,l.a),C.isHighlighted()){const A=C.getHighlight();new s(new Float32Array(I.buffer,4*(n+24),4)).set(A.r,A.g,A.b,A.a)}}requestUpdate(){this.updateRequested||(this.updateRequested=!0,this.emit("updated"))}reqUpdateIndexArray(){this.indexArrayUpdateNeeded||(this.indexArrayUpdateNeeded=!0,this.emit("updated"))}updateIndexArray(){const A=this.__gl;this.indexArray&&this.indexArray.length!=this.drawCount&&(A.deleteBuffer(this.instanceIdsBuffer),this.instanceIdsBuffer=null),this.indexArray=new Float32Array(this.drawCount);let g=0;for(let A=0;A<this.billboards.length;A++)this.billboards[A]&&this.billboards[A].billboard.isVisible()&&(this.indexArray[g]=A,g++);this.instanceIdsBuffer||(this.instanceIdsBuffer=A.createBuffer()),A.bindBuffer(A.ARRAY_BUFFER,this.instanceIdsBuffer),A.bufferData(A.ARRAY_BUFFER,this.indexArray,A.STATIC_DRAW),this.indexArrayUpdateNeeded=!1}updateBillboards(A){const g=()=>{this.indexArrayUpdateNeeded&&this.updateIndexArray();const g=this.__gl;if(!this.glshader){g.__quadVertexIdsBuffer||g.setupInstancedQuad(),this.glshader=new Ee(g);const I=this.glshader.compileForTarget("GLBillboardsPass",A.shaderopts);this.shaderBinding=_C(g,I.attrs,g.__quadattrbuffers,g.__quadIndexBuffer)}if(this.atlas.renderAtlas(),!g.floatTexturesSupported||!g.drawElementsInstanced)return this.modelMatrixArray=[],this.billboardDataArray=[],this.tintColorArray=[],this.indexArray.forEach((A=>{const g=this.billboards[A],I=g.billboard,C=I.globalXfoParam.value.toMat4(),i=1/I.pixelsPerMeterParam.value;let e=0;I.alignedToCameraParam.value&&(e|=4),I.drawOnTopParam.value&&(e|=8),I.fixedSizeOnscreenParam.value&&(e|=16);const t=I.alphaParam.value,B=I.colorParam.value;this.modelMatrixArray[A]=C.asArray(),this.billboardDataArray[A]=[i,e,g.imageIndex,t],this.tintColorArray[A]=[B.r,B.g,B.b,B.a]})),void(this.updateRequested=!1);let I=Math.round(Math.sqrt(7*(this.billboards.length-this.freeIndices.length))+.5);if(I%7!=0&&(I+=7-I%7),this.width=I,this.drawItemsTexture)this.drawItemsTexture.resize(I,I);else{const A={format:"RGBA",type:"FLOAT",width:I,height:I,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1};this.drawItemsTexture=new HC(g,A),this.drawItemsTexture.clear()}this.indexArray.forEach((A=>{-1!=A&&this.updateBillboard(A)})),this.updateRequested=!1};this.atlas.isLoaded()?g():this.atlas.on("loaded",g)}updateBillboard(A){if(0==this.drawCount||!this.drawItemsTexture)return;const g=this.billboards[A];if(!g.billboard.isVisible())return;const I=this.__gl,C=new Float32Array(28);this.populateBillboardDataArray(g,0,C),I.bindTexture(I.TEXTURE_2D,this.drawItemsTexture.glTex);const i=7*A%this.width,e=Math.floor(7*A/this.width),t=this.drawItemsTexture.getType(),B=this.drawItemsTexture.getFormat();if(t==I.FLOAT)I.texSubImage2D(I.TEXTURE_2D,0,i,e,7,1,B,t,C);else{const A=r.convertFloat32ArrayToUInt16Array(C);I.texSubImage2D(I.TEXTURE_2D,0,i,e,7,1,B,t,A)}}sort(A){for(const g of this.billboards){const{billboard:I}=g;if(I&&I.isVisible()){const C=I.globalXfoParam.value;g.dist=C.tr.distanceTo(A)}}this.indexArray.sort(((A,g)=>-1==A?1:-1==g||this.billboards[A].dist>this.billboards[g].dist?-1:this.billboards[A].dist<this.billboards[g].dist?1:0));const g=this.__gl;g.floatTexturesSupported&&this.instanceIdsBuffer&&(g.bindBuffer(g.ARRAY_BUFFER,this.instanceIdsBuffer),g.bufferData(g.ARRAY_BUFFER,this.indexArray,g.STATIC_DRAW))}__draw(A,g){const I=this.__gl;if(!this.glshader)return;this.glshader.bind(A,g),this.shaderBinding.bind(A);const C=A.unifs,{atlasBillboards:i,passId:e,floatGeomBuffer:t,inVR:B}=A.unifs;if(i&&this.atlas.bindToUniform(A,C.atlasBillboards),t&&A instanceof qC&&I.uniform1i(t.location,A.floatGeomBuffer?1:0),e&&I.uniform1i(e.location,this.passIndex),B&&I.uniform1i(B.location,A.vrPresenting?1:0),I.floatTexturesSupported&&I.drawElementsInstanced){const{instancesTexture:g,instancesTextureSize:i}=A.unifs;this.drawItemsTexture.bindToUniform(A,g),I.uniform1i(i.location,this.width);{const g=A.attrs.instanceIds.location;I.enableVertexAttribArray(g),I.bindBuffer(I.ARRAY_BUFFER,this.instanceIdsBuffer),I.vertexAttribPointer(g,1,I.FLOAT,!1,4,0),I.vertexAttribDivisor(g,1)}A.bindViewports(C,(()=>{I.drawElementsInstanced(I.TRIANGLES,6,I.UNSIGNED_SHORT,0,this.drawCount)}))}else{const{modelMatrix:g,billboardData:i,tintColor:e,layoutData:t}=A.unifs,B=this.indexArray.length;for(let o=0;o<B;o++)I.uniformMatrix4fv(g.location,!1,this.modelMatrixArray[o]),I.uniform4fv(i.location,this.billboardDataArray[o]),I.uniform4fv(e.location,this.tintColorArray[o]),I.uniform4fv(t.location,this.atlas.getLayoutData(this.billboards[o].imageIndex)),A.bindViewports(C,(()=>{I.drawQuad()}))}}draw(A){if(0==this.drawCount)return;if(this.updateRequested&&this.updateBillboards(A),this.dirtyBillboards.size>0&&(this.dirtyBillboards.forEach((A=>{this.updateBillboard(A)})),this.dirtyBillboards.clear()),this.indexArrayUpdateNeeded&&this.updateIndexArray(),!this.glshader)return;const g=A.viewXfo.tr;if(g.distanceTo(this.prevSortCameraPos)>this.threshold)if(this.sort(g),this.prevSortCameraPos=g.clone(),this.drawCount>1){const A=this.indexArray[this.indexArray.length-1],g=this.indexArray[this.indexArray.length-2],I=this.billboards[A].billboard,C=this.billboards[g].billboard,i=I.globalXfoParam.value.tr,e=C.globalXfoParam.value.tr;this.threshold=i.distanceTo(e)}else this.threshold=9999;const I=this.__gl;I.depthMask(!1),I.disable(I.CULL_FACE),I.enable(I.BLEND),I.blendEquation(I.FUNC_ADD),I.blendFunc(I.SRC_ALPHA,I.ONE_MINUS_SRC_ALPHA),this.__draw(A,"DRAW_COLOR"),I.disable(I.BLEND),I.depthMask(!0)}drawHighlightedGeoms(A){0!=this.drawCount&&this.__draw(A,"DRAW_HIGHLIGHT")}drawGeomData(A){0!=this.drawCount&&this.__draw(A,"DRAW_GEOMDATA")}getGeomItemAndDist(A){let g,I;if(A instanceof Float32Array?(g=Math.round(A[1]),I=A[3]):(g=A[0]+((63&A[1])<<8),I=r.decode16BitFloatFrom2xUInt8(A.slice(2,3))),!(g>=this.billboards.length))return{geomItem:this.billboards[g].billboard,componentId:0,dist:I};console.warn("Invalid Draw Item id:"+g+" NumBillboards:"+(this.billboards.length-1))}}re.registerPass($e,EC.TRANSPARENT);class At extends _e{constructor(){super()}getPassType(){return EC.OVERLAY}filterGeomItem(A){if(A.isOverlay())return!0;const g=A.materialParam.value.getShaderClass();return!(!g||!g.isOverlay())}draw(A){const g=this.__gl;g.clear(g.DEPTH_BUFFER_BIT),g.enable(g.CULL_FACE),g.cullFace(g.BACK),g.enable(g.BLEND),g.blendEquation(g.FUNC_ADD),A.pass="ADD",g.blendFunc(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA),this.__traverseTreeAndDraw(A),g.disable(g.BLEND)}drawGeomData(A){const g=this.__gl;g.clear(g.DEPTH_BUFFER_BIT),g.enable(g.CULL_FACE),g.cullFace(g.BACK),g.enable(g.BLEND),g.blendEquation(g.FUNC_ADD),A.pass="ADD",g.blendFunc(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA),super.drawGeomData(A),g.disable(g.BLEND),g.enable(g.DEPTH_TEST)}}re.registerPass(At,EC.OVERLAY);console.log("Zea Engine v4.4.0");const gt=new class{constructor(A){this.version=A,this.registry={}}registerLib(A){const g=A.name,I=A.version;this.registry[g]&&console.warn("Library already registered:"+g),this.registry[g]=I,console.log(`Registered lib '${g}' v${I}`)}listLibs(){return this.registry}}("4.4.0");var It=Object.freeze({__proto__:null,Allocation1D:w,Allocator1D:X,AssetItem:$I,AssetLoadContext:AC,Attribute:bg,BaseClass:u,BaseEvent:R,BaseGeom:wg,BaseGeomItem:LI,BaseGroup:xI,BaseImage:Gg,BaseItem:hA,BaseProxy:pg,BaseTool:VC,BillboardItem:gC,BillboardShader:Ee,BinReader:YA,BinWriter:class{constructor(A=0){this.__data=new ArrayBuffer(A),this.__byteOffset=0,this.__reserved=A,this.__dataView=new DataView(this.__data)}pos(){return this.__byteOffset}seek(A){this.__byteOffset=A}seekEnd(){this.__byteOffset=this.__reserved}getBuffer(){if(this.__data.byteLength==this.__byteOffset)return this.__data;return new Uint8Array(this.__data).slice(0,this.__byteOffset).buffer}__grow(){const A=2*(this.__reserved>0?this.__reserved:1),g=new ArrayBuffer(A),I=new Uint8Array(g),C=new Uint8Array(this.__data);I.set(C),this.__data=g,this.__dataView=new DataView(this.__data),this.__reserved=A}__reserve(A){this.__byteOffset+A>this.__reserved&&this.__grow()}__offset(A){this.__byteOffset+=A,this.__byteOffset>this.__reserved&&this.__grow()}writeUInt8(A){this.__reserve(1),this.__dataView.setUint8(this.__byteOffset,A),this.__offset(1)}writeUInt16(A){this.__reserve(2),this.__dataView.setUint16(this.__byteOffset,A,!0),this.__offset(2)}writeUInt32(A){this.__reserve(4),this.__dataView.setUint32(this.__byteOffset,A,!0),this.__offset(4)}writeSInt32(A){this.__reserve(4),this.__dataView.setInt32(this.__byteOffset,A,!0),this.__offset(4)}writeFloat16(A){const g=r.encode16BitFloat(A);this.writeUInt16(g)}writeFloat32(A){this.__reserve(4),this.__dataView.setFloat32(this.__byteOffset,A,!0),this.__offset(4)}writeUInt8Array(A,g=!0){const I=(A.length,A.length);this.__reserve(I+(g?4:0)),g&&this.writeUInt32(I);for(let g=0;g<I;g++)this.writeUInt8(A[g])}writeUInt16Array(A,g=!0){const I=(A.length,A.length);this.__reserve(2*I+(g?4:0)),g&&this.writeUInt32(I);for(let g=0;g<I;g++)this.writeUInt16(A[g])}writeUInt32Array(A,g=!0){const I=(A.length,A.length);this.__reserve(4*I+(g?4:0)),g&&this.writeUInt32(I);for(let g=0;g<I;g++)this.writeUInt32(A[g])}writeFloat32Array(A,g=!0){const I=(A.length,A.length);this.__reserve(4*I+(g?4:0)),g&&this.writeUInt32(I);for(let g=0;g<I;g++)this.writeFloat32(A[g])}writeStr(A,g=!0){const I=A.length;this.__reserve(4*I+(g?4:0)),g&&this.writeUInt32(I);for(let g=0;g<I;g++)this.writeFloat32(A.charCodeAt(g))}writeSInt32Vec2(A){this.writeSInt32(A.x),this.writeSInt32(A.y)}writeUInt32Vec2(A){this.writeUInt32(A.x),this.writeUInt32(A.y)}writeFloat16Vec2(A){this.writeFloat16(A.x),this.writeFloat16(A.y)}writeFloat32Vec2(A){this.writeFloat32(A.x),this.writeFloat32(A.y)}writeFloat16Vec3(A){this.writeFloat16(A.x),this.writeFloat16(A.y),this.writeFloat16(A.z)}writeFloat32Vec3(A){this.writeFloat32(A.x),this.writeFloat32(A.y),this.writeFloat32(A.z)}writeFloat16Quat(A){this.writeFloat16(A.x),this.writeFloat16(A.y),this.writeFloat16(A.z),this.writeFloat16(A.w)}writeFloat32Quat(A){this.writeFloat32(A.x),this.writeFloat32(A.y),this.writeFloat32(A.z),this.writeFloat32(A.w)}writeRGBFloat32Color(A){this.writeFloat32(A.r),this.writeFloat32(A.g),this.writeFloat32(A.b)}writeRGBAFloat32Color(A){this.writeFloat32(A.r),this.writeFloat32(A.g),this.writeFloat32(A.b),this.writeFloat32(A.a)}writeRGBUInt8Color(A){this.writeUInt8(A.r),this.writeUInt8(A.g),this.writeUInt8(A.b)}writeRGBAUInt8Color(A){this.writeUInt8(A.r),this.writeUInt8(A.g),this.writeUInt8(A.b),this.writeUInt8(A.a)}writeBox2(A){this.writeFloat32Vec2(A.p0),this.writeFloat32Vec2(A.p1)}writeBox3(A){this.writeFloat32Vec3(A.p0),this.writeFloat32Vec3(A.p1)}writePadd(A){const g=A-this.__byteOffset;this.__reserve(g),this.__offset(g)}writeAlignment(A){const g=this.__byteOffset%A;0!=g&&(this.__reserve(A-g),this.__offset(A-g))}},BooleanOperatorInput:class extends tg{},BooleanOperatorOutput:class extends gg{},BooleanParameter:fA,Box2:Q,Box2Parameter:vA,Box3:b,Box3Parameter:kA,CADAssembly:lC,CADAsset:aC,CADBody:dC,CADPart:nC,Camera:IC,CameraManipulator:SC,ChildAddedEvent:oA,Circle:zg,Color:l,ColorAttribute:Hg,ColorOperatorInput:class extends tg{},ColorOperatorOutput:class extends gg{},ColorParameter:xA,get ColorSpace(){return pA},CompoundGeom:Mg,Cone:Og,ControllerAddedEvent:W,CountChangedEvent:Y,Cross:Tg,Cuboid:jg,CuttingPlane:sC,Cylinder:qg,DataImage:CI,Disc:$g,EnvMap:RI,EnvMapAssignedEvent:K,EnvMapShader:ii,EnvProjectionShader:be,EulerAngles:n,EventEmitter:V,FRAMEBUFFER:Ki,FatLinesMaterial:HI,FatLinesShader:Ze,FatPointsMaterial:WI,FatPointsShader:Xe,FileImage:eI,FileImage2D:class extends eI{constructor(A,g={}){console.warn("FileImage2D is becoming deprecated in favor of simple FileImage"),super(A,g)}},FilePathParameter:cg,FlatSurfaceMaterial:YI,FlatSurfaceShader:ue,Float32:6,Frustum:class{constructor(A,g,I,C,i,e){this.planes=[A||new Z,g||new Z,I||new Z,C||new Z,i||new Z,e||new Z]}setFromMatrix(A){const g=A,I=this.planes;I[0].set(g.m03-g.m00,g.m13-g.m10,g.m23-g.m20,g.m33-g.m30),I[1].set(g.m03+g.m00,g.m13+g.m10,g.m23+g.m20,g.m33+g.m30),I[2].set(g.m03+g.m01,g.m13+g.m11,g.m23+g.m21,g.m33+g.m31),I[3].set(g.m03-g.m01,g.m13-g.m11,g.m23-g.m21,g.m33-g.m31),I[4].set(g.m03-g.m02,g.m13-g.m12,g.m23-g.m22,g.m33-g.m32),I[5].set(g.m03+g.m02,g.m13+g.m12,g.m23+g.m22,g.m33+g.m32),I.forEach((A=>A.normalizeInPlace()))}intersectsBox(A){const g=new o,I=this.planes,{min:C,max:i}=A;for(let A=0;A<6;A++){const e=I[A];if(g.x=e.normal.x>0?i.x:C.x,g.y=e.normal.y>0?i.y:C.y,g.z=e.normal.z>0?i.z:C.z,e.distanceToPoint(g)<0)return!1}return!0}toJSON(){return{p0:this.planes[0].toJSON(),p1:this.planes[1].toJSON(),p2:this.planes[2].toJSON(),p3:this.planes[3].toJSON(),p4:this.planes[4].toJSON(),p5:this.planes[5].toJSON()}}fromJSON(A){this.planes[0].fromJSON(A.p0),this.planes[1].fromJSON(A.p1),this.planes[2].fromJSON(A.p2),this.planes[3].fromJSON(A.p3),this.planes[4].fromJSON(A.p4),this.planes[5].fromJSON(A.p5)}toString(){return t.stringifyJSONWithFixedPrecision(this.toJSON())}},GIFImage:uI,GLBaseViewport:pi,GLBillboardsPass:$e,GLBoundingBoxPass:class extends bC{constructor(){super(),this.boxes=[],this.dirtyBoxes=new Set,this.freeIndices=[],this.idToIndex=[],this.drawCount=0,this.indexArrayUpdateNeeded=!1,this.__updateRequested=!1,this.__modelMatrixArray=[],this.__treeItemDataArray=[],this.__tintColorArray=[],this.__indexArray=new Float32Array(0),this.__width=0}getPassType(){return EC.OPAQUE}init(A,g){super.init(A,g);const I=this.__renderer.gl;this.glgeom=new ji(I,new _g(1,1,1)),this.glshader=new Ce(I)}itemAddedToScene(A,g){return!1}itemRemovedFromScene(A,g){return!1}addTreeItem(A,g=!0){if(A instanceof ag&&(this.bindTreeItem(A),g)){for(const g of A.getChildren())g&&this.addTreeItem(g);A.on("childAdded",(A=>{this.addTreeItem(A.childItem)})),A.on("childRemoved",(A=>{this.unbindTreeItem(A.childItem)}))}}bindTreeItem(A){let g,I=this.freeIndices.pop();g=I||this.boxes.length,this.idToIndex[A.getId()]=g;const C=()=>{A.isVisible()?(this.drawCount++,this.dirtyBoxes.add(g)):this.drawCount--,this.indexArrayUpdateNeeded=!0};A.on("visibilityChanged",C);const i=()=>{A.isVisible()&&(this.dirtyBoxes.add(g),this.emit("updated"))};A.globalXfoParam.on("valueChanged",i),A.boundingBoxParam.on("valueChanged",i),A.isVisible()&&this.drawCount++,this.boxes[g]={treeItem:A,visibilityChanged:C,xfoChanged:i},this.indexArrayUpdateNeeded=!0,this.__updateRequested=!0,this.emit("updated")}unbindTreeItem(A){if(!(A.getId()in this.idToIndex))return void console.warn("Billboard already removed.");const g=this.idToIndex[A.getId()],I=this.boxes[g];A.off("visibilityChanged",I.visibilityChanged),A.globalXfoParam.off("valueChanged",I.xfoChanged),A.boundingBoxParam.off("valueChanged",I.xfoChanged),this.boxes[g]=null,this.freeIndices.push(g),A.isVisible()&&this.drawCount--,this.indexArrayUpdateNeeded=!0,this.__updateRequested=!0,this.__updateBoxes(),this.emit("updated")}__populateBoxesDataArray(A,g,I){const C=A.treeItem;let i,e;C instanceof kI?(i=new l(1,0,0,1),e=C.geomMatParam.value):(i=new l(0,0,1,1),e=C.globalXfoParam.value.toMat4());const t=C.boundingBoxParam.value,B=8*g*4,o=new s(new Float32Array(I.buffer,4*B,4)),a=new s(new Float32Array(I.buffer,4*(B+4),4)),n=new s(new Float32Array(I.buffer,4*(B+8),4)),d=new s(new Float32Array(I.buffer,4*(B+12),4)),h=new s(new Float32Array(I.buffer,4*(B+16),4)),c=new s(new Float32Array(I.buffer,4*(B+24),4)),r=new s(new Float32Array(I.buffer,4*(B+28),4));o.set(0,0,0,0),a.set(e.xAxis.x,e.yAxis.x,e.zAxis.x,e.translation.x),n.set(e.xAxis.y,e.yAxis.y,e.zAxis.y,e.translation.y),d.set(e.xAxis.z,e.yAxis.z,e.zAxis.z,e.translation.z),h.set(i.r,i.g,i.b,i.a),c.set(t.p0.x,t.p0.y,t.p0.z,0),r.set(t.p1.x,t.p1.y,t.p1.z,0)}__updateIndexArray(){const A=this.__gl;this.__indexArray&&this.__indexArray.length!=this.drawCount&&(A.deleteBuffer(this.__instanceIdsBuffer),this.__instanceIdsBuffer=void 0),this.__indexArray=new Float32Array(this.drawCount);let g=0;for(let A=0;A<this.boxes.length;A++)this.boxes[A]&&this.boxes[A].treeItem.isVisible()&&(this.__indexArray[g]=A,g++);this.__instanceIdsBuffer||(this.__instanceIdsBuffer=A.createBuffer()),A.bindBuffer(A.ARRAY_BUFFER,this.__instanceIdsBuffer),A.bufferData(A.ARRAY_BUFFER,this.__indexArray,A.STATIC_DRAW),this.indexArrayUpdateNeeded=!1}__updateBoxes(){this.indexArrayUpdateNeeded&&this.__updateIndexArray();const A=this.__renderer.gl;let g=Math.round(Math.sqrt(8*(this.boxes.length-this.freeIndices.length))+.5);g%8!=0&&(g+=8-g%8),this.__width=g,this.__drawItemsTexture?this.__drawItemsTexture.resize(g,g):(this.__drawItemsTexture=new HC(A,{format:"RGBA",type:"FLOAT",width:g,height:g,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.__drawItemsTexture.clear()),this.__indexArray.forEach((A=>{-1!=A&&this.__updateBox(A)})),this.__updateRequested=!1}__updateBox(A){if(0==this.drawCount||!this.__drawItemsTexture)return;const g=this.boxes[A];if(!g.treeItem.isVisible())return;const I=this.__gl,C=new Float32Array(32);this.__populateBoxesDataArray(g,0,C),I.bindTexture(I.TEXTURE_2D,this.__drawItemsTexture.glTex);const i=8*A%this.__width,e=Math.floor(8*A/this.__width),t=this.__drawItemsTexture.getType(),B=this.__drawItemsTexture.getFormat();if(t==I.FLOAT)I.texSubImage2D(I.TEXTURE_2D,0,i,e,8,1,B,t,C);else{const A=r.convertFloat32ArrayToUInt16Array(C);I.texSubImage2D(I.TEXTURE_2D,0,i,e,8,1,B,t,A)}}draw(A){if(0==this.drawCount)return;this.__updateRequested&&this.__updateBoxes(),this.dirtyBoxes.size>0&&(this.dirtyBoxes.forEach((A=>{this.__updateBox(A)})),this.dirtyBoxes.clear()),this.indexArrayUpdateNeeded&&this.__updateIndexArray();const g=this.__gl;this.glshader.bind(A),this.glgeom.bind(A);const I=A.unifs;if(g.uniform1i(I.occlusionCulling.location,0),g.floatTexturesSupported&&g.drawElementsInstanced){this.__drawItemsTexture.bindToUniform(A,I.instancesTexture),g.uniform1i(I.instancesTextureSize.location,this.__width);{const I=A.attrs.instancedIds.location;g.enableVertexAttribArray(I),g.bindBuffer(g.ARRAY_BUFFER,this.__instanceIdsBuffer),g.vertexAttribPointer(I,1,g.FLOAT,!1,4,0),g.vertexAttribDivisor(I,1)}g.uniform1i(I.instancedDraw.location,1),A.bindViewports(I,(()=>{this.glgeom.drawInstanced(A,this.drawCount)}))}else{const C=this.__indexArray.length;for(let i=0;i<C;i++)A.bindViewports(I,(()=>{g.drawQuad()}))}}},GLCADPass:class extends bC{constructor(A=!1){super(),console.warn("GLCADPass is deprecated. No need to install this pass in the renderer.")}itemAddedToScene(A,g){return!1}itemRemovedFromScene(A,g){return!1}},GLFbo:fC,GLGeom:Wi,GLGeomItem:ge,GLGeomItemChangeType:{GEOMITEM_CHANGED:0,GEOM_CHANGED:1,VISIBILITY_CHANGED:2,HIGHLIGHT_CHANGED:3},GLGeomItemFlags:Ae,GLGeomItemSet:Ge,GLLines:ji,GLLinesPass:Pe,GLMaterial:_i,GLMaterialGeomItemSets:me,GLMesh:Yi,GLOpaqueGeomsPass:_e,GLOverlayPass:At,GLPass:bC,GLPoints:Oi,GLRenderTarget:LC,GLRenderer:re,GLShader:DC,GLShaderMaterials:Qe,GLStandardGeomsPass:De,GLTexture2D:HC,GLTransparentGeomsPass:Oe,GLViewport:Ni,GeomItem:kI,GeomLibrary:OI,GeometryParameter:hg,Grid:Pg,GridTreeItem:ZC,GrowingPacker:S,HDRImage:BI,IGeomShaderBinding:xC,ImageParameter:OA,IndexEvent:p,InstanceItem:MI,IntersectionData:H,ItemEvent:ng,ItemSetParameter:dg,KeyboardEvent:J,KinematicGroup:tC,LDRImage:tI,LDRVideo:oI,Label:SI,LabelManager:VI,LatLongEnvProjectionShader:class extends be{constructor(A){super(A),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'envmap-equirect.glsl'\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\n\nuniform color envMap;\nuniform sampler2D envMapTex;\nuniform int envMapTexType;\n\nuniform float exposure;\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec2 texCoord = latLongUVsFromDir(normalize(v_worldDir));\n  vec4 env = getColorParamValue(envMap, envMapTex, envMapTexType, texCoord);\n  fragColor = vec4(env.rgb/env.a, 1.0);\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb * exposure);\n#endif\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}},Lines:Yg,LinesCuboid:_g,LinesMaterial:KI,LinesProxy:Jg,LinesShader:Ve,ListParameter:$A,Mat3:d,Mat3OperatorInput:class extends tg{},Mat3OperatorOutput:class extends gg{},Mat3Parameter:TA,Mat4:h,Mat4OperatorInput:class extends tg{},Mat4OperatorOutput:ig,Mat4Parameter:_A,Material:XI,MaterialColorParam:Qg,MaterialFloatParam:mg,MaterialGroup:BC,MaterialLibrary:jI,MaterialParameter:rg,MathFunctions:r,Mesh:Kg,MeshProxy:Dg,MultiChoiceParameter:DA,NameChangedEvent:sA,NormalsShader:class extends DC{constructor(A){super(A,"NormalsShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\ninstancedattribute vec3 positions;\ninstancedattribute vec3 normals;\nattribute vec2 vertexIDs;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\nuniform float normalLength;\n\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying float v_weight;\n\nvoid main(void) {\n  mat4 modelMatrix = getModelMatrix(geomItemId);\n  mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;\n  if (vertexIDs.x == 0.0) {\n    gl_Position = modelViewProjectionMatrix * vec4(positions, 1.0);\n    v_weight = 1.0;\n  }\n  else {\n    gl_Position = modelViewProjectionMatrix * vec4(positions+(normals*normalLength), 1.0);\n    v_weight = 0.0;\n  }\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nuniform color normalColor;\n\n/* VS Outputs */\nvarying float v_weight;\n\nvoid main(void) {\n  gl_FragColor = normalColor;\n  gl_FragColor.a = v_weight;\n}\n")}},NumberOperatorInput:class extends tg{},NumberOperatorOutput:class extends gg{},NumberParameter:JA,ObjAsset:class extends $I{constructor(A){super(A),this.splitObjects=new fA("splitObjects",!1),this.splitGroupsIntoObjects=new fA("splitGroupsIntoObjects",!1),this.loadMtlFile=new fA("loadMtlFile",!0),this.unitsConversion=new JA("unitsConversion",1),this.defaultShader=new jA("defaultShader",""),this.splitObjectsParam=new fA("splitObjects",!1),this.splitGroupsIntoObjectsParam=new fA("splitGroupsIntoObjects",!1),this.loadMtlFileParam=new fA("loadMtlFile",!0),this.unitsConversionParam=new JA("unitsConversion",1),this.defaultShaderParam=new jA("defaultShader",""),this.addParameter(this.splitObjectsParam),this.addParameter(this.splitGroupsIntoObjectsParam),this.addParameter(this.loadMtlFileParam),this.addParameter(this.unitsConversionParam),this.addParameter(this.defaultShaderParam)}load(A){return this.loaded=!1,new Promise(((g,I)=>{const C=A.substring(0,A.lastIndexOf("/"))+"/",i=A=>{const g=A.split("\n"),I=/\s+/;let i;const e=function(A){if(3==A.length)return new l(parseFloat(A[0]),parseFloat(A[1]),parseFloat(A[2]));throw new Error("Unable to parse a color from the following parts:"+A.join("_"))},t=(A,g)=>{const I=new eI(A);return I.load(C+g),I};for(let A=0;A<g.length;A++){let C=g[A].trim();if(C.startsWith("#"))continue;C.includes("#")&&(C=C.substring(0,C.indexOf("#")).trim());const B=C.split(I),o=B.shift(),s=B.join(" ");switch(o){case"newmtl":i=new XI(s),i.setShaderName("StandardSurfaceShader"),this.materialLibrary.addMaterial(i);break;case"Kd":{const A=i.getParameter("BaseColor");A.value=e(B),A instanceof Qg&&(A.colorSpace,pA.Linear);break}case"map_Kd":{const A=i.getParameter("BaseColor");A instanceof Qg&&A.setImage(t("map_Kd",B[0]));break}case"Ks":const A=(parseFloat(B[0])+parseFloat(B[1])+parseFloat(B[2]))/3;i.getParameter("Roughness").value=1-A,i.getParameter("Reflectance").value=A;break;case"map_Ks":const g=i.getParameter("Roughness");g instanceof mg&&g.setImage(t("map_Ks",B[0])),i.getParameter("Reflectance").value=.2;break;case"d":const I=parseFloat(s);I<1&&(i.setShaderName("TransparentSurfaceShader"),i.getParameter("Opacity").value=I);break;case"map_d":i.getParameter("alpha").value=parseFloat(B[0]);break;case"map_bump":const C=i.getParameter("Normal");C instanceof Qg&&C.setImage(t("normal",B[0]))}}},e=A=>new Promise((g=>{rA(A,(A=>{FA.incrementWorkDone(1),i(A),FA.incrementWorkDone(1),g()}))})),t=[],s=[],a=[],n={},d=A=>mA(this,void 0,void 0,(function*(){const g=A.split("\n"),I=/\s+/;let i,B,o=0;const l=A=>{if(A in n){let g=1;for(;A+String(g)in n;)g++;A+=String(g)}i={verticesRemapping:{},texCoordsRemapping:{},normalsRemapping:{},vertexIndices:[],texCoordIndices:[],normalIndices:[],numVertices:0,numTexCoords:0,numNormals:0,faceCounts:[],material:B},n[A]=i,o++};l("geom");const d=this.splitGroupsIntoObjectsParam.value;for(let A=0;A<g.length;A++){let h=g[A].trim();if(h.startsWith("#"))continue;h.includes("#")&&(h=h.substring(0,h.indexOf("#")).trim());const c=h.split(I),r=c.shift(),G=c.join(" ");switch(r){case"":case"s":continue;case"mtllib":if(!this.loadMtlFileParam.value)continue;FA.incrementWorkload(2);const A=C+G;A&&(yield e(A));break;case"o":l(G);break;case"usemtl":B=G,l(G+Object.keys(n).length);break;case"g":d&&l(G?c.join("_"):"Group"+o);break;case"v":t.push(c.map((A=>parseFloat(A))));break;case"vt":a.push(c.map((A=>parseFloat(A))));break;case"vn":s.push(c.map((A=>parseFloat(A))));break;case"f":{const A=[],g=[],I=[];for(let C=0,e=c.length;C<e;C++){const e=c[C].split("/").map((A=>parseInt(A)-1)),t=e[0];let B=i.verticesRemapping[t];if(null==B&&(B=i.numVertices,i.verticesRemapping[t]=B,i.numVertices++),A.push(B),e.length>1&&!isNaN(e[1])){const A=e[1];g.push(A)}if(e.length>2&&!isNaN(e[2])){const A=e[2];I.push(A)}}i.vertexIndices.push(A),I.length>0&&i.normalIndices.push(I),g.length>0&&i.texCoordIndices.push(g),null==i.faceCounts[A.length-3]&&(i.faceCounts[A.length-3]=[]),i.faceCounts[A.length-3]++;break}default:console.warn("Unhandled line:"+h)}}})),h=()=>{for(const A in n)0!=n[A].numVertices&&c(A,n[A]);this.emit("loaded"),this.getGeometryLibrary().emit("loaded"),this.emit("geomsLoaded"),g()},c=(A,g)=>{for(let A=0;A<g.faceCounts.length;A++)null==g.faceCounts[A]&&(g.faceCounts[A]=0);const I=g.numVertices,C=new Kg;C.setDebugName(A),C.setFaceCounts(g.faceCounts),C.setNumVertices(I);const i=C.getVertexAttribute("positions"),e=this.unitsConversionParam.value;for(const A in g.verticesRemapping){const I=Number.parseInt(A),C=g.verticesRemapping[I];i.getValueRef(C).set(t[I][0]*e,t[I][1]*e,t[I][2]*e)}let l,n;g.normalIndices.length>0&&(l=new Zg,C.addVertexAttribute("normals",l)),g.texCoordIndices.length>0&&(n=new yg,C.addVertexAttribute("texCoords",n));const d=Array(g.faceCounts.length).fill(0);for(let A=0;A<g.vertexIndices.length;A++){const I=g.vertexIndices[A];let i=0;for(let A=0;A<I.length-3;++A)g.faceCounts[A]&&(i+=g.faceCounts[A]);if(i+=d[I.length-3],d[I.length-3]++,C.setFaceVertexIndices(i,I),l){const I=g.normalIndices[A];for(let A=0;A<I.length;A++){const g=new o(s[I[A]][0],s[I[A]][1],s[I[A]][2]);l.setFaceVertexValue(i,A,g)}}if(n&&g.texCoordIndices.length==g.vertexIndices.length){const I=g.texCoordIndices[A];for(let A=0;A<I.length;A++){const g=new B(a[I[A]][0],a[I[A]][1]);n.setFaceVertexValue(i,A,g)}}}const h=new kI(A,C),c=C.getBoundingBox().center();{const A=c.negate(),g=C.getVertexAttribute("positions");for(let I=0;I<g.getCount();I++)g.getValueRef(I).addInPlace(A);C.setBoundingBoxDirty()}if(h.localXfoParam.value=new m(c),null!=g.material&&this.materialLibrary.hasMaterial(g.material))h.materialParam.value=this.materialLibrary.getMaterial(g.material);else{const g=this.defaultShaderParam.value,I=new XI(A+" mat");I.setShaderName(""!=g?g:"StandardSurfaceShader"),this.materialLibrary.addMaterial(I),h.materialParam.value=I}this.addChild(h,!1)};(()=>{FA.incrementWorkload(2),rA(A,(A=>{FA.incrementWorkDone(1),d(A).then((()=>{h(),FA.incrementWorkDone(1)}))}),(A=>{this.emit("error",A),I(A)}))})()}))}},OctahedralEnvProjectionShader:class extends be{constructor(A){super(A),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'envmap-octahedral.glsl'\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\n\nuniform color envMap;\nuniform sampler2D envMapTex;\nuniform int envMapTexType;\n\nuniform float exposure;\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec2 texCoord = dirToSphOctUv(normalize(v_worldDir));\n  vec4 env = getColorParamValue(envMap, envMapTex, envMapTexType, texCoord);\n\n  fragColor = vec4(env.rgb/env.a, 1.0);\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb * exposure);\n#endif\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}},OpacityStateChangedEvent:_,Operator:eg,OperatorInput:tg,OperatorOutput:gg,get OperatorOutputMode(){return KA},PMIItem:GC,PMIView:mC,POINTER_TYPES:q,Parameter:NA,ParameterAddedEvent:D,ParameterOwner:nA,ParameterRemovedEvent:f,PassType:EC,Plane:AI,PlaneType:Z,PointGrid:kg,Points:Wg,PointsMaterial:pI,PointsProxy:Ng,PointsShader:Se,ProceduralLines:Ug,ProceduralMesh:vg,ProceduralPoints:Lg,Quat:c,QuatOperatorInput:class extends tg{},QuatOperatorOutput:class extends gg{},QuatParameter:zA,RGBA:a,RangeLoadedEvent:M,Ray:G,Rect:xg,RefCounted:lA,Registry:e,ResizedEvent:F,ResourceLoader:VA,SInt16:3,SInt32:5,SInt8:1,Scene:uC,SceneSetEvent:L,ScreenQuadShader:Xi,ScreenSpaceMaterial:NI,ScreenSpaceShader:Ne,SelectabilityChangedEvent:U,SelectedEvent:v,SelectionSet:zI,ShaderLibrary:pC,ShaderNameChangedEvent:k,SimpleSurfaceMaterial:JI,SimpleSurfaceShader:We,Sphere:gI,SphereType:E,StandardSurfaceMaterial:DI,StandardSurfaceShader:Ke,StateChangedEvent:x,StreamFileParsedEvent:z,StringFunctions:t,StringListParameter:qA,StringParameter:jA,StructParameter:Ag,SystemDesc:g,TexturedChangedEvent:T,Torus:II,Touch:eA,TreeItem:ag,TreeItemParameter:lg,UInt16:2,UInt32:4,UInt8:0,UnpackHDRShader:vC,VLAAsset:RC,VRController:class extends Di{},VRViewport:class extends Mi{},Vec2:B,Vec2Attribute:yg,Vec2OperatorInput:class extends tg{},Vec2OperatorOutput:class extends gg{},Vec2Parameter:MA,Vec3:o,Vec3Attribute:Zg,Vec3OperatorInput:class extends tg{},Vec3OperatorOutput:class extends gg{},Vec3Parameter:LA,Vec4:s,Vec4Attribute:Xg,Vec4OperatorInput:class extends tg{},Vec4OperatorOutput:Ig,Vec4Parameter:UA,Version:WA,VideoStreamImage2D:wI,ViewChangedEvent:P,VisibilityChangedEvent:O,XRController:Di,XRControllerEvent:gA,XRHead:Ji,XRPoseEvent:IA,XRViewChangedEvent:j,XRViewManipulator:fi,XRViewport:Mi,XRef:QC,Xfo:m,XfoOperatorInput:Bg,XfoOperatorOutput:Cg,XfoParameter:PA,XrViewportEvent:CA,ZeaMouseEvent:iA,ZeaPointerEvent:AA,ZeaTouchEvent:tA,ZeaUIEvent:N,ZeaWheelEvent:BA,checkFramebuffer:MC,create3DContext:wC,genDataTypeDesc:kC,generateShaderGeomBinding:_C,getFileFolder:function(A){return A.substring(0,A.lastIndexOf("/"))+"/"},labelManager:FI,libsRegistry:gt,loadBinfile:GA,loadJSONfile:function(A,g,I,C){cA(A,"json",(A=>{g(A.response,A)}),(g=>{if(null==I)throw new Error("Unable to XHR File:"+A);I(g)}),C)},loadTextfile:rA,loadXMLfile:function(A,g,I,C){cA(A,"document",(A=>{g(A.responseXML)}),(g=>{if(null==I)throw new Error("Unable to XHR File:"+A);I(g)}),C)},resourceLoader:FA,shaderLibrary:NC}),Ct="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function it(A,g,I){return A(I={path:g,exports:{},require:function(A,g){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==g&&I.path)}},I.exports),I.exports}function et(A){if(A.__esModule)return A;var g=Object.defineProperty({},"__esModule",{value:!0});return Object.keys(A).forEach((function(I){var C=Object.getOwnPropertyDescriptor(A,I);Object.defineProperty(g,I,C.get?C:{enumerable:!0,get:function(){return A[I]}})})),g}var tt=it((function(A){!function(g){var I={bytesToHex:function(A){return function(A){return A.map((function(A){return g=A.toString(16),I=2,g.length>I?g:Array(I-g.length+1).join("0")+g;var g,I})).join("")}(A)},hexToBytes:function(A){if(A.length%2==1)throw new Error("hexToBytes can't have a string with an odd number of characters.");return 0===A.indexOf("0x")&&(A=A.slice(2)),A.match(/../g).map((function(A){return parseInt(A,16)}))}};A.exports?A.exports=I:g.convertHex=I}(Ct)})),Bt=it((function(A){!function(g){var I={bytesToString:function(A){return A.map((function(A){return String.fromCharCode(A)})).join("")},stringToBytes:function(A){return A.split("").map((function(A){return A.charCodeAt(0)}))}};I.UTF8={bytesToString:function(A){return decodeURIComponent(escape(I.bytesToString(A)))},stringToBytes:function(A){return I.stringToBytes(unescape(encodeURIComponent(A)))}},A.exports?A.exports=I:g.convertString=I}(Ct)}));it((function(A){!function(g){var I={};A.exports?(I.bytesToHex=tt.bytesToHex,I.convertString=Bt,A.exports=t):(I.bytesToHex=g.convertHex.bytesToHex,I.convertString=g.convertString,g.sha256=t);var C=[];!function(){function A(A){for(var g=Math.sqrt(A),I=2;I<=g;I++)if(!(A%I))return!1;return!0}function g(A){return 4294967296*(A-(0|A))|0}for(var I=2,i=0;i<64;)A(I)&&(C[i]=g(Math.pow(I,1/3)),i++),I++}();var i=[],e=function(A,g,I){for(var e=A[0],t=A[1],B=A[2],o=A[3],s=A[4],a=A[5],l=A[6],n=A[7],d=0;d<64;d++){if(d<16)i[d]=0|g[I+d];else{var h=i[d-15],c=(h<<25|h>>>7)^(h<<14|h>>>18)^h>>>3,r=i[d-2],G=(r<<15|r>>>17)^(r<<13|r>>>19)^r>>>10;i[d]=c+i[d-7]+G+i[d-16]}var m=e&t^e&B^t&B,Q=(e<<30|e>>>2)^(e<<19|e>>>13)^(e<<10|e>>>22),E=n+((s<<26|s>>>6)^(s<<21|s>>>11)^(s<<7|s>>>25))+(s&a^~s&l)+C[d]+i[d];n=l,l=a,a=s,s=o+E|0,o=B,B=t,t=e,e=E+(Q+m)|0}A[0]=A[0]+e|0,A[1]=A[1]+t|0,A[2]=A[2]+B|0,A[3]=A[3]+o|0,A[4]=A[4]+s|0,A[5]=A[5]+a|0,A[6]=A[6]+l|0,A[7]=A[7]+n|0};function t(A,g){A.constructor===String&&(A=I.convertString.UTF8.stringToBytes(A));var C=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],i=function(A){for(var g=[],I=0,C=0;I<A.length;I++,C+=8)g[C>>>5]|=A[I]<<24-C%32;return g}(A),t=8*A.length;i[t>>5]|=128<<24-t%32,i[15+(t+64>>9<<4)]=t;for(var B=0;B<i.length;B+=16)e(C,i,B);var o=function(A){for(var g=[],I=0;I<32*A.length;I+=8)g.push(A[I>>>5]>>>24-I%32&255);return g}(C);return g&&g.asBytes?o:g&&g.asString?I.convertString.bytesToString(o):I.bytesToHex(o)}t.x2=function(A,g){return t(t(A,{asBytes:!0}),g)}}(Ct)}));export{AC as A,fA as B,lC as C,V as E,kI as G,MI as I,Jg as L,Dg as M,JA as N,GC as P,c as Q,jA as S,ag as T,o as V,m as X,Ct as a,nC as b,it as c,dC as d,Mg as e,SC as f,et as g,l as h,It as i,xA as j,aC as k,XI as l,ZC as m,b as n,re as o,uC as p,g as q,RI as r,FA as s};
//# sourceMappingURL=sha256-806d8515.js.map
