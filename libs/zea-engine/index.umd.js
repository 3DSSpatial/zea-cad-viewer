!function(F,U){"object"==typeof exports&&"undefined"!=typeof module?U(exports):"function"==typeof define&&define.amd?define(["exports"],U):U((F="undefined"!=typeof globalThis?globalThis:F||self).zeaEngine={})}(this,(function(F){"use strict";var U={name:"@zeainc/zea-engine",fileName:"index",libraryName:"ZeaEngine",version:"3.12.0",description:"Zea Engine",browser:"dist/index.umd.js",plugins:"dist/plugins.umd.js",main:"dist/index.cjs.js",module:"dist/index.esm.js",author:"Zea Inc.",license:"AGPL-3.0",files:["dist/"],scripts:{build:"rollup -c","build:watch":"rollup -w -c",dev:"npm-run-all --parallel build:watch start:watch",prepare:"yarn run build",dist:"yarn publish --access=public",docs:"cp CHANGELOG.md docs/ && adg --config adg.config.json",docs_win:"copy CHANGELOG.md docs\\ && adg --config adg.config.json","docs-w":"cp CHANGELOG.md docs/ && adg -w --config=adg.config.json","docs:serve":"docsify serve docs/",generate:"plop",release:"standard-version",start:"http-server --cors --port 8000 --silent","start:watch":"es-dev-server --cors --app-index testing-e2e/index.html --open --watch",test:"jest","test:coverage":"jest --coverage","test:debug":"node --inspect ./node_modules/jest/bin/jest.js --runInBand --watch","test:watch":"jest --watch","test:e2e":"percy exec cypress run --browser chrome --headless","test:e2e:watch":"percy exec cypress open","to-cleanup":"rm -Rf dist/ node_modules/ yarn.lock"},dependencies:{debug:"^4.1.1","rollup-plugin-base64":"^1.0.1",semver:"^7.3.5"},devDependencies:{"@babel/preset-env":"^7.11.5","@percy/cypress":"^2.3.1","@rollup/plugin-commonjs":"^15.1.0","@rollup/plugin-json":"^4.1.0","@rollup/plugin-node-resolve":"^9.0.0","@zeainc/jsdocs2md":"^0.0.8",cypress:"^5.1.0","docsify-cli":"^4.4.1","es-dev-server":"^1.57.8",eslint:"^7.8.1","eslint-config-google":"^0.14.0","eslint-config-prettier":"^6.3.0","eslint-plugin-prettier":"^3.1.1","http-server":"^0.12.3",husky:"^4.3.0","ink-docstrap":"^1.3.2",jest:"^27.0.6","jest-coverage-badges":"^1.1.2","npm-run-all":"^4.1.5",plop:"^2.7.4",prettier:"^2.1.1",rollup:"^2.32.1","rollup-plugin-glslify":"^1.2.0","rollup-plugin-node-polyfills":"^0.2.1","rollup-plugin-svg":"^2.0.0","rollup-plugin-terser":"^7.0.2","rollup-plugin-web-worker-loader":"^1.3.0","standard-version":"^9.0.0"},husky:{hooks:{"pre-commit":"npm test","pre-push":"npm test"}}},Q="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{};function B(){throw new Error("setTimeout has not been defined")}function l(){throw new Error("clearTimeout has not been defined")}var V=B,d=l;function R(F){if(V===setTimeout)return setTimeout(F,0);if((V===B||!V)&&setTimeout)return V=setTimeout,setTimeout(F,0);try{return V(F,0)}catch(U){try{return V.call(null,F,0)}catch(U){return V.call(this,F,0)}}}"function"==typeof Q.setTimeout&&(V=setTimeout),"function"==typeof Q.clearTimeout&&(d=clearTimeout);var t,s=[],i=!1,e=-1;function I(){i&&t&&(i=!1,t.length?s=t.concat(s):e=-1,s.length&&Z())}function Z(){if(!i){var F=R(I);i=!0;for(var U=s.length;U;){for(t=s,s=[];++e<U;)t&&t[e].run();e=-1,U=s.length}t=null,i=!1,function(F){if(d===clearTimeout)return clearTimeout(F);if((d===l||!d)&&clearTimeout)return d=clearTimeout,clearTimeout(F);try{d(F)}catch(U){try{return d.call(null,F)}catch(U){return d.call(this,F)}}}(F)}}function c(F,U){this.fun=F,this.array=U}c.prototype.run=function(){this.fun.apply(null,this.array)};function n(){}var a=n,S=n,g=n,G=n,C=n,h=n,W=n;var m=Q.performance||{},J=m.now||m.mozNow||m.msNow||m.oNow||m.webkitNow||function(){return(new Date).getTime()};var X=new Date;var E={nextTick:function(F){var U=new Array(arguments.length-1);if(arguments.length>1)for(var Q=1;Q<arguments.length;Q++)U[Q-1]=arguments[Q];s.push(new c(F,U)),1!==s.length||i||R(Z)},title:"browser",browser:!0,env:{},argv:[],version:"",versions:{},on:a,addListener:S,once:g,off:G,removeListener:C,removeAllListeners:h,emit:W,binding:function(F){throw new Error("process.binding is not supported")},cwd:function(){return"/"},chdir:function(F){throw new Error("process.chdir is not supported")},umask:function(){return 0},hrtime:function(F){var U=.001*J.call(m),Q=Math.floor(U),B=Math.floor(U%1*1e9);return F&&(Q-=F[0],(B-=F[1])<0&&(Q--,B+=1e9)),[Q,B]},platform:"browser",release:{},config:{},uptime:function(){return(new Date-X)/1e3}};function L(F,U,Q){return F(Q={path:U,exports:{},require:function(F,U){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==U&&Q.path)}},Q.exports),Q.exports}var x=1e3,o=60*x,y=60*o,u=24*y,N=7*u,r=365.25*u,p=function(F,U){U=U||{};var Q=typeof F;if("string"===Q&&F.length>0)return function(F){if((F=String(F)).length>100)return;var U=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(F);if(!U)return;var Q=parseFloat(U[1]);switch((U[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return Q*r;case"weeks":case"week":case"w":return Q*N;case"days":case"day":case"d":return Q*u;case"hours":case"hour":case"hrs":case"hr":case"h":return Q*y;case"minutes":case"minute":case"mins":case"min":case"m":return Q*o;case"seconds":case"second":case"secs":case"sec":case"s":return Q*x;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return Q;default:return}}(F);if("number"===Q&&isFinite(F))return U.long?function(F){var U=Math.abs(F);if(U>=u)return T(F,U,u,"day");if(U>=y)return T(F,U,y,"hour");if(U>=o)return T(F,U,o,"minute");if(U>=x)return T(F,U,x,"second");return F+" ms"}(F):function(F){var U=Math.abs(F);if(U>=u)return Math.round(F/u)+"d";if(U>=y)return Math.round(F/y)+"h";if(U>=o)return Math.round(F/o)+"m";if(U>=x)return Math.round(F/x)+"s";return F+"ms"}(F);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(F))};function T(F,U,Q,B){var l=U>=1.5*Q;return Math.round(F/Q)+" "+B+(l?"s":"")}var Y=function(F){function U(F){let l;function V(...F){if(!V.enabled)return;const Q=V,B=Number(new Date),d=B-(l||B);Q.diff=d,Q.prev=l,Q.curr=B,l=B,F[0]=U.coerce(F[0]),"string"!=typeof F[0]&&F.unshift("%O");let R=0;F[0]=F[0].replace(/%([a-zA-Z%])/g,((B,l)=>{if("%%"===B)return B;R++;const V=U.formatters[l];if("function"==typeof V){const U=F[R];B=V.call(Q,U),F.splice(R,1),R--}return B})),U.formatArgs.call(Q,F);(Q.log||U.log).apply(Q,F)}return V.namespace=F,V.enabled=U.enabled(F),V.useColors=U.useColors(),V.color=U.selectColor(F),V.destroy=Q,V.extend=B,"function"==typeof U.init&&U.init(V),U.instances.push(V),V}function Q(){const F=U.instances.indexOf(this);return-1!==F&&(U.instances.splice(F,1),!0)}function B(F,Q){const B=U(this.namespace+(void 0===Q?":":Q)+F);return B.log=this.log,B}function l(F){return F.toString().substring(2,F.toString().length-2).replace(/\.\*\?$/,"*")}return U.debug=U,U.default=U,U.coerce=function(F){if(F instanceof Error)return F.stack||F.message;return F},U.disable=function(){const F=[...U.names.map(l),...U.skips.map(l).map((F=>"-"+F))].join(",");return U.enable(""),F},U.enable=function(F){let Q;U.save(F),U.names=[],U.skips=[];const B=("string"==typeof F?F:"").split(/[\s,]+/),l=B.length;for(Q=0;Q<l;Q++)B[Q]&&("-"===(F=B[Q].replace(/\*/g,".*?"))[0]?U.skips.push(new RegExp("^"+F.substr(1)+"$")):U.names.push(new RegExp("^"+F+"$")));for(Q=0;Q<U.instances.length;Q++){const F=U.instances[Q];F.enabled=U.enabled(F.namespace)}},U.enabled=function(F){if("*"===F[F.length-1])return!0;let Q,B;for(Q=0,B=U.skips.length;Q<B;Q++)if(U.skips[Q].test(F))return!1;for(Q=0,B=U.names.length;Q<B;Q++)if(U.names[Q].test(F))return!0;return!1},U.humanize=p,Object.keys(F).forEach((Q=>{U[Q]=F[Q]})),U.instances=[],U.names=[],U.skips=[],U.formatters={},U.selectColor=function(F){let Q=0;for(let U=0;U<F.length;U++)Q=(Q<<5)-Q+F.charCodeAt(U),Q|=0;return U.colors[Math.abs(Q)%U.colors.length]},U.enable(U.load()),U};const k=L((function(F,U){U.formatArgs=function(U){if(U[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+U[0]+(this.useColors?"%c ":" ")+"+"+F.exports.humanize(this.diff),!this.useColors)return;const Q="color: "+this.color;U.splice(1,0,Q,"color: inherit");let B=0,l=0;U[0].replace(/%[a-zA-Z%]/g,(F=>{"%%"!==F&&(B++,"%c"===F&&(l=B))})),U.splice(l,0,Q)},U.save=function(F){try{F?U.storage.setItem("debug",F):U.storage.removeItem("debug")}catch(F){}},U.load=function(){let F;try{F=U.storage.getItem("debug")}catch(F){}!F&&void 0!==E&&"env"in E&&(F=E.env.DEBUG);return F},U.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},U.storage=function(){try{return localStorage}catch(F){}}(),U.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],U.log=console.debug||console.log||(()=>{}),F.exports=Y(U);const{formatters:Q}=F.exports;Q.j=function(F){try{return JSON.stringify(F)}catch(F){return"[UnexpectedJSONParseError]: "+F.message}}}))("zea:engine");var H={SEMVER_SPEC_VERSION:"2.0.0",MAX_LENGTH:256,MAX_SAFE_INTEGER:Number.MAX_SAFE_INTEGER||9007199254740991,MAX_SAFE_COMPONENT_LENGTH:16};var M="object"==typeof E&&E.env&&E.env.NODE_DEBUG&&/\bsemver\b/i.test(E.env.NODE_DEBUG)?(...F)=>console.error("SEMVER",...F):()=>{},A=L((function(F,U){const{MAX_SAFE_COMPONENT_LENGTH:Q}=H,B=(U=F.exports={}).re=[],l=U.src=[],V=U.t={};let d=0;const R=(F,U,Q)=>{const R=d++;M(R,U),V[F]=R,l[R]=U,B[R]=new RegExp(U,Q?"g":void 0)};R("NUMERICIDENTIFIER","0|[1-9]\\d*"),R("NUMERICIDENTIFIERLOOSE","[0-9]+"),R("NONNUMERICIDENTIFIER","\\d*[a-zA-Z-][a-zA-Z0-9-]*"),R("MAINVERSION",`(${l[V.NUMERICIDENTIFIER]})\\.(${l[V.NUMERICIDENTIFIER]})\\.(${l[V.NUMERICIDENTIFIER]})`),R("MAINVERSIONLOOSE",`(${l[V.NUMERICIDENTIFIERLOOSE]})\\.(${l[V.NUMERICIDENTIFIERLOOSE]})\\.(${l[V.NUMERICIDENTIFIERLOOSE]})`),R("PRERELEASEIDENTIFIER",`(?:${l[V.NUMERICIDENTIFIER]}|${l[V.NONNUMERICIDENTIFIER]})`),R("PRERELEASEIDENTIFIERLOOSE",`(?:${l[V.NUMERICIDENTIFIERLOOSE]}|${l[V.NONNUMERICIDENTIFIER]})`),R("PRERELEASE",`(?:-(${l[V.PRERELEASEIDENTIFIER]}(?:\\.${l[V.PRERELEASEIDENTIFIER]})*))`),R("PRERELEASELOOSE",`(?:-?(${l[V.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${l[V.PRERELEASEIDENTIFIERLOOSE]})*))`),R("BUILDIDENTIFIER","[0-9A-Za-z-]+"),R("BUILD",`(?:\\+(${l[V.BUILDIDENTIFIER]}(?:\\.${l[V.BUILDIDENTIFIER]})*))`),R("FULLPLAIN",`v?${l[V.MAINVERSION]}${l[V.PRERELEASE]}?${l[V.BUILD]}?`),R("FULL",`^${l[V.FULLPLAIN]}$`),R("LOOSEPLAIN",`[v=\\s]*${l[V.MAINVERSIONLOOSE]}${l[V.PRERELEASELOOSE]}?${l[V.BUILD]}?`),R("LOOSE",`^${l[V.LOOSEPLAIN]}$`),R("GTLT","((?:<|>)?=?)"),R("XRANGEIDENTIFIERLOOSE",l[V.NUMERICIDENTIFIERLOOSE]+"|x|X|\\*"),R("XRANGEIDENTIFIER",l[V.NUMERICIDENTIFIER]+"|x|X|\\*"),R("XRANGEPLAIN",`[v=\\s]*(${l[V.XRANGEIDENTIFIER]})(?:\\.(${l[V.XRANGEIDENTIFIER]})(?:\\.(${l[V.XRANGEIDENTIFIER]})(?:${l[V.PRERELEASE]})?${l[V.BUILD]}?)?)?`),R("XRANGEPLAINLOOSE",`[v=\\s]*(${l[V.XRANGEIDENTIFIERLOOSE]})(?:\\.(${l[V.XRANGEIDENTIFIERLOOSE]})(?:\\.(${l[V.XRANGEIDENTIFIERLOOSE]})(?:${l[V.PRERELEASELOOSE]})?${l[V.BUILD]}?)?)?`),R("XRANGE",`^${l[V.GTLT]}\\s*${l[V.XRANGEPLAIN]}$`),R("XRANGELOOSE",`^${l[V.GTLT]}\\s*${l[V.XRANGEPLAINLOOSE]}$`),R("COERCE",`(^|[^\\d])(\\d{1,${Q}})(?:\\.(\\d{1,${Q}}))?(?:\\.(\\d{1,${Q}}))?(?:$|[^\\d])`),R("COERCERTL",l[V.COERCE],!0),R("LONETILDE","(?:~>?)"),R("TILDETRIM",`(\\s*)${l[V.LONETILDE]}\\s+`,!0),U.tildeTrimReplace="$1~",R("TILDE",`^${l[V.LONETILDE]}${l[V.XRANGEPLAIN]}$`),R("TILDELOOSE",`^${l[V.LONETILDE]}${l[V.XRANGEPLAINLOOSE]}$`),R("LONECARET","(?:\\^)"),R("CARETTRIM",`(\\s*)${l[V.LONECARET]}\\s+`,!0),U.caretTrimReplace="$1^",R("CARET",`^${l[V.LONECARET]}${l[V.XRANGEPLAIN]}$`),R("CARETLOOSE",`^${l[V.LONECARET]}${l[V.XRANGEPLAINLOOSE]}$`),R("COMPARATORLOOSE",`^${l[V.GTLT]}\\s*(${l[V.LOOSEPLAIN]})$|^$`),R("COMPARATOR",`^${l[V.GTLT]}\\s*(${l[V.FULLPLAIN]})$|^$`),R("COMPARATORTRIM",`(\\s*)${l[V.GTLT]}\\s*(${l[V.LOOSEPLAIN]}|${l[V.XRANGEPLAIN]})`,!0),U.comparatorTrimReplace="$1$2$3",R("HYPHENRANGE",`^\\s*(${l[V.XRANGEPLAIN]})\\s+-\\s+(${l[V.XRANGEPLAIN]})\\s*$`),R("HYPHENRANGELOOSE",`^\\s*(${l[V.XRANGEPLAINLOOSE]})\\s+-\\s+(${l[V.XRANGEPLAINLOOSE]})\\s*$`),R("STAR","(<|>)?=?\\s*\\*"),R("GTE0","^\\s*>=\\s*0.0.0\\s*$"),R("GTE0PRE","^\\s*>=\\s*0.0.0-0\\s*$")}));const v=["includePrerelease","loose","rtl"];var z=F=>F?"object"!=typeof F?{loose:!0}:v.filter((U=>F[U])).reduce(((F,U)=>(F[U]=!0,F)),{}):{};const D=/^[0-9]+$/,K=(F,U)=>{const Q=D.test(F),B=D.test(U);return Q&&B&&(F=+F,U=+U),F===U?0:Q&&!B?-1:B&&!Q?1:F<U?-1:1};var w={compareIdentifiers:K,rcompareIdentifiers:(F,U)=>K(U,F)};const{MAX_LENGTH:f,MAX_SAFE_INTEGER:P}=H,{re:j,t:_}=A,{compareIdentifiers:O}=w;class q{constructor(F,U){if(U=z(U),F instanceof q){if(F.loose===!!U.loose&&F.includePrerelease===!!U.includePrerelease)return F;F=F.version}else if("string"!=typeof F)throw new TypeError("Invalid Version: "+F);if(F.length>f)throw new TypeError(`version is longer than ${f} characters`);M("SemVer",F,U),this.options=U,this.loose=!!U.loose,this.includePrerelease=!!U.includePrerelease;const Q=F.trim().match(U.loose?j[_.LOOSE]:j[_.FULL]);if(!Q)throw new TypeError("Invalid Version: "+F);if(this.raw=F,this.major=+Q[1],this.minor=+Q[2],this.patch=+Q[3],this.major>P||this.major<0)throw new TypeError("Invalid major version");if(this.minor>P||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>P||this.patch<0)throw new TypeError("Invalid patch version");Q[4]?this.prerelease=Q[4].split(".").map((F=>{if(/^[0-9]+$/.test(F)){const U=+F;if(U>=0&&U<P)return U}return F})):this.prerelease=[],this.build=Q[5]?Q[5].split("."):[],this.format()}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+="-"+this.prerelease.join(".")),this.version}toString(){return this.version}compare(F){if(M("SemVer.compare",this.version,this.options,F),!(F instanceof q)){if("string"==typeof F&&F===this.version)return 0;F=new q(F,this.options)}return F.version===this.version?0:this.compareMain(F)||this.comparePre(F)}compareMain(F){return F instanceof q||(F=new q(F,this.options)),O(this.major,F.major)||O(this.minor,F.minor)||O(this.patch,F.patch)}comparePre(F){if(F instanceof q||(F=new q(F,this.options)),this.prerelease.length&&!F.prerelease.length)return-1;if(!this.prerelease.length&&F.prerelease.length)return 1;if(!this.prerelease.length&&!F.prerelease.length)return 0;let U=0;do{const Q=this.prerelease[U],B=F.prerelease[U];if(M("prerelease compare",U,Q,B),void 0===Q&&void 0===B)return 0;if(void 0===B)return 1;if(void 0===Q)return-1;if(Q!==B)return O(Q,B)}while(++U)}compareBuild(F){F instanceof q||(F=new q(F,this.options));let U=0;do{const Q=this.build[U],B=F.build[U];if(M("prerelease compare",U,Q,B),void 0===Q&&void 0===B)return 0;if(void 0===B)return 1;if(void 0===Q)return-1;if(Q!==B)return O(Q,B)}while(++U)}inc(F,U){switch(F){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",U);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",U);break;case"prepatch":this.prerelease.length=0,this.inc("patch",U),this.inc("pre",U);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",U),this.inc("pre",U);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":if(0===this.prerelease.length)this.prerelease=[0];else{let F=this.prerelease.length;for(;--F>=0;)"number"==typeof this.prerelease[F]&&(this.prerelease[F]++,F=-2);-1===F&&this.prerelease.push(0)}U&&(this.prerelease[0]===U?isNaN(this.prerelease[1])&&(this.prerelease=[U,0]):this.prerelease=[U,0]);break;default:throw new Error("invalid increment argument: "+F)}return this.format(),this.raw=this.version,this}}var $=q;const{MAX_LENGTH:FF}=H,{re:UF,t:QF}=A;var BF=(F,U)=>{if(U=z(U),F instanceof $)return F;if("string"!=typeof F)return null;if(F.length>FF)return null;if(!(U.loose?UF[QF.LOOSE]:UF[QF.FULL]).test(F))return null;try{return new $(F,U)}catch(F){return null}};var lF=(F,U)=>{const Q=BF(F,U);return Q?Q.version:null};var VF=(F,U)=>{const Q=BF(F.trim().replace(/^[=v]+/,""),U);return Q?Q.version:null};var dF=(F,U,Q,B)=>{"string"==typeof Q&&(B=Q,Q=void 0);try{return new $(F,Q).inc(U,B).version}catch(F){return null}};var RF=(F,U,Q)=>new $(F,Q).compare(new $(U,Q));var tF=(F,U,Q)=>0===RF(F,U,Q);var sF=(F,U)=>{if(tF(F,U))return null;{const Q=BF(F),B=BF(U),l=Q.prerelease.length||B.prerelease.length,V=l?"pre":"",d=l?"prerelease":"";for(const F in Q)if(("major"===F||"minor"===F||"patch"===F)&&Q[F]!==B[F])return V+F;return d}};var iF=(F,U)=>new $(F,U).major;var eF=(F,U)=>new $(F,U).minor;var IF=(F,U)=>new $(F,U).patch;var ZF=(F,U)=>{const Q=BF(F,U);return Q&&Q.prerelease.length?Q.prerelease:null};var cF=(F,U,Q)=>RF(U,F,Q);var nF=(F,U)=>RF(F,U,!0);var aF=(F,U,Q)=>{const B=new $(F,Q),l=new $(U,Q);return B.compare(l)||B.compareBuild(l)};var SF=(F,U)=>F.sort(((F,Q)=>aF(F,Q,U)));var gF=(F,U)=>F.sort(((F,Q)=>aF(Q,F,U)));var bF=(F,U,Q)=>RF(F,U,Q)>0;var GF=(F,U,Q)=>RF(F,U,Q)<0;var CF=(F,U,Q)=>0!==RF(F,U,Q);var hF=(F,U,Q)=>RF(F,U,Q)>=0;var WF=(F,U,Q)=>RF(F,U,Q)<=0;var mF=(F,U,Q,B)=>{switch(U){case"===":return"object"==typeof F&&(F=F.version),"object"==typeof Q&&(Q=Q.version),F===Q;case"!==":return"object"==typeof F&&(F=F.version),"object"==typeof Q&&(Q=Q.version),F!==Q;case"":case"=":case"==":return tF(F,Q,B);case"!=":return CF(F,Q,B);case">":return bF(F,Q,B);case">=":return hF(F,Q,B);case"<":return GF(F,Q,B);case"<=":return WF(F,Q,B);default:throw new TypeError("Invalid operator: "+U)}};const{re:JF,t:XF}=A;var EF=(F,U)=>{if(F instanceof $)return F;if("number"==typeof F&&(F=String(F)),"string"!=typeof F)return null;let Q=null;if((U=U||{}).rtl){let U;for(;(U=JF[XF.COERCERTL].exec(F))&&(!Q||Q.index+Q[0].length!==F.length);)Q&&U.index+U[0].length===Q.index+Q[0].length||(Q=U),JF[XF.COERCERTL].lastIndex=U.index+U[1].length+U[2].length;JF[XF.COERCERTL].lastIndex=-1}else Q=F.match(JF[XF.COERCE]);return null===Q?null:BF(`${Q[2]}.${Q[3]||"0"}.${Q[4]||"0"}`,U)},LF=xF;function xF(F){var U=this;if(U instanceof xF||(U=new xF),U.tail=null,U.head=null,U.length=0,F&&"function"==typeof F.forEach)F.forEach((function(F){U.push(F)}));else if(arguments.length>0)for(var Q=0,B=arguments.length;Q<B;Q++)U.push(arguments[Q]);return U}function oF(F,U,Q){var B=U===F.head?new NF(Q,null,U,F):new NF(Q,U,U.next,F);return null===B.next&&(F.tail=B),null===B.prev&&(F.head=B),F.length++,B}function yF(F,U){F.tail=new NF(U,F.tail,null,F),F.head||(F.head=F.tail),F.length++}function uF(F,U){F.head=new NF(U,null,F.head,F),F.tail||(F.tail=F.head),F.length++}function NF(F,U,Q,B){if(!(this instanceof NF))return new NF(F,U,Q,B);this.list=B,this.value=F,U?(U.next=this,this.prev=U):this.prev=null,Q?(Q.prev=this,this.next=Q):this.next=null}xF.Node=NF,xF.create=xF,xF.prototype.removeNode=function(F){if(F.list!==this)throw new Error("removing node which does not belong to this list");var U=F.next,Q=F.prev;return U&&(U.prev=Q),Q&&(Q.next=U),F===this.head&&(this.head=U),F===this.tail&&(this.tail=Q),F.list.length--,F.next=null,F.prev=null,F.list=null,U},xF.prototype.unshiftNode=function(F){if(F!==this.head){F.list&&F.list.removeNode(F);var U=this.head;F.list=this,F.next=U,U&&(U.prev=F),this.head=F,this.tail||(this.tail=F),this.length++}},xF.prototype.pushNode=function(F){if(F!==this.tail){F.list&&F.list.removeNode(F);var U=this.tail;F.list=this,F.prev=U,U&&(U.next=F),this.tail=F,this.head||(this.head=F),this.length++}},xF.prototype.push=function(){for(var F=0,U=arguments.length;F<U;F++)yF(this,arguments[F]);return this.length},xF.prototype.unshift=function(){for(var F=0,U=arguments.length;F<U;F++)uF(this,arguments[F]);return this.length},xF.prototype.pop=function(){if(this.tail){var F=this.tail.value;return this.tail=this.tail.prev,this.tail?this.tail.next=null:this.head=null,this.length--,F}},xF.prototype.shift=function(){if(this.head){var F=this.head.value;return this.head=this.head.next,this.head?this.head.prev=null:this.tail=null,this.length--,F}},xF.prototype.forEach=function(F,U){U=U||this;for(var Q=this.head,B=0;null!==Q;B++)F.call(U,Q.value,B,this),Q=Q.next},xF.prototype.forEachReverse=function(F,U){U=U||this;for(var Q=this.tail,B=this.length-1;null!==Q;B--)F.call(U,Q.value,B,this),Q=Q.prev},xF.prototype.get=function(F){for(var U=0,Q=this.head;null!==Q&&U<F;U++)Q=Q.next;if(U===F&&null!==Q)return Q.value},xF.prototype.getReverse=function(F){for(var U=0,Q=this.tail;null!==Q&&U<F;U++)Q=Q.prev;if(U===F&&null!==Q)return Q.value},xF.prototype.map=function(F,U){U=U||this;for(var Q=new xF,B=this.head;null!==B;)Q.push(F.call(U,B.value,this)),B=B.next;return Q},xF.prototype.mapReverse=function(F,U){U=U||this;for(var Q=new xF,B=this.tail;null!==B;)Q.push(F.call(U,B.value,this)),B=B.prev;return Q},xF.prototype.reduce=function(F,U){var Q,B=this.head;if(arguments.length>1)Q=U;else{if(!this.head)throw new TypeError("Reduce of empty list with no initial value");B=this.head.next,Q=this.head.value}for(var l=0;null!==B;l++)Q=F(Q,B.value,l),B=B.next;return Q},xF.prototype.reduceReverse=function(F,U){var Q,B=this.tail;if(arguments.length>1)Q=U;else{if(!this.tail)throw new TypeError("Reduce of empty list with no initial value");B=this.tail.prev,Q=this.tail.value}for(var l=this.length-1;null!==B;l--)Q=F(Q,B.value,l),B=B.prev;return Q},xF.prototype.toArray=function(){for(var F=new Array(this.length),U=0,Q=this.head;null!==Q;U++)F[U]=Q.value,Q=Q.next;return F},xF.prototype.toArrayReverse=function(){for(var F=new Array(this.length),U=0,Q=this.tail;null!==Q;U++)F[U]=Q.value,Q=Q.prev;return F},xF.prototype.slice=function(F,U){(U=U||this.length)<0&&(U+=this.length),(F=F||0)<0&&(F+=this.length);var Q=new xF;if(U<F||U<0)return Q;F<0&&(F=0),U>this.length&&(U=this.length);for(var B=0,l=this.head;null!==l&&B<F;B++)l=l.next;for(;null!==l&&B<U;B++,l=l.next)Q.push(l.value);return Q},xF.prototype.sliceReverse=function(F,U){(U=U||this.length)<0&&(U+=this.length),(F=F||0)<0&&(F+=this.length);var Q=new xF;if(U<F||U<0)return Q;F<0&&(F=0),U>this.length&&(U=this.length);for(var B=this.length,l=this.tail;null!==l&&B>U;B--)l=l.prev;for(;null!==l&&B>F;B--,l=l.prev)Q.push(l.value);return Q},xF.prototype.splice=function(F,U,...Q){F>this.length&&(F=this.length-1),F<0&&(F=this.length+F);for(var B=0,l=this.head;null!==l&&B<F;B++)l=l.next;var V=[];for(B=0;l&&B<U;B++)V.push(l.value),l=this.removeNode(l);null===l&&(l=this.tail),l!==this.head&&l!==this.tail&&(l=l.prev);for(B=0;B<Q.length;B++)l=oF(this,l,Q[B]);return V},xF.prototype.reverse=function(){for(var F=this.head,U=this.tail,Q=F;null!==Q;Q=Q.prev){var B=Q.prev;Q.prev=Q.next,Q.next=B}return this.head=U,this.tail=F,this};try{!function(F){F.prototype[Symbol.iterator]=function*(){for(let F=this.head;F;F=F.next)yield F.value}}(xF)}catch(F){}const rF=Symbol("max"),pF=Symbol("length"),TF=Symbol("lengthCalculator"),YF=Symbol("allowStale"),kF=Symbol("maxAge"),HF=Symbol("dispose"),MF=Symbol("noDisposeOnSet"),AF=Symbol("lruList"),vF=Symbol("cache"),zF=Symbol("updateAgeOnGet"),DF=()=>1;const KF=(F,U,Q)=>{const B=F[vF].get(U);if(B){const U=B.value;if(wF(F,U)){if(PF(F,B),!F[YF])return}else Q&&(F[zF]&&(B.value.now=Date.now()),F[AF].unshiftNode(B));return U.value}},wF=(F,U)=>{if(!U||!U.maxAge&&!F[kF])return!1;const Q=Date.now()-U.now;return U.maxAge?Q>U.maxAge:F[kF]&&Q>F[kF]},fF=F=>{if(F[pF]>F[rF])for(let U=F[AF].tail;F[pF]>F[rF]&&null!==U;){const Q=U.prev;PF(F,U),U=Q}},PF=(F,U)=>{if(U){const Q=U.value;F[HF]&&F[HF](Q.key,Q.value),F[pF]-=Q.length,F[vF].delete(Q.key),F[AF].removeNode(U)}};class jF{constructor(F,U,Q,B,l){this.key=F,this.value=U,this.length=Q,this.now=B,this.maxAge=l||0}}const _F=(F,U,Q,B)=>{let l=Q.value;wF(F,l)&&(PF(F,Q),F[YF]||(l=void 0)),l&&U.call(B,l.value,l.key,F)};var OF=class{constructor(F){if("number"==typeof F&&(F={max:F}),F||(F={}),F.max&&("number"!=typeof F.max||F.max<0))throw new TypeError("max must be a non-negative number");this[rF]=F.max||1/0;const U=F.length||DF;if(this[TF]="function"!=typeof U?DF:U,this[YF]=F.stale||!1,F.maxAge&&"number"!=typeof F.maxAge)throw new TypeError("maxAge must be a number");this[kF]=F.maxAge||0,this[HF]=F.dispose,this[MF]=F.noDisposeOnSet||!1,this[zF]=F.updateAgeOnGet||!1,this.reset()}set max(F){if("number"!=typeof F||F<0)throw new TypeError("max must be a non-negative number");this[rF]=F||1/0,fF(this)}get max(){return this[rF]}set allowStale(F){this[YF]=!!F}get allowStale(){return this[YF]}set maxAge(F){if("number"!=typeof F)throw new TypeError("maxAge must be a non-negative number");this[kF]=F,fF(this)}get maxAge(){return this[kF]}set lengthCalculator(F){"function"!=typeof F&&(F=DF),F!==this[TF]&&(this[TF]=F,this[pF]=0,this[AF].forEach((F=>{F.length=this[TF](F.value,F.key),this[pF]+=F.length}))),fF(this)}get lengthCalculator(){return this[TF]}get length(){return this[pF]}get itemCount(){return this[AF].length}rforEach(F,U){U=U||this;for(let Q=this[AF].tail;null!==Q;){const B=Q.prev;_F(this,F,Q,U),Q=B}}forEach(F,U){U=U||this;for(let Q=this[AF].head;null!==Q;){const B=Q.next;_F(this,F,Q,U),Q=B}}keys(){return this[AF].toArray().map((F=>F.key))}values(){return this[AF].toArray().map((F=>F.value))}reset(){this[HF]&&this[AF]&&this[AF].length&&this[AF].forEach((F=>this[HF](F.key,F.value))),this[vF]=new Map,this[AF]=new LF,this[pF]=0}dump(){return this[AF].map((F=>!wF(this,F)&&{k:F.key,v:F.value,e:F.now+(F.maxAge||0)})).toArray().filter((F=>F))}dumpLru(){return this[AF]}set(F,U,Q){if((Q=Q||this[kF])&&"number"!=typeof Q)throw new TypeError("maxAge must be a number");const B=Q?Date.now():0,l=this[TF](U,F);if(this[vF].has(F)){if(l>this[rF])return PF(this,this[vF].get(F)),!1;const V=this[vF].get(F).value;return this[HF]&&(this[MF]||this[HF](F,V.value)),V.now=B,V.maxAge=Q,V.value=U,this[pF]+=l-V.length,V.length=l,this.get(F),fF(this),!0}const V=new jF(F,U,l,B,Q);return V.length>this[rF]?(this[HF]&&this[HF](F,U),!1):(this[pF]+=V.length,this[AF].unshift(V),this[vF].set(F,this[AF].head),fF(this),!0)}has(F){if(!this[vF].has(F))return!1;const U=this[vF].get(F).value;return!wF(this,U)}get(F){return KF(this,F,!0)}peek(F){return KF(this,F,!1)}pop(){const F=this[AF].tail;return F?(PF(this,F),F.value):null}del(F){PF(this,this[vF].get(F))}load(F){this.reset();const U=Date.now();for(let Q=F.length-1;Q>=0;Q--){const B=F[Q],l=B.e||0;if(0===l)this.set(B.k,B.v);else{const F=l-U;F>0&&this.set(B.k,B.v,F)}}}prune(){this[vF].forEach(((F,U)=>KF(this,U,!1)))}};class qF{constructor(F,U){if(U=z(U),F instanceof qF)return F.loose===!!U.loose&&F.includePrerelease===!!U.includePrerelease?F:new qF(F.raw,U);if(F instanceof WU)return this.raw=F.value,this.set=[[F]],this.format(),this;if(this.options=U,this.loose=!!U.loose,this.includePrerelease=!!U.includePrerelease,this.raw=F,this.set=F.split(/\s*\|\|\s*/).map((F=>this.parseRange(F.trim()))).filter((F=>F.length)),!this.set.length)throw new TypeError("Invalid SemVer Range: "+F);if(this.set.length>1){const F=this.set[0];if(this.set=this.set.filter((F=>!dU(F[0]))),0===this.set.length)this.set=[F];else if(this.set.length>1)for(const F of this.set)if(1===F.length&&RU(F[0])){this.set=[F];break}}this.format()}format(){return this.range=this.set.map((F=>F.join(" ").trim())).join("||").trim(),this.range}toString(){return this.range}parseRange(F){F=F.trim();const U=`parseRange:${Object.keys(this.options).join(",")}:${F}`,Q=FU.get(U);if(Q)return Q;const B=this.options.loose,l=B?UU[QU.HYPHENRANGELOOSE]:UU[QU.HYPHENRANGE];F=F.replace(l,bU(this.options.includePrerelease)),M("hyphen replace",F),F=F.replace(UU[QU.COMPARATORTRIM],BU),M("comparator trim",F,UU[QU.COMPARATORTRIM]),F=(F=(F=F.replace(UU[QU.TILDETRIM],lU)).replace(UU[QU.CARETTRIM],VU)).split(/\s+/).join(" ");const V=B?UU[QU.COMPARATORLOOSE]:UU[QU.COMPARATOR],d=F.split(" ").map((F=>sU(F,this.options))).join(" ").split(/\s+/).map((F=>gU(F,this.options))).filter(this.options.loose?F=>!!F.match(V):()=>!0).map((F=>new WU(F,this.options))),R=(d.length,new Map);for(const F of d){if(dU(F))return[F];R.set(F.value,F)}R.size>1&&R.has("")&&R.delete("");const t=[...R.values()];return FU.set(U,t),t}intersects(F,U){if(!(F instanceof qF))throw new TypeError("a Range is required");return this.set.some((Q=>tU(Q,U)&&F.set.some((F=>tU(F,U)&&Q.every((Q=>F.every((F=>Q.intersects(F,U)))))))))}test(F){if(!F)return!1;if("string"==typeof F)try{F=new $(F,this.options)}catch(F){return!1}for(let U=0;U<this.set.length;U++)if(GU(this.set[U],F,this.options))return!0;return!1}}var $F=qF;const FU=new OF({max:1e3}),{re:UU,t:QU,comparatorTrimReplace:BU,tildeTrimReplace:lU,caretTrimReplace:VU}=A,dU=F=>"<0.0.0-0"===F.value,RU=F=>""===F.value,tU=(F,U)=>{let Q=!0;const B=F.slice();let l=B.pop();for(;Q&&B.length;)Q=B.every((F=>l.intersects(F,U))),l=B.pop();return Q},sU=(F,U)=>(M("comp",F,U),F=ZU(F,U),M("caret",F),F=eU(F,U),M("tildes",F),F=nU(F,U),M("xrange",F),F=SU(F,U),M("stars",F),F),iU=F=>!F||"x"===F.toLowerCase()||"*"===F,eU=(F,U)=>F.trim().split(/\s+/).map((F=>IU(F,U))).join(" "),IU=(F,U)=>{const Q=U.loose?UU[QU.TILDELOOSE]:UU[QU.TILDE];return F.replace(Q,((U,Q,B,l,V)=>{let d;return M("tilde",F,U,Q,B,l,V),iU(Q)?d="":iU(B)?d=`>=${Q}.0.0 <${+Q+1}.0.0-0`:iU(l)?d=`>=${Q}.${B}.0 <${Q}.${+B+1}.0-0`:V?(M("replaceTilde pr",V),d=`>=${Q}.${B}.${l}-${V} <${Q}.${+B+1}.0-0`):d=`>=${Q}.${B}.${l} <${Q}.${+B+1}.0-0`,M("tilde return",d),d}))},ZU=(F,U)=>F.trim().split(/\s+/).map((F=>cU(F,U))).join(" "),cU=(F,U)=>{M("caret",F,U);const Q=U.loose?UU[QU.CARETLOOSE]:UU[QU.CARET],B=U.includePrerelease?"-0":"";return F.replace(Q,((U,Q,l,V,d)=>{let R;return M("caret",F,U,Q,l,V,d),iU(Q)?R="":iU(l)?R=`>=${Q}.0.0${B} <${+Q+1}.0.0-0`:iU(V)?R="0"===Q?`>=${Q}.${l}.0${B} <${Q}.${+l+1}.0-0`:`>=${Q}.${l}.0${B} <${+Q+1}.0.0-0`:d?(M("replaceCaret pr",d),R="0"===Q?"0"===l?`>=${Q}.${l}.${V}-${d} <${Q}.${l}.${+V+1}-0`:`>=${Q}.${l}.${V}-${d} <${Q}.${+l+1}.0-0`:`>=${Q}.${l}.${V}-${d} <${+Q+1}.0.0-0`):(M("no pr"),R="0"===Q?"0"===l?`>=${Q}.${l}.${V}${B} <${Q}.${l}.${+V+1}-0`:`>=${Q}.${l}.${V}${B} <${Q}.${+l+1}.0-0`:`>=${Q}.${l}.${V} <${+Q+1}.0.0-0`),M("caret return",R),R}))},nU=(F,U)=>(M("replaceXRanges",F,U),F.split(/\s+/).map((F=>aU(F,U))).join(" ")),aU=(F,U)=>{F=F.trim();const Q=U.loose?UU[QU.XRANGELOOSE]:UU[QU.XRANGE];return F.replace(Q,((Q,B,l,V,d,R)=>{M("xRange",F,Q,B,l,V,d,R);const t=iU(l),s=t||iU(V),i=s||iU(d),e=i;return"="===B&&e&&(B=""),R=U.includePrerelease?"-0":"",t?Q=">"===B||"<"===B?"<0.0.0-0":"*":B&&e?(s&&(V=0),d=0,">"===B?(B=">=",s?(l=+l+1,V=0,d=0):(V=+V+1,d=0)):"<="===B&&(B="<",s?l=+l+1:V=+V+1),"<"===B&&(R="-0"),Q=`${B+l}.${V}.${d}${R}`):s?Q=`>=${l}.0.0${R} <${+l+1}.0.0-0`:i&&(Q=`>=${l}.${V}.0${R} <${l}.${+V+1}.0-0`),M("xRange return",Q),Q}))},SU=(F,U)=>(M("replaceStars",F,U),F.trim().replace(UU[QU.STAR],"")),gU=(F,U)=>(M("replaceGTE0",F,U),F.trim().replace(UU[U.includePrerelease?QU.GTE0PRE:QU.GTE0],"")),bU=F=>(U,Q,B,l,V,d,R,t,s,i,e,I,Z)=>`${Q=iU(B)?"":iU(l)?`>=${B}.0.0${F?"-0":""}`:iU(V)?`>=${B}.${l}.0${F?"-0":""}`:d?">="+Q:`>=${Q}${F?"-0":""}`} ${t=iU(s)?"":iU(i)?`<${+s+1}.0.0-0`:iU(e)?`<${s}.${+i+1}.0-0`:I?`<=${s}.${i}.${e}-${I}`:F?`<${s}.${i}.${+e+1}-0`:"<="+t}`.trim(),GU=(F,U,Q)=>{for(let Q=0;Q<F.length;Q++)if(!F[Q].test(U))return!1;if(U.prerelease.length&&!Q.includePrerelease){for(let Q=0;Q<F.length;Q++)if(M(F[Q].semver),F[Q].semver!==WU.ANY&&F[Q].semver.prerelease.length>0){const B=F[Q].semver;if(B.major===U.major&&B.minor===U.minor&&B.patch===U.patch)return!0}return!1}return!0},CU=Symbol("SemVer ANY");class hU{static get ANY(){return CU}constructor(F,U){if(U=z(U),F instanceof hU){if(F.loose===!!U.loose)return F;F=F.value}M("comparator",F,U),this.options=U,this.loose=!!U.loose,this.parse(F),this.semver===CU?this.value="":this.value=this.operator+this.semver.version,M("comp",this)}parse(F){const U=this.options.loose?mU[JU.COMPARATORLOOSE]:mU[JU.COMPARATOR],Q=F.match(U);if(!Q)throw new TypeError("Invalid comparator: "+F);this.operator=void 0!==Q[1]?Q[1]:"","="===this.operator&&(this.operator=""),Q[2]?this.semver=new $(Q[2],this.options.loose):this.semver=CU}toString(){return this.value}test(F){if(M("Comparator.test",F,this.options.loose),this.semver===CU||F===CU)return!0;if("string"==typeof F)try{F=new $(F,this.options)}catch(F){return!1}return mF(F,this.operator,this.semver,this.options)}intersects(F,U){if(!(F instanceof hU))throw new TypeError("a Comparator is required");if(U&&"object"==typeof U||(U={loose:!!U,includePrerelease:!1}),""===this.operator)return""===this.value||new $F(F.value,U).test(this.value);if(""===F.operator)return""===F.value||new $F(this.value,U).test(F.semver);const Q=!(">="!==this.operator&&">"!==this.operator||">="!==F.operator&&">"!==F.operator),B=!("<="!==this.operator&&"<"!==this.operator||"<="!==F.operator&&"<"!==F.operator),l=this.semver.version===F.semver.version,V=!(">="!==this.operator&&"<="!==this.operator||">="!==F.operator&&"<="!==F.operator),d=mF(this.semver,"<",F.semver,U)&&(">="===this.operator||">"===this.operator)&&("<="===F.operator||"<"===F.operator),R=mF(this.semver,">",F.semver,U)&&("<="===this.operator||"<"===this.operator)&&(">="===F.operator||">"===F.operator);return Q||B||l&&V||d||R}}var WU=hU;const{re:mU,t:JU}=A;var XU=(F,U,Q)=>{try{U=new $F(U,Q)}catch(F){return!1}return U.test(F)};var EU=(F,U)=>new $F(F,U).set.map((F=>F.map((F=>F.value)).join(" ").trim().split(" ")));var LU=(F,U,Q)=>{let B=null,l=null,V=null;try{V=new $F(U,Q)}catch(F){return null}return F.forEach((F=>{V.test(F)&&(B&&-1!==l.compare(F)||(B=F,l=new $(B,Q)))})),B};var xU=(F,U,Q)=>{let B=null,l=null,V=null;try{V=new $F(U,Q)}catch(F){return null}return F.forEach((F=>{V.test(F)&&(B&&1!==l.compare(F)||(B=F,l=new $(B,Q)))})),B};var oU=(F,U)=>{F=new $F(F,U);let Q=new $("0.0.0");if(F.test(Q))return Q;if(Q=new $("0.0.0-0"),F.test(Q))return Q;Q=null;for(let U=0;U<F.set.length;++U){const B=F.set[U];let l=null;B.forEach((F=>{const U=new $(F.semver.version);switch(F.operator){case">":0===U.prerelease.length?U.patch++:U.prerelease.push(0),U.raw=U.format();case"":case">=":l&&!bF(U,l)||(l=U);break;case"<":case"<=":break;default:throw new Error("Unexpected operation: "+F.operator)}})),!l||Q&&!bF(Q,l)||(Q=l)}return Q&&F.test(Q)?Q:null};var yU=(F,U)=>{try{return new $F(F,U).range||"*"}catch(F){return null}};const{ANY:uU}=WU;var NU=(F,U,Q,B)=>{let l,V,d,R,t;switch(F=new $(F,B),U=new $F(U,B),Q){case">":l=bF,V=WF,d=GF,R=">",t=">=";break;case"<":l=GF,V=hF,d=bF,R="<",t="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(XU(F,U,B))return!1;for(let Q=0;Q<U.set.length;++Q){const s=U.set[Q];let i=null,e=null;if(s.forEach((F=>{F.semver===uU&&(F=new WU(">=0.0.0")),i=i||F,e=e||F,l(F.semver,i.semver,B)?i=F:d(F.semver,e.semver,B)&&(e=F)})),i.operator===R||i.operator===t)return!1;if((!e.operator||e.operator===R)&&V(F,e.semver))return!1;if(e.operator===t&&d(F,e.semver))return!1}return!0};var rU=(F,U,Q)=>NU(F,U,">",Q);var pU=(F,U,Q)=>NU(F,U,"<",Q);var TU=(F,U,Q)=>(F=new $F(F,Q),U=new $F(U,Q),F.intersects(U));const{ANY:YU}=WU,kU=(F,U,Q)=>{if(F===U)return!0;if(1===F.length&&F[0].semver===YU){if(1===U.length&&U[0].semver===YU)return!0;F=Q.includePrerelease?[new WU(">=0.0.0-0")]:[new WU(">=0.0.0")]}if(1===U.length&&U[0].semver===YU){if(Q.includePrerelease)return!0;U=[new WU(">=0.0.0")]}const B=new Set;let l,V,d,R,t,s,i;for(const U of F)">"===U.operator||">="===U.operator?l=HU(l,U,Q):"<"===U.operator||"<="===U.operator?V=MU(V,U,Q):B.add(U.semver);if(B.size>1)return null;if(l&&V){if(d=RF(l.semver,V.semver,Q),d>0)return null;if(0===d&&(">="!==l.operator||"<="!==V.operator))return null}for(const F of B){if(l&&!XU(F,String(l),Q))return null;if(V&&!XU(F,String(V),Q))return null;for(const B of U)if(!XU(F,String(B),Q))return!1;return!0}let e=!(!V||Q.includePrerelease||!V.semver.prerelease.length)&&V.semver,I=!(!l||Q.includePrerelease||!l.semver.prerelease.length)&&l.semver;e&&1===e.prerelease.length&&"<"===V.operator&&0===e.prerelease[0]&&(e=!1);for(const F of U){if(i=i||">"===F.operator||">="===F.operator,s=s||"<"===F.operator||"<="===F.operator,l)if(I&&F.semver.prerelease&&F.semver.prerelease.length&&F.semver.major===I.major&&F.semver.minor===I.minor&&F.semver.patch===I.patch&&(I=!1),">"===F.operator||">="===F.operator){if(R=HU(l,F,Q),R===F&&R!==l)return!1}else if(">="===l.operator&&!XU(l.semver,String(F),Q))return!1;if(V)if(e&&F.semver.prerelease&&F.semver.prerelease.length&&F.semver.major===e.major&&F.semver.minor===e.minor&&F.semver.patch===e.patch&&(e=!1),"<"===F.operator||"<="===F.operator){if(t=MU(V,F,Q),t===F&&t!==V)return!1}else if("<="===V.operator&&!XU(V.semver,String(F),Q))return!1;if(!F.operator&&(V||l)&&0!==d)return!1}return!(l&&s&&!V&&0!==d)&&(!(V&&i&&!l&&0!==d)&&(!I&&!e))},HU=(F,U,Q)=>{if(!F)return U;const B=RF(F.semver,U.semver,Q);return B>0?F:B<0||">"===U.operator&&">="===F.operator?U:F},MU=(F,U,Q)=>{if(!F)return U;const B=RF(F.semver,U.semver,Q);return B<0?F:B>0||"<"===U.operator&&"<="===F.operator?U:F};var AU=(F,U,Q={})=>{if(F===U)return!0;F=new $F(F,Q),U=new $F(U,Q);let B=!1;F:for(const l of F.set){for(const F of U.set){const U=kU(l,F,Q);if(B=B||null!==U,U)continue F}if(B)return!1}return!0},vU={re:A.re,src:A.src,tokens:A.t,SEMVER_SPEC_VERSION:H.SEMVER_SPEC_VERSION,SemVer:$,compareIdentifiers:w.compareIdentifiers,rcompareIdentifiers:w.rcompareIdentifiers,parse:BF,valid:lF,clean:VF,inc:dF,diff:sF,major:iF,minor:eF,patch:IF,prerelease:ZF,compare:RF,rcompare:cF,compareLoose:nF,compareBuild:aF,sort:SF,rsort:gF,gt:bF,lt:GF,eq:tF,neq:CF,gte:hF,lte:WF,cmp:mF,coerce:EF,Comparator:WU,Range:$F,satisfies:XU,toComparators:EU,maxSatisfying:LU,minSatisfying:xU,minVersion:oU,validRange:yU,outside:NU,gtr:rU,ltr:pU,intersects:TU,simplifyRange:(F,U,Q)=>{const B=[];let l=null,V=null;const d=F.sort(((F,U)=>RF(F,U,Q)));for(const F of d){XU(F,U,Q)?(V=F,l||(l=F)):(V&&B.push([l,V]),V=null,l=null)}l&&B.push([l,null]);const R=[];for(const[F,U]of B)F===U?R.push(F):U||F!==d[0]?U?F===d[0]?R.push("<="+U):R.push(`${F} - ${U}`):R.push(">="+F):R.push("*");const t=R.join(" || "),s="string"==typeof U.raw?U.raw:String(U);return t.length<s.length?t:U},subset:AU};const zU=function(){if(!globalThis.navigator)return{isMobileDevice:!1,isIOSDevice:!1,browserName:"Node",webGLSupported:!1,gpuDesc:null,deviceCategory:"High",hardwareConcurrency:4};const F=null!=(navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/webOS/i)||navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i)||navigator.userAgent.match(/BlackBerry/i)||navigator.userAgent.match(/Pixel/i)||navigator.userAgent.match(/Windows Phone/i)),U=function(){const F=navigator.userAgent;let U,Q,B,l=navigator.appName,V=""+parseFloat(navigator.appVersion),d=parseInt(navigator.appVersion,10);return navigator.brave?(l="Brave",Q=F.indexOf("Chrome"),V=F.substring(Q+7,F.indexOf(" ",Q+7))):-1!=(Q=F.indexOf("Opera"))?(l="Opera",V=F.substring(Q+6),-1!=(Q=F.indexOf("Version"))&&(V=F.substring(Q+8))):-1!=(Q=F.indexOf("MSIE"))?(l="Microsoft Internet Explorer",V=F.substring(Q+5)):-1!=(Q=F.indexOf("Edge"))?(l="Edge",V=F.substring(Q+4)):-1!=(Q=F.indexOf("Chrome"))?(l="Chrome",V=F.substring(Q+7,F.indexOf(" ",Q+7))):-1!=(Q=F.indexOf("Safari"))?(l="Safari",V=F.substring(Q+7),-1!=(Q=F.indexOf("Version"))&&(V=F.substring(Q+8))):-1!=(Q=F.indexOf("Firefox"))?(l="Firefox",V=F.substring(Q+8)):(U=F.lastIndexOf(" ")+1)<(Q=F.lastIndexOf("/"))&&(l=F.substring(U,Q),V=F.substring(Q+1),l.toLowerCase()==l.toUpperCase()&&(l=navigator.appName)),-1!=(B=V.indexOf(";"))&&(V=V.substring(0,B)),-1!=(B=V.indexOf(" "))&&(V=V.substring(0,B)),d=parseInt(""+V,10),isNaN(d)&&(V=""+parseFloat(navigator.appVersion),d=parseInt(navigator.appVersion,10)),{browserName:l,fullVersion:V,majorVersion:d,appName:navigator.appName,userAgent:navigator.userAgent}}(),Q=function(){let F,U;try{F=document.createElement("canvas").getContext("webgl")}catch(F){}if(!F)return;try{U=document.createElement("canvas").getContext("webgl2")}catch(F){}const Q=F.getExtension("WEBGL_debug_renderer_info");if(!Q)return console.warn("Unable to determine GPU Info:"),{vendor:"Unknown",renderer:"Unknown",gpuVendor:"Unknown",maxTextureSize:"Unknown",supportsWebGL2:null!=U};const B=F.getParameter(Q.UNMASKED_VENDOR_WEBGL),l=F.getParameter(Q.UNMASKED_RENDERER_WEBGL),V=F.getParameter(F.MAX_TEXTURE_SIZE);let d;return l.match(/NVIDIA/i)?d="NVidia":l.match(/AMD/i)||l.match(/Radeon/i)?d="AMD":l.match(/Intel/i)?d="Intel":l.match(/Mali/i)?d="ARM":l.match(/Apple/i)?d="Apple":l.match(/Adreno/i)?d="Adreno":l.match(/Google Swiftshader/i)?d="Google":console.warn("Unable to determine GPU vendor:",l),{vendor:B,renderer:l,gpuVendor:d,maxTextureSize:V,supportsWebGL2:null!=U}}();let B="Low";if(Q)if(F)B="Low";else{const F=Q.renderer.replace(/[()]/g,"").split(" ");if("NVidia"==Q.gpuVendor){const U=F.indexOf("GTX");if(-1!=U){const Q=F[U+1];if(Q.endsWith("M")){B=parseInt(Q.substring(0,Q.length-2))>=900?"Medium":"Low"}else{B=parseInt(Q)>=1030?"High":"Medium"}}else B=F.includes("RTX")||F.includes("TITAN")||F.includes("Quadro")?"High":"Low"}else if("AMD"==Q.gpuVendor){const U=F.indexOf("Radeon");if(-1!=U){const Q=F.indexOf("RX");if(-1!=Q)if("Vega"==F[Q+1])B="High";else{const U=F[Q+1];let l;U.endsWith("X")?(l=parseInt(U.substring(0,U.length-2)),B="High"):l=parseInt(U),B=l>=480?"High":"Medium"}else if("Pro"==F[U+1]){B=parseInt(F[Q+1])>=450?"Medium":"Low"}else if("Sky"==F[U+1]){B=parseInt(F[Q+1])>=700?"Medium":"Low"}else B="Low"}else B=F.includes("FirePro")||F.includes("Quadro")?"High":"Low"}else("Adreno"==Q.gpuVendor||"Intel"==Q.gpuVendor||"Google"==Q.gpuVendor)&&(B="Low")}let l=globalThis.navigator.hardwareConcurrency;return l||(l=F?4:6),{isMobileDevice:F,isIOSDevice:null!=(navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i)),browserName:U.browserName,fullVersion:U.fullVersion,majorVersion:U.majorVersion,appName:U.appName,userAgent:U.userAgent,webGLSupported:null!=Q,gpuDesc:Q,deviceCategory:B,hardwareConcurrency:l}}();globalThis.ZeaSystemDesc||(globalThis.ZeaSystemDesc=zU);class DU{static radToDeg(F){return F/(Math.PI/180)}static degToRad(F){return F*(Math.PI/180)}static isNumeric(F){return!isNaN(parseFloat(F))&&isFinite(F)}static randomInt(F,U){return F=Math.ceil(F),U=Math.floor(U),Math.floor(Math.random()*(U-F))+F}static lerp(F,U,Q){return F+Q*(U-F)}static clamp(F,U,Q){return Math.min(Math.max(F,U),Q)}static nearestPow2(F){return Math.pow(2,Math.round(Math.log(F)/Math.log(2)))}static nearestPow10(F){return Math.pow(10,Math.round(Math.log10(F)/Math.log10(10)))}static nextPow2(F){if(0==this.fract(Math.log2(F)))return F;let U=0;for(;F>0;)U++,F>>=1;return 1<<U}static fract(F){return 0==F?0:F<0?F>-1?-F:-F%Math.floor(-F):F<1?F:F%Math.floor(F)}static remap(F,U,Q,B,l){return B+(F-U)/(Q-U)*(l-B)}static smoothStep(F,U,Q){const B=this.clamp((Q-F)/(U-F),0,1);return B*B*(3-2*B)}static linStep(F,U,Q){return this.clamp((Q-F)/(U-F),0,1)}static decode16BitFloatFrom2xUInt8(F){const U=F[0],Q=(120&U)>>3;let B=0==Q?0:2048;const l=B+((7&U)<<8)+F[1];B=0==Q?1:0;return(128&U?1:-1)*l*Math.pow(2,Q+B-16)}static encode16BitFloatInto2xUInt8(F){const U=new Uint8Array(2),Q=F>=0?128:0;F=Math.abs(F);let B,l=15,V=1024;for(let U=15;U>0;U--)F<V&&(V/=2,l--);B=0==l?F/V/2:(F-V)/V;const d=Math.round(2048*B),R=d/256,t=d-256*R;return U[0]=Q+8*l+R,U[1]=t,F>=2048&&(U[0]=255),U}static encode16BitFloat(F){const U=new Float32Array(1);U[0]=F;return(F=>{let U=F>>16&32768,Q=F>>12&2047;const B=F>>23&255;return B<103?U:B>142?(U|=31744,U|=(255==B?0:1)&&8388607&F,U):B<113?(Q|=2048,U|=(Q>>114-B)+(Q>>113-B&1),U):(U|=B-112<<10|Q>>1,U+=1&Q,U)})(new Int32Array(U.buffer)[0])}static decode16BitFloat(F){const U=(32768&F)>>15,Q=(31744&F)>>10,B=1023&F;return 0==Q?(U?-1:1)*Math.pow(2,-14)*(B/Math.pow(2,10)):31==Q?B?NaN:1/0*(U?-1:1):(U?-1:1)*Math.pow(2,Q-15)*(1+B/Math.pow(2,10))}static convertFloat32ArrayToUInt16Array(F){const U=new Uint16Array(F.length),Q=new Int32Array(F.buffer),B=F=>{let U=F>>16&32768,Q=F>>12&2047;const B=F>>23&255;return B<103?U:B>142?(U|=31744,U|=(255==B?0:1)&&8388607&F,U):B<113?(Q|=2048,U|=(Q>>114-B)+(Q>>113-B&1),U):(U|=B-112<<10|Q>>1,U+=1&Q,U)};for(let l=0;l<F.length;l++)U[l]=B(Q[l]);return U}}let KU={},wU={},fU=[];const PU={register:(F,U)=>{if(KU[F])return void console.warn(`There's a class registered with '${F}' name`);KU[F]={blueprint:U,callbacks:[]};const Q=fU.length;fU.push(U),wU[Q]=F},getBlueprint:F=>{if(KU[F])return KU[F].blueprint;throw new Error(F+" blueprint is not registered")},getBlueprintName:F=>{let U=F,Q=F;"object"==typeof F&&(U=F.constructor,Q=U.name);const B=fU.indexOf(U);if(B>=0&&wU[B])return wU[B];throw new Error(Q+" blueprint is not registered")},constructClass:(F,...U)=>{const Q=KU[F];if(!Q)throw new Error(F+" blueprint is not registered");return new Q.blueprint(...U)},flush:()=>{KU={},wU={},fU=[]}};PU.register("UInt8",0),PU.register("SInt8",1),PU.register("UInt16",2),PU.register("SInt16",3),PU.register("UInt32",4),PU.register("SInt32",5),PU.register("Float32",6);class jU{static replaceAll(F,U,Q){return F.replace(new RegExp(U,"g"),Q)}static stringifyJSONWithFixedPrecision(F,U=0,Q=5){return JSON.stringify(F,((F,U)=>U&&U.toFixed?Number(U.toFixed(Q)):U),U)}static hashStr(F){let U,Q,B,l=0;if(0===F.length)return l;for(U=0,B=F.length;U<B;U++)Q=F.charCodeAt(U),l=(l<<5)-l+Q,l|=0;return Math.abs(l)}}class _U{isValid(){for(const F of this.__data)if(F==1/0||isNaN(F))return!1;return!0}static createFromFloat32Buffer(F,U){throw new Error("Not yet implemented for this type:"+this.constructor.name)}static createFromBuffer(F,U){throw new Error("Not yet implemented for this type:"+this.constructor.name)}static numElements(){throw new Error("Not yet implemented for this type:"+this.constructor.name)}asArray(){return this.__data}toString(){return jU.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){throw new Error("Not yet implemented for this type:"+this.constructor.name)}}class OU extends _U{constructor(F=0,U=0){if(super(),F instanceof Float32Array||F instanceof Uint32Array||F instanceof Int32Array)this.__data=F;else if(F instanceof ArrayBuffer){console.warn("deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))");const Q=F,B=U;this.__data=new Float32Array(Q,B,2)}else null!=F&&"object"==typeof F?(this.__data=new Float32Array(2),this.fromJSON(F)):(this.__data=new Float32Array(2),this.__data[0]=F,this.__data[1]=U)}get x(){return this.__data[0]}set x(F){this.__data[0]=F}get y(){return this.__data[1]}set y(F){this.__data[1]=F}set(F,U){this.__data[0]=F,this.__data[1]=U}setFromOther(F){this.x=F.x,this.y=F.y}equal(F){return console.warn("Deprecated. Use #isEqual instead."),this.isEqual(F)}isEqual(F){return this.x==F.x&&this.y==F.y}notEquals(F){return console.warn("Deprecated. Use #notEqual instead."),this.notEqual(F)}notEqual(F){return this.x!=F.x&&this.y!=F.y}approxEqual(F,U=Number.EPSILON){return Math.abs(this.x-F.x)<U&&Math.abs(this.y-F.y)<U}add(F){return new OU(this.x+F.x,this.y+F.y)}addInPlace(F){this.x+=F.x,this.y+=F.y}subtract(F){return new OU(this.x-F.x,this.y-F.y)}subtractInPlace(F){return this.x-=F.x,this.y-=F.y,this}scale(F){return new OU(this.x*F,this.y*F)}scaleInPlace(F){this.x*=F,this.y*=F}invert(){return new OU(1/this.x,1/this.y)}invertInPlace(){return this.x=1/this.x,this.y=1/this.y,this}multiply(F){return new OU(this.x*F.x,this.y*F.y)}multiplyInPlace(F){this.x*=F.x,this.y*=F.y}lengthSquared(){const F=this.__data[0],U=this.__data[1];return F*F+U*U}length(){return Math.sqrt(this.lengthSquared())}distanceTo(F){const U=this.__data[0]-F.x,Q=this.__data[1]-F.y;return Math.sqrt(U*U+Q*Q)}normalize(){const F=this.__data[0],U=this.__data[1];let Q=F*F+U*U;return Q<Number.EPSILON?new OU:(Q=1/Math.sqrt(Q),new OU(F*Q,U*Q))}normalizeInPlace(){const F=this.__data[0],U=this.__data[1];let Q=F*F+U*U;Q<Number.EPSILON||(Q=1/Math.sqrt(Q),this.set(F*Q,U*Q))}dot(F){return this.x*F.x+this.y*F.y}cross(F){return this.x*F.y-this.y*F.x}angleTo(F){const U=this.normalize().dot(F.normalize());return U>1?0:U<-1?Math.PI:Math.acos(U)}signedAngleTo(F){const U=this.angleTo(F);return this.cross(F)<0?-U:U}rotate(F){const U=Math.cos(F),Q=Math.sin(F);return new OU(this.x*U-this.y*Q,this.x*Q+this.y*U)}lerp(F,U){const Q=this.x,B=this.y;return new OU(Q+U*(F.x-Q),B+U*(F.y-B))}setRandomDir(F=1){const U=2*Math.random()*Math.PI;return this.__data[0]=Math.cos(U)*zScale,this.__data[1]=Math.sin(U)*zScale,this}setRandom(F=1){return this.__data[0]=Math.random()*F,this.__data[1]=Math.random()*F,this}clone(){return new OU(this.__data[0],this.__data[1])}asArray(){return this.__data}static create(...F){return new OU(...F)}static createFromFloat32Buffer(F,U=0){return console.warn("Deprecated, use #createFromBuffer instead"),this.createFromBuffer(F,4*U)}static createFromBuffer(F,U){return new OU(new Float32Array(F,U,2))}static createFromFloat32Array(F){return new OU(F)}static numElements(){return 2}toJSON(){return{x:this.x,y:this.y}}fromJSON(F){this.x=F.x,this.y=F.y}readBinary(F){this.x=F.loadFloat32(),this.y=F.loadFloat32()}static intersectionOfLines(F,U,Q,B){const l=(F.x-U.x)*(Q.y-B.y)-(F.y-U.y)*(Q.x-B.x);if(0==l)return null;const V=F.x*U.y-F.y*U.x,d=Q.x*B.y-Q.y*B.x,R=Q.x-B.x,t=F.x-U.x,s=Q.y-B.y,i=F.y-U.y;return new OU((V*R-t*d)/l,(V*s-i*d)/l)}}PU.register("Vec2",OU);class qU extends _U{constructor(F=0,U=0,Q=0){if(super(),F instanceof Float32Array||F instanceof Uint32Array)this.__data=F;else if(F instanceof ArrayBuffer){console.warn("deprecated, please use new Vec3(new Float32Array(buffer, byteOffset, 3))");const Q=F,B=U;this.__data=new Float32Array(Q,B,3)}else null!=F&&"object"==typeof F?(this.__data=new Float32Array(3),this.fromJSON(F)):(this.__data=new Float32Array(3),this.__data[0]=F,this.__data[1]=U,this.__data[2]=Q)}get x(){return this.__data[0]}set x(F){this.__data[0]=F}get y(){return this.__data[1]}set y(F){this.__data[1]=F}get z(){return this.__data[2]}set z(F){this.__data[2]=F}get xy(){return new OU(this.__data[0],this.__data[1])}get yz(){return new OU(this.__data[1],this.__data[2])}set(F,U,Q){this.x=F,this.y=void 0!==U?U:F,this.z=void 0!==Q?Q:F}setDataArray(F){this.__data=F}setFromOther(F){this.x=F.x,this.y=F.y,this.z=F.z}isNull(){return Math.abs(this.x)<Number.EPSILON&&Math.abs(this.y)<Number.EPSILON&&Math.abs(this.z)<Number.EPSILON}is111(){return Math.abs(1-this.x)<Number.EPSILON&&Math.abs(1-this.y)<Number.EPSILON&&Math.abs(1-this.z)<Number.EPSILON}equal(F){return console.warn("Deprecated. Use #isEqual instead."),this.isEqual(F)}isEqual(F){return this.x==F.x&&this.y==F.y&&this.z==F.z}notEquals(F){return console.warn("Deprecated. Use #notEqual instead."),this.notEqual(F)}notEqual(F){return this.x!=F.x&&this.y!=F.y&&this.z!=F.z}approxEqual(F,U=Number.EPSILON){return Math.abs(this.x-F.x)<U&&Math.abs(this.y-F.y)<U&&Math.abs(this.z-F.z)<U}add(F){return new qU(this.x+F.x,this.y+F.y,this.z+F.z)}addInPlace(F){this.x+=F.x,this.y+=F.y,this.z+=F.z}subtract(F){return new qU(this.x-F.x,this.y-F.y,this.z-F.z)}subtractInPlace(F){this.x-=F.x,this.y-=F.y,this.z-=F.z}multiply(F){return new qU(this.x*F.x,this.y*F.y,this.z*F.z)}multiplyInPlace(F){this.x*=F.x,this.y*=F.y,this.z*=F.z}divide(F){return new qU(this.x/F.x,this.y/F.y,this.z/F.z)}divideInPlace(F){this.x/=F.x,this.y/=F.y,this.z/=F.z}scale(F){return new qU(this.x*F,this.y*F,this.z*F)}scaleInPlace(F){this.x*=F,this.y*=F,this.z*=F}negate(){return new qU(-this.x,-this.y,-this.z)}inverse(){return new qU(1/this.x,1/this.y,1/this.z)}lengthSquared(){const F=this.__data[0],U=this.__data[1],Q=this.__data[2];return F*F+U*U+Q*Q}length(){return Math.sqrt(this.lengthSquared())}distanceTo(F){const U=this.__data[0]-F.x,Q=this.__data[1]-F.y,B=this.__data[2]-F.z;return Math.sqrt(U*U+Q*Q+B*B)}normalize(){let F=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];return F<Number.EPSILON?new qU:(F=1/Math.sqrt(F),new qU(this.__data[0]*F,this.__data[1]*F,this.__data[2]*F))}normalizeInPlace(){let F=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];if(F<Number.EPSILON)return;F=Math.sqrt(F);const U=1/F;return this.__data[0]*=U,this.__data[1]*=U,this.__data[2]*=U,F}resize(F){const U=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];if(U<Number.EPSILON)return;const Q=F/Math.sqrt(U);return new qU(this.__data[0]*Q,this.__data[1]*Q,this.__data[2]*Q)}resizeInPlace(F){const U=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];if(U<Number.EPSILON)return;const Q=F/Math.sqrt(U);this.__data[0]*=Q,this.__data[1]*=Q,this.__data[2]*=Q}dot(F){return this.x*F.x+this.y*F.y+this.z*F.z}cross(F){const U=this.x,Q=this.y,B=this.z,l=F.x,V=F.y,d=F.z;return new qU(Q*d-B*V,B*l-U*d,U*V-Q*l)}angleTo(F){const U=this.dot(F);return U>1?0:Math.acos(U)}lerp(F,U){const Q=this.x,B=this.y,l=this.z;return new qU(Q+U*(F.x-Q),B+U*(F.y-B),l+U*(F.z-l))}abs(){return new qU(Math.abs(this.x),Math.abs(this.y),Math.abs(this.z))}setRandomDir(F=1){const U=2*Math.random()*Math.PI,Q=2*Math.random()-1,B=Math.sqrt(1-Q*Q)*F;return this.__data[0]=Math.cos(U)*B,this.__data[1]=Math.sin(U)*B,this.__data[2]=Q*F,this}setRandom(F=1){return this.__data[0]=(Math.random()-.5)*F,this.__data[1]=(Math.random()-.5)*F,this.__data[2]=(Math.random()-.5)*F,this}clone(){return new qU(this.__data[0],this.__data[1],this.__data[2])}asArray(){return this.__data}static create(...F){return new qU(...F)}static createFromJSON(F){const U=new qU;return U.fromJSON(F),U}static createFromFloat32Buffer(F,U=0){return console.warn("Deprecated, use #createFromBuffer instead"),this.createFromBuffer(F,4*U)}static createFromBuffer(F,U){return new qU(new Float32Array(F,U,3))}static createFromFloat32Array(F){return new qU(F)}static numElements(){return 3}toJSON(){return{x:this.x,y:this.y,z:this.z}}fromJSON(F){this.x=F.x,this.y=F.y,this.z=F.z}readBinary(F){this.x=F.loadFloat32(),this.y=F.loadFloat32(),this.z=F.loadFloat32()}}PU.register("Vec3",qU);class $U extends _U{constructor(F=0,U=0,Q=0,B=0){if(super(),F instanceof Float32Array||F instanceof Uint32Array)this.__data=F;else if(F instanceof ArrayBuffer){console.warn("deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))");const Q=F,B=U;this.__data=new Float32Array(Q,B,4)}else null!=F&&"object"==typeof F?(this.__data=new Float32Array(4),this.fromJSON(F)):(this.__data=new Float32Array(4),this.__data[0]=F,this.__data[1]=U,this.__data[2]=Q,this.__data[3]=B)}get x(){return this.__data[0]}set x(F){this.__data[0]=F}get y(){return this.__data[1]}set y(F){this.__data[1]=F}get z(){return this.__data[2]}set z(F){this.__data[2]=F}get t(){return this.__data[3]}set t(F){this.__data[3]=F}get w(){return this.__data[3]}set w(F){this.__data[3]=F}get xyz(){return new qU(this.__data[0],this.__data[1],this.__data[2])}set(F,U,Q,B){this.x=F,this.y=U,this.z=Q,this.t=B}setFromOther(F){this.x=F.x,this.y=F.y,this.z=F.z,this.t=F.t}equal(F){return console.warn("Deprecated. Use #isEqual instead."),this.isEqual(F)}isEqual(F){return this.x==F.x&&this.y==F.y&&this.z==F.z&&this.t==F.t}notEquals(F){return console.warn("Deprecated. Use #notEqual instead."),this.notEqual(F)}notEqual(F){return this.x!=F.x&&this.y!=F.y&&this.z!=F.z&&this.t!=F.t}approxEqual(F,U=Number.EPSILON){return Math.abs(this.x-F.x)<U&&Math.abs(this.y-F.y)<U&&Math.abs(this.z-F.z)<U&&Math.abs(this.t-F.t)<U}add(F){return new $U(this.x+F.x,this.y+F.y,this.z+F.z,this.t+F.t)}addInPlace(F){this.x+=F.x,this.y+=F.y,this.z+=F.z,this.t+=F.t}subtract(F){return new $U(this.x-F.x,this.y-F.y,this.z-F.z,this.t-F.t)}subtractInPlace(F){this.x-=F.x,this.y-=F.y,this.z-=F.z,this.t-=F.t}multiply(F){return new $U(this.x*F.x,this.y*F.y,this.z*F.z,this.t*F.t)}multiplyInPlace(F){this.x*=F.x,this.y*=F.y,this.z*=F.z,this.t*=F.t}divide(F){return new $U(this.x/F.x,this.y/F.y,this.z/F.z,this.t/F.t)}divideInPlace(F){this.x/=F.x,this.y/=F.y,this.z/=F.z,this.t/=F.t}scale(F){return new $U(this.x*F,this.y*F,this.z*F,this.t*F)}scaleInPlace(F){this.set(this.x*F,this.y*F,this.z*F,this.t*F)}length(){const F=this.__data[0],U=this.__data[1],Q=this.__data[2],B=this.__data[2];return Math.sqrt(F*F+U*U+Q*Q+B*B)}lengthSquared(){const F=this.__data[0],U=this.__data[1],Q=this.__data[2],B=this.__data[3];return F*F+U*U+Q*Q+B*B}normalize(){const F=this.__data[0],U=this.__data[1],Q=this.__data[2],B=this.__data[3];let l=F*F+U*U+Q*Q+B*B;return l<Number.EPSILON?new $U:(l=1/Math.sqrt(l),new $U(F*l,U*l,Q*l))}normalizeInPlace(){const F=this.__data[0],U=this.__data[1],Q=this.__data[2],B=this.__data[3];let l=F*F+U*U+Q*Q+B*B;l<Number.EPSILON||(l=1/Math.sqrt(l),this.set(F*l,U*l,Q*l,B*l))}dot(F){return this.x*F.x+this.y*F.y+this.z*F.z+this.t*b.t}cross(F){const U=this.x,Q=this.y,B=this.z,l=this.t,V=F.x,d=F.y,R=F.z,t=F.t;return new $U(Q*R-B*d,B*t-l*R,l*V-U*t,U*d-Q*V)}angleTo(F){const U=this.normalize(),Q=F.normalize(),B=U.dot(Q);return B>1?0:Math.acos(B)}lerp(F,U){const Q=this.x,B=this.y,l=this.z;return at=this.t,new $U(Q+U*(F.x-Q),B+U*(F.y-B),l+U*(F.z-l),at+U*(F.t-at))}random(F=1){const U=2*glMatrix.RANDOM()*Math.PI,Q=2*glMatrix.RANDOM()-1,B=Math.sqrt(1-Q*Q)*F;return out[0]=Math.cos(U)*B,out[1]=Math.sin(U)*B,out[2]=Q*F,out}clone(){return new $U(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}toVec3(){return new qU(this.__data[0],this.__data[1],this.__data[2])}asArray(){return this.__data}static create(...F){return new qU(...F)}static createFromFloat32Buffer(F,U=0){return console.warn("Deprecated, use #createFromBuffer instead"),new $U(new Float32Array(F,4*U,4))}static createFromBuffer(F,U){return new $U(new Float32Array(F,U,4))}static numElements(){return 4}toJSON(){return{x:this.x,y:this.y,z:this.z,t:this.t}}fromJSON(F){this.x=F.x,this.y=F.y,this.z=F.z,this.t=F.t}readBinary(F){this.x=F.loadFloat32(),this.y=F.loadFloat32(),this.z=F.loadFloat32(),this.t=F.loadFloat32()}}PU.register("Vec4",$U);class FQ extends _U{constructor(F=0,U=0,Q=0,B=255){super(),F instanceof Uint8Array?this.__data=F:(this.__data=new Uint8Array(4),"string"==typeof F?F.startsWith("#")?this.setFromHex(F):this.setFromCSSColorName(F):(this.__data[0]=F,this.__data[1]=U,this.__data[2]=Q,this.__data[3]=B))}get r(){return this.__data[0]}set r(F){this.__data[0]=F}get g(){return this.__data[1]}set g(F){this.__data[1]=F}get b(){return this.__data[2]}set b(F){this.__data[2]=F}get a(){return this.__data[3]}set a(F){this.__data[3]=F}set(F,U,Q,B=255){this.r=F,this.g=U,this.b=Q,this.a=B}setFromOther(F){this.r=F.r,this.g=F.g,this.b=F.b,this.a=F.a}setFromArray(F){this.r=F[0],this.g=F[1],this.b=F[2],this.a=4==F.length?F[3]:1}setFromHex(F){const U=function(F){const U=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(F);return U?{r:parseInt(U[1],16),g:parseInt(U[2],16),b:parseInt(U[3],16)}:null}(F);U?this.set(U.r,U.g,U.b):console.warn("Invalid hex code:"+F)}setFromCSSColorName(F){F.startsWith("#")?this.setFromHex(F):this.setFromHex((F=>{const U={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",honeydew:"#f0fff0",hotpink:"#ff69b4","indianred ":"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgrey:"#d3d3d3",lightgreen:"#90ee90",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370d8",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#d87093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"};return void 0!==U[F.toLowerCase()]&&U[F.toLowerCase()]})(F))}toHex(){function F(F){const U=F.toString(16);return 1==U.length?"0"+U:U}return"#"+F(this.r)+F(this.g)+F(this.b)}equal(F){return console.warn("Deprecated. Use #isEqual instead."),this.isEqual(F)}isEqual(F){return this.r==F.r&&this.g==F.g&&this.b==F.b&&this.a==F.a}notEquals(F){return this.r!=F.r&&this.g!=F.g&&this.b!=F.b&&this.a!=F.a}approxEqual(F,U=Number.EPSILON){return Math.abs(this.r-F.r)<U&&Math.abs(this.g-F.g)<U&&Math.abs(this.b-F.b)<U&&Math.abs(this.a-F.a)<U}add(F){return new FQ(this.r+F.r,this.g+F.g,this.b+F.b,this.a+F.a)}subtract(F){return new FQ(this.r-F.r,this.g-F.g,this.b-F.b,this.a-F.a)}scale(F){return new FQ(this.r*F,this.g*F,this.b*F,this.a*F)}scaleInPlace(F){this.r*=F,this.g*=F,this.b*=F,this.a*=F}applyGamma(F){this.set(Math.pow(this.r,F),Math.pow(this.g,F),Math.pow(this.b,F),this.a)}toLinear(F=2.2){return new FQ(Math.pow(this.r,F),Math.pow(this.g,F),Math.pow(this.b,F),this.a)}toGamma(F=2.2){return new FQ(Math.pow(this.r,1/F),Math.pow(this.g,1/F),Math.pow(this.b,1/F),this.a)}luminance(){return.2126*this.r+.7152*this.g+.0722*this.b}lerp(F,U){const Q=this.r,B=this.g,l=this.b,V=this.a;return new FQ(Q+U*(F.r-Q),B+U*(F.g-B),l+U*(F.b-l),V+U*(F.a-V))}static random(F=0,U=!1){return F>0?new FQ(F+Math.random()*(1-F),F+Math.random()*(1-F),F+Math.random()*(1-F),U?F+Math.random()*(1-F):1):F<0?new FQ(Math.random()*(1+F),Math.random()*(1+F),Math.random()*(1+F),U?Math.random()*(1+F):1):new FQ(Math.random(),Math.random(),Math.random(),U?Math.random():1)}clone(){return new FQ(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}asArray(){return this.__data}as3ComponentArray(){return[this.__data[0],this.__data[1],this.__data[2]]}static create(...F){return new FQ(...F)}static createFromFloat32Buffer(F,U=0){return console.warn("Deprecated, use #createFromBuffer instead"),this.createFromBuffer(F,4*U)}static createFromBuffer(F,U){return new FQ(new Uint8Array(F,U,4))}static numElements(){return 4}toJSON(){return{r:this.r,g:this.g,b:this.b,a:this.a}}fromJSON(F){this.r=F.r,this.g=F.g,this.b=F.b,this.a=F.a}toCSSString(){return"rgba("+Math.round(255*this.r)+", "+Math.round(255*this.g)+", "+Math.round(255*this.b)+", "+this.a+")"}}PU.register("RGBA",FQ);class UQ extends _U{constructor(F=0,U=0,Q=0,B=1){if(super(),F instanceof Float32Array)this.__data=F;else if(F instanceof ArrayBuffer){console.warn("deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))");const Q=F,B=U;this.__data=new Float32Array(Q,B,4)}else this.__data=new Float32Array(4),"string"==typeof F?F.startsWith("#")?this.setFromHex(F):this.setFromCSSColorName(F):(this.__data[0]=F,this.__data[1]=U,this.__data[2]=Q,this.__data[3]=B)}get r(){return this.__data[0]}set r(F){this.__data[0]=F}get g(){return this.__data[1]}set g(F){this.__data[1]=F}get b(){return this.__data[2]}set b(F){this.__data[2]=F}get a(){return this.__data[3]}set a(F){this.__data[3]=F}set(F,U,Q,B=1){this.r=F,this.g=U,this.b=Q,this.a=B}setFromOther(F){this.r=F.r,this.g=F.g,this.b=F.b,this.a=F.a}setFromHex(F){const U=function(F){const U=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(F);return U?{r:parseInt(U[1],16),g:parseInt(U[2],16),b:parseInt(U[3],16)}:null}(F);U?this.set(U.r/255,U.g/255,U.b/255):console.warn("Invalid hex code:"+F)}setFromCSSColorName(F){F.startsWith("#")?this.setFromHex(F):this.setFromHex((F=>{const U={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",honeydew:"#f0fff0",hotpink:"#ff69b4","indianred ":"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgrey:"#d3d3d3",lightgreen:"#90ee90",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370d8",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#d87093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"};return void 0!==U[F.toLowerCase()]&&U[F.toLowerCase()]})(F))}toHex(){const F=F=>{const U=Math.round(255*F).toString(16);return 1==U.length?"0"+U:U};return`#${F(this.r)}${F(this.g)}${F(this.b)}`}equal(F){return console.warn("Deprecated. Use #isEqual instead."),this.isEqual(F)}isEqual(F){return this.r==F.r&&this.g==F.g&&this.b==F.b&&this.a==F.a}notEquals(F){return this.r!=F.r&&this.g!=F.g&&this.b!=F.b&&this.a!=F.a}approxEqual(F,U=Number.EPSILON){return Math.abs(this.r-F.r)<U&&Math.abs(this.g-F.g)<U&&Math.abs(this.b-F.b)<U&&Math.abs(this.a-F.a)<U}add(F){return new UQ(this.r+F.r,this.g+F.g,this.b+F.b,this.a+F.a)}addInPlace(F){this.r+=F.r,this.g+=F.g,this.b+=F.b,this.a+=F.a}subtract(F){return new UQ(this.r-F.r,this.g-F.g,this.b-F.b,this.a-F.a)}scale(F){return new UQ(this.r*F,this.g*F,this.b*F,this.a*F)}scaleInPlace(F){this.r*=F,this.g*=F,this.b*=F,this.a*=F}applyGamma(F){this.set(Math.pow(this.r,F),Math.pow(this.g,F),Math.pow(this.b,F),this.a)}toLinear(F=2.2){return new UQ(Math.pow(this.r,F),Math.pow(this.g,F),Math.pow(this.b,F),this.a)}toGamma(F=2.2){return new UQ(Math.pow(this.r,1/F),Math.pow(this.g,1/F),Math.pow(this.b,1/F),this.a)}luminance(){return.2126*this.r+.7152*this.g+.0722*this.b}lerp(F,U){const Q=this.r,B=this.g,l=this.b,V=this.a;return new UQ(Q+U*(F.r-Q),B+U*(F.g-B),l+U*(F.b-l),V+U*(F.a-V))}static random(F=0,U=!1){return F>0?new UQ(F+Math.random()*(1-F),F+Math.random()*(1-F),F+Math.random()*(1-F),U?F+Math.random()*(1-F):1):F<0?new UQ(Math.random()*(1+F),Math.random()*(1+F),Math.random()*(1+F),U?Math.random()*(1+F):1):new UQ(Math.random(),Math.random(),Math.random(),U?Math.random():1)}clone(){return new UQ(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}asArray(){return this.__data}static create(...F){return new UQ(...F)}static createFromFloat32Buffer(F,U=0){return console.warn("Deprecated, use #createFromBuffer instead"),this.createFromBuffer(F,4*U)}static createFromBuffer(F,U){return new UQ(new Float32Array(F,U,4))}static numElements(){return 4}toJSON(){return{r:this.r,g:this.g,b:this.b,a:this.a}}fromJSON(F){this.r=F.r,this.g=F.g,this.b=F.b,this.a=F.a}readBinary(F){this.r=F.loadFloat32(),this.g=F.loadFloat32(),this.b=F.loadFloat32(),this.a=F.loadFloat32()}}PU.register("Color",UQ);class QQ extends _U{constructor(F=0,U=0,Q=0,B=0){if(super(),isNaN(B))switch(B){case"XYZ":this.order=0;break;case"YZX":this.order=1;break;case"ZXY":this.order=2;break;case"XZY":this.order=3;break;case"ZYX":this.order=4;break;case"YXZ":this.order=5;break;default:throw new Error("Invalid Euler Angles Order:"+B)}else this.order=B;if(F instanceof ArrayBuffer){const Q=F,B=U;this.__data=new Float32Array(Q,B,4)}else this.__data=new Float32Array(3),this.__data[0]=F,this.__data[1]=U,this.__data[2]=Q}get x(){return this.__data[0]}set x(F){this.__data[0]=F}get y(){return this.__data[1]}set y(F){this.__data[1]=F}get z(){return this.__data[2]}set z(F){this.__data[2]=F}set(F,U,Q){this.__data[0]=F,this.__data[1]=U,this.__data[2]=Q}}PU.register("EulerAngles",QQ);class BQ extends _U{constructor(F=1,U=0,Q=0,B=0,l=1,V=0,d=0,R=0,t=1){if(super(),F instanceof qU&&U instanceof qU&&Q instanceof qU)this.__data=new Float32Array(9),this.set(F.x,F.y,F.z,U.x,U.y,U.z,Q.x,Q.y,Q.z);else if(F instanceof Float32Array||F instanceof Uint32Array)this.__data=F;else if(F instanceof ArrayBuffer){console.warn("Deprecated, please use new Vec3(new Float32Array(buffer, byteOffset, 9))");const Q=F,B=U;this.__data=new Float32Array(Q,B,9)}else this.__data=new Float32Array(9),this.set(F,U,Q,B,l,V,d,R,t)}get m00(){return this.__data[0]}set m00(F){this.__data[0]=F}get m01(){return this.__data[1]}set m01(F){this.__data[1]=F}get m02(){return this.__data[2]}set m02(F){this.__data[2]=F}get m10(){return this.__data[3]}set m10(F){this.__data[3]=F}get m11(){return this.__data[4]}set m11(F){this.__data[4]=F}get m12(){return this.__data[5]}set m12(F){this.__data[5]=F}get m20(){return this.__data[6]}set m20(F){this.__data[6]=F}get m21(){return this.__data[7]}set m21(F){this.__data[7]=F}get m22(){return this.__data[8]}set m22(F){this.__data[8]=F}get xAxis(){return qU.createFromBuffer(this.__data.buffer,0)}set xAxis(F){this.xAxis.set(F.x,F.y,F.z)}get yAxis(){return qU.createFromBuffer(this.__data.buffer,12)}set yAxis(F){this.yAxis.set(F.x,F.y,F.z)}get zAxis(){return qU.createFromBuffer(this.__data.buffer,24)}set zAxis(F){this.zAxis.set(F.x,F.y,F.z)}set(F=1,U=0,Q=0,B=0,l=1,V=0,d=0,R=0,t=1){this.__data[0]=F,this.__data[1]=U,this.__data[2]=Q,this.__data[3]=B,this.__data[4]=l,this.__data[5]=V,this.__data[6]=d,this.__data[7]=R,this.__data[8]=t}setIdentity(){this.set()}setFromMat(F){this.__data[0]=F.m00,this.__data[1]=F.m01,this.__data[2]=F.m02,this.__data[3]=F.m10,this.__data[4]=F.m11,this.__data[5]=F.m12,this.__data[6]=F.m20,this.__data[7]=F.m21,this.__data[8]=F.m22}setFromDirectionAndUpvector(F,U){const Q=F,B=Q.length();if(B<Number.EPSILON)return void this.setIdentity();Q.scaleInPlace(1/B);const l=U.cross(Q),V=l.length();V>Number.EPSILON&&l.scaleInPlace(1/V);const d=Q.cross(l),R=d.length();R>Number.EPSILON&&d.scaleInPlace(1/R),this.set(l.x,l.y,l.z,d.x,d.y,d.z,Q.x,Q.y,Q.z)}inverse(){const F=this.__data[0],U=this.__data[1],Q=this.__data[2],B=this.__data[3],l=this.__data[4],V=this.__data[5],d=this.__data[6],R=this.__data[7],t=this.__data[8],s=t*l-V*R,i=-t*B+V*d,e=R*B-l*d,I=F*s+U*i+Q*e;return I?(I=1/I,new BQ(s*I,(-t*U+Q*R)*I,(V*U-Q*l)*I,i*I,(t*F-Q*d)*I,(-V*F+Q*B)*I,e*I,(-R*F+U*d)*I,(l*F-U*B)*I)):(console.warn("Unable to invert Mat3"),null)}invertInPlace(){const F=this.__data[0],U=this.__data[1],Q=this.__data[2],B=this.__data[3],l=this.__data[4],V=this.__data[5],d=this.__data[6],R=this.__data[7],t=this.__data[8],s=t*l-V*R,i=-t*B+V*d,e=R*B-l*d,I=F*s+U*i+Q*e;return I?(I=1/I,this.set(s*I,(-t*U+Q*R)*I,(V*U-Q*l)*I,i*I,(t*F-Q*d)*I,(-V*F+Q*B)*I,e*I,(-R*F+U*d)*I,(l*F-U*B)*I),!0):(console.warn("Unable to invert Mat3"),!1)}transpose(){return BQ(this.__data[0],this.__data[3],this.__data[6],this.__data[1],this.__data[4],this.__data[7],this.__data[2],this.__data[5],this.__data[8])}transposeInPlace(){const F=this.__data[1],U=this.__data[2],Q=this.__data[5];this.__data[1]=this.__data[3],this.__data[2]=this.__data[6],this.__data[3]=F,this.__data[5]=this.__data[7],this.__data[6]=U,this.__data[7]=Q}transformVec3(F){return new qU(this.__data[0]*F.x+this.__data[1]*F.y+this.__data[2]*F.z,this.__data[3]*F.x+this.__data[4]*F.y+this.__data[5]*F.z,this.__data[6]*F.x+this.__data[7]*F.y+this.__data[8]*F.z)}clone(){return new BQ(this.__data[0],this.__data[1],this.__data[2],this.__data[3],this.__data[4],this.__data[5],this.__data[6],this.__data[7],this.__data[8],this.__data[9])}static create(...F){return new BQ(...F)}static createFromFloat32Buffer(F,U=0){return console.warn("Deprecated, use #createFromBuffer instead"),this.createFromBuffer(F,4*U)}static createFromBuffer(F,U){return new BQ(new Float32Array(F,U,9))}readBinary(F){this.__data=F.loadFloat32Array(9)}toJSON(){return this.__data}fromJSON(F){this.__data=new Float32Array(F)}toString(){return this.toJSON().toString()}}PU.register("Mat3",BQ);class lQ extends _U{constructor(F=1,U=0,Q=0,B=0,l=0,V=1,d=0,R=0,t=0,s=0,i=1,e=0,I=0,Z=0,c=0,n=1){if(super(),F instanceof Float32Array)this.__data=F;else if(F instanceof ArrayBuffer){const Q=F,B=U;this.__data=new Float32Array(Q,B,16)}else this.__data=new Float32Array(16),this.set(F,U,Q,B,l,V,d,R,t,s,i,e,I,Z,c,n)}get m00(){return this.__data[0]}set m00(F){this.__data[0]=F}get m01(){return this.__data[1]}set m01(F){this.__data[1]=F}get m02(){return this.__data[2]}set m02(F){this.__data[2]=F}get m03(){return this.__data[3]}set m03(F){this.__data[3]=F}get m10(){return this.__data[4]}set m10(F){this.__data[4]=F}get m11(){return this.__data[5]}set m11(F){this.__data[5]=F}get m12(){return this.__data[6]}set m12(F){this.__data[6]=F}get m13(){return this.__data[7]}set m13(F){this.__data[7]=F}get m20(){return this.__data[8]}set m20(F){this.__data[8]=F}get m21(){return this.__data[9]}set m21(F){this.__data[9]=F}get m22(){return this.__data[10]}set m22(F){this.__data[10]=F}get m23(){return this.__data[11]}set m23(F){this.__data[11]=F}get m30(){return this.__data[12]}set m30(F){this.__data[12]=F}get m31(){return this.__data[13]}set m31(F){this.__data[13]=F}get m32(){return this.__data[14]}set m32(F){this.__data[14]=F}get m33(){return this.__data[15]}set m33(F){this.__data[15]=F}get xAxis(){return qU.createFromBuffer(this.__data.buffer,0)}set xAxis(F){this.xAxis.set(F.x,F.y,F.z)}get yAxis(){return qU.createFromBuffer(this.__data.buffer,16)}set yAxis(F){this.yAxis.set(F.x,F.y,F.z)}get zAxis(){return qU.createFromBuffer(this.__data.buffer,32)}set zAxis(F){this.zAxis.set(F.x,F.y,F.z)}get translation(){return qU.createFromBuffer(this.__data.buffer,48)}set translation(F){this.translation.set(F.x,F.y,F.z)}set(F=1,U=0,Q=0,B=0,l=0,V=1,d=0,R=0,t=0,s=0,i=1,e=0,I=0,Z=0,c=0,n=1){this.__data[0]=F,this.__data[1]=U,this.__data[2]=Q,this.__data[3]=B,this.__data[4]=l,this.__data[5]=V,this.__data[6]=d,this.__data[7]=R,this.__data[8]=t,this.__data[9]=s,this.__data[10]=i,this.__data[11]=e,this.__data[12]=I,this.__data[13]=Z,this.__data[14]=c,this.__data[15]=n}setIdentity(){this.set()}setDataArray(F){this.__data=F}setFromMat4(F){this.__data[0]=F.m00,this.__data[1]=F.m01,this.__data[2]=F.m02,this.__data[3]=F.m03,this.__data[4]=F.m10,this.__data[5]=F.m11,this.__data[6]=F.m12,this.__data[7]=F.m13,this.__data[8]=F.m20,this.__data[9]=F.m21,this.__data[10]=F.m22,this.__data[11]=F.m23,this.__data[12]=F.m30,this.__data[13]=F.m31,this.__data[14]=F.m32,this.__data[15]=F.m33}toMat3(){return new BQ(this.__data[0],this.__data[1],this.__data[2],this.__data[4],this.__data[5],this.__data[6],this.__data[8],this.__data[9],this.__data[10])}transposeInPlace(){const F=this.__data[1],U=this.__data[2],Q=this.__data[3],B=this.__data[6],l=this.__data[7],V=this.__data[11];this.__data[1]=this.__data[4],this.__data[2]=this.__data[8],this.__data[3]=this.__data[12],this.__data[4]=F,this.__data[6]=this.__data[9],this.__data[7]=this.__data[13],this.__data[8]=U,this.__data[9]=B,this.__data[11]=this.__data[14],this.__data[12]=Q,this.__data[13]=l,this.__data[14]=V}transpose(){return new lQ(this.__data[0],this.__data[4],this.__data[8],this.__data[12],this.__data[1],this.__data[5],this.__data[9],this.__data[13],this.__data[2],this.__data[6],this.__data[10],this.__data[14],this.__data[3],this.__data[7],this.__data[11],this.__data[15])}inverse(){const F=this.__data[0],U=this.__data[1],Q=this.__data[2],B=this.__data[3],l=this.__data[4],V=this.__data[5],d=this.__data[6],R=this.__data[7],t=this.__data[8],s=this.__data[9],i=this.__data[10],e=this.__data[11],I=this.__data[12],Z=this.__data[13],c=this.__data[14],n=this.__data[15],a=F*V-U*l,S=F*d-Q*l,g=F*R-B*l,b=U*d-Q*V,G=U*R-B*V,C=Q*R-B*d,h=t*Z-s*I,W=t*c-i*I,m=t*n-e*I,J=s*c-i*Z,X=s*n-e*Z,E=i*n-e*c;let L=a*E-S*X+g*J+b*m-G*W+C*h;return L?(L=1/L,new lQ((V*E-d*X+R*J)*L,(Q*X-U*E-B*J)*L,(Z*C-c*G+n*b)*L,(i*G-s*C-e*b)*L,(d*m-l*E-R*W)*L,(F*E-Q*m+B*W)*L,(c*g-I*C-n*S)*L,(t*C-i*g+e*S)*L,(l*X-V*m+R*h)*L,(U*m-F*X-B*h)*L,(I*G-Z*g+n*a)*L,(s*g-t*G-e*a)*L,(V*W-l*J-d*h)*L,(F*J-U*W+Q*h)*L,(Z*S-I*b-c*a)*L,(t*b-s*S+i*a)*L)):(console.warn("Unable to invert Mat4"),null)}invertInPlace(){const F=this.__data[0],U=this.__data[1],Q=this.__data[2],B=this.__data[3],l=this.__data[4],V=this.__data[5],d=this.__data[6],R=this.__data[7],t=this.__data[8],s=this.__data[9],i=this.__data[10],e=this.__data[11],I=this.__data[12],Z=this.__data[13],c=this.__data[14],n=this.__data[15],a=F*V-U*l,S=F*d-Q*l,g=F*R-B*l,b=U*d-Q*V,G=U*R-B*V,C=Q*R-B*d,h=t*Z-s*I,W=t*c-i*I,m=t*n-e*I,J=s*c-i*Z,X=s*n-e*Z,E=i*n-e*c;let L=a*E-S*X+g*J+b*m-G*W+C*h;return L?(L=1/L,this.set((V*E-d*X+R*J)*L,(Q*X-U*E-B*J)*L,(Z*C-c*G+n*b)*L,(i*G-s*C-e*b)*L,(d*m-l*E-R*W)*L,(F*E-Q*m+B*W)*L,(c*g-I*C-n*S)*L,(t*C-i*g+e*S)*L,(l*X-V*m+R*h)*L,(U*m-F*X-B*h)*L,(I*G-Z*g+n*a)*L,(s*g-t*G-e*a)*L,(V*W-l*J-d*h)*L,(F*J-U*W+Q*h)*L,(Z*S-I*b-c*a)*L,(t*b-s*S+i*a)*L),!0):(console.warn("Unable to invert Mat4"),!1)}multiply(F){const U=this.__data[0],Q=this.__data[1],B=this.__data[2],l=this.__data[3],V=this.__data[4],d=this.__data[5],R=this.__data[6],t=this.__data[7],s=this.__data[8],i=this.__data[9],e=this.__data[10],I=this.__data[11],Z=this.__data[12],c=this.__data[13],n=this.__data[14],a=this.__data[15],S=F.asArray();let g=S[0],b=S[1],G=S[2],C=S[3];const h=new lQ;return h.m00=g*U+b*V+G*s+C*Z,h.m01=g*Q+b*d+G*i+C*c,h.m02=g*B+b*R+G*e+C*n,h.m03=g*l+b*t+G*I+C*a,g=S[4],b=S[5],G=S[6],C=S[7],h.m10=g*U+b*V+G*s+C*Z,h.m11=g*Q+b*d+G*i+C*c,h.m12=g*B+b*R+G*e+C*n,h.m13=g*l+b*t+G*I+C*a,g=S[8],b=S[9],G=S[10],C=S[11],h.m20=g*U+b*V+G*s+C*Z,h.m21=g*Q+b*d+G*i+C*c,h.m22=g*B+b*R+G*e+C*n,h.m23=g*l+b*t+G*I+C*a,g=S[12],b=S[13],G=S[14],C=S[15],h.m30=g*U+b*V+G*s+C*Z,h.m31=g*Q+b*d+G*i+C*c,h.m32=g*B+b*R+G*e+C*n,h.m33=g*l+b*t+G*I+C*a,h}multiplyInPlace(F){const U=this.asArray(),Q=U[0],B=U[1],l=U[2],V=U[3],d=U[4],R=U[5],t=U[6],s=U[7],i=U[8],e=U[9],I=U[10],Z=U[11],c=U[12],n=U[13],a=U[14],S=U[15],g=F.asArray();let b=g[0],G=g[1],C=g[2],h=g[3];return this.m00=b*Q+G*d+C*i+h*c,this.m01=b*B+G*R+C*e+h*n,this.m02=b*l+G*t+C*I+h*a,this.m03=b*V+G*s+C*Z+h*S,b=g[4],G=g[5],C=g[6],h=g[7],this.m10=b*Q+G*d+C*i+h*c,this.m11=b*B+G*R+C*e+h*n,this.m12=b*l+G*t+C*I+h*a,this.m13=b*V+G*s+C*Z+h*S,b=g[8],G=g[9],C=g[10],h=g[11],this.m20=b*Q+G*d+C*i+h*c,this.m21=b*B+G*R+C*e+h*n,this.m22=b*l+G*t+C*I+h*a,this.m23=b*V+G*s+C*Z+h*S,b=g[12],G=g[13],C=g[14],h=g[15],this.m30=b*Q+G*d+C*i+h*c,this.m31=b*B+G*R+C*e+h*n,this.m32=b*l+G*t+C*I+h*a,this.m33=b*V+G*s+C*Z+h*S,this}postMultiplyInPlace(F){const U=F.asArray(),Q=U[0],B=U[1],l=U[2],V=U[3],d=U[4],R=U[5],t=U[6],s=U[7],i=U[8],e=U[9],I=U[10],Z=U[11],c=U[12],n=U[13],a=U[14],S=U[15],g=this.asArray();let b=g[0],G=g[1],C=g[2],h=g[3];return this.m00=b*Q+G*d+C*i+h*c,this.m01=b*B+G*R+C*e+h*n,this.m02=b*l+G*t+C*I+h*a,this.m03=b*V+G*s+C*Z+h*S,b=g[4],G=g[5],C=g[6],h=g[7],this.m10=b*Q+G*d+C*i+h*c,this.m11=b*B+G*R+C*e+h*n,this.m12=b*l+G*t+C*I+h*a,this.m13=b*V+G*s+C*Z+h*S,b=g[8],G=g[9],C=g[10],h=g[11],this.m20=b*Q+G*d+C*i+h*c,this.m21=b*B+G*R+C*e+h*n,this.m22=b*l+G*t+C*I+h*a,this.m23=b*V+G*s+C*Z+h*S,b=g[12],G=g[13],C=g[14],h=g[15],this.m30=b*Q+G*d+C*i+h*c,this.m31=b*B+G*R+C*e+h*n,this.m32=b*l+G*t+C*I+h*a,this.m33=b*V+G*s+C*Z+h*S,this}translateInPlace(F){const U=this.__data,Q=F.x,B=F.y,l=F.z;return U[12]=U[0]*Q+U[4]*B+U[8]*l+U[12],U[13]=U[1]*Q+U[5]*B+U[9]*l+U[13],U[14]=U[2]*Q+U[6]*B+U[10]*l+U[14],U[15]=U[3]*Q+U[7]*B+U[11]*l+U[15],this}setLookAt(F,U,Q){const B=F.subtract(U),l=B.length();if(l<Number.EPSILON)return void this.setIdentity();B.scaleInPlace(1/l);const V=Q.cross(B),d=V.length();d>Number.EPSILON&&V.scaleInPlace(1/d);const R=B.cross(V),t=R.length();t>Number.EPSILON&&R.scaleInPlace(1/t),this.set(V.x,V.y,V.z,0,R.x,R.y,R.z,0,B.x,B.y,B.z,0,F.x,F.y,F.z,1)}setRotation(F,U){const Q=F.length();if(Math.abs(Q)<Number.EPSILON)return null;const B=F.x/Q,l=F.y/Q,V=F.z/Q,d=Math.sin(U),R=Math.cos(U),t=1-R,s=this.__data;return s[0]=B*B*t+R,s[1]=l*B*t+V*d,s[2]=V*B*t-l*d,s[3]=0,s[4]=B*l*t-V*d,s[5]=l*l*t+R,s[6]=V*l*t+B*d,s[7]=0,s[8]=B*V*t+l*d,s[9]=l*V*t-B*d,s[10]=V*V*t+R,s[11]=0,s[12]=0,s[13]=0,s[14]=0,s[15]=1,this}setXRotation(F){const U=Math.sin(F),Q=Math.cos(F),B=this.__data;return B[0]=1,B[1]=0,B[2]=0,B[3]=0,B[4]=0,B[5]=Q,B[6]=U,B[7]=0,B[8]=0,B[9]=-U,B[10]=Q,B[11]=0,B[12]=0,B[13]=0,B[14]=0,B[15]=1,this}setYRotation(F){const U=Math.sin(F),Q=Math.cos(F),B=this.__data;return B[0]=Q,B[1]=0,B[2]=-U,B[3]=0,B[4]=0,B[5]=1,B[6]=0,B[7]=0,B[8]=U,B[9]=0,B[10]=Q,B[11]=0,B[12]=0,B[13]=0,B[14]=0,B[15]=1,this}setZRotation(F){const U=Math.sin(F),Q=Math.cos(F),B=this.__data;return B[0]=Q,B[1]=U,B[2]=0,B[3]=0,B[4]=-U,B[5]=Q,B[6]=0,B[7]=0,B[8]=0,B[9]=0,B[10]=1,B[11]=0,B[12]=0,B[13]=0,B[14]=0,B[15]=1,this}transformVec4(F){const U=this.__data,Q=F.x,B=F.y,l=F.z,V=F.t;return new Vec4(U[0]*Q+U[4]*B+U[8]*l+U[12]*V,U[1]*Q+U[5]*B+U[9]*l+U[13]*V,U[2]*Q+U[6]*B+U[10]*l+U[14]*V,U[3]*Q+U[7]*B+U[11]*l+U[15]*V)}transformVec3(F){const U=this.__data,Q=F.x,B=F.y,l=F.z;return new qU(U[0]*Q+U[4]*B+U[8]*l+U[12],U[1]*Q+U[5]*B+U[9]*l+U[13],U[2]*Q+U[6]*B+U[10]*l+U[14])}rotateVec3(F){const U=this.__data,Q=F.x,B=F.y,l=F.z;return new qU(U[0]*Q+U[4]*B+U[8]*l,U[1]*Q+U[5]*B+U[9]*l,U[2]*Q+U[6]*B+U[10]*l)}setPerspectiveMatrix(F,U,Q,B){const l=Math.tan(.5*Math.PI-.5*F),V=1/(Q-B);this.set(l/U,0,0,0,0,l,0,0,0,0,(Q+B)*V,-1,0,0,Q*B*V*2,0)}setOrthographicMatrix(F,U,Q,B,l,V){const d=1/(F-U),R=1/(Q-B),t=1/(l-V);this.set(-2*d,0,0,0,0,-2*R,0,0,0,0,2*t,0,(F+U)*d,(B+Q)*R,(V+l)*t,1)}setScale(F,U,Q){F instanceof qU?this.set(F.x,0,0,0,0,F.y,0,0,0,0,F.z,0,0,0,0,1):this.set(F,0,0,0,0,U,0,0,0,0,Q,0,0,0,0,1)}setFromMat3x4Array(F){this.set(F[0],F[1],F[2],0,F[3],F[4],F[5],0,F[6],F[7],F[8],0,F[9],F[10],F[11],1)}static createFromFloat32Buffer(F,U=0){return console.warn("Deprecated, use #createFromBuffer instead"),this.createFromBuffer(F,4*U)}static createFromBuffer(F,U){return new lQ(new Float32Array(F,U,16))}clone(){return new lQ(this.__data[0],this.__data[1],this.__data[2],this.__data[3],this.__data[4],this.__data[5],this.__data[6],this.__data[7],this.__data[8],this.__data[9],this.__data[10],this.__data[11],this.__data[12],this.__data[13],this.__data[14],this.__data[15])}static create(...F){return new lQ(...F)}toJSON(){return this.__data}fromJSON(F){F instanceof Array?this.__data=new Float32Array(F):F instanceof Object&&(this.__data=new Float32Array(Object.values(F)))}readBinary(F){this.__data=F.loadFloat32Array(16)}}PU.register("Mat4",lQ);class VQ extends _U{constructor(F=0,U=0,Q=0,B=1){if(super(),F instanceof Float32Array)this.__data=F;else if(F instanceof ArrayBuffer){console.warn("deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))");const Q=F,B=U;this.__data=new Float32Array(Q,B,4)}else if(this.__data=new Float32Array(4),"object"==typeof F){this.__data[0]=0,this.__data[1]=0,this.__data[2]=0,this.__data[3]=1;for(const U in F)Array.isArray(F[U])?this[U].call(this,...F[U]):this[U].call(this,F[U])}else this.__data[0]=F,this.__data[1]=U,this.__data[2]=Q,this.__data[3]=B}get x(){return this.__data[0]}set x(F){this.__data[0]=F}get y(){return this.__data[1]}set y(F){this.__data[1]=F}get z(){return this.__data[2]}set z(F){this.__data[2]=F}get w(){return this.__data[3]}set w(F){this.__data[3]=F}set(F,U,Q,B){this.__data[0]=F,this.__data[1]=U,this.__data[2]=Q,this.__data[3]=B}setDataArray(F){this.__data=F}setFromOther(F){this.__data[0]=F.x,this.__data[1]=F.y,this.__data[2]=F.z,this.__data[3]=F.w}setFromEulerAngles(F){const U=new qU;switch(F.order){case 0:U.set(F.x,-F.y,F.z);break;case 1:U.set(F.y,-F.z,F.x);break;case 2:U.set(F.z,-F.x,F.y);break;case 3:U.set(F.x,F.z,F.y);break;case 4:U.set(F.z,F.y,F.x);break;case 5:U.set(F.y,F.x,F.z);break;default:throw new Error("Invalid EulerAngles order:",F.order)}const Q=.5*U.x,B=.5*U.y,l=.5*U.z,V=Math.cos(Q),d=Math.cos(B),R=Math.cos(l),t=Math.sin(Q),s=Math.sin(B),i=Math.sin(l),e=V*R,I=V*i,Z=t*R,c=t*i,n=d*Z-s*I,a=d*c+s*e,S=d*I-s*Z;switch(this.w=d*e+s*c,F.order){case 0:this.x=n,this.y=-a,this.z=S;break;case 1:this.x=S,this.y=n,this.z=-a;break;case 2:this.x=-a,this.y=S,this.z=n;break;case 3:this.x=n,this.y=S,this.z=a;break;case 4:this.x=S,this.y=a,this.z=n;break;case 5:this.x=a,this.y=n,this.z=S;break;default:throw new Error("Invalid EulerAngles order:",F.order)}}toEulerAngles(F){const U=new qU;switch(F){case 0:U.set(this.z,this.x,this.y);break;case 1:U.set(this.x,this.y,this.z);break;case 2:U.set(this.y,this.z,this.x);break;case 3:U.set(this.y,-this.x,this.z);break;case 4:U.set(this.x,-this.z,this.y);break;case 5:U.set(this.z,-this.y,this.x);break;default:throw new Error("Invalid rotation order:"+F)}const Q=new qU,B=U.x*U.y+U.z*this.w;if(B>.49999)Q.y=2*Math.atan2(U.x,this.w),Q.z=.5*Math.PI,Q.x=0;else if(B<-.49999)Q.y=-2*Math.atan2(U.x,this.w),Q.z=-.5*Math.PI,Q.x=0;else{const F=U.x*U.x,l=U.y*U.y,V=U.z*U.z;Q.y=Math.atan2(2*U.y*this.w-2*U.x*U.z,1-2*l-2*V),Q.z=Math.asin(2*B),Q.x=Math.atan2(2*U.x*this.w-2*U.y*U.z,1-2*F-2*V)}switch(F){case 0:return new QQ(Q.y,Q.z,Q.x,F);case 1:return new QQ(Q.x,Q.y,Q.z,F);case 2:return new QQ(Q.z,Q.x,Q.y,F);case 3:return new QQ(-Q.y,Q.x,Q.z,F);case 4:return new QQ(Q.x,Q.z,-Q.y,F);case 5:return new QQ(Q.z,-Q.y,Q.x,F)}}setFromAxisAndAngle(F,U){const Q=U/2,B=F.normalize().scale(Math.sin(Q));this.set(B.x,B.y,B.z,Math.cos(Q))}setFromDirectionAndUpvector(F,U){const Q=new BQ;Q.setFromDirectionAndUpvector(F,U),this.setFromMat3(Q)}setFrom2Vectors(F,U){const Q=F.cross(U),B=F.dot(U),l=Math.sqrt(2*(1+B));this.set(Q.x/l,Q.y/l,Q.z/l,l/2),this.normalizeInPlace()}setFromMat3(F){const U=F.__data[0]+F.__data[4]+F.__data[8];let Q;if(U>0)Q=Math.sqrt(U+1),this.__data[3]=.5*Q,Q=.5/Q,this.__data[0]=(F.__data[5]-F.__data[7])*Q,this.__data[1]=(F.__data[6]-F.__data[2])*Q,this.__data[2]=(F.__data[1]-F.__data[3])*Q;else{let U=0;F.__data[4]>F.__data[0]&&(U=1),F.__data[8]>F.__data[3*U+U]&&(U=2);const B=(U+1)%3,l=(U+2)%3;Q=Math.sqrt(F.__data[3*U+U]-F.__data[3*B+B]-F.__data[3*l+l]+1),this.__data[U]=.5*Q,Q=.5/Q,this.__data[3]=(F.__data[3*B+l]-F.__data[3*l+B])*Q,this.__data[B]=(F.__data[3*B+U]+F.__data[3*U+B])*Q,this.__data[l]=(F.__data[3*l+U]+F.__data[3*U+l])*Q}this.normalizeInPlace()}setFromMat4(F){const U=F.__data[0]+F.__data[5]+F.__data[10];let Q;if(U>0)Q=Math.sqrt(U+1),this.__data[3]=.5*Q,Q=.5/Q,this.__data[0]=(F.__data[6]-F.__data[9])*Q,this.__data[1]=(F.__data[8]-F.__data[2])*Q,this.__data[2]=(F.__data[1]-F.__data[4])*Q;else{let U=0;F.__data[5]>F.__data[0]&&(U=1),F.__data[10]>F.__data[4*U+U]&&(U=2);const B=(U+1)%3,l=(U+2)%3;Q=Math.sqrt(F.__data[4*U+U]-F.__data[4*B+B]-F.__data[4*l+l]+1),this.__data[U]=.5*Q,Q=.5/Q,this.__data[3]=(F.__data[4*B+l]-F.__data[4*l+B])*Q,this.__data[B]=(F.__data[4*B+U]+F.__data[4*U+B])*Q,this.__data[l]=(F.__data[4*l+U]+F.__data[4*U+l])*Q}this.normalizeInPlace()}isIdentity(){return this.getAngle()<Number.EPSILON}getAngle(){return 2*Math.acos(this.w)}equal(F){return console.warn("Deprecated. Use #isEqual instead."),this.isEqual(F)}isEqual(F){return this.x==F.x&&this.y==F.y&&this.z==F.z&&this.w==F.w}notEquals(F){return this.x!=F.x&&this.y!=F.y&&this.z!=F.z&&this.w!=F.w}approxEqual(F,U=Number.EPSILON){return Math.abs(this.x-F.x)<U&&Math.abs(this.y-F.y)<U&&Math.abs(this.z-F.z)<U&&Math.abs(this.w-F.w)<U}add(F){return new VQ(this.x+F.x,this.y+F.y,this.z+F.z,this.w+F.w)}addInPlace(F){this.x+=F.x,this.y+=F.y,this.z+=F.z,this.w+=F.w}subtract(F){return new VQ(this.x-F.x,this.y-F.y,this.z-F.z,this.w-F.w)}scale(F){return new VQ(this.x*F,this.y*F,this.z*F,this.w*F)}scaleInPlace(F){this.x*=F,this.y*=F,this.z*=F,this.w*=F}length(){const F=this.__data[0],U=this.__data[1],Q=this.__data[2],B=this.__data[3];return Math.sqrt(F*F+U*U+Q*Q+B*B)}lengthSquared(){const F=this.__data[0],U=this.__data[1],Q=this.__data[2],B=this.__data[3];return F*F+U*U+Q*Q+B*B}normalize(){const F=this.__data[0],U=this.__data[1],Q=this.__data[2],B=this.__data[3];let l=F*F+U*U+Q*Q+B*B;return l<Number.EPSILON?new VQ:(l=1/Math.sqrt(l),new VQ(F*l,U*l,Q*l,B*l))}normalizeInPlace(){const F=this.__data[0],U=this.__data[1],Q=this.__data[2],B=this.__data[3];let l=F*F+U*U+Q*Q+B*B;l<Number.EPSILON||(l=1/Math.sqrt(l),this.set(F*l,U*l,Q*l,B*l))}dot(F){return this.x*F.x+this.y*F.y+this.z*F.z+this.w*F.w}cross(F){const U=this.x,Q=this.y,B=this.z,l=this.w,V=F.x,d=F.y,R=F.z,t=F.w;return new VQ(Q*R-B*d,B*t-l*R,l*V-U*t,U*d-Q*V)}conjugate(){return new VQ(-this.x,-this.y,-this.z,this.w)}inverse(){return this.conjugate()}alignWith(F){this.dot(F)<0&&this.set(-this.x,-this.y,-this.z,-this.w)}multiply(F){const U=this.__data[0],Q=this.__data[1],B=this.__data[2],l=this.__data[3],V=F.__data[0],d=F.__data[1],R=F.__data[2],t=F.__data[3];return new VQ(U*t+l*V+Q*R-B*d,Q*t+l*d+B*V-U*R,B*t+l*R+U*d-Q*V,l*t-U*V-Q*d-B*R)}multiplyInPlace(F){const U=this.__data[0],Q=this.__data[1],B=this.__data[2],l=this.__data[3],V=F.__data[0],d=F.__data[1],R=F.__data[2],t=F.__data[3];this.set(U*t+l*V+Q*R-B*d,Q*t+l*d+B*V-U*R,B*t+l*R+U*d-Q*V,l*t-U*V-Q*d-B*R)}rotateVec3(F){const U=new VQ(F.x,F.y,F.z,0),Q=this.multiply(U).multiply(this.conjugate());return new qU(Q.x,Q.y,Q.z)}rotateX(F){F*=.5;const U=this.x,Q=this.y,B=this.z,l=this.w,V=Math.sin(F),d=Math.cos(F);this.x=U*d+l*V,this.y=Q*d+B*V,this.z=B*d-Q*V,this.w=l*d-U*V}rotateY(F){F*=.5;const U=this.x,Q=this.y,B=this.z,l=this.w,V=Math.sin(F),d=Math.cos(F);this.x=U*d-B*V,this.y=Q*d+l*V,this.z=B*d+U*V,this.w=l*d-Q*V}rotateZ(F){F*=.5;const U=this.x,Q=this.y,B=this.z,l=this.w,V=Math.sin(F),d=Math.cos(F);this.x=U*d+Q*V,this.y=Q*d-U*V,this.z=B*d+l*V,this.w=l*d-B*V}toMat3(){const F=this.x,U=this.y,Q=this.z,B=this.w,l=F+F,V=U+U,d=Q+Q,R=F*l,t=U*l,s=U*V,i=Q*l,e=Q*V,I=Q*d,Z=B*l,c=B*V,n=B*d,a=new BQ;return a.__data[0]=1-s-I,a.__data[3]=t-n,a.__data[6]=i+c,a.__data[1]=t+n,a.__data[4]=1-R-I,a.__data[7]=e-Z,a.__data[2]=i-c,a.__data[5]=e+Z,a.__data[8]=1-R-s,a}getXaxis(){const F=this.x*this.y,U=this.x*this.z,Q=this.y*this.y,B=this.y*this.w,l=this.z*this.z,V=this.z*this.w;return new qU(1-2*(l+Q),2*(F+V),2*(U-B))}getYaxis(){const F=this.x*this.x,U=this.x*this.y,Q=this.x*this.w,B=this.y*this.z,l=this.z*this.z,V=this.z*this.w;return new qU(2*(U-V),1-2*(l+F),2*(B+Q))}getZaxis(){const F=this.x*this.x,U=this.x*this.z,Q=this.x*this.w,B=this.y*this.y,l=this.y*this.z,V=this.y*this.w;new qU;return new qU(2*(V+U),2*(l-Q),1-2*(B+F))}mirror(F){switch(F){case 0:return new VQ(this.z,this.w,this.x,this.y);case 1:return new VQ(-this.w,this.z,this.y,-this.x);case 2:return new VQ(this.x,this.y,this.z,-this.w)}}toMat4(){const F=this.x,U=this.y,Q=this.z,B=this.w,l=F+F,V=U+U,d=Q+Q,R=F*l,t=U*l,s=U*V,i=Q*l,e=Q*V,I=Q*d,Z=B*l,c=B*V,n=B*d,a=new lQ;return a.__data[0]=1-s-I,a.__data[4]=t-n,a.__data[8]=i+c,a.__data[1]=t+n,a.__data[5]=1-R-I,a.__data[9]=e-Z,a.__data[2]=i-c,a.__data[6]=e+Z,a.__data[10]=1-R-s,a}lerp(F,U){const Q=new VQ(this.x+U*(F.x-this.x),this.y+U*(F.y-this.y),this.z+U*(F.z-this.z),this.w+U*(F.w-this.w));return Q.normalizeInPlace(),Q}slerp(F,U){const Q=this.dot(F),B=U/2,l=Math.acos(Q);l<0&&(l=-l);const V=Math.sin(l),d=Math.sin(B*l),R=Math.sin((1-B)*l)/V,t=d/V,s=new VQ(R*this.x+t*F.x,R*this.y+t*F.y,R*this.z+t*F.z,R*this.w+t*F.w);return s.normalizeInPlace(),s}static create(...F){return new VQ(...F)}static createFromFloat32Buffer(F,U=0){return console.warn("Deprecated, use #createFromBuffer instead"),this.createFromBuffer(F,4*U)}static createFromBuffer(F,U){return new VQ(new Float32Array(F,U,4))}static numElements(){return 4}clone(){return new VQ(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}toJSON(){return{x:this.x,y:this.y,z:this.z,w:this.w}}fromJSON(F){this.__data[0]=F.x,this.__data[1]=F.y,this.__data[2]=F.z,this.__data[3]=F.w,this.normalizeInPlace()}readBinary(F){this.x=F.loadFloat32(),this.y=F.loadFloat32(),this.z=F.loadFloat32(),this.w=F.loadFloat32()}}PU.register("Quat",VQ);class dQ{constructor(F,U){this.start=F instanceof qU?F:new qU,this.dir=U instanceof qU?U:new qU}closestPoint(F){const U=F.subtract(this.start).dot(this.dir);if(U<Number.EPSILON)return 0;const Q=this.dir.dot(this.dir);return Q<Number.EPSILON?0:U/Q}closestPointOnLineSegment(F,U){const Q=this.dir,B=U.subtract(F),l=B.length();B.normalizeInPlace();const V=this.start.subtract(F),d=Q.dot(Q),R=Q.dot(B),t=B.dot(B),s=Q.dot(V),i=B.dot(V);if(0==d&&0==t)return[this.start.distanceTo(F),0];if(0==d)return[0,0];if(0==t)return[this.closestPoint(F),0];const e=d*t-R*R;let I,Z;return e<.001?(I=0,Z=R>t?s/R:i/t):(I=(R*i-t*s)/e,Z=(d*i-R*s)/e),[I,DU.clamp(Z/l,0,1)]}pointAtDist(F){return this.start.add(this.dir.scale(F))}intersectRayVector(F){const U=this.dir,Q=F.dir,B=this.start.subtract(F.start),l=U.dot(U),V=U.dot(Q),d=Q.dot(Q),R=U.dot(B),t=Q.dot(B);if(0==l&&0==d)return[0,this.start.distanceTo(F.start)];if(0==l)return[F.closestPoint(this.start),0];if(0==d)return[1,this.closestPoint(F.start)];const s=l*d-V*V;let i,e;return s<.001?(i=0,e=V>d?R/V:t/d):(i=(V*t-d*R)/s,e=(l*t-V*R)/s),[i,e]}intersectRayPlane(F){const U=this.start.subtract(F.start),Q=F.dir.dot(this.dir),B=-F.dir.dot(U);if(Math.abs(Q)<Number.PRECISION)return-1;const l=B/Q;return l<-Number.PRECISION?-1:l}intersectRayBox3(F,U=0){const Q=new qU(1/this.dir.x,1/this.dir.y,1/this.dir.z),B=[];B[0]=Q.x<0,B[1]=Q.y<0,B[2]=Q.z<0;const l=[];if(U>0){const Q=F.diagonal();Q.normalizeInPlace(),Q.scaleInPlace(U),l[0]=F.p0.subtract(Q),l[1]=F.p1.add(Q)}else l[0]=F.p0,l[1]=F.p1;let V=(l[B[0]].x-this.start.x)*Q.x,d=(l[1-B[0]].x-this.start.x)*Q.x;const R=(l[B[1]].y-this.start.y)*Q.y,t=(l[1-B[1]].y-this.start.y)*Q.y;if(V>t||R>d)return!1;R>V&&(V=R),t<d&&(d=t);const s=(l[B[2]].z-this.start.z)*Q.z,i=(l[1-B[2]].z-this.start.z)*Q.z;return!(V>i||s>d)&&(s>V&&(V=s),i<d&&(d=i),!0)}clone(){return new dQ(this.start.clone(),this.dir.clone())}static create(...F){return new dQ(...F)}toJSON(){return{start:this.start,dir:this.dir}}fromJSON(F){this.start.fromJSON(F.start),this.dir.fromJSON(F.dir)}toString(){return jU.stringifyJSONWithFixedPrecision(this.toJSON())}}PU.register("Ray",dQ);new qU(1,1,1);class RQ{constructor(F,U,Q){if(F instanceof Float32Array)this.setFromFloat32Array(F);else{if(F instanceof qU)this.tr=F;else{if(F instanceof VQ&&null==U&&null==Q)return this.tr=new qU,this.ori=F,void(this.sc=new qU(1,1,1));this.tr=new qU}this.ori=U instanceof VQ?U:new VQ,this.sc=Q instanceof qU?Q:new qU(1,1,1)}}set(F,U,Q){this.tr=F,this.ori=U,Q instanceof qU&&(this.sc=Q)}setFromOther(F){this.tr=F.tr,this.ori=F.ori,this.sc=F.sc}isIdentity(){return this.tr.isNull()&&this.ori.isIdentity()&&this.sc.is111()}isEqual(F){return this.tr.isEqual(F.tr)&&this.ori.isEqual(F.ori)&&this.sc.isEqual(F.sc)}approxEqual(F,U=Number.EPSILON){return(!F.tr||this.tr.approxEqual(F.tr,U))&&(!F.ori||this.ori.approxEqual(F.ori,U))&&(!F.sc||this.sc.approxEqual(F.sc,U))}setLookAt(F,U,Q){const B=F.subtract(U);if(B.length()<Number.EPSILON)throw new Error("Invalid dir");this.ori.setFromDirectionAndUpvector(B,Q),this.tr=F}multiply(F){let U=this.sc;this.sc.x==this.sc.y&&this.sc.x==this.sc.z||(U=F.ori.rotateVec3(this.sc),Math.sign(U.x)!=Math.sign(this.sc.x)&&(U.x=-U.x),Math.sign(U.y)!=Math.sign(this.sc.y)&&(U.y=-U.y),Math.sign(U.z)!=Math.sign(this.sc.z)&&(U.z=-U.z));return new RQ(this.tr.add(this.ori.rotateVec3(U.multiply(F.tr))),this.ori.multiply(F.ori),U.multiply(F.sc))}inverse(){const F=new RQ;return F.ori=this.ori.inverse(),this.sc.x!=this.sc.y||this.sc.x!=this.sc.z?(F.sc=F.ori.rotateVec3(this.sc),Math.sign(F.sc.x)!=Math.sign(this.sc.x)&&(F.sc.x=-F.sc.x),Math.sign(F.sc.y)!=Math.sign(this.sc.y)&&(F.sc.y=-F.sc.y),Math.sign(F.sc.z)!=Math.sign(this.sc.z)&&(F.sc.z=-F.sc.z)):F.sc=this.sc.inverse(),F.tr=F.ori.rotateVec3(this.tr.negate().multiply(F.sc)),F}transformVec3(F){return this.tr.add(this.ori.rotateVec3(this.sc.multiply(F)))}toMat4(){const F=new lQ(this.sc.x,0,0,0,0,this.sc.y,0,0,0,0,this.sc.z,0,0,0,0,1),U=this.ori.toMat4(),Q=new lQ;return Q.translation=this.tr,Q.multiply(U).multiply(F)}fromMat4(F){this.setFromMat4(F)}setFromMat4(F){this.tr=F.translation,this.ori.setFromMat4(F)}setFromFloat32Array(F){if(7==F.length)return this.tr=new qU(F.buffer,F.byteOffset),this.ori=new VQ(F.buffer,F.byteOffset+12),void(this.sc=new qU(1,1,1));if(8!=F.length)return 10==F.length?(this.tr=new qU(F.buffer,F.byteOffset),this.ori=new VQ(F.buffer,F.byteOffset+12),void(this.sc=new qU(F.buffer,F.byteOffset+21))):void 0;{this.tr=new qU(F.buffer,F.byteOffset),this.ori=new VQ(F.buffer,F.byteOffset+12);const U=F[7];this.sc=new qU(U,U,U)}}clone(){return new RQ(this.tr.clone(),this.ori.clone(),this.sc.clone())}static create(...F){return new RQ(...F)}toJSON(){const F={tr:this.tr.toJSON(),ori:this.ori.toJSON()};return this.sc.is111()||(F.sc=this.sc.toJSON()),F}fromJSON(F){this.tr.fromJSON(F.tr),this.ori.fromJSON(F.ori),F.sc&&this.sc.fromJSON(F.sc)}readBinary(F){this.tr.readBinary(F),this.ori.readBinary(F),this.sc.readBinary(F)}toString(){return jU.stringifyJSONWithFixedPrecision(this.toJSON())}}PU.register("Xfo",RQ);class tQ{constructor(F,U){this.p0=F instanceof OU?F:new OU(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY),this.p1=U instanceof OU?U:new OU(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY)}set(F,U){this.p0=F,this.p1=U}reset(){this.p0.x=Number.POSITIVE_INFINITY,this.p1.x=Number.NEGATIVE_INFINITY,this.p0.y=Number.POSITIVE_INFINITY,this.p1.y=Number.NEGATIVE_INFINITY}isValid(){return this.p0.x!=Number.POSITIVE_INFINITY&&this.p1.x!=Number.NEGATIVE_INFINITY&&this.p0.y!=Number.POSITIVE_INFINITY&&this.p1.y!=Number.NEGATIVE_INFINITY}addPoint(F){(this.p0.x==Number.POSITIVE_INFINITY||F.x<this.p0.x)&&(this.p0.x=F.x),(this.p0.y==Number.POSITIVE_INFINITY||F.y<this.p0.y)&&(this.p0.y=F.y),(this.p1.y==Number.NEGATIVE_INFINITY||F.x>this.p1.x)&&(this.p1.x=F.x),(this.p1.y==Number.NEGATIVE_INFINITY||F.y>this.p1.y)&&(this.p1.y=F.y)}size(){return this.p1.distanceTo(this.p0)}diagonal(){return this.p1.subtract(this.p0)}center(){const F=this.p1.subtract(this.p0);return F.scaleInPlace(.5),F.addInPlace(this.p0),F}static create(...F){return new tQ(...F)}toJSON(){return{p0:this.p0.toJSON(),p1:this.p1.toJSON()}}toString(){return jU.stringifyJSONWithFixedPrecision(this.toJSON())}}PU.register("Box2",tQ);class sQ extends _U{constructor(F,U=0){super(),this.pos=F instanceof qU?F:new qU,this.radius=U}clone(){return new Sphere(this.pos.clone(),this.radius)}intersectsBox(F){return F.intersectsSphere(this)}toJSON(){return{pos:this.pos.toJSON(),radius:this.radius}}toString(){return jU.stringifyJSONWithFixedPrecision(this.toJSON())}static create(...F){return new Sphere(...F)}}PU.register("SphereType",sQ);class iQ{constructor(F,U){F instanceof Float32Array?this.setFromFloat32Array(F):(this.p0=F instanceof qU?F:new qU(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY),this.p1=U instanceof qU?U:new qU(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY))}get min(){return this.p0}get max(){return this.p1}set(F,U){this.p0=F,this.p1=U}reset(){this.p0.x=Number.POSITIVE_INFINITY,this.p0.y=Number.POSITIVE_INFINITY,this.p0.z=Number.POSITIVE_INFINITY,this.p1.x=Number.NEGATIVE_INFINITY,this.p1.y=Number.NEGATIVE_INFINITY,this.p1.z=Number.NEGATIVE_INFINITY}isValid(){return this.p0.x!=Number.POSITIVE_INFINITY&&this.p1.x!=Number.NEGATIVE_INFINITY&&this.p0.y!=Number.POSITIVE_INFINITY&&this.p1.y!=Number.NEGATIVE_INFINITY&&this.p0.z!=Number.POSITIVE_INFINITY&&this.p1.z!=Number.NEGATIVE_INFINITY}addPoint(F){F.x!=Number.POSITIVE_INFINITY&&F.x!=Number.NEGATIVE_INFINITY&&(F.x<this.p0.x&&(this.p0.x=F.x),F.x>this.p1.x&&(this.p1.x=F.x)),F.y!=Number.POSITIVE_INFINITY&&F.y!=Number.NEGATIVE_INFINITY&&(F.y<this.p0.y&&(this.p0.y=F.y),F.y>this.p1.y&&(this.p1.y=F.y)),F.z!=Number.POSITIVE_INFINITY&&F.z!=Number.NEGATIVE_INFINITY&&(F.z<this.p0.z&&(this.p0.z=F.z),F.z>this.p1.z&&(this.p1.z=F.z))}addBox3(F,U){U?(this.addPoint(U.transformVec3(F.p0)),this.addPoint(U.transformVec3(new qU(F.p0.x,F.p0.y,F.p1.z))),this.addPoint(U.transformVec3(new qU(F.p0.x,F.p1.y,F.p0.z))),this.addPoint(U.transformVec3(new qU(F.p1.x,F.p0.y,F.p0.z))),this.addPoint(U.transformVec3(new qU(F.p0.x,F.p1.y,F.p1.z))),this.addPoint(U.transformVec3(new qU(F.p1.x,F.p0.y,F.p1.z))),this.addPoint(U.transformVec3(new qU(F.p1.x,F.p1.y,F.p0.z))),this.addPoint(U.transformVec3(F.p1))):(this.addPoint(F.p0),this.addPoint(F.p1))}size(){return this.p1.distanceTo(this.p0)}diagonal(){return this.p1.subtract(this.p0)}center(){const F=this.p1.subtract(this.p0);return F.scaleInPlace(.5),F.addInPlace(this.p0),F}toMat4(){const F=this.p1.x-this.p0.x,U=this.p1.y-this.p0.y,Q=this.p1.z-this.p0.z;return new lQ(F,0,0,0,0,U,0,0,0,0,Q,0,this.p0.x,this.p0.y,this.p0.z,1)}getBoundingSphere(){return new sQ(this.center(),.5*this.diagonal().length())}intersectsBox(F){return!(F.max.x<this.min.x||F.min.x>this.max.x||F.max.y<this.min.y||F.min.y>this.max.y||F.max.z<this.min.z||F.min.z>this.max.z)}intersectsSphere(F){return closestPoint.distanceToSquared(F.center)<=F.radius*F.radius}intersectsPlane(F){let U,Q;return F.normal.x>0?(U=F.normal.x*this.min.x,Q=F.normal.x*this.max.x):(U=F.normal.x*this.max.x,Q=F.normal.x*this.min.x),F.normal.y>0?(U+=F.normal.y*this.min.y,Q+=F.normal.y*this.max.y):(U+=F.normal.y*this.max.y,Q+=F.normal.y*this.min.y),F.normal.z>0?(U+=F.normal.z*this.min.z,Q+=F.normal.z*this.max.z):(U+=F.normal.z*this.max.z,Q+=F.normal.z*this.min.z),U<=-F.constant&&Q>=-F.constant}clone(){return new iQ(this.p0.clone(),this.p1.clone())}static create(...F){return new iQ(...F)}static sizeInBytes(){return 24}toJSON(){return{p0:this.p0.toJSON(),p1:this.p1.toJSON()}}fromJSON(F){const U={x:DU.isNumeric(F.p0.x)?F.p0.x:Number.POSITIVE_INFINITY,y:DU.isNumeric(F.p0.y)?F.p0.y:Number.POSITIVE_INFINITY,z:DU.isNumeric(F.p0.z)?F.p0.z:Number.POSITIVE_INFINITY},Q={x:DU.isNumeric(F.p1.x)?F.p1.x:Number.NEGATIVE_INFINITY,y:DU.isNumeric(F.p1.y)?F.p1.y:Number.NEGATIVE_INFINITY,z:DU.isNumeric(F.p1.z)?F.p1.z:Number.NEGATIVE_INFINITY};this.p0.fromJSON(U),this.p1.fromJSON(Q)}setFromFloat32Array(F){this.p0=new qU(F.buffer,F.byteOffset),this.p1=new qU(F.buffer,F.byteOffset+12)}toString(){return jU.stringifyJSONWithFixedPrecision(this.toJSON())}}PU.register("Box3",iQ);class eQ extends _U{constructor(F,U=0){super(),this.normal=F instanceof qU?F:new qU,this.w=U}set(F,U,Q,B){this.normal.set(F,U,Q),this.w=B}divideScalar(F){this.normal.scaleInPlace(1/F),this.w/=F}distanceToPoint(F){return F.dot(this.normal)+this.w}normalizeInPlace(){const F=1/this.normal.length();this.normal.scaleInPlace(F),this.w*=F}clone(){return new Plane(this.normal.clone(),this.w)}static create(...F){return new Plane(...F)}toJSON(){return{normal:this.normal.toJSON(),w:this.w}}toString(){return jU.stringifyJSONWithFixedPrecision(this.toJSON())}}PU.register("PlaneType",eQ);class IQ{constructor(F,U,Q,B,l,V){this.planes=[F||new eQ,U||new eQ,Q||new eQ,B||new eQ,l||new eQ,V||new eQ]}setFromMatrix(F){const U=F,Q=this.planes;Q[0].set(U.m03-U.m00,U.m13-U.m10,U.m23-U.m20,U.m33-U.m30),Q[1].set(U.m03+U.m00,U.m13+U.m10,U.m23+U.m20,U.m33+U.m30),Q[2].set(U.m03+U.m01,U.m13+U.m11,U.m23+U.m21,U.m33+U.m31),Q[3].set(U.m03-U.m01,U.m13-U.m11,U.m23-U.m21,U.m33-U.m31),Q[4].set(U.m03-U.m02,U.m13-U.m12,U.m23-U.m22,U.m33-U.m32),Q[5].set(U.m03+U.m02,U.m13+U.m12,U.m23+U.m22,U.m33+U.m32),Q.forEach((F=>F.normalizeInPlace()))}intersectsBox(F){const U=new qU,Q=this.planes,{min:B,max:l}=F;for(let F=0;F<6;F++){const V=Q[F];if(U.x=V.normal.x>0?l.x:B.x,U.y=V.normal.y>0?l.y:B.y,U.z=V.normal.z>0?l.z:B.z,V.distanceToPoint(U)<0)return!1}return!0}toJSON(){return{p0:this.p0.toJSON(),p1:this.p1.toJSON(),p2:this.p2.toJSON(),p3:this.p3.toJSON(),p4:this.p4.toJSON(),p5:this.p5.toJSON()}}fromJSON(F){this.p0.fromJSON(F.p0),this.p1.fromJSON(F.p1),this.p2.fromJSON(F.p2),this.p3.fromJSON(F.p3),this.p4.fromJSON(F.p4),this.p5.fromJSON(F.p5)}toString(){return jU.stringifyJSONWithFixedPrecision(this.toJSON())}}PU.register("Frustum",IQ);var ZQ=Object.freeze({__proto__:null,AttrValue:_U,Vec2:OU,Vec3:qU,Vec4:$U,RGBA:FQ,Color:UQ,EulerAngles:QQ,Quat:VQ,Ray:dQ,Mat3:BQ,Mat4:lQ,Xfo:RQ,Box2:tQ,Box3:iQ,Frustum:IQ,PlaneType:eQ,SphereType:sQ});let cQ=0;class nQ{constructor(){this.listeners={},this.__id=++cQ}getId(){return this.__id}on(F,U){if(!U)throw new Error("Missing listener.");this.listeners[F]||(this.listeners[F]=[]);const Q=this.listeners[F];if(Q.includes(U))throw new Error(`Listener "${U.name}" already connected to event "${F}".`);const B=Q.length;return Q[B]=U,B}once(F,U){const Q=B=>{U(B),this.off(F,Q)};return this.on(F,Q)}off(F,U){if(!U)throw new Error("Missing callback function (listener).");if("number"==typeof U)return console.warn("Deprecated. Un-register using the original listener instead."),void this.removeListenerById(F,U);const Q=this.listeners[F]||[],B=[];if(Q.forEach(((F,Q)=>{F===U&&B.push(Q)})),0==B.length)throw new Error(`Listener "${U.name}" is not connected to "${F}" event`);for(const F of B)Q[F]=void 0}addListener(F,U){return console.warn("Deprecated. Use #on instead."),this.on(F,U)}removeListener(F,U){console.warn("Deprecated. Use #off instead."),this.off(F,U)}removeListenerById(F,U){const Q=this.listeners[F];if(Q){if(!Q[U])throw new Error("Invalid ID");Q[U]=void 0}else console.warn("callback :"+U+" was not connected to this signal:"+F)}emit(F,U){(this.listeners[F]||[]).forEach((F=>{F&&F(U)}))}}class aQ extends nQ{constructor(F=0,U=0){super(),this.root={x:0,y:0,w:F,h:U}}fit(F){if(0==F.length)return;let U=!1;this.root.w<F[0].w&&(this.root.w=F[0].w,U=!0),this.root.h<F[0].h&&(this.root.h=F[0].h,U=!0),U&&this.emit("resized",{width:this.root.w,height:this.root.h});F.forEach((F=>{F.fit=this.__addBlock(F)}))}__addBlock(F){const U=this.findNode(this.root,F.w,F.h);return U?this.splitNode(U,F.w,F.h):this.growNode(F.w,F.h)}addBlock(F){let U=!1;this.root.w<F.w&&(this.root.w=F.w,U=!0),this.root.h<F.h&&(this.root.h=F.h,U=!0),U&&this.emit("resized",{width:this.root.w,height:this.root.h});const Q=this.findNode(this.root,F.w,F.h);return Q?this.splitNode(Q,F.w,F.h):this.growNode(F.w,F.h)}findNode(F,U,Q){return F.used?this.findNode(F.right,U,Q)||this.findNode(F.down,U,Q):U<=F.w&&Q<=F.h?F:null}splitNode(F,U,Q){return F.used=!0,F.down={x:F.x,y:F.y+Q,w:F.w,h:F.h-Q},F.right={x:F.x+U,y:F.y,w:F.w-U,h:Q},F}growNode(F,U){const Q=F<=this.root.w,B=U<=this.root.h,l=B&&this.root.h>=this.root.w+F,V=Q&&this.root.w>=this.root.h+U;return l?this.growRight(F,U):V?this.growDown(F,U):B?this.growRight(F,U):Q?this.growDown(F,U):null}growRight(F,U){this.root={used:!0,x:0,y:0,w:this.root.w+F,h:this.root.h,down:this.root,right:{x:this.root.w,y:0,w:F,h:this.root.h}};const Q=this.findNode(this.root,F,U);let B;return Q&&(B=this.splitNode(Q,F,U)),this.emit("resized",{width:this.root.w,height:this.root.h}),B}growDown(F,U){this.root={used:!0,x:0,y:0,w:this.root.w,h:this.root.h+U,down:{x:0,y:this.root.h,w:this.root.w,h:U},right:this.root};const Q=this.findNode(this.root,F,U);let B;return Q&&(B=this.splitNode(Q,F,U)),this.emit("resized",{width:this.root.w,height:this.root.h}),B}}class SQ{constructor(F=0,U=0){this.start=F,this.size=U}}class gQ extends nQ{constructor(){super(),this.freeList=[],this.allocations=[],this.allocationsMap={},this.allocatedSpace=0,this.reservedSpace=0,this.freeSpace=0}getAllocation(F){return this.allocations[this.allocationsMap[F]]}allocate(F,U){if(null!=this.allocationsMap[F]){const Q=this.allocationsMap[F],B=this.allocations[Q];if(U==B.size)return B;if(U<B.size){const F=B.size-U;return this.addBlock(Q+1,new SQ(B.start+U,F)),this.freeBlock(Q+1),B.size=U,B}{const l=Q+1;if(this.freeList.includes(l)&&B.size+this.allocations[l].size>=U){const F=this.allocations[l];if(B.size+F.size==U)return B.size+=F.size,this.freeSpace-=F.size,this.freeList.splice(this.freeList.indexOf(l),1),this.removeBlock(l),B;{const Q=U-B.size;return B.size+=Q,this.freeSpace-=Q,F.start+=Q,F.size-=Q,B}}delete this.allocationsMap[F],B.start+B.size==this.allocatedSpace?(this.removeBlock(Q),this.allocatedSpace-=B.size):this.freeBlock(Q)}}let Q=-1;for(let F=0;F<this.freeList.length;F++){const B=this.freeList[F],l=this.allocations[B];if(l.size==U){Q=B;break}l.size>U&&(Q=B)}if(-1!=Q){const B=this.allocations[Q];if(this.freeSpace-=B.size,this.freeList.splice(this.freeList.indexOf(Q),1),B.size>U){const F=B.size-U;this.addBlock(Q+1,new SQ(B.start+U,F)),this.freeBlock(Q+1),this.freeList.sort(((F,U)=>this.allocations[F].size<this.allocations[U].size)),this.allocations[Q].size=U}this.allocationsMap[F]=Q}else{const Q=this.allocatedSpace,B=this.allocations.length;this.allocatedSpace+=U;const l=DU.nextPow2(this.allocatedSpace);l!=this.reservedSpace&&(this.reservedSpace=l,this.emit("resized",{reservedSpace:this.reservedSpace})),this.allocations.push(new SQ(Q,U)),this.allocationsMap[F]=B}return this.allocations[this.allocationsMap[F]]}addBlock(F,U){this.allocations.splice(F,0,U);for(const U in this.allocationsMap)this.allocationsMap[U]>=F&&this.allocationsMap[U]++;for(let U=0;U<this.freeList.length;U++)this.freeList[U]>=F&&this.freeList[U]++}removeBlock(F){this.allocations.splice(F,1);for(const U in this.allocationsMap)this.allocationsMap[U]>F&&this.allocationsMap[U]--;for(let U=0;U<this.freeList.length;U++)this.freeList[U]>F&&this.freeList[U]--}freeBlock(F){const U=this.allocations[F];this.freeSpace+=U.size;const Q=F-1;if(this.freeList.includes(Q)){return this.allocations[Q].size+=U.size,void this.removeBlock(F)}const B=F+1;if(this.freeList.includes(B)){const Q=this.allocations[B];return Q.start-=U.size,Q.size+=U.size,void this.removeBlock(F)}this.freeList.push(F)}deallocate(F){const U=this.allocationsMap[F];if(null==U)throw new Error(`allocation ${F} does not exist.`);this.freeBlock(U),delete this.allocationsMap[F]}getFragmentation(){return this.freeSpace/this.allocatedSpace}defragment(){}verifyConsistency(){if(Object.keys(this.allocationsMap).length+this.freeList.length!=this.allocations.length)throw new Error("number of blocks does not match the number of allocations");for(const F in this.allocationsMap){const U=this.allocationsMap[F];if(this.freeList.includes(U))throw new Error("block of used memory is also on the free list")}let F=0;for(let U=0;U<this.allocations.length;U++){const Q=this.allocations[U];if(Q.start!=F)throw"blocks of memory are not sequential";F+=Q.size}if(F!=this.allocatedSpace)throw`allocated size: ${this.allocatedSpace}  does not match allocated blocks: ${F}`;if(this.reservedSpace<this.allocatedSpace)throw`reserved space: ${this.reservedSpace} is less than allocated space: ${this.allocatedSpace}`}}const bQ={mouse:"mouse",touch:"touch",xr:"xr"};var GQ=Object.freeze({__proto__:null,GrowingPacker:aQ,EventEmitter:nQ,Allocator1D:gQ,StringFunctions:jU,UInt8:0,SInt8:1,SInt16:3,UInt16:2,SInt32:5,UInt32:4,Float32:6,MathFunctions:DU,POINTER_TYPES:bQ});let CQ=0;class hQ extends nQ{constructor(){if(super(),"RefCounted"==this.constructor.name)throw new Error("RefCounted should not be instantiated directly.");this.__id=++CQ,this.__refs=[],this.__destroyed=!1}getId(){return this.__id}numRefs(){return this.__refs.length}addRef(F){if(!F)throw new Error("Error in RefCounted.addRef: Must provide a referer");return this.__refs.push(F),!0}removeRef(F){if(!F)throw new Error("Error in RefCounted.removeRef: Must provide a referer");const U=this.__refs.indexOf(F);if(-1==U)throw new Error("Error in RefCounted.removeRef: referer not found in refs list.");this.__refs.splice(U,1),0==this.__refs.length&&this.destroy()}getRefer(F){return this.__refs[F]}getRefIndex(F){return this.__refs.indexOf(F)}isDestroyed(){return this.__destroyed}destroy(){this.__destroyed=!0,this.emit("destructing",{})}}class WQ extends nQ{constructor(){super(),this.__params=[],this.__paramMapping={},this.deprecatedParamMapping={},this.__paramEventListenerIDs={}}numParameters(){return console.warn("Deprecated. Use #getNumParameters instead."),this.getNumParameters()}getNumParameters(){return this.__params.length}getParameters(){return this.__params}getParameterIndex(F){return this.__paramMapping[F]}getParameterByIndex(F){return this.__params[F]}hasParameter(F){return F in this.__paramMapping}addParameterDeprecationMapping(F,U){this.deprecatedParamMapping[F]=U}getParameter(F){let U=this.__paramMapping[F];if(null==U){const Q=this.deprecatedParamMapping[F];if(!Q)return null;console.warn(`Parameter name ${F} is now deprecated. Please use ${Q} instead.`),U=this.__paramMapping[Q]}return this.__params[U]}__parameterValueChanged(F){this.emit("parameterValueChanged",F)}addParameter(F){return this.insertParameter(F,this.__params.length)}insertParameter(F,U){const Q=F.getName();null!=this.__paramMapping[Q]&&(console.warn("Replacing Parameter:"+Q),this.removeParameter(Q)),F.setOwner(this),this.__paramEventListenerIDs[Q]=F.on("valueChanged",(U=>{const Q={param:F};for(const F in U)Q[F]=U[F];this.__parameterValueChanged(Q)})),this.__params.splice(U,0,F);for(let F=U;F<this.__params.length;F++)this.__paramMapping[this.__params[F].getName()]=F;return this.emit("parameterAdded",{name:Q}),F}removeParameter(F){if(null==this.__paramMapping[F])throw new Error("Unable to remove Parameter:"+F);const U=this.__paramMapping[F];this.__params[this.__paramMapping[F]].removeListenerById("valueChanged",this.__paramEventListenerIDs[F]),this.__params.splice(U,1),delete this.__paramMapping[F];for(let F=U;F<this.__params.length;F++)this.__paramMapping[this.__params[F].getName()]=F;this.emit("parameterRemoved",{name:F})}replaceParameter(F){const U=F.getName();if(null==this.__paramMapping[U])throw new Error("Unable to replace Parameter:"+paramName);const Q=this.__paramMapping[U];return this.removeParameter(U),this.insertParameter(F,Q),F}toJSON(F){const U={},Q={};let B=0;for(const U of this.__params){const l=U.toJSON(F);l&&(Q[U.getName()]=l,B++)}return B>0&&(U.params=Q),U}fromJSON(F,U){if(F.params)for(const Q in F.params){const B=F.params[Q],l=this.getParameter(Q);l?B.paramPath?U.resolvePath(B.paramPath,(F=>{this.replaceParameter(F)}),(F=>{console.warn("Unable to resolve shared parameter:"+B.paramPath)})):l.fromJSON(B,U):console.warn("Param not found:"+Q)}}readBinary(F,U){if(U.versions["zea-engine"].compare([0,0,3])>=0){const Q=F.loadUInt32();for(let B=0;B<Q;B++){const Q=F.loadStr(),B=F.loadStr();let l=this.getParameter(B);if(!l){if(l=PU.constructClass(Q,B),!l){console.error("Unable to construct prop:"+B+" of type:"+Q);continue}this.addParameter(l)}l.readBinary(F,U)}}}toString(){return JSON.stringify(this.toJSON(),null,2)}copyFrom(F,U){let Q=F.getNumParameters();for(;Q--;){const B=F.getParameterByIndex(Q),l=this.getParameter(B.getName());l?l.loadValue(B.getValue()):this.addParameter(B.clone(U))}}}class mQ{constructor(F,U=0,Q=!0){this.__data=F,this.__byteOffset=U,this.__dataView=new DataView(this.__data),this.__isMobileDevice=Q,this.utf8decoder=new TextDecoder}get isMobileDevice(){return this.__isMobileDevice}get data(){return this.__data}get byteLength(){return this.__dataView.byteLength}get remainingByteLength(){return this.__dataView.byteLength-this.__byteOffset}pos(){return this.__byteOffset}seek(F){this.__byteOffset=F}advance(F){this.__byteOffset+=F}loadUInt8(){const F=this.__dataView.getUint8(this.__byteOffset);return this.__byteOffset+=1,F}loadUInt16(){const F=this.__dataView.getUint16(this.__byteOffset,!0);return this.__byteOffset+=2,F}loadUInt32(){const F=this.__dataView.getUint32(this.__byteOffset,!0);return this.__byteOffset+=4,F}loadSInt32(){const F=this.__dataView.getInt32(this.__byteOffset,!0);return this.__byteOffset+=4,F}loadFloat16(){const F=this.loadUInt16();return DU.decode16BitFloat(F)}loadUFloat16(){const F=this.loadFloat16();return F<0?2048-F:F}loadFloat16From2xUInt8(){const F=this.__dataView.getFloat16(this.__byteOffset,!0);return this.__byteOffset+=2,F}loadUInt32From2xUFloat16(){return this.loadUFloat16()+4096*this.loadUFloat16()}loadSInt32From2xFloat16(){return this.loadFloat16()+2048*this.loadFloat16()}loadFloat32(){const F=this.__dataView.getFloat32(this.__byteOffset,!0);return this.__byteOffset+=4,F}loadUInt8Array(F,U=!1){null==F&&(F=this.loadUInt32());const Q=new Uint8Array(this.__data,this.__byteOffset,F);this.__byteOffset+=F;this.__byteOffset;return Q}loadUInt16Array(F,U=!1){if(null==F&&(F=this.loadUInt32()),0==F)return new Uint16Array;let Q;if(this.readPad(2),this.__isMobileDevice){Q=new Uint16Array(F);for(let U=0;U<F;U++)Q[U]=this.__dataView.getUint16(this.__byteOffset,!0),this.__byteOffset+=2}else Q=new Uint16Array(this.__data,this.__byteOffset,F),this.__byteOffset+=2*F;return Q}loadUInt32Array(F,U=!1){if(null==F&&(F=this.loadUInt32()),0==F)return new Uint32Array;let Q;if(this.readPad(4),this.__isMobileDevice){Q=new Uint32Array(F);for(let U=0;U<F;U++)Q[U]=this.__dataView.getUint32(this.__byteOffset,!0),this.__byteOffset+=4}else Q=new Uint32Array(this.__data,this.__byteOffset,F),this.__byteOffset+=4*F;return Q}loadFloat32Array(F,U=!1){if(null==F&&(F=this.loadUInt32()),0==F)return new Float32Array;let Q;if(this.readPad(4),this.__isMobileDevice){Q=new Float32Array(F);for(let U=0;U<F;U++)Q[U]=this.__dataView.getFloat32(this.__byteOffset,!0),this.__byteOffset+=4}else Q=new Float32Array(this.__data,this.__byteOffset,F),this.__byteOffset+=4*F;return Q}loadStr(){const F=this.loadUInt32(),U=new Uint8Array(this.__data,this.__byteOffset,F);return this.__byteOffset+=F,this.utf8decoder.decode(U)}loadStrArray(){const F=this.loadUInt32(),U=[];for(let Q=0;Q<F;Q++)U[Q]=this.loadStr();return U}loadSInt32Vec2(){const F=this.loadSInt32(),U=this.loadSInt32();return new OU(F,U)}loadUInt32Vec2(){const F=this.loadUInt32(),U=this.loadUInt32();return new OU(F,U)}loadFloat16Vec2(){const F=this.loadFloat16(),U=this.loadFloat16();return new OU(F,U)}loadFloat32Vec2(){const F=this.loadFloat32(),U=this.loadFloat32();return new OU(F,U)}loadFloat16Vec3(){const F=this.loadFloat16(),U=this.loadFloat16(),Q=this.loadFloat16();return new qU(F,U,Q)}loadFloat32Vec3(){const F=this.loadFloat32(),U=this.loadFloat32(),Q=this.loadFloat32();return new qU(F,U,Q)}loadFloat16Quat(){const F=this.loadFloat16(),U=this.loadFloat16(),Q=this.loadFloat16(),B=this.loadFloat16();return new VQ(F,U,Q,B)}loadFloat32Quat(){const F=this.loadFloat32(),U=this.loadFloat32(),Q=this.loadFloat32(),B=this.loadFloat32();return new VQ(F,U,Q,B)}loadRGBFloat32Color(){const F=this.loadFloat32(),U=this.loadFloat32(),Q=this.loadFloat32();return new UQ(F,U,Q)}loadRGBAFloat32Color(){const F=this.loadFloat32(),U=this.loadFloat32(),Q=this.loadFloat32(),B=this.loadFloat32();return new UQ(F,U,Q,B)}loadRGBUInt8Color(){const F=this.loadUInt8(),U=this.loadUInt8(),Q=this.loadUInt8();return new UQ(F/255,U/255,Q/255)}loadRGBAUInt8Color(){const F=this.loadUInt8(),U=this.loadUInt8(),Q=this.loadUInt8(),B=this.loadUInt8();return new UQ(F/255,U/255,Q/255,B/255)}loadBox2(){return new tQ(this.loadFloat32Vec2(),this.loadFloat32Vec2())}loadBox3(){return new iQ(this.loadFloat32Vec3(),this.loadFloat32Vec3())}readPad(F){const U=this.__byteOffset%F;0!=U&&(this.__byteOffset+=F-U)}}let JQ=0;class XQ extends WQ{constructor(F){super(),this.__name=F||"",this.__path=[this.__name],this.__ownerItem=void 0,this.__selectable=!0,this.__selected=!1,this.__metaData={},JQ++}static getNumBaseItems(){return JQ}getName(){return this.__name}setName(F){if(this.__name!=F){const U=this.__name;this.__name=F,this.__updatePath(),this.emit("nameChanged",{newName:F,oldName:U})}}__updatePath(){null==this.__ownerItem?this.__path=[this.__name]:this.__path=[...this.__ownerItem.getPath(),this.__name]}getPath(){return this.__path}resolvePath(F,U=0){if(0==U&&("."!=F[0]&&F[0]!=this.__name||U++),U==F.length)return this;if(">"==F[U]&&U==F.length-1)return this.getParameter(F[U+1]);const Q=this.getParameter(F[U]);if(Q)return Q;throw new Error("Invalid path:"+F+"["+U+"] member not found")}getOwner(){return this.__ownerItem}setOwner(F){this.__ownerItem!==F&&(this.__ownerItem=F,this.__updatePath())}getSelectable(){return this.__selectable}setSelectable(F){return this.__selectable!=F&&(this.__selectable=F,this.emit("selectabilityChanged",{value:this.__selectable}),!0)}isSelected(){return this.__selected}getSelected(){return this.__selected}setSelected(F){this.__selected=F,this.emit("selectedChanged",{selected:this.__selected})}getMetadata(F){return this.__metaData[F]}hasMetadata(F){return F in this.__metaData}setMetadata(F,U){this.__metaData[F]=U}deleteMetadata(F){delete this.__metaData[F]}toJSON(F){const U=super.toJSON(F);return U.name=this.__name,U.type=PU.getBlueprintName(this),U}fromJSON(F,U){F.name&&(this.__name=F.name),super.fromJSON(F,U)}readBinary(F,U){F.loadStr();this.setName(F.loadStr()),super.readBinary(F,U)}clone(F){throw new Error(this.constructor.name+" does not implement its clone method")}copyFrom(F,U){super.copyFrom(F,U),this.setName(F.getName())}}const EQ=function(F){return F.substring(0,F.lastIndexOf("/"))+"/"},LQ=function(F,U,Q,B,l){try{const l=new XMLHttpRequest;l.responseType=U,l.addEventListener("timeout",(function(U){throw new Error("The request for "+F+" timed out.")})),l.addEventListener("error",(function(U){throw new Error("The request for "+F+": xhr.readyState:"+l.readyState)})),l.addEventListener("abort",(function(U){throw new Error("The request for "+F+": xhr.readyState:"+l.readyState)})),l.addEventListener("loadend",(function(F){200==l.status?Q(l):B(l.statusText)})),l.open("GET",F,!0),l.send()}catch(F){B(F)}},xQ=function(F,U,Q,B){LQ(F,"text",(F=>{U(F.responseText)}),(U=>{if(null==Q)throw new Error("Unable to XHR File:"+F);Q(U)}))},oQ=function(F,U,Q,B){LQ(F,"json",(F=>{U(F.response,F)}),(U=>{if(null==Q)throw new Error("Unable to XHR File:"+F);Q(U)}))},yQ=function(F,U,Q,B){LQ(F,"document",(F=>{U(F.responseXML)}),(U=>{if(null==Q)throw new Error("Unable to XHR File:"+F);Q(U)}))},uQ=function(F,U,Q,B){LQ(F,"arraybuffer",(F=>{U(F.response)}),(U=>{if(null==Q)throw new Error("Unable to XHR File:"+F);Q(U)}))},NQ={OP_WRITE:0,OP_READ_WRITE:1};class rQ extends nQ{constructor(F,U,Q){super(),this.__name=F,this.__value=U,this.__dataType=Q||void 0,this.__boundOps=[],this.__dirtyOpIndex=0,this.__cleaning=!1}clone(){return new rQ(this.__name,this.__value,this.__dataType)}getName(){return this.__name}setName(F){if(F===this.__name)return this;const U=this.__name;this.__name=F,this.emit("nameChanged",{newName:this.__name,prevName:U})}getOwner(){return this.ownerItem}setOwner(F){this.ownerItem=F}getPath(){return this.ownerItem&&this.ownerItem.getName?[...this.ownerItem.getPath(),this.__name]:[this.__name]}getDataType(){return this.__dataType}bindOperatorOutput(F,U=-1){-1==U&&(U=this.__boundOps.length),this.__boundOps.splice(U,0,F);for(let F=U;F<this.__boundOps.length;F++)this.__boundOps[F].setParamBindIndex(F);return this.__findFirstOP_WRITE(),this.setDirty(U)||this.emit("valueChanged",{mode:0}),U}unbindOperator(F){const U=F.getParamBindIndex();this.__boundOps.splice(U,1);for(let F=U;F<this.__boundOps.length;F++)this.__boundOps[F].setParamBindIndex(F);return this.__findFirstOP_WRITE(),this.setDirty(Math.max(0,U-1)),U}__findFirstOP_WRITE(){if(this.__firstOP_WRITE=this.__boundOps.length,this.__boundOps.length>0)for(this.__firstOP_WRITE--;this.__firstOP_WRITE>0&&this.__boundOps[this.__firstOP_WRITE].getMode()!=NQ.OP_WRITE;this.__firstOP_WRITE--);}setDirty(F){if(F<this.__dirtyOpIndex){let U=this.__firstOP_WRITE;if(U<=F){for(this.__dirtyOpIndex=U,U++;U<this.__boundOps.length;U++)U!=F&&this.__boundOps[U].getOperator().setDirty();return this.emit("valueChanged",{mode:0}),!0}}return!1}isDirty(){return this.__dirtyOpIndex<this.__boundOps.length}getDirtyBindingIndex(){return this.__dirtyOpIndex}setCleanFromOp(F,U){if(U!=this.__dirtyOpIndex)if(U<this.__dirtyOpIndex)console.log("Parameter is cleaned when it was already clean to that point in the stack:",this.getPath());else if(this.__boundOps[U].getMode()!=NQ.OP_WRITE){const F=PU.getBlueprintName(this),Q=this.__boundOps[U].getOperator(),B=PU.getBlueprintName(Q);throw new Error(`Parameter: ${F} with name: ${this.getName()} is not cleaning all outputs during evaluation of op: ${B} with name: ${Q.getName()}`)}this.__value=F,this.__dirtyOpIndex=U+1}getValueFromOp(F){return this.__dirtyOpIndex<F&&this._clean(F),this.__value}_clean(F){if(this.__cleaning)throw new Error(`Cycle detected when cleaning: ${this.getPath()}. Operators need to be rebound to fix errors`);for(this.__cleaning=!0;this.__dirtyOpIndex<F;){const F=this.__dirtyOpIndex;if(this.__boundOps[this.__dirtyOpIndex].getOperator().evaluate(),F==this.__dirtyOpIndex){const F=this.__boundOps[this.__dirtyOpIndex].getOperator(),U=PU.getBlueprintName(F);console.warn(`Operator: ${U} with name: ${F.getName()} is not cleaning its outputs during evaluation`),this.__dirtyOpIndex++}}this.__cleaning=!1}getValue(F){return null!=F&&console.warn("WARNING in Parameter.setValue: 'mode' is deprecated."),this.__dirtyOpIndex<this.__boundOps.length&&this._clean(this.__boundOps.length),this.__value}setValue(F){if(null==F)throw"undefined was passed into the set value for param:"+this.getName();if(this.__boundOps.length>0)for(let U=this.__boundOps.length-1;U>=0;U--){const Q=this.__boundOps[U];if(F=Q.backPropagateValue(F),0==Q.getMode())return}(F.fromJSON||this.__value!=F)&&(this.__value=F,this.emit("valueChanged",{}))}loadValue(F){this.__value=F}toJSON(F){return this.__value.toJSON?{value:this.__value.toJSON(F)}:{value:this.__value}}fromJSON(F,U){null!=F.value?(F.value.type&&null==this.__value&&(this.__value=PU.constructClass(F.value.type)),null!=this.__value&&this.__value.fromJSON?this.__value.fromJSON(F.value,U):this.__value=F.value,this.emit("valueChanged",{})):console.warn("Invalid Parameter JSON")}readBinary(F,U){console.warn(`TODO: Parameter: ${this.constructor.name} with name: ${this.__name} does not implement readBinary`)}clone(){const F=this.__value;F.clone&&(F=F.clone());return new rQ(this.__name,F,this.__dataType)}}class pQ extends rQ{constructor(F,U=0,Q,B){super(F,U,"Number"),Q&&!Array.isArray(Q)&&console.error("Range value must be an array of 2 numbers."),this.__range=Q,this.__step=B}getRange(){return this.__range}setRange(F){this.__range=F}getStep(){return this.__step}setStep(F){this.__step=F}toJSON(F){const U=super.toJSON(F);return this.__range&&(U.range=this.__range),this.__step&&(U.step=this.__step),U}fromJSON(F,U){super.fromJSON(F,U),F.range&&(this.__range=F.range),F.step&&(this.__step=F.step)}readBinary(F,U){this.__value=F.loadFloat32()}clone(){return new pQ(this.__name,this.__value,this.__range,this.__step)}}PU.register("NumberParameter",pQ),PU.register("Property_SInt32",class extends pQ{readBinary(F,U){this.__value=F.loadSInt32()}}),PU.register("Property_UInt32",class extends pQ{readBinary(F,U){this.__value=F.loadUInt32()}}),PU.register("Property_Float32",class extends pQ{readBinary(F,U){this.__value=F.loadFloat32()}});class TQ extends pQ{constructor(F,U,Q){super(F,U,[0,Q.length],1),this.choices=Q}getChoices(){return this.choices}setValue(F){"string"==typeof F?super.setValue(this.choices.indexOf(F)):super.setValue(F)}}PU.register("MultiChoiceParameter",TQ);class YQ extends rQ{constructor(F,U){super(F,U,"Boolean")}readBinary(F,U){this.__value=0!=F.loadUInt8()}clone(){return new YQ(this.__name,this.__value)}}PU.register("BooleanParameter",YQ),PU.register("Property_Boolean",YQ);class kQ extends rQ{constructor(F,U,Q){super(F,U||new OU,"Vec2"),this.__range=Q}getRange(){return this.__range}__setRange(F){this.__range=F,this.emit("rangeChanged",{range:F})}readBinary(F,U){this.__value.readBinary(F)}clone(){return new kQ(this.__name,this.__value.clone())}}PU.register("Vec2Parameter",kQ);class HQ extends rQ{constructor(F,U,Q){super(F,U||new qU,"Vec3")}readBinary(F,U){this.__value.readBinary(F)}clone(){return new HQ(this.__name,this.__value.clone())}}PU.register("Vec3Parameter",HQ),PU.register("Property_Vec3_32f",HQ);class MQ extends rQ{constructor(F,U){super(F,U||new $U,"Vec4")}readBinary(F,U){this.__value.readBinary(F)}clone(){return new MQ(this.__name,this.__value.clone())}}PU.register("Vec4Parameter",MQ);class AQ extends rQ{constructor(F,U){super(F,U||new UQ,"Color")}readBinary(F,U){const Q=F.loadRGBAFloat32Color();Q.applyGamma(2.2),this.__value=Q}clone(){return new AQ(this.__name,this.__value.clone())}}PU.register("ColorParameter",AQ);class vQ extends rQ{constructor(F,U){super(F,U||new VQ,"Quat")}readBinary(F,U){this.__value.readBinary(F)}clone(){return new vQ(this.__name,this.__value.clone())}}PU.register("QuatParameter",vQ);class zQ extends rQ{constructor(F,U){super(F,U||new BQ,"Mat3")}readBinary(F,U){this.__value.readBinary(F)}clone(){return new zQ(this.__name,this.__value.clone())}}PU.register("Mat3Parameter",zQ);class DQ extends rQ{constructor(F,U){super(F,U||new lQ,"Mat4")}readBinary(F,U){this.__value.readBinary(F)}clone(){return new DQ(this.__name,this.__value.clone())}}PU.register("Mat4Parameter",DQ);class KQ extends rQ{constructor(F,U){super(F,U||new RQ,"Xfo")}readBinary(F,U){this.__value.readBinary(F)}clone(){return new KQ(this.__name,this.__value.clone())}}PU.register("XfoParameter",KQ);class wQ extends rQ{constructor(F,U){super(F,U,"BaseImage")}toJSON(F){const U=super.toJSON(F);return this.__value&&(U.imageType=PU.getBlueprintName(this.__value)),U}fromJSON(F,U){return F.imageType&&(this.__value=PU.constructClass(F.imageType)),super.fromJSON(F,U)}clone(){return new wQ(this.__name,this.__value)}}PU.register("ImageParameter",wQ);class fQ extends rQ{constructor(F,U=[]){super(F,U,"String[]"),this.multiLine=!1}readBinary(F,U){this.__value=F.loadStrArray()}clone(){return new fQ(this.__name,this.__value)}}PU.register("StringListParameter",fQ),PU.register("Property_StringList",fQ);class PQ extends rQ{constructor(F,U=""){super(F,U,"String"),this.multiLine=!1}setMultiLine(F){this.multiLine=F}getMultiLine(){return this.multiLine}readBinary(F,U){this.__value=F.loadStr()}clone(){return new PQ(this.__name,this.__value)}}PU.register("StringParameter",PQ),PU.register("Property_String",PQ);class jQ extends PQ{constructor(F,U=""){super(F,U,"String"),this.lang="js"}setLanguage(F){this.lang=F}getLanguage(){return this.lang}clone(){return new jQ(this.__name,this.__value)}}PU.register("CodeParameter",jQ);class _Q extends rQ{constructor(F,U){super(F,[]),this.__dataType=U}__filter(F){return!0}getCount(){return this.__value.length}getElement(F){return this.__value[F]}setElement(F,U){this.__value[F]=U,this.emit("valueChanged",{})}addElement(F){if(null==F)F=new this.__dataType;else if(!this.__filter(F))return;return this.__value.push(F),this.emit("elementAdded",{elem:F,index:this.__value.length-1}),this.emit("valueChanged",{}),F}removeElement(F){const U=this.__value[F];this.__value.splice(F,1),this.emit("elementRemoved",{elem:U,index:F}),this.emit("valueChanged",{})}insertElement(F,U){this.__filter(U)&&(this.__value.splice(F,0,U),this.emit("elementAdded",{elem:U,index:F}),this.emit("valueChanged",{}))}toJSON(F){const U=[];for(const Q of this.__value)"string"==typeof this.__dataType?U.push(Q):U.push(Q.toJSON(F));return{items:U}}fromJSON(F,U){if(null!=F.items){this.__value=[];for(let Q=0;Q<F.items.length;Q++){let B;"string"==typeof this.__dataType?B=F.items[Q]:(console.log(this.__dataType),B=new this.__dataType,B.fromJSON(F.items[Q],U)),this.__value.push(B),this.emit("elementAdded",{elem:B,index:this.__value.length-1})}this.emit("valueChanged",{mode:0})}else console.warn("Invalid Parameter JSON")}clone(){const F=this.__value.slice(0),U=new _Q(this.__name,this.__dataType);return U.setValue(F),U}destroy(){for(let F=0;F<this.__value.length;F++)this.__value[F]instanceof rQ&&this.__value[F].destroy(),this.removeElement(F)}}PU.register("ListParameter",_Q);class OQ extends rQ{constructor(F){super(F,{},"Struct"),this.__members=[]}_addMember(F){return this.__value[F.getName()]=F.getValue(),F.on("valueChanged",(()=>{this.__value[F.getName()]=F.getValue()})),this.__members.push(F),this.emit("valueChanged",{}),F}getParameter(F){for(const U of this.__members)if(U.getName()==F)return U}getMember(F){return this.getParameter(F)}getMemberNames(){const F=[];for(let U=0;U<this.__members.length;U++){const Q=this.__members[U];null!=Q&&(F[U]=Q.getName())}return F}toJSON(F){const U=[];for(const Q of this.__members)U.push(Q.toJSON(F));return{members:U}}fromJSON(F,U){if(null!=F.members)for(let Q=0;Q<F.members.length;Q++)F.members[Q]&&this.__members[Q].fromJSON(F.members[Q],U);else console.warn("Invalid Parameter JSON")}destroy(){super.destroy();for(const F of this.__members)F.destroy()}}PU.register("StructParameter",OQ);class qQ extends rQ{constructor(F,U){super(F,void 0,"TreeItem"),this.__filterFn=U,this.listenerIDs={}}__emitTreeItemGlobalXfoChanged(F){this.emit("treeItemGlobalXfoChanged",F)}setOwner(F){this.__owner=F}getOwner(){return this.__owner}setFilterFn(){this.__filterFn=filterFn}getFilterFn(){return this.__filterFn}setValue(F){if(this.__filterFn&&!this.__filterFn(F))return!1;this.__value!==F&&(this.__value&&this.__value.removeListenerById("globalXfoChanged",this.listenerIDs.globalXfoChanged),this.__value=F,this.__value&&(this.listenerIDs.globalXfoChanged=this.__value.on("globalXfoChanged",(F=>{this.__emitTreeItemGlobalXfoChanged(F)}))),this.emit("valueChanged",{}))}toJSON(F){return{value:F.makeRelative(this.__value.getPath())}}fromJSON(F,U){null!=F.value?U.resolvePath(F.value,(F=>{this.setValue(F)}),(()=>{console.warn("Unable to resolve tree item parameter value:"+pj.paramPath)})):console.warn("Invalid Parameter JSON")}clone(){return new qQ(this.__name,this.__filterFn)}destroy(){this.__value&&this.__value.removeListenerById("globalXfoChanged",this.listenerIDs.globalXfoChanged)}}PU.register("TreeItemParameter",qQ);class $Q extends rQ{constructor(F,U){super(F,void 0,"BaseItem"),this.__items=new Set,this.__filterFn=U}setFilterFn(F){this.__filterFn=F}getFilterFn(){return this.__filterFn}getItem(F){return Array.from(this.__items)[F]}addItem(F,U=!0){if(this.__filterFn&&!this.__filterFn(F))return console.warn("ItemSet __filterFn rejecting item:",F.getPath()),!1;this.__items.add(F);const Q=Array.from(this.__items).indexOf(F);return this.emit("itemAdded",{item:F,index:Q}),U&&this.emit("valueChanged",{}),Q}addItems(F,U=!0){F.forEach((F=>this.addItem(F,!1))),U&&this.emit("valueChanged",{})}removeItem(F,U=!0){const Q=Array.from(this.__items)[F];return this.__items.delete(Q),this.emit("itemRemoved",{item:Q,index:F}),U&&this.emit("valueChanged",{}),Q}setItems(F,U=!0){for(let U=this.__items.length-1;U>=0;U--){const Q=this.__items[U];F.has(Q)||this.removeItem(Q,!1)}for(const U of F)this.__items.has(U)||this.addItem(U,!1);U&&this.emit("valueChanged",{})}clearItems(F=!0){this.__items.clear(),F&&this.emit("valueChanged",{})}getNumItems(){return Array.from(this.__items).length}getValue(){return this.__items}toJSON(F){return{}}fromJSON(F,U){}clone(){return new $Q(this.__name,this.__filterFn)}}class FB extends rQ{constructor(F,U){super(F,void 0,"Geometry"),this.listenerIDs={},this.setValue(U)}__emitBoundingBoxDirtied(F){this.emit("boundingBoxChanged",F)}setValue(F){this.__value!==F&&(this.__value&&this.__value.removeListenerById("boundingBoxChanged",this.listenerIDs.boundingBoxChanged),this.__value=F,this.__value&&(this.listenerIDs.boundingBoxChanged=this.__value.on("boundingBoxChanged",(F=>{this.__emitBoundingBoxDirtied(F)}))),this.emit("valueChanged",{}))}loadValue(F){this.__value&&this.__value.removeListenerById("boundingBoxChanged",this.listenerIDs.boundingBoxChanged),this.__value=F,this.__value&&(this.listenerIDs.boundingBoxChanged=this.__value.on("boundingBoxChanged",(F=>{this.__emitBoundingBoxDirtied(F)})))}toJSON(F){return super.toJSON(F)}fromJSON(F,U){return super.fromJSON(F,U)}clone(){return new FB(this.__name,this.__value)}destroy(){this.__value&&this.__value.removeListenerById("boundingBoxChanged",this.listenerIDs.boundingBoxChanged)}}PU.register("GeometryParameter",FB);class UB extends nQ{constructor(F){super(),this.listenerIDs={},this.__name=F,this._param=void 0}getName(){return this.__name}setOperator(F){this._op=F}getOperator(){return this._op}isConnected(){return null!=this._param}getParam(){return this._param}_paramValueChanged(F){this._op&&this._op.setDirty(this.__name)}setParam(F){this._param&&this._param.removeListenerById("valueChanged",this.listenerIDs.valueChanged),this._param=F,this._param&&(this.listenerIDs.valueChanged=this._param.on("valueChanged",(F=>{this._paramValueChanged(F)}))),this.emit("paramSet",{param:this._param})}getValue(){if(this._param)return this._param.getValue()}setValue(F){this._param&&this._param.setValue(F)}toJSON(F){const U=this._param?this._param.getPath():"";return{name:this.__name,paramPath:F&&F.makeRelative?F.makeRelative(U):U}}fromJSON(F,U){F.paramPath&&U.resolvePath(F.paramPath,(F=>{this.setParam(F)}),(U=>{console.warn("OperatorInput: '"+this.getName()+"'. Unable to connect to:"+F.paramPath)}))}detach(){this._param&&this.__value.removeListenerById("valueChanged",this.listenerIDs.valueChanged)}reattach(){this.detached=!1,this._param&&(this.listenerIDs.valueChanged=this._param.on("valueChanged",(F=>{this._paramValueChanged(F)})))}}class QB extends nQ{constructor(F,U=NQ.OP_WRITE){super(),this.__name=F,this._mode=U,this._param=void 0,this._paramBindIndex=-1,this.detached=!1}getName(){return this.__name}setOperator(F){this._op=F}getOperator(){return this._op}getMode(){return this._mode}isConnected(){return null!=this._param}getParam(){return this._param}setParam(F,U=-1){this._param&&this._param.unbindOperator(this),this._param=F,this._param&&(this._paramBindIndex=this._param.bindOperatorOutput(this,U)),this.emit("paramSet",{param:this._param})}getParamBindIndex(){return this._paramBindIndex}setParamBindIndex(F){this._paramBindIndex=F}setDirty(){this._param&&this._param.setDirty(this._paramBindIndex)}getValue(){if(this._param)return this._param.getValueFromOp(this._paramBindIndex);throw new Error("Cannot call getValue on OperatorOutput that is not connected:",this.__name)}backPropagateValue(F){return this._param&&(F=this._op.backPropagateValue(F,this)),F}setClean(F){this._param&&this._param.setCleanFromOp(F,this._paramBindIndex)}toJSON(F){const U=this._param?this._param.getPath():"";return{name:this.__name,paramPath:F&&F.makeRelative?F.makeRelative(U):U,paramBindIndex:this._paramBindIndex}}fromJSON(F,U){F.paramPath&&U.resolvePath(F.paramPath,(U=>{this.setParam(U,F.paramBindIndex)}),(U=>{console.warn("OperatorOutput: '"+this.getName()+"'. Unable to connect to:"+F.paramPath)}))}detach(){this.detached=!0,this._paramBindIndex=this._param?this._param.unbindOperator(this):-1}reattach(){this.detached=!1,this._param&&(this._paramBindIndex=this._param.bindOperatorOutput(this,this._paramBindIndex))}rebind(){this._param&&(this._param.unbindOperator(this),this._paramBindIndex=this._param.bindOperatorOutput(this))}}class BB extends XQ{constructor(F){super(F),this.__inputs=new Map,this.__outputs=new Map}setDirty(){this.__outputs.forEach((F=>F.setDirty()))}__parameterValueChanged(F){super.__parameterValueChanged(F),this.setDirty()}addInput(F){if("string"==typeof F)F=new UB(F);else if(!(F instanceof UB))throw new Error("addInput only accepts string or OperatorInput");return F.setOperator(this),this.__inputs.set(F.getName(),F),this.setDirty(),F}removeInput(F){if("string"==typeof F&&(F=this.getInput(F)),!(F instanceof UB))throw new Error("removeInput only accepts string or OperatorInput");F.getParam()&&F.setParam(null),this.__inputs.delete(F.getName())}getNumInputs(){return this.__inputs.size}getInputByIndex(F){return Array.from(this.__inputs.values())[F]}getInput(F){return this.__inputs.get(F)}addOutput(F){if("string"==typeof F)F=new QB(F);else if(!(F instanceof QB))throw new Error("addOutput only accepts string or OperatorOutput");if(F.setOperator(this),this.getOutput(F.getName()))throw new Error("Operator output already exists "+F.getName());return this.__outputs.set(F.getName(),F),this.setDirty(),F}removeOutput(F){if("string"==typeof F&&(F=this.getOutput(F)),!(F instanceof QB))throw new Error("removeOutput only accepts string or OperatorInput");F.getParam()&&F.setParam(null),this.__outputs.delete(F.getName())}getNumOutputs(){return this.__outputs.size}getOutputByIndex(F){return Array.from(this.__outputs.values())[F]}getOutput(F){return this.__outputs.get(F)}evaluate(){throw new Error("Not yet implemented")}backPropagateValue(F){return F}toJSON(F){const U=super.toJSON(F);U.type=PU.getBlueprintName(this);const Q=[];this.__inputs.forEach((U=>{Q.push(U.toJSON(F))})),U.inputs=Q;const B=[];return this.__outputs.forEach((U=>{B.push(U.toJSON(F))})),U.outputs=B,U}fromJSON(F,U){super.fromJSON(F,U),F.inputs&&F.inputs.forEach(((F,Q)=>{let B;F.name?(B=this.getInput(F.name),B||(B=this.addInput(F.name))):B=this.getInputByIndex(Q),B.fromJSON(F,U)})),F.outputs&&F.outputs.forEach(((F,Q)=>{let B;F.name?(B=this.getOutput(F.name),B||(B=this.addOutput(F.name))):B=this.getOutputByIndex(Q),B.fromJSON(F,U)}))}detach(){this.__inputs.forEach((F=>F.detach())),this.__outputs.forEach((F=>F.detach()))}reattach(){this.__inputs.forEach((F=>F.reattach())),this.__outputs.forEach((F=>F.reattach()))}rebind(){this.__outputs.forEach((F=>F.rebind()))}}class lB extends BB{constructor(F,U){super("CalcGlobalXfoOperator"),this.addInput(new UB("ParentGlobal")),this.addInput(new UB("LocalXfo")).setParam(U),this.addOutput(new QB("GlobalXfo")).setParam(F)}backPropagateValue(F){const U=this.getInput("LocalXfo").getParam(),Q=this.getInput("ParentGlobal");if(Q.isConnected()){const B=Q.getValue();U.setValue(B.inverse().multiply(F))}else U.setValue(F)}evaluate(){const F=this.getInput("LocalXfo").getValue(),U=this.getInput("ParentGlobal"),Q=this.getOutput("GlobalXfo");if(U.isConnected()){const B=U.getValue();Q.setClean(B.multiply(F),this)}else Q.setClean(F,this)}}class VB extends rQ{constructor(F,U){super(F,new iQ,"Box3"),this.treeItem=U,this.dirty=!0}setDirty(){this.dirty=!0,this.emit("valueChanged")}getValue(){return this.dirty&&(this.__value=this.treeItem._cleanBoundingBox(this.__value)),this.__value}}class dB extends XQ{constructor(F){super(F),this.disableBoundingBox=!1,this.__visibleCounter=1,this.__visible=!0,this.__highlightMapping={},this.__highlights=[],this.__childItems=[],this.__childItemsEventHandlers=[],this.__childItemsMapping={},this.__visibleParam=this.addParameter(new YQ("Visible",!0)),this.__localXfoParam=this.addParameter(new KQ("LocalXfo",new RQ)),this.__globalXfoParam=this.addParameter(new KQ("GlobalXfo",new RQ)),this.__boundingBoxParam=this.addParameter(new VB("BoundingBox",this)),this.globalXfoOp=new lB(this.__globalXfoParam,this.__localXfoParam),this.__globalXfoParam.on("valueChanged",(F=>{this._setBoundingBoxDirty(),this.emit("globalXfoChanged",F)})),this.__visibleParam.on("valueChanged",(()=>{this.__visibleCounter+=this.__visibleParam.getValue()?1:-1,this.__updateVisibility()}))}setOwner(F){if(this.__ownerItem){this.__ownerItem.isVisible()||this.__visibleCounter++;const F=this.__ownerItem.getChildIndex(this);F>=0&&this.__ownerItem.__unbindChild(F,this)}super.setOwner(F),this.__ownerItem?(this.__ownerItem.isVisible()||this.__visibleCounter--,this.globalXfoOp.getInput("ParentGlobal").setParam(this.__ownerItem.getParameter("GlobalXfo"))):this.globalXfoOp.getInput("ParentGlobal").setParam(null),this.__updateVisibility()}__updatePath(){super.__updatePath();for(const F of this.__childItems)F&&F.__updatePath()}getParentItem(){return this.getOwner()}setParentItem(F){this.setOwner(F)}getLocalXfo(){return console.warn("Deprecated. use \"getParameter('LocalXfo').getValue()\""),this.__localXfoParam.getValue()}setLocalXfo(F){console.warn("Deprecated. use \"getParameter('LocalXfo').setValue(xfo)\""),this.__localXfoParam.setValue(F)}getGlobalXfo(){return console.warn("Deprecated. use \"getParameter('GlobalXfo').getValue()\""),this.__globalXfoParam.getValue()}setGlobalXfo(F){console.warn("Deprecated. use \"getParameter('GlobalXfo').setValue(xfo)\""),this.__globalXfoParam.setValue(F)}getVisible(){return console.warn("Deprecated. Use #isVisible"),this.isVisible()}isVisible(){return this.__visibleCounter>0}setVisible(F){this.__visibleParam.setValue(F)}propagateVisibility(F){this.__visibleCounter+=F,this.__updateVisibility()}__updateVisibility(){const F=this.__visibleCounter>0;if(F!=this.__visible){this.__visible=F;for(const F of this.__childItems)F instanceof dB&&F.propagateVisibility(this.__visible?1:-1);return this.emit("visibilityChanged",{visible:F}),!0}return!1}addHighlight(F,U,Q=!1){if(F in this.__highlightMapping)if(this.__highlights[this.__highlights.length-1]!=F){const Q=this.__highlights.indexOf(F);this.__highlights.splice(Q,1),this.__highlights.push(F),this.emit("highlightChanged",{name:F,color:U})}else this.__highlightMapping[F].isEqual(U)||(this.__highlightMapping[F]=U,this.emit("highlightChanged",{name:F,color:U}));else this.__highlights.push(F),this.__highlightMapping[F]=U,this.emit("highlightChanged",{name:F,color:U});Q&&this.__childItems.forEach((B=>{B instanceof dB&&B.addHighlight(F,U,Q)}))}removeHighlight(F,U=!1){if(F in this.__highlightMapping)if(this.__highlights[this.__highlights.length-1]==F)if(this.__highlights.pop(),delete this.__highlightMapping[F],this.__highlights.length>0){const F=this.__highlights[this.__highlights.length-1],U=this.__highlightMapping[F];this.emit("highlightChanged",{name:F,color:U})}else this.emit("highlightChanged",{});else{const U=this.__highlights.indexOf(F);this.__highlights.splice(U,1),delete this.__highlightMapping[F]}U&&this.__childItems.forEach((Q=>{Q instanceof dB&&Q.removeHighlight(F,U)}))}getHighlight(){if(this.__highlights.length>0)return this.__highlightMapping[this.__highlights[this.__highlights.length-1]]}isHighlighted(){return this.__highlights.length>0}get boundingBox(){return console.warn("getter is deprecated. Please use 'getBoundingBox'"),this.getBoundingBox()}getBoundingBox(){return console.warn("getter is deprecated. Please use 'getParameter('BoundingBox').getValue()'"),this.__boundingBoxParam.getValue()}_cleanBoundingBox(F){return F.reset(),this.__childItems.forEach((U=>{U instanceof dB&&U.isVisible()&&F.addBox3(U.getParameter("BoundingBox").getValue())})),F}_childBBoxChanged(){this._setBoundingBoxDirty()}_setBoundingBoxDirty(){this.__boundingBoxParam&&this.__boundingBoxParam.setDirty()}getChildren(){return this.__childItems}numChildren(){return console.warn("Deprecated. Use #getNumChildren"),this.__childItems.length}getNumChildren(){return this.__childItems.length}generateUniqueName(F){if(!(F in this.__childItemsMapping))return F;let U=1;F.length>4&&!Number.isNaN(parseInt(F.substring(F.length-4)))?U=parseInt(F.substr(F.length-4)):F.length>3&&!Number.isNaN(parseInt(F.substring(F.length-3)))?U=parseInt(F.substr(F.length-3)):F.length>2&&!Number.isNaN(parseInt(F.substring(F.length-2)))&&(U=parseInt(F.substr(F.length-2)));const Q=[];for(const F of this.__childItems)F&&Q.push(F.getName());let B=F;for(;;){let l=""+U;for(;l.length<2;)l="0"+l;if(B=F+l,!Q.includes(B))break;U++}return B}__updateMapping(F){for(let U=F;U<this.__childItems.length;U++)this.__childItemsMapping[this.__childItems[U].getName()]=U}_childNameChanged(F){const U=this.__childItemsMapping[F.oldName];delete this.__childItemsMapping[F.oldName],this.__childItemsMapping[F.newName]=U}insertChild(F,U,Q=!1,B=!0){if(F.getName()in this.__childItemsMapping){if(!B)throw new Error("Item '"+F.getName()+"' is already a child of :"+this.getPath());F.setName(this.generateUniqueName(F.getName()))}if(!(F instanceof XQ))throw new Error("Object is is not a tree item :"+F.constructor.name);const l={};let V;if(l.nameChanged=F.on("nameChanged",(F=>{this._childNameChanged(F)})),F instanceof dB){if(Q){const U=this.getParameter("GlobalXfo").getValue(),Q=F.getParameter("GlobalXfo").getValue();V=U.inverse().multiply(Q)}l.boundingChanged=F.on("boundingChanged",(F=>{this._setBoundingBoxDirty(F)})),l.visibilityChanged=F.on("visibilityChanged",(F=>{this._setBoundingBoxDirty(F)}))}return this.__childItems.splice(U,0,F),this.__childItemsEventHandlers.splice(U,0,l),this.__childItemsMapping[F.getName()]=U,this.__updateMapping(U),F.setOwner(this),F instanceof dB&&(Q&&F.getParameter("LocalXfo").setValue(V),this._setBoundingBoxDirty(),this.__highlights.forEach((U=>{const Q=this.__highlightMapping[U];F.addHighlight(U,Q,!0)}))),this.emit("childAdded",{childItem:F,index:U}),F}addChild(F,U=!0,Q=!0){const B=this.__childItems.length;return this.insertChild(F,B,U,Q),F}getChild(F){return this.__childItems[F]}getChildByName(F){const U=this.__childItemsMapping[F];return null!=U?this.__childItems[U]:null}getChildNames(){const F=[];for(let U=0;U<this.__childItems.length;U++){const Q=this.__childItems[U];null!=Q&&(F[U]=Q.getName())}return F}__unbindChild(F,U){const Q=this.__childItemsEventHandlers[F];for(const F in Q)U.removeListenerById(F,Q[F]);this.__childItems.splice(F,1),this.__childItemsEventHandlers.splice(F,1),delete this.__childItemsMapping[U.getName()],this.__updateMapping(F),U instanceof dB&&this._setBoundingBoxDirty(),this.emit("childRemoved",{childItem:U,index:F})}removeChild(F){const U=this.__childItems[F];U&&(this.__unbindChild(F,U),U.setOwner(void 0))}removeChildByName(F){const U=this.__childItemsMapping[F];return null!=U?this.removeChild(U):null}removeChildByHandle(F){const U=this.__childItems.indexOf(F);if(-1==U)throw new Error("Error in removeChildByHandle. Child not found:"+F.getName());this.removeChild(U)}removeAllChildren(){let F=this.__childItems.length;for(;F--;)this.removeChild(F);this._setBoundingBoxDirty()}getChildIndex(F){return this.__childItems.indexOf(F)}indexOfChild(F){return console.warn("Deprecated Use #getChildIndex"),this.getChildIndex(F)}resolvePath(F,U=0){if("string"==typeof F&&(F=F.split("/")),0==U)if("."==F[0]||F[0]==this.__name)U++;else if(".."==F[0])return this.__ownerItem.resolvePath(F,U+1);if(U==F.length)return this;const Q=F[U],B=this.getChildByName(Q);if(null==B){const Q=this.getParameter(F[U]);if(Q)return Q;throw new Error(`Unable to resolve path : [${F.toString()}] after: ${this.getName()} \nNo child or parameter called : "${F[U]}"`)}return B.resolvePath(F,U+1)}traverse(F,U=!0){const Q=(F,U)=>{const Q=F.getChildren();for(const F of Q)F&&B(F,U+1)},B=(U,B)=>{if(0==F(U,B))return!1;U instanceof dB&&Q(U,B)};U?B(this,1):Q(this,0)}onPointerDown(F){this.emit("pointerDown",F),F.propagating&&this.__ownerItem&&this.__ownerItem.onPointerDown(F)}onPointerUp(F){this.emit("pointerUp",F),F.propagating&&this.__ownerItem&&this.__ownerItem.onPointerUp(F)}onPointerMove(F){this.emit("pointerMove",F),F.propagating&&this.__ownerItem&&this.__ownerItem.onPointerMove(F)}onPointerEnter(F){this.emit("pointerEnter",F),F.propagating&&this.__ownerItem&&this.__ownerItem.onPointerEnter(F)}onPointerLeave(F){this.emit("pointerLeave",F),F.propagating&&this.__ownerItem&&this.__ownerItem.onPointerLeave(F)}onWheel(F){F.propagating&&this.__ownerItem&&this.__ownerItem.onWheel(F)}toJSON(F){const U=super.toJSON(F),Q={};for(const U of this.__childItems)if(U){const B=U.toJSON(F);B&&(Q[U.getName()]=B)}return Object.keys(Q).length>0&&(U?U.children=Q:U={name:this.__name,children:Q}),U}fromJSON(F,U){if(super.fromJSON(F,U),U&&!Number.isNaN(U.numTreeItems)&&U.numTreeItems++,null!=F.children){const Q=F.children;if(Array.isArray(Q))for(const F of Q){let Q=this.getChildByName(F.name);Q?Q.fromJSON(F,U):F.type&&(Q=PU.constructClass(F.type),Q&&(Q.fromJSON(F,U),this.addChild(Q,!1,!1)))}else for(const F in Q){const B=Q[F];let l=this.getChildByName(F);l?l.fromJSON(B,U):B.type&&(l=PU.constructClass(B.type),l&&(l.fromJSON(B,U),this.addChild(l,!1,!1)))}}}readBinary(F,U){super.readBinary(F,U),U.numTreeItems++;const Q=F.loadUInt8();this.setVisible(2&Q);if(4&Q){const U=new RQ;U.tr=F.loadFloat32Vec3(),U.ori=F.loadFloat32Quat(),32&Q?U.sc=F.loadFloat32Vec3():U.sc.set(F.loadFloat32()),this.__localXfoParam.loadValue(U)}8&Q&&this.__boundingBoxParam.loadValue(new iQ(F.loadFloat32Vec3(),F.loadFloat32Vec3()));const B=F.loadUInt32();if(B>0){const Q=F.loadUInt32Array(B);for(let l=0;l<B;l++)try{F.seek(Q[l]);const B=F.loadStr(),V=PU.constructClass(B);if(!V){const U=F.loadStr();console.warn("Unable to construct child:"+U+" of type:"+B);continue}F.seek(Q[l]),V.readBinary(F,U),this.addChild(V,!1,!0)}catch(F){console.warn("Error loading tree item: ",F)}}}clone(F){const U=new dB;return U.copyFrom(this,F),U}copyFrom(F,U){super.copyFrom(F,U),F.getChildren().forEach((F=>{F&&this.addChild(F.clone(U),!1,!1)}))}}PU.register("TreeItem",dB);var RB=null;try{var tB="undefined"!=typeof module&&"function"==typeof module.require&&module.require("worker_threads")||"function"==typeof __non_webpack_require__&&__non_webpack_require__("worker_threads")||"function"==typeof require&&require("worker_threads");RB=tB.Worker}catch(F){}function sB(F,U,Q){var B=void 0===U?null:U,l=function(F,U){return Buffer.from(F,"base64").toString(U?"utf16":"utf8")}(F,void 0!==Q&&Q),V=l.indexOf("\n",10)+1,d=l.substring(V)+(B?"//# sourceMappingURL="+B:"");return function(F){return new RB(d,Object.assign({},F,{eval:!0}))}}function iB(F,U,Q){var B=void 0===U?null:U,l=function(F,U){var Q=atob(F);if(U){for(var B=new Uint8Array(Q.length),l=0,V=Q.length;l<V;++l)B[l]=Q.charCodeAt(l);return String.fromCharCode.apply(null,new Uint16Array(B.buffer))}return Q}(F,void 0!==Q&&Q),V=l.indexOf("\n",10)+1,d=l.substring(V)+(B?"//# sourceMappingURL="+B:""),R=new Blob([d],{type:"application/javascript"});return URL.createObjectURL(R)}var eB="[object process]"===Object.prototype.toString.call("undefined"!=typeof process?process:0);function IB(F,U,Q){return eB?sB(F,U,Q):function(F,U,Q){var B;return function(l){return B=B||iB(F,U,Q),new Worker(B,l)}}(F,U,Q)}var ZB=IB("Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwohZnVuY3Rpb24oKXsidXNlIHN0cmljdCI7Y29uc3QgQT17fTt2YXIgQjsoQj1BKS51bnBhY2tCcmlkZ2U9ZnVuY3Rpb24oQSl7cmV0dXJuIGZ1bmN0aW9uKEEpe3ZhciBCPXt9O2Z1bmN0aW9uIEkoZyl7aWYoQltnXSlyZXR1cm4gQltnXS5leHBvcnRzO3ZhciBRPUJbZ109e2k6ZyxsOiExLGV4cG9ydHM6e319O3JldHVybiBBW2ddLmNhbGwoUS5leHBvcnRzLFEsUS5leHBvcnRzLEkpLFEubD0hMCxRLmV4cG9ydHN9cmV0dXJuIEkubT1BLEkuYz1CLEkuZD1mdW5jdGlvbihBLEIsZyl7SS5vKEEsQil8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBLEIse2VudW1lcmFibGU6ITAsZ2V0Omd9KX0sSS5yPWZ1bmN0aW9uKEEpeyJ1bmRlZmluZWQiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShBLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6Ik1vZHVsZSJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoQSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSl9LEkudD1mdW5jdGlvbihBLEIpe2lmKDEmQiYmKEE9SShBKSksOCZCKXJldHVybiBBO2lmKDQmQiYmIm9iamVjdCI9PXR5cGVvZiBBJiZBJiZBLl9fZXNNb2R1bGUpcmV0dXJuIEE7dmFyIGc9T2JqZWN0LmNyZWF0ZShudWxsKTtpZihJLnIoZyksT2JqZWN0LmRlZmluZVByb3BlcnR5KGcsImRlZmF1bHQiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOkF9KSwyJkImJiJzdHJpbmciIT10eXBlb2YgQSlmb3IodmFyIFEgaW4gQSlJLmQoZyxRLGZ1bmN0aW9uKEIpe3JldHVybiBBW0JdfS5iaW5kKG51bGwsUSkpO3JldHVybiBnfSxJLm49ZnVuY3Rpb24oQSl7dmFyIEI9QSYmQS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIEEuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gQX07cmV0dXJuIEkuZChCLCJhIixCKSxCfSxJLm89ZnVuY3Rpb24oQSxCKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKEEsQil9LEkucD0iIixJKEkucz0yKX0oW2Z1bmN0aW9uKEEsQixJKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoQiwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7Y29uc3QgUT1JKDEpLEU9ezA6IkVSQVJfU1VDQ0VTUyIsMTA6IkVSQVJfRU5EX0FSQ0hJVkUiLDExOiJFUkFSX05PX01FTU9SWSIsMTI6IkVSQVJfQkFEX0RBVEEiLDEzOiJFUkFSX0JBRF9BUkNISVZFIiwxNDoiRVJBUl9VTktOT1dOX0ZPUk1BVCIsMTU6IkVSQVJfRU9QRU4iLDE2OiJFUkFSX0VDUkVBVEUiLDE3OiJFUkFSX0VDTE9TRSIsMTg6IkVSQVJfRVJFQUQiLDE5OiJFUkFSX0VXUklURSIsMjA6IkVSQVJfU01BTExfQlVGIiwyMToiRVJBUl9VTktOT1dOIiwyMjoiRVJBUl9NSVNTSU5HX1BBU1NXT1JEIiwyMzoiRVJBUl9FUkVGRVJFTkNFIiwyNDoiRVJBUl9CQURfUEFTU1dPUkQifSxDPXswOiJTdWNjZXNzIiwxMToiTm90IGVub3VnaCBtZW1vcnkiLDEyOiJBcmNoaXZlIGhlYWRlciBvciBkYXRhIGFyZSBkYW1hZ2VkIiwxMzoiRmlsZSBpcyBub3QgUkFSIGFyY2hpdmUiLDE0OiJVbmtub3duIGFyY2hpdmUgZm9ybWF0IiwxNToiRmlsZSBvcGVuIGVycm9yIiwxNjoiRmlsZSBjcmVhdGUgZXJyb3IiLDE3OiJGaWxlIGNsb3NlIGVycm9yIiwxODoiRmlsZSByZWFkIGVycm9yIiwxOToiRmlsZSB3cml0ZSBlcnJvciIsMjA6IkJ1ZmZlciBmb3IgYXJjaGl2ZSBjb21tZW50IGlzIHRvbyBzbWFsbCwgY29tbWVudCB0cnVuY2F0ZWQiLDIxOiJVbmtub3duIGVycm9yIiwyMjoiUGFzc3dvcmQgZm9yIGVuY3J5cHRlZCBmaWxlIG9yIGhlYWRlciBpcyBub3Qgc3BlY2lmaWVkIiwyMzoiQ2Fubm90IG9wZW4gZmlsZSBzb3VyY2UgZm9yIHJlZmVyZW5jZSByZWNvcmQiLDI0OiJXcm9uZyBwYXNzd29yZCBpcyBzcGVjaWZpZWQifTtjbGFzcyBpe2NvbnN0cnVjdG9yKEE9IiIpe3RoaXMuX3Bhc3N3b3JkPUEsdGhpcy5fYXJjaGl2ZT1udWxsfWdldEZpbGVMaXN0KCl7bGV0IEEsW0IsSV09dGhpcy5vcGVuQXJjKCEwKTtpZigiU1VDQ0VTUyIhPT1CLnN0YXRlKUE9W0IsbnVsbF07ZWxzZXtsZXQgQixnLFE9W107Zm9yKDtbQixnXT10aGlzLnByb2Nlc3NOZXh0RmlsZSgoKCk9PiEwKSksIlNVQ0NFU1MiPT09Qi5zdGF0ZTspUS5wdXNoKGcuZmlsZUhlYWRlcik7QT0iRVJBUl9FTkRfQVJDSElWRSIhPT1CLnJlYXNvbj9bQixudWxsXTpbe3N0YXRlOiJTVUNDRVNTIn0se2FyY0hlYWRlcjpJLGZpbGVIZWFkZXJzOlF9XX1yZXR1cm4gdGhpcy5jbG9zZUFyYygpLEF9ZXh0cmFjdEFsbCgpe2xldCBBLFtCLEldPXRoaXMub3BlbkFyYyghMSk7aWYoIlNVQ0NFU1MiIT09Qi5zdGF0ZSlBPVtCLG51bGxdO2Vsc2V7bGV0IEIsZyxRPVtdO2Zvcig7W0IsZ109dGhpcy5wcm9jZXNzTmV4dEZpbGUoKCgpPT4hMSkpLCJTVUNDRVNTIj09PUIuc3RhdGU7KVEucHVzaChnKTtBPSJFUkFSX0VORF9BUkNISVZFIiE9PUIucmVhc29uP1tCLG51bGxdOlt7c3RhdGU6IlNVQ0NFU1MifSx7YXJjSGVhZGVyOkksZmlsZXM6UX1dfXJldHVybiB0aGlzLmNsb3NlQXJjKCksQX1leHRyYWN0RmlsZXMoQSxCKXtsZXQgSSxbZyxRXT10aGlzLm9wZW5BcmMoITEsQiksRT17fTtmb3IobGV0IEI9MDtCPEEubGVuZ3RoOysrQilFW0FbQl1dPUI7aWYoIlNVQ0NFU1MiIT09Zy5zdGF0ZSlJPVtnLG51bGxdO2Vsc2V7bGV0IEIsZyxDPUFycmF5KEEubGVuZ3RoKS5maWxsKG51bGwpLGk9MDtmb3IoOzspe2xldCBJPSExLFE9bnVsbDtpZihbQixnXT10aGlzLnByb2Nlc3NOZXh0RmlsZSgoQT0+QSBpbiBFPyhRPUVbQV0sITEpOihJPSEwLCEwKSkpLCJTVUNDRVNTIiE9PUIuc3RhdGUpYnJlYWs7aWYoIUkmJihDW1FdPWcsKytpPT09QS5sZW5ndGgpKXtCLnJlYXNvbj0iRVJBUl9FTkRfQVJDSElWRSI7YnJlYWt9fUk9IkVSQVJfRU5EX0FSQ0hJVkUiIT09Qi5yZWFzb24/W0IsbnVsbF06W3tzdGF0ZToiU1VDQ0VTUyJ9LHthcmNIZWFkZXI6USxmaWxlczpDfV19cmV0dXJuIHRoaXMuY2xvc2VBcmMoKSxJfWZpbGVDcmVhdGVkKEEpe31jbG9zZShBKXt0aGlzLl9sYXN0RmlsZUNvbnRlbnQ9dGhpcy5jbG9zZUZpbGUoQSl9b3BlbkFyYyhBLEIpe1EuRXh0LmN1cnJlbnQ9dGhpcyx0aGlzLl9hcmNoaXZlPW5ldyBnLlJhckFyY2hpdmU7bGV0IEksRT10aGlzLl9hcmNoaXZlLm9wZW4odGhpcy5fZmlsZVBhdGgsQnx8dGhpcy5fcGFzc3dvcmQsQSk7cmV0dXJuIEk9MCE9PUUuc3RhdGUuZXJyQ29kZT9bdGhpcy5nZXRGYWlsSW5mbyhFLnN0YXRlLmVyckNvZGUsRS5zdGF0ZS5lcnJUeXBlKSxudWxsXTpbe3N0YXRlOiJTVUNDRVNTIn0se2NvbW1lbnQ6RS5jb21tZW50LGZsYWdzOnt2b2x1bWU6MCE9KDEmRS5mbGFncyksbG9jazowIT0oNCZFLmZsYWdzKSxzb2xpZDowIT0oOCZFLmZsYWdzKSxhdXRoSW5mbzowIT0oMzImRS5mbGFncykscmVjb3ZlcnlSZWNvcmQ6MCE9KDY0JkUuZmxhZ3MpLGhlYWRlckVuY3J5cHRlZDowIT0oMTI4JkUuZmxhZ3MpfX1dLFEuRXh0LmN1cnJlbnQ9bnVsbCxJfXByb2Nlc3NOZXh0RmlsZShBKXtsZXQgQjtRLkV4dC5jdXJyZW50PXRoaXM7bGV0IEk9dGhpcy5fYXJjaGl2ZS5nZXRGaWxlSGVhZGVyKCksZz1be3N0YXRlOiJTVUNDRVNTIn0sbnVsbF07aWYoMD09PUkuc3RhdGUuZXJyQ29kZSl7bGV0IEI9QShJLm5hbWUpO3RoaXMuX2xhc3RGaWxlQ29udGVudD1udWxsO2xldCBRPXRoaXMuX2FyY2hpdmUucmVhZEZpbGUoQik7MD09PVEuZXJyQ29kZXx8Qnx8KGdbMF09dGhpcy5nZXRGYWlsSW5mbyhRLmVyckNvZGUsUS5lcnJUeXBlKSwyMj09PVEuZXJyQ29kZT9RPXRoaXMuX2FyY2hpdmUucmVhZEZpbGUoITApOlEuZXJyQ29kZT0wKSwwPT09US5lcnJDb2RlP2dbMV09dGhpcy5fbGFzdEZpbGVDb250ZW50OihJLnN0YXRlLmVyckNvZGU9US5lcnJDb2RlLEkuc3RhdGUuZXJyVHlwZT1RLmVyclR5cGUpLHRoaXMuX2xhc3RGaWxlQ29udGVudD1udWxsfXJldHVybiBCPTAhPT1JLnN0YXRlLmVyckNvZGU/W3RoaXMuZ2V0RmFpbEluZm8oSS5zdGF0ZS5lcnJDb2RlLEkuc3RhdGUuZXJyVHlwZSksbnVsbF06W3tzdGF0ZToiU1VDQ0VTUyJ9LHtmaWxlSGVhZGVyOntuYW1lOkkubmFtZSxmbGFnczp7ZW5jcnlwdGVkOjAhPSg0JkkuZmxhZ3MpLHNvbGlkOjAhPSgxNiZJLmZsYWdzKSxkaXJlY3Rvcnk6MCE9KDMyJkkuZmxhZ3MpfSxwYWNrU2l6ZTpJLnBhY2tTaXplLHVucFNpemU6SS51bnBTaXplLGNyYzpJLmNyYyx0aW1lOmZ1bmN0aW9uKEEpe2NvbnN0IEI9WzUsNiw1LDUsNCw3XTtsZXQgST1bXTtmb3IobGV0IGcgb2YgQilJLnB1c2goQSYoMTw8ZyktMSksQT4+PWc7bGV0IGc9QT0+QTwxMD8iMCIrQToiIitBO3JldHVybmAkezE5ODArKEk9SS5yZXZlcnNlKCkpWzBdfS0ke2coSVsxXSl9LSR7ZyhJWzJdKX1UJHtnKElbM10pfToke2coSVs0XSl9OiR7ZygyKklbNV0pfS4wMDBgfShJLnRpbWUpLHVucFZlcjpgJHtNYXRoLmZsb29yKEkudW5wVmVyLzEwKX0uJHtJLnVucFZlciUxMH1gLG1ldGhvZDpmdW5jdGlvbihBKXtyZXR1cm57NDg6IlN0b3JpbmciLDQ5OiJGYXN0ZXN0Iiw1MDoiRmFzdCIsNTE6Ik5vcm1hbCIsNTI6Ikdvb2QiLDUzOiJCZXN0In1bQV18fCJVbmtub3duIn0oSS5tZXRob2QpfSxleHRyYWN0Omd9XSxRLkV4dC5jdXJyZW50PW51bGwsQn1jbG9zZUFyYygpe1EuRXh0LmN1cnJlbnQ9dGhpcyx0aGlzLl9hcmNoaXZlLmRlbGV0ZSgpLFEuRXh0LmN1cnJlbnQ9bnVsbCx0aGlzLl9hcmNoaXZlPW51bGx9Z2V0RmFpbEluZm8oQSxCKXtyZXR1cm57c3RhdGU6IkZBSUwiLHJlYXNvbjpFW0FdLG1zZzpDW0FdfX19aS5fY3VycmVudD1udWxsLEIuRXh0cmFjdG9yPWl9LGZ1bmN0aW9uKEEsQixJKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoQiwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksQi5FeHQ9e2N1cnJlbnQ6bnVsbH19LGZ1bmN0aW9uKEEsQixJKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoQiwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZnVuY3Rpb24oQSl7Zm9yKHZhciBJIGluIEEpQi5oYXNPd25Qcm9wZXJ0eShJKXx8KEJbSV09QVtJXSl9KEkoMykpO3ZhciBnPUkoMSk7Qi5FeHQ9Zy5FeHR9LGZ1bmN0aW9uKEEsQixJKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoQiwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7Y29uc3QgZz1JKDQpLFE9SSg2KTtCLmNyZWF0ZUV4dHJhY3RvckZyb21EYXRhPWZ1bmN0aW9uKEEsQj0iIil7cmV0dXJuIG5ldyBnLkRhdGFFeHRyYWN0b3IoQSxCKX0sQi5jcmVhdGVFeHRyYWN0b3JGcm9tRmlsZT1mdW5jdGlvbihBLEI9IiIsST0iIil7cmV0dXJuIG5ldyBRLkZpbGVFeHRyYWN0b3IoQSxCLEkpfX0sZnVuY3Rpb24oQSxCLEkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShCLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTtjb25zdCBRPUkoNSksRT1JKDApO0IuRGF0YUV4dHJhY3Rvcj1jbGFzcyBleHRlbmRzIEUuRXh0cmFjdG9ye2NvbnN0cnVjdG9yKEEsQil7c3VwZXIoQiksdGhpcy5kYXRhRmlsZXM9e30sdGhpcy5kYXRhRmlsZU1hcD17fSx0aGlzLmN1cnJlbnRGZD0xO2xldCBJPXtmaWxlOm5ldyBRLkRhdGFGaWxlKG5ldyBVaW50OEFycmF5KEEpKSxmZDp0aGlzLmN1cnJlbnRGZCsrfTt0aGlzLl9maWxlUGF0aD0iX2RlZmF1bHRVbnJhckpTXy5yYXIiLHRoaXMuZGF0YUZpbGVzW3RoaXMuX2ZpbGVQYXRoXT1JLHRoaXMuZGF0YUZpbGVNYXBbSS5mZF09dGhpcy5fZmlsZVBhdGh9b3BlbihBKXtsZXQgQj10aGlzLmRhdGFGaWxlc1tBXTtyZXR1cm4gQj9CLmZkOjB9Y3JlYXRlKEEpe2xldCBCPXRoaXMuY3VycmVudEZkKys7cmV0dXJuIHRoaXMuZGF0YUZpbGVzW0FdPXtmaWxlOm5ldyBRLkRhdGFGaWxlLGZkOnRoaXMuY3VycmVudEZkKyt9LHRoaXMuZGF0YUZpbGVNYXBbQl09QSxCfWNsb3NlRmlsZShBKXtsZXQgQj10aGlzLmRhdGFGaWxlc1t0aGlzLmRhdGFGaWxlTWFwW0FdXTtpZighQilyZXR1cm4gbnVsbDtsZXQgST1CLmZpbGUucmVhZEFsbCgpO3JldHVybiAxIT09QT8oZGVsZXRlIHRoaXMuZGF0YUZpbGVzW3RoaXMuZGF0YUZpbGVNYXBbQV1dLGRlbGV0ZSB0aGlzLmRhdGFGaWxlTWFwW0FdKTpCLmZpbGUuc2VlaygwLCJTRVQiKSxJfXJlYWQoQSxCLEkpe2xldCBRPXRoaXMuZGF0YUZpbGVzW3RoaXMuZGF0YUZpbGVNYXBbQV1dO2lmKCFRKXJldHVybi0xO2xldCBFPVEuZmlsZS5yZWFkKEkpO3JldHVybiBudWxsPT09RT8tMTooZy5IRUFQVTguc2V0KEUsQiksRS5ieXRlTGVuZ3RoKX13cml0ZShBLEIsSSl7bGV0IFE9dGhpcy5kYXRhRmlsZXNbdGhpcy5kYXRhRmlsZU1hcFtBXV07cmV0dXJuISFRJiYoUS5maWxlLndyaXRlKGcuSEVBUFU4LnNsaWNlKEIsQitJKSksITApfXRlbGwoQSl7bGV0IEI9dGhpcy5kYXRhRmlsZXNbdGhpcy5kYXRhRmlsZU1hcFtBXV07cmV0dXJuIEI/Qi5maWxlLnRlbGwoKTotMX1zZWVrKEEsQixJKXtsZXQgZz10aGlzLmRhdGFGaWxlc1t0aGlzLmRhdGFGaWxlTWFwW0FdXTtyZXR1cm4hIWcmJmcuZmlsZS5zZWVrKEIsSSl9fX0sZnVuY3Rpb24oQSxCLEkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShCLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxCLkRhdGFGaWxlPWNsYXNze2NvbnN0cnVjdG9yKEEpe3RoaXMuYnVmZmVycz1bXSx0aGlzLnBvcz0wLHRoaXMuc2l6ZT0wLEEmJih0aGlzLmJ1ZmZlcnMucHVzaChBKSx0aGlzLnNpemU9QS5ieXRlTGVuZ3RoLHRoaXMucG9zPTApfXJlYWQoQSl7aWYodGhpcy5mbGF0dGVuKCksQSt0aGlzLnBvcz50aGlzLnNpemUpcmV0dXJuIG51bGw7bGV0IEI9dGhpcy5wb3M7cmV0dXJuIHRoaXMucG9zKz1BLHRoaXMuYnVmZmVyc1swXS5zbGljZShCLHRoaXMucG9zKX1yZWFkQWxsKCl7cmV0dXJuIHRoaXMuZmxhdHRlbigpLHRoaXMuYnVmZmVyc1swXX13cml0ZShBKXtyZXR1cm4gdGhpcy5idWZmZXJzLnB1c2goQSksdGhpcy5zaXplKz1BLmJ5dGVMZW5ndGgsdGhpcy5wb3MrPUEuYnl0ZUxlbmd0aCwhMH10ZWxsKCl7cmV0dXJuIHRoaXMucG9zfXNlZWsoQSxCKXtsZXQgST10aGlzLnBvcztyZXR1cm4iU0VUIj09PUI/ST1BOiJDVVIiPT09Qj9JKz1BOkk9dGhpcy5zaXplLUEsIShJPDB8fEk+dGhpcy5zaXplfHwodGhpcy5wb3M9SSwwKSl9ZmxhdHRlbigpe2lmKHRoaXMuYnVmZmVycy5sZW5ndGg8PTEpcmV0dXJuO2xldCBBPW5ldyBVaW50OEFycmF5KHRoaXMuc2l6ZSksQj0wO2ZvcihsZXQgSSBvZiB0aGlzLmJ1ZmZlcnMpQS5zZXQoSSxCKSxCKz1JLmJ5dGVMZW5ndGg7dGhpcy5idWZmZXJzPVtBXX19fSxmdW5jdGlvbihBLEIsSSl7KGZ1bmN0aW9uKEEpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShCLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTtjb25zdCBRPUkoMTIpLEU9SSgxMyksQz1JKDApO0IuRmlsZUV4dHJhY3Rvcj1jbGFzcyBleHRlbmRzIEMuRXh0cmFjdG9ye2NvbnN0cnVjdG9yKEEsQixJKXtzdXBlcihJKSx0aGlzLl9maWxlUGF0aD1BLHRoaXMuZmlsZU1hcD17fSx0aGlzLl90YXJnZXQ9Qn1vcGVuKEEpe2xldCBCPVEub3BlblN5bmMoQSwiciIpO3JldHVybiB0aGlzLmZpbGVNYXBbQl09e3NpemU6US5mc3RhdFN5bmMoQikuc2l6ZSxwb3M6MCxuYW1lOkF9LEJ9Y3JlYXRlKEEpe2xldCBCPUUuam9pbih0aGlzLl90YXJnZXQsQSk7RS5wYXJzZShCKS5kaXIuc3BsaXQoIi8iKS5yZWR1Y2UoKChBLEIpPT4oQSs9QisiLyIsUS5leGlzdHNTeW5jKEEpfHxRLm1rZGlyU3luYyhBKSxBKSksIiIpO2xldCBJPVEub3BlblN5bmMoQiwidyIpO3JldHVybiB0aGlzLmZpbGVNYXBbSV09e3NpemU6MCxwb3M6MCxuYW1lOkF9LEl9Y2xvc2VGaWxlKEEpe3JldHVybiBkZWxldGUgdGhpcy5maWxlTWFwW0FdLFEuY2xvc2VTeW5jKEEpLG51bGx9cmVhZChCLEksRSl7bGV0IEM9dGhpcy5maWxlTWFwW0JdLGk9bmV3IEEoRSksbz1RLnJlYWRTeW5jKEIsaSwwLEUsQy5wb3MpO3JldHVybiBnLkhFQVBVOC5zZXQoaSxJKSxDLnBvcys9byxvfXdyaXRlKEIsSSxFKXtsZXQgQz10aGlzLmZpbGVNYXBbQl0saT1RLndyaXRlU3luYyhCLG5ldyBBKGcuSEVBUFU4LnN1YmFycmF5KEksSStFKSksMCxFKTtyZXR1cm4gQy5wb3MrPWksQy5zaXplKz1pLGk9PT1FfXRlbGwoQSl7cmV0dXJuIHRoaXMuZmlsZU1hcFtBXS5wb3N9c2VlayhBLEIsSSl7bGV0IGc9dGhpcy5maWxlTWFwW0FdLFE9Zy5wb3M7cmV0dXJuIlNFVCI9PT1JP1E9MDoiRU5EIj09PUkmJihRPWcuc2l6ZSksISgoUSs9Qik8MHx8UT5nLnNpemV8fChnLnBvcz1RLDApKX19fSkuY2FsbCh0aGlzLEkoNykuQnVmZmVyKX0sZnVuY3Rpb24oQSxCLEkpeyhmdW5jdGlvbihBKXsKLyohCiAgICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuCiAgICoKICAgKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz4KICAgKiBAbGljZW5zZSAgTUlUCiAgICovCnZhciBnPUkoOSksUT1JKDEwKSxFPUkoMTEpO2Z1bmN0aW9uIEMoKXtyZXR1cm4gby5UWVBFRF9BUlJBWV9TVVBQT1JUPzIxNDc0ODM2NDc6MTA3Mzc0MTgyM31mdW5jdGlvbiBpKEEsQil7aWYoQygpPEIpdGhyb3cgbmV3IFJhbmdlRXJyb3IoIkludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoIik7cmV0dXJuIG8uVFlQRURfQVJSQVlfU1VQUE9SVD8oQT1uZXcgVWludDhBcnJheShCKSkuX19wcm90b19fPW8ucHJvdG90eXBlOihudWxsPT09QSYmKEE9bmV3IG8oQikpLEEubGVuZ3RoPUIpLEF9ZnVuY3Rpb24gbyhBLEIsSSl7aWYoIShvLlRZUEVEX0FSUkFZX1NVUFBPUlR8fHRoaXMgaW5zdGFuY2VvZiBvKSlyZXR1cm4gbmV3IG8oQSxCLEkpO2lmKCJudW1iZXIiPT10eXBlb2YgQSl7aWYoInN0cmluZyI9PXR5cGVvZiBCKXRocm93IG5ldyBFcnJvcigiSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmciKTtyZXR1cm4gcih0aGlzLEEpfXJldHVybiB0KHRoaXMsQSxCLEkpfWZ1bmN0aW9uIHQoQSxCLEksZyl7aWYoIm51bWJlciI9PXR5cGVvZiBCKXRocm93IG5ldyBUeXBlRXJyb3IoJyJ2YWx1ZSIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKTtyZXR1cm4idW5kZWZpbmVkIiE9dHlwZW9mIEFycmF5QnVmZmVyJiZCIGluc3RhbmNlb2YgQXJyYXlCdWZmZXI/ZnVuY3Rpb24oQSxCLEksZyl7aWYoQi5ieXRlTGVuZ3RoLEk8MHx8Qi5ieXRlTGVuZ3RoPEkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoIidvZmZzZXQnIGlzIG91dCBvZiBib3VuZHMiKTtpZihCLmJ5dGVMZW5ndGg8SSsoZ3x8MCkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoIidsZW5ndGgnIGlzIG91dCBvZiBib3VuZHMiKTtyZXR1cm4gQj12b2lkIDA9PT1JJiZ2b2lkIDA9PT1nP25ldyBVaW50OEFycmF5KEIpOnZvaWQgMD09PWc/bmV3IFVpbnQ4QXJyYXkoQixJKTpuZXcgVWludDhBcnJheShCLEksZyksby5UWVBFRF9BUlJBWV9TVVBQT1JUPyhBPUIpLl9fcHJvdG9fXz1vLnByb3RvdHlwZTpBPWEoQSxCKSxBfShBLEIsSSxnKToic3RyaW5nIj09dHlwZW9mIEI/ZnVuY3Rpb24oQSxCLEkpe2lmKCJzdHJpbmciPT10eXBlb2YgSSYmIiIhPT1JfHwoST0idXRmOCIpLCFvLmlzRW5jb2RpbmcoSSkpdGhyb3cgbmV3IFR5cGVFcnJvcignImVuY29kaW5nIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJyk7dmFyIGc9MHxzKEIsSSksUT0oQT1pKEEsZykpLndyaXRlKEIsSSk7cmV0dXJuIFEhPT1nJiYoQT1BLnNsaWNlKDAsUSkpLEF9KEEsQixJKTpmdW5jdGlvbihBLEIpe2lmKG8uaXNCdWZmZXIoQikpe3ZhciBJPTB8bihCLmxlbmd0aCk7cmV0dXJuIDA9PT0oQT1pKEEsSSkpLmxlbmd0aHx8Qi5jb3B5KEEsMCwwLEkpLEF9aWYoQil7aWYoInVuZGVmaW5lZCIhPXR5cGVvZiBBcnJheUJ1ZmZlciYmQi5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcnx8Imxlbmd0aCJpbiBCKXJldHVybiJudW1iZXIiIT10eXBlb2YgQi5sZW5ndGh8fGZ1bmN0aW9uKEEpe3JldHVybiBBIT1BfShCLmxlbmd0aCk/aShBLDApOmEoQSxCKTtpZigiQnVmZmVyIj09PUIudHlwZSYmRShCLmRhdGEpKXJldHVybiBhKEEsQi5kYXRhKX10aHJvdyBuZXcgVHlwZUVycm9yKCJGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuIil9KEEsQil9ZnVuY3Rpb24gZShBKXtpZigibnVtYmVyIiE9dHlwZW9mIEEpdGhyb3cgbmV3IFR5cGVFcnJvcignInNpemUiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKTtpZihBPDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoJyJzaXplIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpfWZ1bmN0aW9uIHIoQSxCKXtpZihlKEIpLEE9aShBLEI8MD8wOjB8bihCKSksIW8uVFlQRURfQVJSQVlfU1VQUE9SVClmb3IodmFyIEk9MDtJPEI7KytJKUFbSV09MDtyZXR1cm4gQX1mdW5jdGlvbiBhKEEsQil7dmFyIEk9Qi5sZW5ndGg8MD8wOjB8bihCLmxlbmd0aCk7QT1pKEEsSSk7Zm9yKHZhciBnPTA7ZzxJO2crPTEpQVtnXT0yNTUmQltnXTtyZXR1cm4gQX1mdW5jdGlvbiBuKEEpe2lmKEE+PUMoKSl0aHJvdyBuZXcgUmFuZ2VFcnJvcigiQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSBzaXplOiAweCIrQygpLnRvU3RyaW5nKDE2KSsiIGJ5dGVzIik7cmV0dXJuIDB8QX1mdW5jdGlvbiBzKEEsQil7aWYoby5pc0J1ZmZlcihBKSlyZXR1cm4gQS5sZW5ndGg7aWYoInVuZGVmaW5lZCIhPXR5cGVvZiBBcnJheUJ1ZmZlciYmImZ1bmN0aW9uIj09dHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyYmKEFycmF5QnVmZmVyLmlzVmlldyhBKXx8QSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSlyZXR1cm4gQS5ieXRlTGVuZ3RoOyJzdHJpbmciIT10eXBlb2YgQSYmKEE9IiIrQSk7dmFyIEk9QS5sZW5ndGg7aWYoMD09PUkpcmV0dXJuIDA7Zm9yKHZhciBnPSExOzspc3dpdGNoKEIpe2Nhc2UiYXNjaWkiOmNhc2UibGF0aW4xIjpjYXNlImJpbmFyeSI6cmV0dXJuIEk7Y2FzZSJ1dGY4IjpjYXNlInV0Zi04IjpjYXNlIHZvaWQgMDpyZXR1cm4geChBKS5sZW5ndGg7Y2FzZSJ1Y3MyIjpjYXNlInVjcy0yIjpjYXNlInV0ZjE2bGUiOmNhc2UidXRmLTE2bGUiOnJldHVybiAyKkk7Y2FzZSJoZXgiOnJldHVybiBJPj4+MTtjYXNlImJhc2U2NCI6cmV0dXJuIHYoQSkubGVuZ3RoO2RlZmF1bHQ6aWYoZylyZXR1cm4geChBKS5sZW5ndGg7Qj0oIiIrQikudG9Mb3dlckNhc2UoKSxnPSEwfX1mdW5jdGlvbiBEKEEsQixJKXt2YXIgZz1BW0JdO0FbQl09QVtJXSxBW0ldPWd9ZnVuY3Rpb24gRihBLEIsSSxnLFEpe2lmKDA9PT1BLmxlbmd0aClyZXR1cm4tMTtpZigic3RyaW5nIj09dHlwZW9mIEk/KGc9SSxJPTApOkk+MjE0NzQ4MzY0Nz9JPTIxNDc0ODM2NDc6STwtMjE0NzQ4MzY0OCYmKEk9LTIxNDc0ODM2NDgpLEk9K0ksaXNOYU4oSSkmJihJPVE/MDpBLmxlbmd0aC0xKSxJPDAmJihJPUEubGVuZ3RoK0kpLEk+PUEubGVuZ3RoKXtpZihRKXJldHVybi0xO0k9QS5sZW5ndGgtMX1lbHNlIGlmKEk8MCl7aWYoIVEpcmV0dXJuLTE7ST0wfWlmKCJzdHJpbmciPT10eXBlb2YgQiYmKEI9by5mcm9tKEIsZykpLG8uaXNCdWZmZXIoQikpcmV0dXJuIDA9PT1CLmxlbmd0aD8tMTp3KEEsQixJLGcsUSk7aWYoIm51bWJlciI9PXR5cGVvZiBCKXJldHVybiBCJj0yNTUsby5UWVBFRF9BUlJBWV9TVVBQT1JUJiYiZnVuY3Rpb24iPT10eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZj9RP1VpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChBLEIsSSk6VWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChBLEIsSSk6dyhBLFtCXSxJLGcsUSk7dGhyb3cgbmV3IFR5cGVFcnJvcigidmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyIil9ZnVuY3Rpb24gdyhBLEIsSSxnLFEpe3ZhciBFLEM9MSxpPUEubGVuZ3RoLG89Qi5sZW5ndGg7aWYodm9pZCAwIT09ZyYmKCJ1Y3MyIj09PShnPVN0cmluZyhnKS50b0xvd2VyQ2FzZSgpKXx8InVjcy0yIj09PWd8fCJ1dGYxNmxlIj09PWd8fCJ1dGYtMTZsZSI9PT1nKSl7aWYoQS5sZW5ndGg8Mnx8Qi5sZW5ndGg8MilyZXR1cm4tMTtDPTIsaS89MixvLz0yLEkvPTJ9ZnVuY3Rpb24gdChBLEIpe3JldHVybiAxPT09Qz9BW0JdOkEucmVhZFVJbnQxNkJFKEIqQyl9aWYoUSl7dmFyIGU9LTE7Zm9yKEU9STtFPGk7RSsrKWlmKHQoQSxFKT09PXQoQiwtMT09PWU/MDpFLWUpKXtpZigtMT09PWUmJihlPUUpLEUtZSsxPT09bylyZXR1cm4gZSpDfWVsc2UtMSE9PWUmJihFLT1FLWUpLGU9LTF9ZWxzZSBmb3IoSStvPmkmJihJPWktbyksRT1JO0U+PTA7RS0tKXtmb3IodmFyIHI9ITAsYT0wO2E8bzthKyspaWYodChBLEUrYSkhPT10KEIsYSkpe3I9ITE7YnJlYWt9aWYocilyZXR1cm4gRX1yZXR1cm4tMX1mdW5jdGlvbiBjKEEsQixJLGcpe0k9TnVtYmVyKEkpfHwwO3ZhciBRPUEubGVuZ3RoLUk7Zz8oZz1OdW1iZXIoZykpPlEmJihnPVEpOmc9UTt2YXIgRT1CLmxlbmd0aDtpZihFJTIhPTApdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBoZXggc3RyaW5nIik7Zz5FLzImJihnPUUvMik7Zm9yKHZhciBDPTA7QzxnOysrQyl7dmFyIGk9cGFyc2VJbnQoQi5zdWJzdHIoMipDLDIpLDE2KTtpZihpc05hTihpKSlyZXR1cm4gQztBW0krQ109aX1yZXR1cm4gQ31mdW5jdGlvbiBoKEEsQixJLGcpe3JldHVybiBXKHgoQixBLmxlbmd0aC1JKSxBLEksZyl9ZnVuY3Rpb24geShBLEIsSSxnKXtyZXR1cm4gVyhmdW5jdGlvbihBKXtmb3IodmFyIEI9W10sST0wO0k8QS5sZW5ndGg7KytJKUIucHVzaCgyNTUmQS5jaGFyQ29kZUF0KEkpKTtyZXR1cm4gQn0oQiksQSxJLGcpfWZ1bmN0aW9uIFIoQSxCLEksZyl7cmV0dXJuIHkoQSxCLEksZyl9ZnVuY3Rpb24gVShBLEIsSSxnKXtyZXR1cm4gVyh2KEIpLEEsSSxnKX1mdW5jdGlvbiBHKEEsQixJLGcpe3JldHVybiBXKGZ1bmN0aW9uKEEsQil7Zm9yKHZhciBJLGcsUSxFPVtdLEM9MDtDPEEubGVuZ3RoJiYhKChCLT0yKTwwKTsrK0MpZz0oST1BLmNoYXJDb2RlQXQoQykpPj44LFE9SSUyNTYsRS5wdXNoKFEpLEUucHVzaChnKTtyZXR1cm4gRX0oQixBLmxlbmd0aC1JKSxBLEksZyl9ZnVuY3Rpb24gUyhBLEIsSSl7cmV0dXJuIDA9PT1CJiZJPT09QS5sZW5ndGg/Zy5mcm9tQnl0ZUFycmF5KEEpOmcuZnJvbUJ5dGVBcnJheShBLnNsaWNlKEIsSSkpfWZ1bmN0aW9uIGsoQSxCLEkpe0k9TWF0aC5taW4oQS5sZW5ndGgsSSk7Zm9yKHZhciBnPVtdLFE9QjtRPEk7KXt2YXIgRSxDLGksbyx0PUFbUV0sZT1udWxsLHI9dD4yMzk/NDp0PjIyMz8zOnQ+MTkxPzI6MTtpZihRK3I8PUkpc3dpdGNoKHIpe2Nhc2UgMTp0PDEyOCYmKGU9dCk7YnJlYWs7Y2FzZSAyOjEyOD09KDE5MiYoRT1BW1ErMV0pKSYmKG89KDMxJnQpPDw2fDYzJkUpPjEyNyYmKGU9byk7YnJlYWs7Y2FzZSAzOkU9QVtRKzFdLEM9QVtRKzJdLDEyOD09KDE5MiZFKSYmMTI4PT0oMTkyJkMpJiYobz0oMTUmdCk8PDEyfCg2MyZFKTw8Nnw2MyZDKT4yMDQ3JiYobzw1NTI5Nnx8bz41NzM0MykmJihlPW8pO2JyZWFrO2Nhc2UgNDpFPUFbUSsxXSxDPUFbUSsyXSxpPUFbUSszXSwxMjg9PSgxOTImRSkmJjEyOD09KDE5MiZDKSYmMTI4PT0oMTkyJmkpJiYobz0oMTUmdCk8PDE4fCg2MyZFKTw8MTJ8KDYzJkMpPDw2fDYzJmkpPjY1NTM1JiZvPDExMTQxMTImJihlPW8pfW51bGw9PT1lPyhlPTY1NTMzLHI9MSk6ZT42NTUzNSYmKGUtPTY1NTM2LGcucHVzaChlPj4+MTAmMTAyM3w1NTI5NiksZT01NjMyMHwxMDIzJmUpLGcucHVzaChlKSxRKz1yfXJldHVybiBmdW5jdGlvbihBKXt2YXIgQj1BLmxlbmd0aDtpZihCPD1mKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyxBKTtmb3IodmFyIEk9IiIsZz0wO2c8QjspSSs9U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsQS5zbGljZShnLGcrPWYpKTtyZXR1cm4gSX0oZyl9Qi5CdWZmZXI9byxCLlNsb3dCdWZmZXI9ZnVuY3Rpb24oQSl7cmV0dXJuK0EhPUEmJihBPTApLG8uYWxsb2MoK0EpfSxCLklOU1BFQ1RfTUFYX0JZVEVTPTUwLG8uVFlQRURfQVJSQVlfU1VQUE9SVD12b2lkIDAhPT1BLlRZUEVEX0FSUkFZX1NVUFBPUlQ/QS5UWVBFRF9BUlJBWV9TVVBQT1JUOmZ1bmN0aW9uKCl7dHJ5e3ZhciBBPW5ldyBVaW50OEFycmF5KDEpO3JldHVybiBBLl9fcHJvdG9fXz17X19wcm90b19fOlVpbnQ4QXJyYXkucHJvdG90eXBlLGZvbzpmdW5jdGlvbigpe3JldHVybiA0Mn19LDQyPT09QS5mb28oKSYmImZ1bmN0aW9uIj09dHlwZW9mIEEuc3ViYXJyYXkmJjA9PT1BLnN1YmFycmF5KDEsMSkuYnl0ZUxlbmd0aH1jYXRjaChBKXtyZXR1cm4hMX19KCksQi5rTWF4TGVuZ3RoPUMoKSxvLnBvb2xTaXplPTgxOTIsby5fYXVnbWVudD1mdW5jdGlvbihBKXtyZXR1cm4gQS5fX3Byb3RvX189by5wcm90b3R5cGUsQX0sby5mcm9tPWZ1bmN0aW9uKEEsQixJKXtyZXR1cm4gdChudWxsLEEsQixJKX0sby5UWVBFRF9BUlJBWV9TVVBQT1JUJiYoby5wcm90b3R5cGUuX19wcm90b19fPVVpbnQ4QXJyYXkucHJvdG90eXBlLG8uX19wcm90b19fPVVpbnQ4QXJyYXksInVuZGVmaW5lZCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5zcGVjaWVzJiZvW1N5bWJvbC5zcGVjaWVzXT09PW8mJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFN5bWJvbC5zcGVjaWVzLHt2YWx1ZTpudWxsLGNvbmZpZ3VyYWJsZTohMH0pKSxvLmFsbG9jPWZ1bmN0aW9uKEEsQixJKXtyZXR1cm4gZnVuY3Rpb24oQSxCLEksZyl7cmV0dXJuIGUoQiksQjw9MD9pKEEsQik6dm9pZCAwIT09ST8ic3RyaW5nIj09dHlwZW9mIGc/aShBLEIpLmZpbGwoSSxnKTppKEEsQikuZmlsbChJKTppKEEsQil9KG51bGwsQSxCLEkpfSxvLmFsbG9jVW5zYWZlPWZ1bmN0aW9uKEEpe3JldHVybiByKG51bGwsQSl9LG8uYWxsb2NVbnNhZmVTbG93PWZ1bmN0aW9uKEEpe3JldHVybiByKG51bGwsQSl9LG8uaXNCdWZmZXI9ZnVuY3Rpb24oQSl7cmV0dXJuIShudWxsPT1BfHwhQS5faXNCdWZmZXIpfSxvLmNvbXBhcmU9ZnVuY3Rpb24oQSxCKXtpZighby5pc0J1ZmZlcihBKXx8IW8uaXNCdWZmZXIoQikpdGhyb3cgbmV3IFR5cGVFcnJvcigiQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycyIpO2lmKEE9PT1CKXJldHVybiAwO2Zvcih2YXIgST1BLmxlbmd0aCxnPUIubGVuZ3RoLFE9MCxFPU1hdGgubWluKEksZyk7UTxFOysrUSlpZihBW1FdIT09QltRXSl7ST1BW1FdLGc9QltRXTticmVha31yZXR1cm4gSTxnPy0xOmc8ST8xOjB9LG8uaXNFbmNvZGluZz1mdW5jdGlvbihBKXtzd2l0Y2goU3RyaW5nKEEpLnRvTG93ZXJDYXNlKCkpe2Nhc2UiaGV4IjpjYXNlInV0ZjgiOmNhc2UidXRmLTgiOmNhc2UiYXNjaWkiOmNhc2UibGF0aW4xIjpjYXNlImJpbmFyeSI6Y2FzZSJiYXNlNjQiOmNhc2UidWNzMiI6Y2FzZSJ1Y3MtMiI6Y2FzZSJ1dGYxNmxlIjpjYXNlInV0Zi0xNmxlIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX0sby5jb25jYXQ9ZnVuY3Rpb24oQSxCKXtpZighRShBKSl0aHJvdyBuZXcgVHlwZUVycm9yKCcibGlzdCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJyk7aWYoMD09PUEubGVuZ3RoKXJldHVybiBvLmFsbG9jKDApO3ZhciBJO2lmKHZvaWQgMD09PUIpZm9yKEI9MCxJPTA7STxBLmxlbmd0aDsrK0kpQis9QVtJXS5sZW5ndGg7dmFyIGc9by5hbGxvY1Vuc2FmZShCKSxRPTA7Zm9yKEk9MDtJPEEubGVuZ3RoOysrSSl7dmFyIEM9QVtJXTtpZighby5pc0J1ZmZlcihDKSl0aHJvdyBuZXcgVHlwZUVycm9yKCcibGlzdCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJyk7Qy5jb3B5KGcsUSksUSs9Qy5sZW5ndGh9cmV0dXJuIGd9LG8uYnl0ZUxlbmd0aD1zLG8ucHJvdG90eXBlLl9pc0J1ZmZlcj0hMCxvLnByb3RvdHlwZS5zd2FwMTY9ZnVuY3Rpb24oKXt2YXIgQT10aGlzLmxlbmd0aDtpZihBJTIhPTApdGhyb3cgbmV3IFJhbmdlRXJyb3IoIkJ1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzIik7Zm9yKHZhciBCPTA7QjxBO0IrPTIpRCh0aGlzLEIsQisxKTtyZXR1cm4gdGhpc30sby5wcm90b3R5cGUuc3dhcDMyPWZ1bmN0aW9uKCl7dmFyIEE9dGhpcy5sZW5ndGg7aWYoQSU0IT0wKXRocm93IG5ldyBSYW5nZUVycm9yKCJCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cyIpO2Zvcih2YXIgQj0wO0I8QTtCKz00KUQodGhpcyxCLEIrMyksRCh0aGlzLEIrMSxCKzIpO3JldHVybiB0aGlzfSxvLnByb3RvdHlwZS5zd2FwNjQ9ZnVuY3Rpb24oKXt2YXIgQT10aGlzLmxlbmd0aDtpZihBJTghPTApdGhyb3cgbmV3IFJhbmdlRXJyb3IoIkJ1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzIik7Zm9yKHZhciBCPTA7QjxBO0IrPTgpRCh0aGlzLEIsQis3KSxEKHRoaXMsQisxLEIrNiksRCh0aGlzLEIrMixCKzUpLEQodGhpcyxCKzMsQis0KTtyZXR1cm4gdGhpc30sby5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXt2YXIgQT0wfHRoaXMubGVuZ3RoO3JldHVybiAwPT09QT8iIjowPT09YXJndW1lbnRzLmxlbmd0aD9rKHRoaXMsMCxBKTpmdW5jdGlvbihBLEIsSSl7dmFyIGc9ITE7aWYoKHZvaWQgMD09PUJ8fEI8MCkmJihCPTApLEI+dGhpcy5sZW5ndGgpcmV0dXJuIiI7aWYoKHZvaWQgMD09PUl8fEk+dGhpcy5sZW5ndGgpJiYoST10aGlzLmxlbmd0aCksSTw9MClyZXR1cm4iIjtpZigoST4+Pj0wKTw9KEI+Pj49MCkpcmV0dXJuIiI7Zm9yKEF8fChBPSJ1dGY4Iik7Oylzd2l0Y2goQSl7Y2FzZSJoZXgiOnJldHVybiBNKHRoaXMsQixJKTtjYXNlInV0ZjgiOmNhc2UidXRmLTgiOnJldHVybiBrKHRoaXMsQixJKTtjYXNlImFzY2lpIjpyZXR1cm4gTih0aGlzLEIsSSk7Y2FzZSJsYXRpbjEiOmNhc2UiYmluYXJ5IjpyZXR1cm4gZCh0aGlzLEIsSSk7Y2FzZSJiYXNlNjQiOnJldHVybiBTKHRoaXMsQixJKTtjYXNlInVjczIiOmNhc2UidWNzLTIiOmNhc2UidXRmMTZsZSI6Y2FzZSJ1dGYtMTZsZSI6cmV0dXJuIHUodGhpcyxCLEkpO2RlZmF1bHQ6aWYoZyl0aHJvdyBuZXcgVHlwZUVycm9yKCJVbmtub3duIGVuY29kaW5nOiAiK0EpO0E9KEErIiIpLnRvTG93ZXJDYXNlKCksZz0hMH19LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sby5wcm90b3R5cGUuZXF1YWxzPWZ1bmN0aW9uKEEpe2lmKCFvLmlzQnVmZmVyKEEpKXRocm93IG5ldyBUeXBlRXJyb3IoIkFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIiKTtyZXR1cm4gdGhpcz09PUF8fDA9PT1vLmNvbXBhcmUodGhpcyxBKX0sby5wcm90b3R5cGUuaW5zcGVjdD1mdW5jdGlvbigpe3ZhciBBPSIiLEk9Qi5JTlNQRUNUX01BWF9CWVRFUztyZXR1cm4gdGhpcy5sZW5ndGg+MCYmKEE9dGhpcy50b1N0cmluZygiaGV4IiwwLEkpLm1hdGNoKC8uezJ9L2cpLmpvaW4oIiAiKSx0aGlzLmxlbmd0aD5JJiYoQSs9IiAuLi4gIikpLCI8QnVmZmVyICIrQSsiPiJ9LG8ucHJvdG90eXBlLmNvbXBhcmU9ZnVuY3Rpb24oQSxCLEksZyxRKXtpZighby5pc0J1ZmZlcihBKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIik7aWYodm9pZCAwPT09QiYmKEI9MCksdm9pZCAwPT09SSYmKEk9QT9BLmxlbmd0aDowKSx2b2lkIDA9PT1nJiYoZz0wKSx2b2lkIDA9PT1RJiYoUT10aGlzLmxlbmd0aCksQjwwfHxJPkEubGVuZ3RofHxnPDB8fFE+dGhpcy5sZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoIm91dCBvZiByYW5nZSBpbmRleCIpO2lmKGc+PVEmJkI+PUkpcmV0dXJuIDA7aWYoZz49USlyZXR1cm4tMTtpZihCPj1JKXJldHVybiAxO2lmKHRoaXM9PT1BKXJldHVybiAwO2Zvcih2YXIgRT0oUT4+Pj0wKS0oZz4+Pj0wKSxDPShJPj4+PTApLShCPj4+PTApLGk9TWF0aC5taW4oRSxDKSx0PXRoaXMuc2xpY2UoZyxRKSxlPUEuc2xpY2UoQixJKSxyPTA7cjxpOysrcilpZih0W3JdIT09ZVtyXSl7RT10W3JdLEM9ZVtyXTticmVha31yZXR1cm4gRTxDPy0xOkM8RT8xOjB9LG8ucHJvdG90eXBlLmluY2x1ZGVzPWZ1bmN0aW9uKEEsQixJKXtyZXR1cm4tMSE9PXRoaXMuaW5kZXhPZihBLEIsSSl9LG8ucHJvdG90eXBlLmluZGV4T2Y9ZnVuY3Rpb24oQSxCLEkpe3JldHVybiBGKHRoaXMsQSxCLEksITApfSxvLnByb3RvdHlwZS5sYXN0SW5kZXhPZj1mdW5jdGlvbihBLEIsSSl7cmV0dXJuIEYodGhpcyxBLEIsSSwhMSl9LG8ucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKEEsQixJLGcpe2lmKHZvaWQgMD09PUIpZz0idXRmOCIsST10aGlzLmxlbmd0aCxCPTA7ZWxzZSBpZih2b2lkIDA9PT1JJiYic3RyaW5nIj09dHlwZW9mIEIpZz1CLEk9dGhpcy5sZW5ndGgsQj0wO2Vsc2V7aWYoIWlzRmluaXRlKEIpKXRocm93IG5ldyBFcnJvcigiQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQiKTtCfD0wLGlzRmluaXRlKEkpPyhJfD0wLHZvaWQgMD09PWcmJihnPSJ1dGY4IikpOihnPUksST12b2lkIDApfXZhciBRPXRoaXMubGVuZ3RoLUI7aWYoKHZvaWQgMD09PUl8fEk+USkmJihJPVEpLEEubGVuZ3RoPjAmJihJPDB8fEI8MCl8fEI+dGhpcy5sZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoIkF0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzIik7Z3x8KGc9InV0ZjgiKTtmb3IodmFyIEU9ITE7Oylzd2l0Y2goZyl7Y2FzZSJoZXgiOnJldHVybiBjKHRoaXMsQSxCLEkpO2Nhc2UidXRmOCI6Y2FzZSJ1dGYtOCI6cmV0dXJuIGgodGhpcyxBLEIsSSk7Y2FzZSJhc2NpaSI6cmV0dXJuIHkodGhpcyxBLEIsSSk7Y2FzZSJsYXRpbjEiOmNhc2UiYmluYXJ5IjpyZXR1cm4gUih0aGlzLEEsQixJKTtjYXNlImJhc2U2NCI6cmV0dXJuIFUodGhpcyxBLEIsSSk7Y2FzZSJ1Y3MyIjpjYXNlInVjcy0yIjpjYXNlInV0ZjE2bGUiOmNhc2UidXRmLTE2bGUiOnJldHVybiBHKHRoaXMsQSxCLEkpO2RlZmF1bHQ6aWYoRSl0aHJvdyBuZXcgVHlwZUVycm9yKCJVbmtub3duIGVuY29kaW5nOiAiK2cpO2c9KCIiK2cpLnRvTG93ZXJDYXNlKCksRT0hMH19LG8ucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybnt0eXBlOiJCdWZmZXIiLGRhdGE6QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyfHx0aGlzLDApfX07dmFyIGY9NDA5NjtmdW5jdGlvbiBOKEEsQixJKXt2YXIgZz0iIjtJPU1hdGgubWluKEEubGVuZ3RoLEkpO2Zvcih2YXIgUT1CO1E8STsrK1EpZys9U3RyaW5nLmZyb21DaGFyQ29kZSgxMjcmQVtRXSk7cmV0dXJuIGd9ZnVuY3Rpb24gZChBLEIsSSl7dmFyIGc9IiI7ST1NYXRoLm1pbihBLmxlbmd0aCxJKTtmb3IodmFyIFE9QjtRPEk7KytRKWcrPVN0cmluZy5mcm9tQ2hhckNvZGUoQVtRXSk7cmV0dXJuIGd9ZnVuY3Rpb24gTShBLEIsSSl7dmFyIGc9QS5sZW5ndGg7KCFCfHxCPDApJiYoQj0wKSwoIUl8fEk8MHx8ST5nKSYmKEk9Zyk7Zm9yKHZhciBRPSIiLEU9QjtFPEk7KytFKVErPW0oQVtFXSk7cmV0dXJuIFF9ZnVuY3Rpb24gdShBLEIsSSl7Zm9yKHZhciBnPUEuc2xpY2UoQixJKSxRPSIiLEU9MDtFPGcubGVuZ3RoO0UrPTIpUSs9U3RyaW5nLmZyb21DaGFyQ29kZShnW0VdKzI1NipnW0UrMV0pO3JldHVybiBRfWZ1bmN0aW9uIEwoQSxCLEkpe2lmKEElMSE9MHx8QTwwKXRocm93IG5ldyBSYW5nZUVycm9yKCJvZmZzZXQgaXMgbm90IHVpbnQiKTtpZihBK0I+SSl0aHJvdyBuZXcgUmFuZ2VFcnJvcigiVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCIpfWZ1bmN0aW9uIEooQSxCLEksZyxRLEUpe2lmKCFvLmlzQnVmZmVyKEEpKXRocm93IG5ldyBUeXBlRXJyb3IoJyJidWZmZXIiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKTtpZihCPlF8fEI8RSl0aHJvdyBuZXcgUmFuZ2VFcnJvcignInZhbHVlIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJyk7aWYoSStnPkEubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKCJJbmRleCBvdXQgb2YgcmFuZ2UiKX1mdW5jdGlvbiBsKEEsQixJLGcpe0I8MCYmKEI9NjU1MzUrQisxKTtmb3IodmFyIFE9MCxFPU1hdGgubWluKEEubGVuZ3RoLUksMik7UTxFOysrUSlBW0krUV09KEImMjU1PDw4KihnP1E6MS1RKSk+Pj44KihnP1E6MS1RKX1mdW5jdGlvbiBIKEEsQixJLGcpe0I8MCYmKEI9NDI5NDk2NzI5NStCKzEpO2Zvcih2YXIgUT0wLEU9TWF0aC5taW4oQS5sZW5ndGgtSSw0KTtRPEU7KytRKUFbSStRXT1CPj4+OCooZz9ROjMtUSkmMjU1fWZ1bmN0aW9uIFkoQSxCLEksZyxRLEUpe2lmKEkrZz5BLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcigiSW5kZXggb3V0IG9mIHJhbmdlIik7aWYoSTwwKXRocm93IG5ldyBSYW5nZUVycm9yKCJJbmRleCBvdXQgb2YgcmFuZ2UiKX1mdW5jdGlvbiBxKEEsQixJLGcsRSl7cmV0dXJuIEV8fFkoQSwwLEksNCksUS53cml0ZShBLEIsSSxnLDIzLDQpLEkrNH1mdW5jdGlvbiBwKEEsQixJLGcsRSl7cmV0dXJuIEV8fFkoQSwwLEksOCksUS53cml0ZShBLEIsSSxnLDUyLDgpLEkrOH1vLnByb3RvdHlwZS5zbGljZT1mdW5jdGlvbihBLEIpe3ZhciBJLGc9dGhpcy5sZW5ndGg7aWYoKEE9fn5BKTwwPyhBKz1nKTwwJiYoQT0wKTpBPmcmJihBPWcpLChCPXZvaWQgMD09PUI/Zzp+fkIpPDA/KEIrPWcpPDAmJihCPTApOkI+ZyYmKEI9ZyksQjxBJiYoQj1BKSxvLlRZUEVEX0FSUkFZX1NVUFBPUlQpKEk9dGhpcy5zdWJhcnJheShBLEIpKS5fX3Byb3RvX189by5wcm90b3R5cGU7ZWxzZXt2YXIgUT1CLUE7ST1uZXcgbyhRLHZvaWQgMCk7Zm9yKHZhciBFPTA7RTxROysrRSlJW0VdPXRoaXNbRStBXX1yZXR1cm4gSX0sby5wcm90b3R5cGUucmVhZFVJbnRMRT1mdW5jdGlvbihBLEIsSSl7QXw9MCxCfD0wLEl8fEwoQSxCLHRoaXMubGVuZ3RoKTtmb3IodmFyIGc9dGhpc1tBXSxRPTEsRT0wOysrRTxCJiYoUSo9MjU2KTspZys9dGhpc1tBK0VdKlE7cmV0dXJuIGd9LG8ucHJvdG90eXBlLnJlYWRVSW50QkU9ZnVuY3Rpb24oQSxCLEkpe0F8PTAsQnw9MCxJfHxMKEEsQix0aGlzLmxlbmd0aCk7Zm9yKHZhciBnPXRoaXNbQSstLUJdLFE9MTtCPjAmJihRKj0yNTYpOylnKz10aGlzW0ErLS1CXSpRO3JldHVybiBnfSxvLnByb3RvdHlwZS5yZWFkVUludDg9ZnVuY3Rpb24oQSxCKXtyZXR1cm4gQnx8TChBLDEsdGhpcy5sZW5ndGgpLHRoaXNbQV19LG8ucHJvdG90eXBlLnJlYWRVSW50MTZMRT1mdW5jdGlvbihBLEIpe3JldHVybiBCfHxMKEEsMix0aGlzLmxlbmd0aCksdGhpc1tBXXx0aGlzW0ErMV08PDh9LG8ucHJvdG90eXBlLnJlYWRVSW50MTZCRT1mdW5jdGlvbihBLEIpe3JldHVybiBCfHxMKEEsMix0aGlzLmxlbmd0aCksdGhpc1tBXTw8OHx0aGlzW0ErMV19LG8ucHJvdG90eXBlLnJlYWRVSW50MzJMRT1mdW5jdGlvbihBLEIpe3JldHVybiBCfHxMKEEsNCx0aGlzLmxlbmd0aCksKHRoaXNbQV18dGhpc1tBKzFdPDw4fHRoaXNbQSsyXTw8MTYpKzE2Nzc3MjE2KnRoaXNbQSszXX0sby5wcm90b3R5cGUucmVhZFVJbnQzMkJFPWZ1bmN0aW9uKEEsQil7cmV0dXJuIEJ8fEwoQSw0LHRoaXMubGVuZ3RoKSwxNjc3NzIxNip0aGlzW0FdKyh0aGlzW0ErMV08PDE2fHRoaXNbQSsyXTw8OHx0aGlzW0ErM10pfSxvLnByb3RvdHlwZS5yZWFkSW50TEU9ZnVuY3Rpb24oQSxCLEkpe0F8PTAsQnw9MCxJfHxMKEEsQix0aGlzLmxlbmd0aCk7Zm9yKHZhciBnPXRoaXNbQV0sUT0xLEU9MDsrK0U8QiYmKFEqPTI1Nik7KWcrPXRoaXNbQStFXSpRO3JldHVybiBnPj0oUSo9MTI4KSYmKGctPU1hdGgucG93KDIsOCpCKSksZ30sby5wcm90b3R5cGUucmVhZEludEJFPWZ1bmN0aW9uKEEsQixJKXtBfD0wLEJ8PTAsSXx8TChBLEIsdGhpcy5sZW5ndGgpO2Zvcih2YXIgZz1CLFE9MSxFPXRoaXNbQSstLWddO2c+MCYmKFEqPTI1Nik7KUUrPXRoaXNbQSstLWddKlE7cmV0dXJuIEU+PShRKj0xMjgpJiYoRS09TWF0aC5wb3coMiw4KkIpKSxFfSxvLnByb3RvdHlwZS5yZWFkSW50OD1mdW5jdGlvbihBLEIpe3JldHVybiBCfHxMKEEsMSx0aGlzLmxlbmd0aCksMTI4JnRoaXNbQV0/LTEqKDI1NS10aGlzW0FdKzEpOnRoaXNbQV19LG8ucHJvdG90eXBlLnJlYWRJbnQxNkxFPWZ1bmN0aW9uKEEsQil7Qnx8TChBLDIsdGhpcy5sZW5ndGgpO3ZhciBJPXRoaXNbQV18dGhpc1tBKzFdPDw4O3JldHVybiAzMjc2OCZJPzQyOTQ5MDE3NjB8STpJfSxvLnByb3RvdHlwZS5yZWFkSW50MTZCRT1mdW5jdGlvbihBLEIpe0J8fEwoQSwyLHRoaXMubGVuZ3RoKTt2YXIgST10aGlzW0ErMV18dGhpc1tBXTw8ODtyZXR1cm4gMzI3NjgmST80Mjk0OTAxNzYwfEk6SX0sby5wcm90b3R5cGUucmVhZEludDMyTEU9ZnVuY3Rpb24oQSxCKXtyZXR1cm4gQnx8TChBLDQsdGhpcy5sZW5ndGgpLHRoaXNbQV18dGhpc1tBKzFdPDw4fHRoaXNbQSsyXTw8MTZ8dGhpc1tBKzNdPDwyNH0sby5wcm90b3R5cGUucmVhZEludDMyQkU9ZnVuY3Rpb24oQSxCKXtyZXR1cm4gQnx8TChBLDQsdGhpcy5sZW5ndGgpLHRoaXNbQV08PDI0fHRoaXNbQSsxXTw8MTZ8dGhpc1tBKzJdPDw4fHRoaXNbQSszXX0sby5wcm90b3R5cGUucmVhZEZsb2F0TEU9ZnVuY3Rpb24oQSxCKXtyZXR1cm4gQnx8TChBLDQsdGhpcy5sZW5ndGgpLFEucmVhZCh0aGlzLEEsITAsMjMsNCl9LG8ucHJvdG90eXBlLnJlYWRGbG9hdEJFPWZ1bmN0aW9uKEEsQil7cmV0dXJuIEJ8fEwoQSw0LHRoaXMubGVuZ3RoKSxRLnJlYWQodGhpcyxBLCExLDIzLDQpfSxvLnByb3RvdHlwZS5yZWFkRG91YmxlTEU9ZnVuY3Rpb24oQSxCKXtyZXR1cm4gQnx8TChBLDgsdGhpcy5sZW5ndGgpLFEucmVhZCh0aGlzLEEsITAsNTIsOCl9LG8ucHJvdG90eXBlLnJlYWREb3VibGVCRT1mdW5jdGlvbihBLEIpe3JldHVybiBCfHxMKEEsOCx0aGlzLmxlbmd0aCksUS5yZWFkKHRoaXMsQSwhMSw1Miw4KX0sby5wcm90b3R5cGUud3JpdGVVSW50TEU9ZnVuY3Rpb24oQSxCLEksZyl7QT0rQSxCfD0wLEl8PTAsZ3x8Sih0aGlzLEEsQixJLE1hdGgucG93KDIsOCpJKS0xLDApO3ZhciBRPTEsRT0wO2Zvcih0aGlzW0JdPTI1NSZBOysrRTxJJiYoUSo9MjU2KTspdGhpc1tCK0VdPUEvUSYyNTU7cmV0dXJuIEIrSX0sby5wcm90b3R5cGUud3JpdGVVSW50QkU9ZnVuY3Rpb24oQSxCLEksZyl7QT0rQSxCfD0wLEl8PTAsZ3x8Sih0aGlzLEEsQixJLE1hdGgucG93KDIsOCpJKS0xLDApO3ZhciBRPUktMSxFPTE7Zm9yKHRoaXNbQitRXT0yNTUmQTstLVE+PTAmJihFKj0yNTYpOyl0aGlzW0IrUV09QS9FJjI1NTtyZXR1cm4gQitJfSxvLnByb3RvdHlwZS53cml0ZVVJbnQ4PWZ1bmN0aW9uKEEsQixJKXtyZXR1cm4gQT0rQSxCfD0wLEl8fEoodGhpcyxBLEIsMSwyNTUsMCksby5UWVBFRF9BUlJBWV9TVVBQT1JUfHwoQT1NYXRoLmZsb29yKEEpKSx0aGlzW0JdPTI1NSZBLEIrMX0sby5wcm90b3R5cGUud3JpdGVVSW50MTZMRT1mdW5jdGlvbihBLEIsSSl7cmV0dXJuIEE9K0EsQnw9MCxJfHxKKHRoaXMsQSxCLDIsNjU1MzUsMCksby5UWVBFRF9BUlJBWV9TVVBQT1JUPyh0aGlzW0JdPTI1NSZBLHRoaXNbQisxXT1BPj4+OCk6bCh0aGlzLEEsQiwhMCksQisyfSxvLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFPWZ1bmN0aW9uKEEsQixJKXtyZXR1cm4gQT0rQSxCfD0wLEl8fEoodGhpcyxBLEIsMiw2NTUzNSwwKSxvLlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHRoaXNbQl09QT4+PjgsdGhpc1tCKzFdPTI1NSZBKTpsKHRoaXMsQSxCLCExKSxCKzJ9LG8ucHJvdG90eXBlLndyaXRlVUludDMyTEU9ZnVuY3Rpb24oQSxCLEkpe3JldHVybiBBPStBLEJ8PTAsSXx8Sih0aGlzLEEsQiw0LDQyOTQ5NjcyOTUsMCksby5UWVBFRF9BUlJBWV9TVVBQT1JUPyh0aGlzW0IrM109QT4+PjI0LHRoaXNbQisyXT1BPj4+MTYsdGhpc1tCKzFdPUE+Pj44LHRoaXNbQl09MjU1JkEpOkgodGhpcyxBLEIsITApLEIrNH0sby5wcm90b3R5cGUud3JpdGVVSW50MzJCRT1mdW5jdGlvbihBLEIsSSl7cmV0dXJuIEE9K0EsQnw9MCxJfHxKKHRoaXMsQSxCLDQsNDI5NDk2NzI5NSwwKSxvLlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHRoaXNbQl09QT4+PjI0LHRoaXNbQisxXT1BPj4+MTYsdGhpc1tCKzJdPUE+Pj44LHRoaXNbQiszXT0yNTUmQSk6SCh0aGlzLEEsQiwhMSksQis0fSxvLnByb3RvdHlwZS53cml0ZUludExFPWZ1bmN0aW9uKEEsQixJLGcpe2lmKEE9K0EsQnw9MCwhZyl7dmFyIFE9TWF0aC5wb3coMiw4KkktMSk7Sih0aGlzLEEsQixJLFEtMSwtUSl9dmFyIEU9MCxDPTEsaT0wO2Zvcih0aGlzW0JdPTI1NSZBOysrRTxJJiYoQyo9MjU2KTspQTwwJiYwPT09aSYmMCE9PXRoaXNbQitFLTFdJiYoaT0xKSx0aGlzW0IrRV09KEEvQz4+MCktaSYyNTU7cmV0dXJuIEIrSX0sby5wcm90b3R5cGUud3JpdGVJbnRCRT1mdW5jdGlvbihBLEIsSSxnKXtpZihBPStBLEJ8PTAsIWcpe3ZhciBRPU1hdGgucG93KDIsOCpJLTEpO0oodGhpcyxBLEIsSSxRLTEsLVEpfXZhciBFPUktMSxDPTEsaT0wO2Zvcih0aGlzW0IrRV09MjU1JkE7LS1FPj0wJiYoQyo9MjU2KTspQTwwJiYwPT09aSYmMCE9PXRoaXNbQitFKzFdJiYoaT0xKSx0aGlzW0IrRV09KEEvQz4+MCktaSYyNTU7cmV0dXJuIEIrSX0sby5wcm90b3R5cGUud3JpdGVJbnQ4PWZ1bmN0aW9uKEEsQixJKXtyZXR1cm4gQT0rQSxCfD0wLEl8fEoodGhpcyxBLEIsMSwxMjcsLTEyOCksby5UWVBFRF9BUlJBWV9TVVBQT1JUfHwoQT1NYXRoLmZsb29yKEEpKSxBPDAmJihBPTI1NStBKzEpLHRoaXNbQl09MjU1JkEsQisxfSxvLnByb3RvdHlwZS53cml0ZUludDE2TEU9ZnVuY3Rpb24oQSxCLEkpe3JldHVybiBBPStBLEJ8PTAsSXx8Sih0aGlzLEEsQiwyLDMyNzY3LC0zMjc2OCksby5UWVBFRF9BUlJBWV9TVVBQT1JUPyh0aGlzW0JdPTI1NSZBLHRoaXNbQisxXT1BPj4+OCk6bCh0aGlzLEEsQiwhMCksQisyfSxvLnByb3RvdHlwZS53cml0ZUludDE2QkU9ZnVuY3Rpb24oQSxCLEkpe3JldHVybiBBPStBLEJ8PTAsSXx8Sih0aGlzLEEsQiwyLDMyNzY3LC0zMjc2OCksby5UWVBFRF9BUlJBWV9TVVBQT1JUPyh0aGlzW0JdPUE+Pj44LHRoaXNbQisxXT0yNTUmQSk6bCh0aGlzLEEsQiwhMSksQisyfSxvLnByb3RvdHlwZS53cml0ZUludDMyTEU9ZnVuY3Rpb24oQSxCLEkpe3JldHVybiBBPStBLEJ8PTAsSXx8Sih0aGlzLEEsQiw0LDIxNDc0ODM2NDcsLTIxNDc0ODM2NDgpLG8uVFlQRURfQVJSQVlfU1VQUE9SVD8odGhpc1tCXT0yNTUmQSx0aGlzW0IrMV09QT4+PjgsdGhpc1tCKzJdPUE+Pj4xNix0aGlzW0IrM109QT4+PjI0KTpIKHRoaXMsQSxCLCEwKSxCKzR9LG8ucHJvdG90eXBlLndyaXRlSW50MzJCRT1mdW5jdGlvbihBLEIsSSl7cmV0dXJuIEE9K0EsQnw9MCxJfHxKKHRoaXMsQSxCLDQsMjE0NzQ4MzY0NywtMjE0NzQ4MzY0OCksQTwwJiYoQT00Mjk0OTY3Mjk1K0ErMSksby5UWVBFRF9BUlJBWV9TVVBQT1JUPyh0aGlzW0JdPUE+Pj4yNCx0aGlzW0IrMV09QT4+PjE2LHRoaXNbQisyXT1BPj4+OCx0aGlzW0IrM109MjU1JkEpOkgodGhpcyxBLEIsITEpLEIrNH0sby5wcm90b3R5cGUud3JpdGVGbG9hdExFPWZ1bmN0aW9uKEEsQixJKXtyZXR1cm4gcSh0aGlzLEEsQiwhMCxJKX0sby5wcm90b3R5cGUud3JpdGVGbG9hdEJFPWZ1bmN0aW9uKEEsQixJKXtyZXR1cm4gcSh0aGlzLEEsQiwhMSxJKX0sby5wcm90b3R5cGUud3JpdGVEb3VibGVMRT1mdW5jdGlvbihBLEIsSSl7cmV0dXJuIHAodGhpcyxBLEIsITAsSSl9LG8ucHJvdG90eXBlLndyaXRlRG91YmxlQkU9ZnVuY3Rpb24oQSxCLEkpe3JldHVybiBwKHRoaXMsQSxCLCExLEkpfSxvLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKEEsQixJLGcpe2lmKEl8fChJPTApLGd8fDA9PT1nfHwoZz10aGlzLmxlbmd0aCksQj49QS5sZW5ndGgmJihCPUEubGVuZ3RoKSxCfHwoQj0wKSxnPjAmJmc8SSYmKGc9SSksZz09PUkpcmV0dXJuIDA7aWYoMD09PUEubGVuZ3RofHwwPT09dGhpcy5sZW5ndGgpcmV0dXJuIDA7aWYoQjwwKXRocm93IG5ldyBSYW5nZUVycm9yKCJ0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzIik7aWYoSTwwfHxJPj10aGlzLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcigic291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcyIpO2lmKGc8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcigic291cmNlRW5kIG91dCBvZiBib3VuZHMiKTtnPnRoaXMubGVuZ3RoJiYoZz10aGlzLmxlbmd0aCksQS5sZW5ndGgtQjxnLUkmJihnPUEubGVuZ3RoLUIrSSk7dmFyIFEsRT1nLUk7aWYodGhpcz09PUEmJkk8QiYmQjxnKWZvcihRPUUtMTtRPj0wOy0tUSlBW1ErQl09dGhpc1tRK0ldO2Vsc2UgaWYoRTwxZTN8fCFvLlRZUEVEX0FSUkFZX1NVUFBPUlQpZm9yKFE9MDtRPEU7KytRKUFbUStCXT10aGlzW1ErSV07ZWxzZSBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChBLHRoaXMuc3ViYXJyYXkoSSxJK0UpLEIpO3JldHVybiBFfSxvLnByb3RvdHlwZS5maWxsPWZ1bmN0aW9uKEEsQixJLGcpe2lmKCJzdHJpbmciPT10eXBlb2YgQSl7aWYoInN0cmluZyI9PXR5cGVvZiBCPyhnPUIsQj0wLEk9dGhpcy5sZW5ndGgpOiJzdHJpbmciPT10eXBlb2YgSSYmKGc9SSxJPXRoaXMubGVuZ3RoKSwxPT09QS5sZW5ndGgpe3ZhciBRPUEuY2hhckNvZGVBdCgwKTtRPDI1NiYmKEE9USl9aWYodm9pZCAwIT09ZyYmInN0cmluZyIhPXR5cGVvZiBnKXRocm93IG5ldyBUeXBlRXJyb3IoImVuY29kaW5nIG11c3QgYmUgYSBzdHJpbmciKTtpZigic3RyaW5nIj09dHlwZW9mIGcmJiFvLmlzRW5jb2RpbmcoZykpdGhyb3cgbmV3IFR5cGVFcnJvcigiVW5rbm93biBlbmNvZGluZzogIitnKX1lbHNlIm51bWJlciI9PXR5cGVvZiBBJiYoQSY9MjU1KTtpZihCPDB8fHRoaXMubGVuZ3RoPEJ8fHRoaXMubGVuZ3RoPEkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoIk91dCBvZiByYW5nZSBpbmRleCIpO2lmKEk8PUIpcmV0dXJuIHRoaXM7dmFyIEU7aWYoQj4+Pj0wLEk9dm9pZCAwPT09ST90aGlzLmxlbmd0aDpJPj4+MCxBfHwoQT0wKSwibnVtYmVyIj09dHlwZW9mIEEpZm9yKEU9QjtFPEk7KytFKXRoaXNbRV09QTtlbHNle3ZhciBDPW8uaXNCdWZmZXIoQSk/QTp4KG5ldyBvKEEsZykudG9TdHJpbmcoKSksaT1DLmxlbmd0aDtmb3IoRT0wO0U8SS1COysrRSl0aGlzW0UrQl09Q1tFJWldfXJldHVybiB0aGlzfTt2YXIgSz0vW14rXC8wLTlBLVphLXotX10vZztmdW5jdGlvbiBtKEEpe3JldHVybiBBPDE2PyIwIitBLnRvU3RyaW5nKDE2KTpBLnRvU3RyaW5nKDE2KX1mdW5jdGlvbiB4KEEsQil7dmFyIEk7Qj1CfHwxLzA7Zm9yKHZhciBnPUEubGVuZ3RoLFE9bnVsbCxFPVtdLEM9MDtDPGc7KytDKXtpZigoST1BLmNoYXJDb2RlQXQoQykpPjU1Mjk1JiZJPDU3MzQ0KXtpZighUSl7aWYoST41NjMxOSl7KEItPTMpPi0xJiZFLnB1c2goMjM5LDE5MSwxODkpO2NvbnRpbnVlfWlmKEMrMT09PWcpeyhCLT0zKT4tMSYmRS5wdXNoKDIzOSwxOTEsMTg5KTtjb250aW51ZX1RPUk7Y29udGludWV9aWYoSTw1NjMyMCl7KEItPTMpPi0xJiZFLnB1c2goMjM5LDE5MSwxODkpLFE9STtjb250aW51ZX1JPTY1NTM2KyhRLTU1Mjk2PDwxMHxJLTU2MzIwKX1lbHNlIFEmJihCLT0zKT4tMSYmRS5wdXNoKDIzOSwxOTEsMTg5KTtpZihRPW51bGwsSTwxMjgpe2lmKChCLT0xKTwwKWJyZWFrO0UucHVzaChJKX1lbHNlIGlmKEk8MjA0OCl7aWYoKEItPTIpPDApYnJlYWs7RS5wdXNoKEk+PjZ8MTkyLDYzJkl8MTI4KX1lbHNlIGlmKEk8NjU1MzYpe2lmKChCLT0zKTwwKWJyZWFrO0UucHVzaChJPj4xMnwyMjQsST4+NiY2M3wxMjgsNjMmSXwxMjgpfWVsc2V7aWYoIShJPDExMTQxMTIpKXRocm93IG5ldyBFcnJvcigiSW52YWxpZCBjb2RlIHBvaW50Iik7aWYoKEItPTQpPDApYnJlYWs7RS5wdXNoKEk+PjE4fDI0MCxJPj4xMiY2M3wxMjgsST4+NiY2M3wxMjgsNjMmSXwxMjgpfX1yZXR1cm4gRX1mdW5jdGlvbiB2KEEpe3JldHVybiBnLnRvQnl0ZUFycmF5KGZ1bmN0aW9uKEEpe2lmKChBPWZ1bmN0aW9uKEEpe3JldHVybiBBLnRyaW0/QS50cmltKCk6QS5yZXBsYWNlKC9eXHMrfFxzKyQvZywiIil9KEEpLnJlcGxhY2UoSywiIikpLmxlbmd0aDwyKXJldHVybiIiO2Zvcig7QS5sZW5ndGglNCE9MDspQSs9Ij0iO3JldHVybiBBfShBKSl9ZnVuY3Rpb24gVyhBLEIsSSxnKXtmb3IodmFyIFE9MDtRPGcmJiEoUStJPj1CLmxlbmd0aHx8UT49QS5sZW5ndGgpOysrUSlCW1ErSV09QVtRXTtyZXR1cm4gUX19KS5jYWxsKHRoaXMsSSg4KSl9LGZ1bmN0aW9uKEEsQil7dmFyIEk7ST1mdW5jdGlvbigpe3JldHVybiB0aGlzfSgpO3RyeXtJPUl8fEZ1bmN0aW9uKCJyZXR1cm4gdGhpcyIpKCl8fCgwLGV2YWwpKCJ0aGlzIil9Y2F0Y2goQSl7Im9iamVjdCI9PXR5cGVvZiB3aW5kb3cmJihJPXdpbmRvdyl9QS5leHBvcnRzPUl9LGZ1bmN0aW9uKEEsQixJKXtCLmJ5dGVMZW5ndGg9ZnVuY3Rpb24oQSl7dmFyIEI9dChBKSxJPUJbMF0sZz1CWzFdO3JldHVybiAzKihJK2cpLzQtZ30sQi50b0J5dGVBcnJheT1mdW5jdGlvbihBKXtmb3IodmFyIEIsST10KEEpLGc9SVswXSxDPUlbMV0saT1uZXcgRShmdW5jdGlvbihBLEIsSSl7cmV0dXJuIDMqKEIrSSkvNC1JfSgwLGcsQykpLG89MCxlPUM+MD9nLTQ6ZyxyPTA7cjxlO3IrPTQpQj1RW0EuY2hhckNvZGVBdChyKV08PDE4fFFbQS5jaGFyQ29kZUF0KHIrMSldPDwxMnxRW0EuY2hhckNvZGVBdChyKzIpXTw8NnxRW0EuY2hhckNvZGVBdChyKzMpXSxpW28rK109Qj4+MTYmMjU1LGlbbysrXT1CPj44JjI1NSxpW28rK109MjU1JkI7cmV0dXJuIDI9PT1DJiYoQj1RW0EuY2hhckNvZGVBdChyKV08PDJ8UVtBLmNoYXJDb2RlQXQocisxKV0+PjQsaVtvKytdPTI1NSZCKSwxPT09QyYmKEI9UVtBLmNoYXJDb2RlQXQocildPDwxMHxRW0EuY2hhckNvZGVBdChyKzEpXTw8NHxRW0EuY2hhckNvZGVBdChyKzIpXT4+MixpW28rK109Qj4+OCYyNTUsaVtvKytdPTI1NSZCKSxpfSxCLmZyb21CeXRlQXJyYXk9ZnVuY3Rpb24oQSl7Zm9yKHZhciBCLEk9QS5sZW5ndGgsUT1JJTMsRT1bXSxDPTAsaT1JLVE7QzxpO0MrPTE2MzgzKUUucHVzaChyKEEsQyxDKzE2MzgzPmk/aTpDKzE2MzgzKSk7cmV0dXJuIDE9PT1RPyhCPUFbSS0xXSxFLnB1c2goZ1tCPj4yXStnW0I8PDQmNjNdKyI9PSIpKToyPT09USYmKEI9KEFbSS0yXTw8OCkrQVtJLTFdLEUucHVzaChnW0I+PjEwXStnW0I+PjQmNjNdK2dbQjw8MiY2M10rIj0iKSksRS5qb2luKCIiKX07Zm9yKHZhciBnPVtdLFE9W10sRT0idW5kZWZpbmVkIiE9dHlwZW9mIFVpbnQ4QXJyYXk/VWludDhBcnJheTpBcnJheSxDPSJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvIixpPTAsbz1DLmxlbmd0aDtpPG87KytpKWdbaV09Q1tpXSxRW0MuY2hhckNvZGVBdChpKV09aTtmdW5jdGlvbiB0KEEpe3ZhciBCPUEubGVuZ3RoO2lmKEIlND4wKXRocm93IG5ldyBFcnJvcigiSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCIpO3ZhciBJPUEuaW5kZXhPZigiPSIpO3JldHVybi0xPT09SSYmKEk9QiksW0ksST09PUI/MDo0LUklNF19ZnVuY3Rpb24gZShBKXtyZXR1cm4gZ1tBPj4xOCY2M10rZ1tBPj4xMiY2M10rZ1tBPj42JjYzXStnWzYzJkFdfWZ1bmN0aW9uIHIoQSxCLEkpe2Zvcih2YXIgZyxRPVtdLEU9QjtFPEk7RSs9MylnPShBW0VdPDwxNiYxNjcxMTY4MCkrKEFbRSsxXTw8OCY2NTI4MCkrKDI1NSZBW0UrMl0pLFEucHVzaChlKGcpKTtyZXR1cm4gUS5qb2luKCIiKX1RWyItIi5jaGFyQ29kZUF0KDApXT02MixRWyJfIi5jaGFyQ29kZUF0KDApXT02M30sZnVuY3Rpb24oQSxCKXtCLnJlYWQ9ZnVuY3Rpb24oQSxCLEksZyxRKXt2YXIgRSxDLGk9OCpRLWctMSxvPSgxPDxpKS0xLHQ9bz4+MSxlPS03LHI9ST9RLTE6MCxhPUk/LTE6MSxuPUFbQityXTtmb3Iocis9YSxFPW4mKDE8PC1lKS0xLG4+Pj0tZSxlKz1pO2U+MDtFPTI1NipFK0FbQityXSxyKz1hLGUtPTgpO2ZvcihDPUUmKDE8PC1lKS0xLEU+Pj0tZSxlKz1nO2U+MDtDPTI1NipDK0FbQityXSxyKz1hLGUtPTgpO2lmKDA9PT1FKUU9MS10O2Vsc2V7aWYoRT09PW8pcmV0dXJuIEM/TmFOOjEvMCoobj8tMToxKTtDKz1NYXRoLnBvdygyLGcpLEUtPXR9cmV0dXJuKG4/LTE6MSkqQypNYXRoLnBvdygyLEUtZyl9LEIud3JpdGU9ZnVuY3Rpb24oQSxCLEksZyxRLEUpe3ZhciBDLGksbyx0PTgqRS1RLTEsZT0oMTw8dCktMSxyPWU+PjEsYT0yMz09PVE/TWF0aC5wb3coMiwtMjQpLU1hdGgucG93KDIsLTc3KTowLG49Zz8wOkUtMSxzPWc/MTotMSxEPUI8MHx8MD09PUImJjEvQjwwPzE6MDtmb3IoQj1NYXRoLmFicyhCKSxpc05hTihCKXx8Qj09PTEvMD8oaT1pc05hTihCKT8xOjAsQz1lKTooQz1NYXRoLmZsb29yKE1hdGgubG9nKEIpL01hdGguTE4yKSxCKihvPU1hdGgucG93KDIsLUMpKTwxJiYoQy0tLG8qPTIpLChCKz1DK3I+PTE/YS9vOmEqTWF0aC5wb3coMiwxLXIpKSpvPj0yJiYoQysrLG8vPTIpLEMrcj49ZT8oaT0wLEM9ZSk6QytyPj0xPyhpPShCKm8tMSkqTWF0aC5wb3coMixRKSxDKz1yKTooaT1CKk1hdGgucG93KDIsci0xKSpNYXRoLnBvdygyLFEpLEM9MCkpO1E+PTg7QVtJK25dPTI1NSZpLG4rPXMsaS89MjU2LFEtPTgpO2ZvcihDPUM8PFF8aSx0Kz1RO3Q+MDtBW0krbl09MjU1JkMsbis9cyxDLz0yNTYsdC09OCk7QVtJK24tc118PTEyOCpEfX0sZnVuY3Rpb24oQSxCKXt2YXIgST17fS50b1N0cmluZztBLmV4cG9ydHM9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24oQSl7cmV0dXJuIltvYmplY3QgQXJyYXldIj09SS5jYWxsKEEpfX0sZnVuY3Rpb24oQixJKXtCLmV4cG9ydHM9QX0sZnVuY3Rpb24oQSxCLEkpeyhmdW5jdGlvbihBKXtmdW5jdGlvbiBJKEEsQil7Zm9yKHZhciBJPTAsZz1BLmxlbmd0aC0xO2c+PTA7Zy0tKXt2YXIgUT1BW2ddOyIuIj09PVE/QS5zcGxpY2UoZywxKToiLi4iPT09UT8oQS5zcGxpY2UoZywxKSxJKyspOkkmJihBLnNwbGljZShnLDEpLEktLSl9aWYoQilmb3IoO0ktLTtJKUEudW5zaGlmdCgiLi4iKTtyZXR1cm4gQX12YXIgZz0vXihcLz98KShbXHNcU10qPykoKD86XC57MSwyfXxbXlwvXSs/fCkoXC5bXi5cL10qfCkpKD86W1wvXSopJC8sUT1mdW5jdGlvbihBKXtyZXR1cm4gZy5leGVjKEEpLnNsaWNlKDEpfTtmdW5jdGlvbiBFKEEsQil7aWYoQS5maWx0ZXIpcmV0dXJuIEEuZmlsdGVyKEIpO2Zvcih2YXIgST1bXSxnPTA7ZzxBLmxlbmd0aDtnKyspQihBW2ddLGcsQSkmJkkucHVzaChBW2ddKTtyZXR1cm4gSX1CLnJlc29sdmU9ZnVuY3Rpb24oKXtmb3IodmFyIEI9IiIsZz0hMSxRPWFyZ3VtZW50cy5sZW5ndGgtMTtRPj0tMSYmIWc7US0tKXt2YXIgQz1RPj0wP2FyZ3VtZW50c1tRXTpBLmN3ZCgpO2lmKCJzdHJpbmciIT10eXBlb2YgQyl0aHJvdyBuZXcgVHlwZUVycm9yKCJBcmd1bWVudHMgdG8gcGF0aC5yZXNvbHZlIG11c3QgYmUgc3RyaW5ncyIpO0MmJihCPUMrIi8iK0IsZz0iLyI9PT1DLmNoYXJBdCgwKSl9cmV0dXJuKGc/Ii8iOiIiKSsoQj1JKEUoQi5zcGxpdCgiLyIpLChmdW5jdGlvbihBKXtyZXR1cm4hIUF9KSksIWcpLmpvaW4oIi8iKSl8fCIuIn0sQi5ub3JtYWxpemU9ZnVuY3Rpb24oQSl7dmFyIGc9Qi5pc0Fic29sdXRlKEEpLFE9Ii8iPT09QyhBLC0xKTtyZXR1cm4oQT1JKEUoQS5zcGxpdCgiLyIpLChmdW5jdGlvbihBKXtyZXR1cm4hIUF9KSksIWcpLmpvaW4oIi8iKSl8fGd8fChBPSIuIiksQSYmUSYmKEErPSIvIiksKGc/Ii8iOiIiKStBfSxCLmlzQWJzb2x1dGU9ZnVuY3Rpb24oQSl7cmV0dXJuIi8iPT09QS5jaGFyQXQoMCl9LEIuam9pbj1mdW5jdGlvbigpe3ZhciBBPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKTtyZXR1cm4gQi5ub3JtYWxpemUoRShBLChmdW5jdGlvbihBLEIpe2lmKCJzdHJpbmciIT10eXBlb2YgQSl0aHJvdyBuZXcgVHlwZUVycm9yKCJBcmd1bWVudHMgdG8gcGF0aC5qb2luIG11c3QgYmUgc3RyaW5ncyIpO3JldHVybiBBfSkpLmpvaW4oIi8iKSl9LEIucmVsYXRpdmU9ZnVuY3Rpb24oQSxJKXtmdW5jdGlvbiBnKEEpe2Zvcih2YXIgQj0wO0I8QS5sZW5ndGgmJiIiPT09QVtCXTtCKyspO2Zvcih2YXIgST1BLmxlbmd0aC0xO0k+PTAmJiIiPT09QVtJXTtJLS0pO3JldHVybiBCPkk/W106QS5zbGljZShCLEktQisxKX1BPUIucmVzb2x2ZShBKS5zdWJzdHIoMSksST1CLnJlc29sdmUoSSkuc3Vic3RyKDEpO2Zvcih2YXIgUT1nKEEuc3BsaXQoIi8iKSksRT1nKEkuc3BsaXQoIi8iKSksQz1NYXRoLm1pbihRLmxlbmd0aCxFLmxlbmd0aCksaT1DLG89MDtvPEM7bysrKWlmKFFbb10hPT1FW29dKXtpPW87YnJlYWt9dmFyIHQ9W107Zm9yKG89aTtvPFEubGVuZ3RoO28rKyl0LnB1c2goIi4uIik7cmV0dXJuKHQ9dC5jb25jYXQoRS5zbGljZShpKSkpLmpvaW4oIi8iKX0sQi5zZXA9Ii8iLEIuZGVsaW1pdGVyPSI6IixCLmRpcm5hbWU9ZnVuY3Rpb24oQSl7dmFyIEI9UShBKSxJPUJbMF0sZz1CWzFdO3JldHVybiBJfHxnPyhnJiYoZz1nLnN1YnN0cigwLGcubGVuZ3RoLTEpKSxJK2cpOiIuIn0sQi5iYXNlbmFtZT1mdW5jdGlvbihBLEIpe3ZhciBJPVEoQSlbMl07cmV0dXJuIEImJkkuc3Vic3RyKC0xKkIubGVuZ3RoKT09PUImJihJPUkuc3Vic3RyKDAsSS5sZW5ndGgtQi5sZW5ndGgpKSxJfSxCLmV4dG5hbWU9ZnVuY3Rpb24oQSl7cmV0dXJuIFEoQSlbM119O3ZhciBDPSJiIj09PSJhYiIuc3Vic3RyKC0xKT9mdW5jdGlvbihBLEIsSSl7cmV0dXJuIEEuc3Vic3RyKEIsSSl9OmZ1bmN0aW9uKEEsQixJKXtyZXR1cm4gQjwwJiYoQj1BLmxlbmd0aCtCKSxBLnN1YnN0cihCLEkpfX0pLmNhbGwodGhpcyxJKDE0KSl9LGZ1bmN0aW9uKEEsQil7dmFyIEksZyxRPUEuZXhwb3J0cz17fTtmdW5jdGlvbiBFKCl7dGhyb3cgbmV3IEVycm9yKCJzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkIil9ZnVuY3Rpb24gQygpe3Rocm93IG5ldyBFcnJvcigiY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkIil9ZnVuY3Rpb24gaShBKXtpZihJPT09c2V0VGltZW91dClyZXR1cm4gc2V0VGltZW91dChBLDApO2lmKChJPT09RXx8IUkpJiZzZXRUaW1lb3V0KXJldHVybiBJPXNldFRpbWVvdXQsc2V0VGltZW91dChBLDApO3RyeXtyZXR1cm4gSShBLDApfWNhdGNoKEIpe3RyeXtyZXR1cm4gSS5jYWxsKG51bGwsQSwwKX1jYXRjaChCKXtyZXR1cm4gSS5jYWxsKHRoaXMsQSwwKX19fSFmdW5jdGlvbigpe3RyeXtJPSJmdW5jdGlvbiI9PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6RX1jYXRjaChBKXtJPUV9dHJ5e2c9ImZ1bmN0aW9uIj09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6Q31jYXRjaChBKXtnPUN9fSgpO3ZhciBvLHQ9W10sZT0hMSxyPS0xO2Z1bmN0aW9uIGEoKXtlJiZvJiYoZT0hMSxvLmxlbmd0aD90PW8uY29uY2F0KHQpOnI9LTEsdC5sZW5ndGgmJm4oKSl9ZnVuY3Rpb24gbigpe2lmKCFlKXt2YXIgQT1pKGEpO2U9ITA7Zm9yKHZhciBCPXQubGVuZ3RoO0I7KXtmb3Iobz10LHQ9W107KytyPEI7KW8mJm9bcl0ucnVuKCk7cj0tMSxCPXQubGVuZ3RofW89bnVsbCxlPSExLGZ1bmN0aW9uKEEpe2lmKGc9PT1jbGVhclRpbWVvdXQpcmV0dXJuIGNsZWFyVGltZW91dChBKTtpZigoZz09PUN8fCFnKSYmY2xlYXJUaW1lb3V0KXJldHVybiBnPWNsZWFyVGltZW91dCxjbGVhclRpbWVvdXQoQSk7dHJ5e2coQSl9Y2F0Y2goQil7dHJ5e3JldHVybiBnLmNhbGwobnVsbCxBKX1jYXRjaChCKXtyZXR1cm4gZy5jYWxsKHRoaXMsQSl9fX0oQSl9fWZ1bmN0aW9uIHMoQSxCKXt0aGlzLmZ1bj1BLHRoaXMuYXJyYXk9Qn1mdW5jdGlvbiBEKCl7fVEubmV4dFRpY2s9ZnVuY3Rpb24oQSl7dmFyIEI9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSk7aWYoYXJndW1lbnRzLmxlbmd0aD4xKWZvcih2YXIgST0xO0k8YXJndW1lbnRzLmxlbmd0aDtJKyspQltJLTFdPWFyZ3VtZW50c1tJXTt0LnB1c2gobmV3IHMoQSxCKSksMSE9PXQubGVuZ3RofHxlfHxpKG4pfSxzLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpfSxRLnRpdGxlPSJicm93c2VyIixRLmJyb3dzZXI9ITAsUS5lbnY9e30sUS5hcmd2PVtdLFEudmVyc2lvbj0iIixRLnZlcnNpb25zPXt9LFEub249RCxRLmFkZExpc3RlbmVyPUQsUS5vbmNlPUQsUS5vZmY9RCxRLnJlbW92ZUxpc3RlbmVyPUQsUS5yZW1vdmVBbGxMaXN0ZW5lcnM9RCxRLmVtaXQ9RCxRLnByZXBlbmRMaXN0ZW5lcj1ELFEucHJlcGVuZE9uY2VMaXN0ZW5lcj1ELFEubGlzdGVuZXJzPWZ1bmN0aW9uKEEpe3JldHVybltdfSxRLmJpbmRpbmc9ZnVuY3Rpb24oQSl7dGhyb3cgbmV3IEVycm9yKCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCIpfSxRLmN3ZD1mdW5jdGlvbigpe3JldHVybiIvIn0sUS5jaGRpcj1mdW5jdGlvbihBKXt0aHJvdyBuZXcgRXJyb3IoInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCIpfSxRLnVtYXNrPWZ1bmN0aW9uKCl7cmV0dXJuIDB9fV0pfShCLmZzKTtjb25zdCBJPUEudW5wYWNrQnJpZGdlO2xldCBnO3ZhciBRPWZ1bmN0aW9uKEEpe2NvbnN0IEI9e30sZz0ib21pdCI7dmFyIFEsRT12b2lkIDAhPT1CP0I6e30sQz1JLkV4dCxpPXtvcGVuOmZ1bmN0aW9uKCl7cmV0dXJuIEMuY3VycmVudC5vcGVuLmFwcGx5KEMuY3VycmVudCxhcmd1bWVudHMpfSxjbG9zZTpmdW5jdGlvbigpe3JldHVybiBDLmN1cnJlbnQuY2xvc2UuYXBwbHkoQy5jdXJyZW50LGFyZ3VtZW50cyl9LHJlYWQ6ZnVuY3Rpb24oKXtyZXR1cm4gQy5jdXJyZW50LnJlYWQuYXBwbHkoQy5jdXJyZW50LGFyZ3VtZW50cyl9LHdyaXRlOmZ1bmN0aW9uKCl7cmV0dXJuIEMuY3VycmVudC53cml0ZS5hcHBseShDLmN1cnJlbnQsYXJndW1lbnRzKX0sdGVsbDpmdW5jdGlvbigpe3JldHVybiBDLmN1cnJlbnQudGVsbC5hcHBseShDLmN1cnJlbnQsYXJndW1lbnRzKX0sc2VlazpmdW5jdGlvbigpe3JldHVybiBDLmN1cnJlbnQuc2Vlay5hcHBseShDLmN1cnJlbnQsYXJndW1lbnRzKX0sY3JlYXRlOmZ1bmN0aW9uKCl7cmV0dXJuIEMuY3VycmVudC5jcmVhdGUuYXBwbHkoQy5jdXJyZW50LGFyZ3VtZW50cyl9fSxvPXt9O2ZvcihRIGluIEUpRS5oYXNPd25Qcm9wZXJ0eShRKSYmKG9bUV09RVtRXSk7RS5hcmd1bWVudHM9W10sRS50aGlzUHJvZ3JhbT0iLi90aGlzLnByb2dyYW0iLEUucXVpdD1mdW5jdGlvbihBLEIpe3Rocm93IEJ9LEUucHJlUnVuPVtdLEUucG9zdFJ1bj1bXTt2YXIgdD0hMSxlPSExLHI9ITE7aWYoRS5FTlZJUk9OTUVOVCl7aWYoIldFQiI9PT1FLkVOVklST05NRU5UKXQ9ITA7ZWxzZSBpZigiV09SS0VSIj09PUUuRU5WSVJPTk1FTlQpZT0hMDtlbHNlIGlmKCJOT0RFIj09PUUuRU5WSVJPTk1FTlQpcj0hMDtlbHNlIGlmKCJTSEVMTCIhPT1FLkVOVklST05NRU5UKXRocm93IG5ldyBFcnJvcigiTW9kdWxlWydFTlZJUk9OTUVOVCddIHZhbHVlIGlzIG5vdCB2YWxpZC4gbXVzdCBiZSBvbmUgb2Y6IFdFQnxXT1JLRVJ8Tk9ERXxTSEVMTC4iKX1lbHNlIHQ9Im9iamVjdCI9PXR5cGVvZiB3aW5kb3csZT0iZnVuY3Rpb24iPT10eXBlb2YgaW1wb3J0U2NyaXB0cyxyPSJvYmplY3QiPT10eXBlb2YgcHJvY2VzcyYmImZ1bmN0aW9uIj09dHlwZW9mIHJlcXVpcmUmJiF0JiYhZTtmb3IoUSBpbih0fHxlKSYmKEUucmVhZD1mdW5jdGlvbihBKXt2YXIgQj1uZXcgWE1MSHR0cFJlcXVlc3Q7cmV0dXJuIEIub3BlbigiR0VUIixBLCExKSxCLnNlbmQobnVsbCksQi5yZXNwb25zZVRleHR9LGUmJihFLnJlYWRCaW5hcnk9ZnVuY3Rpb24oQSl7dmFyIEI9bmV3IFhNTEh0dHBSZXF1ZXN0O3JldHVybiBCLm9wZW4oIkdFVCIsQSwhMSksQi5yZXNwb25zZVR5cGU9ImFycmF5YnVmZmVyIixCLnNlbmQobnVsbCksbmV3IFVpbnQ4QXJyYXkoQi5yZXNwb25zZSl9KSxFLnJlYWRBc3luYz1mdW5jdGlvbihBLEIsSSl7dmFyIGc9bmV3IFhNTEh0dHBSZXF1ZXN0O2cub3BlbigiR0VUIixBLCEwKSxnLnJlc3BvbnNlVHlwZT0iYXJyYXlidWZmZXIiLGcub25sb2FkPWZ1bmN0aW9uKCl7MjAwPT1nLnN0YXR1c3x8MD09Zy5zdGF0dXMmJmcucmVzcG9uc2U/QihnLnJlc3BvbnNlKTpJKCl9LGcub25lcnJvcj1JLGcuc2VuZChudWxsKX0sRS5zZXRXaW5kb3dUaXRsZT1mdW5jdGlvbihBKXtkb2N1bWVudC50aXRsZT1BfSksRS5wcmludD0idW5kZWZpbmVkIiE9dHlwZW9mIGNvbnNvbGU/Y29uc29sZS5sb2cuYmluZChjb25zb2xlKToidW5kZWZpbmVkIiE9dHlwZW9mIHByaW50P3ByaW50Om51bGwsRS5wcmludEVycj0idW5kZWZpbmVkIiE9dHlwZW9mIHByaW50RXJyP3ByaW50RXJyOiJ1bmRlZmluZWQiIT10eXBlb2YgY29uc29sZSYmY29uc29sZS53YXJuLmJpbmQoY29uc29sZSl8fEUucHJpbnQsRS5wcmludD1FLnByaW50LEUucHJpbnRFcnI9RS5wcmludEVycixvKW8uaGFzT3duUHJvcGVydHkoUSkmJihFW1FdPW9bUV0pO289dm9pZCAwO2Z1bmN0aW9uIGEoQSl7dyghbSk7dmFyIEI9SztyZXR1cm4gSz1LK0ErMTUmLTE2LEJ9ZnVuY3Rpb24gbihBKXt3KGIpO3ZhciBCPUhbYj4+Ml0sST1CK0ErMTUmLTE2O2lmKChIW2I+PjJdPUksST49eikmJiFaKCkpcmV0dXJuIEhbYj4+Ml09QiwwO3JldHVybiBCfWZ1bmN0aW9uIHMoQSxCKXtyZXR1cm4gQnx8KEI9MTYpLEE9TWF0aC5jZWlsKEEvQikqQn1mdW5jdGlvbiBEKEEpe3N3aXRjaChBKXtjYXNlImkxIjpjYXNlImk4IjpyZXR1cm4gMTtjYXNlImkxNiI6cmV0dXJuIDI7Y2FzZSJpMzIiOnJldHVybiA0O2Nhc2UiaTY0IjpyZXR1cm4gODtjYXNlImZsb2F0IjpyZXR1cm4gNDtjYXNlImRvdWJsZSI6cmV0dXJuIDg7ZGVmYXVsdDppZigiKiI9PT1BW0EubGVuZ3RoLTFdKXJldHVybiA0O2lmKCJpIj09PUFbMF0pe3ZhciBCPXBhcnNlSW50KEEuc3Vic3RyKDEpKTtyZXR1cm4gdyhCJTg9PTApLEIvOH1yZXR1cm4gMH19bmV3IEFycmF5KDApO3ZhciBGPTA7ZnVuY3Rpb24gdyhBLEIpe0F8fGlJKCJBc3NlcnRpb24gZmFpbGVkOiAiK0IpfWZ1bmN0aW9uIGMoQSxCLEksZyl7c3dpdGNoKCIqIj09PShJPUl8fCJpOCIpLmNoYXJBdChJLmxlbmd0aC0xKSYmKEk9ImkzMiIpLEkpe2Nhc2UiaTEiOmNhc2UiaTgiOnVbQT4+MF09QjticmVhaztjYXNlImkxNiI6SltBPj4xXT1CO2JyZWFrO2Nhc2UiaTMyIjpIW0E+PjJdPUI7YnJlYWs7Y2FzZSJpNjQiOnRlbXBJNjQ9W0I+Pj4wLCh0ZW1wRG91YmxlPUIsK0NBKHRlbXBEb3VibGUpPj0xP3RlbXBEb3VibGU+MD8oMHx0QSgrb0EodGVtcERvdWJsZS80Mjk0OTY3Mjk2KSw0Mjk0OTY3Mjk1KSk+Pj4wOn5+K2lBKCh0ZW1wRG91YmxlLSsofn50ZW1wRG91YmxlPj4+MCkpLzQyOTQ5NjcyOTYpPj4+MDowKV0sSFtBPj4yXT10ZW1wSTY0WzBdLEhbQSs0Pj4yXT10ZW1wSTY0WzFdO2JyZWFrO2Nhc2UiZmxvYXQiOnFbQT4+Ml09QjticmVhaztjYXNlImRvdWJsZSI6cFtBPj4zXT1CO2JyZWFrO2RlZmF1bHQ6aUkoImludmFsaWQgdHlwZSBmb3Igc2V0VmFsdWU6ICIrSSl9fWZ1bmN0aW9uIGgoQSxCLEksZyl7dmFyIFEsRTsibnVtYmVyIj09dHlwZW9mIEE/KFE9ITAsRT1BKTooUT0hMSxFPUEubGVuZ3RoKTt2YXIgQyxpPSJzdHJpbmciPT10eXBlb2YgQj9COm51bGw7aWYoQz00PT1JP2c6WyJmdW5jdGlvbiI9PXR5cGVvZiBJST9JSTphLFFJLGEsbl1bdm9pZCAwPT09ST8yOkldKE1hdGgubWF4KEUsaT8xOkIubGVuZ3RoKSksUSl7dmFyIG87Zm9yKGc9Qyx3KDA9PSgzJkMpKSxvPUMrKC00JkUpO2c8bztnKz00KUhbZz4+Ml09MDtmb3Iobz1DK0U7ZzxvOyl1W2crKz4+MF09MDtyZXR1cm4gQ31pZigiaTgiPT09aSlyZXR1cm4gQS5zdWJhcnJheXx8QS5zbGljZT9MLnNldChBLEMpOkwuc2V0KG5ldyBVaW50OEFycmF5KEEpLEMpLEM7Zm9yKHZhciB0LGUscixzPTA7czxFOyl7dmFyIEY9QVtzXTswIT09KHQ9aXx8QltzXSk/KCJpNjQiPT10JiYodD0iaTMyIiksYyhDK3MsRix0KSxyIT09dCYmKGU9RCh0KSxyPXQpLHMrPWUpOnMrK31yZXR1cm4gQ31mdW5jdGlvbiB5KEEsQil7aWYoMD09PUJ8fCFBKXJldHVybiIiO2Zvcih2YXIgSSxnPTAsUT0wO2d8PUk9TFtBK1E+PjBdLCgwIT1JfHxCKSYmKFErKywhQnx8USE9Qik7KTtCfHwoQj1RKTt2YXIgRT0iIjtpZihnPDEyOCl7Zm9yKHZhciBDLGk9MTAyNDtCPjA7KUM9U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsTC5zdWJhcnJheShBLEErTWF0aC5taW4oQixpKSkpLEU9RT9FK0M6QyxBKz1pLEItPWk7cmV0dXJuIEV9cmV0dXJuIEcoQSl9dmFyIFI9InVuZGVmaW5lZCIhPXR5cGVvZiBUZXh0RGVjb2Rlcj9uZXcgVGV4dERlY29kZXIoInV0ZjgiKTp2b2lkIDA7ZnVuY3Rpb24gVShBLEIpe2Zvcih2YXIgST1CO0FbSV07KSsrSTtpZihJLUI+MTYmJkEuc3ViYXJyYXkmJlIpcmV0dXJuIFIuZGVjb2RlKEEuc3ViYXJyYXkoQixJKSk7Zm9yKHZhciBnLFEsRSxDLGksbz0iIjs7KXtpZighKGc9QVtCKytdKSlyZXR1cm4gbztpZigxMjgmZylpZihRPTYzJkFbQisrXSwxOTIhPSgyMjQmZykpaWYoRT02MyZBW0IrK10sMjI0PT0oMjQwJmcpP2c9KDE1JmcpPDwxMnxRPDw2fEU6KEM9NjMmQVtCKytdLDI0MD09KDI0OCZnKT9nPSg3JmcpPDwxOHxRPDwxMnxFPDw2fEM6KGk9NjMmQVtCKytdLGc9MjQ4PT0oMjUyJmcpPygzJmcpPDwyNHxRPDwxOHxFPDwxMnxDPDw2fGk6KDEmZyk8PDMwfFE8PDI0fEU8PDE4fEM8PDEyfGk8PDZ8NjMmQVtCKytdKSksZzw2NTUzNilvKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGcpO2Vsc2V7dmFyIHQ9Zy02NTUzNjtvKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2fHQ+PjEwLDU2MzIwfDEwMjMmdCl9ZWxzZSBvKz1TdHJpbmcuZnJvbUNoYXJDb2RlKCgzMSZnKTw8NnxRKTtlbHNlIG8rPVN0cmluZy5mcm9tQ2hhckNvZGUoZyl9fWZ1bmN0aW9uIEcoQSl7cmV0dXJuIFUoTCxBKX1mdW5jdGlvbiBTKEEsQixJLGcpe2lmKCEoZz4wKSlyZXR1cm4gMDtmb3IodmFyIFE9SSxFPUkrZy0xLEM9MDtDPEEubGVuZ3RoOysrQyl7dmFyIGk9QS5jaGFyQ29kZUF0KEMpO2lmKGk+PTU1Mjk2JiZpPD01NzM0MyYmKGk9NjU1MzYrKCgxMDIzJmkpPDwxMCl8MTAyMyZBLmNoYXJDb2RlQXQoKytDKSksaTw9MTI3KXtpZihJPj1FKWJyZWFrO0JbSSsrXT1pfWVsc2UgaWYoaTw9MjA0Nyl7aWYoSSsxPj1FKWJyZWFrO0JbSSsrXT0xOTJ8aT4+NixCW0krK109MTI4fDYzJml9ZWxzZSBpZihpPD02NTUzNSl7aWYoSSsyPj1FKWJyZWFrO0JbSSsrXT0yMjR8aT4+MTIsQltJKytdPTEyOHxpPj42JjYzLEJbSSsrXT0xMjh8NjMmaX1lbHNlIGlmKGk8PTIwOTcxNTEpe2lmKEkrMz49RSlicmVhaztCW0krK109MjQwfGk+PjE4LEJbSSsrXT0xMjh8aT4+MTImNjMsQltJKytdPTEyOHxpPj42JjYzLEJbSSsrXT0xMjh8NjMmaX1lbHNlIGlmKGk8PTY3MTA4ODYzKXtpZihJKzQ+PUUpYnJlYWs7QltJKytdPTI0OHxpPj4yNCxCW0krK109MTI4fGk+PjE4JjYzLEJbSSsrXT0xMjh8aT4+MTImNjMsQltJKytdPTEyOHxpPj42JjYzLEJbSSsrXT0xMjh8NjMmaX1lbHNle2lmKEkrNT49RSlicmVhaztCW0krK109MjUyfGk+PjMwLEJbSSsrXT0xMjh8aT4+MjQmNjMsQltJKytdPTEyOHxpPj4xOCY2MyxCW0krK109MTI4fGk+PjEyJjYzLEJbSSsrXT0xMjh8aT4+NiY2MyxCW0krK109MTI4fDYzJml9fXJldHVybiBCW0ldPTAsSS1RfWZ1bmN0aW9uIGsoQSxCLEkpe3JldHVybiBTKEEsTCxCLEkpfWZ1bmN0aW9uIGYoQSl7Zm9yKHZhciBCPTAsST0wO0k8QS5sZW5ndGg7KytJKXt2YXIgZz1BLmNoYXJDb2RlQXQoSSk7Zz49NTUyOTYmJmc8PTU3MzQzJiYoZz02NTUzNisoKDEwMjMmZyk8PDEwKXwxMDIzJkEuY2hhckNvZGVBdCgrK0kpKSxnPD0xMjc/KytCOkIrPWc8PTIwNDc/MjpnPD02NTUzNT8zOmc8PTIwOTcxNTE/NDpnPD02NzEwODg2Mz81OjZ9cmV0dXJuIEJ9InVuZGVmaW5lZCIhPXR5cGVvZiBUZXh0RGVjb2RlciYmbmV3IFRleHREZWNvZGVyKCJ1dGYtMTZsZSIpO2Z1bmN0aW9uIE4oQSl7Zm9yKHZhciBCPTAsST0iIjs7KXt2YXIgZz1IW0ErNCpCPj4yXTtpZigwPT1nKXJldHVybiBJO2lmKCsrQixnPj02NTUzNil7dmFyIFE9Zy02NTUzNjtJKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2fFE+PjEwLDU2MzIwfDEwMjMmUSl9ZWxzZSBJKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGcpfX1mdW5jdGlvbiBkKCl7dmFyIEE9ZnVuY3Rpb24oKXt2YXIgQT1uZXcgRXJyb3I7aWYoIUEuc3RhY2spe3RyeXt0aHJvdyBuZXcgRXJyb3IoMCl9Y2F0Y2goQil7QT1CfWlmKCFBLnN0YWNrKXJldHVybiIobm8gc3RhY2sgdHJhY2UgYXZhaWxhYmxlKSJ9cmV0dXJuIEEuc3RhY2sudG9TdHJpbmcoKX0oKTtyZXR1cm4gRS5leHRyYVN0YWNrVHJhY2UmJihBKz0iXG4iK0UuZXh0cmFTdGFja1RyYWNlKCkpLEEucmVwbGFjZSgvX19aW1x3XGRfXSsvZywoZnVuY3Rpb24oQSl7cmV0dXJuIEE9PUE/QTpBKyIgWyIrQSsiXSJ9KSl9dmFyIE0sdSxMLEosbCxILFkscSxwLEssbSx4LHYsVyxiLFg9NjU1MzYsVj0xNjc3NzIxNjtmdW5jdGlvbiBPKEEsQil7cmV0dXJuIEElQj4wJiYoQSs9Qi1BJUIpLEF9ZnVuY3Rpb24gVChBKXtFLmJ1ZmZlcj1NPUF9ZnVuY3Rpb24gaigpe0UuSEVBUDg9dT1uZXcgSW50OEFycmF5KE0pLEUuSEVBUDE2PUo9bmV3IEludDE2QXJyYXkoTSksRS5IRUFQMzI9SD1uZXcgSW50MzJBcnJheShNKSxFLkhFQVBVOD1MPW5ldyBVaW50OEFycmF5KE0pLEUuSEVBUFUxNj1sPW5ldyBVaW50MTZBcnJheShNKSxFLkhFQVBVMzI9WT1uZXcgVWludDMyQXJyYXkoTSksRS5IRUFQRjMyPXE9bmV3IEZsb2F0MzJBcnJheShNKSxFLkhFQVBGNjQ9cD1uZXcgRmxvYXQ2NEFycmF5KE0pfWZ1bmN0aW9uIFooKXt2YXIgQT1FLnVzaW5nV2FzbT9YOlYsQj0yMTQ3NDgzNjQ4LUE7aWYoSFtiPj4yXT5CKXJldHVybiExO3ZhciBJPXo7Zm9yKHo9TWF0aC5tYXgoeiwxNjc3NzIxNik7ejxIW2I+PjJdOyl6PXo8PTUzNjg3MDkxMj9PKDIqeixBKTpNYXRoLm1pbihPKCgzKnorMjE0NzQ4MzY0OCkvNCxBKSxCKTt2YXIgZz1FLnJlYWxsb2NCdWZmZXIoeik7cmV0dXJuIGcmJmcuYnl0ZUxlbmd0aD09ej8oVChnKSxqKCksITApOih6PUksITEpfUs9dj1iPTAsbT0hMSxFLnJlYWxsb2NCdWZmZXJ8fChFLnJlYWxsb2NCdWZmZXI9ZnVuY3Rpb24oQSl7dmFyIEI7dHJ5e2lmKEFycmF5QnVmZmVyLnRyYW5zZmVyKUI9QXJyYXlCdWZmZXIudHJhbnNmZXIoTSxBKTtlbHNle3ZhciBJPXU7Qj1uZXcgQXJyYXlCdWZmZXIoQSksbmV3IEludDhBcnJheShCKS5zZXQoSSl9fWNhdGNoKEEpe3JldHVybiExfXJldHVybiEhQUkoQikmJkJ9KTt0cnl7RnVuY3Rpb24ucHJvdG90eXBlLmNhbGwuYmluZChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEFycmF5QnVmZmVyLnByb3RvdHlwZSwiYnl0ZUxlbmd0aCIpLmdldCkobmV3IEFycmF5QnVmZmVyKDQpKX1jYXRjaChBKXsoZnVuY3Rpb24oQSl7cmV0dXJuIEEuYnl0ZUxlbmd0aH0pfXZhciBQPUUuVE9UQUxfU1RBQ0t8fDUyNDI4ODAsej1FLlRPVEFMX01FTU9SWXx8MTY3NzcyMTY7aWYoejxQJiZFLnByaW50RXJyKCJUT1RBTF9NRU1PUlkgc2hvdWxkIGJlIGxhcmdlciB0aGFuIFRPVEFMX1NUQUNLLCB3YXMgIit6KyIhIChUT1RBTF9TVEFDSz0iK1ArIikiKSxFLmJ1ZmZlcj9NPUUuYnVmZmVyOigib2JqZWN0Ij09dHlwZW9mIFdlYkFzc2VtYmx5JiYiZnVuY3Rpb24iPT10eXBlb2YgV2ViQXNzZW1ibHkuTWVtb3J5PyhFLndhc21NZW1vcnk9bmV3IFdlYkFzc2VtYmx5Lk1lbW9yeSh7aW5pdGlhbDp6L1h9KSxNPUUud2FzbU1lbW9yeS5idWZmZXIpOk09bmV3IEFycmF5QnVmZmVyKHopLEUuYnVmZmVyPU0pLGooKSxIWzBdPTE2Njg1MDkwMjksSlsxXT0yNTQ1OSwxMTUhPT1MWzJdfHw5OSE9PUxbM10pdGhyb3ciUnVudGltZSBlcnJvcjogZXhwZWN0ZWQgdGhlIHN5c3RlbSB0byBiZSBsaXR0bGUtZW5kaWFuISI7ZnVuY3Rpb24gXyhBKXtmb3IoO0EubGVuZ3RoPjA7KXt2YXIgQj1BLnNoaWZ0KCk7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIEIpe3ZhciBJPUIuZnVuYzsibnVtYmVyIj09dHlwZW9mIEk/dm9pZCAwPT09Qi5hcmc/RS5keW5DYWxsX3YoSSk6RS5keW5DYWxsX3ZpKEksQi5hcmcpOkkodm9pZCAwPT09Qi5hcmc/bnVsbDpCLmFyZyl9ZWxzZSBCKCl9fXZhciAkPVtdLEFBPVtdLEJBPVtdLElBPVtdLGdBPVtdLFFBPSExO2Z1bmN0aW9uIEVBKEEsQixJKXtmb3IodmFyIGc9MDtnPEEubGVuZ3RoOysrZyl1W0IrKz4+MF09QS5jaGFyQ29kZUF0KGcpO0l8fCh1W0I+PjBdPTApfXZhciBDQT1NYXRoLmFicyxpQT1NYXRoLmNlaWwsb0E9TWF0aC5mbG9vcix0QT1NYXRoLm1pbixlQT0wLHJBPW51bGw7ZnVuY3Rpb24gYUEoQSl7ZUErKyxFLm1vbml0b3JSdW5EZXBlbmRlbmNpZXMmJkUubW9uaXRvclJ1bkRlcGVuZGVuY2llcyhlQSl9ZnVuY3Rpb24gbkEoQSl7aWYoZUEtLSxFLm1vbml0b3JSdW5EZXBlbmRlbmNpZXMmJkUubW9uaXRvclJ1bkRlcGVuZGVuY2llcyhlQSksMD09ZUEmJnJBKXt2YXIgQj1yQTtyQT1udWxsLEIoKX19RS5wcmVsb2FkZWRJbWFnZXM9e30sRS5wcmVsb2FkZWRBdWRpb3M9e307dmFyIHNBPSJkYXRhOmFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTtiYXNlNjQsIjtmdW5jdGlvbiBEQShBKXtyZXR1cm4gU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoP0Euc3RhcnRzV2l0aChzQSk6MD09PUEuaW5kZXhPZihzQSl9IWZ1bmN0aW9uKCl7dmFyIEI9InVucGFjay53YXN0IixJPSJ1bnBhY2sudGVtcC5hc20uanMiOyJmdW5jdGlvbiI9PXR5cGVvZiBFLmxvY2F0ZUZpbGUmJihEQShCKXx8KEI9RS5sb2NhdGVGaWxlKEIpKSxEQShBKXx8KEE9RS5sb2NhdGVGaWxlKEEpKSxEQShJKXx8KEk9RS5sb2NhdGVGaWxlKEkpKSk7dmFyIFE9e2dsb2JhbDpudWxsLGVudjpudWxsLGFzbTJ3YXNtOnsiZjY0LXJlbSI6ZnVuY3Rpb24oQSxCKXtyZXR1cm4gQSVCfSxkZWJ1Z2dlcjpmdW5jdGlvbigpe319LHBhcmVudDpFfSxDPW51bGw7ZnVuY3Rpb24gaSgpe3RyeXtpZihFLndhc21CaW5hcnkpcmV0dXJuIG5ldyBVaW50OEFycmF5KEUud2FzbUJpbmFyeSk7aWYoRS5yZWFkQmluYXJ5KXJldHVybiBFLnJlYWRCaW5hcnkoQSk7dGhyb3cib24gdGhlIHdlYiwgd2UgbmVlZCB0aGUgd2FzbSBiaW5hcnkgdG8gYmUgcHJlbG9hZGVkIGFuZCBzZXQgb24gTW9kdWxlWyd3YXNtQmluYXJ5J10uIGVtY2MucHkgd2lsbCBkbyB0aGF0IGZvciB5b3Ugd2hlbiBnZW5lcmF0aW5nIEhUTUwgKGJ1dCBub3QgSlMpIn1jYXRjaChBKXtpSShBKX19ZnVuY3Rpb24gbyhCLEksbyl7aWYoIm9iamVjdCIhPXR5cGVvZiBXZWJBc3NlbWJseSlyZXR1cm4gRS5wcmludEVycigibm8gbmF0aXZlIHdhc20gc3VwcG9ydCBkZXRlY3RlZCIpLCExO2lmKCEoRS53YXNtTWVtb3J5IGluc3RhbmNlb2YgV2ViQXNzZW1ibHkuTWVtb3J5KSlyZXR1cm4gRS5wcmludEVycigibm8gbmF0aXZlIHdhc20gTWVtb3J5IGluIHVzZSIpLCExO2Z1bmN0aW9uIHIoQSxCKXsoQz1BLmV4cG9ydHMpLm1lbW9yeSYmZnVuY3Rpb24oQSl7dmFyIEI9RS5idWZmZXI7QS5ieXRlTGVuZ3RoPEIuYnl0ZUxlbmd0aCYmRS5wcmludEVycigidGhlIG5ldyBidWZmZXIgaW4gbWVyZ2VNZW1vcnkgaXMgc21hbGxlciB0aGFuIHRoZSBwcmV2aW91cyBvbmUuIGluIG5hdGl2ZSB3YXNtLCB3ZSBzaG91bGQgZ3JvdyBtZW1vcnkgaGVyZSIpO3ZhciBJPW5ldyBJbnQ4QXJyYXkoQik7bmV3IEludDhBcnJheShBKS5zZXQoSSksVChBKSxqKCl9KEMubWVtb3J5KSxFLmFzbT1DLEUudXNpbmdXYXNtPSEwLG5BKCl9aWYoSS5tZW1vcnk9RS53YXNtTWVtb3J5LFEuZ2xvYmFsPXtOYU46TmFOLEluZmluaXR5OjEvMH0sUVsiZ2xvYmFsLk1hdGgiXT1NYXRoLFEuZW52PUksYUEoKSxFLmluc3RhbnRpYXRlV2FzbSl0cnl7cmV0dXJuIEUuaW5zdGFudGlhdGVXYXNtKFEscil9Y2F0Y2goQSl7cmV0dXJuIEUucHJpbnRFcnIoIk1vZHVsZS5pbnN0YW50aWF0ZVdhc20gY2FsbGJhY2sgZmFpbGVkIHdpdGggZXJyb3I6ICIrQSksITF9ZnVuY3Rpb24gYShBKXtyKEEuaW5zdGFuY2UsQS5tb2R1bGUpfWZ1bmN0aW9uIG4oQil7KEUud2FzbUJpbmFyeXx8IXQmJiFlfHwiZnVuY3Rpb24iIT10eXBlb2YgZmV0Y2g/bmV3IFByb21pc2UoKGZ1bmN0aW9uKEEsQil7QShpKCkpfSkpOmZldGNoKEEse2NyZWRlbnRpYWxzOmd9KS50aGVuKChmdW5jdGlvbihCKXtpZighQi5vayl0aHJvdyJmYWlsZWQgdG8gbG9hZCB3YXNtIGJpbmFyeSBmaWxlIGF0ICciK0ErIiciO3JldHVybiBCLmFycmF5QnVmZmVyKCl9KSkuY2F0Y2goKGZ1bmN0aW9uKCl7cmV0dXJuIGkoKX0pKSkudGhlbigoZnVuY3Rpb24oQSl7cmV0dXJuIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKEEsUSl9KSkudGhlbihCKS5jYXRjaCgoZnVuY3Rpb24oQSl7RS5wcmludEVycigiZmFpbGVkIHRvIGFzeW5jaHJvbm91c2x5IHByZXBhcmUgd2FzbTogIitBKSxpSShBKX0pKX1yZXR1cm4gRS53YXNtQmluYXJ5fHwiZnVuY3Rpb24iIT10eXBlb2YgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmd8fERBKEEpfHwiZnVuY3Rpb24iIT10eXBlb2YgZmV0Y2g/bihhKTpXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZyhmZXRjaChBLHtjcmVkZW50aWFsczpnfSksUSkudGhlbihhKS5jYXRjaCgoZnVuY3Rpb24oQSl7RS5wcmludEVycigid2FzbSBzdHJlYW1pbmcgY29tcGlsZSBmYWlsZWQ6ICIrQSksRS5wcmludEVycigiZmFsbGluZyBiYWNrIHRvIEFycmF5QnVmZmVyIGluc3RhbnRpYXRpb24iKSxuKGEpfSkpLHt9fUUuYXNtUHJlbG9hZD1FLmFzbSxFLnJlYWxsb2NCdWZmZXI9ZnVuY3Rpb24oQSl7cmV0dXJuIGZ1bmN0aW9uKEEpe0E9TyhBLEUudXNpbmdXYXNtP1g6Vik7dmFyIEI9RS5idWZmZXIuYnl0ZUxlbmd0aDtpZihFLnVzaW5nV2FzbSl0cnl7cmV0dXJuLTEhPT1FLndhc21NZW1vcnkuZ3JvdygoQS1CKS82NTUzNik/RS5idWZmZXI9RS53YXNtTWVtb3J5LmJ1ZmZlcjpudWxsfWNhdGNoKEEpe3JldHVybiBudWxsfX0oQSl9LEUuYXNtPWZ1bmN0aW9uKEEsQixJKXtpZighKEI9QikudGFibGUpe3ZhciBnPUUud2FzbVRhYmxlU2l6ZTt2b2lkIDA9PT1nJiYoZz0xMDI0KTt2YXIgUT1FLndhc21NYXhUYWJsZVNpemU7Im9iamVjdCI9PXR5cGVvZiBXZWJBc3NlbWJseSYmImZ1bmN0aW9uIj09dHlwZW9mIFdlYkFzc2VtYmx5LlRhYmxlP0IudGFibGU9dm9pZCAwIT09UT9uZXcgV2ViQXNzZW1ibHkuVGFibGUoe2luaXRpYWw6ZyxtYXhpbXVtOlEsZWxlbWVudDoiYW55ZnVuYyJ9KTpuZXcgV2ViQXNzZW1ibHkuVGFibGUoe2luaXRpYWw6ZyxlbGVtZW50OiJhbnlmdW5jIn0pOkIudGFibGU9bmV3IEFycmF5KGcpLEUud2FzbVRhYmxlPUIudGFibGV9dmFyIEM7cmV0dXJuIEIubWVtb3J5QmFzZXx8KEIubWVtb3J5QmFzZT1FLlNUQVRJQ19CQVNFKSxCLnRhYmxlQmFzZXx8KEIudGFibGVCYXNlPTApLChDPW8oMCxCKSl8fGlJKCJubyBiaW5hcnllbiBtZXRob2Qgc3VjY2VlZGVkLiBjb25zaWRlciBlbmFibGluZyBtb3JlIG9wdGlvbnMsIGxpa2UgaW50ZXJwcmV0aW5nLCBpZiB5b3Ugd2FudCB0aGF0OiBodHRwczovL2dpdGh1Yi5jb20va3JpcGtlbi9lbXNjcmlwdGVuL3dpa2kvV2ViQXNzZW1ibHkjYmluYXJ5ZW4tbWV0aG9kcyIpLEN9fSgpLEs9Njc5ODQsQUEucHVzaCh7ZnVuYzpmdW5jdGlvbigpe19CKCl9fSx7ZnVuYzpmdW5jdGlvbigpe3pCKCl9fSx7ZnVuYzpmdW5jdGlvbigpe1BCKCl9fSx7ZnVuYzpmdW5jdGlvbigpe1pCKCl9fSk7RS5TVEFUSUNfQkFTRT0xMDI0LEUuU1RBVElDX0JVTVA9NjY5NjAsSys9MTY7dmFyIEZBPXtsYXN0OjAsY2F1Z2h0OltdLGluZm9zOnt9LGRlQWRqdXN0OmZ1bmN0aW9uKEEpe2lmKCFBfHxGQS5pbmZvc1tBXSlyZXR1cm4gQTtmb3IodmFyIEIgaW4gRkEuaW5mb3Mpe3ZhciBJPStCO2lmKEZBLmluZm9zW0ldLmFkanVzdGVkPT09QSlyZXR1cm4gSX1yZXR1cm4gQX0sYWRkUmVmOmZ1bmN0aW9uKEEpe0EmJkZBLmluZm9zW0FdLnJlZmNvdW50Kyt9LGRlY1JlZjpmdW5jdGlvbihBKXtpZihBKXt2YXIgQj1GQS5pbmZvc1tBXTt3KEIucmVmY291bnQ+MCksQi5yZWZjb3VudC0tLDAhPT1CLnJlZmNvdW50fHxCLnJldGhyb3dufHwoQi5kZXN0cnVjdG9yJiZFLmR5bkNhbGxfdmkoQi5kZXN0cnVjdG9yLEEpLGRlbGV0ZSBGQS5pbmZvc1tBXSx3QShBKSl9fSxjbGVhclJlZjpmdW5jdGlvbihBKXtBJiYoRkEuaW5mb3NbQV0ucmVmY291bnQ9MCl9fTtmdW5jdGlvbiB3QShBKXt0cnl7cmV0dXJuIEJJKEEpfWNhdGNoKEEpe319ZnVuY3Rpb24gY0EoKXt2YXIgQT1GQS5sYXN0O2lmKCFBKXJldHVybiAwfChnSSgwKSwwKTt2YXIgQj1GQS5pbmZvc1tBXSxJPUIudHlwZTtpZighSSlyZXR1cm4gMHwoZ0koMCksQSk7dmFyIGc9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtFLl9fX2N4YV9pc19wb2ludGVyX3R5cGUoSSk7Y0EuYnVmZmVyfHwoY0EuYnVmZmVyPUlJKDQpKSxIW2NBLmJ1ZmZlcj4+Ml09QSxBPWNBLmJ1ZmZlcjtmb3IodmFyIFE9MDtRPGcubGVuZ3RoO1ErKylpZihnW1FdJiZFLl9fX2N4YV9jYW5fY2F0Y2goZ1tRXSxJLEEpKXJldHVybiBBPUhbQT4+Ml0sQi5hZGp1c3RlZD1BLDB8KGdJKGdbUV0pLEEpO3JldHVybiBBPUhbQT4+Ml0sMHwoZ0koSSksQSl9dmFyIGhBPXtFUEVSTToxLEVOT0VOVDoyLEVTUkNIOjMsRUlOVFI6NCxFSU86NSxFTlhJTzo2LEUyQklHOjcsRU5PRVhFQzo4LEVCQURGOjksRUNISUxEOjEwLEVBR0FJTjoxMSxFV09VTERCTE9DSzoxMSxFTk9NRU06MTIsRUFDQ0VTOjEzLEVGQVVMVDoxNCxFTk9UQkxLOjE1LEVCVVNZOjE2LEVFWElTVDoxNyxFWERFVjoxOCxFTk9ERVY6MTksRU5PVERJUjoyMCxFSVNESVI6MjEsRUlOVkFMOjIyLEVORklMRToyMyxFTUZJTEU6MjQsRU5PVFRZOjI1LEVUWFRCU1k6MjYsRUZCSUc6MjcsRU5PU1BDOjI4LEVTUElQRToyOSxFUk9GUzozMCxFTUxJTks6MzEsRVBJUEU6MzIsRURPTTozMyxFUkFOR0U6MzQsRU5PTVNHOjQyLEVJRFJNOjQzLEVDSFJORzo0NCxFTDJOU1lOQzo0NSxFTDNITFQ6NDYsRUwzUlNUOjQ3LEVMTlJORzo0OCxFVU5BVENIOjQ5LEVOT0NTSTo1MCxFTDJITFQ6NTEsRURFQURMSzozNSxFTk9MQ0s6MzcsRUJBREU6NTIsRUJBRFI6NTMsRVhGVUxMOjU0LEVOT0FOTzo1NSxFQkFEUlFDOjU2LEVCQURTTFQ6NTcsRURFQURMT0NLOjM1LEVCRk9OVDo1OSxFTk9TVFI6NjAsRU5PREFUQTo2MSxFVElNRTo2MixFTk9TUjo2MyxFTk9ORVQ6NjQsRU5PUEtHOjY1LEVSRU1PVEU6NjYsRU5PTElOSzo2NyxFQURWOjY4LEVTUk1OVDo2OSxFQ09NTTo3MCxFUFJPVE86NzEsRU1VTFRJSE9QOjcyLEVET1RET1Q6NzMsRUJBRE1TRzo3NCxFTk9UVU5JUTo3NixFQkFERkQ6NzcsRVJFTUNIRzo3OCxFTElCQUNDOjc5LEVMSUJCQUQ6ODAsRUxJQlNDTjo4MSxFTElCTUFYOjgyLEVMSUJFWEVDOjgzLEVOT1NZUzozOCxFTk9URU1QVFk6MzksRU5BTUVUT09MT05HOjM2LEVMT09QOjQwLEVPUE5PVFNVUFA6OTUsRVBGTk9TVVBQT1JUOjk2LEVDT05OUkVTRVQ6MTA0LEVOT0JVRlM6MTA1LEVBRk5PU1VQUE9SVDo5NyxFUFJPVE9UWVBFOjkxLEVOT1RTT0NLOjg4LEVOT1BST1RPT1BUOjkyLEVTSFVURE9XTjoxMDgsRUNPTk5SRUZVU0VEOjExMSxFQUREUklOVVNFOjk4LEVDT05OQUJPUlRFRDoxMDMsRU5FVFVOUkVBQ0g6MTAxLEVORVRET1dOOjEwMCxFVElNRURPVVQ6MTEwLEVIT1NURE9XTjoxMTIsRUhPU1RVTlJFQUNIOjExMyxFSU5QUk9HUkVTUzoxMTUsRUFMUkVBRFk6MTE0LEVERVNUQUREUlJFUTo4OSxFTVNHU0laRTo5MCxFUFJPVE9OT1NVUFBPUlQ6OTMsRVNPQ0tUTk9TVVBQT1JUOjk0LEVBRERSTk9UQVZBSUw6OTksRU5FVFJFU0VUOjEwMixFSVNDT05OOjEwNixFTk9UQ09OTjoxMDcsRVRPT01BTllSRUZTOjEwOSxFVVNFUlM6ODcsRURRVU9UOjEyMixFU1RBTEU6MTE2LEVOT1RTVVA6OTUsRU5PTUVESVVNOjEyMyxFSUxTRVE6ODQsRU9WRVJGTE9XOjc1LEVDQU5DRUxFRDoxMjUsRU5PVFJFQ09WRVJBQkxFOjEzMSxFT1dORVJERUFEOjEzMCxFU1RSUElQRTo4Nn07ZnVuY3Rpb24geUEoQSl7cmV0dXJuIEUuX19fZXJybm9fbG9jYXRpb24mJihIW0UuX19fZXJybm9fbG9jYXRpb24oKT4+Ml09QSksQX12YXIgUkE9ezA6IlN1Y2Nlc3MiLDE6Ik5vdCBzdXBlci11c2VyIiwyOiJObyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5IiwzOiJObyBzdWNoIHByb2Nlc3MiLDQ6IkludGVycnVwdGVkIHN5c3RlbSBjYWxsIiw1OiJJL08gZXJyb3IiLDY6Ik5vIHN1Y2ggZGV2aWNlIG9yIGFkZHJlc3MiLDc6IkFyZyBsaXN0IHRvbyBsb25nIiw4OiJFeGVjIGZvcm1hdCBlcnJvciIsOToiQmFkIGZpbGUgbnVtYmVyIiwxMDoiTm8gY2hpbGRyZW4iLDExOiJObyBtb3JlIHByb2Nlc3NlcyIsMTI6Ik5vdCBlbm91Z2ggY29yZSIsMTM6IlBlcm1pc3Npb24gZGVuaWVkIiwxNDoiQmFkIGFkZHJlc3MiLDE1OiJCbG9jayBkZXZpY2UgcmVxdWlyZWQiLDE2OiJNb3VudCBkZXZpY2UgYnVzeSIsMTc6IkZpbGUgZXhpc3RzIiwxODoiQ3Jvc3MtZGV2aWNlIGxpbmsiLDE5OiJObyBzdWNoIGRldmljZSIsMjA6Ik5vdCBhIGRpcmVjdG9yeSIsMjE6IklzIGEgZGlyZWN0b3J5IiwyMjoiSW52YWxpZCBhcmd1bWVudCIsMjM6IlRvbyBtYW55IG9wZW4gZmlsZXMgaW4gc3lzdGVtIiwyNDoiVG9vIG1hbnkgb3BlbiBmaWxlcyIsMjU6Ik5vdCBhIHR5cGV3cml0ZXIiLDI2OiJUZXh0IGZpbGUgYnVzeSIsMjc6IkZpbGUgdG9vIGxhcmdlIiwyODoiTm8gc3BhY2UgbGVmdCBvbiBkZXZpY2UiLDI5OiJJbGxlZ2FsIHNlZWsiLDMwOiJSZWFkIG9ubHkgZmlsZSBzeXN0ZW0iLDMxOiJUb28gbWFueSBsaW5rcyIsMzI6IkJyb2tlbiBwaXBlIiwzMzoiTWF0aCBhcmcgb3V0IG9mIGRvbWFpbiBvZiBmdW5jIiwzNDoiTWF0aCByZXN1bHQgbm90IHJlcHJlc2VudGFibGUiLDM1OiJGaWxlIGxvY2tpbmcgZGVhZGxvY2sgZXJyb3IiLDM2OiJGaWxlIG9yIHBhdGggbmFtZSB0b28gbG9uZyIsMzc6Ik5vIHJlY29yZCBsb2NrcyBhdmFpbGFibGUiLDM4OiJGdW5jdGlvbiBub3QgaW1wbGVtZW50ZWQiLDM5OiJEaXJlY3Rvcnkgbm90IGVtcHR5Iiw0MDoiVG9vIG1hbnkgc3ltYm9saWMgbGlua3MiLDQyOiJObyBtZXNzYWdlIG9mIGRlc2lyZWQgdHlwZSIsNDM6IklkZW50aWZpZXIgcmVtb3ZlZCIsNDQ6IkNoYW5uZWwgbnVtYmVyIG91dCBvZiByYW5nZSIsNDU6IkxldmVsIDIgbm90IHN5bmNocm9uaXplZCIsNDY6IkxldmVsIDMgaGFsdGVkIiw0NzoiTGV2ZWwgMyByZXNldCIsNDg6IkxpbmsgbnVtYmVyIG91dCBvZiByYW5nZSIsNDk6IlByb3RvY29sIGRyaXZlciBub3QgYXR0YWNoZWQiLDUwOiJObyBDU0kgc3RydWN0dXJlIGF2YWlsYWJsZSIsNTE6IkxldmVsIDIgaGFsdGVkIiw1MjoiSW52YWxpZCBleGNoYW5nZSIsNTM6IkludmFsaWQgcmVxdWVzdCBkZXNjcmlwdG9yIiw1NDoiRXhjaGFuZ2UgZnVsbCIsNTU6Ik5vIGFub2RlIiw1NjoiSW52YWxpZCByZXF1ZXN0IGNvZGUiLDU3OiJJbnZhbGlkIHNsb3QiLDU5OiJCYWQgZm9udCBmaWxlIGZtdCIsNjA6IkRldmljZSBub3QgYSBzdHJlYW0iLDYxOiJObyBkYXRhIChmb3Igbm8gZGVsYXkgaW8pIiw2MjoiVGltZXIgZXhwaXJlZCIsNjM6Ik91dCBvZiBzdHJlYW1zIHJlc291cmNlcyIsNjQ6Ik1hY2hpbmUgaXMgbm90IG9uIHRoZSBuZXR3b3JrIiw2NToiUGFja2FnZSBub3QgaW5zdGFsbGVkIiw2NjoiVGhlIG9iamVjdCBpcyByZW1vdGUiLDY3OiJUaGUgbGluayBoYXMgYmVlbiBzZXZlcmVkIiw2ODoiQWR2ZXJ0aXNlIGVycm9yIiw2OToiU3Jtb3VudCBlcnJvciIsNzA6IkNvbW11bmljYXRpb24gZXJyb3Igb24gc2VuZCIsNzE6IlByb3RvY29sIGVycm9yIiw3MjoiTXVsdGlob3AgYXR0ZW1wdGVkIiw3MzoiQ3Jvc3MgbW91bnQgcG9pbnQgKG5vdCByZWFsbHkgZXJyb3IpIiw3NDoiVHJ5aW5nIHRvIHJlYWQgdW5yZWFkYWJsZSBtZXNzYWdlIiw3NToiVmFsdWUgdG9vIGxhcmdlIGZvciBkZWZpbmVkIGRhdGEgdHlwZSIsNzY6IkdpdmVuIGxvZy4gbmFtZSBub3QgdW5pcXVlIiw3NzoiZi5kLiBpbnZhbGlkIGZvciB0aGlzIG9wZXJhdGlvbiIsNzg6IlJlbW90ZSBhZGRyZXNzIGNoYW5nZWQiLDc5OiJDYW4gICBhY2Nlc3MgYSBuZWVkZWQgc2hhcmVkIGxpYiIsODA6IkFjY2Vzc2luZyBhIGNvcnJ1cHRlZCBzaGFyZWQgbGliIiw4MToiLmxpYiBzZWN0aW9uIGluIGEub3V0IGNvcnJ1cHRlZCIsODI6IkF0dGVtcHRpbmcgdG8gbGluayBpbiB0b28gbWFueSBsaWJzIiw4MzoiQXR0ZW1wdGluZyB0byBleGVjIGEgc2hhcmVkIGxpYnJhcnkiLDg0OiJJbGxlZ2FsIGJ5dGUgc2VxdWVuY2UiLDg2OiJTdHJlYW1zIHBpcGUgZXJyb3IiLDg3OiJUb28gbWFueSB1c2VycyIsODg6IlNvY2tldCBvcGVyYXRpb24gb24gbm9uLXNvY2tldCIsODk6IkRlc3RpbmF0aW9uIGFkZHJlc3MgcmVxdWlyZWQiLDkwOiJNZXNzYWdlIHRvbyBsb25nIiw5MToiUHJvdG9jb2wgd3JvbmcgdHlwZSBmb3Igc29ja2V0Iiw5MjoiUHJvdG9jb2wgbm90IGF2YWlsYWJsZSIsOTM6IlVua25vd24gcHJvdG9jb2wiLDk0OiJTb2NrZXQgdHlwZSBub3Qgc3VwcG9ydGVkIiw5NToiTm90IHN1cHBvcnRlZCIsOTY6IlByb3RvY29sIGZhbWlseSBub3Qgc3VwcG9ydGVkIiw5NzoiQWRkcmVzcyBmYW1pbHkgbm90IHN1cHBvcnRlZCBieSBwcm90b2NvbCBmYW1pbHkiLDk4OiJBZGRyZXNzIGFscmVhZHkgaW4gdXNlIiw5OToiQWRkcmVzcyBub3QgYXZhaWxhYmxlIiwxMDA6Ik5ldHdvcmsgaW50ZXJmYWNlIGlzIG5vdCBjb25maWd1cmVkIiwxMDE6Ik5ldHdvcmsgaXMgdW5yZWFjaGFibGUiLDEwMjoiQ29ubmVjdGlvbiByZXNldCBieSBuZXR3b3JrIiwxMDM6IkNvbm5lY3Rpb24gYWJvcnRlZCIsMTA0OiJDb25uZWN0aW9uIHJlc2V0IGJ5IHBlZXIiLDEwNToiTm8gYnVmZmVyIHNwYWNlIGF2YWlsYWJsZSIsMTA2OiJTb2NrZXQgaXMgYWxyZWFkeSBjb25uZWN0ZWQiLDEwNzoiU29ja2V0IGlzIG5vdCBjb25uZWN0ZWQiLDEwODoiQ2FuJ3Qgc2VuZCBhZnRlciBzb2NrZXQgc2h1dGRvd24iLDEwOToiVG9vIG1hbnkgcmVmZXJlbmNlcyIsMTEwOiJDb25uZWN0aW9uIHRpbWVkIG91dCIsMTExOiJDb25uZWN0aW9uIHJlZnVzZWQiLDExMjoiSG9zdCBpcyBkb3duIiwxMTM6Ikhvc3QgaXMgdW5yZWFjaGFibGUiLDExNDoiU29ja2V0IGFscmVhZHkgY29ubmVjdGVkIiwxMTU6IkNvbm5lY3Rpb24gYWxyZWFkeSBpbiBwcm9ncmVzcyIsMTE2OiJTdGFsZSBmaWxlIGhhbmRsZSIsMTIyOiJRdW90YSBleGNlZWRlZCIsMTIzOiJObyBtZWRpdW0gKGluIHRhcGUgZHJpdmUpIiwxMjU6Ik9wZXJhdGlvbiBjYW5jZWxlZCIsMTMwOiJQcmV2aW91cyBvd25lciBkaWVkIiwxMzE6IlN0YXRlIG5vdCByZWNvdmVyYWJsZSJ9LFVBPXtzcGxpdFBhdGg6ZnVuY3Rpb24oQSl7cmV0dXJuL14oXC8/fCkoW1xzXFNdKj8pKCg/OlwuezEsMn18W15cL10rP3wpKFwuW14uXC9dKnwpKSg/OltcL10qKSQvLmV4ZWMoQSkuc2xpY2UoMSl9LG5vcm1hbGl6ZUFycmF5OmZ1bmN0aW9uKEEsQil7Zm9yKHZhciBJPTAsZz1BLmxlbmd0aC0xO2c+PTA7Zy0tKXt2YXIgUT1BW2ddOyIuIj09PVE/QS5zcGxpY2UoZywxKToiLi4iPT09UT8oQS5zcGxpY2UoZywxKSxJKyspOkkmJihBLnNwbGljZShnLDEpLEktLSl9aWYoQilmb3IoO0k7SS0tKUEudW5zaGlmdCgiLi4iKTtyZXR1cm4gQX0sbm9ybWFsaXplOmZ1bmN0aW9uKEEpe3ZhciBCPSIvIj09PUEuY2hhckF0KDApLEk9Ii8iPT09QS5zdWJzdHIoLTEpO3JldHVybihBPVVBLm5vcm1hbGl6ZUFycmF5KEEuc3BsaXQoIi8iKS5maWx0ZXIoKGZ1bmN0aW9uKEEpe3JldHVybiEhQX0pKSwhQikuam9pbigiLyIpKXx8Qnx8KEE9Ii4iKSxBJiZJJiYoQSs9Ii8iKSwoQj8iLyI6IiIpK0F9LGRpcm5hbWU6ZnVuY3Rpb24oQSl7dmFyIEI9VUEuc3BsaXRQYXRoKEEpLEk9QlswXSxnPUJbMV07cmV0dXJuIEl8fGc/KGcmJihnPWcuc3Vic3RyKDAsZy5sZW5ndGgtMSkpLEkrZyk6Ii4ifSxiYXNlbmFtZTpmdW5jdGlvbihBKXtpZigiLyI9PT1BKXJldHVybiIvIjt2YXIgQj1BLmxhc3RJbmRleE9mKCIvIik7cmV0dXJuLTE9PT1CP0E6QS5zdWJzdHIoQisxKX0sZXh0bmFtZTpmdW5jdGlvbihBKXtyZXR1cm4gVUEuc3BsaXRQYXRoKEEpWzNdfSxqb2luOmZ1bmN0aW9uKCl7dmFyIEE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDApO3JldHVybiBVQS5ub3JtYWxpemUoQS5qb2luKCIvIikpfSxqb2luMjpmdW5jdGlvbihBLEIpe3JldHVybiBVQS5ub3JtYWxpemUoQSsiLyIrQil9LHJlc29sdmU6ZnVuY3Rpb24oKXtmb3IodmFyIEE9IiIsQj0hMSxJPWFyZ3VtZW50cy5sZW5ndGgtMTtJPj0tMSYmIUI7SS0tKXt2YXIgZz1JPj0wP2FyZ3VtZW50c1tJXTpkQS5jd2QoKTtpZigic3RyaW5nIiE9dHlwZW9mIGcpdGhyb3cgbmV3IFR5cGVFcnJvcigiQXJndW1lbnRzIHRvIHBhdGgucmVzb2x2ZSBtdXN0IGJlIHN0cmluZ3MiKTtpZighZylyZXR1cm4iIjtBPWcrIi8iK0EsQj0iLyI9PT1nLmNoYXJBdCgwKX1yZXR1cm4oQj8iLyI6IiIpKyhBPVVBLm5vcm1hbGl6ZUFycmF5KEEuc3BsaXQoIi8iKS5maWx0ZXIoKGZ1bmN0aW9uKEEpe3JldHVybiEhQX0pKSwhQikuam9pbigiLyIpKXx8Ii4ifSxyZWxhdGl2ZTpmdW5jdGlvbihBLEIpe2Z1bmN0aW9uIEkoQSl7Zm9yKHZhciBCPTA7QjxBLmxlbmd0aCYmIiI9PT1BW0JdO0IrKyk7Zm9yKHZhciBJPUEubGVuZ3RoLTE7ST49MCYmIiI9PT1BW0ldO0ktLSk7cmV0dXJuIEI+ST9bXTpBLnNsaWNlKEIsSS1CKzEpfUE9VUEucmVzb2x2ZShBKS5zdWJzdHIoMSksQj1VQS5yZXNvbHZlKEIpLnN1YnN0cigxKTtmb3IodmFyIGc9SShBLnNwbGl0KCIvIikpLFE9SShCLnNwbGl0KCIvIikpLEU9TWF0aC5taW4oZy5sZW5ndGgsUS5sZW5ndGgpLEM9RSxpPTA7aTxFO2krKylpZihnW2ldIT09UVtpXSl7Qz1pO2JyZWFrfXZhciBvPVtdO2ZvcihpPUM7aTxnLmxlbmd0aDtpKyspby5wdXNoKCIuLiIpO3JldHVybihvPW8uY29uY2F0KFEuc2xpY2UoQykpKS5qb2luKCIvIil9fSxHQT17dHR5czpbXSxpbml0OmZ1bmN0aW9uKCl7fSxzaHV0ZG93bjpmdW5jdGlvbigpe30scmVnaXN0ZXI6ZnVuY3Rpb24oQSxCKXtHQS50dHlzW0FdPXtpbnB1dDpbXSxvdXRwdXQ6W10sb3BzOkJ9LGRBLnJlZ2lzdGVyRGV2aWNlKEEsR0Euc3RyZWFtX29wcyl9LHN0cmVhbV9vcHM6e29wZW46ZnVuY3Rpb24oQSl7dmFyIEI9R0EudHR5c1tBLm5vZGUucmRldl07aWYoIUIpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRU5PREVWKTtBLnR0eT1CLEEuc2Vla2FibGU9ITF9LGNsb3NlOmZ1bmN0aW9uKEEpe0EudHR5Lm9wcy5mbHVzaChBLnR0eSl9LGZsdXNoOmZ1bmN0aW9uKEEpe0EudHR5Lm9wcy5mbHVzaChBLnR0eSl9LHJlYWQ6ZnVuY3Rpb24oQSxCLEksZyxRKXtpZighQS50dHl8fCFBLnR0eS5vcHMuZ2V0X2NoYXIpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRU5YSU8pO2Zvcih2YXIgRT0wLEM9MDtDPGc7QysrKXt2YXIgaTt0cnl7aT1BLnR0eS5vcHMuZ2V0X2NoYXIoQS50dHkpfWNhdGNoKEEpe3Rocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVJTyl9aWYodm9pZCAwPT09aSYmMD09PUUpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRUFHQUlOKTtpZihudWxsPT1pKWJyZWFrO0UrKyxCW0krQ109aX1yZXR1cm4gRSYmKEEubm9kZS50aW1lc3RhbXA9RGF0ZS5ub3coKSksRX0sd3JpdGU6ZnVuY3Rpb24oQSxCLEksZyxRKXtpZighQS50dHl8fCFBLnR0eS5vcHMucHV0X2NoYXIpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRU5YSU8pO2Zvcih2YXIgRT0wO0U8ZztFKyspdHJ5e0EudHR5Lm9wcy5wdXRfY2hhcihBLnR0eSxCW0krRV0pfWNhdGNoKEEpe3Rocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVJTyl9cmV0dXJuIGcmJihBLm5vZGUudGltZXN0YW1wPURhdGUubm93KCkpLEV9fSxkZWZhdWx0X3R0eV9vcHM6e2dldF9jaGFyOmZ1bmN0aW9uKEEpe2lmKCFBLmlucHV0Lmxlbmd0aCl7dmFyIEI9bnVsbDtpZihyKXt2YXIgST1uZXcgQnVmZmVyKDI1NiksZz0wLFE9IndpbjMyIiE9cHJvY2Vzcy5wbGF0Zm9ybSxFPXByb2Nlc3Muc3RkaW4uZmQ7aWYoUSl7dmFyIEM9ITE7dHJ5e0U9ZnMub3BlblN5bmMoIi9kZXYvc3RkaW4iLCJyIiksQz0hMH1jYXRjaChBKXt9fXRyeXtnPWZzLnJlYWRTeW5jKEUsSSwwLDI1NixudWxsKX1jYXRjaChBKXtpZigtMT09QS50b1N0cmluZygpLmluZGV4T2YoIkVPRiIpKXRocm93IEE7Zz0wfUMmJmZzLmNsb3NlU3luYyhFKSxCPWc+MD9JLnNsaWNlKDAsZykudG9TdHJpbmcoInV0Zi04Iik6bnVsbH1lbHNlInVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3cmJiJmdW5jdGlvbiI9PXR5cGVvZiB3aW5kb3cucHJvbXB0P251bGwhPT0oQj13aW5kb3cucHJvbXB0KCJJbnB1dDogIikpJiYoQis9IlxuIik6ImZ1bmN0aW9uIj09dHlwZW9mIHJlYWRsaW5lJiZudWxsIT09KEI9cmVhZGxpbmUoKSkmJihCKz0iXG4iKTtpZighQilyZXR1cm4gbnVsbDtBLmlucHV0PVRCKEIsITApfXJldHVybiBBLmlucHV0LnNoaWZ0KCl9LHB1dF9jaGFyOmZ1bmN0aW9uKEEsQil7bnVsbD09PUJ8fDEwPT09Qj8oRS5wcmludChVKEEub3V0cHV0LDApKSxBLm91dHB1dD1bXSk6MCE9QiYmQS5vdXRwdXQucHVzaChCKX0sZmx1c2g6ZnVuY3Rpb24oQSl7QS5vdXRwdXQmJkEub3V0cHV0Lmxlbmd0aD4wJiYoRS5wcmludChVKEEub3V0cHV0LDApKSxBLm91dHB1dD1bXSl9fSxkZWZhdWx0X3R0eTFfb3BzOntwdXRfY2hhcjpmdW5jdGlvbihBLEIpe251bGw9PT1CfHwxMD09PUI/KEUucHJpbnRFcnIoVShBLm91dHB1dCwwKSksQS5vdXRwdXQ9W10pOjAhPUImJkEub3V0cHV0LnB1c2goQil9LGZsdXNoOmZ1bmN0aW9uKEEpe0Eub3V0cHV0JiZBLm91dHB1dC5sZW5ndGg+MCYmKEUucHJpbnRFcnIoVShBLm91dHB1dCwwKSksQS5vdXRwdXQ9W10pfX19LFNBPXtvcHNfdGFibGU6bnVsbCxtb3VudDpmdW5jdGlvbihBKXtyZXR1cm4gU0EuY3JlYXRlTm9kZShudWxsLCIvIiwxNjg5NSwwKX0sY3JlYXRlTm9kZTpmdW5jdGlvbihBLEIsSSxnKXtpZihkQS5pc0Jsa2RldihJKXx8ZEEuaXNGSUZPKEkpKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVQRVJNKTtTQS5vcHNfdGFibGV8fChTQS5vcHNfdGFibGU9e2Rpcjp7bm9kZTp7Z2V0YXR0cjpTQS5ub2RlX29wcy5nZXRhdHRyLHNldGF0dHI6U0Eubm9kZV9vcHMuc2V0YXR0cixsb29rdXA6U0Eubm9kZV9vcHMubG9va3VwLG1rbm9kOlNBLm5vZGVfb3BzLm1rbm9kLHJlbmFtZTpTQS5ub2RlX29wcy5yZW5hbWUsdW5saW5rOlNBLm5vZGVfb3BzLnVubGluayxybWRpcjpTQS5ub2RlX29wcy5ybWRpcixyZWFkZGlyOlNBLm5vZGVfb3BzLnJlYWRkaXIsc3ltbGluazpTQS5ub2RlX29wcy5zeW1saW5rfSxzdHJlYW06e2xsc2VlazpTQS5zdHJlYW1fb3BzLmxsc2Vla319LGZpbGU6e25vZGU6e2dldGF0dHI6U0Eubm9kZV9vcHMuZ2V0YXR0cixzZXRhdHRyOlNBLm5vZGVfb3BzLnNldGF0dHJ9LHN0cmVhbTp7bGxzZWVrOlNBLnN0cmVhbV9vcHMubGxzZWVrLHJlYWQ6U0Euc3RyZWFtX29wcy5yZWFkLHdyaXRlOlNBLnN0cmVhbV9vcHMud3JpdGUsYWxsb2NhdGU6U0Euc3RyZWFtX29wcy5hbGxvY2F0ZSxtbWFwOlNBLnN0cmVhbV9vcHMubW1hcCxtc3luYzpTQS5zdHJlYW1fb3BzLm1zeW5jfX0sbGluazp7bm9kZTp7Z2V0YXR0cjpTQS5ub2RlX29wcy5nZXRhdHRyLHNldGF0dHI6U0Eubm9kZV9vcHMuc2V0YXR0cixyZWFkbGluazpTQS5ub2RlX29wcy5yZWFkbGlua30sc3RyZWFtOnt9fSxjaHJkZXY6e25vZGU6e2dldGF0dHI6U0Eubm9kZV9vcHMuZ2V0YXR0cixzZXRhdHRyOlNBLm5vZGVfb3BzLnNldGF0dHJ9LHN0cmVhbTpkQS5jaHJkZXZfc3RyZWFtX29wc319KTt2YXIgUT1kQS5jcmVhdGVOb2RlKEEsQixJLGcpO3JldHVybiBkQS5pc0RpcihRLm1vZGUpPyhRLm5vZGVfb3BzPVNBLm9wc190YWJsZS5kaXIubm9kZSxRLnN0cmVhbV9vcHM9U0Eub3BzX3RhYmxlLmRpci5zdHJlYW0sUS5jb250ZW50cz17fSk6ZEEuaXNGaWxlKFEubW9kZSk/KFEubm9kZV9vcHM9U0Eub3BzX3RhYmxlLmZpbGUubm9kZSxRLnN0cmVhbV9vcHM9U0Eub3BzX3RhYmxlLmZpbGUuc3RyZWFtLFEudXNlZEJ5dGVzPTAsUS5jb250ZW50cz1udWxsKTpkQS5pc0xpbmsoUS5tb2RlKT8oUS5ub2RlX29wcz1TQS5vcHNfdGFibGUubGluay5ub2RlLFEuc3RyZWFtX29wcz1TQS5vcHNfdGFibGUubGluay5zdHJlYW0pOmRBLmlzQ2hyZGV2KFEubW9kZSkmJihRLm5vZGVfb3BzPVNBLm9wc190YWJsZS5jaHJkZXYubm9kZSxRLnN0cmVhbV9vcHM9U0Eub3BzX3RhYmxlLmNocmRldi5zdHJlYW0pLFEudGltZXN0YW1wPURhdGUubm93KCksQSYmKEEuY29udGVudHNbQl09USksUX0sZ2V0RmlsZURhdGFBc1JlZ3VsYXJBcnJheTpmdW5jdGlvbihBKXtpZihBLmNvbnRlbnRzJiZBLmNvbnRlbnRzLnN1YmFycmF5KXtmb3IodmFyIEI9W10sST0wO0k8QS51c2VkQnl0ZXM7KytJKUIucHVzaChBLmNvbnRlbnRzW0ldKTtyZXR1cm4gQn1yZXR1cm4gQS5jb250ZW50c30sZ2V0RmlsZURhdGFBc1R5cGVkQXJyYXk6ZnVuY3Rpb24oQSl7cmV0dXJuIEEuY29udGVudHM/QS5jb250ZW50cy5zdWJhcnJheT9BLmNvbnRlbnRzLnN1YmFycmF5KDAsQS51c2VkQnl0ZXMpOm5ldyBVaW50OEFycmF5KEEuY29udGVudHMpOm5ldyBVaW50OEFycmF5fSxleHBhbmRGaWxlU3RvcmFnZTpmdW5jdGlvbihBLEIpe2lmKEEuY29udGVudHMmJkEuY29udGVudHMuc3ViYXJyYXkmJkI+QS5jb250ZW50cy5sZW5ndGgmJihBLmNvbnRlbnRzPVNBLmdldEZpbGVEYXRhQXNSZWd1bGFyQXJyYXkoQSksQS51c2VkQnl0ZXM9QS5jb250ZW50cy5sZW5ndGgpLCFBLmNvbnRlbnRzfHxBLmNvbnRlbnRzLnN1YmFycmF5KXt2YXIgST1BLmNvbnRlbnRzP0EuY29udGVudHMubGVuZ3RoOjA7aWYoST49QilyZXR1cm47Qj1NYXRoLm1heChCLEkqKEk8MTA0ODU3Nj8yOjEuMTI1KXwwKSwwIT1JJiYoQj1NYXRoLm1heChCLDI1NikpO3ZhciBnPUEuY29udGVudHM7cmV0dXJuIEEuY29udGVudHM9bmV3IFVpbnQ4QXJyYXkoQiksdm9pZChBLnVzZWRCeXRlcz4wJiZBLmNvbnRlbnRzLnNldChnLnN1YmFycmF5KDAsQS51c2VkQnl0ZXMpLDApKX1mb3IoIUEuY29udGVudHMmJkI+MCYmKEEuY29udGVudHM9W10pO0EuY29udGVudHMubGVuZ3RoPEI7KUEuY29udGVudHMucHVzaCgwKX0scmVzaXplRmlsZVN0b3JhZ2U6ZnVuY3Rpb24oQSxCKXtpZihBLnVzZWRCeXRlcyE9Qil7aWYoMD09QilyZXR1cm4gQS5jb250ZW50cz1udWxsLHZvaWQoQS51c2VkQnl0ZXM9MCk7aWYoIUEuY29udGVudHN8fEEuY29udGVudHMuc3ViYXJyYXkpe3ZhciBJPUEuY29udGVudHM7cmV0dXJuIEEuY29udGVudHM9bmV3IFVpbnQ4QXJyYXkobmV3IEFycmF5QnVmZmVyKEIpKSxJJiZBLmNvbnRlbnRzLnNldChJLnN1YmFycmF5KDAsTWF0aC5taW4oQixBLnVzZWRCeXRlcykpKSx2b2lkKEEudXNlZEJ5dGVzPUIpfWlmKEEuY29udGVudHN8fChBLmNvbnRlbnRzPVtdKSxBLmNvbnRlbnRzLmxlbmd0aD5CKUEuY29udGVudHMubGVuZ3RoPUI7ZWxzZSBmb3IoO0EuY29udGVudHMubGVuZ3RoPEI7KUEuY29udGVudHMucHVzaCgwKTtBLnVzZWRCeXRlcz1CfX0sbm9kZV9vcHM6e2dldGF0dHI6ZnVuY3Rpb24oQSl7dmFyIEI9e307cmV0dXJuIEIuZGV2PWRBLmlzQ2hyZGV2KEEubW9kZSk/QS5pZDoxLEIuaW5vPUEuaWQsQi5tb2RlPUEubW9kZSxCLm5saW5rPTEsQi51aWQ9MCxCLmdpZD0wLEIucmRldj1BLnJkZXYsZEEuaXNEaXIoQS5tb2RlKT9CLnNpemU9NDA5NjpkQS5pc0ZpbGUoQS5tb2RlKT9CLnNpemU9QS51c2VkQnl0ZXM6ZEEuaXNMaW5rKEEubW9kZSk/Qi5zaXplPUEubGluay5sZW5ndGg6Qi5zaXplPTAsQi5hdGltZT1uZXcgRGF0ZShBLnRpbWVzdGFtcCksQi5tdGltZT1uZXcgRGF0ZShBLnRpbWVzdGFtcCksQi5jdGltZT1uZXcgRGF0ZShBLnRpbWVzdGFtcCksQi5ibGtzaXplPTQwOTYsQi5ibG9ja3M9TWF0aC5jZWlsKEIuc2l6ZS9CLmJsa3NpemUpLEJ9LHNldGF0dHI6ZnVuY3Rpb24oQSxCKXt2b2lkIDAhPT1CLm1vZGUmJihBLm1vZGU9Qi5tb2RlKSx2b2lkIDAhPT1CLnRpbWVzdGFtcCYmKEEudGltZXN0YW1wPUIudGltZXN0YW1wKSx2b2lkIDAhPT1CLnNpemUmJlNBLnJlc2l6ZUZpbGVTdG9yYWdlKEEsQi5zaXplKX0sbG9va3VwOmZ1bmN0aW9uKEEsQil7dGhyb3cgZEEuZ2VuZXJpY0Vycm9yc1toQS5FTk9FTlRdfSxta25vZDpmdW5jdGlvbihBLEIsSSxnKXtyZXR1cm4gU0EuY3JlYXRlTm9kZShBLEIsSSxnKX0scmVuYW1lOmZ1bmN0aW9uKEEsQixJKXtpZihkQS5pc0RpcihBLm1vZGUpKXt2YXIgZzt0cnl7Zz1kQS5sb29rdXBOb2RlKEIsSSl9Y2F0Y2goQSl7fWlmKGcpZm9yKHZhciBRIGluIGcuY29udGVudHMpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRU5PVEVNUFRZKX1kZWxldGUgQS5wYXJlbnQuY29udGVudHNbQS5uYW1lXSxBLm5hbWU9SSxCLmNvbnRlbnRzW0ldPUEsQS5wYXJlbnQ9Qn0sdW5saW5rOmZ1bmN0aW9uKEEsQil7ZGVsZXRlIEEuY29udGVudHNbQl19LHJtZGlyOmZ1bmN0aW9uKEEsQil7dmFyIEk9ZEEubG9va3VwTm9kZShBLEIpO2Zvcih2YXIgZyBpbiBJLmNvbnRlbnRzKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVOT1RFTVBUWSk7ZGVsZXRlIEEuY29udGVudHNbQl19LHJlYWRkaXI6ZnVuY3Rpb24oQSl7dmFyIEI9WyIuIiwiLi4iXTtmb3IodmFyIEkgaW4gQS5jb250ZW50cylBLmNvbnRlbnRzLmhhc093blByb3BlcnR5KEkpJiZCLnB1c2goSSk7cmV0dXJuIEJ9LHN5bWxpbms6ZnVuY3Rpb24oQSxCLEkpe3ZhciBnPVNBLmNyZWF0ZU5vZGUoQSxCLDQxNDcxLDApO3JldHVybiBnLmxpbms9SSxnfSxyZWFkbGluazpmdW5jdGlvbihBKXtpZighZEEuaXNMaW5rKEEubW9kZSkpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRUlOVkFMKTtyZXR1cm4gQS5saW5rfX0sc3RyZWFtX29wczp7cmVhZDpmdW5jdGlvbihBLEIsSSxnLFEpe3ZhciBFPUEubm9kZS5jb250ZW50cztpZihRPj1BLm5vZGUudXNlZEJ5dGVzKXJldHVybiAwO3ZhciBDPU1hdGgubWluKEEubm9kZS51c2VkQnl0ZXMtUSxnKTtpZih3KEM+PTApLEM+OCYmRS5zdWJhcnJheSlCLnNldChFLnN1YmFycmF5KFEsUStDKSxJKTtlbHNlIGZvcih2YXIgaT0wO2k8QztpKyspQltJK2ldPUVbUStpXTtyZXR1cm4gQ30sd3JpdGU6ZnVuY3Rpb24oQSxCLEksZyxRLEUpe2lmKCFnKXJldHVybiAwO3ZhciBDPUEubm9kZTtpZihDLnRpbWVzdGFtcD1EYXRlLm5vdygpLEIuc3ViYXJyYXkmJighQy5jb250ZW50c3x8Qy5jb250ZW50cy5zdWJhcnJheSkpe2lmKEUpcmV0dXJuIEMuY29udGVudHM9Qi5zdWJhcnJheShJLEkrZyksQy51c2VkQnl0ZXM9ZyxnO2lmKDA9PT1DLnVzZWRCeXRlcyYmMD09PVEpcmV0dXJuIEMuY29udGVudHM9bmV3IFVpbnQ4QXJyYXkoQi5zdWJhcnJheShJLEkrZykpLEMudXNlZEJ5dGVzPWcsZztpZihRK2c8PUMudXNlZEJ5dGVzKXJldHVybiBDLmNvbnRlbnRzLnNldChCLnN1YmFycmF5KEksSStnKSxRKSxnfWlmKFNBLmV4cGFuZEZpbGVTdG9yYWdlKEMsUStnKSxDLmNvbnRlbnRzLnN1YmFycmF5JiZCLnN1YmFycmF5KUMuY29udGVudHMuc2V0KEIuc3ViYXJyYXkoSSxJK2cpLFEpO2Vsc2UgZm9yKHZhciBpPTA7aTxnO2krKylDLmNvbnRlbnRzW1EraV09QltJK2ldO3JldHVybiBDLnVzZWRCeXRlcz1NYXRoLm1heChDLnVzZWRCeXRlcyxRK2cpLGd9LGxsc2VlazpmdW5jdGlvbihBLEIsSSl7dmFyIGc9QjtpZigxPT09ST9nKz1BLnBvc2l0aW9uOjI9PT1JJiZkQS5pc0ZpbGUoQS5ub2RlLm1vZGUpJiYoZys9QS5ub2RlLnVzZWRCeXRlcyksZzwwKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVJTlZBTCk7cmV0dXJuIGd9LGFsbG9jYXRlOmZ1bmN0aW9uKEEsQixJKXtTQS5leHBhbmRGaWxlU3RvcmFnZShBLm5vZGUsQitJKSxBLm5vZGUudXNlZEJ5dGVzPU1hdGgubWF4KEEubm9kZS51c2VkQnl0ZXMsQitJKX0sbW1hcDpmdW5jdGlvbihBLEIsSSxnLFEsRSxDKXtpZighZEEuaXNGaWxlKEEubm9kZS5tb2RlKSl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FTk9ERVYpO3ZhciBpLG8sdD1BLm5vZGUuY29udGVudHM7aWYoMiZDfHx0LmJ1ZmZlciE9PUImJnQuYnVmZmVyIT09Qi5idWZmZXIpe2lmKChRPjB8fFErZzxBLm5vZGUudXNlZEJ5dGVzKSYmKHQ9dC5zdWJhcnJheT90LnN1YmFycmF5KFEsUStnKTpBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0LFEsUStnKSksbz0hMCwhKGk9SUkoZykpKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVOT01FTSk7Qi5zZXQodCxpKX1lbHNlIG89ITEsaT10LmJ5dGVPZmZzZXQ7cmV0dXJue3B0cjppLGFsbG9jYXRlZDpvfX0sbXN5bmM6ZnVuY3Rpb24oQSxCLEksZyxRKXtpZighZEEuaXNGaWxlKEEubm9kZS5tb2RlKSl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FTk9ERVYpO2lmKDImUSlyZXR1cm4gMDtTQS5zdHJlYW1fb3BzLndyaXRlKEEsQiwwLGcsSSwhMSk7cmV0dXJuIDB9fX0sa0E9e2Riczp7fSxpbmRleGVkREI6ZnVuY3Rpb24oKXtpZigidW5kZWZpbmVkIiE9dHlwZW9mIGluZGV4ZWREQilyZXR1cm4gaW5kZXhlZERCO3ZhciBBPW51bGw7cmV0dXJuIm9iamVjdCI9PXR5cGVvZiB3aW5kb3cmJihBPXdpbmRvdy5pbmRleGVkREJ8fHdpbmRvdy5tb3pJbmRleGVkREJ8fHdpbmRvdy53ZWJraXRJbmRleGVkREJ8fHdpbmRvdy5tc0luZGV4ZWREQiksdyhBLCJJREJGUyB1c2VkLCBidXQgaW5kZXhlZERCIG5vdCBzdXBwb3J0ZWQiKSxBfSxEQl9WRVJTSU9OOjIxLERCX1NUT1JFX05BTUU6IkZJTEVfREFUQSIsbW91bnQ6ZnVuY3Rpb24oQSl7cmV0dXJuIFNBLm1vdW50LmFwcGx5KG51bGwsYXJndW1lbnRzKX0sc3luY2ZzOmZ1bmN0aW9uKEEsQixJKXtrQS5nZXRMb2NhbFNldChBLChmdW5jdGlvbihnLFEpe2lmKGcpcmV0dXJuIEkoZyk7a0EuZ2V0UmVtb3RlU2V0KEEsKGZ1bmN0aW9uKEEsZyl7aWYoQSlyZXR1cm4gSShBKTt2YXIgRT1CP2c6USxDPUI/UTpnO2tBLnJlY29uY2lsZShFLEMsSSl9KSl9KSl9LGdldERCOmZ1bmN0aW9uKEEsQil7dmFyIEksZz1rQS5kYnNbQV07aWYoZylyZXR1cm4gQihudWxsLGcpO3RyeXtJPWtBLmluZGV4ZWREQigpLm9wZW4oQSxrQS5EQl9WRVJTSU9OKX1jYXRjaChBKXtyZXR1cm4gQihBKX1pZighSSlyZXR1cm4gQigiVW5hYmxlIHRvIGNvbm5lY3QgdG8gSW5kZXhlZERCIik7SS5vbnVwZ3JhZGVuZWVkZWQ9ZnVuY3Rpb24oQSl7dmFyIEIsST1BLnRhcmdldC5yZXN1bHQsZz1BLnRhcmdldC50cmFuc2FjdGlvbjsoQj1JLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoa0EuREJfU1RPUkVfTkFNRSk/Zy5vYmplY3RTdG9yZShrQS5EQl9TVE9SRV9OQU1FKTpJLmNyZWF0ZU9iamVjdFN0b3JlKGtBLkRCX1NUT1JFX05BTUUpKS5pbmRleE5hbWVzLmNvbnRhaW5zKCJ0aW1lc3RhbXAiKXx8Qi5jcmVhdGVJbmRleCgidGltZXN0YW1wIiwidGltZXN0YW1wIix7dW5pcXVlOiExfSl9LEkub25zdWNjZXNzPWZ1bmN0aW9uKCl7Zz1JLnJlc3VsdCxrQS5kYnNbQV09ZyxCKG51bGwsZyl9LEkub25lcnJvcj1mdW5jdGlvbihBKXtCKHRoaXMuZXJyb3IpLEEucHJldmVudERlZmF1bHQoKX19LGdldExvY2FsU2V0OmZ1bmN0aW9uKEEsQil7dmFyIEk9e307ZnVuY3Rpb24gZyhBKXtyZXR1cm4iLiIhPT1BJiYiLi4iIT09QX1mdW5jdGlvbiBRKEEpe3JldHVybiBmdW5jdGlvbihCKXtyZXR1cm4gVUEuam9pbjIoQSxCKX19Zm9yKHZhciBFPWRBLnJlYWRkaXIoQS5tb3VudHBvaW50KS5maWx0ZXIoZykubWFwKFEoQS5tb3VudHBvaW50KSk7RS5sZW5ndGg7KXt2YXIgQyxpPUUucG9wKCk7dHJ5e0M9ZEEuc3RhdChpKX1jYXRjaChBKXtyZXR1cm4gQihBKX1kQS5pc0RpcihDLm1vZGUpJiZFLnB1c2guYXBwbHkoRSxkQS5yZWFkZGlyKGkpLmZpbHRlcihnKS5tYXAoUShpKSkpLElbaV09e3RpbWVzdGFtcDpDLm10aW1lfX1yZXR1cm4gQihudWxsLHt0eXBlOiJsb2NhbCIsZW50cmllczpJfSl9LGdldFJlbW90ZVNldDpmdW5jdGlvbihBLEIpe3ZhciBJPXt9O2tBLmdldERCKEEubW91bnRwb2ludCwoZnVuY3Rpb24oQSxnKXtpZihBKXJldHVybiBCKEEpO3RyeXt2YXIgUT1nLnRyYW5zYWN0aW9uKFtrQS5EQl9TVE9SRV9OQU1FXSwicmVhZG9ubHkiKTtRLm9uZXJyb3I9ZnVuY3Rpb24oQSl7Qih0aGlzLmVycm9yKSxBLnByZXZlbnREZWZhdWx0KCl9LFEub2JqZWN0U3RvcmUoa0EuREJfU1RPUkVfTkFNRSkuaW5kZXgoInRpbWVzdGFtcCIpLm9wZW5LZXlDdXJzb3IoKS5vbnN1Y2Nlc3M9ZnVuY3Rpb24oQSl7dmFyIFE9QS50YXJnZXQucmVzdWx0O2lmKCFRKXJldHVybiBCKG51bGwse3R5cGU6InJlbW90ZSIsZGI6ZyxlbnRyaWVzOkl9KTtJW1EucHJpbWFyeUtleV09e3RpbWVzdGFtcDpRLmtleX0sUS5jb250aW51ZSgpfX1jYXRjaChBKXtyZXR1cm4gQihBKX19KSl9LGxvYWRMb2NhbEVudHJ5OmZ1bmN0aW9uKEEsQil7dmFyIEksZzt0cnl7Zz1kQS5sb29rdXBQYXRoKEEpLm5vZGUsST1kQS5zdGF0KEEpfWNhdGNoKEEpe3JldHVybiBCKEEpfXJldHVybiBkQS5pc0RpcihJLm1vZGUpP0IobnVsbCx7dGltZXN0YW1wOkkubXRpbWUsbW9kZTpJLm1vZGV9KTpkQS5pc0ZpbGUoSS5tb2RlKT8oZy5jb250ZW50cz1TQS5nZXRGaWxlRGF0YUFzVHlwZWRBcnJheShnKSxCKG51bGwse3RpbWVzdGFtcDpJLm10aW1lLG1vZGU6SS5tb2RlLGNvbnRlbnRzOmcuY29udGVudHN9KSk6QihuZXcgRXJyb3IoIm5vZGUgdHlwZSBub3Qgc3VwcG9ydGVkIikpfSxzdG9yZUxvY2FsRW50cnk6ZnVuY3Rpb24oQSxCLEkpe3RyeXtpZihkQS5pc0RpcihCLm1vZGUpKWRBLm1rZGlyKEEsQi5tb2RlKTtlbHNle2lmKCFkQS5pc0ZpbGUoQi5tb2RlKSlyZXR1cm4gSShuZXcgRXJyb3IoIm5vZGUgdHlwZSBub3Qgc3VwcG9ydGVkIikpO2RBLndyaXRlRmlsZShBLEIuY29udGVudHMse2Nhbk93bjohMH0pfWRBLmNobW9kKEEsQi5tb2RlKSxkQS51dGltZShBLEIudGltZXN0YW1wLEIudGltZXN0YW1wKX1jYXRjaChBKXtyZXR1cm4gSShBKX1JKG51bGwpfSxyZW1vdmVMb2NhbEVudHJ5OmZ1bmN0aW9uKEEsQil7dHJ5e2RBLmxvb2t1cFBhdGgoQSk7dmFyIEk9ZEEuc3RhdChBKTtkQS5pc0RpcihJLm1vZGUpP2RBLnJtZGlyKEEpOmRBLmlzRmlsZShJLm1vZGUpJiZkQS51bmxpbmsoQSl9Y2F0Y2goQSl7cmV0dXJuIEIoQSl9QihudWxsKX0sbG9hZFJlbW90ZUVudHJ5OmZ1bmN0aW9uKEEsQixJKXt2YXIgZz1BLmdldChCKTtnLm9uc3VjY2Vzcz1mdW5jdGlvbihBKXtJKG51bGwsQS50YXJnZXQucmVzdWx0KX0sZy5vbmVycm9yPWZ1bmN0aW9uKEEpe0kodGhpcy5lcnJvciksQS5wcmV2ZW50RGVmYXVsdCgpfX0sc3RvcmVSZW1vdGVFbnRyeTpmdW5jdGlvbihBLEIsSSxnKXt2YXIgUT1BLnB1dChJLEIpO1Eub25zdWNjZXNzPWZ1bmN0aW9uKCl7ZyhudWxsKX0sUS5vbmVycm9yPWZ1bmN0aW9uKEEpe2codGhpcy5lcnJvciksQS5wcmV2ZW50RGVmYXVsdCgpfX0scmVtb3ZlUmVtb3RlRW50cnk6ZnVuY3Rpb24oQSxCLEkpe3ZhciBnPUEuZGVsZXRlKEIpO2cub25zdWNjZXNzPWZ1bmN0aW9uKCl7SShudWxsKX0sZy5vbmVycm9yPWZ1bmN0aW9uKEEpe0kodGhpcy5lcnJvciksQS5wcmV2ZW50RGVmYXVsdCgpfX0scmVjb25jaWxlOmZ1bmN0aW9uKEEsQixJKXt2YXIgZz0wLFE9W107T2JqZWN0LmtleXMoQS5lbnRyaWVzKS5mb3JFYWNoKChmdW5jdGlvbihJKXt2YXIgRT1BLmVudHJpZXNbSV0sQz1CLmVudHJpZXNbSV07KCFDfHxFLnRpbWVzdGFtcD5DLnRpbWVzdGFtcCkmJihRLnB1c2goSSksZysrKX0pKTt2YXIgRT1bXTtpZihPYmplY3Qua2V5cyhCLmVudHJpZXMpLmZvckVhY2goKGZ1bmN0aW9uKEkpe0IuZW50cmllc1tJXTtBLmVudHJpZXNbSV18fChFLnB1c2goSSksZysrKX0pKSwhZylyZXR1cm4gSShudWxsKTt2YXIgQz0wLGk9KCJyZW1vdGUiPT09QS50eXBlP0EuZGI6Qi5kYikudHJhbnNhY3Rpb24oW2tBLkRCX1NUT1JFX05BTUVdLCJyZWFkd3JpdGUiKSxvPWkub2JqZWN0U3RvcmUoa0EuREJfU1RPUkVfTkFNRSk7ZnVuY3Rpb24gdChBKXtyZXR1cm4gQT90LmVycm9yZWQ/dm9pZCAwOih0LmVycm9yZWQ9ITAsSShBKSk6KytDPj1nP0kobnVsbCk6dm9pZCAwfWkub25lcnJvcj1mdW5jdGlvbihBKXt0KHRoaXMuZXJyb3IpLEEucHJldmVudERlZmF1bHQoKX0sUS5zb3J0KCkuZm9yRWFjaCgoZnVuY3Rpb24oQSl7ImxvY2FsIj09PUIudHlwZT9rQS5sb2FkUmVtb3RlRW50cnkobyxBLChmdW5jdGlvbihCLEkpe2lmKEIpcmV0dXJuIHQoQik7a0Euc3RvcmVMb2NhbEVudHJ5KEEsSSx0KX0pKTprQS5sb2FkTG9jYWxFbnRyeShBLChmdW5jdGlvbihCLEkpe2lmKEIpcmV0dXJuIHQoQik7a0Euc3RvcmVSZW1vdGVFbnRyeShvLEEsSSx0KX0pKX0pKSxFLnNvcnQoKS5yZXZlcnNlKCkuZm9yRWFjaCgoZnVuY3Rpb24oQSl7ImxvY2FsIj09PUIudHlwZT9rQS5yZW1vdmVMb2NhbEVudHJ5KEEsdCk6a0EucmVtb3ZlUmVtb3RlRW50cnkobyxBLHQpfSkpfX0sZkE9e2lzV2luZG93czohMSxzdGF0aWNJbml0OmZ1bmN0aW9uKCl7ZkEuaXNXaW5kb3dzPSEhcHJvY2Vzcy5wbGF0Zm9ybS5tYXRjaCgvXndpbi8pO3ZhciBBPXByb2Nlc3MuYmluZGluZygiY29uc3RhbnRzIik7QS5mcyYmKEE9QS5mcyksZkEuZmxhZ3NGb3JOb2RlTWFwPXsxMDI0OkEuT19BUFBFTkQsNjQ6QS5PX0NSRUFULDEyODpBLk9fRVhDTCwwOkEuT19SRE9OTFksMjpBLk9fUkRXUiw0MDk2OkEuT19TWU5DLDUxMjpBLk9fVFJVTkMsMTpBLk9fV1JPTkxZfX0sYnVmZmVyRnJvbTpmdW5jdGlvbihBKXtyZXR1cm4gQnVmZmVyLmFsbG9jP0J1ZmZlci5mcm9tKEEpOm5ldyBCdWZmZXIoQSl9LG1vdW50OmZ1bmN0aW9uKEEpe3JldHVybiB3KHIpLGZBLmNyZWF0ZU5vZGUobnVsbCwiLyIsZkEuZ2V0TW9kZShBLm9wdHMucm9vdCksMCl9LGNyZWF0ZU5vZGU6ZnVuY3Rpb24oQSxCLEksZyl7aWYoIWRBLmlzRGlyKEkpJiYhZEEuaXNGaWxlKEkpJiYhZEEuaXNMaW5rKEkpKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVJTlZBTCk7dmFyIFE9ZEEuY3JlYXRlTm9kZShBLEIsSSk7cmV0dXJuIFEubm9kZV9vcHM9ZkEubm9kZV9vcHMsUS5zdHJlYW1fb3BzPWZBLnN0cmVhbV9vcHMsUX0sZ2V0TW9kZTpmdW5jdGlvbihBKXt2YXIgQjt0cnl7Qj1mcy5sc3RhdFN5bmMoQSksZkEuaXNXaW5kb3dzJiYoQi5tb2RlPUIubW9kZXwoMjkyJkIubW9kZSk+PjIpfWNhdGNoKEEpe2lmKCFBLmNvZGUpdGhyb3cgQTt0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQVtBLmNvZGVdKX1yZXR1cm4gQi5tb2RlfSxyZWFsUGF0aDpmdW5jdGlvbihBKXtmb3IodmFyIEI9W107QS5wYXJlbnQhPT1BOylCLnB1c2goQS5uYW1lKSxBPUEucGFyZW50O3JldHVybiBCLnB1c2goQS5tb3VudC5vcHRzLnJvb3QpLEIucmV2ZXJzZSgpLFVBLmpvaW4uYXBwbHkobnVsbCxCKX0sZmxhZ3NGb3JOb2RlOmZ1bmN0aW9uKEEpe0EmPS0yMDk3MTUzLEEmPS0yMDQ5LEEmPS0zMjc2OSxBJj0tNTI0Mjg5O3ZhciBCPTA7Zm9yKHZhciBJIGluIGZBLmZsYWdzRm9yTm9kZU1hcClBJkkmJihCfD1mQS5mbGFnc0Zvck5vZGVNYXBbSV0sQV49SSk7aWYoQSl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FSU5WQUwpO3JldHVybiBCfSxub2RlX29wczp7Z2V0YXR0cjpmdW5jdGlvbihBKXt2YXIgQixJPWZBLnJlYWxQYXRoKEEpO3RyeXtCPWZzLmxzdGF0U3luYyhJKX1jYXRjaChBKXtpZighQS5jb2RlKXRocm93IEE7dGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEFbQS5jb2RlXSl9cmV0dXJuIGZBLmlzV2luZG93cyYmIUIuYmxrc2l6ZSYmKEIuYmxrc2l6ZT00MDk2KSxmQS5pc1dpbmRvd3MmJiFCLmJsb2NrcyYmKEIuYmxvY2tzPShCLnNpemUrQi5ibGtzaXplLTEpL0IuYmxrc2l6ZXwwKSx7ZGV2OkIuZGV2LGlubzpCLmlubyxtb2RlOkIubW9kZSxubGluazpCLm5saW5rLHVpZDpCLnVpZCxnaWQ6Qi5naWQscmRldjpCLnJkZXYsc2l6ZTpCLnNpemUsYXRpbWU6Qi5hdGltZSxtdGltZTpCLm10aW1lLGN0aW1lOkIuY3RpbWUsYmxrc2l6ZTpCLmJsa3NpemUsYmxvY2tzOkIuYmxvY2tzfX0sc2V0YXR0cjpmdW5jdGlvbihBLEIpe3ZhciBJPWZBLnJlYWxQYXRoKEEpO3RyeXtpZih2b2lkIDAhPT1CLm1vZGUmJihmcy5jaG1vZFN5bmMoSSxCLm1vZGUpLEEubW9kZT1CLm1vZGUpLHZvaWQgMCE9PUIudGltZXN0YW1wKXt2YXIgZz1uZXcgRGF0ZShCLnRpbWVzdGFtcCk7ZnMudXRpbWVzU3luYyhJLGcsZyl9dm9pZCAwIT09Qi5zaXplJiZmcy50cnVuY2F0ZVN5bmMoSSxCLnNpemUpfWNhdGNoKEEpe2lmKCFBLmNvZGUpdGhyb3cgQTt0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQVtBLmNvZGVdKX19LGxvb2t1cDpmdW5jdGlvbihBLEIpe3ZhciBJPVVBLmpvaW4yKGZBLnJlYWxQYXRoKEEpLEIpLGc9ZkEuZ2V0TW9kZShJKTtyZXR1cm4gZkEuY3JlYXRlTm9kZShBLEIsZyl9LG1rbm9kOmZ1bmN0aW9uKEEsQixJLGcpe3ZhciBRPWZBLmNyZWF0ZU5vZGUoQSxCLEksZyksRT1mQS5yZWFsUGF0aChRKTt0cnl7ZEEuaXNEaXIoUS5tb2RlKT9mcy5ta2RpclN5bmMoRSxRLm1vZGUpOmZzLndyaXRlRmlsZVN5bmMoRSwiIix7bW9kZTpRLm1vZGV9KX1jYXRjaChBKXtpZighQS5jb2RlKXRocm93IEE7dGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEFbQS5jb2RlXSl9cmV0dXJuIFF9LHJlbmFtZTpmdW5jdGlvbihBLEIsSSl7dmFyIGc9ZkEucmVhbFBhdGgoQSksUT1VQS5qb2luMihmQS5yZWFsUGF0aChCKSxJKTt0cnl7ZnMucmVuYW1lU3luYyhnLFEpfWNhdGNoKEEpe2lmKCFBLmNvZGUpdGhyb3cgQTt0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQVtBLmNvZGVdKX19LHVubGluazpmdW5jdGlvbihBLEIpe3ZhciBJPVVBLmpvaW4yKGZBLnJlYWxQYXRoKEEpLEIpO3RyeXtmcy51bmxpbmtTeW5jKEkpfWNhdGNoKEEpe2lmKCFBLmNvZGUpdGhyb3cgQTt0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQVtBLmNvZGVdKX19LHJtZGlyOmZ1bmN0aW9uKEEsQil7dmFyIEk9VUEuam9pbjIoZkEucmVhbFBhdGgoQSksQik7dHJ5e2ZzLnJtZGlyU3luYyhJKX1jYXRjaChBKXtpZighQS5jb2RlKXRocm93IEE7dGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEFbQS5jb2RlXSl9fSxyZWFkZGlyOmZ1bmN0aW9uKEEpe3ZhciBCPWZBLnJlYWxQYXRoKEEpO3RyeXtyZXR1cm4gZnMucmVhZGRpclN5bmMoQil9Y2F0Y2goQSl7aWYoIUEuY29kZSl0aHJvdyBBO3Rocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBW0EuY29kZV0pfX0sc3ltbGluazpmdW5jdGlvbihBLEIsSSl7dmFyIGc9VUEuam9pbjIoZkEucmVhbFBhdGgoQSksQik7dHJ5e2ZzLnN5bWxpbmtTeW5jKEksZyl9Y2F0Y2goQSl7aWYoIUEuY29kZSl0aHJvdyBBO3Rocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBW0EuY29kZV0pfX0scmVhZGxpbms6ZnVuY3Rpb24oQSl7dmFyIEI9ZkEucmVhbFBhdGgoQSk7dHJ5e3JldHVybiBCPWZzLnJlYWRsaW5rU3luYyhCKSxCPU5PREVKU19QQVRILnJlbGF0aXZlKE5PREVKU19QQVRILnJlc29sdmUoQS5tb3VudC5vcHRzLnJvb3QpLEIpfWNhdGNoKEEpe2lmKCFBLmNvZGUpdGhyb3cgQTt0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQVtBLmNvZGVdKX19fSxzdHJlYW1fb3BzOntvcGVuOmZ1bmN0aW9uKEEpe3ZhciBCPWZBLnJlYWxQYXRoKEEubm9kZSk7dHJ5e2RBLmlzRmlsZShBLm5vZGUubW9kZSkmJihBLm5mZD1mcy5vcGVuU3luYyhCLGZBLmZsYWdzRm9yTm9kZShBLmZsYWdzKSkpfWNhdGNoKEEpe2lmKCFBLmNvZGUpdGhyb3cgQTt0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQVtBLmNvZGVdKX19LGNsb3NlOmZ1bmN0aW9uKEEpe3RyeXtkQS5pc0ZpbGUoQS5ub2RlLm1vZGUpJiZBLm5mZCYmZnMuY2xvc2VTeW5jKEEubmZkKX1jYXRjaChBKXtpZighQS5jb2RlKXRocm93IEE7dGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEFbQS5jb2RlXSl9fSxyZWFkOmZ1bmN0aW9uKEEsQixJLGcsUSl7aWYoMD09PWcpcmV0dXJuIDA7dHJ5e3JldHVybiBmcy5yZWFkU3luYyhBLm5mZCxmQS5idWZmZXJGcm9tKEIuYnVmZmVyKSxJLGcsUSl9Y2F0Y2goQSl7dGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEFbQS5jb2RlXSl9fSx3cml0ZTpmdW5jdGlvbihBLEIsSSxnLFEpe3RyeXtyZXR1cm4gZnMud3JpdGVTeW5jKEEubmZkLGZBLmJ1ZmZlckZyb20oQi5idWZmZXIpLEksZyxRKX1jYXRjaChBKXt0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQVtBLmNvZGVdKX19LGxsc2VlazpmdW5jdGlvbihBLEIsSSl7dmFyIGc9QjtpZigxPT09SSlnKz1BLnBvc2l0aW9uO2Vsc2UgaWYoMj09PUkmJmRBLmlzRmlsZShBLm5vZGUubW9kZSkpdHJ5e2crPWZzLmZzdGF0U3luYyhBLm5mZCkuc2l6ZX1jYXRjaChBKXt0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQVtBLmNvZGVdKX1pZihnPDApdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRUlOVkFMKTtyZXR1cm4gZ319fSxOQT17RElSX01PREU6MTY4OTUsRklMRV9NT0RFOjMzMjc5LHJlYWRlcjpudWxsLG1vdW50OmZ1bmN0aW9uKEEpe3coZSksTkEucmVhZGVyfHwoTkEucmVhZGVyPW5ldyBGaWxlUmVhZGVyU3luYyk7dmFyIEI9TkEuY3JlYXRlTm9kZShudWxsLCIvIixOQS5ESVJfTU9ERSwwKSxJPXt9O2Z1bmN0aW9uIGcoQSl7Zm9yKHZhciBnPUEuc3BsaXQoIi8iKSxRPUIsRT0wO0U8Zy5sZW5ndGgtMTtFKyspe3ZhciBDPWcuc2xpY2UoMCxFKzEpLmpvaW4oIi8iKTtJW0NdfHwoSVtDXT1OQS5jcmVhdGVOb2RlKFEsZ1tFXSxOQS5ESVJfTU9ERSwwKSksUT1JW0NdfXJldHVybiBRfWZ1bmN0aW9uIFEoQSl7dmFyIEI9QS5zcGxpdCgiLyIpO3JldHVybiBCW0IubGVuZ3RoLTFdfXJldHVybiBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKEEub3B0cy5maWxlc3x8W10sKGZ1bmN0aW9uKEEpe05BLmNyZWF0ZU5vZGUoZyhBLm5hbWUpLFEoQS5uYW1lKSxOQS5GSUxFX01PREUsMCxBLEEubGFzdE1vZGlmaWVkRGF0ZSl9KSksKEEub3B0cy5ibG9ic3x8W10pLmZvckVhY2goKGZ1bmN0aW9uKEEpe05BLmNyZWF0ZU5vZGUoZyhBLm5hbWUpLFEoQS5uYW1lKSxOQS5GSUxFX01PREUsMCxBLmRhdGEpfSkpLChBLm9wdHMucGFja2FnZXN8fFtdKS5mb3JFYWNoKChmdW5jdGlvbihBKXtBLm1ldGFkYXRhLmZpbGVzLmZvckVhY2goKGZ1bmN0aW9uKEIpe3ZhciBJPUIuZmlsZW5hbWUuc3Vic3RyKDEpO05BLmNyZWF0ZU5vZGUoZyhJKSxRKEkpLE5BLkZJTEVfTU9ERSwwLEEuYmxvYi5zbGljZShCLnN0YXJ0LEIuZW5kKSl9KSl9KSksQn0sY3JlYXRlTm9kZTpmdW5jdGlvbihBLEIsSSxnLFEsRSl7dmFyIEM9ZEEuY3JlYXRlTm9kZShBLEIsSSk7cmV0dXJuIEMubW9kZT1JLEMubm9kZV9vcHM9TkEubm9kZV9vcHMsQy5zdHJlYW1fb3BzPU5BLnN0cmVhbV9vcHMsQy50aW1lc3RhbXA9KEV8fG5ldyBEYXRlKS5nZXRUaW1lKCksdyhOQS5GSUxFX01PREUhPT1OQS5ESVJfTU9ERSksST09PU5BLkZJTEVfTU9ERT8oQy5zaXplPVEuc2l6ZSxDLmNvbnRlbnRzPVEpOihDLnNpemU9NDA5NixDLmNvbnRlbnRzPXt9KSxBJiYoQS5jb250ZW50c1tCXT1DKSxDfSxub2RlX29wczp7Z2V0YXR0cjpmdW5jdGlvbihBKXtyZXR1cm57ZGV2OjEsaW5vOnZvaWQgMCxtb2RlOkEubW9kZSxubGluazoxLHVpZDowLGdpZDowLHJkZXY6dm9pZCAwLHNpemU6QS5zaXplLGF0aW1lOm5ldyBEYXRlKEEudGltZXN0YW1wKSxtdGltZTpuZXcgRGF0ZShBLnRpbWVzdGFtcCksY3RpbWU6bmV3IERhdGUoQS50aW1lc3RhbXApLGJsa3NpemU6NDA5NixibG9ja3M6TWF0aC5jZWlsKEEuc2l6ZS80MDk2KX19LHNldGF0dHI6ZnVuY3Rpb24oQSxCKXt2b2lkIDAhPT1CLm1vZGUmJihBLm1vZGU9Qi5tb2RlKSx2b2lkIDAhPT1CLnRpbWVzdGFtcCYmKEEudGltZXN0YW1wPUIudGltZXN0YW1wKX0sbG9va3VwOmZ1bmN0aW9uKEEsQil7dGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRU5PRU5UKX0sbWtub2Q6ZnVuY3Rpb24oQSxCLEksZyl7dGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRVBFUk0pfSxyZW5hbWU6ZnVuY3Rpb24oQSxCLEkpe3Rocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVQRVJNKX0sdW5saW5rOmZ1bmN0aW9uKEEsQil7dGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRVBFUk0pfSxybWRpcjpmdW5jdGlvbihBLEIpe3Rocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVQRVJNKX0scmVhZGRpcjpmdW5jdGlvbihBKXt2YXIgQj1bIi4iLCIuLiJdO2Zvcih2YXIgSSBpbiBBLmNvbnRlbnRzKUEuY29udGVudHMuaGFzT3duUHJvcGVydHkoSSkmJkIucHVzaChJKTtyZXR1cm4gQn0sc3ltbGluazpmdW5jdGlvbihBLEIsSSl7dGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRVBFUk0pfSxyZWFkbGluazpmdW5jdGlvbihBKXt0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FUEVSTSl9fSxzdHJlYW1fb3BzOntyZWFkOmZ1bmN0aW9uKEEsQixJLGcsUSl7aWYoUT49QS5ub2RlLnNpemUpcmV0dXJuIDA7dmFyIEU9QS5ub2RlLmNvbnRlbnRzLnNsaWNlKFEsUStnKSxDPU5BLnJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihFKTtyZXR1cm4gQi5zZXQobmV3IFVpbnQ4QXJyYXkoQyksSSksRS5zaXplfSx3cml0ZTpmdW5jdGlvbihBLEIsSSxnLFEpe3Rocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVJTyl9LGxsc2VlazpmdW5jdGlvbihBLEIsSSl7dmFyIGc9QjtpZigxPT09ST9nKz1BLnBvc2l0aW9uOjI9PT1JJiZkQS5pc0ZpbGUoQS5ub2RlLm1vZGUpJiYoZys9QS5ub2RlLnNpemUpLGc8MCl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FSU5WQUwpO3JldHVybiBnfX19O0srPTE2LEsrPTE2O3ZhciBkQT17cm9vdDpudWxsLG1vdW50czpbXSxkZXZpY2VzOnt9LHN0cmVhbXM6W10sbmV4dElub2RlOjEsbmFtZVRhYmxlOm51bGwsY3VycmVudFBhdGg6Ii8iLGluaXRpYWxpemVkOiExLGlnbm9yZVBlcm1pc3Npb25zOiEwLHRyYWNraW5nRGVsZWdhdGU6e30sdHJhY2tpbmc6e29wZW5GbGFnczp7UkVBRDoxLFdSSVRFOjJ9fSxFcnJub0Vycm9yOm51bGwsZ2VuZXJpY0Vycm9yczp7fSxmaWxlc3lzdGVtczpudWxsLHN5bmNGU1JlcXVlc3RzOjAsaGFuZGxlRlNFcnJvcjpmdW5jdGlvbihBKXtpZighKEEgaW5zdGFuY2VvZiBkQS5FcnJub0Vycm9yKSl0aHJvdyBBKyIgOiAiK2QoKTtyZXR1cm4geUEoQS5lcnJubyl9LGxvb2t1cFBhdGg6ZnVuY3Rpb24oQSxCKXtpZihCPUJ8fHt9LCEoQT1VQS5yZXNvbHZlKGRBLmN3ZCgpLEEpKSlyZXR1cm57cGF0aDoiIixub2RlOm51bGx9O3ZhciBJPXtmb2xsb3dfbW91bnQ6ITAscmVjdXJzZV9jb3VudDowfTtmb3IodmFyIGcgaW4gSSl2b2lkIDA9PT1CW2ddJiYoQltnXT1JW2ddKTtpZihCLnJlY3Vyc2VfY291bnQ+OCl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FTE9PUCk7Zm9yKHZhciBRPVVBLm5vcm1hbGl6ZUFycmF5KEEuc3BsaXQoIi8iKS5maWx0ZXIoKGZ1bmN0aW9uKEEpe3JldHVybiEhQX0pKSwhMSksRT1kQS5yb290LEM9Ii8iLGk9MDtpPFEubGVuZ3RoO2krKyl7dmFyIG89aT09PVEubGVuZ3RoLTE7aWYobyYmQi5wYXJlbnQpYnJlYWs7aWYoRT1kQS5sb29rdXBOb2RlKEUsUVtpXSksQz1VQS5qb2luMihDLFFbaV0pLGRBLmlzTW91bnRwb2ludChFKSYmKCFvfHxvJiZCLmZvbGxvd19tb3VudCkmJihFPUUubW91bnRlZC5yb290KSwhb3x8Qi5mb2xsb3cpZm9yKHZhciB0PTA7ZEEuaXNMaW5rKEUubW9kZSk7KXt2YXIgZT1kQS5yZWFkbGluayhDKTtpZihDPVVBLnJlc29sdmUoVUEuZGlybmFtZShDKSxlKSxFPWRBLmxvb2t1cFBhdGgoQyx7cmVjdXJzZV9jb3VudDpCLnJlY3Vyc2VfY291bnR9KS5ub2RlLHQrKz40MCl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FTE9PUCl9fXJldHVybntwYXRoOkMsbm9kZTpFfX0sZ2V0UGF0aDpmdW5jdGlvbihBKXtmb3IodmFyIEI7Oyl7aWYoZEEuaXNSb290KEEpKXt2YXIgST1BLm1vdW50Lm1vdW50cG9pbnQ7cmV0dXJuIEI/Ii8iIT09SVtJLmxlbmd0aC0xXT9JKyIvIitCOkkrQjpJfUI9Qj9BLm5hbWUrIi8iK0I6QS5uYW1lLEE9QS5wYXJlbnR9fSxoYXNoTmFtZTpmdW5jdGlvbihBLEIpe2Zvcih2YXIgST0wLGc9MDtnPEIubGVuZ3RoO2crKylJPShJPDw1KS1JK0IuY2hhckNvZGVBdChnKXwwO3JldHVybihBK0k+Pj4wKSVkQS5uYW1lVGFibGUubGVuZ3RofSxoYXNoQWRkTm9kZTpmdW5jdGlvbihBKXt2YXIgQj1kQS5oYXNoTmFtZShBLnBhcmVudC5pZCxBLm5hbWUpO0EubmFtZV9uZXh0PWRBLm5hbWVUYWJsZVtCXSxkQS5uYW1lVGFibGVbQl09QX0saGFzaFJlbW92ZU5vZGU6ZnVuY3Rpb24oQSl7dmFyIEI9ZEEuaGFzaE5hbWUoQS5wYXJlbnQuaWQsQS5uYW1lKTtpZihkQS5uYW1lVGFibGVbQl09PT1BKWRBLm5hbWVUYWJsZVtCXT1BLm5hbWVfbmV4dDtlbHNlIGZvcih2YXIgST1kQS5uYW1lVGFibGVbQl07STspe2lmKEkubmFtZV9uZXh0PT09QSl7SS5uYW1lX25leHQ9QS5uYW1lX25leHQ7YnJlYWt9ST1JLm5hbWVfbmV4dH19LGxvb2t1cE5vZGU6ZnVuY3Rpb24oQSxCKXt2YXIgST1kQS5tYXlMb29rdXAoQSk7aWYoSSl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihJLEEpO2Zvcih2YXIgZz1kQS5oYXNoTmFtZShBLmlkLEIpLFE9ZEEubmFtZVRhYmxlW2ddO1E7UT1RLm5hbWVfbmV4dCl7dmFyIEU9US5uYW1lO2lmKFEucGFyZW50LmlkPT09QS5pZCYmRT09PUIpcmV0dXJuIFF9cmV0dXJuIGRBLmxvb2t1cChBLEIpfSxjcmVhdGVOb2RlOmZ1bmN0aW9uKEEsQixJLGcpe2lmKCFkQS5GU05vZGUpe2RBLkZTTm9kZT1mdW5jdGlvbihBLEIsSSxnKXtBfHwoQT10aGlzKSx0aGlzLnBhcmVudD1BLHRoaXMubW91bnQ9QS5tb3VudCx0aGlzLm1vdW50ZWQ9bnVsbCx0aGlzLmlkPWRBLm5leHRJbm9kZSsrLHRoaXMubmFtZT1CLHRoaXMubW9kZT1JLHRoaXMubm9kZV9vcHM9e30sdGhpcy5zdHJlYW1fb3BzPXt9LHRoaXMucmRldj1nfSxkQS5GU05vZGUucHJvdG90eXBlPXt9O3ZhciBRPTM2NSxFPTE0NjtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhkQS5GU05vZGUucHJvdG90eXBlLHtyZWFkOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4odGhpcy5tb2RlJlEpPT09UX0sc2V0OmZ1bmN0aW9uKEEpe0E/dGhpcy5tb2RlfD1ROnRoaXMubW9kZSY9LTM2Nn19LHdyaXRlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4odGhpcy5tb2RlJkUpPT09RX0sc2V0OmZ1bmN0aW9uKEEpe0E/dGhpcy5tb2RlfD1FOnRoaXMubW9kZSY9LTE0N319LGlzRm9sZGVyOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZEEuaXNEaXIodGhpcy5tb2RlKX19LGlzRGV2aWNlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZEEuaXNDaHJkZXYodGhpcy5tb2RlKX19fSl9dmFyIEM9bmV3IGRBLkZTTm9kZShBLEIsSSxnKTtyZXR1cm4gZEEuaGFzaEFkZE5vZGUoQyksQ30sZGVzdHJveU5vZGU6ZnVuY3Rpb24oQSl7ZEEuaGFzaFJlbW92ZU5vZGUoQSl9LGlzUm9vdDpmdW5jdGlvbihBKXtyZXR1cm4gQT09PUEucGFyZW50fSxpc01vdW50cG9pbnQ6ZnVuY3Rpb24oQSl7cmV0dXJuISFBLm1vdW50ZWR9LGlzRmlsZTpmdW5jdGlvbihBKXtyZXR1cm4gMzI3Njg9PSg2MTQ0MCZBKX0saXNEaXI6ZnVuY3Rpb24oQSl7cmV0dXJuIDE2Mzg0PT0oNjE0NDAmQSl9LGlzTGluazpmdW5jdGlvbihBKXtyZXR1cm4gNDA5NjA9PSg2MTQ0MCZBKX0saXNDaHJkZXY6ZnVuY3Rpb24oQSl7cmV0dXJuIDgxOTI9PSg2MTQ0MCZBKX0saXNCbGtkZXY6ZnVuY3Rpb24oQSl7cmV0dXJuIDI0NTc2PT0oNjE0NDAmQSl9LGlzRklGTzpmdW5jdGlvbihBKXtyZXR1cm4gNDA5Nj09KDYxNDQwJkEpfSxpc1NvY2tldDpmdW5jdGlvbihBKXtyZXR1cm4gNDkxNTI9PSg0OTE1MiZBKX0sZmxhZ01vZGVzOntyOjAscnM6MTA1MjY3MiwicisiOjIsdzo1Nzcsd3g6NzA1LHh3OjcwNSwidysiOjU3OCwid3grIjo3MDYsInh3KyI6NzA2LGE6MTA4OSxheDoxMjE3LHhhOjEyMTcsImErIjoxMDkwLCJheCsiOjEyMTgsInhhKyI6MTIxOH0sbW9kZVN0cmluZ1RvRmxhZ3M6ZnVuY3Rpb24oQSl7dmFyIEI9ZEEuZmxhZ01vZGVzW0FdO2lmKHZvaWQgMD09PUIpdGhyb3cgbmV3IEVycm9yKCJVbmtub3duIGZpbGUgb3BlbiBtb2RlOiAiK0EpO3JldHVybiBCfSxmbGFnc1RvUGVybWlzc2lvblN0cmluZzpmdW5jdGlvbihBKXt2YXIgQj1bInIiLCJ3IiwicnciXVszJkFdO3JldHVybiA1MTImQSYmKEIrPSJ3IiksQn0sbm9kZVBlcm1pc3Npb25zOmZ1bmN0aW9uKEEsQil7cmV0dXJuIGRBLmlnbm9yZVBlcm1pc3Npb25zfHwoLTE9PT1CLmluZGV4T2YoInIiKXx8MjkyJkEubW9kZSkmJigtMT09PUIuaW5kZXhPZigidyIpfHwxNDYmQS5tb2RlKSYmKC0xPT09Qi5pbmRleE9mKCJ4Iil8fDczJkEubW9kZSk/MDpoQS5FQUNDRVN9LG1heUxvb2t1cDpmdW5jdGlvbihBKXt2YXIgQj1kQS5ub2RlUGVybWlzc2lvbnMoQSwieCIpO3JldHVybiBCfHwoQS5ub2RlX29wcy5sb29rdXA/MDpoQS5FQUNDRVMpfSxtYXlDcmVhdGU6ZnVuY3Rpb24oQSxCKXt0cnl7ZEEubG9va3VwTm9kZShBLEIpO3JldHVybiBoQS5FRVhJU1R9Y2F0Y2goQSl7fXJldHVybiBkQS5ub2RlUGVybWlzc2lvbnMoQSwid3giKX0sbWF5RGVsZXRlOmZ1bmN0aW9uKEEsQixJKXt2YXIgZzt0cnl7Zz1kQS5sb29rdXBOb2RlKEEsQil9Y2F0Y2goQSl7cmV0dXJuIEEuZXJybm99dmFyIFE9ZEEubm9kZVBlcm1pc3Npb25zKEEsInd4Iik7aWYoUSlyZXR1cm4gUTtpZihJKXtpZighZEEuaXNEaXIoZy5tb2RlKSlyZXR1cm4gaEEuRU5PVERJUjtpZihkQS5pc1Jvb3QoZyl8fGRBLmdldFBhdGgoZyk9PT1kQS5jd2QoKSlyZXR1cm4gaEEuRUJVU1l9ZWxzZSBpZihkQS5pc0RpcihnLm1vZGUpKXJldHVybiBoQS5FSVNESVI7cmV0dXJuIDB9LG1heU9wZW46ZnVuY3Rpb24oQSxCKXtyZXR1cm4gQT9kQS5pc0xpbmsoQS5tb2RlKT9oQS5FTE9PUDpkQS5pc0RpcihBLm1vZGUpJiYoInIiIT09ZEEuZmxhZ3NUb1Blcm1pc3Npb25TdHJpbmcoQil8fDUxMiZCKT9oQS5FSVNESVI6ZEEubm9kZVBlcm1pc3Npb25zKEEsZEEuZmxhZ3NUb1Blcm1pc3Npb25TdHJpbmcoQikpOmhBLkVOT0VOVH0sTUFYX09QRU5fRkRTOjQwOTYsbmV4dGZkOmZ1bmN0aW9uKEEsQil7QT1BfHwwLEI9Qnx8ZEEuTUFYX09QRU5fRkRTO2Zvcih2YXIgST1BO0k8PUI7SSsrKWlmKCFkQS5zdHJlYW1zW0ldKXJldHVybiBJO3Rocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVNRklMRSl9LGdldFN0cmVhbTpmdW5jdGlvbihBKXtyZXR1cm4gZEEuc3RyZWFtc1tBXX0sY3JlYXRlU3RyZWFtOmZ1bmN0aW9uKEEsQixJKXtkQS5GU1N0cmVhbXx8KGRBLkZTU3RyZWFtPWZ1bmN0aW9uKCl7fSxkQS5GU1N0cmVhbS5wcm90b3R5cGU9e30sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZEEuRlNTdHJlYW0ucHJvdG90eXBlLHtvYmplY3Q6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGV9LHNldDpmdW5jdGlvbihBKXt0aGlzLm5vZGU9QX19LGlzUmVhZDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDEhPSgyMDk3MTU1JnRoaXMuZmxhZ3MpfX0saXNXcml0ZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDAhPSgyMDk3MTU1JnRoaXMuZmxhZ3MpfX0saXNBcHBlbmQ6e2dldDpmdW5jdGlvbigpe3JldHVybiAxMDI0JnRoaXMuZmxhZ3N9fX0pKTt2YXIgZz1uZXcgZEEuRlNTdHJlYW07Zm9yKHZhciBRIGluIEEpZ1tRXT1BW1FdO0E9Zzt2YXIgRT1kQS5uZXh0ZmQoQixJKTtyZXR1cm4gQS5mZD1FLGRBLnN0cmVhbXNbRV09QSxBfSxjbG9zZVN0cmVhbTpmdW5jdGlvbihBKXtkQS5zdHJlYW1zW0FdPW51bGx9LGNocmRldl9zdHJlYW1fb3BzOntvcGVuOmZ1bmN0aW9uKEEpe3ZhciBCPWRBLmdldERldmljZShBLm5vZGUucmRldik7QS5zdHJlYW1fb3BzPUIuc3RyZWFtX29wcyxBLnN0cmVhbV9vcHMub3BlbiYmQS5zdHJlYW1fb3BzLm9wZW4oQSl9LGxsc2VlazpmdW5jdGlvbigpe3Rocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVTUElQRSl9fSxtYWpvcjpmdW5jdGlvbihBKXtyZXR1cm4gQT4+OH0sbWlub3I6ZnVuY3Rpb24oQSl7cmV0dXJuIDI1NSZBfSxtYWtlZGV2OmZ1bmN0aW9uKEEsQil7cmV0dXJuIEE8PDh8Qn0scmVnaXN0ZXJEZXZpY2U6ZnVuY3Rpb24oQSxCKXtkQS5kZXZpY2VzW0FdPXtzdHJlYW1fb3BzOkJ9fSxnZXREZXZpY2U6ZnVuY3Rpb24oQSl7cmV0dXJuIGRBLmRldmljZXNbQV19LGdldE1vdW50czpmdW5jdGlvbihBKXtmb3IodmFyIEI9W10sST1bQV07SS5sZW5ndGg7KXt2YXIgZz1JLnBvcCgpO0IucHVzaChnKSxJLnB1c2guYXBwbHkoSSxnLm1vdW50cyl9cmV0dXJuIEJ9LHN5bmNmczpmdW5jdGlvbihBLEIpeyJmdW5jdGlvbiI9PXR5cGVvZiBBJiYoQj1BLEE9ITEpLGRBLnN5bmNGU1JlcXVlc3RzKyssZEEuc3luY0ZTUmVxdWVzdHM+MSYmY29uc29sZS5sb2coIndhcm5pbmc6ICIrZEEuc3luY0ZTUmVxdWVzdHMrIiBGUy5zeW5jZnMgb3BlcmF0aW9ucyBpbiBmbGlnaHQgYXQgb25jZSwgcHJvYmFibHkganVzdCBkb2luZyBleHRyYSB3b3JrIik7dmFyIEk9ZEEuZ2V0TW91bnRzKGRBLnJvb3QubW91bnQpLGc9MDtmdW5jdGlvbiBRKEEpe3JldHVybiB3KGRBLnN5bmNGU1JlcXVlc3RzPjApLGRBLnN5bmNGU1JlcXVlc3RzLS0sQihBKX1mdW5jdGlvbiBFKEEpe2lmKEEpcmV0dXJuIEUuZXJyb3JlZD92b2lkIDA6KEUuZXJyb3JlZD0hMCxRKEEpKTsrK2c+PUkubGVuZ3RoJiZRKG51bGwpfUkuZm9yRWFjaCgoZnVuY3Rpb24oQil7aWYoIUIudHlwZS5zeW5jZnMpcmV0dXJuIEUobnVsbCk7Qi50eXBlLnN5bmNmcyhCLEEsRSl9KSl9LG1vdW50OmZ1bmN0aW9uKEEsQixJKXt2YXIgZyxRPSIvIj09PUksRT0hSTtpZihRJiZkQS5yb290KXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVCVVNZKTtpZighUSYmIUUpe3ZhciBDPWRBLmxvb2t1cFBhdGgoSSx7Zm9sbG93X21vdW50OiExfSk7aWYoST1DLnBhdGgsZz1DLm5vZGUsZEEuaXNNb3VudHBvaW50KGcpKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVCVVNZKTtpZighZEEuaXNEaXIoZy5tb2RlKSl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FTk9URElSKX12YXIgaT17dHlwZTpBLG9wdHM6Qixtb3VudHBvaW50OkksbW91bnRzOltdfSxvPUEubW91bnQoaSk7cmV0dXJuIG8ubW91bnQ9aSxpLnJvb3Q9byxRP2RBLnJvb3Q9bzpnJiYoZy5tb3VudGVkPWksZy5tb3VudCYmZy5tb3VudC5tb3VudHMucHVzaChpKSksb30sdW5tb3VudDpmdW5jdGlvbihBKXt2YXIgQj1kQS5sb29rdXBQYXRoKEEse2ZvbGxvd19tb3VudDohMX0pO2lmKCFkQS5pc01vdW50cG9pbnQoQi5ub2RlKSl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FSU5WQUwpO3ZhciBJPUIubm9kZSxnPUkubW91bnRlZCxRPWRBLmdldE1vdW50cyhnKTtPYmplY3Qua2V5cyhkQS5uYW1lVGFibGUpLmZvckVhY2goKGZ1bmN0aW9uKEEpe2Zvcih2YXIgQj1kQS5uYW1lVGFibGVbQV07Qjspe3ZhciBJPUIubmFtZV9uZXh0Oy0xIT09US5pbmRleE9mKEIubW91bnQpJiZkQS5kZXN0cm95Tm9kZShCKSxCPUl9fSkpLEkubW91bnRlZD1udWxsO3ZhciBFPUkubW91bnQubW91bnRzLmluZGV4T2YoZyk7dygtMSE9PUUpLEkubW91bnQubW91bnRzLnNwbGljZShFLDEpfSxsb29rdXA6ZnVuY3Rpb24oQSxCKXtyZXR1cm4gQS5ub2RlX29wcy5sb29rdXAoQSxCKX0sbWtub2Q6ZnVuY3Rpb24oQSxCLEkpe3ZhciBnPWRBLmxvb2t1cFBhdGgoQSx7cGFyZW50OiEwfSkubm9kZSxRPVVBLmJhc2VuYW1lKEEpO2lmKCFRfHwiLiI9PT1RfHwiLi4iPT09USl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FSU5WQUwpO3ZhciBFPWRBLm1heUNyZWF0ZShnLFEpO2lmKEUpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoRSk7aWYoIWcubm9kZV9vcHMubWtub2QpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRVBFUk0pO3JldHVybiBnLm5vZGVfb3BzLm1rbm9kKGcsUSxCLEkpfSxjcmVhdGU6ZnVuY3Rpb24oQSxCKXtyZXR1cm4gQj12b2lkIDAhPT1CP0I6NDM4LEImPTQwOTUsQnw9MzI3NjgsZEEubWtub2QoQSxCLDApfSxta2RpcjpmdW5jdGlvbihBLEIpe3JldHVybiBCPXZvaWQgMCE9PUI/Qjo1MTEsQiY9MTAyMyxCfD0xNjM4NCxkQS5ta25vZChBLEIsMCl9LG1rZGlyVHJlZTpmdW5jdGlvbihBLEIpe2Zvcih2YXIgST1BLnNwbGl0KCIvIiksZz0iIixRPTA7UTxJLmxlbmd0aDsrK1EpaWYoSVtRXSl7Zys9Ii8iK0lbUV07dHJ5e2RBLm1rZGlyKGcsQil9Y2F0Y2goQSl7aWYoQS5lcnJubyE9aEEuRUVYSVNUKXRocm93IEF9fX0sbWtkZXY6ZnVuY3Rpb24oQSxCLEkpe3JldHVybiB2b2lkIDA9PT1JJiYoST1CLEI9NDM4KSxCfD04MTkyLGRBLm1rbm9kKEEsQixJKX0sc3ltbGluazpmdW5jdGlvbihBLEIpe2lmKCFVQS5yZXNvbHZlKEEpKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVOT0VOVCk7dmFyIEk9ZEEubG9va3VwUGF0aChCLHtwYXJlbnQ6ITB9KS5ub2RlO2lmKCFJKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVOT0VOVCk7dmFyIGc9VUEuYmFzZW5hbWUoQiksUT1kQS5tYXlDcmVhdGUoSSxnKTtpZihRKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKFEpO2lmKCFJLm5vZGVfb3BzLnN5bWxpbmspdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRVBFUk0pO3JldHVybiBJLm5vZGVfb3BzLnN5bWxpbmsoSSxnLEEpfSxyZW5hbWU6ZnVuY3Rpb24oQSxCKXt2YXIgSSxnLFE9VUEuZGlybmFtZShBKSxFPVVBLmRpcm5hbWUoQiksQz1VQS5iYXNlbmFtZShBKSxpPVVBLmJhc2VuYW1lKEIpO3RyeXtJPWRBLmxvb2t1cFBhdGgoQSx7cGFyZW50OiEwfSkubm9kZSxnPWRBLmxvb2t1cFBhdGgoQix7cGFyZW50OiEwfSkubm9kZX1jYXRjaChBKXt0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FQlVTWSl9aWYoIUl8fCFnKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVOT0VOVCk7aWYoSS5tb3VudCE9PWcubW91bnQpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRVhERVYpO3ZhciBvLHQ9ZEEubG9va3VwTm9kZShJLEMpLGU9VUEucmVsYXRpdmUoQSxFKTtpZigiLiIhPT1lLmNoYXJBdCgwKSl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FSU5WQUwpO2lmKCIuIiE9PShlPVVBLnJlbGF0aXZlKEIsUSkpLmNoYXJBdCgwKSl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FTk9URU1QVFkpO3RyeXtvPWRBLmxvb2t1cE5vZGUoZyxpKX1jYXRjaChBKXt9aWYodCE9PW8pe3ZhciByPWRBLmlzRGlyKHQubW9kZSksYT1kQS5tYXlEZWxldGUoSSxDLHIpO2lmKGEpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoYSk7aWYoYT1vP2RBLm1heURlbGV0ZShnLGkscik6ZEEubWF5Q3JlYXRlKGcsaSkpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoYSk7aWYoIUkubm9kZV9vcHMucmVuYW1lKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVQRVJNKTtpZihkQS5pc01vdW50cG9pbnQodCl8fG8mJmRBLmlzTW91bnRwb2ludChvKSl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FQlVTWSk7aWYoZyE9PUkmJihhPWRBLm5vZGVQZXJtaXNzaW9ucyhJLCJ3IikpKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGEpO3RyeXtkQS50cmFja2luZ0RlbGVnYXRlLndpbGxNb3ZlUGF0aCYmZEEudHJhY2tpbmdEZWxlZ2F0ZS53aWxsTW92ZVBhdGgoQSxCKX1jYXRjaChJKXtjb25zb2xlLmxvZygiRlMudHJhY2tpbmdEZWxlZ2F0ZVsnd2lsbE1vdmVQYXRoJ10oJyIrQSsiJywgJyIrQisiJykgdGhyZXcgYW4gZXhjZXB0aW9uOiAiK0kubWVzc2FnZSl9ZEEuaGFzaFJlbW92ZU5vZGUodCk7dHJ5e0kubm9kZV9vcHMucmVuYW1lKHQsZyxpKX1jYXRjaChBKXt0aHJvdyBBfWZpbmFsbHl7ZEEuaGFzaEFkZE5vZGUodCl9dHJ5e2RBLnRyYWNraW5nRGVsZWdhdGUub25Nb3ZlUGF0aCYmZEEudHJhY2tpbmdEZWxlZ2F0ZS5vbk1vdmVQYXRoKEEsQil9Y2F0Y2goSSl7Y29uc29sZS5sb2coIkZTLnRyYWNraW5nRGVsZWdhdGVbJ29uTW92ZVBhdGgnXSgnIitBKyInLCAnIitCKyInKSB0aHJldyBhbiBleGNlcHRpb246ICIrSS5tZXNzYWdlKX19fSxybWRpcjpmdW5jdGlvbihBKXt2YXIgQj1kQS5sb29rdXBQYXRoKEEse3BhcmVudDohMH0pLm5vZGUsST1VQS5iYXNlbmFtZShBKSxnPWRBLmxvb2t1cE5vZGUoQixJKSxRPWRBLm1heURlbGV0ZShCLEksITApO2lmKFEpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoUSk7aWYoIUIubm9kZV9vcHMucm1kaXIpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRVBFUk0pO2lmKGRBLmlzTW91bnRwb2ludChnKSl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FQlVTWSk7dHJ5e2RBLnRyYWNraW5nRGVsZWdhdGUud2lsbERlbGV0ZVBhdGgmJmRBLnRyYWNraW5nRGVsZWdhdGUud2lsbERlbGV0ZVBhdGgoQSl9Y2F0Y2goQil7Y29uc29sZS5sb2coIkZTLnRyYWNraW5nRGVsZWdhdGVbJ3dpbGxEZWxldGVQYXRoJ10oJyIrQSsiJykgdGhyZXcgYW4gZXhjZXB0aW9uOiAiK0IubWVzc2FnZSl9Qi5ub2RlX29wcy5ybWRpcihCLEkpLGRBLmRlc3Ryb3lOb2RlKGcpO3RyeXtkQS50cmFja2luZ0RlbGVnYXRlLm9uRGVsZXRlUGF0aCYmZEEudHJhY2tpbmdEZWxlZ2F0ZS5vbkRlbGV0ZVBhdGgoQSl9Y2F0Y2goQil7Y29uc29sZS5sb2coIkZTLnRyYWNraW5nRGVsZWdhdGVbJ29uRGVsZXRlUGF0aCddKCciK0ErIicpIHRocmV3IGFuIGV4Y2VwdGlvbjogIitCLm1lc3NhZ2UpfX0scmVhZGRpcjpmdW5jdGlvbihBKXt2YXIgQj1kQS5sb29rdXBQYXRoKEEse2ZvbGxvdzohMH0pLm5vZGU7aWYoIUIubm9kZV9vcHMucmVhZGRpcil0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FTk9URElSKTtyZXR1cm4gQi5ub2RlX29wcy5yZWFkZGlyKEIpfSx1bmxpbms6ZnVuY3Rpb24oQSl7dmFyIEI9ZEEubG9va3VwUGF0aChBLHtwYXJlbnQ6ITB9KS5ub2RlLEk9VUEuYmFzZW5hbWUoQSksZz1kQS5sb29rdXBOb2RlKEIsSSksUT1kQS5tYXlEZWxldGUoQixJLCExKTtpZihRKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKFEpO2lmKCFCLm5vZGVfb3BzLnVubGluayl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FUEVSTSk7aWYoZEEuaXNNb3VudHBvaW50KGcpKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVCVVNZKTt0cnl7ZEEudHJhY2tpbmdEZWxlZ2F0ZS53aWxsRGVsZXRlUGF0aCYmZEEudHJhY2tpbmdEZWxlZ2F0ZS53aWxsRGVsZXRlUGF0aChBKX1jYXRjaChCKXtjb25zb2xlLmxvZygiRlMudHJhY2tpbmdEZWxlZ2F0ZVsnd2lsbERlbGV0ZVBhdGgnXSgnIitBKyInKSB0aHJldyBhbiBleGNlcHRpb246ICIrQi5tZXNzYWdlKX1CLm5vZGVfb3BzLnVubGluayhCLEkpLGRBLmRlc3Ryb3lOb2RlKGcpO3RyeXtkQS50cmFja2luZ0RlbGVnYXRlLm9uRGVsZXRlUGF0aCYmZEEudHJhY2tpbmdEZWxlZ2F0ZS5vbkRlbGV0ZVBhdGgoQSl9Y2F0Y2goQil7Y29uc29sZS5sb2coIkZTLnRyYWNraW5nRGVsZWdhdGVbJ29uRGVsZXRlUGF0aCddKCciK0ErIicpIHRocmV3IGFuIGV4Y2VwdGlvbjogIitCLm1lc3NhZ2UpfX0scmVhZGxpbms6ZnVuY3Rpb24oQSl7dmFyIEI9ZEEubG9va3VwUGF0aChBKS5ub2RlO2lmKCFCKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVOT0VOVCk7aWYoIUIubm9kZV9vcHMucmVhZGxpbmspdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRUlOVkFMKTtyZXR1cm4gVUEucmVzb2x2ZShkQS5nZXRQYXRoKEIucGFyZW50KSxCLm5vZGVfb3BzLnJlYWRsaW5rKEIpKX0sc3RhdDpmdW5jdGlvbihBLEIpe3ZhciBJPWRBLmxvb2t1cFBhdGgoQSx7Zm9sbG93OiFCfSkubm9kZTtpZighSSl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FTk9FTlQpO2lmKCFJLm5vZGVfb3BzLmdldGF0dHIpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRVBFUk0pO3JldHVybiBJLm5vZGVfb3BzLmdldGF0dHIoSSl9LGxzdGF0OmZ1bmN0aW9uKEEpe3JldHVybiBkQS5zdGF0KEEsITApfSxjaG1vZDpmdW5jdGlvbihBLEIsSSl7dmFyIGc7InN0cmluZyI9PXR5cGVvZiBBP2c9ZEEubG9va3VwUGF0aChBLHtmb2xsb3c6IUl9KS5ub2RlOmc9QTtpZighZy5ub2RlX29wcy5zZXRhdHRyKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVQRVJNKTtnLm5vZGVfb3BzLnNldGF0dHIoZyx7bW9kZTo0MDk1JkJ8LTQwOTYmZy5tb2RlLHRpbWVzdGFtcDpEYXRlLm5vdygpfSl9LGxjaG1vZDpmdW5jdGlvbihBLEIpe2RBLmNobW9kKEEsQiwhMCl9LGZjaG1vZDpmdW5jdGlvbihBLEIpe3ZhciBJPWRBLmdldFN0cmVhbShBKTtpZighSSl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FQkFERik7ZEEuY2htb2QoSS5ub2RlLEIpfSxjaG93bjpmdW5jdGlvbihBLEIsSSxnKXt2YXIgUTsic3RyaW5nIj09dHlwZW9mIEE/UT1kQS5sb29rdXBQYXRoKEEse2ZvbGxvdzohZ30pLm5vZGU6UT1BO2lmKCFRLm5vZGVfb3BzLnNldGF0dHIpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRVBFUk0pO1Eubm9kZV9vcHMuc2V0YXR0cihRLHt0aW1lc3RhbXA6RGF0ZS5ub3coKX0pfSxsY2hvd246ZnVuY3Rpb24oQSxCLEkpe2RBLmNob3duKEEsQixJLCEwKX0sZmNob3duOmZ1bmN0aW9uKEEsQixJKXt2YXIgZz1kQS5nZXRTdHJlYW0oQSk7aWYoIWcpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRUJBREYpO2RBLmNob3duKGcubm9kZSxCLEkpfSx0cnVuY2F0ZTpmdW5jdGlvbihBLEIpe2lmKEI8MCl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FSU5WQUwpO3ZhciBJOyJzdHJpbmciPT10eXBlb2YgQT9JPWRBLmxvb2t1cFBhdGgoQSx7Zm9sbG93OiEwfSkubm9kZTpJPUE7aWYoIUkubm9kZV9vcHMuc2V0YXR0cil0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FUEVSTSk7aWYoZEEuaXNEaXIoSS5tb2RlKSl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FSVNESVIpO2lmKCFkQS5pc0ZpbGUoSS5tb2RlKSl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FSU5WQUwpO3ZhciBnPWRBLm5vZGVQZXJtaXNzaW9ucyhJLCJ3Iik7aWYoZyl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihnKTtJLm5vZGVfb3BzLnNldGF0dHIoSSx7c2l6ZTpCLHRpbWVzdGFtcDpEYXRlLm5vdygpfSl9LGZ0cnVuY2F0ZTpmdW5jdGlvbihBLEIpe3ZhciBJPWRBLmdldFN0cmVhbShBKTtpZighSSl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FQkFERik7aWYoMD09KDIwOTcxNTUmSS5mbGFncykpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRUlOVkFMKTtkQS50cnVuY2F0ZShJLm5vZGUsQil9LHV0aW1lOmZ1bmN0aW9uKEEsQixJKXt2YXIgZz1kQS5sb29rdXBQYXRoKEEse2ZvbGxvdzohMH0pLm5vZGU7Zy5ub2RlX29wcy5zZXRhdHRyKGcse3RpbWVzdGFtcDpNYXRoLm1heChCLEkpfSl9LG9wZW46ZnVuY3Rpb24oQSxCLEksZyxRKXtpZigiIj09PUEpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRU5PRU5UKTt2YXIgQztpZihJPXZvaWQgMD09PUk/NDM4OkksST02NCYoQj0ic3RyaW5nIj09dHlwZW9mIEI/ZEEubW9kZVN0cmluZ1RvRmxhZ3MoQik6Qik/NDA5NSZJfDMyNzY4OjAsIm9iamVjdCI9PXR5cGVvZiBBKUM9QTtlbHNle0E9VUEubm9ybWFsaXplKEEpO3RyeXtDPWRBLmxvb2t1cFBhdGgoQSx7Zm9sbG93OiEoMTMxMDcyJkIpfSkubm9kZX1jYXRjaChBKXt9fXZhciBpPSExO2lmKDY0JkIpaWYoQyl7aWYoMTI4JkIpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRUVYSVNUKX1lbHNlIEM9ZEEubWtub2QoQSxJLDApLGk9ITA7aWYoIUMpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRU5PRU5UKTtpZihkQS5pc0NocmRldihDLm1vZGUpJiYoQiY9LTUxMyksNjU1MzYmQiYmIWRBLmlzRGlyKEMubW9kZSkpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRU5PVERJUik7aWYoIWkpe3ZhciBvPWRBLm1heU9wZW4oQyxCKTtpZihvKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKG8pfTUxMiZCJiZkQS50cnVuY2F0ZShDLDApLEImPS02NDE7dmFyIHQ9ZEEuY3JlYXRlU3RyZWFtKHtub2RlOkMscGF0aDpkQS5nZXRQYXRoKEMpLGZsYWdzOkIsc2Vla2FibGU6ITAscG9zaXRpb246MCxzdHJlYW1fb3BzOkMuc3RyZWFtX29wcyx1bmdvdHRlbjpbXSxlcnJvcjohMX0sZyxRKTt0LnN0cmVhbV9vcHMub3BlbiYmdC5zdHJlYW1fb3BzLm9wZW4odCksIUUubG9nUmVhZEZpbGVzfHwxJkJ8fChkQS5yZWFkRmlsZXN8fChkQS5yZWFkRmlsZXM9e30pLEEgaW4gZEEucmVhZEZpbGVzfHwoZEEucmVhZEZpbGVzW0FdPTEsRS5wcmludEVycigicmVhZCBmaWxlOiAiK0EpKSk7dHJ5e2lmKGRBLnRyYWNraW5nRGVsZWdhdGUub25PcGVuRmlsZSl7dmFyIGU9MDsxIT0oMjA5NzE1NSZCKSYmKGV8PWRBLnRyYWNraW5nLm9wZW5GbGFncy5SRUFEKSwwIT0oMjA5NzE1NSZCKSYmKGV8PWRBLnRyYWNraW5nLm9wZW5GbGFncy5XUklURSksZEEudHJhY2tpbmdEZWxlZ2F0ZS5vbk9wZW5GaWxlKEEsZSl9fWNhdGNoKEIpe2NvbnNvbGUubG9nKCJGUy50cmFja2luZ0RlbGVnYXRlWydvbk9wZW5GaWxlJ10oJyIrQSsiJywgZmxhZ3MpIHRocmV3IGFuIGV4Y2VwdGlvbjogIitCLm1lc3NhZ2UpfXJldHVybiB0fSxjbG9zZTpmdW5jdGlvbihBKXtpZihkQS5pc0Nsb3NlZChBKSl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FQkFERik7QS5nZXRkZW50cyYmKEEuZ2V0ZGVudHM9bnVsbCk7dHJ5e0Euc3RyZWFtX29wcy5jbG9zZSYmQS5zdHJlYW1fb3BzLmNsb3NlKEEpfWNhdGNoKEEpe3Rocm93IEF9ZmluYWxseXtkQS5jbG9zZVN0cmVhbShBLmZkKX1BLmZkPW51bGx9LGlzQ2xvc2VkOmZ1bmN0aW9uKEEpe3JldHVybiBudWxsPT09QS5mZH0sbGxzZWVrOmZ1bmN0aW9uKEEsQixJKXtpZihkQS5pc0Nsb3NlZChBKSl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FQkFERik7aWYoIUEuc2Vla2FibGV8fCFBLnN0cmVhbV9vcHMubGxzZWVrKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVTUElQRSk7cmV0dXJuIEEucG9zaXRpb249QS5zdHJlYW1fb3BzLmxsc2VlayhBLEIsSSksQS51bmdvdHRlbj1bXSxBLnBvc2l0aW9ufSxyZWFkOmZ1bmN0aW9uKEEsQixJLGcsUSl7aWYoZzwwfHxRPDApdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRUlOVkFMKTtpZihkQS5pc0Nsb3NlZChBKSl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FQkFERik7aWYoMT09KDIwOTcxNTUmQS5mbGFncykpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRUJBREYpO2lmKGRBLmlzRGlyKEEubm9kZS5tb2RlKSl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FSVNESVIpO2lmKCFBLnN0cmVhbV9vcHMucmVhZCl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FSU5WQUwpO3ZhciBFPXZvaWQgMCE9PVE7aWYoRSl7aWYoIUEuc2Vla2FibGUpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRVNQSVBFKX1lbHNlIFE9QS5wb3NpdGlvbjt2YXIgQz1BLnN0cmVhbV9vcHMucmVhZChBLEIsSSxnLFEpO3JldHVybiBFfHwoQS5wb3NpdGlvbis9QyksQ30sd3JpdGU6ZnVuY3Rpb24oQSxCLEksZyxRLEUpe2lmKGc8MHx8UTwwKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVJTlZBTCk7aWYoZEEuaXNDbG9zZWQoQSkpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRUJBREYpO2lmKDA9PSgyMDk3MTU1JkEuZmxhZ3MpKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVCQURGKTtpZihkQS5pc0RpcihBLm5vZGUubW9kZSkpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRUlTRElSKTtpZighQS5zdHJlYW1fb3BzLndyaXRlKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVJTlZBTCk7MTAyNCZBLmZsYWdzJiZkQS5sbHNlZWsoQSwwLDIpO3ZhciBDPXZvaWQgMCE9PVE7aWYoQyl7aWYoIUEuc2Vla2FibGUpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRVNQSVBFKX1lbHNlIFE9QS5wb3NpdGlvbjt2YXIgaT1BLnN0cmVhbV9vcHMud3JpdGUoQSxCLEksZyxRLEUpO0N8fChBLnBvc2l0aW9uKz1pKTt0cnl7QS5wYXRoJiZkQS50cmFja2luZ0RlbGVnYXRlLm9uV3JpdGVUb0ZpbGUmJmRBLnRyYWNraW5nRGVsZWdhdGUub25Xcml0ZVRvRmlsZShBLnBhdGgpfWNhdGNoKEEpe2NvbnNvbGUubG9nKCJGUy50cmFja2luZ0RlbGVnYXRlWydvbldyaXRlVG9GaWxlJ10oJyIrcGF0aCsiJykgdGhyZXcgYW4gZXhjZXB0aW9uOiAiK0EubWVzc2FnZSl9cmV0dXJuIGl9LGFsbG9jYXRlOmZ1bmN0aW9uKEEsQixJKXtpZihkQS5pc0Nsb3NlZChBKSl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FQkFERik7aWYoQjwwfHxJPD0wKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVJTlZBTCk7aWYoMD09KDIwOTcxNTUmQS5mbGFncykpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRUJBREYpO2lmKCFkQS5pc0ZpbGUoQS5ub2RlLm1vZGUpJiYhZEEuaXNEaXIoQS5ub2RlLm1vZGUpKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVOT0RFVik7aWYoIUEuc3RyZWFtX29wcy5hbGxvY2F0ZSl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FT1BOT1RTVVBQKTtBLnN0cmVhbV9vcHMuYWxsb2NhdGUoQSxCLEkpfSxtbWFwOmZ1bmN0aW9uKEEsQixJLGcsUSxFLEMpe2lmKDE9PSgyMDk3MTU1JkEuZmxhZ3MpKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVBQ0NFUyk7aWYoIUEuc3RyZWFtX29wcy5tbWFwKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVOT0RFVik7cmV0dXJuIEEuc3RyZWFtX29wcy5tbWFwKEEsQixJLGcsUSxFLEMpfSxtc3luYzpmdW5jdGlvbihBLEIsSSxnLFEpe3JldHVybiBBJiZBLnN0cmVhbV9vcHMubXN5bmM/QS5zdHJlYW1fb3BzLm1zeW5jKEEsQixJLGcsUSk6MH0sbXVubWFwOmZ1bmN0aW9uKEEpe3JldHVybiAwfSxpb2N0bDpmdW5jdGlvbihBLEIsSSl7aWYoIUEuc3RyZWFtX29wcy5pb2N0bCl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FTk9UVFkpO3JldHVybiBBLnN0cmVhbV9vcHMuaW9jdGwoQSxCLEkpfSxyZWFkRmlsZTpmdW5jdGlvbihBLEIpe2lmKChCPUJ8fHt9KS5mbGFncz1CLmZsYWdzfHwiciIsQi5lbmNvZGluZz1CLmVuY29kaW5nfHwiYmluYXJ5IiwidXRmOCIhPT1CLmVuY29kaW5nJiYiYmluYXJ5IiE9PUIuZW5jb2RpbmcpdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGVuY29kaW5nIHR5cGUgIicrQi5lbmNvZGluZysnIicpO3ZhciBJLGc9ZEEub3BlbihBLEIuZmxhZ3MpLFE9ZEEuc3RhdChBKS5zaXplLEU9bmV3IFVpbnQ4QXJyYXkoUSk7cmV0dXJuIGRBLnJlYWQoZyxFLDAsUSwwKSwidXRmOCI9PT1CLmVuY29kaW5nP0k9VShFLDApOiJiaW5hcnkiPT09Qi5lbmNvZGluZyYmKEk9RSksZEEuY2xvc2UoZyksSX0sd3JpdGVGaWxlOmZ1bmN0aW9uKEEsQixJKXsoST1JfHx7fSkuZmxhZ3M9SS5mbGFnc3x8InciO3ZhciBnPWRBLm9wZW4oQSxJLmZsYWdzLEkubW9kZSk7aWYoInN0cmluZyI9PXR5cGVvZiBCKXt2YXIgUT1uZXcgVWludDhBcnJheShmKEIpKzEpLEU9UyhCLFEsMCxRLmxlbmd0aCk7ZEEud3JpdGUoZyxRLDAsRSx2b2lkIDAsSS5jYW5Pd24pfWVsc2V7aWYoIUFycmF5QnVmZmVyLmlzVmlldyhCKSl0aHJvdyBuZXcgRXJyb3IoIlVuc3VwcG9ydGVkIGRhdGEgdHlwZSIpO2RBLndyaXRlKGcsQiwwLEIuYnl0ZUxlbmd0aCx2b2lkIDAsSS5jYW5Pd24pfWRBLmNsb3NlKGcpfSxjd2Q6ZnVuY3Rpb24oKXtyZXR1cm4gZEEuY3VycmVudFBhdGh9LGNoZGlyOmZ1bmN0aW9uKEEpe3ZhciBCPWRBLmxvb2t1cFBhdGgoQSx7Zm9sbG93OiEwfSk7aWYobnVsbD09PUIubm9kZSl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihoQS5FTk9FTlQpO2lmKCFkQS5pc0RpcihCLm5vZGUubW9kZSkpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRU5PVERJUik7dmFyIEk9ZEEubm9kZVBlcm1pc3Npb25zKEIubm9kZSwieCIpO2lmKEkpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoSSk7ZEEuY3VycmVudFBhdGg9Qi5wYXRofSxjcmVhdGVEZWZhdWx0RGlyZWN0b3JpZXM6ZnVuY3Rpb24oKXtkQS5ta2RpcigiL3RtcCIpLGRBLm1rZGlyKCIvaG9tZSIpLGRBLm1rZGlyKCIvaG9tZS93ZWJfdXNlciIpfSxjcmVhdGVEZWZhdWx0RGV2aWNlczpmdW5jdGlvbigpe3ZhciBBO2lmKGRBLm1rZGlyKCIvZGV2IiksZEEucmVnaXN0ZXJEZXZpY2UoZEEubWFrZWRldigxLDMpLHtyZWFkOmZ1bmN0aW9uKCl7cmV0dXJuIDB9LHdyaXRlOmZ1bmN0aW9uKEEsQixJLGcsUSl7cmV0dXJuIGd9fSksZEEubWtkZXYoIi9kZXYvbnVsbCIsZEEubWFrZWRldigxLDMpKSxHQS5yZWdpc3RlcihkQS5tYWtlZGV2KDUsMCksR0EuZGVmYXVsdF90dHlfb3BzKSxHQS5yZWdpc3RlcihkQS5tYWtlZGV2KDYsMCksR0EuZGVmYXVsdF90dHkxX29wcyksZEEubWtkZXYoIi9kZXYvdHR5IixkQS5tYWtlZGV2KDUsMCkpLGRBLm1rZGV2KCIvZGV2L3R0eTEiLGRBLm1ha2VkZXYoNiwwKSksInVuZGVmaW5lZCIhPXR5cGVvZiBjcnlwdG8pe3ZhciBCPW5ldyBVaW50OEFycmF5KDEpO0E9ZnVuY3Rpb24oKXtyZXR1cm4gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhCKSxCWzBdfX1lbHNlIEE9cj9mdW5jdGlvbigpe3JldHVybiByZXF1aXJlKCJjcnlwdG8iKS5yYW5kb21CeXRlcygxKVswXX06ZnVuY3Rpb24oKXtyZXR1cm4gMjU2Kk1hdGgucmFuZG9tKCl8MH07ZEEuY3JlYXRlRGV2aWNlKCIvZGV2IiwicmFuZG9tIixBKSxkQS5jcmVhdGVEZXZpY2UoIi9kZXYiLCJ1cmFuZG9tIixBKSxkQS5ta2RpcigiL2Rldi9zaG0iKSxkQS5ta2RpcigiL2Rldi9zaG0vdG1wIil9LGNyZWF0ZVNwZWNpYWxEaXJlY3RvcmllczpmdW5jdGlvbigpe2RBLm1rZGlyKCIvcHJvYyIpLGRBLm1rZGlyKCIvcHJvYy9zZWxmIiksZEEubWtkaXIoIi9wcm9jL3NlbGYvZmQiKSxkQS5tb3VudCh7bW91bnQ6ZnVuY3Rpb24oKXt2YXIgQT1kQS5jcmVhdGVOb2RlKCIvcHJvYy9zZWxmIiwiZmQiLDE2ODk1LDczKTtyZXR1cm4gQS5ub2RlX29wcz17bG9va3VwOmZ1bmN0aW9uKEEsQil7dmFyIEk9K0IsZz1kQS5nZXRTdHJlYW0oSSk7aWYoIWcpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRUJBREYpO3ZhciBRPXtwYXJlbnQ6bnVsbCxtb3VudDp7bW91bnRwb2ludDoiZmFrZSJ9LG5vZGVfb3BzOntyZWFkbGluazpmdW5jdGlvbigpe3JldHVybiBnLnBhdGh9fX07cmV0dXJuIFEucGFyZW50PVEsUX19LEF9fSx7fSwiL3Byb2Mvc2VsZi9mZCIpfSxjcmVhdGVTdGFuZGFyZFN0cmVhbXM6ZnVuY3Rpb24oKXtFLnN0ZGluP2RBLmNyZWF0ZURldmljZSgiL2RldiIsInN0ZGluIixFLnN0ZGluKTpkQS5zeW1saW5rKCIvZGV2L3R0eSIsIi9kZXYvc3RkaW4iKSxFLnN0ZG91dD9kQS5jcmVhdGVEZXZpY2UoIi9kZXYiLCJzdGRvdXQiLG51bGwsRS5zdGRvdXQpOmRBLnN5bWxpbmsoIi9kZXYvdHR5IiwiL2Rldi9zdGRvdXQiKSxFLnN0ZGVycj9kQS5jcmVhdGVEZXZpY2UoIi9kZXYiLCJzdGRlcnIiLG51bGwsRS5zdGRlcnIpOmRBLnN5bWxpbmsoIi9kZXYvdHR5MSIsIi9kZXYvc3RkZXJyIik7dmFyIEE9ZEEub3BlbigiL2Rldi9zdGRpbiIsInIiKTt3KDA9PT1BLmZkLCJpbnZhbGlkIGhhbmRsZSBmb3Igc3RkaW4gKCIrQS5mZCsiKSIpO3ZhciBCPWRBLm9wZW4oIi9kZXYvc3Rkb3V0IiwidyIpO3coMT09PUIuZmQsImludmFsaWQgaGFuZGxlIGZvciBzdGRvdXQgKCIrQi5mZCsiKSIpO3ZhciBJPWRBLm9wZW4oIi9kZXYvc3RkZXJyIiwidyIpO3coMj09PUkuZmQsImludmFsaWQgaGFuZGxlIGZvciBzdGRlcnIgKCIrSS5mZCsiKSIpfSxlbnN1cmVFcnJub0Vycm9yOmZ1bmN0aW9uKCl7ZEEuRXJybm9FcnJvcnx8KGRBLkVycm5vRXJyb3I9ZnVuY3Rpb24oQSxCKXt0aGlzLm5vZGU9Qix0aGlzLnNldEVycm5vPWZ1bmN0aW9uKEEpe2Zvcih2YXIgQiBpbiB0aGlzLmVycm5vPUEsaEEpaWYoaEFbQl09PT1BKXt0aGlzLmNvZGU9QjticmVha319LHRoaXMuc2V0RXJybm8oQSksdGhpcy5tZXNzYWdlPVJBW0FdLHRoaXMuc3RhY2smJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCJzdGFjayIse3ZhbHVlOihuZXcgRXJyb3IpLnN0YWNrLHdyaXRhYmxlOiEwfSl9LGRBLkVycm5vRXJyb3IucHJvdG90eXBlPW5ldyBFcnJvcixkQS5FcnJub0Vycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1kQS5FcnJub0Vycm9yLFtoQS5FTk9FTlRdLmZvckVhY2goKGZ1bmN0aW9uKEEpe2RBLmdlbmVyaWNFcnJvcnNbQV09bmV3IGRBLkVycm5vRXJyb3IoQSksZEEuZ2VuZXJpY0Vycm9yc1tBXS5zdGFjaz0iPGdlbmVyaWMgZXJyb3IsIG5vIHN0YWNrPiJ9KSkpfSxzdGF0aWNJbml0OmZ1bmN0aW9uKCl7ZEEuZW5zdXJlRXJybm9FcnJvcigpLGRBLm5hbWVUYWJsZT1uZXcgQXJyYXkoNDA5NiksZEEubW91bnQoU0Ese30sIi8iKSxkQS5jcmVhdGVEZWZhdWx0RGlyZWN0b3JpZXMoKSxkQS5jcmVhdGVEZWZhdWx0RGV2aWNlcygpLGRBLmNyZWF0ZVNwZWNpYWxEaXJlY3RvcmllcygpLGRBLmZpbGVzeXN0ZW1zPXtNRU1GUzpTQSxJREJGUzprQSxOT0RFRlM6ZkEsV09SS0VSRlM6TkF9fSxpbml0OmZ1bmN0aW9uKEEsQixJKXt3KCFkQS5pbml0LmluaXRpYWxpemVkLCJGUy5pbml0IHdhcyBwcmV2aW91c2x5IGNhbGxlZC4gSWYgeW91IHdhbnQgdG8gaW5pdGlhbGl6ZSBsYXRlciB3aXRoIGN1c3RvbSBwYXJhbWV0ZXJzLCByZW1vdmUgYW55IGVhcmxpZXIgY2FsbHMgKG5vdGUgdGhhdCBvbmUgaXMgYXV0b21hdGljYWxseSBhZGRlZCB0byB0aGUgZ2VuZXJhdGVkIGNvZGUpIiksZEEuaW5pdC5pbml0aWFsaXplZD0hMCxkQS5lbnN1cmVFcnJub0Vycm9yKCksRS5zdGRpbj1BfHxFLnN0ZGluLEUuc3Rkb3V0PUJ8fEUuc3Rkb3V0LEUuc3RkZXJyPUl8fEUuc3RkZXJyLGRBLmNyZWF0ZVN0YW5kYXJkU3RyZWFtcygpfSxxdWl0OmZ1bmN0aW9uKCl7ZEEuaW5pdC5pbml0aWFsaXplZD0hMTt2YXIgQT1FLl9mZmx1c2g7QSYmQSgwKTtmb3IodmFyIEI9MDtCPGRBLnN0cmVhbXMubGVuZ3RoO0IrKyl7dmFyIEk9ZEEuc3RyZWFtc1tCXTtJJiZkQS5jbG9zZShJKX19LGdldE1vZGU6ZnVuY3Rpb24oQSxCKXt2YXIgST0wO3JldHVybiBBJiYoSXw9MzY1KSxCJiYoSXw9MTQ2KSxJfSxqb2luUGF0aDpmdW5jdGlvbihBLEIpe3ZhciBJPVVBLmpvaW4uYXBwbHkobnVsbCxBKTtyZXR1cm4gQiYmIi8iPT1JWzBdJiYoST1JLnN1YnN0cigxKSksSX0sYWJzb2x1dGVQYXRoOmZ1bmN0aW9uKEEsQil7cmV0dXJuIFVBLnJlc29sdmUoQixBKX0sc3RhbmRhcmRpemVQYXRoOmZ1bmN0aW9uKEEpe3JldHVybiBVQS5ub3JtYWxpemUoQSl9LGZpbmRPYmplY3Q6ZnVuY3Rpb24oQSxCKXt2YXIgST1kQS5hbmFseXplUGF0aChBLEIpO3JldHVybiBJLmV4aXN0cz9JLm9iamVjdDooeUEoSS5lcnJvciksbnVsbCl9LGFuYWx5emVQYXRoOmZ1bmN0aW9uKEEsQil7dHJ5e0E9KGc9ZEEubG9va3VwUGF0aChBLHtmb2xsb3c6IUJ9KSkucGF0aH1jYXRjaChBKXt9dmFyIEk9e2lzUm9vdDohMSxleGlzdHM6ITEsZXJyb3I6MCxuYW1lOm51bGwscGF0aDpudWxsLG9iamVjdDpudWxsLHBhcmVudEV4aXN0czohMSxwYXJlbnRQYXRoOm51bGwscGFyZW50T2JqZWN0Om51bGx9O3RyeXt2YXIgZz1kQS5sb29rdXBQYXRoKEEse3BhcmVudDohMH0pO0kucGFyZW50RXhpc3RzPSEwLEkucGFyZW50UGF0aD1nLnBhdGgsSS5wYXJlbnRPYmplY3Q9Zy5ub2RlLEkubmFtZT1VQS5iYXNlbmFtZShBKSxnPWRBLmxvb2t1cFBhdGgoQSx7Zm9sbG93OiFCfSksSS5leGlzdHM9ITAsSS5wYXRoPWcucGF0aCxJLm9iamVjdD1nLm5vZGUsSS5uYW1lPWcubm9kZS5uYW1lLEkuaXNSb290PSIvIj09PWcucGF0aH1jYXRjaChBKXtJLmVycm9yPUEuZXJybm99cmV0dXJuIEl9LGNyZWF0ZUZvbGRlcjpmdW5jdGlvbihBLEIsSSxnKXt2YXIgUT1VQS5qb2luMigic3RyaW5nIj09dHlwZW9mIEE/QTpkQS5nZXRQYXRoKEEpLEIpLEU9ZEEuZ2V0TW9kZShJLGcpO3JldHVybiBkQS5ta2RpcihRLEUpfSxjcmVhdGVQYXRoOmZ1bmN0aW9uKEEsQixJLGcpe0E9InN0cmluZyI9PXR5cGVvZiBBP0E6ZEEuZ2V0UGF0aChBKTtmb3IodmFyIFE9Qi5zcGxpdCgiLyIpLnJldmVyc2UoKTtRLmxlbmd0aDspe3ZhciBFPVEucG9wKCk7aWYoRSl7dmFyIEM9VUEuam9pbjIoQSxFKTt0cnl7ZEEubWtkaXIoQyl9Y2F0Y2goQSl7fUE9Q319cmV0dXJuIEN9LGNyZWF0ZUZpbGU6ZnVuY3Rpb24oQSxCLEksZyxRKXt2YXIgRT1VQS5qb2luMigic3RyaW5nIj09dHlwZW9mIEE/QTpkQS5nZXRQYXRoKEEpLEIpLEM9ZEEuZ2V0TW9kZShnLFEpO3JldHVybiBkQS5jcmVhdGUoRSxDKX0sY3JlYXRlRGF0YUZpbGU6ZnVuY3Rpb24oQSxCLEksZyxRLEUpe3ZhciBDPUI/VUEuam9pbjIoInN0cmluZyI9PXR5cGVvZiBBP0E6ZEEuZ2V0UGF0aChBKSxCKTpBLGk9ZEEuZ2V0TW9kZShnLFEpLG89ZEEuY3JlYXRlKEMsaSk7aWYoSSl7aWYoInN0cmluZyI9PXR5cGVvZiBJKXtmb3IodmFyIHQ9bmV3IEFycmF5KEkubGVuZ3RoKSxlPTAscj1JLmxlbmd0aDtlPHI7KytlKXRbZV09SS5jaGFyQ29kZUF0KGUpO0k9dH1kQS5jaG1vZChvLDE0NnxpKTt2YXIgYT1kQS5vcGVuKG8sInciKTtkQS53cml0ZShhLEksMCxJLmxlbmd0aCwwLEUpLGRBLmNsb3NlKGEpLGRBLmNobW9kKG8saSl9cmV0dXJuIG99LGNyZWF0ZURldmljZTpmdW5jdGlvbihBLEIsSSxnKXt2YXIgUT1VQS5qb2luMigic3RyaW5nIj09dHlwZW9mIEE/QTpkQS5nZXRQYXRoKEEpLEIpLEU9ZEEuZ2V0TW9kZSghIUksISFnKTtkQS5jcmVhdGVEZXZpY2UubWFqb3J8fChkQS5jcmVhdGVEZXZpY2UubWFqb3I9NjQpO3ZhciBDPWRBLm1ha2VkZXYoZEEuY3JlYXRlRGV2aWNlLm1ham9yKyssMCk7cmV0dXJuIGRBLnJlZ2lzdGVyRGV2aWNlKEMse29wZW46ZnVuY3Rpb24oQSl7QS5zZWVrYWJsZT0hMX0sY2xvc2U6ZnVuY3Rpb24oQSl7ZyYmZy5idWZmZXImJmcuYnVmZmVyLmxlbmd0aCYmZygxMCl9LHJlYWQ6ZnVuY3Rpb24oQSxCLGcsUSxFKXtmb3IodmFyIEM9MCxpPTA7aTxRO2krKyl7dmFyIG87dHJ5e289SSgpfWNhdGNoKEEpe3Rocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVJTyl9aWYodm9pZCAwPT09byYmMD09PUMpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRUFHQUlOKTtpZihudWxsPT1vKWJyZWFrO0MrKyxCW2craV09b31yZXR1cm4gQyYmKEEubm9kZS50aW1lc3RhbXA9RGF0ZS5ub3coKSksQ30sd3JpdGU6ZnVuY3Rpb24oQSxCLEksUSxFKXtmb3IodmFyIEM9MDtDPFE7QysrKXRyeXtnKEJbSStDXSl9Y2F0Y2goQSl7dGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRUlPKX1yZXR1cm4gUSYmKEEubm9kZS50aW1lc3RhbXA9RGF0ZS5ub3coKSksQ319KSxkQS5ta2RldihRLEUsQyl9LGNyZWF0ZUxpbms6ZnVuY3Rpb24oQSxCLEksZyxRKXt2YXIgRT1VQS5qb2luMigic3RyaW5nIj09dHlwZW9mIEE/QTpkQS5nZXRQYXRoKEEpLEIpO3JldHVybiBkQS5zeW1saW5rKEksRSl9LGZvcmNlTG9hZEZpbGU6ZnVuY3Rpb24oQSl7aWYoQS5pc0RldmljZXx8QS5pc0ZvbGRlcnx8QS5saW5rfHxBLmNvbnRlbnRzKXJldHVybiEwO3ZhciBCPSEwO2lmKCJ1bmRlZmluZWQiIT10eXBlb2YgWE1MSHR0cFJlcXVlc3QpdGhyb3cgbmV3IEVycm9yKCJMYXp5IGxvYWRpbmcgc2hvdWxkIGhhdmUgYmVlbiBwZXJmb3JtZWQgKGNvbnRlbnRzIHNldCkgaW4gY3JlYXRlTGF6eUZpbGUsIGJ1dCBpdCB3YXMgbm90LiBMYXp5IGxvYWRpbmcgb25seSB3b3JrcyBpbiB3ZWIgd29ya2Vycy4gVXNlIC0tZW1iZWQtZmlsZSBvciAtLXByZWxvYWQtZmlsZSBpbiBlbWNjIG9uIHRoZSBtYWluIHRocmVhZC4iKTtpZighRS5yZWFkKXRocm93IG5ldyBFcnJvcigiQ2Fubm90IGxvYWQgd2l0aG91dCByZWFkKCkgb3IgWE1MSHR0cFJlcXVlc3QuIik7dHJ5e0EuY29udGVudHM9VEIoRS5yZWFkKEEudXJsKSwhMCksQS51c2VkQnl0ZXM9QS5jb250ZW50cy5sZW5ndGh9Y2F0Y2goQSl7Qj0hMX1yZXR1cm4gQnx8eUEoaEEuRUlPKSxCfSxjcmVhdGVMYXp5RmlsZTpmdW5jdGlvbihBLEIsSSxnLFEpe2Z1bmN0aW9uIEUoKXt0aGlzLmxlbmd0aEtub3duPSExLHRoaXMuY2h1bmtzPVtdfWlmKEUucHJvdG90eXBlLmdldD1mdW5jdGlvbihBKXtpZighKEE+dGhpcy5sZW5ndGgtMXx8QTwwKSl7dmFyIEI9QSV0aGlzLmNodW5rU2l6ZSxJPUEvdGhpcy5jaHVua1NpemV8MDtyZXR1cm4gdGhpcy5nZXR0ZXIoSSlbQl19fSxFLnByb3RvdHlwZS5zZXREYXRhR2V0dGVyPWZ1bmN0aW9uKEEpe3RoaXMuZ2V0dGVyPUF9LEUucHJvdG90eXBlLmNhY2hlTGVuZ3RoPWZ1bmN0aW9uKCl7dmFyIEE9bmV3IFhNTEh0dHBSZXF1ZXN0O2lmKEEub3BlbigiSEVBRCIsSSwhMSksQS5zZW5kKG51bGwpLCEoQS5zdGF0dXM+PTIwMCYmQS5zdGF0dXM8MzAwfHwzMDQ9PT1BLnN0YXR1cykpdGhyb3cgbmV3IEVycm9yKCJDb3VsZG4ndCBsb2FkICIrSSsiLiBTdGF0dXM6ICIrQS5zdGF0dXMpO3ZhciBCLGc9TnVtYmVyKEEuZ2V0UmVzcG9uc2VIZWFkZXIoIkNvbnRlbnQtbGVuZ3RoIikpLFE9KEI9QS5nZXRSZXNwb25zZUhlYWRlcigiQWNjZXB0LVJhbmdlcyIpKSYmImJ5dGVzIj09PUIsRT0oQj1BLmdldFJlc3BvbnNlSGVhZGVyKCJDb250ZW50LUVuY29kaW5nIikpJiYiZ3ppcCI9PT1CLEM9MTA0ODU3NjtRfHwoQz1nKTt2YXIgaT10aGlzO2kuc2V0RGF0YUdldHRlcigoZnVuY3Rpb24oQSl7dmFyIEI9QSpDLFE9KEErMSkqQy0xO2lmKFE9TWF0aC5taW4oUSxnLTEpLHZvaWQgMD09PWkuY2h1bmtzW0FdJiYoaS5jaHVua3NbQV09ZnVuY3Rpb24oQSxCKXtpZihBPkIpdGhyb3cgbmV3IEVycm9yKCJpbnZhbGlkIHJhbmdlICgiK0ErIiwgIitCKyIpIG9yIG5vIGJ5dGVzIHJlcXVlc3RlZCEiKTtpZihCPmctMSl0aHJvdyBuZXcgRXJyb3IoIm9ubHkgIitnKyIgYnl0ZXMgYXZhaWxhYmxlISBwcm9ncmFtbWVyIGVycm9yISIpO3ZhciBRPW5ldyBYTUxIdHRwUmVxdWVzdDtpZihRLm9wZW4oIkdFVCIsSSwhMSksZyE9PUMmJlEuc2V0UmVxdWVzdEhlYWRlcigiUmFuZ2UiLCJieXRlcz0iK0ErIi0iK0IpLCJ1bmRlZmluZWQiIT10eXBlb2YgVWludDhBcnJheSYmKFEucmVzcG9uc2VUeXBlPSJhcnJheWJ1ZmZlciIpLFEub3ZlcnJpZGVNaW1lVHlwZSYmUS5vdmVycmlkZU1pbWVUeXBlKCJ0ZXh0L3BsYWluOyBjaGFyc2V0PXgtdXNlci1kZWZpbmVkIiksUS5zZW5kKG51bGwpLCEoUS5zdGF0dXM+PTIwMCYmUS5zdGF0dXM8MzAwfHwzMDQ9PT1RLnN0YXR1cykpdGhyb3cgbmV3IEVycm9yKCJDb3VsZG4ndCBsb2FkICIrSSsiLiBTdGF0dXM6ICIrUS5zdGF0dXMpO3JldHVybiB2b2lkIDAhPT1RLnJlc3BvbnNlP25ldyBVaW50OEFycmF5KFEucmVzcG9uc2V8fFtdKTpUQihRLnJlc3BvbnNlVGV4dHx8IiIsITApfShCLFEpKSx2b2lkIDA9PT1pLmNodW5rc1tBXSl0aHJvdyBuZXcgRXJyb3IoImRvWEhSIGZhaWxlZCEiKTtyZXR1cm4gaS5jaHVua3NbQV19KSksIUUmJmd8fChDPWc9MSxnPXRoaXMuZ2V0dGVyKDApLmxlbmd0aCxDPWcsY29uc29sZS5sb2coIkxhenlGaWxlcyBvbiBnemlwIGZvcmNlcyBkb3dubG9hZCBvZiB0aGUgd2hvbGUgZmlsZSB3aGVuIGxlbmd0aCBpcyBhY2Nlc3NlZCIpKSx0aGlzLl9sZW5ndGg9Zyx0aGlzLl9jaHVua1NpemU9Qyx0aGlzLmxlbmd0aEtub3duPSEwfSwidW5kZWZpbmVkIiE9dHlwZW9mIFhNTEh0dHBSZXF1ZXN0KXtpZighZSl0aHJvdyJDYW5ub3QgZG8gc3luY2hyb25vdXMgYmluYXJ5IFhIUnMgb3V0c2lkZSB3ZWJ3b3JrZXJzIGluIG1vZGVybiBicm93c2Vycy4gVXNlIC0tZW1iZWQtZmlsZSBvciAtLXByZWxvYWQtZmlsZSBpbiBlbWNjIjt2YXIgQz1uZXcgRTtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhDLHtsZW5ndGg6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxlbmd0aEtub3dufHx0aGlzLmNhY2hlTGVuZ3RoKCksdGhpcy5fbGVuZ3RofX0sY2h1bmtTaXplOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sZW5ndGhLbm93bnx8dGhpcy5jYWNoZUxlbmd0aCgpLHRoaXMuX2NodW5rU2l6ZX19fSk7dmFyIGk9e2lzRGV2aWNlOiExLGNvbnRlbnRzOkN9fWVsc2UgaT17aXNEZXZpY2U6ITEsdXJsOkl9O3ZhciBvPWRBLmNyZWF0ZUZpbGUoQSxCLGksZyxRKTtpLmNvbnRlbnRzP28uY29udGVudHM9aS5jb250ZW50czppLnVybCYmKG8uY29udGVudHM9bnVsbCxvLnVybD1pLnVybCksT2JqZWN0LmRlZmluZVByb3BlcnRpZXMobyx7dXNlZEJ5dGVzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb250ZW50cy5sZW5ndGh9fX0pO3ZhciB0PXt9O3JldHVybiBPYmplY3Qua2V5cyhvLnN0cmVhbV9vcHMpLmZvckVhY2goKGZ1bmN0aW9uKEEpe3ZhciBCPW8uc3RyZWFtX29wc1tBXTt0W0FdPWZ1bmN0aW9uKCl7aWYoIWRBLmZvcmNlTG9hZEZpbGUobykpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRUlPKTtyZXR1cm4gQi5hcHBseShudWxsLGFyZ3VtZW50cyl9fSkpLHQucmVhZD1mdW5jdGlvbihBLEIsSSxnLFEpe2lmKCFkQS5mb3JjZUxvYWRGaWxlKG8pKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVJTyk7dmFyIEU9QS5ub2RlLmNvbnRlbnRzO2lmKFE+PUUubGVuZ3RoKXJldHVybiAwO3ZhciBDPU1hdGgubWluKEUubGVuZ3RoLVEsZyk7aWYodyhDPj0wKSxFLnNsaWNlKWZvcih2YXIgaT0wO2k8QztpKyspQltJK2ldPUVbUStpXTtlbHNlIGZvcihpPTA7aTxDO2krKylCW0kraV09RS5nZXQoUStpKTtyZXR1cm4gQ30sby5zdHJlYW1fb3BzPXQsb30sY3JlYXRlUHJlbG9hZGVkRmlsZTpmdW5jdGlvbihBLEIsSSxnLFEsQyxpLG8sdCxlKXtCcm93c2VyLmluaXQoKTt2YXIgcj1CP1VBLnJlc29sdmUoVUEuam9pbjIoQSxCKSk6QTtmdW5jdGlvbiBhKEkpe2Z1bmN0aW9uIGEoSSl7ZSYmZSgpLG98fGRBLmNyZWF0ZURhdGFGaWxlKEEsQixJLGcsUSx0KSxDJiZDKCksbkEoKX12YXIgbj0hMTtFLnByZWxvYWRQbHVnaW5zLmZvckVhY2goKGZ1bmN0aW9uKEEpe258fEEuY2FuSGFuZGxlKHIpJiYoQS5oYW5kbGUoSSxyLGEsKGZ1bmN0aW9uKCl7aSYmaSgpLG5BKCl9KSksbj0hMCl9KSksbnx8YShJKX1hQSgpLCJzdHJpbmciPT10eXBlb2YgST9Ccm93c2VyLmFzeW5jTG9hZChJLChmdW5jdGlvbihBKXthKEEpfSksaSk6YShJKX0saW5kZXhlZERCOmZ1bmN0aW9uKCl7cmV0dXJuIHdpbmRvdy5pbmRleGVkREJ8fHdpbmRvdy5tb3pJbmRleGVkREJ8fHdpbmRvdy53ZWJraXRJbmRleGVkREJ8fHdpbmRvdy5tc0luZGV4ZWREQn0sREJfTkFNRTpmdW5jdGlvbigpe3JldHVybiJFTV9GU18iK3dpbmRvdy5sb2NhdGlvbi5wYXRobmFtZX0sREJfVkVSU0lPTjoyMCxEQl9TVE9SRV9OQU1FOiJGSUxFX0RBVEEiLHNhdmVGaWxlc1RvREI6ZnVuY3Rpb24oQSxCLEkpe0I9Qnx8ZnVuY3Rpb24oKXt9LEk9SXx8ZnVuY3Rpb24oKXt9O3ZhciBnPWRBLmluZGV4ZWREQigpO3RyeXt2YXIgUT1nLm9wZW4oZEEuREJfTkFNRSgpLGRBLkRCX1ZFUlNJT04pfWNhdGNoKEEpe3JldHVybiBJKEEpfVEub251cGdyYWRlbmVlZGVkPWZ1bmN0aW9uKCl7Y29uc29sZS5sb2coImNyZWF0aW5nIGRiIiksUS5yZXN1bHQuY3JlYXRlT2JqZWN0U3RvcmUoZEEuREJfU1RPUkVfTkFNRSl9LFEub25zdWNjZXNzPWZ1bmN0aW9uKCl7dmFyIGc9US5yZXN1bHQudHJhbnNhY3Rpb24oW2RBLkRCX1NUT1JFX05BTUVdLCJyZWFkd3JpdGUiKSxFPWcub2JqZWN0U3RvcmUoZEEuREJfU1RPUkVfTkFNRSksQz0wLGk9MCxvPUEubGVuZ3RoO2Z1bmN0aW9uIHQoKXswPT1pP0IoKTpJKCl9QS5mb3JFYWNoKChmdW5jdGlvbihBKXt2YXIgQj1FLnB1dChkQS5hbmFseXplUGF0aChBKS5vYmplY3QuY29udGVudHMsQSk7Qi5vbnN1Y2Nlc3M9ZnVuY3Rpb24oKXsrK0MraT09byYmdCgpfSxCLm9uZXJyb3I9ZnVuY3Rpb24oKXtpKyssQytpPT1vJiZ0KCl9fSkpLGcub25lcnJvcj1JfSxRLm9uZXJyb3I9SX0sbG9hZEZpbGVzRnJvbURCOmZ1bmN0aW9uKEEsQixJKXtCPUJ8fGZ1bmN0aW9uKCl7fSxJPUl8fGZ1bmN0aW9uKCl7fTt2YXIgZz1kQS5pbmRleGVkREIoKTt0cnl7dmFyIFE9Zy5vcGVuKGRBLkRCX05BTUUoKSxkQS5EQl9WRVJTSU9OKX1jYXRjaChBKXtyZXR1cm4gSShBKX1RLm9udXBncmFkZW5lZWRlZD1JLFEub25zdWNjZXNzPWZ1bmN0aW9uKCl7dmFyIGc9US5yZXN1bHQ7dHJ5e3ZhciBFPWcudHJhbnNhY3Rpb24oW2RBLkRCX1NUT1JFX05BTUVdLCJyZWFkb25seSIpfWNhdGNoKEEpe3JldHVybiB2b2lkIEkoQSl9dmFyIEM9RS5vYmplY3RTdG9yZShkQS5EQl9TVE9SRV9OQU1FKSxpPTAsbz0wLHQ9QS5sZW5ndGg7ZnVuY3Rpb24gZSgpezA9PW8/QigpOkkoKX1BLmZvckVhY2goKGZ1bmN0aW9uKEEpe3ZhciBCPUMuZ2V0KEEpO0Iub25zdWNjZXNzPWZ1bmN0aW9uKCl7ZEEuYW5hbHl6ZVBhdGgoQSkuZXhpc3RzJiZkQS51bmxpbmsoQSksZEEuY3JlYXRlRGF0YUZpbGUoVUEuZGlybmFtZShBKSxVQS5iYXNlbmFtZShBKSxCLnJlc3VsdCwhMCwhMCwhMCksKytpK289PXQmJmUoKX0sQi5vbmVycm9yPWZ1bmN0aW9uKCl7bysrLGkrbz09dCYmZSgpfX0pKSxFLm9uZXJyb3I9SX0sUS5vbmVycm9yPUl9fSxNQT17REVGQVVMVF9QT0xMTUFTSzo1LG1hcHBpbmdzOnt9LHVtYXNrOjUxMSxjYWxjdWxhdGVBdDpmdW5jdGlvbihBLEIpe2lmKCIvIiE9PUJbMF0pe3ZhciBJO2lmKC0xMDA9PT1BKUk9ZEEuY3dkKCk7ZWxzZXt2YXIgZz1kQS5nZXRTdHJlYW0oQSk7aWYoIWcpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRUJBREYpO0k9Zy5wYXRofUI9VUEuam9pbjIoSSxCKX1yZXR1cm4gQn0sZG9TdGF0OmZ1bmN0aW9uKEEsQixJKXt0cnl7dmFyIGc9QShCKX1jYXRjaChBKXtpZihBJiZBLm5vZGUmJlVBLm5vcm1hbGl6ZShCKSE9PVVBLm5vcm1hbGl6ZShkQS5nZXRQYXRoKEEubm9kZSkpKXJldHVybi1oQS5FTk9URElSO3Rocm93IEF9cmV0dXJuIEhbST4+Ml09Zy5kZXYsSFtJKzQ+PjJdPTAsSFtJKzg+PjJdPWcuaW5vLEhbSSsxMj4+Ml09Zy5tb2RlLEhbSSsxNj4+Ml09Zy5ubGluayxIW0krMjA+PjJdPWcudWlkLEhbSSsyND4+Ml09Zy5naWQsSFtJKzI4Pj4yXT1nLnJkZXYsSFtJKzMyPj4yXT0wLEhbSSszNj4+Ml09Zy5zaXplLEhbSSs0MD4+Ml09NDA5NixIW0krNDQ+PjJdPWcuYmxvY2tzLEhbSSs0OD4+Ml09Zy5hdGltZS5nZXRUaW1lKCkvMWUzfDAsSFtJKzUyPj4yXT0wLEhbSSs1Nj4+Ml09Zy5tdGltZS5nZXRUaW1lKCkvMWUzfDAsSFtJKzYwPj4yXT0wLEhbSSs2ND4+Ml09Zy5jdGltZS5nZXRUaW1lKCkvMWUzfDAsSFtJKzY4Pj4yXT0wLEhbSSs3Mj4+Ml09Zy5pbm8sMH0sZG9Nc3luYzpmdW5jdGlvbihBLEIsSSxnKXt2YXIgUT1uZXcgVWludDhBcnJheShMLnN1YmFycmF5KEEsQStJKSk7ZEEubXN5bmMoQixRLDAsSSxnKX0sZG9Na2RpcjpmdW5jdGlvbihBLEIpe3JldHVybiIvIj09PShBPVVBLm5vcm1hbGl6ZShBKSlbQS5sZW5ndGgtMV0mJihBPUEuc3Vic3RyKDAsQS5sZW5ndGgtMSkpLGRBLm1rZGlyKEEsQiwwKSwwfSxkb01rbm9kOmZ1bmN0aW9uKEEsQixJKXtzd2l0Y2goNjE0NDAmQil7Y2FzZSAzMjc2ODpjYXNlIDgxOTI6Y2FzZSAyNDU3NjpjYXNlIDQwOTY6Y2FzZSA0OTE1MjpicmVhaztkZWZhdWx0OnJldHVybi1oQS5FSU5WQUx9cmV0dXJuIGRBLm1rbm9kKEEsQixJKSwwfSxkb1JlYWRsaW5rOmZ1bmN0aW9uKEEsQixJKXtpZihJPD0wKXJldHVybi1oQS5FSU5WQUw7dmFyIGc9ZEEucmVhZGxpbmsoQSksUT1NYXRoLm1pbihJLGYoZykpLEU9dVtCK1FdO3JldHVybiBrKGcsQixJKzEpLHVbQitRXT1FLFF9LGRvQWNjZXNzOmZ1bmN0aW9uKEEsQil7aWYoLTgmQilyZXR1cm4taEEuRUlOVkFMO3ZhciBJO0k9ZEEubG9va3VwUGF0aChBLHtmb2xsb3c6ITB9KS5ub2RlO3ZhciBnPSIiO3JldHVybiA0JkImJihnKz0iciIpLDImQiYmKGcrPSJ3IiksMSZCJiYoZys9IngiKSxnJiZkQS5ub2RlUGVybWlzc2lvbnMoSSxnKT8taEEuRUFDQ0VTOjB9LGRvRHVwOmZ1bmN0aW9uKEEsQixJKXt2YXIgZz1kQS5nZXRTdHJlYW0oSSk7cmV0dXJuIGcmJmRBLmNsb3NlKGcpLGRBLm9wZW4oQSxCLDAsSSxJKS5mZH0sZG9SZWFkdjpmdW5jdGlvbihBLEIsSSxnKXtmb3IodmFyIFE9MCxFPTA7RTxJO0UrKyl7dmFyIEM9SFtCKzgqRT4+Ml0saT1IW0IrKDgqRSs0KT4+Ml0sbz1kQS5yZWFkKEEsdSxDLGksZyk7aWYobzwwKXJldHVybi0xO2lmKFErPW8sbzxpKWJyZWFrfXJldHVybiBRfSxkb1dyaXRldjpmdW5jdGlvbihBLEIsSSxnKXtmb3IodmFyIFE9MCxFPTA7RTxJO0UrKyl7dmFyIEM9SFtCKzgqRT4+Ml0saT1IW0IrKDgqRSs0KT4+Ml0sbz1kQS53cml0ZShBLHUsQyxpLGcpO2lmKG88MClyZXR1cm4tMTtRKz1vfXJldHVybiBRfSx2YXJhcmdzOjAsZ2V0OmZ1bmN0aW9uKEEpe3JldHVybiBNQS52YXJhcmdzKz00LEhbTUEudmFyYXJncy00Pj4yXX0sZ2V0U3RyOmZ1bmN0aW9uKCl7cmV0dXJuIHkoTUEuZ2V0KCkpfSxnZXRTdHJlYW1Gcm9tRkQ6ZnVuY3Rpb24oKXt2YXIgQT1kQS5nZXRTdHJlYW0oTUEuZ2V0KCkpO2lmKCFBKXRocm93IG5ldyBkQS5FcnJub0Vycm9yKGhBLkVCQURGKTtyZXR1cm4gQX0sZ2V0U29ja2V0RnJvbUZEOmZ1bmN0aW9uKCl7dmFyIEE9U09DS0ZTLmdldFNvY2tldChNQS5nZXQoKSk7aWYoIUEpdGhyb3cgbmV3IGRBLkVycm5vRXJyb3IoaEEuRUJBREYpO3JldHVybiBBfSxnZXRTb2NrZXRBZGRyZXNzOmZ1bmN0aW9uKEEpe3ZhciBCPU1BLmdldCgpLEk9TUEuZ2V0KCk7aWYoQSYmMD09PUIpcmV0dXJuIG51bGw7dmFyIGc9X19yZWFkX3NvY2thZGRyKEIsSSk7aWYoZy5lcnJubyl0aHJvdyBuZXcgZEEuRXJybm9FcnJvcihnLmVycm5vKTtyZXR1cm4gZy5hZGRyPUROUy5sb29rdXBfYWRkcihnLmFkZHIpfHxnLmFkZHIsZ30sZ2V0NjQ6ZnVuY3Rpb24oKXt2YXIgQT1NQS5nZXQoKSxCPU1BLmdldCgpO3JldHVybiB3KEE+PTA/MD09PUI6LTE9PT1CKSxBfSxnZXRaZXJvOmZ1bmN0aW9uKCl7dygwPT09TUEuZ2V0KCkpfX07dmFyIHVBPTQyO3ZhciBMQT17fTtmdW5jdGlvbiBKQShBKXtmb3IoO0EubGVuZ3RoOyl7dmFyIEI9QS5wb3AoKTtBLnBvcCgpKEIpfX1mdW5jdGlvbiBsQShBKXtyZXR1cm4gdGhpcy5mcm9tV2lyZVR5cGUoWVtBPj4yXSl9dmFyIEhBPXt9LFlBPXt9LHFBPXt9O2Z1bmN0aW9uIHBBKEEpe2lmKHZvaWQgMD09PUEpcmV0dXJuIl91bmtub3duIjt2YXIgQj0oQT1BLnJlcGxhY2UoL1teYS16QS1aMC05X10vZywiJCIpKS5jaGFyQ29kZUF0KDApO3JldHVybiBCPj00OCYmQjw9NTc/Il8iK0E6QX1mdW5jdGlvbiBLQShBLEIpe3JldHVybiBBPXBBKEEpLG5ldyBGdW5jdGlvbigiYm9keSIsInJldHVybiBmdW5jdGlvbiAiK0ErJygpIHtcbiAgICAidXNlIHN0cmljdCI7ICAgIHJldHVybiBib2R5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuJykoQil9ZnVuY3Rpb24gbUEoQSxCKXt2YXIgST1LQShCLChmdW5jdGlvbihBKXt0aGlzLm5hbWU9Qix0aGlzLm1lc3NhZ2U9QTt2YXIgST1uZXcgRXJyb3IoQSkuc3RhY2s7dm9pZCAwIT09SSYmKHRoaXMuc3RhY2s9dGhpcy50b1N0cmluZygpKyJcbiIrSS5yZXBsYWNlKC9eRXJyb3IoOlteXG5dKik/XG4vLCIiKSl9KSk7cmV0dXJuIEkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoQS5wcm90b3R5cGUpLEkucHJvdG90eXBlLmNvbnN0cnVjdG9yPUksSS5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09dGhpcy5tZXNzYWdlP3RoaXMubmFtZTp0aGlzLm5hbWUrIjogIit0aGlzLm1lc3NhZ2V9LEl9dmFyIHhBPXZvaWQgMDtmdW5jdGlvbiB2QShBKXt0aHJvdyBuZXcgeEEoQSl9ZnVuY3Rpb24gV0EoQSxCLEkpe2Z1bmN0aW9uIGcoQil7dmFyIGc9SShCKTtnLmxlbmd0aCE9PUEubGVuZ3RoJiZ2QSgiTWlzbWF0Y2hlZCB0eXBlIGNvbnZlcnRlciBjb3VudCIpO2Zvcih2YXIgUT0wO1E8QS5sZW5ndGg7KytRKWpBKEFbUV0sZ1tRXSl9QS5mb3JFYWNoKChmdW5jdGlvbihBKXtxQVtBXT1CfSkpO3ZhciBRPW5ldyBBcnJheShCLmxlbmd0aCksRT1bXSxDPTA7Qi5mb3JFYWNoKChmdW5jdGlvbihBLEIpe1lBLmhhc093blByb3BlcnR5KEEpP1FbQl09WUFbQV06KEUucHVzaChBKSxIQS5oYXNPd25Qcm9wZXJ0eShBKXx8KEhBW0FdPVtdKSxIQVtBXS5wdXNoKChmdW5jdGlvbigpe1FbQl09WUFbQV0sKytDPT09RS5sZW5ndGgmJmcoUSl9KSkpfSkpLDA9PT1FLmxlbmd0aCYmZyhRKX1mdW5jdGlvbiBiQShBKXtzd2l0Y2goQSl7Y2FzZSAxOnJldHVybiAwO2Nhc2UgMjpyZXR1cm4gMTtjYXNlIDQ6cmV0dXJuIDI7Y2FzZSA4OnJldHVybiAzO2RlZmF1bHQ6dGhyb3cgbmV3IFR5cGVFcnJvcigiVW5rbm93biB0eXBlIHNpemU6ICIrQSl9fXZhciBYQT12b2lkIDA7ZnVuY3Rpb24gVkEoQSl7Zm9yKHZhciBCPSIiLEk9QTtMW0ldOylCKz1YQVtMW0krK11dO3JldHVybiBCfXZhciBPQT12b2lkIDA7ZnVuY3Rpb24gVEEoQSl7dGhyb3cgbmV3IE9BKEEpfWZ1bmN0aW9uIGpBKEEsQixJKXtpZihJPUl8fHt9LCEoImFyZ1BhY2tBZHZhbmNlImluIEIpKXRocm93IG5ldyBUeXBlRXJyb3IoInJlZ2lzdGVyVHlwZSByZWdpc3RlcmVkSW5zdGFuY2UgcmVxdWlyZXMgYXJnUGFja0FkdmFuY2UiKTt2YXIgZz1CLm5hbWU7aWYoQXx8VEEoJ3R5cGUgIicrZysnIiBtdXN0IGhhdmUgYSBwb3NpdGl2ZSBpbnRlZ2VyIHR5cGVpZCBwb2ludGVyJyksWUEuaGFzT3duUHJvcGVydHkoQSkpe2lmKEkuaWdub3JlRHVwbGljYXRlUmVnaXN0cmF0aW9ucylyZXR1cm47VEEoIkNhbm5vdCByZWdpc3RlciB0eXBlICciK2crIicgdHdpY2UiKX1pZihZQVtBXT1CLGRlbGV0ZSBxQVtBXSxIQS5oYXNPd25Qcm9wZXJ0eShBKSl7dmFyIFE9SEFbQV07ZGVsZXRlIEhBW0FdLFEuZm9yRWFjaCgoZnVuY3Rpb24oQSl7QSgpfSkpfX1mdW5jdGlvbiBaQShBKXtpZighKHRoaXMgaW5zdGFuY2VvZiBRQikpcmV0dXJuITE7aWYoIShBIGluc3RhbmNlb2YgUUIpKXJldHVybiExO2Zvcih2YXIgQj10aGlzLiQkLnB0clR5cGUucmVnaXN0ZXJlZENsYXNzLEk9dGhpcy4kJC5wdHIsZz1BLiQkLnB0clR5cGUucmVnaXN0ZXJlZENsYXNzLFE9QS4kJC5wdHI7Qi5iYXNlQ2xhc3M7KUk9Qi51cGNhc3QoSSksQj1CLmJhc2VDbGFzcztmb3IoO2cuYmFzZUNsYXNzOylRPWcudXBjYXN0KFEpLGc9Zy5iYXNlQ2xhc3M7cmV0dXJuIEI9PT1nJiZJPT09UX1mdW5jdGlvbiBQQShBKXtUQShBLiQkLnB0clR5cGUucmVnaXN0ZXJlZENsYXNzLm5hbWUrIiBpbnN0YW5jZSBhbHJlYWR5IGRlbGV0ZWQiKX1mdW5jdGlvbiB6QSgpe2lmKHRoaXMuJCQucHRyfHxQQSh0aGlzKSx0aGlzLiQkLnByZXNlcnZlUG9pbnRlck9uRGVsZXRlKXJldHVybiB0aGlzLiQkLmNvdW50LnZhbHVlKz0xLHRoaXM7dmFyIEEsQj1PYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSx7JCQ6e3ZhbHVlOihBPXRoaXMuJCQse2NvdW50OkEuY291bnQsZGVsZXRlU2NoZWR1bGVkOkEuZGVsZXRlU2NoZWR1bGVkLHByZXNlcnZlUG9pbnRlck9uRGVsZXRlOkEucHJlc2VydmVQb2ludGVyT25EZWxldGUscHRyOkEucHRyLHB0clR5cGU6QS5wdHJUeXBlLHNtYXJ0UHRyOkEuc21hcnRQdHIsc21hcnRQdHJUeXBlOkEuc21hcnRQdHJUeXBlfSl9fSk7cmV0dXJuIEIuJCQuY291bnQudmFsdWUrPTEsQi4kJC5kZWxldGVTY2hlZHVsZWQ9ITEsQn1mdW5jdGlvbiBfQSgpe3ZhciBBO3RoaXMuJCQucHRyfHxQQSh0aGlzKSx0aGlzLiQkLmRlbGV0ZVNjaGVkdWxlZCYmIXRoaXMuJCQucHJlc2VydmVQb2ludGVyT25EZWxldGUmJlRBKCJPYmplY3QgYWxyZWFkeSBzY2hlZHVsZWQgZm9yIGRlbGV0aW9uIiksdGhpcy4kJC5jb3VudC52YWx1ZS09MSwwPT09dGhpcy4kJC5jb3VudC52YWx1ZSYmKChBPXRoaXMuJCQpLnNtYXJ0UHRyP0Euc21hcnRQdHJUeXBlLnJhd0Rlc3RydWN0b3IoQS5zbWFydFB0cik6QS5wdHJUeXBlLnJlZ2lzdGVyZWRDbGFzcy5yYXdEZXN0cnVjdG9yKEEucHRyKSksdGhpcy4kJC5wcmVzZXJ2ZVBvaW50ZXJPbkRlbGV0ZXx8KHRoaXMuJCQuc21hcnRQdHI9dm9pZCAwLHRoaXMuJCQucHRyPXZvaWQgMCl9ZnVuY3Rpb24gJEEoKXtyZXR1cm4hdGhpcy4kJC5wdHJ9dmFyIEFCPXZvaWQgMCxCQj1bXTtmdW5jdGlvbiBJQigpe2Zvcig7QkIubGVuZ3RoOyl7dmFyIEE9QkIucG9wKCk7QS4kJC5kZWxldGVTY2hlZHVsZWQ9ITEsQS5kZWxldGUoKX19ZnVuY3Rpb24gZ0IoKXtyZXR1cm4gdGhpcy4kJC5wdHJ8fFBBKHRoaXMpLHRoaXMuJCQuZGVsZXRlU2NoZWR1bGVkJiYhdGhpcy4kJC5wcmVzZXJ2ZVBvaW50ZXJPbkRlbGV0ZSYmVEEoIk9iamVjdCBhbHJlYWR5IHNjaGVkdWxlZCBmb3IgZGVsZXRpb24iKSxCQi5wdXNoKHRoaXMpLDE9PT1CQi5sZW5ndGgmJkFCJiZBQihJQiksdGhpcy4kJC5kZWxldGVTY2hlZHVsZWQ9ITAsdGhpc31mdW5jdGlvbiBRQigpe312YXIgRUI9e307ZnVuY3Rpb24gQ0IoQSxCLEkpe2lmKHZvaWQgMD09PUFbQl0ub3ZlcmxvYWRUYWJsZSl7dmFyIGc9QVtCXTtBW0JdPWZ1bmN0aW9uKCl7cmV0dXJuIEFbQl0ub3ZlcmxvYWRUYWJsZS5oYXNPd25Qcm9wZXJ0eShhcmd1bWVudHMubGVuZ3RoKXx8VEEoIkZ1bmN0aW9uICciK0krIicgY2FsbGVkIHdpdGggYW4gaW52YWxpZCBudW1iZXIgb2YgYXJndW1lbnRzICgiK2FyZ3VtZW50cy5sZW5ndGgrIikgLSBleHBlY3RzIG9uZSBvZiAoIitBW0JdLm92ZXJsb2FkVGFibGUrIikhIiksQVtCXS5vdmVybG9hZFRhYmxlW2FyZ3VtZW50cy5sZW5ndGhdLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sQVtCXS5vdmVybG9hZFRhYmxlPVtdLEFbQl0ub3ZlcmxvYWRUYWJsZVtnLmFyZ0NvdW50XT1nfX1mdW5jdGlvbiBpQihBLEIsSSxnLFEsRSxDLGkpe3RoaXMubmFtZT1BLHRoaXMuY29uc3RydWN0b3I9Qix0aGlzLmluc3RhbmNlUHJvdG90eXBlPUksdGhpcy5yYXdEZXN0cnVjdG9yPWcsdGhpcy5iYXNlQ2xhc3M9USx0aGlzLmdldEFjdHVhbFR5cGU9RSx0aGlzLnVwY2FzdD1DLHRoaXMuZG93bmNhc3Q9aSx0aGlzLnB1cmVWaXJ0dWFsRnVuY3Rpb25zPVtdfWZ1bmN0aW9uIG9CKEEsQixJKXtmb3IoO0IhPT1JOylCLnVwY2FzdHx8VEEoIkV4cGVjdGVkIG51bGwgb3IgaW5zdGFuY2Ugb2YgIitJLm5hbWUrIiwgZ290IGFuIGluc3RhbmNlIG9mICIrQi5uYW1lKSxBPUIudXBjYXN0KEEpLEI9Qi5iYXNlQ2xhc3M7cmV0dXJuIEF9ZnVuY3Rpb24gdEIoQSxCKXtpZihudWxsPT09QilyZXR1cm4gdGhpcy5pc1JlZmVyZW5jZSYmVEEoIm51bGwgaXMgbm90IGEgdmFsaWQgIit0aGlzLm5hbWUpLDA7Qi4kJHx8VEEoJ0Nhbm5vdCBwYXNzICInK1lCKEIpKyciIGFzIGEgJyt0aGlzLm5hbWUpLEIuJCQucHRyfHxUQSgiQ2Fubm90IHBhc3MgZGVsZXRlZCBvYmplY3QgYXMgYSBwb2ludGVyIG9mIHR5cGUgIit0aGlzLm5hbWUpO3ZhciBJPUIuJCQucHRyVHlwZS5yZWdpc3RlcmVkQ2xhc3M7cmV0dXJuIG9CKEIuJCQucHRyLEksdGhpcy5yZWdpc3RlcmVkQ2xhc3MpfWZ1bmN0aW9uIGVCKEEsQil7dmFyIEk7aWYobnVsbD09PUIpcmV0dXJuIHRoaXMuaXNSZWZlcmVuY2UmJlRBKCJudWxsIGlzIG5vdCBhIHZhbGlkICIrdGhpcy5uYW1lKSx0aGlzLmlzU21hcnRQb2ludGVyPyhJPXRoaXMucmF3Q29uc3RydWN0b3IoKSxudWxsIT09QSYmQS5wdXNoKHRoaXMucmF3RGVzdHJ1Y3RvcixJKSxJKTowO0IuJCR8fFRBKCdDYW5ub3QgcGFzcyAiJytZQihCKSsnIiBhcyBhICcrdGhpcy5uYW1lKSxCLiQkLnB0cnx8VEEoIkNhbm5vdCBwYXNzIGRlbGV0ZWQgb2JqZWN0IGFzIGEgcG9pbnRlciBvZiB0eXBlICIrdGhpcy5uYW1lKSwhdGhpcy5pc0NvbnN0JiZCLiQkLnB0clR5cGUuaXNDb25zdCYmVEEoIkNhbm5vdCBjb252ZXJ0IGFyZ3VtZW50IG9mIHR5cGUgIisoQi4kJC5zbWFydFB0clR5cGU/Qi4kJC5zbWFydFB0clR5cGUubmFtZTpCLiQkLnB0clR5cGUubmFtZSkrIiB0byBwYXJhbWV0ZXIgdHlwZSAiK3RoaXMubmFtZSk7dmFyIGc9Qi4kJC5wdHJUeXBlLnJlZ2lzdGVyZWRDbGFzcztpZihJPW9CKEIuJCQucHRyLGcsdGhpcy5yZWdpc3RlcmVkQ2xhc3MpLHRoaXMuaXNTbWFydFBvaW50ZXIpc3dpdGNoKHZvaWQgMD09PUIuJCQuc21hcnRQdHImJlRBKCJQYXNzaW5nIHJhdyBwb2ludGVyIHRvIHNtYXJ0IHBvaW50ZXIgaXMgaWxsZWdhbCIpLHRoaXMuc2hhcmluZ1BvbGljeSl7Y2FzZSAwOkIuJCQuc21hcnRQdHJUeXBlPT09dGhpcz9JPUIuJCQuc21hcnRQdHI6VEEoIkNhbm5vdCBjb252ZXJ0IGFyZ3VtZW50IG9mIHR5cGUgIisoQi4kJC5zbWFydFB0clR5cGU/Qi4kJC5zbWFydFB0clR5cGUubmFtZTpCLiQkLnB0clR5cGUubmFtZSkrIiB0byBwYXJhbWV0ZXIgdHlwZSAiK3RoaXMubmFtZSk7YnJlYWs7Y2FzZSAxOkk9Qi4kJC5zbWFydFB0cjticmVhaztjYXNlIDI6aWYoQi4kJC5zbWFydFB0clR5cGU9PT10aGlzKUk9Qi4kJC5zbWFydFB0cjtlbHNle3ZhciBRPUIuY2xvbmUoKTtJPXRoaXMucmF3U2hhcmUoSSxIQigoZnVuY3Rpb24oKXtRLmRlbGV0ZSgpfSkpKSxudWxsIT09QSYmQS5wdXNoKHRoaXMucmF3RGVzdHJ1Y3RvcixJKX1icmVhaztkZWZhdWx0OlRBKCJVbnN1cHBvcnRpbmcgc2hhcmluZyBwb2xpY3kiKX1yZXR1cm4gSX1mdW5jdGlvbiByQihBLEIpe2lmKG51bGw9PT1CKXJldHVybiB0aGlzLmlzUmVmZXJlbmNlJiZUQSgibnVsbCBpcyBub3QgYSB2YWxpZCAiK3RoaXMubmFtZSksMDtCLiQkfHxUQSgnQ2Fubm90IHBhc3MgIicrWUIoQikrJyIgYXMgYSAnK3RoaXMubmFtZSksQi4kJC5wdHJ8fFRBKCJDYW5ub3QgcGFzcyBkZWxldGVkIG9iamVjdCBhcyBhIHBvaW50ZXIgb2YgdHlwZSAiK3RoaXMubmFtZSksQi4kJC5wdHJUeXBlLmlzQ29uc3QmJlRBKCJDYW5ub3QgY29udmVydCBhcmd1bWVudCBvZiB0eXBlICIrQi4kJC5wdHJUeXBlLm5hbWUrIiB0byBwYXJhbWV0ZXIgdHlwZSAiK3RoaXMubmFtZSk7dmFyIEk9Qi4kJC5wdHJUeXBlLnJlZ2lzdGVyZWRDbGFzcztyZXR1cm4gb0IoQi4kJC5wdHIsSSx0aGlzLnJlZ2lzdGVyZWRDbGFzcyl9ZnVuY3Rpb24gYUIoQSl7cmV0dXJuIHRoaXMucmF3R2V0UG9pbnRlZSYmKEE9dGhpcy5yYXdHZXRQb2ludGVlKEEpKSxBfWZ1bmN0aW9uIG5CKEEpe3RoaXMucmF3RGVzdHJ1Y3RvciYmdGhpcy5yYXdEZXN0cnVjdG9yKEEpfWZ1bmN0aW9uIHNCKEEpe251bGwhPT1BJiZBLmRlbGV0ZSgpfWZ1bmN0aW9uIERCKEEsQixJKXtpZihCPT09SSlyZXR1cm4gQTtpZih2b2lkIDA9PT1JLmJhc2VDbGFzcylyZXR1cm4gbnVsbDt2YXIgZz1EQihBLEIsSS5iYXNlQ2xhc3MpO3JldHVybiBudWxsPT09Zz9udWxsOkkuZG93bmNhc3QoZyl9ZnVuY3Rpb24gRkIoKXtyZXR1cm4gT2JqZWN0LmtleXMoaEIpLmxlbmd0aH1mdW5jdGlvbiB3Qigpe3ZhciBBPVtdO2Zvcih2YXIgQiBpbiBoQiloQi5oYXNPd25Qcm9wZXJ0eShCKSYmQS5wdXNoKGhCW0JdKTtyZXR1cm4gQX1mdW5jdGlvbiBjQihBKXtBQj1BLEJCLmxlbmd0aCYmQUImJkFCKElCKX12YXIgaEI9e307ZnVuY3Rpb24geUIoQSxCKXtyZXR1cm4gQj1mdW5jdGlvbihBLEIpe2Zvcih2b2lkIDA9PT1CJiZUQSgicHRyIHNob3VsZCBub3QgYmUgdW5kZWZpbmVkIik7QS5iYXNlQ2xhc3M7KUI9QS51cGNhc3QoQiksQT1BLmJhc2VDbGFzcztyZXR1cm4gQn0oQSxCKSxoQltCXX1mdW5jdGlvbiBSQihBLEIpe3JldHVybiBCLnB0clR5cGUmJkIucHRyfHx2QSgibWFrZUNsYXNzSGFuZGxlIHJlcXVpcmVzIHB0ciBhbmQgcHRyVHlwZSIpLCEhQi5zbWFydFB0clR5cGUhPT0hIUIuc21hcnRQdHImJnZBKCJCb3RoIHNtYXJ0UHRyVHlwZSBhbmQgc21hcnRQdHIgbXVzdCBiZSBzcGVjaWZpZWQiKSxCLmNvdW50PXt2YWx1ZToxfSxPYmplY3QuY3JlYXRlKEEseyQkOnt2YWx1ZTpCfX0pfWZ1bmN0aW9uIFVCKEEpe3ZhciBCPXRoaXMuZ2V0UG9pbnRlZShBKTtpZighQilyZXR1cm4gdGhpcy5kZXN0cnVjdG9yKEEpLG51bGw7dmFyIEk9eUIodGhpcy5yZWdpc3RlcmVkQ2xhc3MsQik7aWYodm9pZCAwIT09SSl7aWYoMD09PUkuJCQuY291bnQudmFsdWUpcmV0dXJuIEkuJCQucHRyPUIsSS4kJC5zbWFydFB0cj1BLEkuY2xvbmUoKTt2YXIgZz1JLmNsb25lKCk7cmV0dXJuIHRoaXMuZGVzdHJ1Y3RvcihBKSxnfWZ1bmN0aW9uIFEoKXtyZXR1cm4gdGhpcy5pc1NtYXJ0UG9pbnRlcj9SQih0aGlzLnJlZ2lzdGVyZWRDbGFzcy5pbnN0YW5jZVByb3RvdHlwZSx7cHRyVHlwZTp0aGlzLnBvaW50ZWVUeXBlLHB0cjpCLHNtYXJ0UHRyVHlwZTp0aGlzLHNtYXJ0UHRyOkF9KTpSQih0aGlzLnJlZ2lzdGVyZWRDbGFzcy5pbnN0YW5jZVByb3RvdHlwZSx7cHRyVHlwZTp0aGlzLHB0cjpBfSl9dmFyIEUsQz10aGlzLnJlZ2lzdGVyZWRDbGFzcy5nZXRBY3R1YWxUeXBlKEIpLGk9RUJbQ107aWYoIWkpcmV0dXJuIFEuY2FsbCh0aGlzKTtFPXRoaXMuaXNDb25zdD9pLmNvbnN0UG9pbnRlclR5cGU6aS5wb2ludGVyVHlwZTt2YXIgbz1EQihCLHRoaXMucmVnaXN0ZXJlZENsYXNzLEUucmVnaXN0ZXJlZENsYXNzKTtyZXR1cm4gbnVsbD09PW8/US5jYWxsKHRoaXMpOnRoaXMuaXNTbWFydFBvaW50ZXI/UkIoRS5yZWdpc3RlcmVkQ2xhc3MuaW5zdGFuY2VQcm90b3R5cGUse3B0clR5cGU6RSxwdHI6byxzbWFydFB0clR5cGU6dGhpcyxzbWFydFB0cjpBfSk6UkIoRS5yZWdpc3RlcmVkQ2xhc3MuaW5zdGFuY2VQcm90b3R5cGUse3B0clR5cGU6RSxwdHI6b30pfWZ1bmN0aW9uIEdCKEEsQixJLGcsUSxFLEMsaSxvLHQsZSl7dGhpcy5uYW1lPUEsdGhpcy5yZWdpc3RlcmVkQ2xhc3M9Qix0aGlzLmlzUmVmZXJlbmNlPUksdGhpcy5pc0NvbnN0PWcsdGhpcy5pc1NtYXJ0UG9pbnRlcj1RLHRoaXMucG9pbnRlZVR5cGU9RSx0aGlzLnNoYXJpbmdQb2xpY3k9Qyx0aGlzLnJhd0dldFBvaW50ZWU9aSx0aGlzLnJhd0NvbnN0cnVjdG9yPW8sdGhpcy5yYXdTaGFyZT10LHRoaXMucmF3RGVzdHJ1Y3Rvcj1lLFF8fHZvaWQgMCE9PUIuYmFzZUNsYXNzP3RoaXMudG9XaXJlVHlwZT1lQjpnPyh0aGlzLnRvV2lyZVR5cGU9dEIsdGhpcy5kZXN0cnVjdG9yRnVuY3Rpb249bnVsbCk6KHRoaXMudG9XaXJlVHlwZT1yQix0aGlzLmRlc3RydWN0b3JGdW5jdGlvbj1udWxsKX1mdW5jdGlvbiBTQihBLEIpe3ZhciBJO2lmKEE9VkEoQSksdm9pZCAwIT09RVsiRlVOQ1RJT05fVEFCTEVfIitBXSlJPUVbIkZVTkNUSU9OX1RBQkxFXyIrQV1bQl07ZWxzZSBpZigidW5kZWZpbmVkIiE9dHlwZW9mIEZVTkNUSU9OX1RBQkxFKUk9RlVOQ1RJT05fVEFCTEVbQl07ZWxzZXt2YXIgZz1FLmFzbVsiZHluQ2FsbF8iK0FdO3ZvaWQgMD09PWcmJnZvaWQgMD09PShnPUUuYXNtWyJkeW5DYWxsXyIrQS5yZXBsYWNlKC9mL2csImQiKV0pJiZUQSgiTm8gZHluQ2FsbCBpbnZva2VyIGZvciBzaWduYXR1cmU6ICIrQSksST1mdW5jdGlvbihJKXtmb3IodmFyIGc9W10sUT0xO1E8QS5sZW5ndGg7KytRKWcucHVzaCgiYSIrUSk7dmFyIEU9InJldHVybiBmdW5jdGlvbiBkeW5DYWxsXyIrQSsiXyIrQisiKCIrZy5qb2luKCIsICIpKyIpIHtcbiI7cmV0dXJuIEUrPSIgICAgcmV0dXJuIGR5bkNhbGwocmF3RnVuY3Rpb24iKyhnLmxlbmd0aD8iLCAiOiIiKStnLmpvaW4oIiwgIikrIik7XG4iLEUrPSJ9O1xuIixuZXcgRnVuY3Rpb24oImR5bkNhbGwiLCJyYXdGdW5jdGlvbiIsRSkoSSxCKX0oZyl9cmV0dXJuImZ1bmN0aW9uIiE9dHlwZW9mIEkmJlRBKCJ1bmtub3duIGZ1bmN0aW9uIHBvaW50ZXIgd2l0aCBzaWduYXR1cmUgIitBKyI6ICIrQiksSX12YXIga0I9dm9pZCAwO2Z1bmN0aW9uIGZCKEEpe3ZhciBCPSRCKEEpLEk9VkEoQik7cmV0dXJuIEJJKEIpLEl9ZnVuY3Rpb24gTkIoQSxCKXt2YXIgST1bXSxnPXt9O3Rocm93IEIuZm9yRWFjaCgoZnVuY3Rpb24gQShCKXtnW0JdfHxZQVtCXXx8KHFBW0JdP3FBW0JdLmZvckVhY2goQSk6KEkucHVzaChCKSxnW0JdPSEwKSl9KSksbmV3IGtCKEErIjogIitJLm1hcChmQikuam9pbihbIiwgIl0pKX1mdW5jdGlvbiBkQihBLEIpe2Zvcih2YXIgST1bXSxnPTA7ZzxBO2crKylJLnB1c2goSFsoQj4+MikrZ10pO3JldHVybiBJfWZ1bmN0aW9uIE1CKEEsQixJLGcsUSl7dmFyIEU9Qi5sZW5ndGg7RTwyJiZUQSgiYXJnVHlwZXMgYXJyYXkgc2l6ZSBtaXNtYXRjaCEgTXVzdCBhdCBsZWFzdCBnZXQgcmV0dXJuIHZhbHVlIGFuZCAndGhpcycgdHlwZXMhIik7Zm9yKHZhciBDPW51bGwhPT1CWzFdJiZudWxsIT09SSxpPSExLG89MTtvPEIubGVuZ3RoOysrbylpZihudWxsIT09QltvXSYmdm9pZCAwPT09QltvXS5kZXN0cnVjdG9yRnVuY3Rpb24pe2k9ITA7YnJlYWt9dmFyIHQ9InZvaWQiIT09QlswXS5uYW1lLGU9IiIscj0iIjtmb3Iobz0wO288RS0yOysrbyllKz0oMCE9PW8/IiwgIjoiIikrImFyZyIrbyxyKz0oMCE9PW8/IiwgIjoiIikrImFyZyIrbysiV2lyZWQiO3ZhciBhPSJyZXR1cm4gZnVuY3Rpb24gIitwQShBKSsiKCIrZSsiKSB7XG5pZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gIisoRS0yKSsiKSB7XG50aHJvd0JpbmRpbmdFcnJvcignZnVuY3Rpb24gIitBKyIgY2FsbGVkIHdpdGggJyArIGFyZ3VtZW50cy5sZW5ndGggKyAnIGFyZ3VtZW50cywgZXhwZWN0ZWQgIisoRS0yKSsiIGFyZ3MhJyk7XG59XG4iO2kmJihhKz0idmFyIGRlc3RydWN0b3JzID0gW107XG4iKTt2YXIgbj1pPyJkZXN0cnVjdG9ycyI6Im51bGwiLHM9WyJ0aHJvd0JpbmRpbmdFcnJvciIsImludm9rZXIiLCJmbiIsInJ1bkRlc3RydWN0b3JzIiwicmV0VHlwZSIsImNsYXNzUGFyYW0iXSxEPVtUQSxnLFEsSkEsQlswXSxCWzFdXTtDJiYoYSs9InZhciB0aGlzV2lyZWQgPSBjbGFzc1BhcmFtLnRvV2lyZVR5cGUoIituKyIsIHRoaXMpO1xuIik7Zm9yKG89MDtvPEUtMjsrK28pYSs9InZhciBhcmciK28rIldpcmVkID0gYXJnVHlwZSIrbysiLnRvV2lyZVR5cGUoIituKyIsIGFyZyIrbysiKTsgLy8gIitCW28rMl0ubmFtZSsiXG4iLHMucHVzaCgiYXJnVHlwZSIrbyksRC5wdXNoKEJbbysyXSk7aWYoQyYmKHI9InRoaXNXaXJlZCIrKHIubGVuZ3RoPjA/IiwgIjoiIikrciksYSs9KHQ/InZhciBydiA9ICI6IiIpKyJpbnZva2VyKGZuIisoci5sZW5ndGg+MD8iLCAiOiIiKStyKyIpO1xuIixpKWErPSJydW5EZXN0cnVjdG9ycyhkZXN0cnVjdG9ycyk7XG4iO2Vsc2UgZm9yKG89Qz8xOjI7bzxCLmxlbmd0aDsrK28pe3ZhciBGPTE9PT1vPyJ0aGlzV2lyZWQiOiJhcmciKyhvLTIpKyJXaXJlZCI7bnVsbCE9PUJbb10uZGVzdHJ1Y3RvckZ1bmN0aW9uJiYoYSs9RisiX2R0b3IoIitGKyIpOyAvLyAiK0Jbb10ubmFtZSsiXG4iLHMucHVzaChGKyJfZHRvciIpLEQucHVzaChCW29dLmRlc3RydWN0b3JGdW5jdGlvbikpfXJldHVybiB0JiYoYSs9InZhciByZXQgPSByZXRUeXBlLmZyb21XaXJlVHlwZShydik7XG5yZXR1cm4gcmV0O1xuIiksYSs9In1cbiIscy5wdXNoKGEpLGZ1bmN0aW9uKEEsQil7aWYoIShBIGluc3RhbmNlb2YgRnVuY3Rpb24pKXRocm93IG5ldyBUeXBlRXJyb3IoIm5ld18gY2FsbGVkIHdpdGggY29uc3RydWN0b3IgdHlwZSAiK3R5cGVvZiBBKyIgd2hpY2ggaXMgbm90IGEgZnVuY3Rpb24iKTt2YXIgST1LQShBLm5hbWV8fCJ1bmtub3duRnVuY3Rpb25OYW1lIiwoZnVuY3Rpb24oKXt9KSk7SS5wcm90b3R5cGU9QS5wcm90b3R5cGU7dmFyIGc9bmV3IEksUT1BLmFwcGx5KGcsQik7cmV0dXJuIFEgaW5zdGFuY2VvZiBPYmplY3Q/UTpnfShGdW5jdGlvbixzKS5hcHBseShudWxsLEQpfXZhciB1Qj1bXSxMQj1be30se3ZhbHVlOnZvaWQgMH0se3ZhbHVlOm51bGx9LHt2YWx1ZTohMH0se3ZhbHVlOiExfV07ZnVuY3Rpb24gSkIoKXtmb3IodmFyIEE9MCxCPTU7QjxMQi5sZW5ndGg7KytCKXZvaWQgMCE9PUxCW0JdJiYrK0E7cmV0dXJuIEF9ZnVuY3Rpb24gbEIoKXtmb3IodmFyIEE9NTtBPExCLmxlbmd0aDsrK0EpaWYodm9pZCAwIT09TEJbQV0pcmV0dXJuIExCW0FdO3JldHVybiBudWxsfWZ1bmN0aW9uIEhCKEEpe3N3aXRjaChBKXtjYXNlIHZvaWQgMDpyZXR1cm4gMTtjYXNlIG51bGw6cmV0dXJuIDI7Y2FzZSEwOnJldHVybiAzO2Nhc2UhMTpyZXR1cm4gNDtkZWZhdWx0OnZhciBCPXVCLmxlbmd0aD91Qi5wb3AoKTpMQi5sZW5ndGg7cmV0dXJuIExCW0JdPXtyZWZjb3VudDoxLHZhbHVlOkF9LEJ9fWZ1bmN0aW9uIFlCKEEpe2lmKG51bGw9PT1BKXJldHVybiJudWxsIjt2YXIgQj10eXBlb2YgQTtyZXR1cm4ib2JqZWN0Ij09PUJ8fCJhcnJheSI9PT1CfHwiZnVuY3Rpb24iPT09Qj9BLnRvU3RyaW5nKCk6IiIrQX1mdW5jdGlvbiBxQihBLEIpe3N3aXRjaChCKXtjYXNlIDI6cmV0dXJuIGZ1bmN0aW9uKEEpe3JldHVybiB0aGlzLmZyb21XaXJlVHlwZShxW0E+PjJdKX07Y2FzZSAzOnJldHVybiBmdW5jdGlvbihBKXtyZXR1cm4gdGhpcy5mcm9tV2lyZVR5cGUocFtBPj4zXSl9O2RlZmF1bHQ6dGhyb3cgbmV3IFR5cGVFcnJvcigiVW5rbm93biBmbG9hdCB0eXBlOiAiK0EpfX1mdW5jdGlvbiBwQihBLEIsSSl7c3dpdGNoKEIpe2Nhc2UgMDpyZXR1cm4gST9mdW5jdGlvbihBKXtyZXR1cm4gdVtBXX06ZnVuY3Rpb24oQSl7cmV0dXJuIExbQV19O2Nhc2UgMTpyZXR1cm4gST9mdW5jdGlvbihBKXtyZXR1cm4gSltBPj4xXX06ZnVuY3Rpb24oQSl7cmV0dXJuIGxbQT4+MV19O2Nhc2UgMjpyZXR1cm4gST9mdW5jdGlvbihBKXtyZXR1cm4gSFtBPj4yXX06ZnVuY3Rpb24oQSl7cmV0dXJuIFlbQT4+Ml19O2RlZmF1bHQ6dGhyb3cgbmV3IFR5cGVFcnJvcigiVW5rbm93biBpbnRlZ2VyIHR5cGU6ICIrQSl9fXZhciBLQj1LKz0xNjt2YXIgbUI9e307dmFyIHhCPUsrPTE2O0srPTQ4O2goVEIoIkdNVCIpLCJpOCIsMik7dmFyIHZCPUssV0I9Sys9MTYsYkI9Sys9MTY7ZnVuY3Rpb24gWEIoKXtpZighWEIuY2FsbGVkKXtYQi5jYWxsZWQ9ITAsSFtiQj4+Ml09NjAqKG5ldyBEYXRlKS5nZXRUaW1lem9uZU9mZnNldCgpO3ZhciBBPW5ldyBEYXRlKDJlMywwLDEpLEI9bmV3IERhdGUoMmUzLDYsMSk7SFtXQj4+Ml09TnVtYmVyKEEuZ2V0VGltZXpvbmVPZmZzZXQoKSE9Qi5nZXRUaW1lem9uZU9mZnNldCgpKTt2YXIgST1DKEEpLGc9QyhCKSxRPWgoVEIoSSksImk4IiwwKSxFPWgoVEIoZyksImk4IiwwKTtCLmdldFRpbWV6b25lT2Zmc2V0KCk8QS5nZXRUaW1lem9uZU9mZnNldCgpPyhIW3ZCPj4yXT1RLEhbdkIrND4+Ml09RSk6KEhbdkI+PjJdPUUsSFt2Qis0Pj4yXT1RKX1mdW5jdGlvbiBDKEEpe3ZhciBCPUEudG9UaW1lU3RyaW5nKCkubWF0Y2goL1woKFtBLVphLXogXSspXCkkLyk7cmV0dXJuIEI/QlsxXToiR01UIn19Sys9MTY7dmFyIFZCPXt9O3ZhciBPQj0xO2Z1bmN0aW9uIFRCKEEsQixJKXt2YXIgZz1JPjA/STpmKEEpKzEsUT1uZXcgQXJyYXkoZyksRT1TKEEsUSwwLFEubGVuZ3RoKTtyZXR1cm4gQiYmKFEubGVuZ3RoPUUpLFF9ZEEuc3RhdGljSW5pdCgpLEFBLnVuc2hpZnQoKGZ1bmN0aW9uKCl7RS5ub0ZTSW5pdHx8ZEEuaW5pdC5pbml0aWFsaXplZHx8ZEEuaW5pdCgpfSkpLEJBLnB1c2goKGZ1bmN0aW9uKCl7ZEEuaWdub3JlUGVybWlzc2lvbnM9ITF9KSksSUEucHVzaCgoZnVuY3Rpb24oKXtkQS5xdWl0KCl9KSksQUEudW5zaGlmdCgoZnVuY3Rpb24oKXtHQS5pbml0KCl9KSksSUEucHVzaCgoZnVuY3Rpb24oKXtHQS5zaHV0ZG93bigpfSkpLHhBPUUuSW50ZXJuYWxFcnJvcj1tQShFcnJvciwiSW50ZXJuYWxFcnJvciIpLGZ1bmN0aW9uKCl7Zm9yKHZhciBBPW5ldyBBcnJheSgyNTYpLEI9MDtCPDI1NjsrK0IpQVtCXT1TdHJpbmcuZnJvbUNoYXJDb2RlKEIpO1hBPUF9KCksT0E9RS5CaW5kaW5nRXJyb3I9bUEoRXJyb3IsIkJpbmRpbmdFcnJvciIpLFFCLnByb3RvdHlwZS5pc0FsaWFzT2Y9WkEsUUIucHJvdG90eXBlLmNsb25lPXpBLFFCLnByb3RvdHlwZS5kZWxldGU9X0EsUUIucHJvdG90eXBlLmlzRGVsZXRlZD0kQSxRQi5wcm90b3R5cGUuZGVsZXRlTGF0ZXI9Z0IsR0IucHJvdG90eXBlLmdldFBvaW50ZWU9YUIsR0IucHJvdG90eXBlLmRlc3RydWN0b3I9bkIsR0IucHJvdG90eXBlLmFyZ1BhY2tBZHZhbmNlPTgsR0IucHJvdG90eXBlLnJlYWRWYWx1ZUZyb21Qb2ludGVyPWxBLEdCLnByb3RvdHlwZS5kZWxldGVPYmplY3Q9c0IsR0IucHJvdG90eXBlLmZyb21XaXJlVHlwZT1VQixFLmdldEluaGVyaXRlZEluc3RhbmNlQ291bnQ9RkIsRS5nZXRMaXZlSW5oZXJpdGVkSW5zdGFuY2VzPXdCLEUuZmx1c2hQZW5kaW5nRGVsZXRlcz1JQixFLnNldERlbGF5RnVuY3Rpb249Y0Isa0I9RS5VbmJvdW5kVHlwZUVycm9yPW1BKEVycm9yLCJVbmJvdW5kVHlwZUVycm9yIiksRS5jb3VudF9lbXZhbF9oYW5kbGVzPUpCLEUuZ2V0X2ZpcnN0X2VtdmFsPWxCLGZ1bmN0aW9uIEEoQil7dmFyIEksZztBLmNhbGxlZD8oZz1IW0tCPj4yXSxJPUhbZz4+Ml0pOihBLmNhbGxlZD0hMCxtQi5VU0VSPW1CLkxPR05BTUU9IndlYl91c2VyIixtQi5QQVRIPSIvIixtQi5QV0Q9Ii8iLG1CLkhPTUU9Ii9ob21lL3dlYl91c2VyIixtQi5MQU5HPSJDLlVURi04IixtQi5fPUUudGhpc1Byb2dyYW0sST1hKDEwMjQpLGc9YSgyNTYpLEhbZz4+Ml09SSxIW0tCPj4yXT1nKTt2YXIgUT1bXSxDPTA7Zm9yKHZhciBpIGluIEIpaWYoInN0cmluZyI9PXR5cGVvZiBCW2ldKXt2YXIgbz1pKyI9IitCW2ldO1EucHVzaChvKSxDKz1vLmxlbmd0aH1pZihDPjEwMjQpdGhyb3cgbmV3IEVycm9yKCJFbnZpcm9ubWVudCBzaXplIGV4Y2VlZGVkIFRPVEFMX0VOVl9TSVpFISIpO2Zvcih2YXIgdD0wO3Q8US5sZW5ndGg7dCsrKXtFQShvPVFbdF0sSSksSFtnKzQqdD4+Ml09SSxJKz1vLmxlbmd0aCsxfUhbZys0KlEubGVuZ3RoPj4yXT0wfShtQiksYj1hKDQpLHg9dj1zKEspLFc9cyh4K1ApLEhbYj4+Ml09VyxtPSEwLEUud2FzbVRhYmxlU2l6ZT0zMTYsRS53YXNtTWF4VGFibGVTaXplPTMxNixFLmFzbUdsb2JhbEFyZz17fSxFLmFzbUxpYnJhcnlBcmc9e2Fib3J0OmlJLGVubGFyZ2VNZW1vcnk6WixnZXRUb3RhbE1lbW9yeTpmdW5jdGlvbigpe3JldHVybiB6fSxhYm9ydE9uQ2Fubm90R3Jvd01lbW9yeTpmdW5jdGlvbigpe2lJKCJDYW5ub3QgZW5sYXJnZSBtZW1vcnkgYXJyYXlzLiBFaXRoZXIgKDEpIGNvbXBpbGUgd2l0aCAgLXMgVE9UQUxfTUVNT1JZPVggIHdpdGggWCBoaWdoZXIgdGhhbiB0aGUgY3VycmVudCB2YWx1ZSAiK3orIiwgKDIpIGNvbXBpbGUgd2l0aCAgLXMgQUxMT1dfTUVNT1JZX0dST1dUSD0xICB3aGljaCBhbGxvd3MgaW5jcmVhc2luZyB0aGUgc2l6ZSBhdCBydW50aW1lLCBvciAoMykgaWYgeW91IHdhbnQgbWFsbG9jIHRvIHJldHVybiBOVUxMICgwKSBpbnN0ZWFkIG9mIHRoaXMgYWJvcnQsIGNvbXBpbGUgd2l0aCAgLXMgQUJPUlRJTkdfTUFMTE9DPTAgIil9LGludm9rZV9pOmZ1bmN0aW9uKEEpe3RyeXtyZXR1cm4gRS5keW5DYWxsX2koQSl9Y2F0Y2goQSl7aWYoIm51bWJlciIhPXR5cGVvZiBBJiYibG9uZ2ptcCIhPT1BKXRocm93IEE7RS5zZXRUaHJldygxLDApfX0saW52b2tlX2lpOmZ1bmN0aW9uKEEsQil7dHJ5e3JldHVybiBFLmR5bkNhbGxfaWkoQSxCKX1jYXRjaChBKXtpZigibnVtYmVyIiE9dHlwZW9mIEEmJiJsb25nam1wIiE9PUEpdGhyb3cgQTtFLnNldFRocmV3KDEsMCl9fSxpbnZva2VfaWlpOmZ1bmN0aW9uKEEsQixJKXt0cnl7cmV0dXJuIEUuZHluQ2FsbF9paWkoQSxCLEkpfWNhdGNoKEEpe2lmKCJudW1iZXIiIT10eXBlb2YgQSYmImxvbmdqbXAiIT09QSl0aHJvdyBBO0Uuc2V0VGhyZXcoMSwwKX19LGludm9rZV9paWlpOmZ1bmN0aW9uKEEsQixJLGcpe3RyeXtyZXR1cm4gRS5keW5DYWxsX2lpaWkoQSxCLEksZyl9Y2F0Y2goQSl7aWYoIm51bWJlciIhPXR5cGVvZiBBJiYibG9uZ2ptcCIhPT1BKXRocm93IEE7RS5zZXRUaHJldygxLDApfX0saW52b2tlX2lpaWlpOmZ1bmN0aW9uKEEsQixJLGcsUSl7dHJ5e3JldHVybiBFLmR5bkNhbGxfaWlpaWkoQSxCLEksZyxRKX1jYXRjaChBKXtpZigibnVtYmVyIiE9dHlwZW9mIEEmJiJsb25nam1wIiE9PUEpdGhyb3cgQTtFLnNldFRocmV3KDEsMCl9fSxpbnZva2VfaWlpaWlpaTpmdW5jdGlvbihBLEIsSSxnLFEsQyxpKXt0cnl7cmV0dXJuIEUuZHluQ2FsbF9paWlpaWlpKEEsQixJLGcsUSxDLGkpfWNhdGNoKEEpe2lmKCJudW1iZXIiIT10eXBlb2YgQSYmImxvbmdqbXAiIT09QSl0aHJvdyBBO0Uuc2V0VGhyZXcoMSwwKX19LGludm9rZV9paWlpaWlpaWlpOmZ1bmN0aW9uKEEsQixJLGcsUSxDLGksbyx0LGUpe3RyeXtyZXR1cm4gRS5keW5DYWxsX2lpaWlpaWlpaWkoQSxCLEksZyxRLEMsaSxvLHQsZSl9Y2F0Y2goQSl7aWYoIm51bWJlciIhPXR5cGVvZiBBJiYibG9uZ2ptcCIhPT1BKXRocm93IEE7RS5zZXRUaHJldygxLDApfX0saW52b2tlX2lpaWlpaWppaTpmdW5jdGlvbihBLEIsSSxnLFEsQyxpLG8sdCxlKXt0cnl7cmV0dXJuIEUuZHluQ2FsbF9paWlpaWlqaWkoQSxCLEksZyxRLEMsaSxvLHQsZSl9Y2F0Y2goQSl7aWYoIm51bWJlciIhPXR5cGVvZiBBJiYibG9uZ2ptcCIhPT1BKXRocm93IEE7RS5zZXRUaHJldygxLDApfX0saW52b2tlX2lqajpmdW5jdGlvbihBLEIsSSxnLFEpe3RyeXtyZXR1cm4gRS5keW5DYWxsX2lqaihBLEIsSSxnLFEpfWNhdGNoKEEpe2lmKCJudW1iZXIiIT10eXBlb2YgQSYmImxvbmdqbXAiIT09QSl0aHJvdyBBO0Uuc2V0VGhyZXcoMSwwKX19LGludm9rZV9qaTpmdW5jdGlvbihBLEIpe3RyeXtyZXR1cm4gRS5keW5DYWxsX2ppKEEsQil9Y2F0Y2goQSl7aWYoIm51bWJlciIhPXR5cGVvZiBBJiYibG9uZ2ptcCIhPT1BKXRocm93IEE7RS5zZXRUaHJldygxLDApfX0saW52b2tlX3Y6ZnVuY3Rpb24oQSl7dHJ5e0UuZHluQ2FsbF92KEEpfWNhdGNoKEEpe2lmKCJudW1iZXIiIT10eXBlb2YgQSYmImxvbmdqbXAiIT09QSl0aHJvdyBBO0Uuc2V0VGhyZXcoMSwwKX19LGludm9rZV92aTpmdW5jdGlvbihBLEIpe3RyeXtFLmR5bkNhbGxfdmkoQSxCKX1jYXRjaChBKXtpZigibnVtYmVyIiE9dHlwZW9mIEEmJiJsb25nam1wIiE9PUEpdGhyb3cgQTtFLnNldFRocmV3KDEsMCl9fSxpbnZva2VfdmlpOmZ1bmN0aW9uKEEsQixJKXt0cnl7RS5keW5DYWxsX3ZpaShBLEIsSSl9Y2F0Y2goQSl7aWYoIm51bWJlciIhPXR5cGVvZiBBJiYibG9uZ2ptcCIhPT1BKXRocm93IEE7RS5zZXRUaHJldygxLDApfX0saW52b2tlX3ZpaWk6ZnVuY3Rpb24oQSxCLEksZyl7dHJ5e0UuZHluQ2FsbF92aWlpKEEsQixJLGcpfWNhdGNoKEEpe2lmKCJudW1iZXIiIT10eXBlb2YgQSYmImxvbmdqbXAiIT09QSl0aHJvdyBBO0Uuc2V0VGhyZXcoMSwwKX19LGludm9rZV92aWlpaTpmdW5jdGlvbihBLEIsSSxnLFEpe3RyeXtFLmR5bkNhbGxfdmlpaWkoQSxCLEksZyxRKX1jYXRjaChBKXtpZigibnVtYmVyIiE9dHlwZW9mIEEmJiJsb25nam1wIiE9PUEpdGhyb3cgQTtFLnNldFRocmV3KDEsMCl9fSxpbnZva2VfdmlpaWlpOmZ1bmN0aW9uKEEsQixJLGcsUSxDKXt0cnl7RS5keW5DYWxsX3ZpaWlpaShBLEIsSSxnLFEsQyl9Y2F0Y2goQSl7aWYoIm51bWJlciIhPXR5cGVvZiBBJiYibG9uZ2ptcCIhPT1BKXRocm93IEE7RS5zZXRUaHJldygxLDApfX0saW52b2tlX3ZpaWlpaWk6ZnVuY3Rpb24oQSxCLEksZyxRLEMsaSl7dHJ5e0UuZHluQ2FsbF92aWlpaWlpKEEsQixJLGcsUSxDLGkpfWNhdGNoKEEpe2lmKCJudW1iZXIiIT10eXBlb2YgQSYmImxvbmdqbXAiIT09QSl0aHJvdyBBO0Uuc2V0VGhyZXcoMSwwKX19LGludm9rZV92aWlpaWlpaWlpOmZ1bmN0aW9uKEEsQixJLGcsUSxDLGksbyx0LGUpe3RyeXtFLmR5bkNhbGxfdmlpaWlpaWlpaShBLEIsSSxnLFEsQyxpLG8sdCxlKX1jYXRjaChBKXtpZigibnVtYmVyIiE9dHlwZW9mIEEmJiJsb25nam1wIiE9PUEpdGhyb3cgQTtFLnNldFRocmV3KDEsMCl9fSxpbnZva2VfdmlpaWlpaWlpaWk6ZnVuY3Rpb24oQSxCLEksZyxRLEMsaSxvLHQsZSxyKXt0cnl7RS5keW5DYWxsX3ZpaWlpaWlpaWlpKEEsQixJLGcsUSxDLGksbyx0LGUscil9Y2F0Y2goQSl7aWYoIm51bWJlciIhPXR5cGVvZiBBJiYibG9uZ2ptcCIhPT1BKXRocm93IEE7RS5zZXRUaHJldygxLDApfX0saW52b2tlX3ZpajpmdW5jdGlvbihBLEIsSSxnKXt0cnl7RS5keW5DYWxsX3ZpaihBLEIsSSxnKX1jYXRjaChBKXtpZigibnVtYmVyIiE9dHlwZW9mIEEmJiJsb25nam1wIiE9PUEpdGhyb3cgQTtFLnNldFRocmV3KDEsMCl9fSxpbnZva2VfdmlqaTpmdW5jdGlvbihBLEIsSSxnLFEpe3RyeXtFLmR5bkNhbGxfdmlqaShBLEIsSSxnLFEpfWNhdGNoKEEpe2lmKCJudW1iZXIiIT10eXBlb2YgQSYmImxvbmdqbXAiIT09QSl0aHJvdyBBO0Uuc2V0VGhyZXcoMSwwKX19LF9fX2N4YV9hbGxvY2F0ZV9leGNlcHRpb246ZnVuY3Rpb24oQSl7cmV0dXJuIElJKEEpfSxfX19jeGFfYmVnaW5fY2F0Y2g6ZnVuY3Rpb24oQSl7dmFyIEI9RkEuaW5mb3NbQV07cmV0dXJuIEImJiFCLmNhdWdodCYmKEIuY2F1Z2h0PSEwKSxCJiYoQi5yZXRocm93bj0hMSksRkEuY2F1Z2h0LnB1c2goQSksRkEuYWRkUmVmKEZBLmRlQWRqdXN0KEEpKSxBfSxfX19jeGFfZW5kX2NhdGNoOmZ1bmN0aW9uKCl7RS5zZXRUaHJldygwKTt2YXIgQT1GQS5jYXVnaHQucG9wKCk7QSYmKEZBLmRlY1JlZihGQS5kZUFkanVzdChBKSksRkEubGFzdD0wKX0sX19fY3hhX2ZpbmRfbWF0Y2hpbmdfY2F0Y2hfMjpmdW5jdGlvbigpe3JldHVybiBjQS5hcHBseShudWxsLGFyZ3VtZW50cyl9LF9fX2N4YV9maW5kX21hdGNoaW5nX2NhdGNoXzM6ZnVuY3Rpb24oKXtyZXR1cm4gY0EuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxfX19jeGFfZmluZF9tYXRjaGluZ19jYXRjaF80OmZ1bmN0aW9uKCl7cmV0dXJuIGNBLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sX19fY3hhX2ZyZWVfZXhjZXB0aW9uOndBLF9fX2N4YV90aHJvdzpmdW5jdGlvbihBLEIsSSl7dGhyb3cgRkEuaW5mb3NbQV09e3B0cjpBLGFkanVzdGVkOkEsdHlwZTpCLGRlc3RydWN0b3I6SSxyZWZjb3VudDowLGNhdWdodDohMSxyZXRocm93bjohMX0sRkEubGFzdD1BLEF9LF9fX2xvY2s6ZnVuY3Rpb24oKXt9LF9fX21hcF9maWxlOmZ1bmN0aW9uKEEsQil7cmV0dXJuIHlBKGhBLkVQRVJNKSwtMX0sX19fcmVzdW1lRXhjZXB0aW9uOmZ1bmN0aW9uKEEpe3Rocm93IEZBLmxhc3R8fChGQS5sYXN0PUEpLEF9LF9fX3NldEVyck5vOnlBLF9fX3N5c2NhbGwxNDA6ZnVuY3Rpb24oQSxCKXtNQS52YXJhcmdzPUI7dHJ5e3ZhciBJPU1BLmdldFN0cmVhbUZyb21GRCgpLGc9KE1BLmdldCgpLE1BLmdldCgpKSxRPU1BLmdldCgpLEU9TUEuZ2V0KCksQz1nO3JldHVybiBkQS5sbHNlZWsoSSxDLEUpLEhbUT4+Ml09SS5wb3NpdGlvbixJLmdldGRlbnRzJiYwPT09QyYmMD09PUUmJihJLmdldGRlbnRzPW51bGwpLDB9Y2F0Y2goQSl7cmV0dXJuIHZvaWQgMCE9PWRBJiZBIGluc3RhbmNlb2YgZEEuRXJybm9FcnJvcnx8aUkoQSksLUEuZXJybm99fSxfX19zeXNjYWxsMTQ1OmZ1bmN0aW9uKEEsQil7TUEudmFyYXJncz1CO3RyeXt2YXIgST1NQS5nZXRTdHJlYW1Gcm9tRkQoKSxnPU1BLmdldCgpLFE9TUEuZ2V0KCk7cmV0dXJuIE1BLmRvUmVhZHYoSSxnLFEpfWNhdGNoKEEpe3JldHVybiB2b2lkIDAhPT1kQSYmQSBpbnN0YW5jZW9mIGRBLkVycm5vRXJyb3J8fGlJKEEpLC1BLmVycm5vfX0sX19fc3lzY2FsbDE0NjpmdW5jdGlvbihBLEIpe01BLnZhcmFyZ3M9Qjt0cnl7dmFyIEk9TUEuZ2V0U3RyZWFtRnJvbUZEKCksZz1NQS5nZXQoKSxRPU1BLmdldCgpO3JldHVybiBNQS5kb1dyaXRldihJLGcsUSl9Y2F0Y2goQSl7cmV0dXJuIHZvaWQgMCE9PWRBJiZBIGluc3RhbmNlb2YgZEEuRXJybm9FcnJvcnx8aUkoQSksLUEuZXJybm99fSxfX19zeXNjYWxsMTgzOmZ1bmN0aW9uKEEsQil7TUEudmFyYXJncz1CO3RyeXt2YXIgST1NQS5nZXQoKSxnPU1BLmdldCgpO2lmKDA9PT1nKXJldHVybi1oQS5FSU5WQUw7dmFyIFE9ZEEuY3dkKCk7cmV0dXJuIGc8ZihRKSsxPy1oQS5FUkFOR0U6KGsoUSxJLGcpLEkpfWNhdGNoKEEpe3JldHVybiB2b2lkIDAhPT1kQSYmQSBpbnN0YW5jZW9mIGRBLkVycm5vRXJyb3J8fGlJKEEpLC1BLmVycm5vfX0sX19fc3lzY2FsbDE5ODpmdW5jdGlvbihBLEIpe01BLnZhcmFyZ3M9Qjt0cnl7dmFyIEk9TUEuZ2V0U3RyKCksZz1NQS5nZXQoKSxRPU1BLmdldCgpO3JldHVybiBkQS5jaG93bihJLGcsUSksMH1jYXRjaChBKXtyZXR1cm4gdm9pZCAwIT09ZEEmJkEgaW5zdGFuY2VvZiBkQS5FcnJub0Vycm9yfHxpSShBKSwtQS5lcnJub319LF9fX3N5c2NhbGwyMDpmdW5jdGlvbihBLEIpe01BLnZhcmFyZ3M9Qjt0cnl7cmV0dXJuIHVBfWNhdGNoKEEpe3JldHVybiB2b2lkIDAhPT1kQSYmQSBpbnN0YW5jZW9mIGRBLkVycm5vRXJyb3J8fGlJKEEpLC1BLmVycm5vfX0sX19fc3lzY2FsbDY6ZnVuY3Rpb24oQSxCKXtNQS52YXJhcmdzPUI7dHJ5e3ZhciBJPU1BLmdldFN0cmVhbUZyb21GRCgpO3JldHVybiBkQS5jbG9zZShJKSwwfWNhdGNoKEEpe3JldHVybiB2b2lkIDAhPT1kQSYmQSBpbnN0YW5jZW9mIGRBLkVycm5vRXJyb3J8fGlJKEEpLC1BLmVycm5vfX0sX19fc3lzY2FsbDYwOmZ1bmN0aW9uKEEsQil7TUEudmFyYXJncz1CO3RyeXt2YXIgST1NQS5nZXQoKSxnPU1BLnVtYXNrO3JldHVybiBNQS51bWFzaz1JLGd9Y2F0Y2goQSl7cmV0dXJuIHZvaWQgMCE9PWRBJiZBIGluc3RhbmNlb2YgZEEuRXJybm9FcnJvcnx8aUkoQSksLUEuZXJybm99fSxfX19zeXNjYWxsODM6ZnVuY3Rpb24oQSxCKXtNQS52YXJhcmdzPUI7dHJ5e3ZhciBJPU1BLmdldFN0cigpLGc9TUEuZ2V0U3RyKCk7cmV0dXJuIGRBLnN5bWxpbmsoSSxnKSwwfWNhdGNoKEEpe3JldHVybiB2b2lkIDAhPT1kQSYmQSBpbnN0YW5jZW9mIGRBLkVycm5vRXJyb3J8fGlJKEEpLC1BLmVycm5vfX0sX19fc3lzY2FsbDkxOmZ1bmN0aW9uKEEsQil7TUEudmFyYXJncz1CO3RyeXt2YXIgST1NQS5nZXQoKSxnPU1BLmdldCgpLFE9TUEubWFwcGluZ3NbSV07aWYoIVEpcmV0dXJuIDA7aWYoZz09PVEubGVuKXt2YXIgRT1kQS5nZXRTdHJlYW0oUS5mZCk7TUEuZG9Nc3luYyhJLEUsZyxRLmZsYWdzKSxkQS5tdW5tYXAoRSksTUEubWFwcGluZ3NbSV09bnVsbCxRLmFsbG9jYXRlZCYmQkkoUS5tYWxsb2MpfXJldHVybiAwfWNhdGNoKEEpe3JldHVybiB2b2lkIDAhPT1kQSYmQSBpbnN0YW5jZW9mIGRBLkVycm5vRXJyb3J8fGlJKEEpLC1BLmVycm5vfX0sX19fdW5sb2NrOmZ1bmN0aW9uKCl7fSxfX2VtYmluZF9maW5hbGl6ZV92YWx1ZV9vYmplY3Q6ZnVuY3Rpb24oQSl7dmFyIEI9TEFbQV07ZGVsZXRlIExBW0FdO3ZhciBJPUIucmF3Q29uc3RydWN0b3IsZz1CLnJhd0Rlc3RydWN0b3IsUT1CLmZpZWxkcztXQShbQV0sUS5tYXAoKGZ1bmN0aW9uKEEpe3JldHVybiBBLmdldHRlclJldHVyblR5cGV9KSkuY29uY2F0KFEubWFwKChmdW5jdGlvbihBKXtyZXR1cm4gQS5zZXR0ZXJBcmd1bWVudFR5cGV9KSkpLChmdW5jdGlvbihBKXt2YXIgRT17fTtyZXR1cm4gUS5mb3JFYWNoKChmdW5jdGlvbihCLEkpe3ZhciBnPUIuZmllbGROYW1lLEM9QVtJXSxpPUIuZ2V0dGVyLG89Qi5nZXR0ZXJDb250ZXh0LHQ9QVtJK1EubGVuZ3RoXSxlPUIuc2V0dGVyLHI9Qi5zZXR0ZXJDb250ZXh0O0VbZ109e3JlYWQ6ZnVuY3Rpb24oQSl7cmV0dXJuIEMuZnJvbVdpcmVUeXBlKGkobyxBKSl9LHdyaXRlOmZ1bmN0aW9uKEEsQil7dmFyIEk9W107ZShyLEEsdC50b1dpcmVUeXBlKEksQikpLEpBKEkpfX19KSksW3tuYW1lOkIubmFtZSxmcm9tV2lyZVR5cGU6ZnVuY3Rpb24oQSl7dmFyIEI9e307Zm9yKHZhciBJIGluIEUpQltJXT1FW0ldLnJlYWQoQSk7cmV0dXJuIGcoQSksQn0sdG9XaXJlVHlwZTpmdW5jdGlvbihBLEIpe2Zvcih2YXIgUSBpbiBFKWlmKCEoUSBpbiBCKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJNaXNzaW5nIGZpZWxkIik7dmFyIEM9SSgpO2ZvcihRIGluIEUpRVtRXS53cml0ZShDLEJbUV0pO3JldHVybiBudWxsIT09QSYmQS5wdXNoKGcsQyksQ30sYXJnUGFja0FkdmFuY2U6OCxyZWFkVmFsdWVGcm9tUG9pbnRlcjpsQSxkZXN0cnVjdG9yRnVuY3Rpb246Z31dfSkpfSxfX2VtYmluZF9yZWdpc3Rlcl9ib29sOmZ1bmN0aW9uKEEsQixJLGcsUSl7dmFyIEU9YkEoSSk7akEoQSx7bmFtZTpCPVZBKEIpLGZyb21XaXJlVHlwZTpmdW5jdGlvbihBKXtyZXR1cm4hIUF9LHRvV2lyZVR5cGU6ZnVuY3Rpb24oQSxCKXtyZXR1cm4gQj9nOlF9LGFyZ1BhY2tBZHZhbmNlOjgscmVhZFZhbHVlRnJvbVBvaW50ZXI6ZnVuY3Rpb24oQSl7dmFyIGc7aWYoMT09PUkpZz11O2Vsc2UgaWYoMj09PUkpZz1KO2Vsc2V7aWYoNCE9PUkpdGhyb3cgbmV3IFR5cGVFcnJvcigiVW5rbm93biBib29sZWFuIHR5cGUgc2l6ZTogIitCKTtnPUh9cmV0dXJuIHRoaXMuZnJvbVdpcmVUeXBlKGdbQT4+RV0pfSxkZXN0cnVjdG9yRnVuY3Rpb246bnVsbH0pfSxfX2VtYmluZF9yZWdpc3Rlcl9jbGFzczpmdW5jdGlvbihBLEIsSSxnLFEsQyxpLG8sdCxlLHIsYSxuKXtyPVZBKHIpLEM9U0IoUSxDKSxvJiYobz1TQihpLG8pKSxlJiYoZT1TQih0LGUpKSxuPVNCKGEsbik7dmFyIHM9cEEocik7IWZ1bmN0aW9uKEEsQixJKXtFLmhhc093blByb3BlcnR5KEEpPygodm9pZCAwPT09SXx8dm9pZCAwIT09RVtBXS5vdmVybG9hZFRhYmxlJiZ2b2lkIDAhPT1FW0FdLm92ZXJsb2FkVGFibGVbSV0pJiZUQSgiQ2Fubm90IHJlZ2lzdGVyIHB1YmxpYyBuYW1lICciK0ErIicgdHdpY2UiKSxDQihFLEEsQSksRS5oYXNPd25Qcm9wZXJ0eShJKSYmVEEoIkNhbm5vdCByZWdpc3RlciBtdWx0aXBsZSBvdmVybG9hZHMgb2YgYSBmdW5jdGlvbiB3aXRoIHRoZSBzYW1lIG51bWJlciBvZiBhcmd1bWVudHMgKCIrSSsiKSEiKSxFW0FdLm92ZXJsb2FkVGFibGVbSV09Qik6KEVbQV09Qix2b2lkIDAhPT1JJiYoRVtBXS5udW1Bcmd1bWVudHM9SSkpfShzLChmdW5jdGlvbigpe05CKCJDYW5ub3QgY29uc3RydWN0ICIrcisiIGR1ZSB0byB1bmJvdW5kIHR5cGVzIixbZ10pfSkpLFdBKFtBLEIsSV0sZz9bZ106W10sKGZ1bmN0aW9uKEIpe3ZhciBJLFE7Qj1CWzBdLFE9Zz8oST1CLnJlZ2lzdGVyZWRDbGFzcykuaW5zdGFuY2VQcm90b3R5cGU6UUIucHJvdG90eXBlO3ZhciBpPUtBKHMsKGZ1bmN0aW9uKCl7aWYoT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpIT09dCl0aHJvdyBuZXcgT0EoIlVzZSAnbmV3JyB0byBjb25zdHJ1Y3QgIityKTtpZih2b2lkIDA9PT1hLmNvbnN0cnVjdG9yX2JvZHkpdGhyb3cgbmV3IE9BKHIrIiBoYXMgbm8gYWNjZXNzaWJsZSBjb25zdHJ1Y3RvciIpO3ZhciBBPWEuY29uc3RydWN0b3JfYm9keVthcmd1bWVudHMubGVuZ3RoXTtpZih2b2lkIDA9PT1BKXRocm93IG5ldyBPQSgiVHJpZWQgdG8gaW52b2tlIGN0b3Igb2YgIityKyIgd2l0aCBpbnZhbGlkIG51bWJlciBvZiBwYXJhbWV0ZXJzICgiK2FyZ3VtZW50cy5sZW5ndGgrIikgLSBleHBlY3RlZCAoIitPYmplY3Qua2V5cyhhLmNvbnN0cnVjdG9yX2JvZHkpLnRvU3RyaW5nKCkrIikgcGFyYW1ldGVycyBpbnN0ZWFkISIpO3JldHVybiBBLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pKSx0PU9iamVjdC5jcmVhdGUoUSx7Y29uc3RydWN0b3I6e3ZhbHVlOml9fSk7aS5wcm90b3R5cGU9dDt2YXIgYT1uZXcgaUIocixpLHQsbixJLEMsbyxlKSxEPW5ldyBHQihyLGEsITAsITEsITEpLEY9bmV3IEdCKHIrIioiLGEsITEsITEsITEpLHc9bmV3IEdCKHIrIiBjb25zdCoiLGEsITEsITAsITEpO3JldHVybiBFQltBXT17cG9pbnRlclR5cGU6Rixjb25zdFBvaW50ZXJUeXBlOnd9LGZ1bmN0aW9uKEEsQixJKXtFLmhhc093blByb3BlcnR5KEEpfHx2QSgiUmVwbGFjaW5nIG5vbmV4aXN0YW50IHB1YmxpYyBzeW1ib2wiKSx2b2lkIDAhPT1FW0FdLm92ZXJsb2FkVGFibGUmJnZvaWQgMCE9PUk/RVtBXS5vdmVybG9hZFRhYmxlW0ldPUI6KEVbQV09QixFW0FdLmFyZ0NvdW50PUkpfShzLGkpLFtELEYsd119KSl9LF9fZW1iaW5kX3JlZ2lzdGVyX2NsYXNzX2NvbnN0cnVjdG9yOmZ1bmN0aW9uKEEsQixJLGcsUSxFKXt2YXIgQz1kQihCLEkpO1E9U0IoZyxRKSxXQShbXSxbQV0sKGZ1bmN0aW9uKEEpe3ZhciBJPSJjb25zdHJ1Y3RvciAiKyhBPUFbMF0pLm5hbWU7aWYodm9pZCAwPT09QS5yZWdpc3RlcmVkQ2xhc3MuY29uc3RydWN0b3JfYm9keSYmKEEucmVnaXN0ZXJlZENsYXNzLmNvbnN0cnVjdG9yX2JvZHk9W10pLHZvaWQgMCE9PUEucmVnaXN0ZXJlZENsYXNzLmNvbnN0cnVjdG9yX2JvZHlbQi0xXSl0aHJvdyBuZXcgT0EoIkNhbm5vdCByZWdpc3RlciBtdWx0aXBsZSBjb25zdHJ1Y3RvcnMgd2l0aCBpZGVudGljYWwgbnVtYmVyIG9mIHBhcmFtZXRlcnMgKCIrKEItMSkrIikgZm9yIGNsYXNzICciK0EubmFtZSsiJyEgT3ZlcmxvYWQgcmVzb2x1dGlvbiBpcyBjdXJyZW50bHkgb25seSBwZXJmb3JtZWQgdXNpbmcgdGhlIHBhcmFtZXRlciBjb3VudCwgbm90IGFjdHVhbCB0eXBlIGluZm8hIik7cmV0dXJuIEEucmVnaXN0ZXJlZENsYXNzLmNvbnN0cnVjdG9yX2JvZHlbQi0xXT1mdW5jdGlvbigpe05CKCJDYW5ub3QgY29uc3RydWN0ICIrQS5uYW1lKyIgZHVlIHRvIHVuYm91bmQgdHlwZXMiLEMpfSxXQShbXSxDLChmdW5jdGlvbihnKXtyZXR1cm4gQS5yZWdpc3RlcmVkQ2xhc3MuY29uc3RydWN0b3JfYm9keVtCLTFdPWZ1bmN0aW9uKCl7YXJndW1lbnRzLmxlbmd0aCE9PUItMSYmVEEoSSsiIGNhbGxlZCB3aXRoICIrYXJndW1lbnRzLmxlbmd0aCsiIGFyZ3VtZW50cywgZXhwZWN0ZWQgIisoQi0xKSk7dmFyIEE9W10sQz1uZXcgQXJyYXkoQik7Q1swXT1FO2Zvcih2YXIgaT0xO2k8QjsrK2kpQ1tpXT1nW2ldLnRvV2lyZVR5cGUoQSxhcmd1bWVudHNbaS0xXSk7dmFyIG89US5hcHBseShudWxsLEMpO3JldHVybiBKQShBKSxnWzBdLmZyb21XaXJlVHlwZShvKX0sW119KSksW119KSl9LF9fZW1iaW5kX3JlZ2lzdGVyX2NsYXNzX2Z1bmN0aW9uOmZ1bmN0aW9uKEEsQixJLGcsUSxFLEMsaSl7dmFyIG89ZEIoSSxnKTtCPVZBKEIpLEU9U0IoUSxFKSxXQShbXSxbQV0sKGZ1bmN0aW9uKEEpe3ZhciBnPShBPUFbMF0pLm5hbWUrIi4iK0I7ZnVuY3Rpb24gUSgpe05CKCJDYW5ub3QgY2FsbCAiK2crIiBkdWUgdG8gdW5ib3VuZCB0eXBlcyIsbyl9aSYmQS5yZWdpc3RlcmVkQ2xhc3MucHVyZVZpcnR1YWxGdW5jdGlvbnMucHVzaChCKTt2YXIgdD1BLnJlZ2lzdGVyZWRDbGFzcy5pbnN0YW5jZVByb3RvdHlwZSxlPXRbQl07cmV0dXJuIHZvaWQgMD09PWV8fHZvaWQgMD09PWUub3ZlcmxvYWRUYWJsZSYmZS5jbGFzc05hbWUhPT1BLm5hbWUmJmUuYXJnQ291bnQ9PT1JLTI/KFEuYXJnQ291bnQ9SS0yLFEuY2xhc3NOYW1lPUEubmFtZSx0W0JdPVEpOihDQih0LEIsZyksdFtCXS5vdmVybG9hZFRhYmxlW0ktMl09USksV0EoW10sbywoZnVuY3Rpb24oUSl7dmFyIGk9TUIoZyxRLEEsRSxDKTtyZXR1cm4gdm9pZCAwPT09dFtCXS5vdmVybG9hZFRhYmxlPyhpLmFyZ0NvdW50PUktMix0W0JdPWkpOnRbQl0ub3ZlcmxvYWRUYWJsZVtJLTJdPWksW119KSksW119KSl9LF9fZW1iaW5kX3JlZ2lzdGVyX2VtdmFsOmZ1bmN0aW9uKEEsQil7akEoQSx7bmFtZTpCPVZBKEIpLGZyb21XaXJlVHlwZTpmdW5jdGlvbihBKXt2YXIgQj1MQltBXS52YWx1ZTtyZXR1cm4gZnVuY3Rpb24oQSl7QT40JiYwPT0tLUxCW0FdLnJlZmNvdW50JiYoTEJbQV09dm9pZCAwLHVCLnB1c2goQSkpfShBKSxCfSx0b1dpcmVUeXBlOmZ1bmN0aW9uKEEsQil7cmV0dXJuIEhCKEIpfSxhcmdQYWNrQWR2YW5jZTo4LHJlYWRWYWx1ZUZyb21Qb2ludGVyOmxBLGRlc3RydWN0b3JGdW5jdGlvbjpudWxsfSl9LF9fZW1iaW5kX3JlZ2lzdGVyX2Zsb2F0OmZ1bmN0aW9uKEEsQixJKXt2YXIgZz1iQShJKTtqQShBLHtuYW1lOkI9VkEoQiksZnJvbVdpcmVUeXBlOmZ1bmN0aW9uKEEpe3JldHVybiBBfSx0b1dpcmVUeXBlOmZ1bmN0aW9uKEEsQil7aWYoIm51bWJlciIhPXR5cGVvZiBCJiYiYm9vbGVhbiIhPXR5cGVvZiBCKXRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0ICInK1lCKEIpKyciIHRvICcrdGhpcy5uYW1lKTtyZXR1cm4gQn0sYXJnUGFja0FkdmFuY2U6OCxyZWFkVmFsdWVGcm9tUG9pbnRlcjpxQihCLGcpLGRlc3RydWN0b3JGdW5jdGlvbjpudWxsfSl9LF9fZW1iaW5kX3JlZ2lzdGVyX2ludGVnZXI6ZnVuY3Rpb24oQSxCLEksZyxRKXtCPVZBKEIpLC0xPT09USYmKFE9NDI5NDk2NzI5NSk7dmFyIEU9YkEoSSksQz1mdW5jdGlvbihBKXtyZXR1cm4gQX07aWYoMD09PWcpe3ZhciBpPTMyLTgqSTtDPWZ1bmN0aW9uKEEpe3JldHVybiBBPDxpPj4+aX19dmFyIG89LTEhPUIuaW5kZXhPZigidW5zaWduZWQiKTtqQShBLHtuYW1lOkIsZnJvbVdpcmVUeXBlOkMsdG9XaXJlVHlwZTpmdW5jdGlvbihBLEkpe2lmKCJudW1iZXIiIT10eXBlb2YgSSYmImJvb2xlYW4iIT10eXBlb2YgSSl0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCAiJytZQihJKSsnIiB0byAnK3RoaXMubmFtZSk7aWYoSTxnfHxJPlEpdGhyb3cgbmV3IFR5cGVFcnJvcignUGFzc2luZyBhIG51bWJlciAiJytZQihJKSsnIiBmcm9tIEpTIHNpZGUgdG8gQy9DKysgc2lkZSB0byBhbiBhcmd1bWVudCBvZiB0eXBlICInK0IrJyIsIHdoaWNoIGlzIG91dHNpZGUgdGhlIHZhbGlkIHJhbmdlIFsnK2crIiwgIitRKyJdISIpO3JldHVybiBvP0k+Pj4wOjB8SX0sYXJnUGFja0FkdmFuY2U6OCxyZWFkVmFsdWVGcm9tUG9pbnRlcjpwQihCLEUsMCE9PWcpLGRlc3RydWN0b3JGdW5jdGlvbjpudWxsfSl9LF9fZW1iaW5kX3JlZ2lzdGVyX21lbW9yeV92aWV3OmZ1bmN0aW9uKEEsQixJKXt2YXIgZz1bSW50OEFycmF5LFVpbnQ4QXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXldW0JdO2Z1bmN0aW9uIFEoQSl7dmFyIEI9WSxJPUJbQT4+PTJdLFE9QltBKzFdO3JldHVybiBuZXcgZyhCLmJ1ZmZlcixRLEkpfWpBKEEse25hbWU6ST1WQShJKSxmcm9tV2lyZVR5cGU6USxhcmdQYWNrQWR2YW5jZTo4LHJlYWRWYWx1ZUZyb21Qb2ludGVyOlF9LHtpZ25vcmVEdXBsaWNhdGVSZWdpc3RyYXRpb25zOiEwfSl9LF9fZW1iaW5kX3JlZ2lzdGVyX3N0ZF9zdHJpbmc6ZnVuY3Rpb24oQSxCKXtqQShBLHtuYW1lOkI9VkEoQiksZnJvbVdpcmVUeXBlOmZ1bmN0aW9uKEEpe2Zvcih2YXIgQj1ZW0E+PjJdLEk9bmV3IEFycmF5KEIpLGc9MDtnPEI7KytnKUlbZ109U3RyaW5nLmZyb21DaGFyQ29kZShMW0ErNCtnXSk7cmV0dXJuIEJJKEEpLEkuam9pbigiIil9LHRvV2lyZVR5cGU6ZnVuY3Rpb24oQSxCKXtmdW5jdGlvbiBJKEEsQil7cmV0dXJuIEFbQl19dmFyIGc7QiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyJiYoQj1uZXcgVWludDhBcnJheShCKSksQiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXl8fEIgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheXx8QiBpbnN0YW5jZW9mIEludDhBcnJheT9nPUk6InN0cmluZyI9PXR5cGVvZiBCP2c9ZnVuY3Rpb24oQSxCKXtyZXR1cm4gQS5jaGFyQ29kZUF0KEIpfTpUQSgiQ2Fubm90IHBhc3Mgbm9uLXN0cmluZyB0byBzdGQ6OnN0cmluZyIpO3ZhciBRPUIubGVuZ3RoLEU9SUkoNCtRKTtZW0U+PjJdPVE7Zm9yKHZhciBDPTA7QzxROysrQyl7dmFyIGk9ZyhCLEMpO2k+MjU1JiYoQkkoRSksVEEoIlN0cmluZyBoYXMgVVRGLTE2IGNvZGUgdW5pdHMgdGhhdCBkbyBub3QgZml0IGluIDggYml0cyIpKSxMW0UrNCtDXT1pfXJldHVybiBudWxsIT09QSYmQS5wdXNoKEJJLEUpLEV9LGFyZ1BhY2tBZHZhbmNlOjgscmVhZFZhbHVlRnJvbVBvaW50ZXI6bEEsZGVzdHJ1Y3RvckZ1bmN0aW9uOmZ1bmN0aW9uKEEpe0JJKEEpfX0pfSxfX2VtYmluZF9yZWdpc3Rlcl9zdGRfd3N0cmluZzpmdW5jdGlvbihBLEIsSSl7dmFyIGcsUTtJPVZBKEkpLDI9PT1CPyhnPWZ1bmN0aW9uKCl7cmV0dXJuIGx9LFE9MSk6ND09PUImJihnPWZ1bmN0aW9uKCl7cmV0dXJuIFl9LFE9MiksakEoQSx7bmFtZTpJLGZyb21XaXJlVHlwZTpmdW5jdGlvbihBKXtmb3IodmFyIEI9ZygpLEk9WVtBPj4yXSxFPW5ldyBBcnJheShJKSxDPUErND4+USxpPTA7aTxJOysraSlFW2ldPVN0cmluZy5mcm9tQ2hhckNvZGUoQltDK2ldKTtyZXR1cm4gQkkoQSksRS5qb2luKCIiKX0sdG9XaXJlVHlwZTpmdW5jdGlvbihBLEkpe3ZhciBFPWcoKSxDPUkubGVuZ3RoLGk9SUkoNCtDKkIpO1lbaT4+Ml09Qztmb3IodmFyIG89aSs0Pj5RLHQ9MDt0PEM7Kyt0KUVbbyt0XT1JLmNoYXJDb2RlQXQodCk7cmV0dXJuIG51bGwhPT1BJiZBLnB1c2goQkksaSksaX0sYXJnUGFja0FkdmFuY2U6OCxyZWFkVmFsdWVGcm9tUG9pbnRlcjpsQSxkZXN0cnVjdG9yRnVuY3Rpb246ZnVuY3Rpb24oQSl7QkkoQSl9fSl9LF9fZW1iaW5kX3JlZ2lzdGVyX3ZhbHVlX29iamVjdDpmdW5jdGlvbihBLEIsSSxnLFEsRSl7TEFbQV09e25hbWU6VkEoQikscmF3Q29uc3RydWN0b3I6U0IoSSxnKSxyYXdEZXN0cnVjdG9yOlNCKFEsRSksZmllbGRzOltdfX0sX19lbWJpbmRfcmVnaXN0ZXJfdmFsdWVfb2JqZWN0X2ZpZWxkOmZ1bmN0aW9uKEEsQixJLGcsUSxFLEMsaSxvLHQpe0xBW0FdLmZpZWxkcy5wdXNoKHtmaWVsZE5hbWU6VkEoQiksZ2V0dGVyUmV0dXJuVHlwZTpJLGdldHRlcjpTQihnLFEpLGdldHRlckNvbnRleHQ6RSxzZXR0ZXJBcmd1bWVudFR5cGU6QyxzZXR0ZXI6U0IoaSxvKSxzZXR0ZXJDb250ZXh0OnR9KX0sX19lbWJpbmRfcmVnaXN0ZXJfdm9pZDpmdW5jdGlvbihBLEIpe2pBKEEse2lzVm9pZDohMCxuYW1lOkI9VkEoQiksYXJnUGFja0FkdmFuY2U6MCxmcm9tV2lyZVR5cGU6ZnVuY3Rpb24oKXt9LHRvV2lyZVR5cGU6ZnVuY3Rpb24oQSxCKXt9fSl9LF9hYm9ydDpmdW5jdGlvbigpe0UuYWJvcnQoKX0sX2Vtc2NyaXB0ZW5fbWVtY3B5X2JpZzpmdW5jdGlvbihBLEIsSSl7cmV0dXJuIEwuc2V0KEwuc3ViYXJyYXkoQixCK0kpLEEpLEF9LF9nZXRlbnY6ZnVuY3Rpb24gQShCKXtyZXR1cm4gMD09PUI/MDooQj15KEIpLG1CLmhhc093blByb3BlcnR5KEIpPyhBLnJldCYmQkkoQS5yZXQpLEEucmV0PShJPW1CW0JdLGc9ZihJKSsxLChRPUlJKGcpKSYmUyhJLHUsUSxnKSxRKSk6MCk7dmFyIEksZyxRfSxfZ2V0Z3JuYW06ZnVuY3Rpb24oKXtFLnByaW50RXJyKCJtaXNzaW5nIGZ1bmN0aW9uOiBnZXRncm5hbSIpLGlJKC0xKX0sX2dldHB3bmFtOmZ1bmN0aW9uKCl7dGhyb3ciZ2V0cHduYW06IFRPRE8ifSxfanNDbG9zZTpmdW5jdGlvbigpe3JldHVybiBpLmNsb3NlLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sX2pzQ3JlYXRlOmZ1bmN0aW9uKEEpe3JldHVybiBpLmNyZWF0ZS5jYWxsKG51bGwsTihBKSl9LF9qc09wZW46ZnVuY3Rpb24oQSl7cmV0dXJuIGkub3Blbi5jYWxsKG51bGwsTihBKSl9LF9qc1JlYWQ6ZnVuY3Rpb24oKXtyZXR1cm4gaS5yZWFkLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sX2pzU2VlazpmdW5jdGlvbihBLEIsSSl7cmV0dXJuIGkuc2Vlay5jYWxsKG51bGwsQSxCLEcoSSkpfSxfanNUZWxsOmZ1bmN0aW9uKCl7cmV0dXJuIGkudGVsbC5hcHBseShudWxsLGFyZ3VtZW50cyl9LF9qc1dyaXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGkud3JpdGUuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxfbGx2bV9laF90eXBlaWRfZm9yOmZ1bmN0aW9uKEEpe3JldHVybiBBfSxfbG9jYWx0aW1lOmZ1bmN0aW9uKEEpe3JldHVybiBmdW5jdGlvbihBLEIpe1hCKCk7dmFyIEk9bmV3IERhdGUoMWUzKkhbQT4+Ml0pO0hbQj4+Ml09SS5nZXRTZWNvbmRzKCksSFtCKzQ+PjJdPUkuZ2V0TWludXRlcygpLEhbQis4Pj4yXT1JLmdldEhvdXJzKCksSFtCKzEyPj4yXT1JLmdldERhdGUoKSxIW0IrMTY+PjJdPUkuZ2V0TW9udGgoKSxIW0IrMjA+PjJdPUkuZ2V0RnVsbFllYXIoKS0xOTAwLEhbQisyND4+Ml09SS5nZXREYXkoKTt2YXIgZz1uZXcgRGF0ZShJLmdldEZ1bGxZZWFyKCksMCwxKSxRPShJLmdldFRpbWUoKS1nLmdldFRpbWUoKSkvODY0ZTV8MDtIW0IrMjg+PjJdPVEsSFtCKzM2Pj4yXT0tNjAqSS5nZXRUaW1lem9uZU9mZnNldCgpO3ZhciBFPW5ldyBEYXRlKDJlMyw2LDEpLmdldFRpbWV6b25lT2Zmc2V0KCksQz1nLmdldFRpbWV6b25lT2Zmc2V0KCksaT0wfChFIT1DJiZJLmdldFRpbWV6b25lT2Zmc2V0KCk9PU1hdGgubWluKEMsRSkpO0hbQiszMj4+Ml09aTt2YXIgbz1IW3ZCKyhpPzQ6MCk+PjJdO3JldHVybiBIW0IrNDA+PjJdPW8sQn0oQSx4Qil9LF9ta3RpbWU6ZnVuY3Rpb24oQSl7WEIoKTt2YXIgQj1uZXcgRGF0ZShIW0ErMjA+PjJdKzE5MDAsSFtBKzE2Pj4yXSxIW0ErMTI+PjJdLEhbQSs4Pj4yXSxIW0ErND4+Ml0sSFtBPj4yXSwwKSxJPUhbQSszMj4+Ml0sZz1CLmdldFRpbWV6b25lT2Zmc2V0KCksUT1uZXcgRGF0ZShCLmdldEZ1bGxZZWFyKCksMCwxKSxFPW5ldyBEYXRlKDJlMyw2LDEpLmdldFRpbWV6b25lT2Zmc2V0KCksQz1RLmdldFRpbWV6b25lT2Zmc2V0KCksaT1NYXRoLm1pbihDLEUpO2lmKEk8MClIW0ErMzI+PjJdPU51bWJlcihFIT1DJiZpPT1nKTtlbHNlIGlmKEk+MCE9KGk9PWcpKXt2YXIgbz1NYXRoLm1heChDLEUpLHQ9ST4wP2k6bztCLnNldFRpbWUoQi5nZXRUaW1lKCkrNmU0Kih0LWcpKX1IW0ErMjQ+PjJdPUIuZ2V0RGF5KCk7dmFyIGU9KEIuZ2V0VGltZSgpLVEuZ2V0VGltZSgpKS84NjRlNXwwO3JldHVybiBIW0ErMjg+PjJdPWUsQi5nZXRUaW1lKCkvMWUzfDB9LF9wdGhyZWFkX2dldHNwZWNpZmljOmZ1bmN0aW9uKEEpe3JldHVybiBWQltBXXx8MH0sX3B0aHJlYWRfa2V5X2NyZWF0ZTpmdW5jdGlvbihBLEIpe3JldHVybiAwPT1BP2hBLkVJTlZBTDooSFtBPj4yXT1PQixWQltPQl09MCxPQisrLDApfSxfcHRocmVhZF9vbmNlOmZ1bmN0aW9uIEEoQixJKXtBLnNlZW58fChBLnNlZW49e30pLEIgaW4gQS5zZWVufHwoRS5keW5DYWxsX3YoSSksQS5zZWVuW0JdPTEpfSxfcHRocmVhZF9zZXRzcGVjaWZpYzpmdW5jdGlvbihBLEIpe3JldHVybiBBIGluIFZCPyhWQltBXT1CLDApOmhBLkVJTlZBTH0sX3RpbWU6ZnVuY3Rpb24oQSl7dmFyIEI9RGF0ZS5ub3coKS8xZTN8MDtyZXR1cm4gQSYmKEhbQT4+Ml09QiksQn0sRFlOQU1JQ1RPUF9QVFI6YixTVEFDS1RPUDp2fTt2YXIgakI9RS5hc20oRS5hc21HbG9iYWxBcmcsRS5hc21MaWJyYXJ5QXJnLE0pO0UuYXNtPWpCO3ZhciBaQj1FLl9fR0xPQkFMX19zdWJfSV9iaW5kX2NwcD1mdW5jdGlvbigpe3JldHVybiBFLmFzbS5fX0dMT0JBTF9fc3ViX0lfYmluZF9jcHAuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxQQj1FLl9fR0xPQkFMX19zdWJfSV9icmlkZ2VfY3BwPWZ1bmN0aW9uKCl7cmV0dXJuIEUuYXNtLl9fR0xPQkFMX19zdWJfSV9icmlkZ2VfY3BwLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sekI9RS5fX0dMT0JBTF9fc3ViX0lfY3JjX2NwcD1mdW5jdGlvbigpe3JldHVybiBFLmFzbS5fX0dMT0JBTF9fc3ViX0lfY3JjX2NwcC5hcHBseShudWxsLGFyZ3VtZW50cyl9LF9CPUUuX19HTE9CQUxfX3N1Yl9JX2dsb2JhbF9jcHA9ZnVuY3Rpb24oKXtyZXR1cm4gRS5hc20uX19HTE9CQUxfX3N1Yl9JX2dsb2JhbF9jcHAuYXBwbHkobnVsbCxhcmd1bWVudHMpfSwkQj0oRS5fX19jeGFfY2FuX2NhdGNoPWZ1bmN0aW9uKCl7cmV0dXJuIEUuYXNtLl9fX2N4YV9jYW5fY2F0Y2guYXBwbHkobnVsbCxhcmd1bWVudHMpfSxFLl9fX2N4YV9pc19wb2ludGVyX3R5cGU9ZnVuY3Rpb24oKXtyZXR1cm4gRS5hc20uX19fY3hhX2lzX3BvaW50ZXJfdHlwZS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEUuX19fZXJybm9fbG9jYXRpb249ZnVuY3Rpb24oKXtyZXR1cm4gRS5hc20uX19fZXJybm9fbG9jYXRpb24uYXBwbHkobnVsbCxhcmd1bWVudHMpfSxFLl9fX2dldFR5cGVOYW1lPWZ1bmN0aW9uKCl7cmV0dXJuIEUuYXNtLl9fX2dldFR5cGVOYW1lLmFwcGx5KG51bGwsYXJndW1lbnRzKX0pLEFJPUUuX2Vtc2NyaXB0ZW5fcmVwbGFjZV9tZW1vcnk9ZnVuY3Rpb24oKXtyZXR1cm4gRS5hc20uX2Vtc2NyaXB0ZW5fcmVwbGFjZV9tZW1vcnkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxCST1FLl9mcmVlPWZ1bmN0aW9uKCl7cmV0dXJuIEUuYXNtLl9mcmVlLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sSUk9RS5fbWFsbG9jPWZ1bmN0aW9uKCl7cmV0dXJuIEUuYXNtLl9tYWxsb2MuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxnST1FLnNldFRlbXBSZXQwPWZ1bmN0aW9uKCl7cmV0dXJuIEUuYXNtLnNldFRlbXBSZXQwLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sUUk9KEUuc2V0VGhyZXc9ZnVuY3Rpb24oKXtyZXR1cm4gRS5hc20uc2V0VGhyZXcuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxFLnN0YWNrQWxsb2M9ZnVuY3Rpb24oKXtyZXR1cm4gRS5hc20uc3RhY2tBbGxvYy5hcHBseShudWxsLGFyZ3VtZW50cyl9KTtFLmR5bkNhbGxfZGlpPWZ1bmN0aW9uKCl7cmV0dXJuIEUuYXNtLmR5bkNhbGxfZGlpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRS5keW5DYWxsX2k9ZnVuY3Rpb24oKXtyZXR1cm4gRS5hc20uZHluQ2FsbF9pLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRS5keW5DYWxsX2lpPWZ1bmN0aW9uKCl7cmV0dXJuIEUuYXNtLmR5bkNhbGxfaWkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxFLmR5bkNhbGxfaWlpPWZ1bmN0aW9uKCl7cmV0dXJuIEUuYXNtLmR5bkNhbGxfaWlpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRS5keW5DYWxsX2lpaWk9ZnVuY3Rpb24oKXtyZXR1cm4gRS5hc20uZHluQ2FsbF9paWlpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRS5keW5DYWxsX2lpaWlpPWZ1bmN0aW9uKCl7cmV0dXJuIEUuYXNtLmR5bkNhbGxfaWlpaWkuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxFLmR5bkNhbGxfaWlpaWlpPWZ1bmN0aW9uKCl7cmV0dXJuIEUuYXNtLmR5bkNhbGxfaWlpaWlpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRS5keW5DYWxsX2lpaWlpaWk9ZnVuY3Rpb24oKXtyZXR1cm4gRS5hc20uZHluQ2FsbF9paWlpaWlpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRS5keW5DYWxsX2lpaWlpaWlpaWk9ZnVuY3Rpb24oKXtyZXR1cm4gRS5hc20uZHluQ2FsbF9paWlpaWlpaWlpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRS5keW5DYWxsX2lpaWlpaWppaT1mdW5jdGlvbigpe3JldHVybiBFLmFzbS5keW5DYWxsX2lpaWlpaWppaS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEUuZHluQ2FsbF9pamo9ZnVuY3Rpb24oKXtyZXR1cm4gRS5hc20uZHluQ2FsbF9pamouYXBwbHkobnVsbCxhcmd1bWVudHMpfSxFLmR5bkNhbGxfamk9ZnVuY3Rpb24oKXtyZXR1cm4gRS5hc20uZHluQ2FsbF9qaS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEUuZHluQ2FsbF92PWZ1bmN0aW9uKCl7cmV0dXJuIEUuYXNtLmR5bkNhbGxfdi5hcHBseShudWxsLGFyZ3VtZW50cyl9LEUuZHluQ2FsbF92aT1mdW5jdGlvbigpe3JldHVybiBFLmFzbS5keW5DYWxsX3ZpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRS5keW5DYWxsX3ZpaT1mdW5jdGlvbigpe3JldHVybiBFLmFzbS5keW5DYWxsX3ZpaS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEUuZHluQ2FsbF92aWlkPWZ1bmN0aW9uKCl7cmV0dXJuIEUuYXNtLmR5bkNhbGxfdmlpZC5hcHBseShudWxsLGFyZ3VtZW50cyl9LEUuZHluQ2FsbF92aWlpPWZ1bmN0aW9uKCl7cmV0dXJuIEUuYXNtLmR5bkNhbGxfdmlpaS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEUuZHluQ2FsbF92aWlpaT1mdW5jdGlvbigpe3JldHVybiBFLmFzbS5keW5DYWxsX3ZpaWlpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRS5keW5DYWxsX3ZpaWlpaT1mdW5jdGlvbigpe3JldHVybiBFLmFzbS5keW5DYWxsX3ZpaWlpaS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEUuZHluQ2FsbF92aWlpaWlpPWZ1bmN0aW9uKCl7cmV0dXJuIEUuYXNtLmR5bkNhbGxfdmlpaWlpaS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEUuZHluQ2FsbF92aWlpaWlpaWlpPWZ1bmN0aW9uKCl7cmV0dXJuIEUuYXNtLmR5bkNhbGxfdmlpaWlpaWlpaS5hcHBseShudWxsLGFyZ3VtZW50cyl9LEUuZHluQ2FsbF92aWlpaWlpaWlpaT1mdW5jdGlvbigpe3JldHVybiBFLmFzbS5keW5DYWxsX3ZpaWlpaWlpaWlpLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRS5keW5DYWxsX3Zpaj1mdW5jdGlvbigpe3JldHVybiBFLmFzbS5keW5DYWxsX3Zpai5hcHBseShudWxsLGFyZ3VtZW50cyl9LEUuZHluQ2FsbF92aWppPWZ1bmN0aW9uKCl7cmV0dXJuIEUuYXNtLmR5bkNhbGxfdmlqaS5hcHBseShudWxsLGFyZ3VtZW50cyl9O2Z1bmN0aW9uIEVJKEEpe3RoaXMubmFtZT0iRXhpdFN0YXR1cyIsdGhpcy5tZXNzYWdlPSJQcm9ncmFtIHRlcm1pbmF0ZWQgd2l0aCBleGl0KCIrQSsiKSIsdGhpcy5zdGF0dXM9QX1mdW5jdGlvbiBDSShBKXtmdW5jdGlvbiBCKCl7RS5jYWxsZWRSdW58fChFLmNhbGxlZFJ1bj0hMCxGfHwoUUF8fChRQT0hMCxfKEFBKSksXyhCQSksRS5vblJ1bnRpbWVJbml0aWFsaXplZCYmRS5vblJ1bnRpbWVJbml0aWFsaXplZCgpLGZ1bmN0aW9uKCl7aWYoRS5wb3N0UnVuKWZvcigiZnVuY3Rpb24iPT10eXBlb2YgRS5wb3N0UnVuJiYoRS5wb3N0UnVuPVtFLnBvc3RSdW5dKTtFLnBvc3RSdW4ubGVuZ3RoOylBPUUucG9zdFJ1bi5zaGlmdCgpLGdBLnVuc2hpZnQoQSk7dmFyIEE7XyhnQSl9KCkpKX1lQT4wfHwoIWZ1bmN0aW9uKCl7aWYoRS5wcmVSdW4pZm9yKCJmdW5jdGlvbiI9PXR5cGVvZiBFLnByZVJ1biYmKEUucHJlUnVuPVtFLnByZVJ1bl0pO0UucHJlUnVuLmxlbmd0aDspQT1FLnByZVJ1bi5zaGlmdCgpLCQudW5zaGlmdChBKTt2YXIgQTtfKCQpfSgpLGVBPjB8fEUuY2FsbGVkUnVufHwoRS5zZXRTdGF0dXM/KEUuc2V0U3RhdHVzKCJSdW5uaW5nLi4uIiksc2V0VGltZW91dCgoZnVuY3Rpb24oKXtzZXRUaW1lb3V0KChmdW5jdGlvbigpe0Uuc2V0U3RhdHVzKCIiKX0pLDEpLEIoKX0pLDEpKTpCKCkpKX1mdW5jdGlvbiBpSShBKXt0aHJvdyBFLm9uQWJvcnQmJkUub25BYm9ydChBKSx2b2lkIDAhPT1BPyhFLnByaW50KEEpLEUucHJpbnRFcnIoQSksQT1KU09OLnN0cmluZ2lmeShBKSk6QT0iIixGPSEwLCJhYm9ydCgiK0ErIikuIEJ1aWxkIHdpdGggLXMgQVNTRVJUSU9OUz0xIGZvciBtb3JlIGluZm8uIn1pZihFLmFzbT1qQixFSS5wcm90b3R5cGU9bmV3IEVycm9yLEVJLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1FSSxyQT1mdW5jdGlvbiBBKCl7RS5jYWxsZWRSdW58fENJKCksRS5jYWxsZWRSdW58fChyQT1BKX0sRS5ydW49Q0ksRS5leGl0PWZ1bmN0aW9uKEEsQil7QiYmRS5ub0V4aXRSdW50aW1lJiYwPT09QXx8KEUubm9FeGl0UnVudGltZXx8KEY9ITAsdj11bmRlZmluZWQsXyhJQSksRS5vbkV4aXQmJkUub25FeGl0KEEpKSxyJiZwcm9jZXNzLmV4aXQoQSksRS5xdWl0KEEsbmV3IEVJKEEpKSl9LEUuYWJvcnQ9aUksRS5wcmVJbml0KWZvcigiZnVuY3Rpb24iPT10eXBlb2YgRS5wcmVJbml0JiYoRS5wcmVJbml0PVtFLnByZUluaXRdKTtFLnByZUluaXQubGVuZ3RoPjA7KUUucHJlSW5pdC5wb3AoKSgpO3JldHVybiBFLm5vRXhpdFJ1bnRpbWU9ITAsQ0koKSxCfTtmdW5jdGlvbiBFKHtyZXNvdXJjZUlkOkEsdXJsOkJ9KXtyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKEEsUSl7aWYoIUkpdGhyb3cgbmV3IEVycm9yKCJ1bnBhY2tCcmlkZ2Ugbm90IGRldGVjdGVkIik7aWYoIWcpdGhyb3cgbmV3IEVycm9yKCJ1bnBhY2sgbm90IGRldGVjdGVkIik7KGZ1bmN0aW9uKEEpe3JldHVybiBmZXRjaChuZXcgUmVxdWVzdChBKSkudGhlbigoQT0+e2lmKEEub2spcmV0dXJuIEEuYXJyYXlCdWZmZXIoKTt0aHJvdyBuZXcgRXJyb3IoIjQwNCBFcnJvcjogRmlsZSBub3QgZm91bmQuIil9KSkudGhlbigoQT0+SS5jcmVhdGVFeHRyYWN0b3JGcm9tRGF0YShBKSkpfSkoQikudGhlbigoQj0+e0EoQi5leHRyYWN0QWxsKCkpfSksKEE9PntRKEEpfSkpfSkpfWZ1bmN0aW9uIEMoQSxCKXtjb25zdFtJLGddPUI7aWYoIkZBSUwiPT1JLnN0YXRlKXtjb25zdCBCPXt0eXBlOiJFUlJPUiIscmVhc29uOkkucmVhc29uLG1zZzpJLm1zZyxyZXNvdXJjZUlkOkEuZGF0YS5yZXNvdXJjZUlkLHVybDpBLmRhdGEudXJsfTtyZXR1cm4gdm9pZCBzZWxmLnBvc3RNZXNzYWdlKEIpfWNvbnN0IFE9e3R5cGU6IkZJTklTSEVEIixyZXNvdXJjZUlkOkEuZGF0YS5yZXNvdXJjZUlkLGVudHJpZXM6e319LEU9W107aWYoZyYmZy5maWxlcylmb3IoY29uc3QgQSBvZiBnLmZpbGVzKVEuZW50cmllc1tBLmZpbGVIZWFkZXIubmFtZV09QS5leHRyYWN0WzFdLEUucHVzaChBLmV4dHJhY3RbMV0uYnVmZmVyKTtzZWxmLnBvc3RNZXNzYWdlKFEsRSl9b25tZXNzYWdlPWZ1bmN0aW9uKEEpe2lmKCJpbml0Ij09QS5kYXRhLnR5cGUpZz1RKCJkYXRhOmFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTtiYXNlNjQsQUdGemJRRUFBQUFCcmdJbFlBRi9BWDVnQTM5L2Z3Ri9ZQU4vZm44QVlBUi9mMzkvQVg5Z0FuOS9BWDlnQUFGL1lBSi9md0JnQTM5L2Z3QmdBQUJnQVg4QmYyQUVmMzkvZndCZ0JuOS9mMzkvZndCZ0JYOS9mMzkvQUdBQ2YzOEJmR0FGZjM5L2YzOEJmMkFHZjM5L2YzOS9BWDlnQ1g5L2YzOS9mMzkvZndGL1lBaC9mMzkvZjM1L2Z3Ri9ZQUorZmdGL1lBRi9BR0FEZjM5OEFHQUpmMzkvZjM5L2YzOS9BR0FLZjM5L2YzOS9mMzkvZndCZ0FuOStBR0FIZjM5L2YzOS9md0YvWUFwL2YzOS9mMzkvZjM5L0FYOWdCMzkvZjM5L2YzOEFZQXQvZjM5L2YzOS9mMzkvZndCZ0RYOS9mMzkvZjM5L2YzOS9mMzhBWUFoL2YzOS9mMzkvZndCZ0EzOStmd0YvWUFOK2YzOEJmMkFDZm44QmYyQUdmM3gvZjM5L0FYOWdBbngvQVh4Z0EzOS9md0Y4WUFSL2YzOThBQUtJRDFjRFpXNTJCbTFsYlc5eWVRSUFnQUlEWlc1MkJYUmhZbXhsQVhBQnZBSzhBZ05sYm5ZSmRHRmliR1ZDWVhObEEzOEFBMlZ1ZGc1RVdVNUJUVWxEVkU5UVgxQlVVZ04vQUFObGJuWUlVMVJCUTB0VVQxQURmd0FEWlc1MkJXRmliM0owQUJNRFpXNTJEV1Z1YkdGeVoyVk5aVzF2Y25rQUJRTmxibllPWjJWMFZHOTBZV3hOWlcxdmNua0FCUU5sYm5ZWFlXSnZjblJQYmtOaGJtNXZkRWR5YjNkTlpXMXZjbmtBQlFObGJuWUlhVzUyYjJ0bFgya0FDUU5sYm5ZSmFXNTJiMnRsWDJscEFBUURaVzUyQ21sdWRtOXJaVjlwYVdrQUFRTmxibllMYVc1MmIydGxYMmxwYVdrQUF3TmxibllNYVc1MmIydGxYMmxwYVdscEFBNERaVzUyRG1sdWRtOXJaVjlwYVdscGFXbHBBQmdEWlc1MkVXbHVkbTlyWlY5cGFXbHBhV2xwYVdscEFCa0RaVzUyQ0dsdWRtOXJaVjkyQUJNRFpXNTJDV2x1ZG05clpWOTJhUUFHQTJWdWRncHBiblp2YTJWZmRtbHBBQWNEWlc1MkMybHVkbTlyWlY5MmFXbHBBQW9EWlc1MkRHbHVkbTlyWlY5MmFXbHBhUUFNQTJWdWRnMXBiblp2YTJWZmRtbHBhV2xwQUFzRFpXNTJEbWx1ZG05clpWOTJhV2xwYVdscEFCb0RaVzUyRVdsdWRtOXJaVjkyYVdscGFXbHBhV2xwQUJZRFpXNTJFbWx1ZG05clpWOTJhV2xwYVdscGFXbHBhUUFiQTJWdWRobGZYMTlqZUdGZllXeHNiMk5oZEdWZlpYaGpaWEIwYVc5dUFBa0RaVzUyRWw5ZlgyTjRZVjlpWldkcGJsOWpZWFJqYUFBSkEyVnVkaEJmWDE5amVHRmZaVzVrWDJOaGRHTm9BQWdEWlc1MkhGOWZYMk40WVY5bWFXNWtYMjFoZEdOb2FXNW5YMk5oZEdOb1h6SUFCUU5sYm5ZY1gxOWZZM2hoWDJacGJtUmZiV0YwWTJocGJtZGZZMkYwWTJoZk13QUpBMlZ1ZGh4ZlgxOWplR0ZmWm1sdVpGOXRZWFJqYUdsdVoxOWpZWFJqYUY4MEFBUURaVzUyRlY5ZlgyTjRZVjltY21WbFgyVjRZMlZ3ZEdsdmJnQVRBMlZ1ZGd4ZlgxOWplR0ZmZEdoeWIzY0FCd05sYm5ZSFgxOWZiRzlqYXdBVEEyVnVkZ3RmWDE5dFlYQmZabWxzWlFBRUEyVnVkaEpmWDE5eVpYTjFiV1ZGZUdObGNIUnBiMjRBRXdObGJuWUxYMTlmYzJWMFJYSnlUbThBRXdObGJuWU5YMTlmYzNselkyRnNiREUwTUFBRUEyVnVkZzFmWDE5emVYTmpZV3hzTVRRMUFBUURaVzUyRFY5ZlgzTjVjMk5oYkd3eE5EWUFCQU5sYm5ZTlgxOWZjM2x6WTJGc2JERTRNd0FFQTJWdWRnMWZYMTl6ZVhOallXeHNNVGs0QUFRRFpXNTJERjlmWDNONWMyTmhiR3d5TUFBRUEyVnVkZ3RmWDE5emVYTmpZV3hzTmdBRUEyVnVkZ3hmWDE5emVYTmpZV3hzTmpBQUJBTmxibllNWDE5ZmMzbHpZMkZzYkRnekFBUURaVzUyREY5ZlgzTjVjMk5oYkd3NU1RQUVBMlZ1ZGdsZlgxOTFibXh2WTJzQUV3TmxiblllWDE5bGJXSnBibVJmWm1sdVlXeHBlbVZmZG1Gc2RXVmZiMkpxWldOMEFCTURaVzUyRmw5ZlpXMWlhVzVrWDNKbFoybHpkR1Z5WDJKdmIyd0FEQU5sYm5ZWFgxOWxiV0pwYm1SZmNtVm5hWE4wWlhKZlkyeGhjM01BSEFObGJuWWpYMTlsYldKcGJtUmZjbVZuYVhOMFpYSmZZMnhoYzNOZlkyOXVjM1J5ZFdOMGIzSUFDd05sYm5ZZ1gxOWxiV0pwYm1SZmNtVm5hWE4wWlhKZlkyeGhjM05mWm5WdVkzUnBiMjRBSFFObGJuWVhYMTlsYldKcGJtUmZjbVZuYVhOMFpYSmZaVzEyWVd3QUJnTmxibllYWDE5bGJXSnBibVJmY21WbmFYTjBaWEpmWm14dllYUUFCd05sYm5ZWlgxOWxiV0pwYm1SZmNtVm5hWE4wWlhKZmFXNTBaV2RsY2dBTUEyVnVkaDFmWDJWdFltbHVaRjl5WldkcGMzUmxjbDl0WlcxdmNubGZkbWxsZHdBSEEyVnVkaHhmWDJWdFltbHVaRjl5WldkcGMzUmxjbDl6ZEdSZmMzUnlhVzVuQUFZRFpXNTJIVjlmWlcxaWFXNWtYM0psWjJsemRHVnlYM04wWkY5M2MzUnlhVzVuQUFjRFpXNTJIbDlmWlcxaWFXNWtYM0psWjJsemRHVnlYM1poYkhWbFgyOWlhbVZqZEFBTEEyVnVkaVJmWDJWdFltbHVaRjl5WldkcGMzUmxjbDkyWVd4MVpWOXZZbXBsWTNSZlptbGxiR1FBRmdObGJuWVdYMTlsYldKcGJtUmZjbVZuYVhOMFpYSmZkbTlwWkFBR0EyVnVkZ1pmWVdKdmNuUUFDQU5sYm5ZV1gyVnRjMk55YVhCMFpXNWZiV1Z0WTNCNVgySnBad0FCQTJWdWRnZGZaMlYwWlc1MkFBa0RaVzUyQ1Y5blpYUm5jbTVoYlFBSkEyVnVkZ2xmWjJWMGNIZHVZVzBBQ1FObGJuWUlYMnB6UTJ4dmMyVUFFd05sYm5ZSlgycHpRM0psWVhSbEFBa0RaVzUyQjE5cWMwOXdaVzRBQ1FObGJuWUhYMnB6VW1WaFpBQUJBMlZ1ZGdkZmFuTlRaV1ZyQUFFRFpXNTJDRjlxYzFkeWFYUmxBQUVEWlc1MkUxOXNiSFp0WDJWb1gzUjVjR1ZwWkY5bWIzSUFDUU5sYm5ZS1gyeHZZMkZzZEdsdFpRQUpBMlZ1ZGdkZmJXdDBhVzFsQUFrRFpXNTJGRjl3ZEdoeVpXRmtYMmRsZEhOd1pXTnBabWxqQUFrRFpXNTJFMTl3ZEdoeVpXRmtYMnRsZVY5amNtVmhkR1VBQkFObGJuWU5YM0IwYUhKbFlXUmZiMjVqWlFBRUEyVnVkaFJmY0hSb2NtVmhaRjl6WlhSemNHVmphV1pwWXdBRUEyVnVkZ1ZmZEdsdFpRQUpBMlZ1ZGhCcGJuWnZhMlZmYVdscGFXbHBhbWxwQUJrRFpXNTJDbWx1ZG05clpWOXBhbW9BRGdObGJuWUphVzUyYjJ0bFgycHBBQVFEWlc1MkNtbHVkbTlyWlY5MmFXb0FDZ05sYm5ZTGFXNTJiMnRsWDNacGFta0FEQU5sYm5ZSFgycHpWR1ZzYkFBSkE0UUVnZ1FUQVFFR0V3UUpDUk1HRXdFQkNRY0FFd2NHQnd3SkNnRUVBUWtHQ1FFVENRa0VCQVFIQkFFVEFRRUpCeE1IQXdrR0JoTUlCZ2tUQVJNRUJCTVRBUUVCSUFrSkV4TUdFd0VEQ1FJRUV3Y0VFeE1LQmdFSkRBc0lCQXdFQkFFRUJBY0pCd2tEQ2hNR0VBRVJEQUFGQ3d3S0J3TUJCd0VFQmdFSkFRRU9BUWtFQUJNQUFRWUhCQk1UQVFrVEV3WVRCaE1KQ2dZTUNnRUFCd2NHQkFjVEJBUUVBaGNLRHdRSEJ3b0JFeE1UQlFFREJBY0pEZ1FFQ1FFQkF3UUpBU0lKQVFRSkJBa0dDUUVCQndRSEJCTUJDUTRKQmdNQkV3WVRBUXdCQndjSEJoTVhCaE1IQmhNVEV3a1BCQWtURXdRR0ZSME1CZ1lHQndrVENRa0pBUUVKQVFBSkJBb1RDUWtKRXdZR0JCTUVBQUlCQVJNTUNnUU9HUllWQ0JRU0VSSUdFQTRCRFJzV0dnc01DaVFIQmhNWkdBOE9Bd0VFSXdrQkNnd0xCd0VUQ1FrSUV3WUlDZ3dMQ2d3TEFRZ0VCaDBCQVFrRUJoMEVCZ1lHQ1FNRUJBRUVBUUVCQVFFRUJBUUpBd01IQkFFaElCOERBd1FCQkFRQkJBa0JCUUVCQ1FRSkV3Z0VDUUVFSGhNREZBMEZDZ1VIQkJNRkFRY0VCZzRNQlJNSkV3Y0lBd1lQRXhNVEJnY0hCZ01FQVFZQkJnTUpDUVlUQkFZVEJoTUVCZ1FUQVJNVEJoNEdGdzhCQndrREJnUURCd2NCQkFRR0JnWUJDUWtHRXdZR0F3Y1RFd29UQmhNVEJ3b0dFd2NHQndZVEJ3Y1RGUWNIRXhNVEJna0dCZ1FMRXdRSkJBTUJFd2dKQmhvRmZ3RWpBUXQvQVNNQ0MzOEJRUUFMZndGQkFBdC9BVUVBQ3dlWEJTVVlYMTlIVEU5Q1FVeGZYM04xWWw5SlgySnBibVJmWTNCd0FORURHbDlmUjB4UFFrRk1YMTl6ZFdKZlNWOWljbWxrWjJWZlkzQndBTzBERjE5ZlIweFBRa0ZNWDE5emRXSmZTVjlqY21OZlkzQndBTklFR2w5ZlIweFBRa0ZNWDE5emRXSmZTVjluYkc5aVlXeGZZM0J3QU9vQ0VGOWZYMk40WVY5allXNWZZMkYwWTJnQWh3TVdYMTlmWTNoaFgybHpYM0J2YVc1MFpYSmZkSGx3WlFDR0F4RmZYMTlsY25KdWIxOXNiMk5oZEdsdmJnREtBdzVmWDE5blpYUlVlWEJsVG1GdFpRRFBBd1ZmWm5KbFpRQlNCMTl0WVd4c2IyTUFiQXRrZVc1RFlXeHNYMlJwYVFDRkF3bGtlVzVEWVd4c1gya0Fud0lLWkhsdVEyRnNiRjlwYVFDRUF3dGtlVzVEWVd4c1gybHBhUUNEQXd4a2VXNURZV3hzWDJscGFXa0FnZ01OWkhsdVEyRnNiRjlwYVdscGFRQ0JBdzVrZVc1RFlXeHNYMmxwYVdscGFRQ0FBdzlrZVc1RFlXeHNYMmxwYVdscGFXa0Evd0lTWkhsdVEyRnNiRjlwYVdscGFXbHBhV2xwQVA0Q0VXUjVia05oYkd4ZmFXbHBhV2xwYW1scEFPY0NDMlI1YmtOaGJHeGZhV3BxQU9ZQ0NtUjVia05oYkd4ZmFta0E1UUlKWkhsdVEyRnNiRjkyQVAwQ0NtUjVia05oYkd4ZmRta0EvQUlMWkhsdVEyRnNiRjkyYVdrQSt3SU1aSGx1UTJGc2JGOTJhV2xrQVBvQ0RHUjVia05oYkd4ZmRtbHBhUUQ1QWcxa2VXNURZV3hzWDNacGFXbHBBUGdDRG1SNWJrTmhiR3hmZG1scGFXbHBBUGNDRDJSNWJrTmhiR3hmZG1scGFXbHBhUUQyQWhKa2VXNURZV3hzWDNacGFXbHBhV2xwYVdrQTlRSVRaSGx1UTJGc2JGOTJhV2xwYVdscGFXbHBhUUQwQWd0a2VXNURZV3hzWDNacGFnRGtBZ3hrZVc1RFlXeHNYM1pwYW1rQTR3SUxjMlYwVkdWdGNGSmxkREFBM0FJSWMyVjBWR2h5WlhjQTd3SUtjM1JoWTJ0QmJHeHZZd0RUQkFuS0JBRUFJd0FMdkFMekF0b0R2Z0hvQStFRDNRUGJBLzRCdmdHK0FZRUJ6UU9QQTQ0RFg4WUVmS2tEMHdPbEJNMEV1d0ttQWNvQ3l3SzRBcFlDMFFLV0FySUJjVmpxQTU4Q3h3S0JBWUVCZ1FHQkFZRUJnUUdCQWFvQjhRSGRBdThCdmdKcWM1a0UwZ0xiQXM0RThBSE1CTG9DeVFUU0E5VUQ1QVBYQWQ4RG5BS2FBdGNCbkFLYUF0Y0J1d09pQTV3RHFnR3FBYW9COGdMaEF1QUNtQUxVQWN3RHl3UEpBN3dEbWdQNkFZd0QrZ0dlQW1tdUFXOTdlcGtCendLNkFjd0NxZ0tVQktNRTFBTmU0Z09KQXNRQnJ3T0FBY01CdFFHWEJPNERtZ1QrQTlnRHp3U0FBWUFCZ0FHQUFZQUJnQUdBQWZFQzVnUDFBYmtDa3dUMUFmQUN1UUh0QXJzQjdBTHVBcjBCM2dMVEFXSFFBdEVCdlFHOUFha0Jtd09GQVpNREZxa0JxUUdwQVdKKzRnSncxd08zQVlnQnR3RzNBWWdCdHdHSUFmd0Ird0g3QVlnQmlBR0lBWWdCOGdOVzJBSzNBcjRFdlFMRUJMWUM4d1BVQXNzRW9nR3ZBcklFcHdUU0FaWUJ0Z1NMQlBFRDZRUGdBeXVkQXAwQ1BwRURZbUppWW1KaVltSmlZbUppWW1KaVltSmloZ0hhQXBnRXBnTHZBNUVFeUFHaUF2UUR4UVJreUFUSEJKY0JXNkFFVmVRQjVRUFZBYU1EcGdPZEE2Y0RxQU9DQVlZQmhnR0dBWVlCaGdHR0Flc0MyUU4vNmdGZ3dRU3NBdllEOVFQQUJPd0RmYjBFdkFTVkJMa0VaZU1EMWdIZUE1c0NtUUxXQVpzQ21RTFdBUnQvZjM5L2YzOS85QUdYQTVRRGlBUGNBOU1DdEFUMEFid0JtQU9WQTRrRHFRTG5BN3dCdkFHb0Faa0RsZ09LQThvRXFBR29BYWdCNlFLL0JPZ0NOL01Cc0FLU0JQTUI4Z0hmQXB3QjhnRUs3SXNOZ2dUb0RRRUlmeUFBUlFSQUR3dEIwTGNES0FJQUlRSWdBRUY0YWlJRUlBQkJmR29vQWdBaUFFRjRjU0lCYWlFR0FuOGdBRUVCY1FSL0lBUWlBQVVnQkNnQ0FDRURJQUJCQTNGRkJFQVBDeUFFSUFOcklnQWdBa2tFUUE4TElBTWdBV29oQVVIVXR3TW9BZ0FnQUVZRVFDQUFJQVpCQkdvaUFpZ0NBQ0lFUVFOeFFRTkhEUUlhUWNpM0F5QUJOZ0lBSUFJZ0JFRitjVFlDQUNBQUlBRkJBWEkyQWdRZ0FDQUJhaUFCTmdJQUR3c2dBMEVEZGlFRUlBTkJnQUpKQkVBZ0FDZ0NEQ0lESUFBb0FnZ2lBa1lFUUVIQXR3TkJ3TGNES0FJQVFRRWdCSFJCZjNOeE5nSUFCU0FDSUFNMkFnd2dBeUFDTmdJSUN5QUFEQUlMSUFBb0FoZ2hCd0pBSUFBb0Fnd2lCQ0FBUmdSQUlBQkJFR29pQTBFRWFpSUNLQUlBSWdSRkJFQWdBeWdDQUNJRUJFQWdBeUVDQlVFQUlRUU1Bd3NMQTBBZ0JFRVVhaUlGS0FJQUlnTUVRQ0FESVFRZ0JTRUNEQUVMSUFSQkVHb2lCU2dDQUNJREJFQWdBeUVFSUFVaEFnd0JDd3NnQWtFQU5nSUFCU0FBS0FJSUlnSWdCRFlDRENBRUlBSTJBZ2dMQ3lBSEJIOGdBQ2dDSENJRFFRSjBRZkM1QTJvaUFpZ0NBQ0FBUmdSQUlBSWdCRFlDQUNBRVJRUkFRY1MzQTBIRXR3TW9BZ0JCQVNBRGRFRi9jM0UyQWdBZ0FBd0VDd1VnQjBFUWFpQUhLQUlRSUFCSFFRSjBhaUFFTmdJQUlBQWdCRVVOQXhvTElBUWdCellDR0NBQVFSQnFJZ0lvQWdBaUF3UkFJQVFnQXpZQ0VDQURJQVEyQWhnTElBSW9BZ1FpQWdSQUlBUWdBallDRkNBQ0lBUTJBaGdMSUFBRklBQUxDd3NpQkNBR1R3UkFEd3NnQmtFRWFpSUNLQUlBSWdOQkFYRkZCRUFQQ3lBRFFRSnhCRUFnQWlBRFFYNXhOZ0lBSUFBZ0FVRUJjallDQkNBRUlBRnFJQUUyQWdBZ0FTRUVCVUhZdHdNb0FnQWdCa1lFUUVITXR3TkJ6TGNES0FJQUlBRnFJZ0UyQWdCQjJMY0RJQUEyQWdBZ0FDQUJRUUZ5TmdJRUlBQkIxTGNES0FJQVJ3UkFEd3RCMUxjRFFRQTJBZ0JCeUxjRFFRQTJBZ0FQQzBIVXR3TW9BZ0FnQmtZRVFFSEl0d05CeUxjREtBSUFJQUZxSWdFMkFnQkIxTGNESUFRMkFnQWdBQ0FCUVFGeU5nSUVJQVFnQVdvZ0FUWUNBQThMSUFOQmVIRWdBV29oQnlBRFFRTjJJUUVDUUNBRFFZQUNTUVJBSUFZb0Fnd2lBeUFHS0FJSUlnSkdCRUJCd0xjRFFjQzNBeWdDQUVFQklBRjBRWDl6Y1RZQ0FBVWdBaUFETmdJTUlBTWdBallDQ0FzRklBWW9BaGdoQ0FKQUlBWW9BZ3dpQVNBR1JnUkFJQVpCRUdvaUEwRUVhaUlDS0FJQUlnRkZCRUFnQXlnQ0FDSUJCRUFnQXlFQ0JVRUFJUUVNQXdzTEEwQWdBVUVVYWlJRktBSUFJZ01FUUNBRElRRWdCU0VDREFFTElBRkJFR29pQlNnQ0FDSURCRUFnQXlFQklBVWhBZ3dCQ3dzZ0FrRUFOZ0lBQlNBR0tBSUlJZ0lnQVRZQ0RDQUJJQUkyQWdnTEN5QUlCRUFnQmlnQ0hDSURRUUowUWZDNUEyb2lBaWdDQUNBR1JnUkFJQUlnQVRZQ0FDQUJSUVJBUWNTM0EwSEV0d01vQWdCQkFTQURkRUYvYzNFMkFnQU1CQXNGSUFoQkVHb2dDQ2dDRUNBR1IwRUNkR29nQVRZQ0FDQUJSUTBEQ3lBQklBZzJBaGdnQmtFUWFpSUNLQUlBSWdNRVFDQUJJQU0yQWhBZ0F5QUJOZ0lZQ3lBQ0tBSUVJZ0lFUUNBQklBSTJBaFFnQWlBQk5nSVlDd3NMQ3lBQUlBZEJBWEkyQWdRZ0JDQUhhaUFITmdJQUlBQkIxTGNES0FJQVJnUkFRY2kzQXlBSE5nSUFEd1VnQnlFRUN3c2dCRUVEZGlFQklBUkJnQUpKQkVBZ0FVRURkRUhvdHdOcUlRSkJ3TGNES0FJQUlnUkJBU0FCZENJQmNRUi9JQUpCQ0dvaUFTZ0NBQVZCd0xjRElBUWdBWEkyQWdBZ0FrRUlhaUVCSUFJTElRUWdBU0FBTmdJQUlBUWdBRFlDRENBQUlBUTJBZ2dnQUNBQ05nSU1Ed3NnQkVFSWRpSUJCSDhnQkVILy8vOEhTd1IvUVI4RklBUkJEaUFCSUFGQmdQNC9ha0VRZGtFSWNTSURkQ0lDUVlEZ0gycEJFSFpCQkhFaUFTQURjaUFDSUFGMElnSkJnSUFQYWtFUWRrRUNjU0lCY21zZ0FpQUJkRUVQZG1vaUFVRUhhblpCQVhFZ0FVRUJkSElMQlVFQUN5SUZRUUowUWZDNUEyb2hBeUFBSUFVMkFod2dBRUVBTmdJVUlBQkJBRFlDRUFKQVFjUzNBeWdDQUNJQ1FRRWdCWFFpQVhFRVFDQURLQUlBSVFGQkdTQUZRUUYyYXlFQ0lBUWdCVUVmUmdSL1FRQUZJQUlMZENFRkFrQURRQ0FCS0FJRVFYaHhJQVJHRFFFZ0JVRUJkQ0VESUFGQkVHb2dCVUVmZGtFQ2RHb2lCU2dDQUNJQ0JFQWdBeUVGSUFJaEFRd0JDd3NnQlNBQU5nSUFJQUFnQVRZQ0dDQUFJQUEyQWd3Z0FDQUFOZ0lJREFJTElBRkJDR29pQWlnQ0FDSUVJQUEyQWd3Z0FpQUFOZ0lBSUFBZ0JEWUNDQ0FBSUFFMkFnd2dBRUVBTmdJWUJVSEV0d01nQWlBQmNqWUNBQ0FESUFBMkFnQWdBQ0FETmdJWUlBQWdBRFlDRENBQUlBQTJBZ2dMQzBIZ3R3TkI0TGNES0FJQVFYOXFJZ0EyQWdBZ0FBUkFEd1ZCaUxzRElRQUxBMEFnQUNnQ0FDSUJRUWhxSVFBZ0FRMEFDMEhndHdOQmZ6WUNBQXZEQXdFRGZ5QUNRWURBQUU0RVFDQUFJQUVnQWhBNkR3c2dBQ0VFSUFBZ0Ftb2hBeUFBUVFOeElBRkJBM0ZHQkVBRFFDQUFRUU54QkVBZ0FrVUVRQ0FFRHdzZ0FDQUJMQUFBT2dBQUlBQkJBV29oQUNBQlFRRnFJUUVnQWtFQmF5RUNEQUVMQ3lBRFFYeHhJZ0pCUUdvaEJRTkFJQUFnQlV3RVFDQUFJQUVvQWdBMkFnQWdBQ0FCS0FJRU5nSUVJQUFnQVNnQ0NEWUNDQ0FBSUFFb0FndzJBZ3dnQUNBQktBSVFOZ0lRSUFBZ0FTZ0NGRFlDRkNBQUlBRW9BaGcyQWhnZ0FDQUJLQUljTmdJY0lBQWdBU2dDSURZQ0lDQUFJQUVvQWlRMkFpUWdBQ0FCS0FJb05nSW9JQUFnQVNnQ0xEWUNMQ0FBSUFFb0FqQTJBakFnQUNBQktBSTBOZ0kwSUFBZ0FTZ0NPRFlDT0NBQUlBRW9BancyQWp3Z0FFRkFheUVBSUFGQlFHc2hBUXdCQ3dzRFFDQUFJQUpJQkVBZ0FDQUJLQUlBTmdJQUlBQkJCR29oQUNBQlFRUnFJUUVNQVFzTEJTQURRUVJySVFJRFFDQUFJQUpJQkVBZ0FDQUJMQUFBT2dBQUlBQWdBU3dBQVRvQUFTQUFJQUVzQUFJNkFBSWdBQ0FCTEFBRE9nQURJQUJCQkdvaEFDQUJRUVJxSVFFTUFRc0xDd05BSUFBZ0EwZ0VRQ0FBSUFFc0FBQTZBQUFnQUVFQmFpRUFJQUZCQVdvaEFRd0JDd3NnQkF1WUFnRUVmeUFBSUFKcUlRUWdBVUgvQVhFaEFTQUNRY01BVGdSQUEwQWdBRUVEY1FSQUlBQWdBVG9BQUNBQVFRRnFJUUFNQVFzTElBUkJmSEVpQlVGQWFpRUdJQUVnQVVFSWRISWdBVUVRZEhJZ0FVRVlkSEloQXdOQUlBQWdCa3dFUUNBQUlBTTJBZ0FnQUNBRE5nSUVJQUFnQXpZQ0NDQUFJQU0yQWd3Z0FDQUROZ0lRSUFBZ0F6WUNGQ0FBSUFNMkFoZ2dBQ0FETmdJY0lBQWdBellDSUNBQUlBTTJBaVFnQUNBRE5nSW9JQUFnQXpZQ0xDQUFJQU0yQWpBZ0FDQUROZ0kwSUFBZ0F6WUNPQ0FBSUFNMkFqd2dBRUZBYXlFQURBRUxDd05BSUFBZ0JVZ0VRQ0FBSUFNMkFnQWdBRUVFYWlFQURBRUxDd3NEUUNBQUlBUklCRUFnQUNBQk9nQUFJQUJCQVdvaEFBd0JDd3NnQkNBQ2F3c3JBUUYvSUFBZ0FFRUVhaUlDS0FJQUlBRnFJZ0ZCQTNZZ0FDZ0NBR28yQWdBZ0FpQUJRUWR4TmdJQUMya0JBWDhqQkNFQkl3UkIwQUJxSkFRZ0FVRkFhMEVBTmdJQUlBRkJBRFlDUkNBQlFRYzJBa2dnQUVFSU5nSUFJQUJCQkdvaUFTQUJLQUlBUVFGcU5nSUFJQUJCQ0RZQ0FDQUJJQUVvQWdCQkFXbzJBZ0JCQkJBVUlnQkJDRFlDQUNBQVFZQUlRUUFRR3d1UUFRRUNmeUFBUlFSQUlBRVFiQThMSUFGQnYzOUxCRUJCaUx3RFFRdzJBZ0JCQUE4TElBRkJDMnBCZUhFaEFpQUFRWGhxSUFGQkMwa0VmMEVRQlNBQ0N4RE9BeUlDQkVBZ0FrRUlhZzhMSUFFUWJDSUNSUVJBUVFBUEN5QUNJQUFnQUVGOGFpZ0NBQ0lEUVhoeElBTkJBM0VFZjBFRUJVRUlDMnNpQXlBQlNRUi9JQU1GSUFFTEVGTWFJQUFRVWlBQ0MwSUJBbjhnQUNnQ0RDSUJJQUFvQWdBaUFrRUJhbW90QUFCQkNIUWdBU0FDYWkwQUFFRVFkSElnQVNBQ1FRSnFhaTBBQUhKQkNDQUFLQUlFYTNaQi8vOERjUXNvQVFKL0lBQWhBUU5BSUFGQkJHb2hBaUFCS0FJQUJFQWdBaUVCREFFTEN5QUJJQUJyUVFKMUN3b0FJQUFRRlJvUWtBTUxKQUVCZnlBQlJRUkFEd3NEUUNBQUlBSnFRUUE2QUFBZ0FrRUJhaUlDSUFGSERRQUxDeVlCQVg4Z0FFRUFPZ0NBQkFOQUlBQWdBV3BCQURvQUFDQUJRUUZxSWdGQmdBUkhEUUFMQzEwQkFYOGdBU0FBU0NBQUlBRWdBbXBJY1FSQUlBRWdBbW9oQVNBQUlnTWdBbW9oQUFOQUlBSkJBRW9FUUNBQ1FRRnJJUUlnQUVFQmF5SUFJQUZCQVdzaUFTd0FBRG9BQUF3QkN3c2dBeUVBQlNBQUlBRWdBaEJUR2dzZ0FBdVBCUUlRZndOK0lBSkJjSEVoQkNBQklRVWdBRUcxQVdvaUNTd0FBRVVFUUNBQ0lRUUxJQUJCTEdvaERTQUFRU0JxSVFvZ0FFSFJBR29oRGlBQVFUaHFJUThnQUVHUUFXb2hFQ0FBUWZBQWFpRUxJQUJCekFCcUlSRWdBRUVJYWlFU0lBQkJCR29oREFKQUFrQURRQ0FFUlFSQUlBTWhBZ3dDQ3lBTktBSUFJUWNnQUN3QUFBUkFJQUVnRWlnQ0FDQU1LQUlBRUZNYUlBd29BZ0FoQWlBTVFRQTJBZ0FGSUFvcEF3QWlFeUFFclZNaENDQVRweUVDSUFnRWZ5QUNCU0FFSWdJTEJFQWdEaXdBQUFSQUlBa3NBQUFFUUNBQ0lBSWdCbXBCRDNGcklnTkJBRW9FUUNBRElRSUxJQWhGQkVBZ0JDRUNDd3NMSUFjb0FnUkZEUVFnQnlBRklBSWdCeWdDQUNnQ0RFRWZjVUhLQUdvUkFRQWhBaUFIUWJDbkFXb2hDQ0FQS0FJQUlnTUVmeUFEQlNBSUMwR0p3UUJxTEFBQUJFQWdFQ0FGSUFJUXF3SUxCU0FESVFJTEN5QUxJQXNwQXdBZ0Fxd2lFM3czQXdBZ0FpQUdhaUVHSUFvZ0Npa0RBQ0FUZlNJVE53TUFJQk5DQUZFZ0Rpd0FBRUVBUjNGRkRRRWdBZ1JBSUFaQkQzRkZJQWtzQUFCRmNnMENDeUFGSUFKcUlRVWdCQ0FDYXlFRUlBY2dBRUVCSUJFb0FnQVF0UUVFUUNBQ0lRTU1BUXNMSUFCQkFUb0FVa0YvRHdzZ0RTZ0NBQ0lEQkVBZ0N5a0RBQ0FEUVlpOEEyb3BBd0I4SVJRZ0FDd0FLQVJBSUFBcEExZ2hGU0FBS1FPSUFTSVRRZ0JSQkVBZ0ZTRVRCU0FBS1FPQUFTQVVmQ0VVQ3lBRFFhenpBR29vQWdBaEF5QVRJQlJUQkg5QjVBQUZJQk5DQUZFRWYwRUFCU0FVUXVRQWZpQVRmNmNMQ3lFRklBTkJ6SVFEYWl3QUFFVUVRQ0FGSUFCQnlBQnFJZ01vQWdCSEJFQWdBeUFGTmdJQUN3c0xDeUFDUVg5R0JFQkJmeUVHQlNBSkxBQUFCRUFnQUNnQ1JDQUJJQVlRNmdFTEN4Q0ZBU0FHRHd0QmZ3dGlBUUYvSUFCRkJFQkJBU0VBQ3dKQUFrQUNRQU5BSUFBUWJDSUJEUUpCc0x3RFFiQzhBeWdDQUNJQk5nSUFJQUZGRFFFZ0FVRUhjVUdPQVdvUkNBQU1BQXNBQzBFRUVCUWlBRUhFSlRZQ0FDQUFRZGdLUVFvUUd3d0JDeUFCRHd0QkFBdFRBUUYvSXdRaEFDTUVRZUFnYWlRRUlBQkJnQ0JxSWdNZ0FqWUNBQ0FBUVlBSUlBRWdBeENBQWhvZ0FFR1FJR29pQVVFQU5nSkVJQUZCQVRZQ1NDQUJRVUJyUVFFMkFnQWdBU0FBTmdJQUlBQWtCQXQ2QWdWL0FYNGdBRUVZYWlJREtBSUFJZ0VnQUNnQ0ZDSUVUd1JBUWdBUEN5QUFLQUlBSVFVZ0FTRUFBa0FEUUNBRElBQkJBV29pQVRZQ0FDQUZJQUJxTFFBQUlnQkIvd0J4clNBQ3JZWWdCbndoQmlBQVFZQUJjVVVOQVNBQ1FRZHFJUUlnQVNBRVNRUkFJQUVoQUF3QkJVSUFJUVlMQ3dzZ0Jnc0dBRUVORUFBTEdBQWdBQ2dDQUVFZ2NVVUVRQ0FCSUFJZ0FCQ05BaG9MQys0Q0FRRi9Ba0FDUUFKQUFrQUNRQ0FCUVFGckR2OEJBQUlCQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01BQXdzZ0FDZ0NBRVVFUUNBQUlBRTJBZ0FMREFNTElBQW9BZ0JCQzBjRVFDQUFRUU0yQWdBTERBSUxJQUFvQWdCQkFra0VRQ0FBUVFJMkFnQUxEQUVMSUFBZ0FUWUNBQXNnQUVFRWFpSUNJQUlvQWdCQkFXbzJBZ0FMcmdJQkFuOGdBQ2dDTEVHczh3QnFLQUlBSWdOQnBNc0VhaWdDQUFSQUlBTkJzTXNFYWlnQ0FDSUVCRUJCQVNBRFFhekxCR29vQWdBZ0FTQUNJQVJCRDNGQjZnQnFFUU1BUVg5R0JFQkJyUFVDUWY4QkVLUUJDd3NnQTBHNHl3UnFLQUlBSWdNRVFDQUJJQUlnQTBFZmNVRXFhaEVFQUVVRVFFR3M5UUpCL3dFUXBBRUxDd3NnQUNBQk5nSWNJQUFnQWpZQ0dDQUFMQUFNQkVBZ0FFRVFhaUlES0FJQUlBSlBCRUFnQUVFVWFpSUVLQUlBSUFFZ0FoQlRHaUFFSUFRb0FnQWdBbW8yQWdBZ0F5QURLQUlBSUFKck5nSUFDd1VnQUN3QUtVVUVRQUovSUFBb0FqQWhBMEVCSUFKRkRRQWFJQU1vQWdRZ0FTQUNFRU1MR2dzTElBQkIrQUJxSWdNZ0F5a0RBQ0FDclh3M0F3QWdBQ3dBS2dSQUVJVUJEd3NnQUVHb0FXb2dBU0FDRUtzQ0VJVUJDNEFCQVFGL0l3UWhCU01FUVlBQ2FpUUVJQUlnQTBvZ0JFR0F3QVJ4UlhFRVFDQUZJQUZCR0hSQkdIVWdBaUFEYXlJQlFZQUNTUVIvSUFFRlFZQUNDeEJVR2lBQlFmOEJTd1JBSUFJZ0Eyc2hBZ05BSUFBZ0JVR0FBaEJqSUFGQmdINXFJZ0ZCL3dGTERRQUxJQUpCL3dGeElRRUxJQUFnQlNBQkVHTUxJQVVrQkFzckFDQUFRZjhCY1VFWWRDQUFRUWgxUWY4QmNVRVFkSElnQUVFUWRVSC9BWEZCQ0hSeUlBQkJHSFp5QzQwSkFSQi9Jd1FoQnlNRVFZQUJhaVFFSUFJZ0F6WUNBQ0FIUVVCcklnUkNBRGNDQUNBRVFnQTNBZ2dnQkVJQU53SVFJQVJDQURjQ0dDQUVRZ0EzQWlBZ0JFSUFOd0lvSUFSQ0FEY0NNQ0FFUWdBM0FqZ2dBMFVpRXdSL0lBUkJKR29oRUNBRVFTaHFJUkZCQUFWQkFDRUFBMEFnQkNBQklBQnFMQUFBUVE5eFFRSjBhaUlGSUFVb0FnQkJBV28yQWdBZ0FFRUJhaUlBSUFOSERRQUxJQVJCSkdvaUFDRVFJQVJCS0dvaUNpRVJJQVFvQWdnaEJpQUVLQUlNSVFnZ0JDZ0NFQ0VKSUFRb0FoUWhDeUFFS0FJWUlRd2dCQ2dDSENFTklBUW9BaUFoRGlBQUtBSUFJUklnQ2lnQ0FDRUtJQVFvQWdRTElRVWdCRUVBTmdJQUlBSkJpQmxxUVFBZ0EwRUJkQkJVR2lBQ1FjUUFhaUlBUVFBMkFnQWdBa0VBTmdJRUlBSWdCVUVQZERZQ0NDQUNRUUEyQWtnZ0FpQUdJQVZCQVhScUlnOUJEblEyQWd3Z0FpQUZOZ0pNSUFJZ0NDQVBRUUYwYWlJUFFRMTBOZ0lRSUFJZ0JpQUZhaUlGTmdKUUlBSWdDU0FQUVFGMGFpSUdRUXgwTmdJVUlBSWdDQ0FGYWlJRk5nSlVJQUlnQ3lBR1FRRjBhaUlHUVF0ME5nSVlJQUlnQ1NBRmFpSUZOZ0pZSUFJZ0RDQUdRUUYwYWlJR1FRcDBOZ0ljSUFJZ0N5QUZhaUlGTmdKY0lBSWdEU0FHUVFGMGFpSUdRUWwwTmdJZ0lBSWdEQ0FGYWlJRk5nSmdJQUlnRGlBR1FRRjBhaUlHUVFoME5nSWtJQUlnRFNBRmFpSUZOZ0prSUFJZ0VpQUdRUUYwYWlJR1FRZDBOZ0lvSUFJZ0RpQUZhaUlGTmdKb0lBSWdDaUFHUVFGMGFpSUdRUVowTmdJc0lBSWdFQ2dDQUNBRmFpSUZOZ0pzSUFJZ0JDZ0NMQ0lJSUFaQkFYUnFJZ1pCQlhRMkFqQWdBaUFSS0FJQUlBVnFJZ1UyQW5BZ0FpQUVLQUl3SWdrZ0JrRUJkR29pQmtFRWREWUNOQ0FDSUFnZ0JXb2lCVFlDZENBQ0lBUW9BalFpQ0NBR1FRRjBhaUlHUVFOME5nSTRJQUlnQ1NBRmFpSUZOZ0o0SUFJZ0JDZ0NPQ0lKSUFaQkFYUnFJZ1pCQW5RMkFqd2dBaUFJSUFWcUlnVTJBbndnQWtGQWF5QUVLQUk4SUFaQkFYUnFRUUYwTmdJQUlBSWdDU0FGYWpZQ2dBRWdCeUFBS1FJQU53SUFJQWNnQUNrQ0NEY0NDQ0FISUFBcEFoQTNBaEFnQnlBQUtRSVlOd0lZSUFjZ0FDa0NJRGNDSUNBSElBQXBBaWczQWlnZ0J5QUFLUUl3TndJd0lBY2dBQ2tDT0RjQ09BSkFBa0FnRXcwQVFRQWhBQU5BSUFFZ0FHb3NBQUJCRDNFaUJBUkFJQUpCaUJscUlBY2dCRUVDZEdvaUJDZ0NBQ0lGUVFGMGFpQUFPd0VBSUFRZ0JVRUJhallDQUFzZ0FFRUJhaUlBSUFOSERRQUxBa0FDUUFKQUlBTkJxZ0pyRGdrQUFBRUJBUUVCQVFBQkMwRUtJUVFNQVFzTUFRc01BUXRCQnlFRUN5QUNRWVFCYWlJRklBUTJBZ0JCQVNBRWRDRUdRUUFoQVVFQklRQURRQ0FCUVJBZ0JHdDBJUVFDUUNBQVFSQkpCRUFEUUNBRUlBSkJCR29nQUVFQ2RHb29BZ0JKRFFJZ0FFRUJhaUlBUVJCSkRRQkJFQ0VBQ3dzTElBSkJpQUZxSUFGcUlBQTZBQUFnQWtHSUNXb2dBVUVCZEdvZ0JDQUNJQUJCQW5ScUtBSUFhMEVRSUFCcmRpQUNRY1FBYWlBQVFRSjBhaWdDQUdvaUJDQURTUVIvSUFKQmlCbHFJQVJCQVhScUxnRUFCVUVBQ3lJRU93RUFJQUZCQVdvaUFTQUdTUVJBSUFVb0FnQWhCQXdCQ3dzZ0J5UUVDNmNEQVFaL0l3UWhBeU1FUVJCcUpBUWdBMEVJYWlFRUlBRkJBRG9BQUFKQUlBQkIvdjhERUhRRVFFR3NJeWdDQUNnQ0FBUi9RUVFGUVFFTElBSkdCRUJCQVNFRUJVRUJJUVFEUUFKQUFrQUNRQU5BQWtBZ0FDQUhRUUowYWlnQ0FDSUZRZjcvQTBnTkFpQUZRZjcvQTJzTkFDQUhRUUZxSVFjZ0JpQUNRYXdqS0FJQUtBSUFCSDlCQkFWQkFRdHJTUTBCREFnTEN3d0JDeUFGUlEwQkN5QUhRUUZxSVFjZ0JVR0FmM0ZCZ01FRFJnUi9JQUVnQm1vZ0JUb0FBQ0FHUVFGcUJTQURRZ0EzQXdBZ0FTQUdhaUlJSUFVZ0F4Q1JBVUYvUmdSQVFRQWhCQXNnQTBJQU53TUFJQWhCckNNb0FnQW9BZ0FFZjBFRUJVRUJDeUFERUlnQ0lnVkJBVW9FZnlBRkJVRUJDeUFHYWdzaUJpQUNRYXdqS0FJQUtBSUFCSDlCQkFWQkFRdHJTUTBCREFRTEN5QUJJQVpxUVFBNkFBQUxCU0FEUWdBM0F3QWdCQ0FBTmdJQUFuOENRQUpBQWtBZ0FTQUVJQUlnQXhDNEEwRi9hdzRDQUFFQ0MwRUFEQUlMSUFBb0FnQkZEQUVMUVFFTElRUUxDeUFDUlFSQUlBTWtCQ0FFUWY4QmNVRUFSdzhMSUFFZ0FrRi9hbXBCQURvQUFDQURKQVFnQkVIL0FYRkJBRWNMTmdFRGZ5QUFJUUlEUUNBQlFRUnFJUU1nQWtFRWFpRUVJQUlnQVNnQ0FDSUJOZ0lBSUFFRVFDQUVJUUlnQXlFQkRBRUxDeUFBQzFBQkFuOENmeUFDQkg4RFFDQUFMQUFBSWdNZ0FTd0FBQ0lFUmdSQUlBQkJBV29oQUNBQlFRRnFJUUZCQUNBQ1FYOXFJZ0pGRFFNYURBRUxDeUFEUWY4QmNTQUVRZjhCY1dzRlFRQUxDeUlBQzQ0M0FReC9Ba0FDUUFKQUl3UWhBU01FUVJCcUpBUWdBU0VLQWtBZ0FFSDFBVWtFUUNBQVFRdHFRWGh4SVFKQndMY0RLQUlBSWdZZ0FFRUxTUVIvUVJBaUFnVWdBZ3RCQTNZaUFIWWlBVUVEY1FSQUlBRkJBWEZCQVhNZ0FHb2lBRUVEZEVIb3R3TnFJZ0ZCQ0dvaUJTZ0NBQ0lDUVFocUlnUW9BZ0FpQXlBQlJnUkFRY0MzQXlBR1FRRWdBSFJCZjNOeE5nSUFCU0FESUFFMkFnd2dCU0FETmdJQUN5QUNJQUJCQTNRaUFFRURjallDQkNBQ0lBQnFRUVJxSWdBZ0FDZ0NBRUVCY2pZQ0FDQUtKQVFnQkE4TElBSkJ5TGNES0FJQUlnaExCRUFnQVFSQUlBRWdBSFJCQWlBQWRDSUFRUUFnQUd0eWNTSUFRUUFnQUd0eFFYOXFJZ0ZCREhaQkVIRWhBQ0FCSUFCMklnRkJCWFpCQ0hFaUF5QUFjaUFCSUFOMklnQkJBblpCQkhFaUFYSWdBQ0FCZGlJQVFRRjJRUUp4SWdGeUlBQWdBWFlpQUVFQmRrRUJjU0lCY2lBQUlBRjJhaUlEUVFOMFFlaTNBMm9pQUVFSWFpSUVLQUlBSWdGQkNHb2lCeWdDQUNJRklBQkdCRUJCd0xjRElBWkJBU0FEZEVGL2MzRWlBRFlDQUFVZ0JTQUFOZ0lNSUFRZ0JUWUNBQ0FHSVFBTElBRWdBa0VEY2pZQ0JDQUJJQUpxSWdRZ0EwRURkQ0lESUFKcklnVkJBWEkyQWdRZ0FTQURhaUFGTmdJQUlBZ0VRRUhVdHdNb0FnQWhBeUFJUVFOMklnSkJBM1JCNkxjRGFpRUJJQUJCQVNBQ2RDSUNjUVIvSUFGQkNHb2lBaWdDQUFWQndMY0RJQUFnQW5JMkFnQWdBVUVJYWlFQ0lBRUxJUUFnQWlBRE5nSUFJQUFnQXpZQ0RDQURJQUEyQWdnZ0F5QUJOZ0lNQzBISXR3TWdCVFlDQUVIVXR3TWdCRFlDQUNBS0pBUWdCdzhMUWNTM0F5Z0NBQ0lNQkVBZ0RFRUFJQXhyY1VGL2FpSUJRUXgyUVJCeElRQWdBU0FBZGlJQlFRVjJRUWh4SWdNZ0FISWdBU0FEZGlJQVFRSjJRUVJ4SWdGeUlBQWdBWFlpQUVFQmRrRUNjU0lCY2lBQUlBRjJJZ0JCQVhaQkFYRWlBWElnQUNBQmRtcEJBblJCOExrRGFpZ0NBQ0lES0FJRVFYaHhJQUpySVFFZ0EwRVFhaUFES0FJUVJVRUNkR29vQWdBaUFBUkFBMEFnQUNnQ0JFRjRjU0FDYXlJRklBRkpJZ1FFUUNBRklRRUxJQVFFUUNBQUlRTUxJQUJCRUdvZ0FDZ0NFRVZCQW5ScUtBSUFJZ0FOQUNBQklRVUxCU0FCSVFVTElBTWdBbW9pQ3lBRFN3UkFJQU1vQWhnaENRSkFJQU1vQWd3aUFDQURSZ1JBSUFOQkZHb2lBU2dDQUNJQVJRUkFJQU5CRUdvaUFTZ0NBQ0lBUlFSQVFRQWhBQXdEQ3dzRFFDQUFRUlJxSWdRb0FnQWlCd1JBSUFjaEFDQUVJUUVNQVFzZ0FFRVFhaUlFS0FJQUlnY0VRQ0FISVFBZ0JDRUJEQUVMQ3lBQlFRQTJBZ0FGSUFNb0FnZ2lBU0FBTmdJTUlBQWdBVFlDQ0FzTEFrQWdDUVJBSUFNZ0F5Z0NIQ0lCUVFKMFFmQzVBMm9pQkNnQ0FFWUVRQ0FFSUFBMkFnQWdBRVVFUUVIRXR3TWdERUVCSUFGMFFYOXpjVFlDQUF3REN3VWdDVUVRYWlBSktBSVFJQU5IUVFKMGFpQUFOZ0lBSUFCRkRRSUxJQUFnQ1RZQ0dDQURLQUlRSWdFRVFDQUFJQUUyQWhBZ0FTQUFOZ0lZQ3lBREtBSVVJZ0VFUUNBQUlBRTJBaFFnQVNBQU5nSVlDd3NMSUFWQkVFa0VRQ0FESUFVZ0Ftb2lBRUVEY2pZQ0JDQURJQUJxUVFScUlnQWdBQ2dDQUVFQmNqWUNBQVVnQXlBQ1FRTnlOZ0lFSUFzZ0JVRUJjallDQkNBTElBVnFJQVUyQWdBZ0NBUkFRZFMzQXlnQ0FDRUVJQWhCQTNZaUFVRURkRUhvdHdOcUlRQWdCa0VCSUFGMElnRnhCSDhnQUVFSWFpSUNLQUlBQlVIQXR3TWdCaUFCY2pZQ0FDQUFRUWhxSVFJZ0FBc2hBU0FDSUFRMkFnQWdBU0FFTmdJTUlBUWdBVFlDQ0NBRUlBQTJBZ3dMUWNpM0F5QUZOZ0lBUWRTM0F5QUxOZ0lBQ3lBS0pBUWdBMEVJYWc4RklBSWhBQXNGSUFJaEFBc0ZJQUloQUFzRklBQkJ2MzlMQkVCQmZ5RUFCU0FBUVF0cUlnQkJlSEVoQTBIRXR3TW9BZ0FpQlFSQUlBQkJDSFlpQUFSL0lBTkIvLy8vQjBzRWYwRWZCU0FEUVE0Z0FDQUFRWUQrUDJwQkVIWkJDSEVpQUhRaUFVR0E0QjlxUVJCMlFRUnhJZ0lnQUhJZ0FTQUNkQ0lBUVlDQUQycEJFSFpCQW5FaUFYSnJJQUFnQVhSQkQzWnFJZ0JCQjJwMlFRRnhJQUJCQVhSeUN3VkJBQXNoQ0VFQUlBTnJJUUlDUUFKQUlBaEJBblJCOExrRGFpZ0NBQ0lBQkVCQkdTQUlRUUYyYXlFRVFRQWhBU0FESUFoQkgwWUVmMEVBQlNBRUMzUWhCMEVBSVFRRFFDQUFLQUlFUVhoeElBTnJJZ1lnQWtrRVFDQUdCRUFnQUNFQklBWWhBZ1ZCQUNFQ0lBQWhBUXdFQ3dzZ0FDZ0NGQ0lHUlNBR0lBQkJFR29nQjBFZmRrRUNkR29vQWdBaUFFWnlSUVJBSUFZaEJBc2dCeUFBUlNJR1FRRnpkQ0VISUFaRkRRQUxCVUVBSVFFTElBUWdBWElFZnlBRUJTQUZRUUlnQ0hRaUFFRUFJQUJyY25FaUFFVUVRQ0FESVFBTUJ3c2dBRUVBSUFCcmNVRi9haUlFUVF4MlFSQnhJUUJCQUNFQklBUWdBSFlpQkVFRmRrRUljU0lISUFCeUlBUWdCM1lpQUVFQ2RrRUVjU0lFY2lBQUlBUjJJZ0JCQVhaQkFuRWlCSElnQUNBRWRpSUFRUUYyUVFGeElnUnlJQUFnQkhacVFRSjBRZkM1QTJvb0FnQUxJZ0FOQUNBQklRUU1BUXNEUUNBQUtBSUVRWGh4SUFOcklnUWdBa2tpQndSQUlBUWhBZ3NnQndSQUlBQWhBUXNnQUVFUWFpQUFLQUlRUlVFQ2RHb29BZ0FpQUEwQUlBRWhCQXNMSUFRRVFDQUNRY2kzQXlnQ0FDQURhMGtFUUNBRUlBTnFJZ2dnQkUwTkJpQUVLQUlZSVFrQ1FDQUVLQUlNSWdBZ0JFWUVRQ0FFUVJScUlnRW9BZ0FpQUVVRVFDQUVRUkJxSWdFb0FnQWlBRVVFUUVFQUlRQU1Bd3NMQTBBZ0FFRVVhaUlIS0FJQUlnWUVRQ0FHSVFBZ0J5RUJEQUVMSUFCQkVHb2lCeWdDQUNJR0JFQWdCaUVBSUFjaEFRd0JDd3NnQVVFQU5nSUFCU0FFS0FJSUlnRWdBRFlDRENBQUlBRTJBZ2dMQ3dKQUlBa0VRQ0FFSUFRb0Fod2lBVUVDZEVId3VRTnFJZ2NvQWdCR0JFQWdCeUFBTmdJQUlBQkZCRUJCeExjRElBVkJBU0FCZEVGL2MzRWlBRFlDQUF3REN3VWdDVUVRYWlBSktBSVFJQVJIUVFKMGFpQUFOZ0lBSUFCRkJFQWdCU0VBREFNTEN5QUFJQWsyQWhnZ0JDZ0NFQ0lCQkVBZ0FDQUJOZ0lRSUFFZ0FEWUNHQXNnQkNnQ0ZDSUJCRUFnQUNBQk5nSVVJQUVnQURZQ0dBc0xJQVVoQUFzQ1FDQUNRUkJKQkVBZ0JDQUNJQU5xSWdCQkEzSTJBZ1FnQkNBQWFrRUVhaUlBSUFBb0FnQkJBWEkyQWdBRklBUWdBMEVEY2pZQ0JDQUlJQUpCQVhJMkFnUWdDQ0FDYWlBQ05nSUFJQUpCQTNZaEFTQUNRWUFDU1FSQUlBRkJBM1JCNkxjRGFpRUFRY0MzQXlnQ0FDSUNRUUVnQVhRaUFYRUVmeUFBUVFocUlnSW9BZ0FGUWNDM0F5QUNJQUZ5TmdJQUlBQkJDR29oQWlBQUN5RUJJQUlnQ0RZQ0FDQUJJQWcyQWd3Z0NDQUJOZ0lJSUFnZ0FEWUNEQXdDQ3lBQ1FRaDJJZ0VFZnlBQ1FmLy8vd2RMQkg5Qkh3VWdBa0VPSUFFZ0FVR0EvajlxUVJCMlFRaHhJZ0YwSWdOQmdPQWZha0VRZGtFRWNTSUZJQUZ5SUFNZ0JYUWlBVUdBZ0E5cVFSQjJRUUp4SWdOeWF5QUJJQU4wUVE5MmFpSUJRUWRxZGtFQmNTQUJRUUYwY2dzRlFRQUxJZ0ZCQW5SQjhMa0RhaUVESUFnZ0FUWUNIQ0FJUVJCcUlnVkJBRFlDQkNBRlFRQTJBZ0FnQUVFQklBRjBJZ1Z4UlFSQVFjUzNBeUFBSUFWeU5nSUFJQU1nQ0RZQ0FDQUlJQU0yQWhnZ0NDQUlOZ0lNSUFnZ0NEWUNDQXdDQ3lBREtBSUFJUUJCR1NBQlFRRjJheUVESUFJZ0FVRWZSZ1IvUVFBRklBTUxkQ0VCQWtBRFFDQUFLQUlFUVhoeElBSkdEUUVnQVVFQmRDRURJQUJCRUdvZ0FVRWZka0VDZEdvaUFTZ0NBQ0lGQkVBZ0F5RUJJQVVoQUF3QkN3c2dBU0FJTmdJQUlBZ2dBRFlDR0NBSUlBZzJBZ3dnQ0NBSU5nSUlEQUlMSUFCQkNHb2lBU2dDQUNJQ0lBZzJBZ3dnQVNBSU5nSUFJQWdnQWpZQ0NDQUlJQUEyQWd3Z0NFRUFOZ0lZQ3dzZ0NpUUVJQVJCQ0dvUEJTQURJUUFMQlNBRElRQUxCU0FESVFBTEN3c0xRY2kzQXlnQ0FDSUNJQUJQQkVCQjFMY0RLQUlBSVFFZ0FpQUFheUlEUVE5TEJFQkIxTGNESUFFZ0FHb2lCVFlDQUVISXR3TWdBellDQUNBRklBTkJBWEkyQWdRZ0FTQUNhaUFETmdJQUlBRWdBRUVEY2pZQ0JBVkJ5TGNEUVFBMkFnQkIxTGNEUVFBMkFnQWdBU0FDUVFOeU5nSUVJQUVnQW1wQkJHb2lBQ0FBS0FJQVFRRnlOZ0lBQ3d3REMwSE10d01vQWdBaUFpQUFTd1JBUWN5M0F5QUNJQUJySWdJMkFnQU1BZ3RCbUxzREtBSUFCSDlCb0xzREtBSUFCVUdndXdOQmdDQTJBZ0JCbkxzRFFZQWdOZ0lBUWFTN0EwRi9OZ0lBUWFpN0EwRi9OZ0lBUWF5N0EwRUFOZ0lBUWZ5NkEwRUFOZ0lBUVppN0F5QUtRWEJ4UWRpcTFhb0ZjellDQUVHQUlBc2lBU0FBUVM5cUlnUnFJZ2RCQUNBQmF5SUdjU0lGSUFCTkRRQkIrTG9ES0FJQUlnRUVRRUh3dWdNb0FnQWlBeUFGYWlJSUlBTk5JQWdnQVV0eURRRUxJQUJCTUdvaENBSkFBa0JCL0xvREtBSUFRUVJ4QkVCQkFDRUNCUUpBQWtBQ1FFSFl0d01vQWdBaUFVVU5BRUdBdXdNaEF3TkFBa0FnQXlnQ0FDSUpJQUZOQkVBZ0NTQURRUVJxSWdrb0FnQnFJQUZMRFFFTElBTW9BZ2dpQXcwQkRBSUxDeUFISUFKcklBWnhJZ0pCLy8vLy93ZEpCRUFnQWhDSEFTSUJJQU1vQWdBZ0NTZ0NBR3BHQkVBZ0FVRi9SdzBHQlF3REN3VkJBQ0VDQ3d3Q0MwRUFFSWNCSWdGQmYwWUVRRUVBSVFJRlFaeTdBeWdDQUNJQ1FYOXFJZ01nQVdwQkFDQUNhM0VnQVdzaEFpQURJQUZ4Qkg4Z0FnVkJBQXNnQldvaUFrSHd1Z01vQWdBaUIyb2hBeUFDSUFCTElBSkIvLy8vL3dkSmNRUkFRZmk2QXlnQ0FDSUdCRUFnQXlBSFRTQURJQVpMY2dSQVFRQWhBZ3dGQ3dzZ0FoQ0hBU0lESUFGR0RRVWdBeUVCREFJRlFRQWhBZ3NMREFFTElBZ2dBa3NnQWtILy8vLy9CMGtnQVVGL1IzRnhSUVJBSUFGQmYwWUVRRUVBSVFJTUFnVU1CQXNBQ3lBRUlBSnJRYUM3QXlnQ0FDSURha0VBSUFOcmNTSURRZi8vLy84SFR3MENRUUFnQW1zaEJDQURFSWNCUVg5R0JFQWdCQkNIQVJwQkFDRUNCU0FESUFKcUlRSU1Bd3NMUWZ5NkEwSDh1Z01vQWdCQkJISTJBZ0FMSUFWQi8vLy8vd2RKQkVBZ0JSQ0hBU0lCUVFBUWh3RWlBMGtnQVVGL1J5QURRWDlIY1hFaEJTQURJQUZySWdNZ0FFRW9ha3NpQkFSQUlBTWhBZ3NnQVVGL1JpQUVRUUZ6Y2lBRlFRRnpja1VOQVFzTUFRdEI4TG9EUWZDNkF5Z0NBQ0FDYWlJRE5nSUFJQU5COUxvREtBSUFTd1JBUWZTNkF5QUROZ0lBQ3dKQVFkaTNBeWdDQUNJRUJFQkJnTHNESVFNQ1FBSkFBMEFnQVNBREtBSUFJZ1VnQTBFRWFpSUhLQUlBSWdacVJnMEJJQU1vQWdnaUF3MEFDd3dCQ3lBREtBSU1RUWh4UlFSQUlBRWdCRXNnQlNBRVRYRUVRQ0FISUFZZ0FtbzJBZ0JCekxjREtBSUFJQUpxSVFKQkFDQUVRUWhxSWdOclFRZHhJUUZCMkxjRElBUWdBMEVIY1FSL0lBRUZRUUFpQVF0cUlnTTJBZ0JCekxjRElBSWdBV3NpQVRZQ0FDQURJQUZCQVhJMkFnUWdCQ0FDYWtFb05nSUVRZHkzQTBHb3V3TW9BZ0EyQWdBTUJBc0xDeUFCUWRDM0F5Z0NBRWtFUUVIUXR3TWdBVFlDQUFzZ0FTQUNhaUVGUVlDN0F5RURBa0FDUUFOQUlBTW9BZ0FnQlVZTkFTQURLQUlJSWdNTkFFR0F1d01oQXdzTUFRc2dBeWdDREVFSWNRUkFRWUM3QXlFREJTQURJQUUyQWdBZ0EwRUVhaUlESUFNb0FnQWdBbW8yQWdCQkFDQUJRUWhxSWdKclFRZHhJUU5CQUNBRlFRaHFJZ2RyUVFkeElRa2dBU0FDUVFkeEJIOGdBd1ZCQUF0cUlnZ2dBR29oQmlBRklBZEJCM0VFZnlBSkJVRUFDMm9pQlNBSWF5QUFheUVISUFnZ0FFRURjallDQkFKQUlBUWdCVVlFUUVITXR3TkJ6TGNES0FJQUlBZHFJZ0EyQWdCQjJMY0RJQVkyQWdBZ0JpQUFRUUZ5TmdJRUJVSFV0d01vQWdBZ0JVWUVRRUhJdHdOQnlMY0RLQUlBSUFkcUlnQTJBZ0JCMUxjRElBWTJBZ0FnQmlBQVFRRnlOZ0lFSUFZZ0FHb2dBRFlDQUF3Q0N5QUZLQUlFSWdCQkEzRkJBVVlFZnlBQVFYaHhJUWtnQUVFRGRpRUNBa0FnQUVHQUFra0VRQ0FGS0FJTUlnQWdCU2dDQ0NJQlJnUkFRY0MzQTBIQXR3TW9BZ0JCQVNBQ2RFRi9jM0UyQWdBRklBRWdBRFlDRENBQUlBRTJBZ2dMQlNBRktBSVlJUVFDUUNBRktBSU1JZ0FnQlVZRVFDQUZRUkJxSWdGQkJHb2lBaWdDQUNJQUJFQWdBaUVCQlNBQktBSUFJZ0JGQkVCQkFDRUFEQU1MQ3dOQUlBQkJGR29pQWlnQ0FDSURCRUFnQXlFQUlBSWhBUXdCQ3lBQVFSQnFJZ0lvQWdBaUF3UkFJQU1oQUNBQ0lRRU1BUXNMSUFGQkFEWUNBQVVnQlNnQ0NDSUJJQUEyQWd3Z0FDQUJOZ0lJQ3dzZ0JFVU5BUUpBSUFVb0Fod2lBVUVDZEVId3VRTnFJZ0lvQWdBZ0JVWUVRQ0FDSUFBMkFnQWdBQTBCUWNTM0EwSEV0d01vQWdCQkFTQUJkRUYvYzNFMkFnQU1Bd1VnQkVFUWFpQUVLQUlRSUFWSFFRSjBhaUFBTmdJQUlBQkZEUU1MQ3lBQUlBUTJBaGdnQlVFUWFpSUNLQUlBSWdFRVFDQUFJQUUyQWhBZ0FTQUFOZ0lZQ3lBQ0tBSUVJZ0ZGRFFFZ0FDQUJOZ0lVSUFFZ0FEWUNHQXNMSUFVZ0NXb2hBQ0FKSUFkcUJTQUZJUUFnQndzaEJTQUFRUVJxSWdBZ0FDZ0NBRUYrY1RZQ0FDQUdJQVZCQVhJMkFnUWdCaUFGYWlBRk5nSUFJQVZCQTNZaEFTQUZRWUFDU1FSQUlBRkJBM1JCNkxjRGFpRUFRY0MzQXlnQ0FDSUNRUUVnQVhRaUFYRUVmeUFBUVFocUlnSW9BZ0FGUWNDM0F5QUNJQUZ5TmdJQUlBQkJDR29oQWlBQUN5RUJJQUlnQmpZQ0FDQUJJQVkyQWd3Z0JpQUJOZ0lJSUFZZ0FEWUNEQXdDQ3dKL0lBVkJDSFlpQUFSL1FSOGdCVUgvLy84SFN3MEJHaUFGUVE0Z0FDQUFRWUQrUDJwQkVIWkJDSEVpQUhRaUFVR0E0QjlxUVJCMlFRUnhJZ0lnQUhJZ0FTQUNkQ0lBUVlDQUQycEJFSFpCQW5FaUFYSnJJQUFnQVhSQkQzWnFJZ0JCQjJwMlFRRnhJQUJCQVhSeUJVRUFDd3NpQVVFQ2RFSHd1UU5xSVFBZ0JpQUJOZ0ljSUFaQkVHb2lBa0VBTmdJRUlBSkJBRFlDQUVIRXR3TW9BZ0FpQWtFQklBRjBJZ054UlFSQVFjUzNBeUFDSUFOeU5nSUFJQUFnQmpZQ0FDQUdJQUEyQWhnZ0JpQUdOZ0lNSUFZZ0JqWUNDQXdDQ3lBQUtBSUFJUUJCR1NBQlFRRjJheUVDSUFVZ0FVRWZSZ1IvUVFBRklBSUxkQ0VCQWtBRFFDQUFLQUlFUVhoeElBVkdEUUVnQVVFQmRDRUNJQUJCRUdvZ0FVRWZka0VDZEdvaUFTZ0NBQ0lEQkVBZ0FpRUJJQU1oQUF3QkN3c2dBU0FHTmdJQUlBWWdBRFlDR0NBR0lBWTJBZ3dnQmlBR05nSUlEQUlMSUFCQkNHb2lBU2dDQUNJQ0lBWTJBZ3dnQVNBR05nSUFJQVlnQWpZQ0NDQUdJQUEyQWd3Z0JrRUFOZ0lZQ3dzZ0NpUUVJQWhCQ0dvUEN3c0RRQUpBSUFNb0FnQWlCU0FFVFFSQUlBVWdBeWdDQkdvaUNDQUVTdzBCQ3lBREtBSUlJUU1NQVFzTFFRQWdDRUZSYWlJRFFRaHFJZ1ZyUVFkeElRY2dBeUFGUVFkeEJIOGdCd1ZCQUF0cUlnTWdCRUVRYWlJTVNRUi9JQVFpQXdVZ0F3dEJDR29oQmlBRFFSaHFJUVVnQWtGWWFpRUpRUUFnQVVFSWFpSUxhMEVIY1NFSFFkaTNBeUFCSUF0QkIzRUVmeUFIQlVFQUlnY0xhaUlMTmdJQVFjeTNBeUFKSUFkcklnYzJBZ0FnQ3lBSFFRRnlOZ0lFSUFFZ0NXcEJLRFlDQkVIY3R3TkJxTHNES0FJQU5nSUFJQU5CQkdvaUIwRWJOZ0lBSUFaQmdMc0RLUUlBTndJQUlBWkJpTHNES1FJQU53SUlRWUM3QXlBQk5nSUFRWVM3QXlBQ05nSUFRWXk3QTBFQU5nSUFRWWk3QXlBR05nSUFJQVVoQVFOQUlBRkJCR29pQWtFSE5nSUFJQUZCQ0dvZ0NFa0VRQ0FDSVFFTUFRc0xJQU1nQkVjRVFDQUhJQWNvQWdCQmZuRTJBZ0FnQkNBRElBUnJJZ2RCQVhJMkFnUWdBeUFITmdJQUlBZEJBM1loQWlBSFFZQUNTUVJBSUFKQkEzUkI2TGNEYWlFQlFjQzNBeWdDQUNJRFFRRWdBblFpQW5FRWZ5QUJRUWhxSWdNb0FnQUZRY0MzQXlBRElBSnlOZ0lBSUFGQkNHb2hBeUFCQ3lFQ0lBTWdCRFlDQUNBQ0lBUTJBZ3dnQkNBQ05nSUlJQVFnQVRZQ0RBd0RDeUFIUVFoMklnRUVmeUFIUWYvLy93ZExCSDlCSHdVZ0IwRU9JQUVnQVVHQS9qOXFRUkIyUVFoeElnRjBJZ0pCZ09BZmFrRVFka0VFY1NJRElBRnlJQUlnQTNRaUFVR0FnQTlxUVJCMlFRSnhJZ0p5YXlBQklBSjBRUTkyYWlJQlFRZHFka0VCY1NBQlFRRjBjZ3NGUVFBTElnSkJBblJCOExrRGFpRUJJQVFnQWpZQ0hDQUVRUUEyQWhRZ0RFRUFOZ0lBUWNTM0F5Z0NBQ0lEUVFFZ0FuUWlCWEZGQkVCQnhMY0RJQU1nQlhJMkFnQWdBU0FFTmdJQUlBUWdBVFlDR0NBRUlBUTJBZ3dnQkNBRU5nSUlEQU1MSUFFb0FnQWhBVUVaSUFKQkFYWnJJUU1nQnlBQ1FSOUdCSDlCQUFVZ0F3dDBJUUlDUUFOQUlBRW9BZ1JCZUhFZ0IwWU5BU0FDUVFGMElRTWdBVUVRYWlBQ1FSOTJRUUowYWlJQ0tBSUFJZ1VFUUNBRElRSWdCU0VCREFFTEN5QUNJQVEyQWdBZ0JDQUJOZ0lZSUFRZ0JEWUNEQ0FFSUFRMkFnZ01Bd3NnQVVFSWFpSUNLQUlBSWdNZ0JEWUNEQ0FDSUFRMkFnQWdCQ0FETmdJSUlBUWdBVFlDRENBRVFRQTJBaGdMQlVIUXR3TW9BZ0FpQTBVZ0FTQURTWElFUUVIUXR3TWdBVFlDQUF0QmdMc0RJQUUyQWdCQmhMc0RJQUkyQWdCQmpMc0RRUUEyQWdCQjVMY0RRWmk3QXlnQ0FEWUNBRUhndHdOQmZ6WUNBRUgwdHdOQjZMY0ROZ0lBUWZDM0EwSG90d00yQWdCQi9MY0RRZkMzQXpZQ0FFSDR0d05COExjRE5nSUFRWVM0QTBINHR3TTJBZ0JCZ0xnRFFmaTNBellDQUVHTXVBTkJnTGdETmdJQVFZaTRBMEdBdUFNMkFnQkJsTGdEUVlpNEF6WUNBRUdRdUFOQmlMZ0ROZ0lBUVp5NEEwR1F1QU0yQWdCQm1MZ0RRWkM0QXpZQ0FFR2t1QU5CbUxnRE5nSUFRYUM0QTBHWXVBTTJBZ0JCckxnRFFhQzRBellDQUVHb3VBTkJvTGdETmdJQVFiUzRBMEdvdUFNMkFnQkJzTGdEUWFpNEF6WUNBRUc4dUFOQnNMZ0ROZ0lBUWJpNEEwR3d1QU0yQWdCQnhMZ0RRYmk0QXpZQ0FFSEF1QU5CdUxnRE5nSUFRY3k0QTBIQXVBTTJBZ0JCeUxnRFFjQzRBellDQUVIVXVBTkJ5TGdETmdJQVFkQzRBMEhJdUFNMkFnQkIzTGdEUWRDNEF6WUNBRUhZdUFOQjBMZ0ROZ0lBUWVTNEEwSFl1QU0yQWdCQjRMZ0RRZGk0QXpZQ0FFSHN1QU5CNExnRE5nSUFRZWk0QTBIZ3VBTTJBZ0JCOUxnRFFlaTRBellDQUVId3VBTkI2TGdETmdJQVFmeTRBMEh3dUFNMkFnQkIrTGdEUWZDNEF6WUNBRUdFdVFOQitMZ0ROZ0lBUVlDNUEwSDR1QU0yQWdCQmpMa0RRWUM1QXpZQ0FFR0l1UU5CZ0xrRE5nSUFRWlM1QTBHSXVRTTJBZ0JCa0xrRFFZaTVBellDQUVHY3VRTkJrTGtETmdJQVFaaTVBMEdRdVFNMkFnQkJwTGtEUVppNUF6WUNBRUdndVFOQm1Ma0ROZ0lBUWF5NUEwR2d1UU0yQWdCQnFMa0RRYUM1QXpZQ0FFRzB1UU5CcUxrRE5nSUFRYkM1QTBHb3VRTTJBZ0JCdkxrRFFiQzVBellDQUVHNHVRTkJzTGtETmdJQVFjUzVBMEc0dVFNMkFnQkJ3TGtEUWJpNUF6WUNBRUhNdVFOQndMa0ROZ0lBUWNpNUEwSEF1UU0yQWdCQjFMa0RRY2k1QXpZQ0FFSFF1UU5CeUxrRE5nSUFRZHk1QTBIUXVRTTJBZ0JCMkxrRFFkQzVBellDQUVIa3VRTkIyTGtETmdJQVFlQzVBMEhZdVFNMkFnQkI3TGtEUWVDNUF6WUNBRUhvdVFOQjRMa0ROZ0lBSUFKQldHb2hBMEVBSUFGQkNHb2lCV3RCQjNFaEFrSFl0d01nQVNBRlFRZHhCSDhnQWdWQkFDSUNDMm9pQlRZQ0FFSE10d01nQXlBQ2F5SUNOZ0lBSUFVZ0FrRUJjallDQkNBQklBTnFRU2cyQWdSQjNMY0RRYWk3QXlnQ0FEWUNBQXNMUWN5M0F5Z0NBQ0lCSUFCTEJFQkJ6TGNESUFFZ0FHc2lBallDQUF3REN3dEJpTHdEUVF3MkFnQWdDaVFFUVFBUEN5QUtKQVJCQUE4TFFkaTNBMEhZdHdNb0FnQWlBU0FBYWlJRE5nSUFJQU1nQWtFQmNqWUNCQ0FCSUFCQkEzSTJBZ1FMSUFva0JDQUJRUWhxQzhFU0FTZC9Jd1FoQWlNRVFZQUJhaVFFSUFKQlFHc2lBeUFCTFFBQlFRaDBJQUV0QUFCeUlBRXRBQUpCRUhSeUlBRXRBQU5CR0hSeU5nSUFJQU1nQVMwQUJVRUlkQ0FCTFFBRWNpQUJMUUFHUVJCMGNpQUJMUUFIUVJoMGNqWUNCQ0FESUFFdEFBbEJDSFFnQVMwQUNISWdBUzBBQ2tFUWRISWdBUzBBQzBFWWRISTJBZ2dnQXlBQkxRQU5RUWgwSUFFdEFBeHlJQUV0QUE1QkVIUnlJQUV0QUE5QkdIUnlOZ0lNSUFNZ0FTMEFFVUVJZENBQkxRQVFjaUFCTFFBU1FSQjBjaUFCTFFBVFFSaDBjallDRUNBRElBRXRBQlZCQ0hRZ0FTMEFGSElnQVMwQUZrRVFkSElnQVMwQUYwRVlkSEkyQWhRZ0F5QUJMUUFaUVFoMElBRXRBQmh5SUFFdEFCcEJFSFJ5SUFFdEFCdEJHSFJ5TmdJWUlBTWdBUzBBSFVFSWRDQUJMUUFjY2lBQkxRQWVRUkIwY2lBQkxRQWZRUmgwY2pZQ0hDQURJQUV0QUNGQkNIUWdBUzBBSUhJZ0FTMEFJa0VRZEhJZ0FTMEFJMEVZZEhJMkFpQWdBeUFCTFFBbFFRaDBJQUV0QUNSeUlBRXRBQ1pCRUhSeUlBRXRBQ2RCR0hSeU5nSWtJQU1nQVMwQUtVRUlkQ0FCTFFBb2NpQUJMUUFxUVJCMGNpQUJMUUFyUVJoMGNqWUNLQ0FESUFFdEFDMUJDSFFnQVMwQUxISWdBUzBBTGtFUWRISWdBUzBBTDBFWWRISTJBaXdnQXlBQkxRQXhRUWgwSUFFdEFEQnlJQUV0QURKQkVIUnlJQUV0QUROQkdIUnlOZ0l3SUFNZ0FTMEFOVUVJZENBQkxRQTBjaUFCTFFBMlFSQjBjaUFCTFFBM1FSaDBjallDTkNBRElBRXRBRGxCQ0hRZ0FTMEFPSElnQVMwQU9rRVFkSElnQVMwQU8wRVlkSEkyQWpnZ0F5QUJMUUE5UVFoMElBRXRBRHh5SUFFdEFENUJFSFJ5SUFFdEFEOUJHSFJ5TmdJOElBSWlCU0FBUWZRQmFpSWpLQUlBSWdJb0FnQWlERFlDQUNBRlFRUnFJaFVnQWlnQ0JDSUtOZ0lBSUFWQkNHb2lGaUFDS0FJSUlnWTJBZ0FnQlVFTWFpSVhJQUlvQWd3aUFUWUNBQ0FGUVJCcUloZ2dBaWdDRUNJTE5nSUFJQVZCRkdvaUdTQUNLQUlVSWc4MkFnQWdCVUVZYWlJa0lBSW9BaGdpRFRZQ0FDQUZRUnhxSWlVZ0FpZ0NIQ0lJTmdJQUlBVkJJR29pSmtIbnpLZlFCallDQUNBRlFTUnFJaHBCaGQyZTIzczJBZ0FnQlVFb2FpSWJRZkxtdStNRE5nSUFJQVZCTEdvaUhFRzY2citxZWpZQ0FDQUZRVEJxSWgwZ0FDZ0MrQUVpQWlnQ0FFSC9wTG1JQlhNaUJ6WUNBQ0FGUVRScUloNGdBaWdDQkVHTTBaWFllWE1pQ1RZQ0FDQUZRVGhxSWljZ0FDZ0MvQUVpQUNnQ0FFR3JzNC84QVhNaUFqWUNBQ0FGUVR4cUlpZ2dBQ2dDQkVHWm1vUGZCWE1pQURZQ0FFSG56S2ZRQmlFUVFZWGRudHQ3SVJKQjh1YTc0d01oRTBHNjZyK3FlaUVVQTBBZ0N5QUhJQXNnREdvZ0F5QUVRUVIwUWZjdWFpMEFBRUVDZEdvb0FnQnFJZzV6SWdkQkVIUWdCMEVRZG5JaUN5QVFhaUlNY3lJSFFSUjBJQWRCREhaeUlnY2dEbW9nQXlBRVFRUjBRZmd1YWkwQUFFRUNkR29vQWdCcUlSRWdCeUFMSUJGeklnZEJHSFFnQjBFSWRuSWlEaUFNYWlJUWN5SUhRUmwwSUFkQkIzWnlJUjhnRHlBSklBOGdDbW9nQXlBRVFRUjBRZmt1YWkwQUFFRUNkR29vQWdCcUlncHpJZ2xCRUhRZ0NVRVFkbklpQ3lBU2FpSVBjeUlKUVJSMElBbEJESFp5SWd3Z0Ntb2dBeUFFUVFSMFFmb3VhaTBBQUVFQ2RHb29BZ0JxSVNBZ0RTQUNJQTBnQm1vZ0F5QUVRUVIwUWZzdWFpMEFBRUVDZEdvb0FnQnFJZ3B6SWdKQkVIUWdBa0VRZG5JaUNTQVRhaUlHY3lJQ1FSUjBJQUpCREhaeUlnSWdDbW9nQXlBRVFRUjBRZnd1YWkwQUFFRUNkR29vQWdCcUlTRWdBaUFKSUNGeklnSkJHSFFnQWtFSWRuSWlFaUFHYWlJSGN5SUNRUmwwSUFKQkIzWnlJUTBnQ0NBQUlBZ2dBV29nQXlBRVFRUjBRZjB1YWkwQUFFRUNkR29vQWdCcUlnWnpJZ0JCRUhRZ0FFRVFkbklpQVNBVWFpSUNjeUlBUVJSMElBQkJESFp5SWdBZ0Jtb2dBeUFFUVFSMFFmNHVhaTBBQUVFQ2RHb29BZ0JxSVNJZ0FDQUJJQ0p6SWdCQkdIUWdBRUVJZG5JaUFTQUNhaUlLY3lJQVFSbDBJQUJCQjNaeUlRZ2dBU0FNSUFzZ0lITWlBRUVZZENBQVFRaDJjaUlKSUE5cUlndHpJZ0JCR1hRZ0FFRUhkbklpQVNBUmFpQURJQVJCQkhSQi95NXFMUUFBUVFKMGFpZ0NBR29pQW5NaUFFRVFkQ0FBUVJCMmNpSUFJQWRxSVFZZ0FDQUJJQVp6SWdCQkZIUWdBRUVNZG5JaUFTQUNhaUFESUFSQkJIUkJnQzlxTFFBQVFRSjBhaWdDQUdvaURITWlBRUVZZENBQVFRaDJjaUlSSUFacUlSTWdBU0FUY3lJQVFSbDBJQUJCQjNaeUlROGdEU0FPSUEwZ0lHb2dBeUFFUVFSMFFZRXZhaTBBQUVFQ2RHb29BZ0JxSWdaeklnQkJFSFFnQUVFUWRuSWlBaUFLYWlJQmN5SUFRUlIwSUFCQkRIWnlJZ0FnQm1vZ0F5QUVRUVIwUVlJdmFpMEFBRUVDZEdvb0FnQnFJUW9nQUNBQ0lBcHpJZ0JCR0hRZ0FFRUlkbklpQnlBQmFpSVVjeUlBUVJsMElBQkJCM1p5SVEwZ0NDQUpJQWdnSVdvZ0F5QUVRUVIwUVlNdmFpMEFBRUVDZEdvb0FnQnFJZ1p6SWdCQkVIUWdBRUVRZG5JaUFpQVFhaUlCY3lJQVFSUjBJQUJCREhaeUlnQWdCbW9nQXlBRVFRUjBRWVF2YWkwQUFFRUNkR29vQWdCcUlRWWdBQ0FDSUFaeklnQkJHSFFnQUVFSWRuSWlDU0FCYWlJUWN5SUFRUmwwSUFCQkIzWnlJUTRnSHlBU0lCOGdJbW9nQXlBRVFRUjBRWVV2YWkwQUFFRUNkR29vQWdCcUlnaHpJZ0JCRUhRZ0FFRVFkbklpQWlBTGFpSUJjeUlBUVJSMElBQkJESFp5SWdBZ0NHb2dBeUFFUVFSMFFZWXZhaTBBQUVFQ2RHb29BZ0JxSVFnZ0FDQUNJQWh6SWdCQkdIUWdBRUVJZG5JaUFpQUJhaUlCY3lJQVFSbDBJQUJCQjNaeUlRc2dCRUVCYWlJQVFRcEhCRUFnQUNFRUlBRWhFaUFJSVFFZ0RpRUlJQkVoQUF3QkN3c2dCU0FNTmdJQUlCZ2dDellDQUNBZElBYzJBZ0FnSmlBUU5nSUFJQlVnQ2pZQ0FDQVpJQTgyQWdBZ0hpQUpOZ0lBSUJvZ0FUWUNBQ0FXSUFZMkFnQWdKQ0FOTmdJQUlDY2dBallDQUNBYklCTTJBZ0FnRnlBSU5nSUFJQ1VnRGpZQ0FDQW9JQkUyQWdBZ0hDQVVOZ0lBSUNNb0FnQWlBU0FNSUFFb0FnQnpJQkJ6TmdJQUlBRkJCR29pQUNBVktBSUFJQUFvQWdCeklCb29BZ0J6TmdJQUlBRkJDR29pQUNBV0tBSUFJQUFvQWdCeklCc29BZ0J6TmdJQUlBRkJER29pQUNBWEtBSUFJQUFvQWdCeklCd29BZ0J6TmdJQUlBRkJFR29pQUNBWUtBSUFJQUFvQWdCeklCMG9BZ0J6TmdJQUlBRkJGR29pQUNBWktBSUFJQUFvQWdCeklCNG9BZ0J6TmdJQUlBRkJHR29pQUNBTklBQW9BZ0J6SUFKek5nSUFJQUZCSEdvaUFDQU9JQUFvQWdCeklCRnpOZ0lBSUFVa0JBdUJBUUVEZndKQUlBQWlBa0VEY1FSQUlBSWhBUU5BSUFFc0FBQkZEUUlnQVVFQmFpSUJJZ0JCQTNFTkFDQUJJUUFMQ3dOQUlBQkJCR29oQVNBQUtBSUFJZ05CZ0lHQ2hIaHhRWUNCZ29SNGN5QURRZi85KzNkcWNVVUVRQ0FCSVFBTUFRc0xJQU5CL3dGeEJFQURRQ0FBUVFGcUlnQXNBQUFOQUFzTEN5QUFJQUpyQ3lzQkFYOGdBa1VFUUNBQUR3c2dBQ0FCSUFKQmYyb2lBeEN1QVJvZ0FDQURRUUowYWtFQU5nSUFJQUFMZHdFQ2Z5QUFRY1FkTmdJQUlBQkJCR29pQWlnQ0FDSUJSUVJBRHdzZ0FDd0FFQVJBRHdzZ0FDd0FFZ1JBUVFBa0JTTUZJUUJCQUNRRklBQkJBWEZGQkVBUEN3VkJBQ1FGUVN3Z0FSQU1Jd1VoQVVFQUpBVWdBVUVCY1VVRVFDQUNRUUEyQWdBZ0FFRUFOZ0lNRHdzTFFRQVFHQ0lBRUZvTGhRc0JGbjhnQUVIZ2x3RnFJaFFvQWdBaUF5QUFRY2dNYWlJUEtBSUFJZ1JQQkVCQmZ3OExJQUJCNkpjQmFpSUZLQUlBSWdJZ0JFa0VRRUYvRHdzZ0JDNEJBRUVCUmdSQUlBUWdBQkNKQkFVZ0JDZ0NDQ0lCSUFOTklBRWdBa3R5QkVCQmZ3OExJQVFnQUJDS0JFVUVRRUYvRHdzTElBQkI5SlFCYWlJSUtBSUFJQUJCZ0pVQmFpSUpLQUlBSWdJZ0FFSDhsQUZxSWdZb0FnQWlBV3hxSVFNZ0NDQUROZ0lBSUFZZ0FFR0VsUUZxSWd3b0FnQWdBbXNnQVd3aUFqWUNBQUpBSUFCQjFBeHFJaEFvQWdBaUFRUkFJQUJCNEF4cUlRTUZJQUJCK0pRQmFpRVZJQUJCakpVQmFpRVJJQUJCNEF4cUlRUWdBRUhZREdvaEJ5QURJUUVDUUFKQUEwQUNRQU5BQWtBZ0FpQUJhaUFCYzBHQWdJQUlUd1JBSUFKQmdJQUNUdzBCSUFaQkFDQUJhMEgvL3dGeE5nSUFDeUFWS0FJQUlSTWdFU2dDQUNJS1FRUnFJaElvQWdBaUFVSGkvd0ZLQkVBZ0NrSG9BR29pQ3lnQ0FDQUJheUlOUVFCT0JFQWdDa0h3QUdvaUZpQUtRZmdBYWlJT0tBSUFJQUZySUJZb0FnQnFOZ0lBQWtBQ1FDQU5CRUFnQ2tFUWFpSUNLQUlBSWdNZ0F5QUJhaUFORUYwYUlCSkJBRFlDQUNBTElBMDJBZ0FnRFVHQWdBSkhEUUZCZ0lBQ0lRRUZJQkpCQURZQ0FDQUxRUUEyQWdBZ0NrRVFhaUVDREFFTERBRUxJQW9vQWdBZ0FpZ0NBQ0FOYWtHQWdBSWdEV3NRWGlFRElBc29BZ0FpQVNBRGFpRUNJQU5CQUVvRVFDQUxJQUkyQWdBZ0FpRUJDd3NnQ2tIc0FHb2lBeUFCUVdKcUlnczJBZ0FnRGlBU0tBSUFJZ0UyQWdBZ0FVRi9haUFXS0FJQUlnSnFJUTRnQWtGL1J3UkFJQU1nQ3lBT1NBUi9JQXNGSUE0TE5nSUFDd3NMSUFvb0FoQWhBaUFTSUFGQkFXbzJBZ0FnRlNBVFFRaDBJQUlnQVdvdEFBQnlOZ0lBSUFZZ0JpZ0NBRUVJZENJQ05nSUFJQWdnQ0NnQ0FFRUlkQ0lCTmdJQURBRUxDeUFVS0FJQUlRTWdCQ2dDQUNFQ0lBOG9BZ0FoQVFOQUlBSkJBV29oQWlBRElBRW9BZ3dpQVU4TkFTQUZLQUlBSUFGSkRRRWdCeWdDQUNBQkx3RUFSZzBBQ3lBRUlBSTJBZ0FnRHlBQk5nSUFJQUVnQUJDSUJFVUVRRUYvSVFJTUF3c2dDQ0FJS0FJQUlBa29BZ0FpQXlBR0tBSUFJZ0pzYWlJQk5nSUFJQVlnRENnQ0FDQURheUFDYkNJQ05nSUFJQkFvQWdBaUEwVU5BU0FESVFFZ0JDRUREQVVMQ3d3QkMwRi9Ed3NnQkNBQ05nSUFJQThnQVRZQ0FFRi9Ed3NMSUFFdEFBQWhBZ0pBQWtBZ0F5Z0NBQTBBSUJRb0FnQWdBU2dDQkNJQlR3MEFJQUJCMEF4cUlBRTJBZ0FnRHlBQk5nSUFEQUVMSUFBUWh3UWdBRUh3RkdvaUFTd0FBRVVFUUNBQlFRRTZBQUFnQUVId0RHcEJBRUdBQWhCVUdnc0xJQUJCK0pRQmFpRVFJQUJCakpVQmFpRVRJQWdvQWdBaEFDQUdLQUlBSVFFRFFBSkFJQUVnQUdvZ0FITkJnSUNBQ0U4RVFDQUJRWUNBQWs4TkFTQUdRUUFnQUd0Qi8vOEJjVFlDQUFzZ0VDZ0NBQ0VPSUJNb0FnQWlCVUVFYWlJTUtBSUFJZ0JCNHY4QlNnUkFJQVZCNkFCcUlnY29BZ0FnQUdzaUNVRUFUZ1JBSUFWQjhBQnFJaEVnQlVINEFHb2lCQ2dDQUNBQWF5QVJLQUlBYWpZQ0FBSkFBa0FnQ1FSQUlBVkJFR29pQVNnQ0FDSURJQU1nQUdvZ0NSQmRHaUFNUVFBMkFnQWdCeUFKTmdJQUlBbEJnSUFDUncwQlFZQ0FBaUVBQlNBTVFRQTJBZ0FnQjBFQU5nSUFJQVZCRUdvaEFRd0JDd3dCQ3lBRktBSUFJQUVvQWdBZ0NXcEJnSUFDSUFsckVGNGhBeUFIS0FJQUlnQWdBMm9oQVNBRFFRQktCRUFnQnlBQk5nSUFJQUVoQUFzTElBVkI3QUJxSWdNZ0FFRmlhaUlITmdJQUlBUWdEQ2dDQUNJQU5nSUFJQUJCZjJvZ0VTZ0NBQ0lCYWlFRUlBRkJmMGNFUUNBRElBY2dCRWdFZnlBSEJTQUVDellDQUFzTEN5QUZLQUlRSVFFZ0RDQUFRUUZxTmdJQUlCQWdEa0VJZENBQklBQnFMUUFBY2pZQ0FDQUdJQVlvQWdCQkNIUWlBVFlDQUNBSUlBZ29BZ0JCQ0hRaUFEWUNBQXdCQ3dzZ0FndktBUUVDZndKQUlBQVFXQ0lCUVlDQUEzRWlBa0VRZEVFUWRVRUFTQVJBSUFKQkVIUkJFSFZCZ0lCK2F3MEJJQUJCQWhCVklBQVFXQ0VCSUFCQkVCQlZJQUVQQlNBQ1FSQjBRUkIxUVlDQUFVZ0VRQ0FDRFFJZ0FFRUdFRlVnQVVFS2RrRVBjUThMSUFKQkVIUkJFSFZCZ0lBQmF3MEJJQUZCZ1BnQWNRUkFJQUJCQ2hCVklBRkJCblpCL3dGeER3VWdBRUVPRUZVZ0FVRUNka0dBZm5JUEN3QUxBQXNnQUVFQ0VGVWdBQkJZUVJCMElRRWdBRUVRRUZVZ0FCQllJQUZ5SVFFZ0FFRVFFRlVnQVF0ZUFRSi9JQUVvQWdBaUFrVWdBQ2dDQUNJRFJTQURJQUpIY25JRVFDQUNJUUFnQXlFQkJRTkFJQUZCQkdvaUFTZ0NBQ0lDUlNBQVFRUnFJZ0FvQWdBaUEwVWdBeUFDUjNKeUJFQWdBaUVBSUFNaEFRVU1BUXNMQ3lBQklBQnJDMFFCQW44Z0FRUkFBMEFnQUVFRWFpRURJQUFvQWdBaUFrVWdBaUFCUm5KRkJFQWdBeUVBREFFTEN5QUNSUVJBUVFBaEFBc0ZJQUFnQUJCWlFRSjBhaUVBQ3lBQUM5Z0VBUUYvSUFBb0FvQUJJQUZMQkVBZ0FDZ0NBQ0FCYWc4TEFrQWdBQ2dDaEFFZ0FVc0VRRUVCSVFJRklBQW9Bb2dCSUFGTEJFQkJBaUVDQlNBQUtBS01BU0FCU3dSQVFRTWhBZ1VnQUNnQ2tBRWdBVXNFUUVFRUlRSUZJQUFvQXBRQklBRkxCRUJCQlNFQ0JTQUFLQUtZQVNBQlN3UkFRUVloQWdVZ0FDZ0NuQUVnQVVzRVFFRUhJUUlGSUFBb0FxQUJJQUZMQkVCQkNDRUNCU0FBS0FLa0FTQUJTd1JBUVFraEFnVWdBQ2dDcUFFZ0FVc0VRRUVLSVFJRklBQW9BcXdCSUFGTEJFQkJDeUVDQlNBQUtBS3dBU0FCU3dSQVFRd2hBZ1VnQUNnQ3RBRWdBVXNFUUVFTklRSUZJQUFvQXJnQklBRkxCRUJCRGlFQ0JTQUFLQUs4QVNBQlN3UkFRUThoQWdVZ0FDZ0N3QUVnQVVzRVFFRVFJUUlGSUFBb0FzUUJJQUZMQkVCQkVTRUNCU0FBS0FMSUFTQUJTd1JBUVJJaEFnVWdBQ2dDekFFZ0FVc0VRRUVUSVFJTUV3c2dBQ2dDMEFFZ0FVc0VRRUVVSVFJTUV3c2dBQ2dDMUFFZ0FVc0VRRUVWSVFJTUV3c2dBQ2dDMkFFZ0FVc0VRRUVXSVFJTUV3c2dBQ2dDM0FFZ0FVc0VRRUVYSVFJTUV3c2dBQ2dDNEFFZ0FVc0VRRUVZSVFJTUV3c2dBQ2dDNUFFZ0FVc0VRRUVaSVFJTUV3c2dBQ2dDNkFFZ0FVc0VRRUVhSVFJTUV3c2dBQ2dDN0FFZ0FVc0VRRUViSVFJTUV3c2dBQ2dDOEFFZ0FVc0VRRUVjSVFJTUV3c2dBQ2dDOUFFZ0FVc0VRRUVkSVFJTUV3c2dBQ2dDK0FFZ0FVc0VRRUVlSVFJTUV3c2dBQ2dDL0FFZ0FVc0VRRUVmSVFJTUV3c2dBQ2dDQUE4TEN3c0xDd3NMQ3dzTEN3c0xDd3NMQ3dzTElBQWdBa0VDZEdvb0FnQWdBU0FBSUFKQkFuUnFLQUo4YTJvTDdRTUJCMzhnQUVIZ0FHb2lCaWdDQUNJRUlBSnJJZ01nQUVITXpRTnFLQUlBUWY5ZmFpSUZTU0FFSUFWSmNVVUVRQ0FCUlFSQUR3c2dBRUdrbGdGcUlRY2dBeUVDSUFCQjBNMERhaUlJS0FJQUlRTWdCQ0VBQTBBZ0FrRUJhaUVFSUFjb0FnQWlCU0FBYWlBRklBTWdBbkZxTEFBQU9nQUFJQVlnQmlnQ0FFRUJhaUFJS0FJQUlnTnhJZ0EyQWdBZ0FVRi9haUlCQkVBZ0JDRUNEQUVMQ3c4TElBQkJwSllCYWlnQ0FDSUpJQU5xSVFNZ0NTQUVhaUVBSUFZZ0JDQUJhallDQUNBQlFRZExCRUFnQ1NBRUlBRkJlR29pQjBGNGNTSUlha0VJYWlJRklBSnJhaUVFSUFNaEFnTkFJQUFnQWl3QUFEb0FBQ0FBSUFJc0FBRTZBQUVnQUNBQ0xBQUNPZ0FDSUFBZ0Fpd0FBem9BQXlBQUlBSXNBQVE2QUFRZ0FDQUNMQUFGT2dBRklBQWdBaXdBQmpvQUJpQUFJQUlzQUFjNkFBY2dBa0VJYWlFQ0lBQkJDR29oQUNBQlFYaHFJZ0ZCQjBzTkFBc2dDU0FGYWlFQUlBUWhBeUFISUFocklRRUxJQUZGQkVBUEN5QUFJQU1zQUFBNkFBQWdBVUVCUmdSQUR3c2dBQ0FETEFBQk9nQUJJQUZCQWswRVFBOExJQUFnQXl3QUFqb0FBaUFCUVFOR0JFQVBDeUFBSUFNc0FBTTZBQU1nQVVFRVRRUkFEd3NnQUNBRExBQUVPZ0FFSUFGQkJVWUVRQThMSUFBZ0F5d0FCVG9BQlNBQlFRWk5CRUFQQ3lBQUlBTXNBQVk2QUFZTGh4QUJCSDhqQkNFRkl3UkJnQWhxSkFRZ0JVR0FCR29oQWlBQUxBQ0FCQVIvSUFJZ0FFR0FCQkJUR2lNRUlRQWpCRUVRYWlRRVFSUWdBQkFsSVFNZ0FDUUVJQU5CeXdCcUlRUkJBQ0VBQTBBZ0FpQUFhaUlESUFRZ0FHb2dBeTBBQUhNNkFBQWdBRUVCYWlJQVFZQUVSdzBBQ3lBQ1Fmd0RhZ1VnQWdzaEF5QUZJUUFnQTBFQU5nSUFJQUVzQUlBRUJIOGdBQ0FCUVlBRUVGTWFJd1FoQVNNRVFSQnFKQVJCRkNBQkVDVWhBeUFCSkFRZ0EwSExBR29oQkVFQUlRRURRQ0FBSUFGcUlnTWdCQ0FCYWlBRExRQUFjem9BQUNBQlFRRnFJZ0ZCZ0FSSERRQUxJQUJCL0FOcUJTQUFDMEVBTmdJQUlBSWdBQkJ6SVFFZ0FrRUFPZ0FBSUFKQkFEb0FBU0FDUVFBNkFBSWdBa0VBT2dBRElBSkJBRG9BQkNBQ1FRQTZBQVVnQWtFQU9nQUdJQUpCQURvQUJ5QUNRUUE2QUFnZ0FrRUFPZ0FKSUFKQkFEb0FDaUFDUVFBNkFBc2dBa0VBT2dBTUlBSkJBRG9BRFNBQ1FRQTZBQTRnQWtFQU9nQVBJQUpCQURvQUVDQUNRUUE2QUJFZ0FrRUFPZ0FTSUFKQkFEb0FFeUFDUVFBNkFCUWdBa0VBT2dBVklBSkJBRG9BRmlBQ1FRQTZBQmNnQWtFQU9nQVlJQUpCQURvQUdTQUNRUUE2QUJvZ0FrRUFPZ0FiSUFKQkFEb0FIQ0FDUVFBNkFCMGdBa0VBT2dBZUlBSkJBRG9BSHlBQ1FRQTZBQ0FnQWtFQU9nQWhJQUpCQURvQUlpQUNRUUE2QUNNZ0FrRUFPZ0FrSUFKQkFEb0FKU0FDUVFBNkFDWWdBa0VBT2dBbklBSkJBRG9BS0NBQ1FRQTZBQ2tnQWtFQU9nQXFJQUpCQURvQUt5QUNRUUE2QUN3Z0FrRUFPZ0F0SUFKQkFEb0FMaUFDUVFBNkFDOGdBa0VBT2dBd0lBSkJBRG9BTVNBQ1FRQTZBRElnQWtFQU9nQXpJQUpCQURvQU5DQUNRUUE2QURVZ0FrRUFPZ0EySUFKQkFEb0FOeUFDUVFBNkFEZ2dBa0VBT2dBNUlBSkJBRG9BT2lBQ1FRQTZBRHNnQWtFQU9nQThJQUpCQURvQVBTQUNRUUE2QUQ0Z0FrRUFPZ0EvSUFKQlFHdEJBRG9BQUNBQ1FRQTZBRUVnQWtFQU9nQkNJQUpCQURvQVF5QUNRUUE2QUVRZ0FrRUFPZ0JGSUFKQkFEb0FSaUFDUVFBNkFFY2dBa0VBT2dCSUlBSkJBRG9BU1NBQ1FRQTZBRW9nQWtFQU9nQkxJQUpCQURvQVRDQUNRUUE2QUUwZ0FrRUFPZ0JPSUFKQkFEb0FUeUFDUVFBNkFGQWdBa0VBT2dCUklBSkJBRG9BVWlBQ1FRQTZBRk1nQWtFQU9nQlVJQUpCQURvQVZTQUNRUUE2QUZZZ0FrRUFPZ0JYSUFKQkFEb0FXQ0FDUVFBNkFGa2dBa0VBT2dCYUlBSkJBRG9BV3lBQ1FRQTZBRndnQWtFQU9nQmRJQUpCQURvQVhpQUNRUUE2QUY4Z0FrRUFPZ0JnSUFKQkFEb0FZU0FDUVFBNkFHSWdBa0VBT2dCaklBSkJBRG9BWkNBQ1FRQTZBR1VnQWtFQU9nQm1JQUpCQURvQVp5QUNRUUE2QUdnZ0FrRUFPZ0JwSUFKQkFEb0FhaUFDUVFBNkFHc2dBa0VBT2dCc0lBSkJBRG9BYlNBQ1FRQTZBRzRnQWtFQU9nQnZJQUpCQURvQWNDQUNRUUE2QUhFZ0FrRUFPZ0J5SUFKQkFEb0FjeUFDUVFBNkFIUWdBa0VBT2dCMUlBSkJBRG9BZGlBQ1FRQTZBSGNnQWtFQU9nQjRJQUpCQURvQWVTQUNRUUE2QUhvZ0FrRUFPZ0I3SUFKQkFEb0FmQ0FDUVFBNkFIMGdBa0VBT2dCK0lBSkJBRG9BZnlBQVFRQTZBQUFnQUVFQU9nQUJJQUJCQURvQUFpQUFRUUE2QUFNZ0FFRUFPZ0FFSUFCQkFEb0FCU0FBUVFBNkFBWWdBRUVBT2dBSElBQkJBRG9BQ0NBQVFRQTZBQWtnQUVFQU9nQUtJQUJCQURvQUN5QUFRUUE2QUF3Z0FFRUFPZ0FOSUFCQkFEb0FEaUFBUVFBNkFBOGdBRUVBT2dBUUlBQkJBRG9BRVNBQVFRQTZBQklnQUVFQU9nQVRJQUJCQURvQUZDQUFRUUE2QUJVZ0FFRUFPZ0FXSUFCQkFEb0FGeUFBUVFBNkFCZ2dBRUVBT2dBWklBQkJBRG9BR2lBQVFRQTZBQnNnQUVFQU9nQWNJQUJCQURvQUhTQUFRUUE2QUI0Z0FFRUFPZ0FmSUFCQkFEb0FJQ0FBUVFBNkFDRWdBRUVBT2dBaUlBQkJBRG9BSXlBQVFRQTZBQ1FnQUVFQU9nQWxJQUJCQURvQUppQUFRUUE2QUNjZ0FFRUFPZ0FvSUFCQkFEb0FLU0FBUVFBNkFDb2dBRUVBT2dBcklBQkJBRG9BTENBQVFRQTZBQzBnQUVFQU9nQXVJQUJCQURvQUx5QUFRUUE2QURBZ0FFRUFPZ0F4SUFCQkFEb0FNaUFBUVFBNkFETWdBRUVBT2dBMElBQkJBRG9BTlNBQVFRQTZBRFlnQUVFQU9nQTNJQUJCQURvQU9DQUFRUUE2QURrZ0FFRUFPZ0E2SUFCQkFEb0FPeUFBUVFBNkFEd2dBRUVBT2dBOUlBQkJBRG9BUGlBQVFRQTZBRDhnQUVGQWEwRUFPZ0FBSUFCQkFEb0FRU0FBUVFBNkFFSWdBRUVBT2dCRElBQkJBRG9BUkNBQVFRQTZBRVVnQUVFQU9nQkdJQUJCQURvQVJ5QUFRUUE2QUVnZ0FFRUFPZ0JKSUFCQkFEb0FTaUFBUVFBNkFFc2dBRUVBT2dCTUlBQkJBRG9BVFNBQVFRQTZBRTRnQUVFQU9nQlBJQUJCQURvQVVDQUFRUUE2QUZFZ0FFRUFPZ0JTSUFCQkFEb0FVeUFBUVFBNkFGUWdBRUVBT2dCVklBQkJBRG9BVmlBQVFRQTZBRmNnQUVFQU9nQllJQUJCQURvQVdTQUFRUUE2QUZvZ0FFRUFPZ0JiSUFCQkFEb0FYQ0FBUVFBNkFGMGdBRUVBT2dCZUlBQkJBRG9BWHlBQVFRQTZBR0FnQUVFQU9nQmhJQUJCQURvQVlpQUFRUUE2QUdNZ0FFRUFPZ0JrSUFCQkFEb0FaU0FBUVFBNkFHWWdBRUVBT2dCbklBQkJBRG9BYUNBQVFRQTZBR2tnQUVFQU9nQnFJQUJCQURvQWF5QUFRUUE2QUd3Z0FFRUFPZ0J0SUFCQkFEb0FiaUFBUVFBNkFHOGdBRUVBT2dCd0lBQkJBRG9BY1NBQVFRQTZBSElnQUVFQU9nQnpJQUJCQURvQWRDQUFRUUE2QUhVZ0FFRUFPZ0IySUFCQkFEb0FkeUFBUVFBNkFIZ2dBRUVBT2dCNUlBQkJBRG9BZWlBQVFRQTZBSHNnQUVFQU9nQjhJQUJCQURvQWZTQUFRUUE2QUg0Z0FFRUFPZ0IvSUFBa0JDQUJSUXNsQVFGL0lBSWdBQkJaYTBGL2FpSURRUUJNQkVBZ0FBOExJQUFnQVNBREVMSURHaUFBQ3hZQUlBQkJBRUhBeXdRUVZCb2dBRUdvd0FKcUVGd0xiUUVFZnlBQUtBSVVJQUJCR0dvaUJDZ0NBQ0lGYXlJRElBSkpJZ1lFZnlBREJTQUNJZ01MQkVBZ0FTQUFLQUlBSUFWcUlBTVFVeG9MSUFaRkJFQWdCQ0FFS0FJQUlBTnFOZ0lBSUFNUEN5QUJJQU5xUVFBZ0FpQURheEJVR2lBRUlBUW9BZ0FnQTJvMkFnQWdBd3VlQXdFSWZ5TUVJUVFqQkVFZ2FpUUVJQVJCQ0dvaEJTQUJRUUEyQWdBZ0JFSUFOd01BSUFSQkVHb2lBeUFBTmdJQUFrQUNRQUpBQWtBQ1FBSkFJQUVnQXlBQ0lBUVF1UU5CZjJzT0FnQUJBZ3NNQWdzZ0FDd0FBQTBCUVFFaEFBd0NDMEVCSVFBTUFRc2dBa0VCU3dSQVFRQWhBd0pBQWtBRFFDQUFJQWhxSWdZc0FBQkZEUUVnQlVJQU53TUFJQUVnQTBFQ2RHb2lDU0FHUWF3aktBSUFLQUlBQkg5QkJBVkJBUXNnQlJDS0FrRi9SZ1IvSUFZc0FBQWlCMEVBVGcwRElBcEZCRUFnQ1VIKy93TTJBZ0FnQTBFQmFpSURJQUpQRFFRZ0Jpd0FBQ0VIQ3lBQklBTkJBblJxSUFkQi93RnhRWURBQTNJMkFnQkJBU0VLSUFoQkFXb0ZJQVZDQURjREFDQUdRYXdqS0FJQUtBSUFCSDlCQkFWQkFRc2dCUkNJQWlJSFFRRktCSDhnQndWQkFRc2dDR29MSVFnZ0EwRUJhaUlESUFKSkRRQkJBQ0VBREFVTEFBc2dBU0FEUVFKMGFrRUFOZ0lBUVFFaEFBd0RDMEVBSVFBRlFRQWhBQXdCQ3d3QkN5QUNSUVJBSUFRa0JDQUFRZjhCY1VFQVJ3OExDeUFCSUFKQmYycEJBblJxUVFBMkFnQWdCQ1FFSUFCQi93RnhRUUJIQy9FQkFnTi9BWDRqQkNFQkl3UkIwQUJxSkFRZ0FFR3R2QU5xTEFBQUJFQWdBU1FFUVFBUEN5QUFRWWk4QTJvaUF5QUFJQUFvQWdBb0FoUkJCM0ZCaGdGcUVRQUFJZ1EzQXdBQ1FBSkFBa0FDUUFKQUFrQWdBRUdZdkFOcUtBSUFRUUZyRGdNQUFRSURDeUFBRU5jQ0lRSU1Bd3NnQUJEV0FpRUNEQUlMSUFBUTFRSWhBZ3dCQ3d3QkN5QUNCRUFnQXlrREFDRUVCU0FCSkFSQkFBOExDeUFBUVpDOEEyb3BBd0FnQkZVRVFDQUJKQVFnQWc4TElBRkJBRFlDUkNBQlFSZzJBa2dnQVVGQWEwRUJOZ0lBSUFFZ0FFRVlhallDQUNBQVFheThBMnBCQVRvQUFFR3M5UUpCQXhCa0lBRWtCRUVBQzljQkFnWi9BWDRqQkNFREl3UkJvQUpxSkFRZ0EwRWdhaUVHSUFNaEJTQUFRU0JxSWdNcEF3QWhDU0FESUFrZ0FxMThOd01BSUFKRkJFQWdCVUVnRUZzZ0JrR0FBaEJiSUFVa0JBOExJQUJCS0dvaEJ5QUFRU3hxSVFnZ0NhZEJQM0VoQXdOQUlBSkJ3QUFnQTJzaUJFc0VmeUFFQlNBQ0lnUUxRY0FBUmdSQUlBY2dBVFlDQUFVZ0J5QUlOZ0lBSUFCQkxHb2dBMm9nQVNBRUVGTWFDeUFFSUFOcUlnTkJ3QUJHQkVBZ0FCRGhBVUVBSVFNTElBRWdCR29oQVNBQ0lBUnJJZ0lOQUFzZ0JVRWdFRnNnQmtHQUFoQmJJQVVrQkF0NEFRRi9JQUJCOUEwMkFnQWdBRUdvOHdCcUxBQUFCRUFnQUVHczh3QnFLQUlBSWdFRVFDQUJFSGtnQVJCU0N3c2dBRUdRN2dKcUtBSUFJZ0VFUUNBQkVGSUxJQUJCME9jQmFpZ0NBQ0lCQkVBZ0FSQlNDeUFBUWRqekFHb1F0UUlnQUVIdzhRQnFFSVFCSUFCQm5NQUFhaENPQVNBQUVIQUxCZ0JCRUJBQUN3Z0FRUVVRQUVFQUN3Z0FRUUlRQUVFQUN6QUJBWDhqQkNFQ0l3UkJFR29rQkNBQ0lBRTJBZ0JCOENBb0FnQWlBU0FBSUFJUXpnRWFRUW9nQVJDckF4b1FPUXVqQWdFRWZ5QUJSUVJBSUFCQnZNMERha0VBTmdJQUlBQkJ5TTBEYWtFQU5nSUFJQUJCbk0wRGFpSUVLQUlBSWdFRVFDQUFRWmpOQTJvaEJRTkFJQVVvQWdBZ0FrRUNkR29vQWdBaUF3UkFJQU1vQWp3aUFRUkFJQUVRVWdzZ0F5Z0NMQ0lCQkVBZ0FSQlNDeUFES0FJVUlnRUVRQ0FCRUZJTElBTVFVaUFFS0FJQUlRRUxJQUpCQVdvaUFpQUJTUTBBQ3dzZ0JFRUFOZ0lBQ3lBQVFhek5BMm9pQXlnQ0FDSUNSUVJBSUFOQkFEWUNBQThMSUFCQnFNMERhaUVFUVFBaEFTQUNJUUFEUUNBRUtBSUFJQUZCQW5ScUtBSUFJZ0lFUUNBQ0tBSThJZ0FFUUNBQUVGSUxJQUlvQWl3aUFBUkFJQUFRVWdzZ0FpZ0NGQ0lBQkVBZ0FCQlNDeUFDRUZJZ0F5Z0NBQ0VBQ3lBQlFRRnFJZ0VnQUVrTkFBc2dBMEVBTmdJQUMwZ0JBWDhnQUVGQWF5Z0NBQ0lCQkVBZ0FSQ09BU0FCRUZJTElBQW9Ba1FpQVFSQUlBRVFqZ0VnQVJCU0N5QUFRYWdCYWhDTkFTQUFRWndCYWhDTkFTQUFRWkFCYWhDTkFRc1lBRUczOVFJc0FBQkZCRUFQQzBHczlRSkIvd0VRcEFFTEJnQkJEaEFBQzFFQkFYOGdBRUVBU2lNREtBSUFJZ0VnQUdvaUFDQUJTSEVnQUVFQVNISUVRQkFER2tFTUVCOUJmdzhMSXdNZ0FEWUNBQ0FBRUFKS0JFQVFBVVVFUUNNRElBRTJBZ0JCREJBZlFYOFBDd3NnQVFzR0FDQUFFRklMRWdBZ0FnUkFJQUFnQVNBQ0VGTWFDeUFBQzBZQkFYOUJDQkFVSVFCQkFDUUZRUmNnQUVHLzdnQVFEU01GSVFGQkFDUUZJQUZCQVhFRVFCQVhJUUVnQUJBYUlBRVFIZ1VnQUVIc0pUWUNBQ0FBUWZnS1FRd1FHd3NMWGdFQ2Z5QUFMQUFBSWdKRklBSWdBU3dBQUNJRFIzSUVRQ0FESVFBZ0FpRUJCUU5BSUFCQkFXb2lBQ3dBQUNJQ1JTQUNJQUZCQVdvaUFTd0FBQ0lEUjNJRVFDQURJUUFnQWlFQkJRd0JDd3NMSUFGQi93RnhJQUJCL3dGeGF3c1VBUUYvSUFBUVp5RUNJQUVFZnlBQ0JTQUFDd3RxQVFGL1FRQWtCVUVPSUFCQkJHcEJCQkFOSXdVaEFVRUFKQVVnQVVFQmNVVUVRQ0FBUVFocUlnQW9BZ0FpQVVVRVFBOExRUUFrQlVFT0lBRkJ6QllRRFNNRklRRkJBQ1FGSUFGQkFYRkZCRUFnQUNnQ0FDSUFSUVJBRHdzZ0FCQlNEd3NMUVFBUUdCQmFDOGNCQVFGL1FRQWtCVUVPSUFCQndCRVFEU01GSVFGQkFDUUZJQUZCQVhGRkJFQkJBQ1FGUVE0Z0FFSEVFV3BCNEJNUURTTUZJUUZCQUNRRklBRkJBWEZGQkVBZ0FFR3NJR29RWENBQVFiUWJhaEJjSUFCQnZCWnFFRndnQUVIRUVXb1FYQ0FBUVpBTmFoQmNJQUJCNEFocUVGd2dBRUd3QkdvUVhDQUFFRndQQ3d0QkFCQVlJUUVnQUVHc0lHb1FYQ0FBUWJRYmFoQmNJQUJCdkJacUVGd2dBRUhFRVdvUVhDQUFRWkFOYWhCY0lBQkI0QWhxRUZ3Z0FFR3dCR29RWENBQUVGd2dBUkJhQ3p3QkFYOGdBZ1JBUVFBa0JVRWRJQUFnQVNBQ0VBY2FJd1VoQVVFQUpBVWdBVUVCY1FSQVFRQVFHQ0lBRUZvRklBQWhBd3NGSUFBaEF3c2dBd3NuQVFGL0l3UWhBeU1FUVJCcUpBUWdBeUFDTmdJQUlBQWdBU0FERU00QklRQWdBeVFFSUFBTHBBSUFBbjhnQUFSL0lBRkJnQUZKQkVBZ0FDQUJPZ0FBUVFFTUFndEJyQ01vQWdBb0FnQkZCRUFnQVVHQWYzRkJnTDhEUmdSQUlBQWdBVG9BQUVFQkRBTUZRWWk4QTBIVUFEWUNBRUYvREFNTEFBc2dBVUdBRUVrRVFDQUFJQUZCQm5aQndBRnlPZ0FBSUFBZ0FVRS9jVUdBQVhJNkFBRkJBZ3dDQ3lBQlFZQ3dBMGtnQVVHQVFIRkJnTUFEUm5JRVFDQUFJQUZCREhaQjRBRnlPZ0FBSUFBZ0FVRUdka0UvY1VHQUFYSTZBQUVnQUNBQlFUOXhRWUFCY2pvQUFrRUREQUlMSUFGQmdJQjhha0dBZ01BQVNRUi9JQUFnQVVFU2RrSHdBWEk2QUFBZ0FDQUJRUXgyUVQ5eFFZQUJjam9BQVNBQUlBRkJCblpCUDNGQmdBRnlPZ0FDSUFBZ0FVRS9jVUdBQVhJNkFBTkJCQVZCaUx3RFFkUUFOZ0lBUVg4TEJVRUJDd3NMZ1FFQ0FuOEJmaUFBcHlFQ0lBQkMvLy8vL3c5V0JFQURRQ0FCUVg5cUlnRWdBRUlLZ3FkQi93RnhRVEJ5T2dBQUlBQkNDb0FoQkNBQVF2Ly8vLytmQVZZRVFDQUVJUUFNQVFzTElBU25JUUlMSUFJRVFBTkFJQUZCZjJvaUFTQUNRUXB3UVRCeU9nQUFJQUpCQ200aEF5QUNRUXBQQkVBZ0F5RUNEQUVMQ3dzZ0FRc0pBQ0FBUVFBUWt3SUxTUUVCZjBHbzlRQkJxUFVBS0FJQVFRRnFJZ0ZCQTBzRWYwRUFJZ0VGSUFFTE5nSUFJQUFnQVVFTmRFR3M5UUJxSWdCQmdCQVFleG9nQVVFTmRFR290UUZxUVFBMkFnQWdBQXZUQVFFQmZ5QUFRUUFRZ3dFZ0FFR2tsZ0ZxS0FJQUlnRUVRQ0FCRUZJTElBQkJ1TTBEYWlnQ0FDSUJCRUFnQVJCU0N5QUFRYWpOQTJvb0FnQWlBUVJBSUFFUVVnc2dBRUdZelFOcUtBSUFJZ0VFUUNBQkVGSUxJQUJCaU0wRGFoQ1lBU0FBUWRETUEyb1FzZ0lnQUVIUXhnTnFJZ0VvQWdBRVFDQUJRUUEyQWdBZ0FFSDh4d05xS0FJQUVGSUxJQUJCcUpZQmFoRFlBU0FBS0FJMElnRUVRQ0FCRUZJTElBQW9BaVFpQVFSQUlBRVFVZ3NnQUNnQ0ZDSUJSUVJBSUFCQkJHb1FtQUVQQ3lBQkVGSWdBRUVFYWhDWUFRdk5Bd0VHZndKQUFrQWdBRUdRbFFGcUlnSW9BZ0FFUUNBQ1FRQTJBZ0FnQUVHOGxnRnFJZ0VvQWdBUVVpQUNLQUlBSWdOQmdJREFBRWdFUUNBRFJRMENCU0FEUVlDQVFHcEZEUU1MSUFKQkFEWUNBQ0FCS0FJQUVGSUZJQUJCdkpZQmFpRUJDd3NnQVVId3F0VUFFR3dpQVRZQ0FDQUJCRUFnQUVIb2x3RnFJQUZCNEtyVkFHbzJBZ0FnQWtHQWdNQUFOZ0lBQlVHczlRSVFWZ3NMSUFCQjhCUnFRUUU2QUFBZ0FFSGtER3BCQWpZQ0FDQUFFTjhCSUFCQjhCQnFRUUE2QUFBZ0FFSHhFR3BCQWpvQUFDQUFRZklRYWlJQlFvU0lrS0RBZ0lHQ0JEY0FBQ0FCUVFRNkFBZ2dBRUg3RUdwQkJrSDFBUkJVR2lBQVFmQU9ha0VBT2dBQUlBQkI4UTVxUVFFNkFBQWdBRUh5RG1wQkFqb0FBRUVESVFOQkFTRUJRUUVoQkVFRElRVURRQ0FBUWZBT2FpQUZhaUFET2dBQUlBUkJBV29oQWlBQlFYOXFJZ0ZGSWdZRVFDQUNJUUVMSUFNZ0Jtb2hBeUFHUlFSQUlBUWhBZ3NnQlVFQmFpSUZRWUFDUndSQUlBSWhCQXdCQ3dzZ0FFSHdFbW9pQVVJQU53SUFJQUZDQURjQ0NDQUJRZ0EzQWhBZ0FVSUFOd0lZSUFGQ0FEY0NJQ0FCUWdBM0FpZ2dBVUlBTndJd0lBRkNBRGNDT0NBQVFiQVRha0VJUWNBQkVGUWFJQUJCeEF4cVFRYzZBQUFMbUFNQ0JYOEJmaU1FSVFRakJFR2dBbW9rQkNBQUlBQkJMR29pQlRZQ0tDQUFRU0JxSWdZcEF3QWlCNmRCUDNFaUEwRUJhaUVDSUFCQkxHb2dBMnBCZ0g4NkFBQWdBa0U0UndSQUlBQkJMR29oQXdOQUlBSkJQM0VpQWdSQUlBQkJMR29nQW1wQkFEb0FBQ0FDUVFGcUlnSkJPRWNOQVFVZ0FCRGhBU0FEUVFBNkFBQkJBU0VDREFFTEN3c2dCRUVnYWlFRElBQWdCMEkxaUR3QVpDQUFJQWRDTFlnOEFHVWdBQ0FIUWlXSVBBQm1JQUFnQjBJZGlEd0FaeUFBSUFkQ0ZZZzhBR2dnQUNBSFFnMklQQUJwSUFBZ0IwSUZpRHdBYWlBQUlBZW5RZjhCY1VFRGREb0FheUFBRU9FQlFRQWhBZ05BSUFFZ0Ftb2dBQ0FDUVFKMlFRSjBhaWdDQUNBQ1FRTjBRUmh4UVJoemRqb0FBQ0FDUVFGcUlnSkJJRWNOQUFzZ0FFSG56S2ZRQmpZQ0FDQUFRWVhkbnR0N05nSUVJQUJCOHVhNzR3TTJBZ2dnQUVHNjZyK3FlallDRENBQVFmK2t1WWdGTmdJUUlBQkJqTkdWMkhrMkFoUWdBRUdyczQvOEFUWUNHQ0FBUVptYWc5OEZOZ0ljSUFaQ0FEY0RBQ0FFUVNBUVd5QURRWUFDRUZzZ0JVSEFBQkJiSUFRa0JBc2RBUUYvSUFBc0FBZ0VRQThMSUFBb0Fnd2lBVVVFUUE4TElBRVFVZ3Y1QWdFRWZ5QUNSUVJBSUFBUEN3SkFBa0FEUUNBQlFRZHhCRUFnQUVIL0FYRWdBUzBBQUhOQkFuUkJ2UFVDYWlnQ0FDQUFRUWgyY3lFQUlBRkJBV29oQVNBQ1FYOXFJZ0pGRFFJTUFRc0xEQUVMSUFBUEN5QUNRUWRMQkVBZ0FrRjRhaUlFUVhoeElnVkJDR29oQmlBQklRTURRQ0FES0FJQUlBQnpJZ0JCQ0haQi93RnhRUUowUWJ5bEEyb29BZ0FnQUVIL0FYRkJBblJCdkswRGFpZ0NBSE1nQUVFUWRrSC9BWEZCQW5SQnZKMERhaWdDQUhNZ0FFRVlka0VDZEVHOGxRTnFLQUlBY3lBREtBSUVJZ0JCL3dGeFFRSjBRYnlOQTJvb0FnQnpJQUJCQ0haQi93RnhRUUowUWJ5RkEyb29BZ0J6SUFCQkVIWkIvd0Z4UVFKMFFiejlBbW9vQWdCeklBQkJHSFpCQW5SQnZQVUNhaWdDQUhNaEFDQURRUWhxSVFNZ0FrRjRhaUlDUVFkTERRQUxJQUVnQm1vaEFTQUVJQVZySWdKRkJFQWdBQThMQ3dOQUlBQkIvd0Z4SUFFdEFBQnpRUUowUWJ6MUFtb29BZ0FnQUVFSWRuTWhBQ0FCUVFGcUlRRWdBa0YvYWlJQ0RRQUxJQUFMZ0FNQkJuOGpCQ0VFSXdSQlFHc2tCQ0FBSUFBb0FnQWlCMEY0YWlnQ0FHb2hDQ0FIUVh4cUtBSUFJUVlnQkNBQ05nSUFJQVFnQURZQ0JDQUVJQUUyQWdnZ0JDQUROZ0lNSUFSQkZHb2hBQ0FFUVJocUlRa2dCRUVjYWlFSElBUkJJR29oQXlBRVFTaHFJUUVnQkVFUWFpSUZRZ0EzQWdBZ0JVSUFOd0lJSUFWQ0FEY0NFQ0FGUWdBM0FoZ2dCVUVBTmdJZ0lBVkJBRHNCSkNBRlFRQTZBQ1lDUUNBR0lBSkdCSDhnQkVFQk5nSXdJQVlnQkNBSUlBaEJBVUVBSUFZb0FnQW9BaFJCQjNGQnFBSnFFUXNBSUFrb0FnQkJBVVlFZnlBSUJVRUFDd1VnQmlBRUlBaEJBVUVBSUFZb0FnQW9BaGhCQjNGQm9BSnFFUXdBQWtBQ1FBSkFBa0FnQkNnQ0pBNENBQUVDQ3lBQUtBSUFJUUFnQVNnQ0FFRUJSaUFIS0FJQVFRRkdjU0FES0FJQVFRRkdjVVVFUUVFQUlRQUxEQVFMREFFTFFRQWhBQXdDQ3lBSktBSUFRUUZIQkVBZ0FTZ0NBRVVnQnlnQ0FFRUJSbkVnQXlnQ0FFRUJSbkZGQkVCQkFDRUFEQU1MQ3lBRktBSUFDeUVBQ3lBRUpBUWdBQXREQVFKL0lBQVFXU0VCQWtBQ1FBTkFJQUZCQUV3TkFTQUFJQUZCZjJvaUFrRUNkR29vQWdCQkwwY0VRQ0FDSVFFTUFRc0xEQUVMSUFBUEN5QUFJQUZCQW5ScUN5VUFJQUFnQVNBQ0VOWURCRUFQQ3lBQUxBQVVSUVJBRHd0QnJQVUNJQUJCR0dvUXRBSUxDQUFnQUNBQkVITUxQQUVCZnlBQVFRQTJBaEFnQUNnQ0FDSUJCRUFnQVJCU0lBQkJBRFlDQUFzZ0FFRUFOZ0lFSUFCQkFEWUNDQ0FBUVFBMkFoUWdBRUVBTmdKWUM4UUdBUUYvUVFjaEFBTkFJQUVnQUNBQkxnRUFRWUQrQTNGeU93RUFJQUZCQW1vaUF5QUFJQU11QVFCQmdQNERjWEk3QVFBZ0FVRUVhaUlESUFBZ0F5NEJBRUdBL2dOeGNqc0JBQ0FCUVFacUlnTWdBQ0FETGdFQVFZRCtBM0Z5T3dFQUlBRkJDR29pQXlBQUlBTXVBUUJCZ1A0RGNYSTdBUUFnQVVFS2FpSURJQUFnQXk0QkFFR0EvZ054Y2pzQkFDQUJRUXhxSWdNZ0FDQURMZ0VBUVlEK0EzRnlPd0VBSUFGQkRtb2lBeUFBSUFNdUFRQkJnUDREY1hJN0FRQWdBVUVRYWlJRElBQWdBeTRCQUVHQS9nTnhjanNCQUNBQlFSSnFJZ01nQUNBRExnRUFRWUQrQTNGeU93RUFJQUZCRkdvaUF5QUFJQU11QVFCQmdQNERjWEk3QVFBZ0FVRVdhaUlESUFBZ0F5NEJBRUdBL2dOeGNqc0JBQ0FCUVJocUlnTWdBQ0FETGdFQVFZRCtBM0Z5T3dFQUlBRkJHbW9pQXlBQUlBTXVBUUJCZ1A0RGNYSTdBUUFnQVVFY2FpSURJQUFnQXk0QkFFR0EvZ054Y2pzQkFDQUJRUjVxSWdNZ0FDQURMZ0VBUVlEK0EzRnlPd0VBSUFGQklHb2lBeUFBSUFNdUFRQkJnUDREY1hJN0FRQWdBVUVpYWlJRElBQWdBeTRCQUVHQS9nTnhjanNCQUNBQlFTUnFJZ01nQUNBRExnRUFRWUQrQTNGeU93RUFJQUZCSm1vaUF5QUFJQU11QVFCQmdQNERjWEk3QVFBZ0FVRW9haUlESUFBZ0F5NEJBRUdBL2dOeGNqc0JBQ0FCUVNwcUlnTWdBQ0FETGdFQVFZRCtBM0Z5T3dFQUlBRkJMR29pQXlBQUlBTXVBUUJCZ1A0RGNYSTdBUUFnQVVFdWFpSURJQUFnQXk0QkFFR0EvZ054Y2pzQkFDQUJRVEJxSWdNZ0FDQURMZ0VBUVlEK0EzRnlPd0VBSUFGQk1tb2lBeUFBSUFNdUFRQkJnUDREY1hJN0FRQWdBVUUwYWlJRElBQWdBeTRCQUVHQS9nTnhjanNCQUNBQlFUWnFJZ01nQUNBRExnRUFRWUQrQTNGeU93RUFJQUZCT0dvaUF5QUFJQU11QVFCQmdQNERjWEk3QVFBZ0FVRTZhaUlESUFBZ0F5NEJBRUdBL2dOeGNqc0JBQ0FCUVR4cUlnTWdBQ0FETGdFQVFZRCtBM0Z5T3dFQUlBRkJQbW9pQXlBQUlBTXVBUUJCZ1A0RGNYSTdBUUFnQVVGQWF5RUJJQUJCZjJvaEF5QUFRUUJLQkVBZ0F5RUFEQUVMQ3lBQ1FRZHFRUUJCK1FFUVZCb2dBa0VnT2dBR0lBSkJ3QUE2QUFVZ0FrSGdBRG9BQkNBQ1FZQi9PZ0FESUFKQm9IODZBQUlnQWtGQU9nQUJJQUpCWURvQUFBdUZBd0VFZnlBQVFhb0JhaUlETEFBQUJFQWdBU0VDQlNBRFFYODZBQUFnQUJDTkJDQUFRYmdCYWlBQlFRSjBhaUlFS0FJQUlnSUVRQ0FFSUFJb0FnQTJBZ0FnQWc4RklBRWhBZ3NMQWtBQ1FBTkFJQUpCQVdvaUFrRW1SZzBCSUFCQnVBRnFJQUpCQW5ScUlnVW9BZ0FpQkVVTkFBd0NDd0FMSUFNZ0F5d0FBRUYvYWpvQUFDQUFRZHdDYWlJQ0tBSUFJZ01nQUNnQzBBSnJJQUJCQkdvZ0FXb3RBQUFpQVVFTWJDSUVUQVJBUVFBUEN5QUNJQU1nQkdzMkFnQWdBRUhVQW1vaUFpZ0NBQ0FCUVFSMGF5RUFJQUlnQURZQ0FDQUFEd3NnQlNBRUtBSUFOZ0lBSUFCQkJHb2dBbW90QUFBZ0FFRUVhaUFCYWkwQUFDSUNheUVCSUFRZ0FrRUVkR29oQWlBQklBQkJCR29nQUNBQmFpMEFLU0lEYWkwQUFFY0VRQ0FDSUFCQnVBRnFJQU5CZjJvaUEwRUNkR29pQlNnQ0FEWUNBQ0FGSUFJMkFnQWdBaUFBUVFScUlBTnFMUUFBSWdOQkJIUnFJUUlnQVNBRGF5RUJDeUFDSUFCQnVBRnFJQUFnQVdvdEFDbEJBblJxSWdBb0FnQTJBZ0FnQUNBQ05nSUFJQVFMSUFFQmZ5QUFLQUxJQVNJQkJFQWdBUkNWQVNBQkVGSUxJQUJCRUdvUWhBRUxZUUFnQUVIbnpLZlFCallDQUNBQVFZWGRudHQ3TmdJRUlBQkI4dWE3NHdNMkFnZ2dBRUc2NnIrcWVqWUNEQ0FBUWYra3VZZ0ZOZ0lRSUFCQmpOR1YySGsyQWhRZ0FFR3JzNC84QVRZQ0dDQUFRWm1hZzk4Rk5nSWNJQUJDQURjRElBdXNCQUVHZnlNRUlRUWpCRUZBYXlRRUlBQkJGR29pQlNnQ0FDSUlJQUpCQTNRaUNXb2hCaUFGSUFZMkFnQWdBRUVZYWlJSEtBSUFJUVVnQmlBSlNRUkFJQWNnQlVFQmFpSUZOZ0lBQ3lBSElBVWdBa0VkZG1vMkFnQWdDRUVEZGtFL2NTSUdJQUpxUVQ5TEJFQWdBRUVjYWlBR2FpQUJRY0FBSUFacklnVVFVeG9nQUNBQVFkd0FhaUlHSUFCQkhHb2dBeERqQVNBRlFUOXFJQUpKQkVBZ0F3UkFBMEFnQkNBQklBVnFJZ01wQUFBM0FBQWdCQ0FES1FBSU53QUlJQVFnQXlrQUVEY0FFQ0FFSUFNcEFCZzNBQmdnQkNBREtRQWdOd0FnSUFRZ0F5a0FLRGNBS0NBRUlBTXBBREEzQURBZ0JDQURLUUE0TndBNElBQWdCaUFFUVFFUTR3RWdCVUZBYXlFRElBVkIvd0JxSUFKSkJFQWdBeUVGREFFRlFRQWhCZ3NMQlFOQUlBUWdBU0FGYWlJREtRQUFOd0FBSUFRZ0F5a0FDRGNBQ0NBRUlBTXBBQkEzQUJBZ0JDQURLUUFZTndBWUlBUWdBeWtBSURjQUlDQUVJQU1wQUNnM0FDZ2dCQ0FES1FBd053QXdJQVFnQXlrQU9EY0FPQ0FBSUFZZ0JFRUFFT01CSUFNZ0JDa0FBRGNBQUNBRElBUXBBQWczQUFnZ0F5QUVLUUFRTndBUUlBTWdCQ2tBR0RjQUdDQURJQVFwQUNBM0FDQWdBeUFFS1FBb053QW9JQU1nQkNrQU1EY0FNQ0FESUFRcEFEZzNBRGdnQlVGQWF5RURJQVZCL3dCcUlBSkpCRUFnQXlFRkRBRUZRUUFoQmdzTEN3VkJBQ0VHSUFVaEF3c0ZRUUFoQXdzZ0F5QUNUd1JBSUFRa0JBOExJQUJCSEdvZ0Jtb2dBU0FEYWlBQ0lBTnJFRk1hSUFRa0JBc3hBUUYvSUFGQi93RkdCRUFnQUN3QUNFVUVRQThMQ3lBQUlBRVFaRUVFRUJRaUFpQUJOZ0lBSUFKQmdBaEJBQkFiQzlRREFRWi9Ba0FqQkNFREl3UkJnSUFCYWlRRUlBTkJnRUJySVFRZ0FrRUFTQ0VGQWtBZ0FrSC8vd054SWdJRVFDQUFFRmtoQmdKQUlBSkJBWElpQjBFRFJpSUlSUVJBSUFBZ0FTQUdFTWtCUlFSQUFrQUNRQ0FCSUFaQkFuUnFLQUlBRGwwQUFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRQUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRQUJDMEVCSVFBTUJnc0xDd3NnQWtFQlJnUkFJQU1rQkVFQUR3c2dBQ0FFUVlBUUVJSUNJQUVnQTBHQUVCQ0NBZ0ovSUFnRVFDQUZCSDhnQkNBREVITUZJQVFnQXhDZEFRc2lCRVVOQXdVZ0IwRUZSdzBESUFKQkJFWWhCaUFFRU1vQkJFQWdBQ0FCSUFVUTV3RU1BZ3NnQmtVRVFDQUFFTW9CUlFSQUlBVUVmeUFFSUFNUWN3VWdCQ0FERUowQkN5SUVSUTBGUVFBTUF3c0xJQVFvQWdCRkRRTWdCQ0FESUFRUVdSREpBVVVOQXd0QkFBc2hBQXdDQ3dzZ0FCQ2JBU0VBUWJ3T0lBRVFtd0VpQVVFR0VNa0JSUVJBSUFNa0JFRUFEd3NnQWtFQ1J3UkFJQUFnQVNBRkVPY0JJUUFNQVFzZ0JRUi9JQUFnQVJCekJTQUFJQUVRblFFTElRQWdBeVFFSUFCRkR3c2dBeVFFSUFBTFpnRURmeUFBUVJocUlnSW9BZ0FpQVVFRGFpSURJQUFvQWhSUEJFQkJBQThMSUFBb0FnQWlBQ0FCUVFGcWFpMEFBRUVJZENBQUlBRnFMUUFBY2lBQUlBRkJBbXBxTFFBQVFSQjBjaUFBSUFOcUxRQUFRUmgwY2lFQUlBSWdBVUVFYWpZQ0FDQUFDK2NDQVFkL0l3UWhCU01FUVpBRGFpUUVJQVZCOEFKcUlRZ2dCVUhnQVdvaEJpQUZRZkFBYWlFSklBVkIwQUpxSVFvQ1FBSkFJQUZCd0FCTEJFQWdCaENpQVNBR0lBQWdBUkI5SUFZZ0NCQ1hBVUVnSVFFZ0JpRUFCU0FCQkVBZ0FDRUlJQVloQUFVZ0FDRUlRUUFoQVNBR0lRQkJBU0VIREFJTEN3TkFJQVlnQjJvZ0NDQUhhaXdBQUVFMmN6b0FBQ0FIUVFGcUlnY2dBVWNOQUFzZ0FVSEFBRWtFUUVFQUlRY01BUVZCQUNFSEN3d0JDeUFHSUFGcVFUWkJ3QUFnQVdzUVZCcEJBU0VMQ3lBSkVLSUJJQWtnQUVIQUFCQjlJQWtnQWlBREVIMGdDU0FLRUpjQklBVVFvZ0VnQjBVRVFFRUFJUUlEUUNBR0lBSnFJQWdnQW1vc0FBQkIzQUJ6T2dBQUlBSkJBV29pQWlBQlJ3MEFDd3NnQzBVRVFDQUZJQUJCd0FBUWZTQUZJQXBCSUJCOUlBVWdCQkNYQVNBRkpBUVBDeUFHSUFGcVFkd0FRY0FBSUFGckVGUWFJQVVnQUVIQUFCQjlJQVVnQ2tFZ0VIMGdCU0FFRUpjQklBVWtCQXNHQUVFVEVBQUxCZ0JCREJBQUN3Z0FRUU1RQUVFQUMxZ0JBMzhnQUNnQ0JDSUdRUWgxSVFVZ0JrRUJjUVJBSUFJb0FnQWdCV29vQWdBaEJRc2dBQ2dDQUNJQUtBSUFLQUlZSVFjZ0FDQUJJQUlnQldvZ0JrRUNjUVIvSUFNRlFRSUxJQVFnQjBFSGNVR2dBbW9SREFBTEVRQWdBU2dDVEJvZ0FDQUJFS3dESWdBTFFRRUJmd0pBSUFBUVdTSUNRWDlLQkVBZ0FDQUNRUUowYWlFQ0EwQWdBaWdDQUNBQlJnMENJQUpCZkdvaUFpQUFUdzBBUVFBaEFnc0ZRUUFoQWdzTElBSUxaQUVEZndKQUlBSUVRQ0FCSVFNZ0FDRUJBMEFnQXlnQ0FDSUZSUTBDSUFOQkJHb2hBeUFCUVFScUlRUWdBU0FGTmdJQUlBSkJmMm9pQWdSQUlBUWhBUXdCQlNBRUlRRkJBQ0VDQ3dzRklBQWhBVUVBSVFJTEN5QUJRUUFnQWhDd0F4b2dBQXZDQkFFS2Z5TUVJUVlqQkVHQVFHc2tCQ0FBSVFjRFFBSkFBMEFnQUNJRUtBSUFJUWdDUUFKQUEwQUNRQUpBQWtBQ1FDQUlEakFBQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdFQ0N5QUhJUUFNQndzTUFRc01BZ3NnQkVFRWFpSUFLQUlBSWdoQkxrWU5BaUFBSVFRTUFBc0FDeUFFUVFScUlRQU1BUXNnQkNnQ0NFRXVSdzBBQ3lBRVFSQnFJUWdnQkNnQ0RFRXZSZ1JBSUFnaEJ3c01BUXNMQWtBQ1FBTkFBa0FDUUFKQUFrQUNRQ0FBS0FJQUlnY09YUUFDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQVFJTERBTUxJQUFvQWdSQjNBQkdCRUFnQUVFSWFrSGNBQkIwSWdJRVFDQUNRUVJxUWR3QUVIUWlBMEVFYWlFQ0lBTUVmeUFDQlNBQUlnSUxJUU1GSUFBaUF5RUNDd1VnQUNJRElRSUxRUTBoQlF3QkN5QUFJZ29oQ1NBSElRc0xBMEFnQlVFTlJnUkFRUUFoQlNBRElRb2dBaUVKSUFNb0FnQWhDd3NDUUFKQUFrQWdDMEV1YXc0Q0FBRUNDeUFLUVFScUlRTWdDU0VDUVEwaEJRd0NDeUFLUVFScUlnSWhBMEVOSVFVTUFRc0xJQWtnQUVZTkFpQUpJUUFNQVFzTERBRUxJQUFvQWdCQkxrWUVRQ0FBS0FJRVFTNUdCRUFnQUVFSWFpSUNLQUlBUlFSQUlBSWhBQXNMQ3dzZ0FVVUVRQ0FHSkFRZ0FBOExJQVlnQUVHQUVCQnZHaUFCSUFZUWFob2dCaVFFSUFBTEV3QWdBQVIvSUFBZ0FVRUFFSkVCQlVFQUN3dmFBd01CZndGK0FYd0NRQ0FCUVJSTkJFQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBSUFGQkNXc09DZ0FCQWdNRUJRWUhDQWtLQ3lBQ0tBSUFRUU5xUVh4eElnRW9BZ0FoQXlBQ0lBRkJCR28yQWdBZ0FDQUROZ0lBREFzTElBSW9BZ0JCQTJwQmZIRWlBU2dDQUNFRElBSWdBVUVFYWpZQ0FDQUFJQU9zTndNQURBb0xJQUlvQWdCQkEycEJmSEVpQVNnQ0FDRURJQUlnQVVFRWFqWUNBQ0FBSUFPdE53TUFEQWtMSUFJb0FnQkJCMnBCZUhFaUFTa0RBQ0VFSUFJZ0FVRUlhallDQUNBQUlBUTNBd0FNQ0FzZ0FpZ0NBRUVEYWtGOGNTSUJLQUlBSVFNZ0FpQUJRUVJxTmdJQUlBQWdBMEgvL3dOeFFSQjBRUkIxckRjREFBd0hDeUFDS0FJQVFRTnFRWHh4SWdFb0FnQWhBeUFDSUFGQkJHbzJBZ0FnQUNBRFFmLy9BM0d0TndNQURBWUxJQUlvQWdCQkEycEJmSEVpQVNnQ0FDRURJQUlnQVVFRWFqWUNBQ0FBSUFOQi93RnhRUmgwUVJoMXJEY0RBQXdGQ3lBQ0tBSUFRUU5xUVh4eElnRW9BZ0FoQXlBQ0lBRkJCR28yQWdBZ0FDQURRZjhCY2EwM0F3QU1CQXNnQWlnQ0FFRUhha0Y0Y1NJQkt3TUFJUVVnQWlBQlFRaHFOZ0lBSUFBZ0JUa0RBQXdEQ3lBQ0tBSUFRUWRxUVhoeElnRXJBd0FoQlNBQ0lBRkJDR28yQWdBZ0FDQUZPUU1BQ3dzTEN6QUJBbjhnQUVFRWFpSUJLQUlBSWdJRVFDQUFMQUFRUlFSQUlBSVFQZ3NnQVVFQU5nSUFDeUFBUVFBMkFneEJBUXVBQkFJSGZ3SitJQUlnQVVjRVFDQUFRYnFZQVdwQkFUb0FBQXNnQWlBQlNTSURCRUFnQUVHNW1BRnFRUUU2QUFBTElBQkJxSmdCYWl3QUFBUkFJQUJCME0wRGFpSUhLQUlBSWdNZ0FpQUJhM0VpQkVVRVFBOExJQUJCcUpZQmFpRUZJQUJCc0pnQmFpRUlJQUVoQWlBQVFjQ1lBV29pQmlrREFDRUtJQU1oQVFOQUlBVWdBaUFFRVB3RElRTWdDQ2tEQUNJTElBcFZCRUFnQlNBQ0VIVWhBU0FMSUFwOUlncW5JUWtnQUNnQ0FDQUJJQW9nQTYwaUNsTUVmeUFKQlNBREN4QmxJQVlnQmlrREFDQUtmQ0lLTndNQUlBY29BZ0FoQVFzZ0FTQURJQUpxY1NFQ0lBUWdBMnNpQkEwQUN3OExJQUJCcEpZQmFpSUZLQUlBSUFGcUlRUWdBMFVFUUNBQVFiQ1lBV29wQXdBaUNpQUFRY0NZQVdvaUF5a0RBQ0lMVndSQUR3c2dDaUFMZlNJS3B5RUZJQUFvQWdBZ0JDQUtJQUlnQVdzaUFLMGlDbE1FZnlBRkJTQUFDeEJsSUFNZ0F5a0RBQ0FLZkRjREFBOExJQUJCek0wRGFpZ0NBQ0FCYXlFRElBQkJzSmdCYWlJR0tRTUFJZ3NnQUVIQW1BRnFJZ0VwQXdBaUNsVUVRQ0FMSUFwOUlncW5JUWNnQUNnQ0FDQUVJQW9nQTYwaUNsTUVmeUFIQlNBREN4QmxJQUVnQVNrREFDQUtmQ0lLTndNQUlBWXBBd0FoQ3dzZ0N5QUtWd1JBRHdzZ0N5QUtmU0lLcHlFRUlBQW9BZ0FnQlNnQ0FDQUtJQUt0SWdwVEJIOGdCQVVnQWdzUVpTQUJJQUVwQXdBZ0NudzNBd0FMdWc4QkdYOGpCQ0VHSXdSQm9BaHFKQVFnQUVFRWFpSUpLQUlBSWdVZ0FFSG9BR29pRFNnQ0FDSUNRV2RxU2dSQUlBSWdCV3NpQVVFQVNBUkFJQVlrQkVFQUR3c2dBRUh3QUdvaUJ5QUFRZmdBYWlJREtBSUFJQVZySUFjb0FnQnFOZ0lBSUFWQmdJQUJTZ1JBSUFGQkFFb0VRQ0FBS0FJUUlnSWdBaUFGYWlBQkVGMGFDeUFKUVFBMkFnQWdEU0FCTmdJQUlBRWhBZ3NnQWtHQWdBSkdCRUJCQUNFQlFZQ0FBaUVDQlNBQUtBSUFJQUFvQWhBZ0FtcEJnSUFDSUFKckVGNGhBU0FOS0FJQUlnSWdBV29oQlNBQlFRQktCRUFnRFNBRk5nSUFJQVVoQWdzTElBQkI3QUJxSWdRZ0FrRmlhaUlJTmdJQUlBTWdDU2dDQUNJQ05nSUFJQUpCZjJvZ0J5Z0NBQ0lGYWlFRElBVkJmMGNFUUNBRUlBZ2dBMGdFZnlBSUJTQURDellDQUFzZ0FVRi9SZ1JBSUFZa0JFRUFEd3NGSUFVaEFnc2dBRUc0cmdKcUloTWdBRUVRYWlJUEtBSUFJZ2NnQWtFQmFtb3RBQUJCQ0hRZ0J5QUNhaTBBQUVFUWRISWdCeUFDUVFKcWFpMEFBSEpCQ0NBQVFRaHFJZ29vQWdBaUFXdDJJZ1JCZ0lBQ2NTSUZOZ0lBSUFSQmdJQUJjVVVFUUNBQVFiU21BbXBCQUVHRUNCQlVHZ3NnQ1NBQlFRSnFJZ0ZCQTNZZ0Ftb2lBallDQUNBS0lBRkJCM0VpQVRZQ0FDQUZCSDhnQUVHOHJnSnFJQVJCREhaQkEzRWlBMEVCYWlJRU5nSUFJQUJCd0s0Q2FpSUZLQUlBSUFOS0JFQWdCVUVBTmdJQUN5QUpJQUZCQW1vaUFVRURkaUFDYWlJQ05nSUFJQW9nQVVFSGNTSUJOZ0lBSUFSQmdRSnNCVUgyQWdzaERpQUdRWVFJYWlFRUlBWWhDRUVBSVFZRFFDQUVJQVpxSUFjZ0FrRUJhbW90QUFCQkNIUWdCeUFDYWkwQUFFRVFkSElnQnlBQ1FRSnFhaTBBQUhKQkNDQUJhM1pCREhaQkQzRTZBQUFnQ1NBQlFRUnFJZ0ZCQTNZZ0Ftb2lCVFlDQUNBS0lBRkJCM0VpQVRZQ0FDQUdRUUZxSWdKQkUwY0VRQ0FDSVFZZ0JTRUNEQUVMQzBFQUlBUWdBRUcwK0FCcUloUkJFeEJvSUFCQitBQnFJUkVnQUVId0FHb2hFQ0FBUWV3QWFpRVNJQUJCdVBrQWFpRVZJQWhCZjJvaEZrRUFJUVVnQ1NnQ0FDRUJJQTBvQWdBaEFnSkFBa0FEUUNBRklBNUlJUmNnQlVFQVNpRVlJQUloQmdKQUFrQUNRQU5BSUJkRkRRVWdBU0FHUVh0cVNnUkFJQVlnQVdzaUJFRUFTQTBISUJBZ0VTZ0NBQ0FCYXlBUUtBSUFhallDQUNBQlFZQ0FBVW9FUUNBRVFRQktCRUFnRHlnQ0FDSUNJQUlnQVdvZ0JCQmRHZ3NnQ1VFQU5nSUFJQTBnQkRZQ0FDQUVJZ1loQWdzZ0VpQUdRWUNBQWtZRWYwRUFJUUZCZ0lBQ0JTQUFLQUlBSUE4b0FnQWdCbXBCZ0lBQ0lBWnJFRjRoQVNBTktBSUFJZ0lnQVdvaEJpQUJRUUJLQkg4Z0RTQUdOZ0lBSUFZaUFnVWdBZ3NMSWdaQlltb2lDellDQUNBUklBa29BZ0FpQkRZQ0FDQUVRWDlxSUJBb0FnQWlBMm9oQnlBRFFYOUhCRUFnRWlBTElBZElCSDhnQ3dVZ0J3czJBZ0FMSUFGQmYwWU5Cd1VnQVNFRUN5QVBLQUlBSWd3Z0JFRUJhbW90QUFCQkNIUWdEQ0FFYWkwQUFFRVFkSElnRENBRVFRSnFhaTBBQUhKQkNDQUtLQUlBSWdkcmRrSCsvd054SWdzZ0FFRzQrQUJxSUJVb0FnQWlBVUVDZEdvb0FnQkpCSDhnQ1NBSElBQkJ2UGtBYWlBTFFSQWdBV3QySWdkcUxRQUFhaUlEUVFOMklBUnFJZ0UyQWdBZ0NpQURRUWR4SWdRMkFnQWdBRUc4Z1FGcUlBZEJBWFJxQlFOQUFrQWdBVUVCYWlJQlFROVBCRUJCRHlFRERBRUxJQXNnQUVHNCtBQnFJQUZCQW5ScUtBSUFUdzBCSUFFaEF3c0xJQWtnQXlBSGFpSUhRUU4ySUFScUlnRTJBZ0FnQ2lBSFFRZHhJZ1EyQWdBZ0FFRzhrUUZxSUFzZ0FDQURRUUowYWtHMCtBQnFLQUlBYTBFUUlBTnJkaUFBUWZqNEFHb2dBMEVDZEdvb0FnQnFJZ01nRkNnQ0FFOEVmMEVBQlNBREMwRUJkR29MSWdNdUFRQWlBMEgvL3dOeFFSQklEUUVnQTBFUVJ3MERJQXdnQVdvdEFBQWhHU0FNSUFGQkFXcHFMUUFBSVFzZ0RDQUJRUUpxYWkwQUFDRUhJQWtnQkVFQ2FpSURRUU4ySUFGcUlnRTJBZ0FnQ2lBRFFRZHhOZ0lBSUJoRkRRQU1BZ3NBQ3lBSUlBVnFJQUJCdEtZQ2FpQUZhaTBBQUNBRFFmLy9BM0ZxUVE5eE9nQUFJQVZCQVdvaEJRd0NDeUFXSUFWcUxBQUFJUU1nQzBIL0FYRkJDSFFnR1VFUWRISWdCMEgvQVhGeVFRZ2dCR3QyUVE1MlFRTnhRUU5xSVFRRFFDQUVRWDlxSVFZZ0NDQUZhaUFET2dBQUlBUkJBVW9nQlVFQmFpSUZJQTVJY1VVTkFpQUdJUVFNQUFzQUN5QU1JQUZCQVdwcUxRQUFRUWgwSUF3Z0FXb3RBQUJCRUhSeUlBd2dBVUVDYW1vdEFBQnlRUWdnQkd0MlFmLy9BM0VnQTBFUlJpSURCSDlCRFFWQkNRdDJJQU1FZjBFREJVRUxDMm9oQmlBSklBUWdBd1IvUVFNRlFRY0xhaUlEUVFOMklBRnFJZ1EyQWdBZ0NpQURRUWR4TmdJQUlBZ2dCV3BCQUVFQVFRQWdCbXNpQXlBRklBNXJJZ0ZMQkg4Z0F3VWdBUXRyRUZRYUlBWWhBUU5BSUFGQmYyb2hCaUFCUVFGS0lBVkJBV29pQlNBT1NIRUVRQ0FHSVFFTUFRVWdCQ0VCREFJTEFBc0FDd0FMSUFZZ0FVZ0VRQ0FJSkFSQkFROExJQk1vQWdBRVFDQUFRYnl1QW1vaUFTZ0NBRUVBU2dSQVFRQWhBZ05BUVFBZ0NDQUNRWUVDYkdvZ0FFR0Vyd0ZxSUFKQjdCMXNha0dCQWhCb0lBSkJBV29pQWlBQktBSUFTQTBBQ3dzRlFRQWdDQ0FBUVlRQmFrR3FBaEJvUVFBZ0NFR3FBbW9nQUVId0htcEJNQkJvUVFBZ0NFSGFBbW9nQUVISTJnQnFRUndRYUFzZ0FFRzBwZ0pxSUFoQmhBZ1FVeG9nQ0NRRVFRRVBDMEVBSVFBZ0NDUUVRUUFMOXd3Q0UzOENmaU1FSVFVakJFR2dvQUZxSkFRZ0JVR1l3QUJxSVFRZ0FFR3M4d0JxS0FJQUlRa2dBRUh3clFKcUlRZ2dBRUd3cHdGcUlRWWdBRUhNOHdCcUloVW9BZ0FpRTBFRFJ3UkFJQVloQ0FzQ1FDQVRRUUZ5UVFOR0JFQWdBVUVBUnlJTElBaEJpY0VBYWl3QUFFRUFSeUlQY1FSQUlBQkJtTHdEYWlnQ0FFRURSd1JBSUFndEFCbEJFMHdFUUVFQklRdEJBU0VQREFRTElBaEI1TUFBYWlnQ0FFRi9SZ1JBUVFFaEMwRUJJUThNQkFzTElBaEJ1OEVBYWlFR0lBRkJrQUZxSUFoQjRNQUFhaUFJUWJyQkFHb3NBQUFFZnlBR0JVRUFDeENxQWtVRVFDQUVRUUEyQWtRZ0JFRUZOZ0pJSUFRZ0FFRVlhallDQUNBRVFVQnJRUUkyQWdBZ0JDQUlRU0JxTmdJRUMwRUJJUTlCQVNFTEN3VWdBVUVBUnlFTEN3c2dBQ0FBS0FJQUtBSVVRUWR4UVlZQmFoRUFBQ0VYSUFzRVFDQUFFTkVCSVJnZ0FVR0FBV29pQmlBR0tRTUFJQmg4TndNQUN5QUZRUWhxSVJZZ0JTSU1RWmlRQVdvaEJpQU1RWmlBQVdvaEVDQUFFTElCR2lBTVFSaHFJZ1VnQUVFWWFpSVJFR29hSUFWQmdCQWdBRUdpdkFOcUxBQUFSUkRDQVFKQUlBQWdCU0FKUVoyRkEyb3NBQUFFZjBFRUJVRUFDeUlPSUFBb0FnQW9BZ2hCSDNGQnlnQnFFUUVBUlFSQUlBRkJpQUZxSVJRZ0NVR3d5d1JxSVFvZ0NVRzB5d1JxSVEwZ0NVR3N5d1JxSVJJQ1FBSkFJQXNFUUNBVVFnQTNBd0FnQkNBUkVHb2FJQVJCZ0JCQkFSRENBU0FBSUFRZ0RpQUFLQUlBS0FJSVFSOXhRY29BYWhFQkFBMEJBMEFDUUFKQUlBb29BZ0FFUUNBRUlBVVFhaHBCQXlBU0tBSUFJQVZCQUNBS0tBSUFRUTl4UWVvQWFoRURBRUYvUmdSQVFRRWhCd3dDQ3lBRUlBVVFjdzBDSUFVZ0JrR0FFQkJwR2lBUUlBWVEwQUVhUVFBZ0VpZ0NBQ0FHUVFBZ0NpZ0NBRUVQY1VIcUFHb1JBd0JCZjBZRVFFRUJJUWNGSUJBZ0JoQ0xBUVJBSUFZZ0JVR0FFQkI3R2d3RUJVRUFJUWNMQ3dWQkFDRUhDd3NnRFNnQ0FFVUVRQ0FIQkVBTUJnVU1BZ3NBQ3lBRklBUkJnQkFRYVJvZ0JFRUFJQTBvQWdCQkgzRkJLbW9SQkFCRkRRUWdCQ0FGUVlBUUVIc2FJQWNOQkFzZ0NpZ0NBRVVFUUNBTktBSUFSUTBFQ3lBQUlBVWdEaUFBS0FJQUtBSUlRUjl4UWNvQWFoRUJBQTBGSUJSQ0FEY0RBQXdBQ3dBRklBUWdFUkJxR2lBRVFZQVFRUUVRd2dFZ0FDQUVJQTRnQUNnQ0FDZ0NDRUVmY1VIS0FHb1JBUUFOQVFOQUFrQUNRQ0FLS0FJQUJFQWdCQ0FGRUdvYVFRTWdFaWdDQUNBRlFRQWdDaWdDQUVFUGNVSHFBR29SQXdCQmYwWUVRRUVCSVFjTUFnc2dCQ0FGRUhNTkFpQUZJQVpCZ0JBUWFSb2dFQ0FHRU5BQkdrRUFJQklvQWdBZ0JrRUFJQW9vQWdCQkQzRkI2Z0JxRVFNQVFYOUdCRUJCQVNFSEJTQVFJQVlRaXdFRVFDQUdJQVZCZ0JBUWV4b01CQVZCQUNFSEN3c0ZRUUFoQndzTElBMG9BZ0JGQkVBZ0J3UkFEQVlGREFJTEFBc2dCU0FFUVlBUUVHa2FJQVJCQUNBTktBSUFRUjl4UVNwcUVRUUFSUTBFSUFRZ0JVR0FFQkI3R2lBSERRUUxJQW9vQWdCRkJFQWdEU2dDQUVVTkJBc2dBQ0FGSUE0Z0FDZ0NBQ2dDQ0VFZmNVSEtBR29SQVFCRkRRQU1CUXNBQ3dBTElBVWdCQkJxR2d3Q0N5QUpRYWpMQkdwQkR6WUNBQ0FFUVFBMkFrUWdCRUhFQURZQ1NDQUVRVUJyUVFFMkFnQWdCQ0FGTmdJQUlBQWdFU0FPSUFBb0FnQW9BZ2hCSDNGQnlnQnFFUUVBR2lBQUlCZEJBQ0FBS0FJQUtBSVFRUU54UWJnQ2FoRUNBQ0FNSkFSQkFBOExDd0pBQWtBZ0EwSEZBR3NPRkFBQkFRRUJBUUVCQVFFQkFRRUJBUUFCQVFFQUFRc2dEQ0FSTmdJQUN5QUFRUUVRMlFJZ0JTQUdRWUFRRUdrYUFrQUNRQ0FKUWJETEJHb2lBeWdDQUNJSFJRMEFRUU1nQ1VHc3l3UnFJZ1FvQWdBZ0JVRUJJQWRCRDNGQjZnQnFFUU1BUVg5SEJFQkJBQ0FFS0FJQUlBWkJBU0FES0FJQVFROXhRZW9BYWhFREFFRi9SdzBCQ3d3QkN5QUpRYlRMQkdvb0FnQWlBd1JBSUFaQkFTQURRUjl4UVNwcUVRUUFSUTBCQ3lBUEJIOGdBQ0FURU84QkJTQUFFSHdMR2lBVktBSUFRUUpHQkVBZ0FCRHVBU0FBSUFCQmtMd0RhaWtEQUNBQVFmam5BV29wQXdCOVFRQWdBQ2dDQUNnQ0VFRURjVUc0QW1vUkFnQUxJQUlFUUNBV0lBQkIwS2NCYWpZQ0FDQUpRY3lFQTJvc0FBQWFDeUFMUlFSQUlBd2tCRUVCRHdzZ0UwRUZSZ1JBUVFBaEFBVWdDRUdKd1FCcUxBQUFJUUFnQVNBSVFjakFBR29wQXdBM0F5QUxJQUVnQURvQVVTQUJRZ0EzQTNBZ0FVR1FBV29nQ0VIZ3dBQnFLQUlBSUFsQm9Jc0VhaWdDQUJDc0FpQU1KQVJCQVE4TElBd2tCRUVBQ3prQUlBRkJnSUFRVHdSQUR3c2dBQ2dDRUNBQmFpSUFJQUpHQkVBUEN5QUFJQUpCZ0lBUUlBRnJJZ0FnQTBzRWZ5QURCU0FBQ3hCZEdnc0RBQUVMTXdBZ0FFSUFOd0lBSUFCQ0FEY0NDQ0FBSUFFMkFoQWdBRUVBTmdJRUlBQkJBRFlDR0NBQVFRQTJBaFFnQUVFQU5nSWNDLzhEQVFKL0l3UWhDU01FUVlBRmFpUUVJQUpGSUFNc0FJQUVSWElFUUNBSkpBUkJBQThMSUFCQnFDVnFJQUkyQWdBZ0F5QUpRWUFCRUxNRUlBa2dDVUdBQkdvaUNrR0FBUkJwR2dKQUFrQUNRQUpBQWtBQ1FDQUNRUUZyRGdVQUFRSURCQVVMSUFCQnhqRnFJZ1ZCQURvQUFDQUFRY1V4YWlJR1FRQTZBQUFnQUVIRU1Xb2lCMEVBT2dBQUlBb3NBQUFpQUFSQVFRQWhBVUVBSVFKQkFDRURRUUFoQkFOQUlBSkIvd0Z4SUFCQi93RnhJZ2hxSVFJZ0FDQURjeUVESUFSQi93RnhJQWhxSWdCQkIzWkJBWEVnQUVFQmRISWhCQ0FLSUFGQkFXb2lBV29zQUFBaUFBMEFDeUFISUFJNkFBQWdCaUFET2dBQUlBVWdCRG9BQUFzTUJBc2dBRUcwSjJvUXZBSWdBRUhJTVdwQmZ5QUtJQW9RYmhDWkFTSUJPd0VBSUFCQnlqRnFJQUZCRUhZN0FRQWdBRUhPTVdvaUJrRUFPd0VBSUFCQnpERnFJZ2RCQURzQkFDQUtMQUFBSWdFRVFFRUFJUUpCQUNFRFFRQWhCQU5BSUFCQnRDZHFJQUZCL3dGeElnRkJBblJxSVFVZ0J5QURRZi8vQTNFZ0FYTWdCU2dDQUhNaUF6c0JBQ0FHSUFSQi8vOERjU0FCYWlBRktBSUFRUkIyYWlJRU93RUFJQW9nQWtFQmFpSUNhaXdBQUNJQkRRQUxDd3dEQ3lBQUlBb1F4UUlNQWdzZ0FDQUJJQU1nQ1NBRUVNSUNEQUVMSUFBZ0FTQURJQWtnQkNBRklBWWdCeUFJRU1BQ0N5QUtRWUFCRUZzZ0NVR0FCQkJiSUFra0JFRUJDL1VHQVFkL0lBQWhCQ0FDUVg5cUlRQkJBU0VDSUFFaEJnSkFBa0FEUUFKQUFrQWdCa0VBUnlJSkJFQURRQUpBSUFRc0FBQWlCVVVOQmlBRVFRRnFJUU1nQlVIL0FYRWhBUUovSUFWQmYwb0VmeUFEQlNBQlFlQUJjVUhBQVVZRVFDQURMQUFBSWdOQndBRnhRWUFCUndSQVFRQWhBZ3dLQ3lBRFFUOXhJQUZCQm5SQndBOXhjaUVCSUFSQkFtb01BZ3NnQVVId0FYRkI0QUZHQkVBZ0F5d0FBQ0lGUWNBQmNVR0FBVWNFUUVFQUlRSU1DZ3NnQkN3QUFpSURRY0FCY1VHQUFVY0VRRUVBSVFJTUNnc2dCVUVHZEVIQUgzRWdBVUVNZEVHQTRBTnhjaUFEUVQ5eGNpRUJJQVJCQTJvTUFnc2dBVUg0QVhGQjhBRkhCRUJCQUNFQ0RBa0xJQU1zQUFBaUIwSEFBWEZCZ0FGSEJFQkJBQ0VDREFrTElBUXNBQUlpQlVIQUFYRkJnQUZIQkVCQkFDRUNEQWtMSUFRc0FBTWlBMEhBQVhGQmdBRkhCRUJCQUNFQ0RBa0xJQWRCREhSQmdPQVBjU0FCUVJKMFFZQ0E4QUJ4Y2lBRlFRWjBRY0FmY1hJZ0EwRS9jWEloQVNBRVFRUnFDd3NoQkNBQVFRRklEUVlnQVVILy93Tk5EUUFnQUVFQ1NBMEdJQUJCZm1vaEFDQUJRZi8vd3dCTkRRTkJBQ0VDREFFTEN5QUFRWDlxSVFBTUFnVURRQ0FFTEFBQUlnVkZEUVlnQkVFQmFpRURJQVZCL3dGeElRRWdCVUYvU2dSQUlBTWhCQXdFQ3dKL0lBRkI0QUZ4UWNBQlJnUi9JQU1zQUFBaUEwSEFBWEZCZ0FGSEJFQkJBQ0VDREFrTFFRSWhDQ0FEUVQ5eElRVWdBVUVHZEVIQUQzRUZJQUZCOEFGeFFlQUJSZ1JBSUFNc0FBQWlCVUhBQVhGQmdBRkhCRUJCQUNFQ0RBb0xJQVFzQUFJaUEwSEFBWEZCZ0FGSEJFQkJBQ0VDREFvTFFRTWhDQ0FGUVFaMFFjQWZjU0FCUVF4MFFZRGdBM0Z5SVFVZ0EwRS9jUXdDQ3lBQlFmZ0JjVUh3QVVjRVFFRUFJUUlNQ1FzZ0F5d0FBQ0lIUWNBQmNVR0FBVWNFUUVFQUlRSU1DUXNnQkN3QUFpSUZRY0FCY1VHQUFVY0VRRUVBSVFJTUNRc2dCQ3dBQXlJRFFjQUJjVUdBQVVjRVFFRUFJUUlNQ1F0QkJDRUlJQWRCREhSQmdPQVBjU0FCUVJKMFFZQ0E4QUJ4Y2lBRlFRWjBRY0FmY1hJaEJTQURRVDl4Q3dzaEFTQUVJQWhxSVFRZ0JTQUJjaUlCUWYvL0EwME5BeUFCUWYvL3d3QkxCRUJCQUNFQ0RBRUxDd3NMSUFsRkJFQkJBQ0VHREFJTElBWWdBVFlDQUNBR1FRUnFJUVlNQVFzZ0NRUkFJQVlnQVRZQ0FDQUdRUVJxSVFZTUFRVkJBQ0VHREFFTEFBc0FDeUFHUVFBMkFnQWdBZzhMSUFJTE9RQWdCQVJBSUFSQkFEb0FBQXNnQVVVRVFFRUJEd3NnQVNBQ0lBY0VmMEVTQlVFUkN5SUFFSmNDQkVCQkFROExJQUVnQWlBQUVKY0NDd1lBUVJJUUFBc0lBRUVMRUFCQ0FBc0lBRUVCRUFCQkFBdGFBUU4vSUFBb0FnUWlCMEVJZFNFR0lBZEJBWEVFUUNBREtBSUFJQVpxS0FJQUlRWUxJQUFvQWdBaUFDZ0NBQ2dDRkNFSUlBQWdBU0FDSUFNZ0Jtb2dCMEVDY1FSL0lBUUZRUUlMSUFVZ0NFRUhjVUdvQW1vUkN3QUx0Z0VBSUFGQkFUb0FOUUpBSUFFb0FnUWdBMFlFUUNBQlFRRTZBRFFnQVVFUWFpSUFLQUlBSWdORkJFQWdBQ0FDTmdJQUlBRWdCRFlDR0NBQlFRRTJBaVFnQVNnQ01FRUJSaUFFUVFGR2NVVU5BaUFCUVFFNkFEWU1BZ3NnQXlBQ1J3UkFJQUZCSkdvaUFDQUFLQUlBUVFGcU5nSUFJQUZCQVRvQU5nd0NDeUFCUVJocUlnSW9BZ0FpQUVFQ1JnUkFJQUlnQkRZQ0FBVWdBQ0VFQ3lBQktBSXdRUUZHSUFSQkFVWnhCRUFnQVVFQk9nQTJDd3NMQzIwQkFYOENRQ0FCUVJCcUlnQW9BZ0FpQkFSQUlBUWdBa2NFUUNBQlFTUnFJZ0FnQUNnQ0FFRUJhallDQUNBQlFRSTJBaGdnQVVFQk9nQTJEQUlMSUFGQkdHb2lBQ2dDQUVFQ1JnUkFJQUFnQXpZQ0FBc0ZJQUFnQWpZQ0FDQUJJQU0yQWhnZ0FVRUJOZ0lrQ3dzTHNRUUJCSDhDUUNBQUJFQWdBQkJaSVFRQ1FBSkFBMEFDUUNBRVFRQk1CRUFnQUNFRERBRUxJQUFnQkVGL2FpSURRUUowYWlnQ0FFRXZSZzBDSUFNaEJBd0JDd3NNQVFzZ0FDQUVRUUowYWlFREN5QURRUzRRclFFaUF3UkFBa0FDUUNBRFFRUnFJZ1FvQWdBTkFDQUFFRmtnQVVGOWFrOE5BQXdCQ3lBRVFaZ05FT3dCQkVBZ0JFSHNEQkRzQVEwRUN3c2dCRUdvRFJCcUdnVWdBRUdFRFNBQkVIZ2FJQUFRV1NFREFrQUNRQU5BQWtBZ0EwRUFUQVJBSUFBaEFRd0JDeUFBSUFOQmYyb2lBVUVDZEdvb0FnQkJMMFlOQWlBQklRTU1BUXNMREFFTElBQWdBMEVDZEdvaEFRc2dBVUV1RUswQklRTUxCVUVBUVlRTklBRVFlQm9MQ3lBQ1JRUkFJQUFRb1FNaEFnTkFBa0FnQWlBQ0tBSUFRUUZxSWdFMkFnQWdBVUU2UndSQVFTRWhCUXdCQ3lBQ1FUQTJBZ0FnQWtGOGFpSUdJQUJKRFFBZ0JpZ0NBRUZRYWtFS1NRUkFJQVloQWd3Q0N3c0xJQVZCSVVZRVFBOExJQUFnQUJCWlFRSjBhaUlBSUFaSEJFQURRQ0FBSUFBb0FnQTJBZ1FnQUVGOGFpRUJJQUFnQWtjRVFDQUJJUUFNQVFzTEN5QUNRVEUyQWdBUEN5QURRUWhxSWdFb0FnQkJVR3BCQ2trRVFDQURRUXhxSWdBb0FnQkJVR3BCQ2trRVFDQUFJQUFvQWdCQkFXb2lBVFlDQUNBQlFUcEhCRUFQQ3dOQUlBQkJmR29pQVNnQ0FDSUNRUzVIQkVBZ0FFRXdOZ0lBSUFFZ0FrRUJhaUlDTmdJQUlBSkJPa1lFUUNBQklRQU1BZ1ZCSVNFRkN3c0xJQVZCSVVZRVFBOExJQUJCd1FBMkFnQVBDd3NnQVVHNERSQnFHZ3RhQUFKQUFrQWdBVVVOQUNBQktBSUFSUTBBSUFJZ0FVY0VRQ0FDSUFFZ0F4Q3VBUm9MREFFTElBQUVRQ0FBSUFJZ0F4QjdHZ1VnQWtFQU5nSUFDd3NnQTBVRVFDQUNEd3NnQWlBRFFYOXFRUUowYWtFQU5nSUFJQUlMelFFQkJYOGdBQ2dDVkNFRUFrQUNRQ0FBS0FJY0lnTWdBVVlOQUNBQUlBTWdBQ2dDRkNBRGF4REVBVUYvUncwQVFYOGhBQXdCQ3dKQUlBSkJBRWNnQkVFRWFpSUZLQUlBUVFCSGNRUkFJQUloQUNBRUtBSUFJUVlEUUNBR0lBRWdBQkRNQVNJRFFYOU1CRUFnQXlFQURBTUxJQUVnQTJvaEFTQUZJQVVvQWdCQmYyb2lCellDQUNBRUlBUW9BZ0JCQkdvaUJqWUNBQ0FBSUFOcklnQkJBRWNnQjBFQVIzRU5BQ0FESVFBTEJVRUFJUUFMQ3lBRUtBSUFRUUEyQWdBZ0FFRUFUZ1JBSUFJaEFBc0xJQUFMT3dFQmZ3SkFJQUlFUUFOQUlBQW9BZ0JCSUhFTkFpQUJRUVJxSVFNZ0FTZ0NBQ0FBRUt3QkdpQUNRWDlxSWdJRVFDQURJUUVNQVFzTEN3c0xEZ0FnQUNBQklBSVFzUU1hSUFBTEhnRUJmeUFBSUFBZ0FSQzBBMEVDZEdvaUFpZ0NBQVIvSUFJRlFRQUxDemNCQVg4Z0FCQlpJZ0pGQkVBUEN5QUNRUUZxSUFGSklBQWdBa0YvYWtFQ2RHb29BZ0JCTDBkeFJRUkFEd3NnQUVIOERCQ0dBaG9MVVFFQ2Z3Si9JQUlFZndOQUlBRW9BZ0FpQTBVZ0FDZ0NBQ0lFUlNBRUlBTkhjbkpGQkVBZ0FFRUVhaUVBSUFGQkJHb2hBVUVBSUFKQmYyb2lBa1VOQXhvTUFRc0xJQVFnQTJzRlFRQUxDeUlBQ3hZQUlBQkZCRUJCQUE4TElBQkIyQTRReHdGQkFFY0xTZ0VCZnlNRUlRTWpCRUVRYWlRRUlBTWdBRFlDQUNBRElBRTJBZ1FnQXlBQ05nSUlRY1lCSUFNUUpDSUFRWUJnU3dSQVFZaThBMEVBSUFCck5nSUFRWDhoQUFzZ0F5UUVJQUFMeWdJQkEzOGpCQ0VFSXdSQkVHb2tCQUovSUFFRWZ3SkFJQUlFUUNBQVJRUkFJQVFoQUFzZ0FTd0FBQ0lEUVg5S0JFQWdBQ0FEUWY4QmNUWUNBQ0FEUVFCSERBUUxJQUVzQUFBaEEwR3NJeWdDQUNnQ0FFVUVRQ0FBSUFOQi83OERjVFlDQUVFQkRBUUxJQU5CL3dGeFFiNSthaUlEUVRKTkJFQWdBMEVDZEVHa0htb29BZ0FoQXlBQ1FRUkpCRUFnQTBHQWdJQ0FlQ0FDUVFac1FYcHFkbkVOQXdzZ0FTMEFBU0lDUVFOMklnVkJjR29nQlNBRFFScDFhbkpCQjAwRVFDQUNRWUIvYWlBRFFRWjBjaUlDUVFCT0JFQWdBQ0FDTmdJQVFRSU1CZ3NnQVMwQUFrR0FmMm9pQTBFL1RRUkFJQU1nQWtFR2RISWlBa0VBVGdSQUlBQWdBallDQUVFRERBY0xJQUV0QUFOQmdIOXFJZ0ZCUDAwRVFDQUFJQUVnQWtFR2RISTJBZ0JCQkF3SEN3c0xDd3NMUVlpOEEwSFVBRFlDQUVGL0JVRUFDd3NoQUNBRUpBUWdBQXV4RkFJVWZ3RitJd1FoQ3lNRVFVQnJKQVFnQzBFVWFpRVRJQXRCRUdvaURTQUJOZ0lBSUFCQkFFY2hFaUFMUVJocUlnRkJLR29pRUNFVklBRkJKMm9oRmlBTFFRaHFJaFJCQkdvaEdFRUFJUUVDUUFKQUEwQUNRQ0FNUVg5S0JFQWdCVUgvLy8vL0J5QU1hMG9FZjBHSXZBTkJ5d0EyQWdCQmZ3VWdCU0FNYWdzaERBc2dEU2dDQUNJSkxBQUFJZ1pGRFFJZ0NTRUZBa0FDUUFOQUFrQUNRQUpBQWtBZ0JrRVlkRUVZZFE0bUFRSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQUNDeUFGSVFZTUJBc01BUXNnRFNBRlFRRnFJZ1UyQWdBZ0JTd0FBQ0VHREFFTEN3d0JDd05BSUFZc0FBRkJKVWNOQVNBRlFRRnFJUVVnRFNBR1FRSnFJZ1kyQWdBZ0Jpd0FBRUVsUmcwQUN3c2dCU0FKYXlFRklCSUVRQ0FBSUFrZ0JSQmpDeUFGRFFFZ0RTQU5LQUlBSWdVZ0RTZ0NBQ3dBQVVGUWFrRUtUd1IvUVg4aENrRUJCU0FGTEFBQ1FTUkdCSDhnQlN3QUFVRlFhaUVLUVFFaEFVRURCVUYvSVFwQkFRc0xhaUlGTmdJQUlBVXNBQUFpQ0VGZ2FpSUdRUjlMUVFFZ0JuUkJpZEVFY1VWeUJFQkJBQ0VHQlVFQUlRY2dDQ0VHQTBCQkFTQUdRUmgwUVJoMVFXQnFkQ0FIY2lFR0lBMGdCVUVCYWlJRk5nSUFJQVVzQUFBaUNFRmdhaUlIUVI5TFFRRWdCM1JCaWRFRWNVVnlSUVJBSUFZaEJ5QUlJUVlNQVFzTEN3SkFJQWhCL3dGeFFTcEdCSDhDZndKQUlBVXNBQUZCVUdwQkNrOE5BQ0FOS0FJQUlnVXNBQUpCSkVjTkFDQUVJQVZCQVdvaUFTd0FBRUZRYWtFQ2RHcEJDallDQUNBRElBRXNBQUJCVUdwQkEzUnFLUU1BcHlFQlFRRWhCeUFGUVFOcURBRUxJQUVFUUVGL0lRd01CQXNnRWdSQUlBSW9BZ0JCQTJwQmZIRWlCU2dDQUNFQklBSWdCVUVFYWpZQ0FBVkJBQ0VCQzBFQUlRY2dEU2dDQUVFQmFnc2hCU0FOSUFVMkFnQWdCa0dBd0FCeUlRaEJBQ0FCYXlFUElBRkJBRWdpRGtVRVFDQUdJUWdMSUE1RkJFQWdBU0VQQ3lBSElRRWdCUVVnRFJDUEFpSVBRUUJJQkVCQmZ5RU1EQU1MSUFZaENDQU5LQUlBQ3lJR0xBQUFRUzVHQkVBZ0Jpd0FBVUVxUndSQUlBMGdCa0VCYWpZQ0FDQU5FSThDSVFVZ0RTZ0NBQ0VHREFJTElBWXNBQUpCVUdwQkNra0VRQ0FOS0FJQUlnWXNBQU5CSkVZRVFDQUVJQVpCQW1vaUJTd0FBRUZRYWtFQ2RHcEJDallDQUNBRElBVXNBQUJCVUdwQkEzUnFLUU1BcHlFRklBMGdCa0VFYWlJR05nSUFEQU1MQ3lBQkJFQkJmeUVNREFNTElCSUVRQ0FDS0FJQVFRTnFRWHh4SWdZb0FnQWhCU0FDSUFaQkJHbzJBZ0FGUVFBaEJRc2dEU0FOS0FJQVFRSnFJZ1kyQWdBRlFYOGhCUXNMUVFBaERnTkFJQVlzQUFCQnYzOXFRVGxMQkVCQmZ5RU1EQUlMSUEwZ0JrRUJhaUlITmdJQUlBNUJPbXdnQml3QUFHcEJ6T1VBYWl3QUFDSVJRZjhCY1NJR1FYOXFRUWhKQkVBZ0JpRU9JQWNoQmd3QkN3c2dFVVVFUUVGL0lRd01BUXNnQ2tGL1NpRVhBa0FDUUNBUlFSTkdCRUFnRndSQVFYOGhEQXdFQlF3Q0N3QUZJQmNFUUNBRUlBcEJBblJxSUFZMkFnQWdDeUFESUFwQkEzUnFLUU1BTndNQURBSUxJQkpGQkVCQkFDRU1EQVFMSUFzZ0JpQUNFTEVCSUEwb0FnQWhCd3NNQVFzZ0VrVUVRRUVBSVFVTUF3c0xJQWRCZjJvc0FBQWlCa0ZmY1NFSElBNUJBRWNnQmtFUGNVRURSbkZGQkVBZ0JpRUhDeUFJUWYvL2UzRWhDaUFJUVlEQUFIRUVmeUFLQlNBSUN5RUdBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUNBSFFjRUFhdzQ0Q3d3SkRBc0xDd3dNREF3TURBd01EQXdNQ2d3TURBd0NEQXdNREF3TURBd0xEQVlFQ3dzTERBUU1EQXdIQUFNQkRBd0lEQVVNREFJTUN3SkFBa0FDUUFKQUFrQUNRQUpBQWtBZ0RrSC9BWEZCR0hSQkdIVU9DQUFCQWdNRUJ3VUdCd3NnQ3lnQ0FDQU1OZ0lBUVFBaEJRd2JDeUFMS0FJQUlBdzJBZ0JCQUNFRkRCb0xJQXNvQWdBZ0RLdzNBd0JCQUNFRkRCa0xJQXNvQWdBZ0REc0JBRUVBSVFVTUdBc2dDeWdDQUNBTU9nQUFRUUFoQlF3WEN5QUxLQUlBSUF3MkFnQkJBQ0VGREJZTElBc29BZ0FnREt3M0F3QkJBQ0VGREJVTFFRQWhCUXdVQzBINEFDRUhJQVZCQ0UwRVFFRUlJUVVMSUFaQkNISWhCZ3dMQ3d3S0N5QVZJQXNwQXdBaUdTQVFFTDRESWdocklncEJBV29oRGtFQUlRbEIzZWtBSVFjZ0JrRUljVVVnQlNBS1NuSkZCRUFnRGlFRkN3d05DeUFMS1FNQUlobENBRk1FUUNBTFFnQWdHWDBpR1RjREFFRUJJUWxCM2VrQUlRY0ZJQVpCZ0JCeFJTRUlJQVpCQVhFRWYwSGY2UUFGUWQzcEFBc2hCeUFHUVlFUWNVRUFSeUVKSUFoRkJFQkIzdWtBSVFjTEN3d0pDMEVBSVFsQjNla0FJUWNnQ3lrREFDRVpEQWdMSUJZZ0N5a0RBRHdBQUNBV0lRaEJBQ0VKUWQzcEFDRU9JQkFoQjBFQklRVWdDaUVHREF3TFFZaThBeWdDQUJDU0FpRUlEQWNMSUFzb0FnQWlDRVVFUUVHQzdnQWhDQXNNQmdzZ0ZDQUxLUU1BUGdJQUlCaEJBRFlDQUNBTElCUTJBZ0JCZnlFS0lCUWhDQXdHQ3lBTEtBSUFJUWdnQlFSQUlBVWhDZ3dHQlNBQVFTQWdEMEVBSUFZUVprRUFJUVVNQ0FzQUN5QUFJQXNyQXdBZ0R5QUZJQVlnQnhDOUF5RUZEQWtMSUFraENFRUFJUWxCM2VrQUlRNGdFQ0VIREFZTElBc3BBd0FpR1NBUUlBZEJJSEVRdndNaENDQUhRUVIxUWQzcEFHb2hCeUFHUVFoeFJTQVpRZ0JSY2lJSkJFQkIzZWtBSVFjTElBa0VmMEVBQlVFQ0N5RUpEQU1MSUJrZ0VCQ1NBU0VJREFJTElBaEJBQ0FGRU1NRElnWkZJUkVnQmlBSWF5RUpJQWdnQldvaEJ5QVJSUVJBSUFraEJRdEJBQ0VKUWQzcEFDRU9JQkZGQkVBZ0JpRUhDeUFLSVFZTUF3c2dDQ0VKUVFBaEJVRUFJUWNEUUFKQUlBa29BZ0FpRGtVTkFDQVRJQTRRc0FFaUIwRUFTQ0FISUFvZ0JXdExjZzBBSUFsQkJHb2hDU0FLSUFjZ0JXb2lCVXNOQVFzTElBZEJBRWdFUUVGL0lRd01CQXNnQUVFZ0lBOGdCU0FHRUdZZ0JRUkFRUUFoQndOQUlBZ29BZ0FpQ1VVTkF5QVRJQWtRc0FFaUNTQUhhaUlISUFWS0RRTWdDRUVFYWlFSUlBQWdFeUFKRUdNZ0J5QUZTUTBBREFNTEFBVkJBQ0VGREFJTEFBc2dCa0gvLzN0eElRb2dCVUYvU2dSQUlBb2hCZ3NnQlVFQVJ5QVpRZ0JTSWdweUlRNGdCU0FWSUFocklBcEJBWE5CQVhGcUlncEtCRUFnQlNFS0N5QU9CRUFnQ2lFRkN5QU9SUVJBSUJBaENBc2dCeUVPSUJBaEJ3d0JDeUFBUVNBZ0R5QUZJQVpCZ01BQWN4Qm1JQThnQlVvRVFDQVBJUVVMREFJTElBQkJJQ0FQSUFVZ0J5QUlheUlLU0FSL0lBb0ZJQVVMSWhFZ0NXb2lCMGdFZnlBSEJTQVBDeUlGSUFjZ0JoQm1JQUFnRGlBSkVHTWdBRUV3SUFVZ0J5QUdRWUNBQkhNUVppQUFRVEFnRVNBS1FRQVFaaUFBSUFnZ0NoQmpJQUJCSUNBRklBY2dCa0dBd0FCekVHWU1BUXNMREFFTElBQkZCRUFnQVFSQVFRRWhBQU5BSUFRZ0FFRUNkR29vQWdBaUFRUkFJQU1nQUVFRGRHb2dBU0FDRUxFQklBQkJBV29oQVNBQVFRbElCRUFnQVNFQURBSUZJQUVoQUFzTEN5QUFRUXBJQkVBRFFDQUVJQUJCQW5ScUtBSUFCRUJCZnlFTURBVUxJQUJCQVdvaEFTQUFRUWxJQkVBZ0FTRUFEQUVGUVFFaERBc0xCVUVCSVF3TEJVRUFJUXdMQ3dzZ0N5UUVJQXdMN1FJQkMzOGpCQ0VFSXdSQjRBRnFKQVFnQkVHSUFXb2hCU0FFUWRBQWFpSURRZ0EzQWdBZ0EwSUFOd0lJSUFOQ0FEY0NFQ0FEUWdBM0FoZ2dBMElBTndJZ0lBUkIrQUJxSWdZZ0FpZ0NBRFlDQUVFQUlBRWdCaUFFSUFNUXpRRkJBRWdFUUVGL0lRRUZJQUFvQWt3YVFRQWhBaUFBS0FJQUlRY2dBQ3dBU2tFQlNBUkFJQUFnQjBGZmNUWUNBQXNnQUVFd2FpSUlLQUlBQkVBZ0FDQUJJQVlnQkNBREVNMEJJUUVGSUFCQkxHb2lDU2dDQUNFS0lBa2dCVFlDQUNBQVFSeHFJZ3dnQlRZQ0FDQUFRUlJxSWdzZ0JUWUNBQ0FJUWRBQU5nSUFJQUJCRUdvaURTQUZRZEFBYWpZQ0FDQUFJQUVnQmlBRUlBTVF6UUVoQVNBS0JFQWdBRUVBUVFBZ0FDZ0NKRUVmY1VIS0FHb1JBUUFhSUFzb0FnQkZCRUJCZnlFQkN5QUpJQW8yQWdBZ0NFRUFOZ0lBSUExQkFEWUNBQ0FNUVFBMkFnQWdDMEVBTmdJQUN3c2dBQ0FBS0FJQUlnTWdCMEVnY1hJMkFnQWdBMEVnY1FSQVFYOGhBUXNMSUFRa0JDQUJDeDhCQW44Z0FDQUFFRmtpQVVFQ2RHcEJmR29oQWlBQkJIOGdBZ1VnQUFzTERBQWdBQ0FCRU1JREdpQUFDKzhCQWdKL0FuNGdBQ0FBS0FJQUtBSVVRUWR4UVlZQmFoRUFBQ0VESUFBb0FnQW9BaEFoQVVFQUpBVWdBU0FBUVFCQkFFRUNFRkFqQlNFQlFRQWtCU0FCUVFGeFJRUkFJQUFvQWdBb0FoUWhBVUVBSkFVZ0FTQUFFRTZ0SXdldFFpQ0doQ0VFSXdVaEFVRUFKQVVnQVVFQmNVVUVRQ0FBS0FJQUtBSVFJUUZCQUNRRklBRWdBQ0FEcHlBRFFpQ0lwMEVBRUZBakJTRUJRUUFrQlNBQlFRRnhCRUJCQUJBWUVGb0ZJQVFQQ3dzTEVCY2hBU0FBS0FJQUtBSVFJUUpCQUNRRklBSWdBQ0FEcHlBRFFpQ0lwMEVBRUZBakJTRUFRUUFrQlNBQVFRRnhCRUJCQUJBWUVGb0ZJQUVRSGd0Q0FBdGNBUUYvSUFCQnhCMDJBZ0FnQUVFQU5nSUVJQUJCQURZQ0dDQUFRUUE2QUFnZ0FFR1l3QUJxUVFBMkFnQWdBRUVBT2dBVklBQkJER29pQVVFQU5nSUFJQUZCQURzQkJDQUJRUUE2QUFZZ0FFRUJPZ0FUSUFCQkFUb0FGQXMvQVFKL0lBQkJCR29pQWlnQ0FDSUJSUVJBSUFBc0FCUUVRRUdzOVFJZ0FFRVlhaEMwQWlBQ0tBSUFJUUVGUW44UEN3c2dBUkJSclNNSHJVSWdob1FMNVFJQ0NYOEJmaUFBUVJGcUlnVXNBQUFFZmlBQUlBQW9BZ0FvQWhSQkIzRkJoZ0ZxRVFBQUJVSUFDeUVNSUFCQkRHb2hDRUh3SHlnQ0FDRUpJQUJCQkdvaEJpQUFRUWhxSVFjZ0FFR1l3QUJxSVFvZ0FFRVVhaUVMSUFCQkdHb2hBd0pBQWtBQ1FBTkFJQWdvQWdCQkFVWUVRQ0FHSUFrMkFnQUxJQWNzQUFBRVFDQUhRUUE2QUFBTElBWW9BZ0FnQVNBQ0VFRWlCRUYvUncwRElBcEJBallDQUNBTExBQUFSUVJBUVg4aEJBd0VDeUFGTEFBQURRRWdDQ2dDQUEwQ0RBSUxBQXNnQWtVRVFFRUFEd3RCQUNFRVFRQWhBd05BSUFBZ0RDQURyWHhCQUNBQUtBSUFLQUlRUVFOeFFiZ0NhaEVDQUNBSUtBSUFRUUZHQkVBZ0JpQUpOZ0lBQ3lBSExBQUFCRUFnQjBFQU9nQUFDeUFHS0FJQUlBRWdBaUFEYXlJRlFZQUVTUVIvSUFVRlFZQUVDeEJCSWdWQmYwWUVmMEdBQkFVZ0JRc2dCR29oQkNBRFFZQUVhaUlESUFKSkRRQUxJQVFQQzBHczlRSWdBeEM2QkVGL0R3c2dCQXVNQWdFRGZ5QUJLQUlBSVFJZ0FFSUFOd0lBSUFCQkFEWUNDQ0FDUWUvLy8vOERTd1JBSUFBUWlnRUxJQUZCQkdvaEJBSkFJQUpCQWtrRVFDQUFJQUk2QUFzZ0FnUkFJQUFoQXdVZ0FDQUNRUUowYWtFQU5nSUFEd3NGSUFKQkJHcEJmSEVpQVVILy8vLy9BMDBFUUNBQUlBRkJBblFRWHlJRE5nSUFJQUFnQVVHQWdJQ0FlSEkyQWdnZ0FDQUNOZ0lFREFJTFFRZ1FGQ0VBUVFBa0JVRVhJQUJCek80QUVBMGpCU0VCUVFBa0JTQUJRUUZ4QkVBUUZ5RUJJQUFRR2lBQkVCNEZJQUJCN0NVMkFnQWdBRUg0Q2tFTUVCc0xDd3RCQUNRRlFSMGdBeUFFSUFJUUJ4b2pCU0VBUVFBa0JTQUFRUUZ4QkVCQkFCQVlJZ0FRV2dVZ0F5QUNRUUowYWtFQU5nSUFDd3NQQUNBQklBQW9BZ0JxSUFJMkFnQUxEUUFnQVNBQUtBSUFhaWdDQUF2UUJnRUNmeUFBS0FJQUlnRUVRQ0FCRUZJZ0FFRUFOZ0lBQ3lBQVFRUnFJZ0VvQWdBaUFnUkFJQUlRVWlBQlFRQTJBZ0FMSUFCQkNHb2lBU2dDQUNJQ0JFQWdBaEJTSUFGQkFEWUNBQXNnQUVFTWFpSUJLQUlBSWdJRVFDQUNFRklnQVVFQU5nSUFDeUFBUVJCcUlnRW9BZ0FpQWdSQUlBSVFVaUFCUVFBMkFnQUxJQUJCRkdvaUFTZ0NBQ0lDQkVBZ0FoQlNJQUZCQURZQ0FBc2dBRUVZYWlJQktBSUFJZ0lFUUNBQ0VGSWdBVUVBTmdJQUN5QUFRUnhxSWdFb0FnQWlBZ1JBSUFJUVVpQUJRUUEyQWdBTElBQkJJR29pQVNnQ0FDSUNCRUFnQWhCU0lBRkJBRFlDQUFzZ0FFRWthaUlCS0FJQUlnSUVRQ0FDRUZJZ0FVRUFOZ0lBQ3lBQVFTaHFJZ0VvQWdBaUFnUkFJQUlRVWlBQlFRQTJBZ0FMSUFCQkxHb2lBU2dDQUNJQ0JFQWdBaEJTSUFGQkFEWUNBQXNnQUVFd2FpSUJLQUlBSWdJRVFDQUNFRklnQVVFQU5nSUFDeUFBUVRScUlnRW9BZ0FpQWdSQUlBSVFVaUFCUVFBMkFnQUxJQUJCT0dvaUFTZ0NBQ0lDQkVBZ0FoQlNJQUZCQURZQ0FBc2dBRUU4YWlJQktBSUFJZ0lFUUNBQ0VGSWdBVUVBTmdJQUN5QUFRVUJySWdFb0FnQWlBZ1JBSUFJUVVpQUJRUUEyQWdBTElBQkJ4QUJxSWdFb0FnQWlBZ1JBSUFJUVVpQUJRUUEyQWdBTElBQkJ5QUJxSWdFb0FnQWlBZ1JBSUFJUVVpQUJRUUEyQWdBTElBQkJ6QUJxSWdFb0FnQWlBZ1JBSUFJUVVpQUJRUUEyQWdBTElBQkIwQUJxSWdFb0FnQWlBZ1JBSUFJUVVpQUJRUUEyQWdBTElBQkIxQUJxSWdFb0FnQWlBZ1JBSUFJUVVpQUJRUUEyQWdBTElBQkIyQUJxSWdFb0FnQWlBZ1JBSUFJUVVpQUJRUUEyQWdBTElBQkIzQUJxSWdFb0FnQWlBZ1JBSUFJUVVpQUJRUUEyQWdBTElBQkI0QUJxSWdFb0FnQWlBZ1JBSUFJUVVpQUJRUUEyQWdBTElBQkI1QUJxSWdFb0FnQWlBZ1JBSUFJUVVpQUJRUUEyQWdBTElBQkI2QUJxSWdFb0FnQWlBZ1JBSUFJUVVpQUJRUUEyQWdBTElBQkI3QUJxSWdFb0FnQWlBZ1JBSUFJUVVpQUJRUUEyQWdBTElBQkI4QUJxSWdFb0FnQWlBZ1JBSUFJUVVpQUJRUUEyQWdBTElBQkI5QUJxSWdFb0FnQWlBZ1JBSUFJUVVpQUJRUUEyQWdBTElBQkIrQUJxSWdFb0FnQWlBZ1JBSUFJUVVpQUJRUUEyQWdBTElBQkIvQUJxSWdBb0FnQWlBVVVFUUE4TElBRVFVaUFBUVFBMkFnQUw2QW9CR244akJDRUNJd1JCRUdva0JDQUNRUWhxSVJJZ0FpRUpJQUJCNEFCcUlnb29BZ0FnQUVIa0FHb2lEQ2dDQUNJQ2F5QUFRZEROQTJvaURTZ0NBQ0lEY1NFVElBQkJOR29oQndKQUFrQWdBRUU0YWlJTEtBSUFSUTBBSUFCQkhHb2hEaUFBUVJocUlSUWdBRUVnYWlFWElBQkJGR29oRHlBQVFjek5BMm9oR0NBQVFhaVlBV29oRlNBQVFhU1dBV29oRUNBQVFhaVdBV29oRVNBQVFicVlBV29oR1NBQVFjQ1lBV29oRmlBVElRRUNRQUpBQWtBQ1FBTkFBa0FnQnlnQ0FDSUdJQVZCQkhScUlob3NBQUJCQ0VjRVFDQUdJQVZCQkhScUtBSUVJUVFnQmlBRlFRUjBha0VOYWlJSUxBQUFCRUFnQkNBTUtBSUFheUFEY1NBVFN3MENJQWhCQURvQUFBd0NDeUFHSUFWQkJIUnFLQUlJSVFZZ0F5QUVJQUpyY1NBQlNRUkFJQVFnQWtjRVFDQUFJQUlnQkJDekFTQUVJUUlnQ2lnQ0FDQUVheUFOS0FJQUlnTnhJUUVMSUFZZ0FVc05CQ0FHQkVBZ0RpZ0NBQ0VCSUJRZ0JqWUNBQ0FCSUFaSkJFQWdGeWdDQUNJQ1FRQkhJQVlnQWt0eEJIOGdDU0FDTmdJQVFhejFBa0hZR3lBSkVHQkJyUFVDRUZZZ0RpZ0NBQ0VCSUJRb0FnQUZJQVlMSVFJZ0R5Z0NBQ0FDSUFGQklHb2dBVUVDZG1vaUFVc0VmeUFDQlNBQklnSUxFRmNpQVVVRVFFR3M5UUlRVmdzZ0R5QUJOZ0lBSUE0Z0FqWUNBQXNnRHlnQ0FDRUJBa0FnQXlBR0lBUnFjU0lEUVg5cUlBUkpCRUFnR0NnQ0FDQUVheUVJSUJVc0FBQkZCRUFnQVNBUUtBSUFJQVJxSUFnUVV4b2dBU0FJYWlBUUtBSUFJQU1RVXhvTUFnc2dDQVJBUVFBaEFnTkFJQUVnQW1vZ0VTQUNJQVJxRUhVc0FBQTZBQUFnQWtFQmFpSUNJQWhIRFFBTElBTkZEUUlMSUFFZ0NHb2hCRUVBSVFJRFFDQUVJQUpxSUJFZ0FoQjFMQUFBT2dBQUlBSkJBV29pQWlBRFJ3MEFDd1VnRlN3QUFBUkFRUUFoQWdOQUlBRWdBbW9nRVNBQ0lBUnFFSFVzQUFBNkFBQWdBa0VCYWlJQ0lBWkhEUUFMQlNBQklCQW9BZ0FnQkdvZ0JoQlRHZ3NMQ3lBQUlBRWdCaUFhRVBnRElRSWdCeWdDQUNBRlFRUjBha0VJT2dBQUlBSUVRQ0FBS0FJQUlBSWdCaEJsQ3lBWlFRRTZBQUFnRmlBV0tRTUFJQWF0ZkRjREFDQUtLQUlBSUFNaUFtc2dEU2dDQUNJRGNTRUJDd3NMQ3lBRlFRRnFJZ1VnQ3lnQ0FDSUVTUTBBUVFBaEFTQUVJUU1NQWdzQUN5QU1JQUkyQWdBZ0JTQUxLQUlBSWdOSkJFQWdCeWdDQUNFQkEwQWdBU0FGUVFSMGFpd0FBRUVJUndSQUlBRWdCVUVFZEdwQkFEb0FEUXNnQlVFQmFpSUZJQU5KRFFCQkFTRUdEQU1MQUFWQkFTRUJDd3NnQXdSQUlBRWhCZ3dCQlNBQlJRMERDd3dCQzBFQUlRVkJBQ0VCUVFFaEJBTkFJQVJGQkVBZ0J5Z0NBQ0lESUFFZ0JXdEJCSFJxSWdRZ0F5QUJRUVIwYWlJREtRSUFOd0lBSUFRZ0F5a0NDRGNDQ0NBTEtBSUFJUU1MSUFVZ0J5Z0NBQ0FCUVFSMGFpd0FBRUVJUm1vaUJVVWhCQ0FCUVFGcUlnRWdBMGtOQUFzZ0JFVUVRQ0FBUVR4cUlnUW9BZ0FoQVNBTElBTWdCV3NpQXpZQ0FDQUJJQU5KQkVBZ0FFRkFheWdDQUNJRlFRQkhJQU1nQlV0eEJFQWdFaUFGTmdJQVFhejFBa0hZR3lBU0VHQkJyUFVDRUZZZ0JDZ0NBQ0VCSUFzb0FnQWhBd3NnQnlnQ0FDQURJQUZCSUdvZ0FVRUNkbW9pQVVzRWZ5QURCU0FCSWdNTFFRUjBFRmNpQVVVRVFFR3M5UUlRVmdzZ0J5QUJOZ0lBSUFRZ0F6WUNBQ0FHRFFJTUF3c0xJQVpGRFFFTElBb29BZ0FoQWd3QkN5QUFJQUlnQ2lnQ0FCQ3pBU0FNSUFvb0FnQWlBallDQUFzZ0RTZ0NBQ0VESUFCQm9KWUJhaUlGSUFCQnpNMERhaWdDQUNJQVFZQ0FnQUpKQkg4Z0FBVkJnSUNBQWdzZ0Ftb2dBM0VpQVRZQ0FDQU1LQUlBSVFBZ0FTQUNSd1JBSUFBZ0FrWUVRQ0FKSkFRUEN5QURJQUFnQW10eElBTWdBU0FDYTNGUEJFQWdDU1FFRHdzTElBVWdBRFlDQUNBSkpBUUxRUUVDZnlBQVFSQnFJZ1FvQWdBaUF5QUFLQUlFVHdSQVFRQVBDeUFFSUFOQkFXb2dBQ2dDQUNBRFFRSjBhaUlBRUZscU5nSUFJQUVnQUNBQ0VHOGFRUUVMdlF3QkVIOENRQ01FSVFZakJFR3dBMm9rQkNBR1FaUURhaUVKQWtBZ0FFRUVhaUlGS0FJQUlnUWdBRUhvQUdvaUNDZ0NBQ0lCUVdkcVNnUkFJQUVnQkdzaUFrRUFTQTBDSUFCQkJHb2hBeUFFUVlDQUFVb0VRQ0FDUVFCS0JFQWdBQ2dDRUNJQklBRWdCR29nQWhCZEdnc2dBMEVBTmdJQUlBZ2dBallDQUFVZ0FTRUNDeUFBS0FJQUlBQW9BaEFnQW1wQmdJQUNJQUpyRUY0aEFpQUlLQUlBSWdRZ0Ftb2hBU0FDUVFCS0JFQWdDQ0FCTmdJQUlBQWdBVUZpYWpZQ2JBd0NDeUFBSUFSQlltbzJBbXdnQWtGL1JnMENDd3NnQlVFQUlBQkJDR29pQ3lnQ0FHdEJCM0VRVlNBQVFjak1BMm9oQWlBRkVGZ2lBVUdBZ0FKeEJFQWdBa0VCTmdJQUlBQkJ3TEVDYWlBQUlBQkJzTWtEYWhDTUJDRUFJQVlrQkNBQUR3c2dBa0VBTmdJQUlBQkJ1TEVDYWtFQU5nSUFJQUJCdkxFQ2FrRUFOZ0lBSUFGQmdJQUJjVVVFUUNBQVFiVEpBMnBCQUVHVUF4QlVHZ3NnQlVFQ0VGVkJBQ0VDQTBBZ0JSQllRUXgySVFFZ0JVRUVFRlVDUUFKQUlBRkIvd0Z4UVE5R0JFQWdCUkJZUVF4MlFmOEJjU0VFSUFWQkJCQlZJQVFFUUNBRVFRSnFJUUVnQ1NBQ2FrRUFRUUJCZmlBRWF5SUVJQUpCYkdvaUEwc0VmeUFFQlNBREMyc1FWQm9EUUNBQlFYOXFJUVFnQWtFQmFpSURRUlJKSUFGQkFVcHhCRUFnQkNFQklBTWhBZ3dCQ3dzRlFROGhBUXdDQ3dVZ0FVSC9BWEVoQVF3QkN3d0JDeUFKSUFKcUlBRTZBQUFMSUFKQkFXb2lBa0VVU1EwQUMwRUFJQWtnQUVHMCtBQnFJZzFCRkJCb0lBQkJCR29oRGlBQVFSQnFJUWtnQUVIc0FHb2hEQ0FBUWJqNUFHb2hEeUFHUVg5cUlSQkJBQ0VDUVFBaEJBSkFBa0FEUUFKQUFrQUNRQUpBQTBBZ0JTZ0NBQ0lISUFnb0FnQWlBMEY3YWtvRVFDQURJQWRySWdGQkFFZ05DQ0FIUVlDQUFVb0VRQ0FCUVFCS0JFQWdDU2dDQUNJRElBTWdCMm9nQVJCZEdnc2dEa0VBTmdJQUlBZ2dBVFlDQUFVZ0F5RUJDeUFBS0FJQUlBa29BZ0FnQVdwQmdJQUNJQUZyRUY0aEFTQUlLQUlBSWdjZ0FXb2hBeUFCUVFCS0JFQWdDQ0FETmdJQUlBd2dBMEZpYWpZQ0FBVWdEQ0FIUVdKcU5nSUFJQUZCZjBZTkNRc0xJQWtvQWdBaUFTQUZLQUlBSWdOQkFXcHFMUUFBUVFoMElBRWdBMm90QUFCQkVIUnlJQUVnQTBFQ2Ftb3RBQUJ5UVFnZ0N5Z0NBQ0lLYTNaQi92OERjU0lISUFCQnVQZ0FhaUFQS0FJQUlnRkJBblJxS0FJQVNRUi9JQVVnQ2lBQVFiejVBR29nQjBFUUlBRnJkaUlCYWkwQUFHb2lCMEVEZGlBRGFqWUNBQ0FMSUFkQkIzRTJBZ0FnQUVHOGdRRnFJQUZCQVhScUJRTkFBa0FnQVVFQmFpSUJRUTlQQkVCQkR5RUJEQUVMSUFjZ0FFRzQrQUJxSUFGQkFuUnFLQUlBVHcwQkN3c2dCU0FCSUFwcUlncEJBM1lnQTJvMkFnQWdDeUFLUVFkeE5nSUFJQUJCdkpFQmFpQUhJQUFnQVVFQ2RHcEJ0UGdBYWlnQ0FHdEJFQ0FCYTNZZ0FFSDQrQUJxSUFGQkFuUnFLQUlBYWlJQklBMG9BZ0JQQkg5QkFBVWdBUXRCQVhScUN5SUJMZ0VBSWdGQi8vOERjVUVRU0EwQklBRkIvLzhEY1VFU1RnMERJQVVRV0NFRElBRkJFRVlFZnlBRlFRTVFWU0FEUVExMlFRTnFCU0FGUVFjUVZTQURRUWwyUVF0cUN5RUJJQVJGRFFBTUFnc0FDeUFHSUFKcUlBQkJ0TWtEYWlBQ2FpMEFBQ0FCUWYvL0EzRnFRUTl4T2dBQUlBSkJBV29oQWd3Q0N5QUNRWlFEVGcwRElCQWdBbW9zQUFBaEJ3TkFJQUZCZjJvaEF5QUdJQUpxSUFjNkFBQWdBa0VCYWlFRUlBSkJrd05JSUFGQkFVcHhCRUFnQkNFQ0lBTWhBUXdCQlNBRUlRSUxDd3dCQ3lBRkVGZ2hCQ0FCUVJKR0JIOGdCVUVERUZVZ0JFRU5ka0VEYWdVZ0JVRUhFRlVnQkVFSmRrRUxhZ3NoQVNBQ1FaUURUZzBDSUFZZ0FtcEJBRUVBSUFKQjdIeHFJZ1JCZmlBQmF5QUJRWDl6SWdOQmZrb0VmeUFEQlVGK0Myc2lBMHNFZnlBRUJTQURDMnNRVkJvRFFDQUJRWDlxSVFNZ0FrRUJhaUVFSUFKQmt3TklJQUZCQVVweEJFQWdBeUVCSUFRaEFnd0JCU0FFSVFJTEN3c2dBa0VBU2lFRUlBSkJsQU5JRFFBTEN5QUFRY3pNQTJwQkFUb0FBQ0FGS0FJQUlBZ29BZ0JLRFFGQkFDQUdJQUJCaEFGcVFhc0NFR2hCQUNBR1Fhc0NhaUFBUWZBZWFrRThFR2hCQUNBR1FlY0NhaUFBUWR3OGFrRVJFR2hCQUNBR1FmZ0NhaUFBUWNqYUFHcEJIQkJvSUFCQnRNa0RhaUFHUVpRREVGTWFJQVlrQkVFQkR3dEJBQ0VBSUFZa0JFRUFEd3NnQmlRRVFRQUxwQXNCQjM4Z0FFRUVhaUlERUZnaEJnSi9JQUJCMEs0QmFpSUhLQUlBSWdGQi8rc0JTd1IvUVlEK0F5QUdRZkQvQTNFaUJFc0VmeUFEUVFnUVZVRUlJUUZCQUFWQkNDRUJBMEFnQVVFQmFpRUJJQUpCQVdvaUJVRUNkRUd3R0dvb0FnQWdCRTBFUUNBRklRSU1BUXNMSUFNZ0FSQlZJQUpCQW5SQnNCaHFLQUlBQ3lFQ0lBUWdBbXRCRUNBQmEzWWhBaUFCUVFKMFFjZ1lhZ1VnQVVIL3V3RkxCRUJCZ0JBZ0JrSHcvd054SWdSTEJIOGdBMEVHRUZWQkJpRUJRUUFGUVFZaEFRTkFJQUZCQVdvaEFTQUNRUUZxSWdWQkFuUkIvQmhxS0FJQUlBUk5CRUFnQlNFQ0RBRUxDeUFESUFFUVZTQUNRUUowUWZ3WWFpZ0NBQXNoQWlBRUlBSnJRUkFnQVd0MklRSWdBVUVDZEVHWUdXb01BZ3NnQVVILzZ3QkxCRUJCZ0NBZ0JrSHcvd054SWdSTEJIOGdBMEVGRUZWQkJTRUJRUUFGUVFVaEFRTkFJQUZCQVdvaEFTQUNRUUZxSWdWQkFuUkJzQlpxS0FJQUlBUk5CRUFnQlNFQ0RBRUxDeUFESUFFUVZTQUNRUUowUWJBV2FpZ0NBQXNoQWlBRUlBSnJRUkFnQVd0MklRSWdBVUVDZEVIUUZtb01BZ3NnQmtIdy93TnhJUVFnQVVIL0cwc0VmeUFFUVlEQUFDQUVTd1IvSUFOQkJSQlZRUVVoQVVFQUJVRUZJUUVEUUNBQlFRRnFJUUVnQWtFQmFpSUZRUUowUVlRWGFpZ0NBQ0FFVFFSQUlBVWhBZ3dCQ3dzZ0F5QUJFRlVnQWtFQ2RFR0VGMm9vQWdBTElnSnJRUkFnQVd0MklRSWdBVUVDZEVHa0Yyb0ZJQVJCZ0lBQ0lBUkxCSDhnQTBFRUVGVkJCQ0VCUVFBRlFRUWhBUU5BSUFGQkFXb2hBU0FDUVFGcUlnVkJBblJCMkJkcUtBSUFJQVJOQkVBZ0JTRUNEQUVMQ3lBRElBRVFWU0FDUVFKMFFkZ1hhaWdDQUFzaUFtdEJFQ0FCYTNZaEFpQUJRUUowUWZ3WGFnc0xDeUlCS0FJQUlBSnFRZjhCY1NFQklBQkI3SzRCYWlJRktBSUFCRUFnQmtIL0gwc2dBVVZ4Qkg5QmdBSWlBUVVnQVF0QmYyb2hBaUFCQkVBZ0FpRUJCU0FERUZnaEJDQURRUUVRVlNBRVFZQ0FBbkVFUUNBRlFRQTJBZ0FnQUVIb3JnRnFRUUEyQWdBUEN5QURRUUVRVlVHQUlDQURFRmhCOFA4RGNTSUdTd1IvSUFOQkJSQlZRUVVoQVVFQUJVRUZJUUZCQUNFQ0EwQWdBVUVCYWlFQklBSkJBV29pQlVFQ2RFR3dGbW9vQWdBZ0JrMEVRQ0FGSVFJTUFRc0xJQU1nQVJCVklBSkJBblJCc0JacUtBSUFDeUVDSUFZZ0FtdEJFQ0FCYTNZZ0FVRUNkRUhRRm1vb0FnQnFRUVYwSUFNUVdFRUxkbkloQmlBRFFRVVFWU0FBUWJDWUFXb2lBU0FCS1FNQUlBUkJEblpCQVhGQkEyb2lBYTE5TndNQUlBQkJwSllCYWlFRElBQkI0QUJxSWdVb0FnQWhBaUFBUWRETkEyb2lCQ2dDQUNFQUEwQWdBeWdDQUNJSElBSnFJQWNnQWlBR2F5QUFjV29zQUFBNkFBQWdCU0FGS0FJQVFRRnFJQVFvQWdBaUFIRWlBallDQUNBQlFYOXFJZ0VOQUFzUEN3VWdBRUhvcmdGcUlnTW9BZ0FoQWlBRElBSkJBV28yQWdBZ0FrRVBTZ1JBSUFCQjlLNEJhaWdDQUVVRVFDQUZRUUUyQWdBTEN3c2dCeUFIS0FJQUlBRnFJZ0lnQWtFSWRtczJBZ0FnQUVINHJnRnFJZ0lvQWdCQkVHb2hCU0FDSUFVMkFnQWdCVUgvQVVzRVFDQUNRWkFCTmdJQUlBQkIvSzRCYWlJQ0lBSW9BZ0JCQVhZMkFnQUxJQUJCeXBnQmFpQUJRUUYwYWlJRkx3RUFRUWgySVFJZ0FFR2tsZ0ZxS0FJQUlRTWdBRUhnQUdvaUJDZ0NBQ0VCSUFRZ0FVRUJhallDQUNBRElBRnFJQUk2QUFBZ0FFR3dtQUZxSWdFZ0FTa0RBRUovZkRjREFDQUFRY3FvQVdvZ0JTNEJBQ0lEUWYvL0EzRWlBa0gvQVhGcUlnUXNBQUFoQVNBRUlBRkJBV282QUFBZ0EwRUJha0VRZEVFUWRVSCtBWEZCb1FGS0JFQWdBRUhLbUFGcUlRTWdBRUhLcUFGcUlRUURRRUVBSUFNZ0JCQ2ZBU0FBUWNxb0FXb2dCUzRCQUNJR1FmLy9BM0VpQWtIL0FYRnFJZ2NzQUFBaEFTQUhJQUZCQVdvNkFBQWdCa0VCYWtFUWRFRVFkVUgrQVhGQm9RRktEUUFMQ3lBRklBQkJ5cGdCYWlBQlFmOEJjVUVCZEdvaUFDNEJBRHNCQUNBQUlBSkJBV283QVFBTDd3SUJDSDlCZ0NBZ0FFRUVhaUlFRUZoQjhQOERjU0lEU3dSL0lBUkJCUkJWUVFVaEFVRUFCVUVGSVFFRFFDQUJRUUZxSVFFZ0FrRUJhaUlGUVFKMFFiQVdhaWdDQUNBRFRRUkFJQVVoQWd3QkN3c2dCQ0FCRUZVZ0FrRUNkRUd3Rm1vb0FnQUxJUUlnQXlBQ2EwRVFJQUZyZGlBQlFRSjBRZEFXYWlnQ0FHb2lBVUgvQVVzRVFBOExJQUJCeks0QmFpSUVJQUJCeXFRQmFpQUJRUUYwYWlJRkxnRUFJZ05CLy84RGNTSUNRUWgyTmdJQUlBQkJ5cXdCYWlBQ1FmOEJjV29pQml3QUFDRUJJQVlnQVVFQmFqb0FBQ0FEUVFGcVFSQjBRUkIxUWY4QmNVVUVRQ0FBUWNxa0FXb2hBeUFBUWNxc0FXb2hCZ05BUVFBZ0F5QUdFSjhCSUFRZ0JTNEJBQ0lIUWYvL0EzRWlBa0VJZGpZQ0FDQUFRY3FzQVdvZ0FrSC9BWEZxSWdnc0FBQWhBU0FJSUFGQkFXbzZBQUFnQjBFQmFrRVFkRUVRZFVIL0FYRkZEUUFMQ3lBRklBQkJ5cVFCYWlBQlFmOEJjVUVCZEdvaUFDNEJBRHNCQUNBQUlBSkJBV283QVFBTDZRZ0NFSDhCZmlNRUlRWWpCRUVRYWlRRUlBQXZBUUFoQWlBQlFkUU1haUlOS0FJQUlnTWdBRUVJYWlJS0tBSUFSd1JBSUFNcEFnQWhFZ05BSUFNZ0EwRjRhaUlES1FJQU53SUFJQU1nRWpjQ0FDQURJQW9vQWdCSERRQUxDeUFDUWYvL0EzRWlERUYvYWlFT0lBTkJBV29pQWlBQ0xRQUFRUVJxT2dBQUlBQkJCR29pQnk0QkFDRUNJQWNnQWtILy93TnhRUVJxT3dFQUlBRkI0QXhxS0FJQVFRQkhJZzhnQTBFQmFpSUZMUUFBSWdocVFRRjJJUVFnQlNBRU9nQUFJQWNnQkVIL0FYRTdBUUFnQXlBTVFRTjBhaUVRSUE0aENTQUNRUVJxUVJCMFFSQjFRZi8vQTNFZ0NHc2hCU0FESVFJRFFDQUNRUWhxSVFRZ0JTQUNRUWxxSWdndEFBQWlDMnNoQlNBSUlBc2dEMnBCQVhZaUN6b0FBQ0FISUFzZ0J5OEJBR283QVFBZ0NDd0FBQ0lMUWY4QmNTQUNMUUFCU2dSQUlBUXNBQUFoRVNBR0lBUkJBbW9pQWlnQkFEWUJBQ0FHSUFJdUFRUTdBUVFnQkNFQ0EwQUNRQ0FDSUFKQmVHb2lDQ2tDQURjQ0FDQUlJQW9vQWdCR0RRQWdDMEgvQVhFZ0FrRnhhaTBBQUVvRVFDQUlJUUlNQWdzTEN5QUlJQkU2QUFBZ0FrRjVhaUFMT2dBQUlBaEJBbW9pQWlBR0tBRUFOZ0VBSUFJZ0JpNEJCRHNCQkFzZ0NVRi9haUlKQkVBZ0JDRUNEQUVMQ3lBUVFYbHFMQUFBQkVBZ0FDNEJBQ0VBQlVFQUlRSWdBeUFPUVFOMGFpRURBMEFnQWtFQmFpRUNJQU5CZUdvaEJDQURRWGxxTEFBQVJRUkFJQVFoQXd3QkN3c2dBaUFGYWlFRElBQWdBQzhCQUNBQ2F5SUVRZi8vQTNFaUFqc0JBQ0FFUWYvL0EzRkJBVVlFUUNBS0tBSUFJZ1FzQUFBaEJTQUVMQUFCSVFJZ0JpQUVRUUpxSWdrb0FRQTJBUUFnQmlBSkxnRUVPd0VFQTBBZ0FrSC9BWEVpQWlBQ1FRRjJhMEgvQVhFaEFpQURRUUYxSWdOQkFVb05BQXNnQkNBQlFjaVdBV29nQVNBTVFRRnFRUUYyYWtHNWxRRnFMUUFBUVFKMGFpSUJLQUlBTmdJQUlBRWdCRFlDQUNBTklBYzJBZ0FnQnlBRk9nQUFJQWNnQWpvQUFTQUFRUVpxSWdBZ0JpZ0JBRFlCQUNBQUlBWXVBUVE3QVFRZ0JpUUVEd1VnQXlFRklBSWhBQXNMSUFjZ0JTQUZRUUYyYXlBSEx3RUFhanNCQUNBTVFRRnFRUUYySWdJZ0FFSC8vd054UVFGcVFRRjJJZ05HQkVBZ0NpZ0NBQ0VBQlNBS0tBSUFJUUFnQVNBQ2FrRzVsUUZxTEFBQUlnSkIvd0Z4SVFRZ0FTQURha0c1bFFGcUxBQUFJZ2xCL3dGeElRVWdBaUFKUndSQUlBRkJ5SllCYWlBRlFRSjBhaUlKS0FJQUlnSUVRQ0FKSUFJb0FnQTJBZ0FnQWlBQUlBTkJCSFFRVXhvZ0FDRURJQUloQUFVZ0FVR1VsUUZxSUFScUxRQUFJQUZCbEpVQmFpQUZhaTBBQUNJRGF5RUNJQUFnQTBFRWRHb2hBeUFDSUFGQmxKVUJhaUFCSUFKcVFibVZBV290QUFBaUJHb3RBQUJIQkVBZ0F5QUJRY2lXQVdvZ0JFRi9haUlFUVFKMGFpSUZLQUlBTmdJQUlBVWdBellDQUNBRElBRkJsSlVCYWlBRWFpMEFBQ0lFUVFSMGFpRURJQUlnQkdzaEFnc2dBU0FDYWtHNWxRRnFMUUFBSVFRTElBTWdBVUhJbGdGcUlBUkJBblJxSWdFb0FnQTJBZ0FnQVNBRE5nSUFDeUFLSUFBMkFnQUxJQTBnQURZQ0FDQUdKQVFMdXhJQkNYOGdBRUh3REdwQkFFR0FBaEJVR2lBQVFaQ1ZBV29pQmhDT0JDQUFRZXdNYWlJSUlBQkI1QXhxSWdVb0FnQWlBMEYvY3lJQlFYTktCSDhnQVFWQmN3czJBZ0FnQUVIRWxnRnFJZ2NvQWdBaUFTQUFRY0NXQVdvaUFpZ0NBRVlFUUNBQVFjaVdBV29pQkNnQ0FDSUJCRUFnQkNBQktBSUFOZ0lBQlNBR1FRQVFvQUVoQVNBRktBSUFJUU1MQlNBSElBRkJjR29pQVRZQ0FBc2dBRUhRREdvZ0FUWUNBQ0FBUWNnTWFpSUZJQUUyQWdBZ0FVRUFOZ0lNSUFCQjRBeHFJQU0yQWdBZ0FVR0FBanNCQUNBQlFZRUNPd0VFSUFCQnlKWUJhaUFBUWJtV0FXb3RBQUFpQTBFQ2RHb2lCQ2dDQUNJQkJFQWdCQ0FCS0FJQU5nSUFCU0FDSUFJb0FnQWlBU0FBUVpTVkFXb2dBMm9pQ1MwQUFFRUVkR29pQkRZQ0FDQUVJQWNvQWdCTEJFQWdBaUFFSUFrdEFBQkJCSFJyTmdJQUlBWWdBeENnQVNFQkN3c2dCU2dDQUNBQk5nSUlJQUJCMUF4cUlBRTJBZ0FnQUVIb0RHb2dDQ2dDQURZQ0FDQUFRZkVVYWtFQU9nQUFJQVVvQWdCQkNHb2hBMEVBSVFFRFFDQURLQUlBSUFGQkEzUnFJQUU2QUFBZ0F5Z0NBQ0FCUVFOMGFrRUJPZ0FCSUFNb0FnQWdBVUVEZEdwQkFEWUNCQ0FCUVFGcUlnRkJnQUpIRFFCQkFDRUJDd05BSUFCQjlCUnFJQUZCQjNScVFZQ0FBVUhkK1FBZ0FVRUNhaUlEYm10Qi8vOERjU0lDT3dFQUlBQWdBVUVIZEdwQmhCVnFJQUk3QVFBZ0FDQUJRUWQwYWtHVUZXb2dBanNCQUNBQUlBRkJCM1JxUWFRVmFpQUNPd0VBSUFBZ0FVRUhkR3BCdEJWcUlBSTdBUUFnQUNBQlFRZDBha0hFRldvZ0Fqc0JBQ0FBSUFGQkIzUnFRZFFWYWlBQ093RUFJQUFnQVVFSGRHcEI1QlZxSUFJN0FRQWdBQ0FCUVFkMGFrSDJGR3BCZ0lBQlFiOCtJQU51YTBILy93TnhJZ0k3QVFBZ0FDQUJRUWQwYWtHR0ZXb2dBanNCQUNBQUlBRkJCM1JxUVpZVmFpQUNPd0VBSUFBZ0FVRUhkR3BCcGhWcUlBSTdBUUFnQUNBQlFRZDBha0cyRldvZ0Fqc0JBQ0FBSUFGQkIzUnFRY1lWYWlBQ093RUFJQUFnQVVFSGRHcEIxaFZxSUFJN0FRQWdBQ0FCUVFkMGFrSG1GV29nQWpzQkFDQUFJQUZCQjNScVFmZ1Vha0dBZ0FGQnY3TUJJQU51YTBILy93TnhJZ0k3QVFBZ0FDQUJRUWQwYWtHSUZXb2dBanNCQUNBQUlBRkJCM1JxUVpnVmFpQUNPd0VBSUFBZ0FVRUhkR3BCcUJWcUlBSTdBUUFnQUNBQlFRZDBha0c0RldvZ0Fqc0JBQ0FBSUFGQkIzUnFRY2dWYWlBQ093RUFJQUFnQVVFSGRHcEIyQlZxSUFJN0FRQWdBQ0FCUVFkMGFrSG9GV29nQWpzQkFDQUFJQUZCQjNScVFmb1Vha0dBZ0FGQjg1RUJJQU51YTBILy93TnhJZ0k3QVFBZ0FDQUJRUWQwYWtHS0ZXb2dBanNCQUNBQUlBRkJCM1JxUVpvVmFpQUNPd0VBSUFBZ0FVRUhkR3BCcWhWcUlBSTdBUUFnQUNBQlFRZDBha0c2RldvZ0Fqc0JBQ0FBSUFGQkIzUnFRY29WYWlBQ093RUFJQUFnQVVFSGRHcEIyaFZxSUFJN0FRQWdBQ0FCUVFkMGFrSHFGV29nQWpzQkFDQUFJQUZCQjNScVFmd1Vha0dBZ0FGQm9ja0JJQU51YTBILy93TnhJZ0k3QVFBZ0FDQUJRUWQwYWtHTUZXb2dBanNCQUNBQUlBRkJCM1JxUVp3VmFpQUNPd0VBSUFBZ0FVRUhkR3BCckJWcUlBSTdBUUFnQUNBQlFRZDBha0c4RldvZ0Fqc0JBQ0FBSUFGQkIzUnFRY3dWYWlBQ093RUFJQUFnQVVFSGRHcEIzQlZxSUFJN0FRQWdBQ0FCUVFkMGFrSHNGV29nQWpzQkFDQUFJQUZCQjNScVFmNFVha0dBZ0FGQnZMVUJJQU51YTBILy93TnhJZ0k3QVFBZ0FDQUJRUWQwYWtHT0ZXb2dBanNCQUNBQUlBRkJCM1JxUVo0VmFpQUNPd0VBSUFBZ0FVRUhkR3BCcmhWcUlBSTdBUUFnQUNBQlFRZDBha0crRldvZ0Fqc0JBQ0FBSUFGQkIzUnFRYzRWYWlBQ093RUFJQUFnQVVFSGRHcEIzaFZxSUFJN0FRQWdBQ0FCUVFkMGFrSHVGV29nQWpzQkFDQUFJQUZCQjNScVFZQVZha0dBZ0FGQnNzd0JJQU51YTBILy93TnhJZ0k3QVFBZ0FDQUJRUWQwYWtHUUZXb2dBanNCQUNBQUlBRkJCM1JxUWFBVmFpQUNPd0VBSUFBZ0FVRUhkR3BCc0JWcUlBSTdBUUFnQUNBQlFRZDBha0hBRldvZ0Fqc0JBQ0FBSUFGQkIzUnFRZEFWYWlBQ093RUFJQUFnQVVFSGRHcEI0QlZxSUFJN0FRQWdBQ0FCUVFkMGFrSHdGV29nQWpzQkFDQUFJQUZCQjNScVFZSVZha0dBZ0FGQjBjQUJJQU51YTBILy93TnhJZ003QVFBZ0FDQUJRUWQwYWtHU0ZXb2dBenNCQUNBQUlBRkJCM1JxUWFJVmFpQURPd0VBSUFBZ0FVRUhkR3BCc2hWcUlBTTdBUUFnQUNBQlFRZDBha0hDRldvZ0F6c0JBQ0FBSUFGQkIzUnFRZElWYWlBRE93RUFJQUFnQVVFSGRHcEI0aFZxSUFNN0FRQWdBQ0FCUVFkMGFrSHlGV29nQXpzQkFDQUJRUUZxSWdGQmdBRkhEUUJCQUNFQkN3TkFJQUFnQVVFR2RHcEJBem9BQkNBQVFRSnFJQUZCQm5ScUlBRkJLR3hCMEFCcVFmLy9BM0VpQXpzQkFDQUFJQUZCQm5ScVFRUTZBQVVnQUNBQlFRWjBha0VET2dBSUlBQWdBVUVHZEdvZ0F6c0JCaUFBSUFGQkJuUnFRUVE2QUFrZ0FDQUJRUVowYWtFRE9nQU1JQUFnQVVFR2RHb2dBenNCQ2lBQUlBRkJCblJxUVFRNkFBMGdBQ0FCUVFaMGFrRURPZ0FRSUFBZ0FVRUdkR29nQXpzQkRpQUFJQUZCQm5ScVFRUTZBQkVnQUNBQlFRWjBha0VET2dBVUlBQWdBVUVHZEdvZ0F6c0JFaUFBSUFGQkJuUnFRUVE2QUJVZ0FDQUJRUVowYWtFRE9nQVlJQUFnQVVFR2RHb2dBenNCRmlBQUlBRkJCblJxUVFRNkFCa2dBQ0FCUVFaMGFrRURPZ0FjSUFBZ0FVRUdkR29nQXpzQkdpQUFJQUZCQm5ScVFRUTZBQjBnQUNBQlFRWjBha0VET2dBZ0lBQWdBVUVHZEdvZ0F6c0JIaUFBSUFGQkJuUnFRUVE2QUNFZ0FDQUJRUVowYWtFRE9nQWtJQUFnQVVFR2RHb2dBenNCSWlBQUlBRkJCblJxUVFRNkFDVWdBQ0FCUVFaMGFrRURPZ0FvSUFBZ0FVRUdkR29nQXpzQkppQUFJQUZCQm5ScVFRUTZBQ2tnQUNBQlFRWjBha0VET2dBc0lBQWdBVUVHZEdvZ0F6c0JLaUFBSUFGQkJuUnFRUVE2QUMwZ0FDQUJRUVowYWtFRE9nQXdJQUFnQVVFR2RHb2dBenNCTGlBQUlBRkJCblJxUVFRNkFERWdBQ0FCUVFaMGFrRURPZ0EwSUFBZ0FVRUdkR29nQXpzQk1pQUFJQUZCQm5ScVFRUTZBRFVnQUNBQlFRWjBha0VET2dBNElBQWdBVUVHZEdvZ0F6c0JOaUFBSUFGQkJuUnFRUVE2QURrZ0FDQUJRUVowYWtFRE9nQThJQUFnQVVFR2RHb2dBenNCT2lBQUlBRkJCblJxUVFRNkFEMGdBQ0FCUVFaMGFrRkFhMEVET2dBQUlBQWdBVUVHZEdvZ0F6c0JQaUFBSUFGQkJuUnFRUVE2QUVFZ0FVRUJhaUlCUVJsSERRQUxDK0VFQVFSL0lBQkIrQUZxSVFNZ0FFR0FBbW9pQlNnQ0FDSUNRY0FBU3dSQUlBTW9BZ0FpQWlnQ0FDRUVJQUlnQkVGQWF6WUNBQ0FDUVFScUlnSWdBaWdDQUNBRVFiOS9TMm8yQWdBZ0FDQUFRZkFCYWlJQ0tBSUFFRzBnQlNBRktBSUFRVUJxSWdRMkFnQWdBaWdDQUNJQ0lBSkJRR3NnQkJCVEdpQUZLQUlBSVFJTElBTW9BZ0FpQXlnQ0FDQUNhaUVFSUFNZ0JEWUNBQ0FEUVFScUlnTWdBeWdDQUNBRUlBSkphallDQUNBQUtBTDhBU0VDSUFBc0FJUUNCRUFnQWtGL05nSUVDeUFDUVg4MkFnQWdBRUh3QVdvaUFpZ0NBQ0FGS0FJQUlnVnFRUUJCZ0FFZ0JXc1FWQm9nQUNBQ0tBSUFFRzBnQVNBQVFmUUJhaUlBS0FJQUtBSUFJZ0k2QUFBZ0FTQUNRUWgyT2dBQklBRWdBa0VRZGpvQUFpQUJJQUpCR0hZNkFBTWdBU0FBS0FJQUtBSUVJZ0k2QUFRZ0FTQUNRUWgyT2dBRklBRWdBa0VRZGpvQUJpQUJJQUpCR0hZNkFBY2dBU0FBS0FJQUtBSUlJZ0k2QUFnZ0FTQUNRUWgyT2dBSklBRWdBa0VRZGpvQUNpQUJJQUpCR0hZNkFBc2dBU0FBS0FJQUtBSU1JZ0k2QUF3Z0FTQUNRUWgyT2dBTklBRWdBa0VRZGpvQURpQUJJQUpCR0hZNkFBOGdBU0FBS0FJQUtBSVFJZ0k2QUJBZ0FTQUNRUWgyT2dBUklBRWdBa0VRZGpvQUVpQUJJQUpCR0hZNkFCTWdBU0FBS0FJQUtBSVVJZ0k2QUJRZ0FTQUNRUWgyT2dBVklBRWdBa0VRZGpvQUZpQUJJQUpCR0hZNkFCY2dBU0FBS0FJQUtBSVlJZ0k2QUJnZ0FTQUNRUWgyT2dBWklBRWdBa0VRZGpvQUdpQUJJQUpCR0hZNkFCc2dBU0FBS0FJQUtBSWNJZ0E2QUJ3Z0FTQUFRUWgyT2dBZElBRWdBRUVRZGpvQUhpQUJJQUJCR0hZNkFCOEx5QW9CSlg4akJDRUVJd1JCb0FKcUpBUWdCRUVnYWlFRElBQkZCRUFnQkVFZ0VGc2dBMEdBQWhCYklBUWtCQThMSUFNZ0FFRW9haUlDS0FJQUlnRXRBQUZCRUhRZ0FTMEFBRUVZZEhJZ0FTMEFBa0VJZEhJZ0FTMEFBM0kyQWdBZ0F5QUJMUUFGUVJCMElBRXRBQVJCR0hSeUlBRXRBQVpCQ0hSeUlBRXRBQWR5TmdJRUlBTWdBUzBBQ1VFUWRDQUJMUUFJUVJoMGNpQUJMUUFLUVFoMGNpQUJMUUFMY2pZQ0NDQURJQUV0QUExQkVIUWdBUzBBREVFWWRISWdBUzBBRGtFSWRISWdBUzBBRDNJMkFnd2dBeUFCTFFBUlFSQjBJQUV0QUJCQkdIUnlJQUV0QUJKQkNIUnlJQUV0QUJOeU5nSVFJQU1nQWlnQ0FDSUJMUUFWUVJCMElBRXRBQlJCR0hSeUlBRXRBQlpCQ0hSeUlBRXRBQmR5TmdJVUlBTWdBUzBBR1VFUWRDQUJMUUFZUVJoMGNpQUJMUUFhUVFoMGNpQUJMUUFiY2pZQ0dDQURJQUV0QUIxQkVIUWdBUzBBSEVFWWRISWdBUzBBSGtFSWRISWdBUzBBSDNJMkFod2dBeUFCTFFBaFFSQjBJQUV0QUNCQkdIUnlJQUV0QUNKQkNIUnlJQUV0QUNOeU5nSWdJQU1nQVMwQUpVRVFkQ0FCTFFBa1FSaDBjaUFCTFFBbVFRaDBjaUFCTFFBbmNqWUNKQ0FESUFJb0FnQWlBUzBBS1VFUWRDQUJMUUFvUVJoMGNpQUJMUUFxUVFoMGNpQUJMUUFyY2pZQ0tDQURJQUV0QUMxQkVIUWdBUzBBTEVFWWRISWdBUzBBTGtFSWRISWdBUzBBTDNJMkFpd2dBeUFCTFFBeFFSQjBJQUV0QURCQkdIUnlJQUV0QURKQkNIUnlJQUV0QUROeU5nSXdJQU1nQVMwQU5VRVFkQ0FCTFFBMFFSaDBjaUFCTFFBMlFRaDBjaUFCTFFBM2NqWUNOQ0FESUFFdEFEbEJFSFFnQVMwQU9FRVlkSElnQVMwQU9rRUlkSElnQVMwQU8zSTJBamdnQXlBQ0tBSUFJZ0V0QUQxQkVIUWdBUzBBUEVFWWRISWdBUzBBUGtFSWRISWdBUzBBUDNJMkFqeEJFQ0VCSUFNb0FnQWhBZ05BSUFNZ0FVRUNkR29nQWlBRElBRkJlV3BCQW5ScUtBSUFhaUFESUFGQmZtcEJBblJxS0FJQUlnSkJFM1lnQWtFTmRISWdBa0VLZG5NZ0FrRVJkaUFDUVE5MGNuTnFJQU1nQVVGeGFrRUNkR29vQWdBaUFrRVNkaUFDUVE1MGNpQUNRUU4yY3lBQ1FRZDJJQUpCR1hSeWMybzJBZ0FnQVVFQmFpSUJRY0FBUncwQUN5QUVJQUFvQWdBaURUWUNBQ0FFUVFScUloVWdBRUVFYWlJV0tBSUFJZzQyQWdBZ0JFRUlhaUlYSUFCQkNHb2lHQ2dDQUNJUE5nSUFJQVJCREdvaUdTQUFRUXhxSWhvb0FnQWlFRFlDQUNBRVFSQnFJaHNnQUVFUWFpSWNLQUlBSWhFMkFnQWdCRUVVYWlJZElBQkJGR29pSGlnQ0FDSVNOZ0lBSUFSQkdHb2lIeUFBUVJocUlpQW9BZ0FpRXpZQ0FDQUVRUnhxSWlFZ0FFRWNhaUlpS0FJQUloUTJBZ0FnRXlFSklCRWhBU0FTSVFvZ0R5RUZJQTBoQWlBT0lRWWdGQ0VISUJBaENBTkFJQWdnQzBFQ2RFR3NEMm9vQWdBZ0Iyb2dBVUVHZGlBQlFScDBjaUFCUVF0MklBRkJGWFJ5Y3lBQlFSbDJJQUZCQjNSeWMyb2dDU0FCUVg5emNTQUtJQUZ4YzJvZ0F5QUxRUUowYWlnQ0FHb2lER29oQnlBQ1FRSjJJQUpCSG5SeUlBSkJEWFlnQWtFVGRISnpJQUpCRm5ZZ0FrRUtkSEp6SUF4cUlBVWdCbk1nQW5FZ0JTQUdjWE5xSVFnZ0MwRUJhaUlMUWNBQVJ3UkFJQUloRENBR0lTTWdBU0VrSUFvaEpTQUhJUUVnQ0NFQ0lBVWhDQ0FKSVFjZ0RDRUdJQ01oQlNBa0lRb2dKU0VKREFFTEN5QWhJQWsyQWdBZ0d5QUhOZ0lBSUIwZ0FUWUNBQ0FmSUFvMkFnQWdHU0FGTmdJQUlBUWdDRFlDQUNBVklBSTJBZ0FnRnlBR05nSUFJQUFnRFNBSWFqWUNBQ0FXSUE0Z0FtbzJBZ0FnR0NBUElBWnFOZ0lBSUJvZ0VDQUZhallDQUNBY0lCRWdCMm8yQWdBZ0hpQVNJQUZxTmdJQUlDQWdFeUFLYWpZQ0FDQWlJQlFnQ1dvMkFnQWdCQ1FFQzlNREFnZC9BbjRnQUNnQ0FDSURJQU1vQWdBb0FoUkJCM0ZCaGdGcUVRQUFJUWdnQUNnQ0FDRUJJQUJCaURKcUlnVXBBd0FnQUVINE1Xb3BBd0I4SVFsQkFDUUZRUUlnQVNBSnB5QUpRaUNJcDBFQUVGQWpCU0VCUVFBa0JRSkFJQUZCQVhGRkJFQWdBRUdBTW1vcEF3QWdCU2tEQUgwaUNhY2hBU0FKUVlDQUJDQUFRWkF5YWlJR0tBSUFJZ0pySWdTdFZBUi9JQUVGSUFRaUFRdEJjSEVoQkNBQUtBSUFJZ2RCKys0Q2Fpd0FBQVIvSUFRaUFRVWdBUXNFUUNBQVFSQnFJZ1FvQWdBZ0Ftb2hBa0VBSkFWQkJDQUhJQUlnQVJBSElRRWpCU0VDUVFBa0JTQUNRUUZ4RFFJZ0FVRUJTQVJBUVFBaEFRVWdBQ2dDQUVINzdnSnFMQUFBQkVBZ0JDZ0NBQ0FHS0FJQWFpRUNRUUFrQlVFQklBQkJHR29nQWlBQlFYQnhFQTRqQlNFQVFRQWtCU0FBUVFGeERRUUxJQVVnQlNrREFDQUJySHczQXdBZ0JpQUdLQUlBSUFGcU5nSUFDd1ZCQUNFQkN5QURLQUlBS0FJUUlRQkJBQ1FGSUFBZ0F5QUlweUFJUWlDSXAwRUFFRkFqQlNFQVFRQWtCU0FBUVFGeEJFQkJBQkFZRUZvRklBRVBDd3NMRUJjaEFDQURLQUlBS0FJUUlRRkJBQ1FGSUFFZ0F5QUlweUFJUWlDSXAwRUFFRkFqQlNFQlFRQWtCU0FCUVFGeEJFQkJBQkFZRUZvRklBQVFIZ3RCQUF2dE5BRWRmeUFEQkVBZ0FTQUNLUUFBTndBQUlBRWdBaWtBQ0RjQUNDQUJJQUlwQUJBM0FCQWdBU0FDS1FBWU53QVlJQUVnQWlrQUlEY0FJQ0FCSUFJcEFDZzNBQ2dnQVNBQ0tRQXdOd0F3SUFFZ0Fpa0FPRGNBT0FVZ0FpRUJDeUFBS0FJQUlSTWdBRUVFYWlJZEtBSUFJUU1nQUVFSWFpSWVLQUlBSVJFZ0FFRU1haUlmS0FJQUlSWWdBRUVRYWlJZ0tBSUFJUmdnQVNBQktBSUFFR2NpRFRZQ0FDQUJRUVJxSWdJb0FnQVFaeUViSUFJZ0d6WUNBQ0FXUVpuemlkUUZhaUFEUVI1MElBTkJBblp5SWc0Z0VYTWdFM0VnRVhOcUlCdHFJQk5CQlhRZ0UwRWJkbkpCbWZPSjFBVnFJQmhxSUExcUlCWWdFWE1nQTNFZ0ZuTnFJaGhCQlhRZ0dFRWJkbkpxSVJZZ0FVRUlhaUlES0FJQUVHY2hHeUFESUJzMkFnQWdFVUdaODRuVUJXb2dHMm9nR0NBT0lCTkJIblFnRTBFQ2RuSWlEWE54SUE1emFpQVdRUVYwSUJaQkczWnlhaUViSUFGQkRHb2lFeWdDQUJCbklSRWdFeUFSTmdJQUlBNUJtZk9KMUFWcUlCRnFJQllnR0VFZWRDQVlRUUoyY2lJU0lBMXpjU0FOYzJvZ0cwRUZkQ0FiUVJ0MmNtb2hHQ0FCUVJCcUloRW9BZ0FRWnlFT0lCRWdEallDQUNBTlFabnppZFFGYWlBT2FpQWJJQlpCSG5RZ0ZrRUNkbklpRkNBU2MzRWdFbk5xSUJoQkJYUWdHRUViZG5KcUlRNGdBVUVVYWlJV0tBSUFFR2NoRFNBV0lBMDJBZ0FnRWtHWjg0blVCV29nRFdvZ0dDQWJRUjUwSUJ0QkFuWnlJaFVnRkhOeElCUnphaUFPUVFWMElBNUJHM1p5YWlFTklBRkJHR29pR3lnQ0FCQm5JUklnR3lBU05nSUFJQlJCbWZPSjFBVnFJQkpxSUE0Z0dFRWVkQ0FZUVFKMmNpSVhJQlZ6Y1NBVmMyb2dEVUVGZENBTlFSdDJjbW9oRWlBQlFSeHFJaGdvQWdBUVp5RVVJQmdnRkRZQ0FDQVVRWm56aWRRRmFpQVZhaUFOSUE1QkhuUWdEa0VDZG5JaUdTQVhjM0VnRjNOcUlCSkJCWFFnRWtFYmRuSnFJUlFnQVVFZ2FpSU9LQUlBRUdjaEZTQU9JQlUyQWdBZ0ZVR1o4NG5VQldvZ0Yyb2dFaUFOUVI1MElBMUJBblp5SWhvZ0dYTnhJQmx6YWlBVVFRVjBJQlJCRzNaeWFpRVZJQUZCSkdvaURTZ0NBQkJuSVJjZ0RTQVhOZ0lBSUJkQm1mT0oxQVZxSUJscUlCUWdFa0VlZENBU1FRSjJjaUlFSUJwemNTQWFjMm9nRlVFRmRDQVZRUnQyY21vaEZ5QUJRU2hxSWhJb0FnQVFaeUVaSUJJZ0dUWUNBQ0FaUVpuemlkUUZhaUFhYWlBVklCUkJIblFnRkVFQ2RuSWlCU0FFYzNFZ0JITnFJQmRCQlhRZ0YwRWJkbkpxSVJrZ0FVRXNhaUlVS0FJQUVHY2hHaUFVSUJvMkFnQWdHa0daODRuVUJXb2dCR29nRnlBVlFSNTBJQlZCQW5aeUlnWWdCWE54SUFWemFpQVpRUVYwSUJsQkczWnlhaUVhSUFGQk1Hb2lGU2dDQUJCbklRUWdGU0FFTmdJQUlBUkJtZk9KMUFWcUlBVnFJQmtnRjBFZWRDQVhRUUoyY2lJSElBWnpjU0FHYzJvZ0drRUZkQ0FhUVJ0MmNtb2hCQ0FCUVRScUloY29BZ0FRWnlFSUlCY2dDRFlDQUNBSVFabnppZFFGYWlBR2FpQWFJQmxCSG5RZ0dVRUNkbklpQ1NBSGMzRWdCM05xSUFSQkJYUWdCRUViZG5KcUlRVWdBVUU0YWlJWktBSUFFR2NoQ2lBWklBbzJBZ0FnQ2tHWjg0blVCV29nQjJvZ0JDQWFRUjUwSUJwQkFuWnlJZ2NnQ1hOeElBbHphaUFGUVFWMElBVkJHM1p5YWlFR0lBRkJQR29pR2lnQ0FCQm5JUXNnR2lBTE5nSUFJQXRCbWZPSjFBVnFJQWxxSUFVZ0JFRWVkQ0FFUVFKMmNpSUpJQWR6Y1NBSGMyb2dCa0VGZENBR1FSdDJjbW9oQkNBQklBNG9BZ0FnQ0hNZ0F5Z0NBQ0lQY3lBQktBSUFjeUlJUVFGMElBaEJIM1p5SWd3MkFnQWdERUdaODRuVUJXb2dCMm9nQmlBRlFSNTBJQVZCQW5aeUlnY2dDWE54SUFsemFpQUVRUVYwSUFSQkczWnlhaUVGSUFJZ0RTZ0NBQ0FLY3lBVEtBSUFJaEJ6SUFJb0FnQnpJZ2hCQVhRZ0NFRWZkbklpQ2pZQ0FDQUtRWm56aWRRRmFpQUphaUFFSUFaQkhuUWdCa0VDZG5JaUNDQUhjM0VnQjNOcUlBVkJCWFFnQlVFYmRuSnFJUVlnQXlBU0tBSUFJQXR6SUJFb0FnQWlISE1nRDNNaUNVRUJkQ0FKUVI5MmNpSUpOZ0lBSUFsQm1mT0oxQVZxSUFkcUlBVWdCRUVlZENBRVFRSjJjaUlISUFoemNTQUljMm9nQmtFRmRDQUdRUnQyY21vaEJDQVRJQlFvQWdBZ0RITWdGaWdDQUNJTWN5QVFjeUlMUVFGMElBdEJIM1p5SWdzMkFnQWdDMEdaODRuVUJXb2dDR29nQmlBRlFSNTBJQVZCQW5aeUlnZ2dCM054SUFkemFpQUVRUVYwSUFSQkczWnlhaUVGSUJFZ0ZTZ0NBQ0FLY3lBYktBSUFJZzl6SUJ4eklncEJBWFFnQ2tFZmRuSWlDallDQUNBS1FhSFg1L1lHYWlBSGFpQUdRUjUwSUFaQkFuWnlJZ2NnQ0hNZ0JITnFJQVZCQlhRZ0JVRWJkbkpxSVFZZ0ZpQVhLQUlBSUFseklCZ29BZ0FpRUhNZ0RITWlDVUVCZENBSlFSOTJjaUlKTmdJQUlBbEJvZGZuOWdacUlBaHFJQVJCSG5RZ0JFRUNkbklpQ0NBSGN5QUZjMm9nQmtFRmRDQUdRUnQyY21vaEJDQWJJQmtvQWdBZ0MzTWdEaWdDQUNJTWN5QVBjeUlMUVFGMElBdEJIM1p5SWdzMkFnQWdDMEdoMStmMkJtb2dCMm9nQlVFZWRDQUZRUUoyY2lJSElBaHpJQVp6YWlBRVFRVjBJQVJCRzNaeWFpRUZJQmdnR2lnQ0FDQUtjeUFOS0FJQUlnOXpJQkJ6SWdwQkFYUWdDa0VmZG5JaUNqWUNBQ0FLUWFIWDUvWUdhaUFJYWlBR1FSNTBJQVpCQW5aeUlnZ2dCM01nQkhOcUlBVkJCWFFnQlVFYmRuSnFJUVlnRGlBQktBSUFJQWx6SUJJb0FnQWlFSE1nREhNaUNVRUJkQ0FKUVI5MmNpSUpOZ0lBSUFsQm9kZm45Z1pxSUFkcUlBUkJIblFnQkVFQ2RuSWlCeUFJY3lBRmMyb2dCa0VGZENBR1FSdDJjbW9oQkNBTklBSW9BZ0FnQzNNZ0ZDZ0NBQ0lNY3lBUGN5SUxRUUYwSUF0QkgzWnlJZ3MyQWdBZ0MwR2gxK2YyQm1vZ0NHb2dCVUVlZENBRlFRSjJjaUlJSUFkeklBWnphaUFFUVFWMElBUkJHM1p5YWlFRklCSWdBeWdDQUNBS2N5QVZLQUlBSWc5eklCQnpJZ3BCQVhRZ0NrRWZkbklpQ2pZQ0FDQUtRYUhYNS9ZR2FpQUhhaUFHUVI1MElBWkJBblp5SWdjZ0NITWdCSE5xSUFWQkJYUWdCVUViZG5KcUlRWWdGQ0FUS0FJQUlBbHpJQmNvQWdBaUVITWdESE1pQ1VFQmRDQUpRUjkyY2lJSk5nSUFJQWxCb2RmbjlnWnFJQWhxSUFSQkhuUWdCRUVDZG5JaUNDQUhjeUFGYzJvZ0JrRUZkQ0FHUVJ0MmNtb2hCQ0FWSUJFb0FnQWdDM01nR1NnQ0FDSU1jeUFQY3lJTFFRRjBJQXRCSDNaeUlnczJBZ0FnQzBHaDErZjJCbW9nQjJvZ0JVRWVkQ0FGUVFKMmNpSUhJQWh6SUFaemFpQUVRUVYwSUFSQkczWnlhaUVGSUJjZ0ZpZ0NBQ0FLY3lBYUtBSUFJZzl6SUJCeklncEJBWFFnQ2tFZmRuSWlDallDQUNBS1FhSFg1L1lHYWlBSWFpQUdRUjUwSUFaQkFuWnlJZ2dnQjNNZ0JITnFJQVZCQlhRZ0JVRWJkbkpxSVFZZ0dTQWJLQUlBSUFseklBRW9BZ0FpRUhNZ0RITWlDVUVCZENBSlFSOTJjaUlKTmdJQUlBZEJvZGZuOWdacUlBbHFJQVJCSG5RZ0JFRUNkbklpQnlBSWN5QUZjMm9nQmtFRmRDQUdRUnQyY21vaEJDQWFJQmdvQWdBZ0MzTWdBaWdDQUNJTWN5QVBjeUlMUVFGMElBdEJIM1p5SWdzMkFnQWdDRUdoMStmMkJtb2dDMm9nQlVFZWRDQUZRUUoyY2lJSUlBZHpJQVp6YWlBRVFRVjBJQVJCRzNaeWFpRUZJQUVnRGlnQ0FDQUtjeUFES0FJQUlnOXpJQkJ6SWdwQkFYUWdDa0VmZG5JaUNqWUNBQ0FIUWFIWDUvWUdhaUFLYWlBR1FSNTBJQVpCQW5aeUlnY2dDSE1nQkhOcUlBVkJCWFFnQlVFYmRuSnFJUVlnQWlBTktBSUFJQWx6SUJNb0FnQWlFSE1nREhNaUNVRUJkQ0FKUVI5MmNpSUpOZ0lBSUFoQm9kZm45Z1pxSUFscUlBUkJIblFnQkVFQ2RuSWlDQ0FIY3lBRmMyb2dCa0VGZENBR1FSdDJjbW9oQkNBRElCSW9BZ0FnQzNNZ0VTZ0NBQ0lNY3lBUGN5SUxRUUYwSUF0QkgzWnlJZ3MyQWdBZ0IwR2gxK2YyQm1vZ0Myb2dCVUVlZENBRlFRSjJjaUlISUFoeklBWnphaUFFUVFWMElBUkJHM1p5YWlFRklCTWdGQ2dDQUNBS2N5QVdLQUlBSWc5eklCQnpJZ3BCQVhRZ0NrRWZkbklpQ2pZQ0FDQUlRYUhYNS9ZR2FpQUthaUFHUVI1MElBWkJBblp5SWdnZ0IzTWdCSE5xSUFWQkJYUWdCVUViZG5KcUlRWWdFU0FWS0FJQUlBbHpJQnNvQWdBaUVITWdESE1pQ1VFQmRDQUpRUjkyY2lJSk5nSUFJQWRCb2RmbjlnWnFJQWxxSUFSQkhuUWdCRUVDZG5JaUJDQUljeUFGYzJvZ0JrRUZkQ0FHUVJ0MmNtb2hCeUFXSUJjb0FnQWdDM01nR0NnQ0FDSU1jeUFQY3lJTFFRRjBJQXRCSDNaeUlnczJBZ0FnQ0VHaDErZjJCbW9nQzJvZ0JVRWVkQ0FGUVFKMmNpSUZJQVJ6SUFaemFpQUhRUVYwSUFkQkczWnlhaUVJSUJzZ0dTZ0NBQ0FLY3lBT0tBSUFJZzl6SUJCeklncEJBWFFnQ2tFZmRuSWlDallDQUNBRVFhSFg1L1lHYWlBS2FpQUdRUjUwSUFaQkFuWnlJZ1lnQlhNZ0IzTnFJQWhCQlhRZ0NFRWJkbkpxSVFRZ0dDQWFLQUlBSUFseklBMG9BZ0FpRUhNZ0RITWlDVUVCZENBSlFSOTJjaUlKTmdJQUlBVkJvZGZuOWdacUlBbHFJQWRCSG5RZ0IwRUNkbklpRENBR2N5QUljMm9nQkVFRmRDQUVRUnQyY21vaEJTQU9JQUVvQWdBZ0MzTWdFaWdDQUNJY2N5QVBjeUlIUVFGMElBZEJIM1p5SWdzMkFnQWdCa0hjK2U3NGVHb2dDMm9nQkNBSVFSNTBJQWhCQW5aeUlnZHlJQXh4SUFRZ0IzRnlhaUFGUVFWMElBVkJHM1p5YWlFR0lBMGdBaWdDQUNBS2N5QVVLQUlBSWc5eklCQnpJZ2hCQVhRZ0NFRWZkbklpQ2pZQ0FDQU1RZHo1N3ZoNGFpQUthaUFGSUFSQkhuUWdCRUVDZG5JaUNISWdCM0VnQlNBSWNYSnFJQVpCQlhRZ0JrRWJkbkpxSVFRZ0VpQURLQUlBSUFseklCVW9BZ0FpREhNZ0hITWlDVUVCZENBSlFSOTJjaUlKTmdJQUlBZEIzUG51K0hocUlBbHFJQVlnQlVFZWRDQUZRUUoyY2lJSGNpQUljU0FHSUFkeGNtb2dCRUVGZENBRVFSdDJjbW9oQlNBVUlCTW9BZ0FnQzNNZ0Z5Z0NBQ0lRY3lBUGN5SUxRUUYwSUF0QkgzWnlJZ3MyQWdBZ0NFSGMrZTc0ZUdvZ0JDQUdRUjUwSUFaQkFuWnlJZ2h5SUFkeElBUWdDSEZ5YWlBTGFpQUZRUVYwSUFWQkczWnlhaUVHSUJVZ0VTZ0NBQ0FLY3lBWktBSUFJZzl6SUF4eklncEJBWFFnQ2tFZmRuSWlDallDQUNBSFFkejU3dmg0YWlBRklBUkJIblFnQkVFQ2RuSWlCM0lnQ0hFZ0JTQUhjWEpxSUFwcUlBWkJCWFFnQmtFYmRuSnFJUVFnRnlBV0tBSUFJQWx6SUJvb0FnQWlESE1nRUhNaUNVRUJkQ0FKUVI5MmNpSUpOZ0lBSUFoQjNQbnUrSGhxSUFZZ0JVRWVkQ0FGUVFKMmNpSUljaUFIY1NBR0lBaHhjbW9nQ1dvZ0JFRUZkQ0FFUVJ0MmNtb2hCU0FaSUJzb0FnQWdDM01nQVNnQ0FDSVFjeUFQY3lJTFFRRjBJQXRCSDNaeUlnczJBZ0FnQjBIYytlNzRlR29nQkNBR1FSNTBJQVpCQW5aeUlnZHlJQWh4SUFRZ0IzRnlhaUFMYWlBRlFRVjBJQVZCRzNaeWFpRUdJQm9nR0NnQ0FDQUtjeUFDS0FJQUlnOXpJQXh6SWdwQkFYUWdDa0VmZG5JaUNqWUNBQ0FJUWR6NTd2aDRhaUFGSUFSQkhuUWdCRUVDZG5JaUNISWdCM0VnQlNBSWNYSnFJQXBxSUFaQkJYUWdCa0ViZG5KcUlRUWdBU0FPS0FJQUlBbHpJQU1vQWdBaURITWdFSE1pQ1VFQmRDQUpRUjkyY2lJSk5nSUFJQWRCM1BudStIaHFJQVlnQlVFZWRDQUZRUUoyY2lJSGNpQUljU0FHSUFkeGNtb2dDV29nQkVFRmRDQUVRUnQyY21vaEJTQUNJQTBvQWdBZ0MzTWdFeWdDQUNJUWN5QVBjeUlMUVFGMElBdEJIM1p5SWdzMkFnQWdDRUhjK2U3NGVHb2dCQ0FHUVI1MElBWkJBblp5SWdoeUlBZHhJQVFnQ0hGeWFpQUxhaUFGUVFWMElBVkJHM1p5YWlFR0lBTWdFaWdDQUNBS2N5QVJLQUlBSWc5eklBeHpJZ3BCQVhRZ0NrRWZkbklpQ2pZQ0FDQUhRZHo1N3ZoNGFpQUZJQVJCSG5RZ0JFRUNkbklpQjNJZ0NIRWdCU0FIY1hKcUlBcHFJQVpCQlhRZ0JrRWJkbkpxSVFRZ0V5QVVLQUlBSUFseklCWW9BZ0FpREhNZ0VITWlDVUVCZENBSlFSOTJjaUlKTmdJQUlBaEIzUG51K0hocUlBWWdCVUVlZENBRlFRSjJjaUlJY2lBSGNTQUdJQWh4Y21vZ0NXb2dCRUVGZENBRVFSdDJjbW9oQlNBUklCVW9BZ0FnQzNNZ0d5Z0NBQ0lRY3lBUGN5SUxRUUYwSUF0QkgzWnlJZ3MyQWdBZ0IwSGMrZTc0ZUdvZ0JDQUdRUjUwSUFaQkFuWnlJZ2R5SUFoeElBUWdCM0Z5YWlBTGFpQUZRUVYwSUFWQkczWnlhaUVHSUJZZ0Z5Z0NBQ0FLY3lBWUtBSUFJZzl6SUF4eklncEJBWFFnQ2tFZmRuSWlDallDQUNBSVFkejU3dmg0YWlBRklBUkJIblFnQkVFQ2RuSWlDSElnQjNFZ0JTQUljWEpxSUFwcUlBWkJCWFFnQmtFYmRuSnFJUVFnR3lBWktBSUFJQWx6SUE0b0FnQWlESE1nRUhNaUNVRUJkQ0FKUVI5MmNpSUpOZ0lBSUFkQjNQbnUrSGhxSUFZZ0JVRWVkQ0FGUVFKMmNpSUhjaUFJY1NBR0lBZHhjbW9nQ1dvZ0JFRUZkQ0FFUVJ0MmNtb2hCU0FZSUJvb0FnQWdDM01nRFNnQ0FDSVFjeUFQY3lJTFFRRjBJQXRCSDNaeUlnczJBZ0FnQ0VIYytlNzRlR29nQkNBR1FSNTBJQVpCQW5aeUlnaHlJQWR4SUFRZ0NIRnlhaUFMYWlBRlFRVjBJQVZCRzNaeWFpRUdJQTRnQVNnQ0FDQUtjeUFTS0FJQUlnOXpJQXh6SWdwQkFYUWdDa0VmZG5JaUNqWUNBQ0FIUWR6NTd2aDRhaUFGSUFSQkhuUWdCRUVDZG5JaUIzSWdDSEVnQlNBSGNYSnFJQXBxSUFaQkJYUWdCa0ViZG5KcUlRUWdEU0FDS0FJQUlBbHpJQlFvQWdBaURITWdFSE1pQ1VFQmRDQUpRUjkyY2lJSk5nSUFJQWhCM1BudStIaHFJQVlnQlVFZWRDQUZRUUoyY2lJSWNpQUhjU0FHSUFoeGNtb2dDV29nQkVFRmRDQUVRUnQyY21vaEJTQVNJQU1vQWdBZ0MzTWdGU2dDQUNJUWN5QVBjeUlMUVFGMElBdEJIM1p5SWdzMkFnQWdCMEhjK2U3NGVHb2dCQ0FHUVI1MElBWkJBblp5SWdkeUlBaHhJQVFnQjNGeWFpQUxhaUFGUVFWMElBVkJHM1p5YWlFR0lCUWdFeWdDQUNBS2N5QVhLQUlBSWc5eklBeHpJZ3BCQVhRZ0NrRWZkbklpQ2pZQ0FDQUlRZHo1N3ZoNGFpQUZJQVJCSG5RZ0JFRUNkbklpQ0hJZ0IzRWdCU0FJY1hKcUlBcHFJQVpCQlhRZ0JrRWJkbkpxSVFRZ0ZTQVJLQUlBSUFseklCa29BZ0FpREhNZ0VITWlDVUVCZENBSlFSOTJjaUlKTmdJQUlBZEIxb09MMDN4cUlBVkJIblFnQlVFQ2RuSWlCeUFJY3lBR2Myb2dDV29nQkVFRmRDQUVRUnQyY21vaEJTQVhJQllvQWdBZ0MzTWdHaWdDQUNJUWN5QVBjeUlMUVFGMElBdEJIM1p5SWdzMkFnQWdDRUhXZzR2VGZHb2dCa0VlZENBR1FRSjJjaUlJSUFkeklBUnphaUFMYWlBRlFRVjBJQVZCRzNaeWFpRUdJQmtnR3lnQ0FDQUtjeUFCS0FJQUlnOXpJQXh6SWdwQkFYUWdDa0VmZG5JaUNqWUNBQ0FIUWRhRGk5TjhhaUFFUVI1MElBUkJBblp5SWdjZ0NITWdCWE5xSUFwcUlBWkJCWFFnQmtFYmRuSnFJUVFnR2lBWUtBSUFJQWx6SUFJb0FnQWlESE1nRUhNaUNVRUJkQ0FKUVI5MmNpSUpOZ0lBSUFoQjFvT0wwM3hxSUFWQkhuUWdCVUVDZG5JaUNDQUhjeUFHYzJvZ0NXb2dCRUVGZENBRVFSdDJjbW9oQlNBQklBNG9BZ0FnQzNNZ0F5Z0NBQ0lRY3lBUGN5SUxRUUYwSUF0QkgzWnlJZ3MyQWdBZ0IwSFdnNHZUZkdvZ0JrRWVkQ0FHUVFKMmNpSUhJQWh6SUFSemFpQUxhaUFGUVFWMElBVkJHM1p5YWlFR0lBSWdEU2dDQUNBS2N5QVRLQUlBSWc5eklBeHpJZ3BCQVhRZ0NrRWZkbklpQ2pZQ0FDQUlRZGFEaTlOOGFpQUVRUjUwSUFSQkFuWnlJZ2dnQjNNZ0JYTnFJQXBxSUFaQkJYUWdCa0ViZG5KcUlRUWdBeUFTS0FJQUlBbHpJQkVvQWdBaURITWdFSE1pQ1VFQmRDQUpRUjkyY2lJSk5nSUFJQWRCMW9PTDAzeHFJQVZCSG5RZ0JVRUNkbklpQnlBSWN5QUdjMm9nQ1dvZ0JFRUZkQ0FFUVJ0MmNtb2hCU0FUSUJRb0FnQWdDM01nRmlnQ0FDSVFjeUFQY3lJTFFRRjBJQXRCSDNaeUlnczJBZ0FnQ0VIV2c0dlRmR29nQmtFZWRDQUdRUUoyY2lJSUlBZHpJQVJ6YWlBTGFpQUZRUVYwSUFWQkczWnlhaUVHSUJFZ0ZTZ0NBQ0FLY3lBYktBSUFJZzl6SUF4eklncEJBWFFnQ2tFZmRuSWlDallDQUNBSFFkYURpOU44YWlBRVFSNTBJQVJCQW5aeUlnY2dDSE1nQlhOcUlBcHFJQVpCQlhRZ0JrRWJkbkpxSVFRZ0ZpQVhLQUlBSUFseklCZ29BZ0FpREhNZ0VITWlDVUVCZENBSlFSOTJjaUlKTmdJQUlBaEIxb09MMDN4cUlBVkJIblFnQlVFQ2RuSWlDQ0FIY3lBR2Myb2dDV29nQkVFRmRDQUVRUnQyY21vaEJTQWJJQmtvQWdBZ0MzTWdEaWdDQUNJUWN5QVBjeUlMUVFGMElBdEJIM1p5SWdzMkFnQWdCMEhXZzR2VGZHb2dCa0VlZENBR1FRSjJjaUlISUFoeklBUnphaUFMYWlBRlFRVjBJQVZCRzNaeWFpRUdJQmdnR2lnQ0FDQUtjeUFOS0FJQUlnOXpJQXh6SWdwQkFYUWdDa0VmZG5JaUNqWUNBQ0FJUWRhRGk5TjhhaUFFUVI1MElBUkJBblp5SWdnZ0IzTWdCWE5xSUFwcUlBWkJCWFFnQmtFYmRuSnFJUVFnRGlBQktBSUFJQWx6SUJJb0FnQWlESE1nRUhNaURrRUJkQ0FPUVI5MmNpSUpOZ0lBSUFkQjFvT0wwM3hxSUFWQkhuUWdCVUVDZG5JaUJTQUljeUFHYzJvZ0NXb2dCRUVGZENBRVFSdDJjbW9oRGlBTklBSW9BZ0FnQzNNZ0ZDZ0NBQ0lMY3lBUGN5SU5RUUYwSUExQkgzWnlJZ2MyQWdBZ0NFSFdnNHZUZkdvZ0JrRWVkQ0FHUVFKMmNpSUdJQVZ6SUFSemFpQUhhaUFPUVFWMElBNUJHM1p5YWlFTklCSWdBeWdDQUNBS2N5QVZLQUlBSWdoeklBeHpJZ05CQVhRZ0EwRWZkbklpRWpZQ0FDQUZRZGFEaTlOOGFpQUVRUjUwSUFSQkFuWnlJZ1FnQm5NZ0RuTnFJQkpxSUExQkJYUWdEVUViZG5KcUlRTWdGQ0FUS0FJQUlBbHpJQmNvQWdBaUJYTWdDM01pRTBFQmRDQVRRUjkyY2lJVU5nSUFJQVpCMW9PTDAzeHFJQTVCSG5RZ0RrRUNkbklpRGlBRWN5QU5jMm9nRkdvZ0EwRUZkQ0FEUVJ0MmNtb2hFeUFWSUJFb0FnQWdCM01nR1NnQ0FDSUdjeUFJY3lJUlFRRjBJQkZCSDNaeUloVTJBZ0FnQkVIV2c0dlRmR29nRFVFZWRDQU5RUUoyY2lJTklBNXpJQU56YWlBVmFpQVRRUVYwSUJOQkczWnlhaUVSSUJjZ0ZpZ0NBQ0FTY3lBYUtBSUFJaEp6SUFWekloWkJBWFFnRmtFZmRuSWlGellDQUNBT1FkYURpOU44YWlBRFFSNTBJQU5CQW5aeUloWWdEWE1nRTNOcUlCZHFJQkZCQlhRZ0VVRWJkbkpxSVFNZ0dTQWJLQUlBSUJSeklBRW9BZ0J6SUFaeklnRkJBWFFnQVVFZmRuSWlBVFlDQUNBTlFkYURpOU44YWlBVFFSNTBJQk5CQW5aeUloTWdGbk1nRVhOcUlBRnFJQU5CQlhRZ0EwRWJkbkpxSVFFZ0dpQVlLQUlBSUJWeklBSW9BZ0J6SUJKeklnSkJBWFFnQWtFZmRuSWlBallDQUNBQUlCWkIxb09MMDN4cUlCRkJIblFnRVVFQ2RuSWlFU0FUY3lBRGMyb2dBQ2dDQUdvZ0Ftb2dBVUVGZENBQlFSdDJjbW8yQWdBZ0hTQWRLQUlBSUFGcU5nSUFJQjRnSGlnQ0FDQURRUjUwSUFOQkFuWnlhallDQUNBZklCOG9BZ0FnRVdvMkFnQWdJQ0FnS0FJQUlCTnFOZ0lBQ3lzQUlBQkJBRG9BQ0NBQkJFQkJnNEFDRUY4aUFVRUFRWU9BQWhCVUdnVkJBQ0VCQ3lBQUlBRTJBZ3dMMVFNQkFuOGpCQ0VGSXdSQklHb2tCQUpBQWtBQ1FBSkFBa0FDUUNBRFFZQUJhdzZCQVFBREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNQkF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREFnTUxRUkFoQmtFS0lRTU1Bd3RCR0NFR1FRd2hBd3dDQzBFZ0lRWkJEaUVEREFFTERBRUxJQUFnQXpZQ0JFRUFJUU1EUUNBRklBTkJBblpCQW5ScUlBTkJBM0ZxSUFJZ0Eyb3NBQUE2QUFBZ0EwRUJhaUlESUFaSERRQUxDeUFFQkVBZ0FDQUVMQUFBT2dBSUlBQWdCQ3dBQVRvQUNTQUFJQVFzQUFJNkFBb2dBQ0FFTEFBRE9nQUxJQUFnQkN3QUJEb0FEQ0FBSUFRc0FBVTZBQTBnQUNBRUxBQUdPZ0FPSUFBZ0JDd0FCem9BRHlBQUlBUXNBQWc2QUJBZ0FDQUVMQUFKT2dBUklBQWdCQ3dBQ2pvQUVpQUFJQVFzQUFzNkFCTWdBQ0FFTEFBTU9nQVVJQUFnQkN3QURUb0FGU0FBSUFRc0FBNDZBQllnQUNBRUxBQVBPZ0FYQlNBQVFRaHFJZ0pDQURjQ0FDQUNRZ0EzQWdnTElBQWdCUkN3QkNBQkJFQWdCU1FFRHdzZ0FCQ3ZCQ0FGSkFRTFZnRUJmeU1FSVFJakJFRVFhaVFFUVJRZ0FoQWxJUU1nQWlRRUlBTWhBaUFCUlFSQUR3c2dBa0hMQUdvaEEwRUFJUUlEUUNBQUlBSnFJZ1FnQXlBQ2FpQUVMUUFBY3pvQUFDQUNRUUZxSWdJZ0FVY05BQXNMMWdRQkIzOGdBQ0VFSUFFaEFBSkFBa0FDUUFOQUFrQWdCQ0VCQTBBQ1FDQUFLQUlBSVFNZ0FVRUVhaUVFQWtBQ1FBSkFBa0FDUUNBQktBSUFJZ2dPUUFBREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd0VEQXdNREF3TURBd01EQXdNREF3TURBd01EQXdJREN3d0lDd3dJQ3lBRFJRMEVEQUVMSUFnZ0EwY05BUXNnQkNFQklBQkJCR29oQUF3QkN3c2dDRUV1UncwQUFrQUNRQUpBSUFNT1hRQUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUFBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBQUVMREFFTERBRUxEQUVMUVFBaEFBc01BZ3NnQTBVaEFBd0JDd0pBQWtBQ1FBSkFJQVFvQWdBT0x3QUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUJBZ3RCQVNFQURBTUxJQUZCQ0dvaUF5Z0NBRUVxUmdSQUlBRW9BZ3hGQkVCQkFTRUFEQVFMQ3lBQVFTNFFkQ0lGUlNFQklBTW9BZ0JGQkVBZ0FRUkFRUUVoQUF3RUN5QUZLQUlFUlNFQURBTUxJQUVFUUNBQUlRVkJFeUVHQlNBRVFkZ09FTWNCQkVCQkV5RUdCU0FGUVFScUlnQkJMaEIwQkVCQkV5RUdCU0FDQkg4Z0F5QUFFSE1GSUFNZ0FCQ2RBUXNpQUVVaEFBd0ZDd3NMREFFTElBQWhCeUFESVFrTEEwQWdCa0VUUmdSQUlBVWlCeWdDQUNFSkN5QUpSUVJBUVFBaEFBd0NDeUFIUVFScUlRVWdCQ0FISUFJUTV3RUVRRUVCSVFBRlFSTWhCZ3dCQ3dzTElBQUx5d0VDQlg4QmZpQUFRUmhxSWdNb0FnQWlBVUVEYWlJRUlBQW9BaFFpQlVrRWZpQUFLQUlBSWdJZ0FVRUJhbW90QUFCQkNIUWdBaUFCYWkwQUFISWdBaUFCUVFKcWFpMEFBRUVRZEhJZ0FpQUVhaTBBQUVFWWRISWhBaUFESUFGQkJHb2lBVFlDQUNBQ3JRVkNBQXNoQmlBQlFRTnFJZ0lnQlU4RVFDQUdEd3NnQUNnQ0FDSUFJQUZCQVdwcUxRQUFRUWgwSUFBZ0FXb3RBQUJ5SUFBZ0FVRUNhbW90QUFCQkVIUnlJQUFnQW1vdEFBQkJHSFJ5SVFBZ0F5QUJRUVJxTmdJQUlBQ3RRaUNHSUFhRUMrY0JBUVovSXdRaEF5TUVRUkJxSkFRZ0FrVUVRQ0FESkFRUEN5QURJUVVnQUVFRWFpSUdLQUlBSUFKcUlRTWdCaUFETmdJQUlBTWdBRUVJYWlJSEtBSUFJZ1JMQkVBZ0FDZ0NEQ0lJUVFCSElBTWdDRXR4QkVBZ0JTQUlOZ0lBUWF6MUFrSFlHeUFGRUdCQnJQVUNFRllnQnlnQ0FDRUVJQVlvQWdBaEF3c2dBQ2dDQUNBRElBUkJJR29nQkVFQ2Rtb2lCRXNFZnlBRElnUUZJQVFMRUZjaUEwVUVRRUdzOVFJUVZnc2dBQ0FETmdJQUlBY2dCRFlDQUFVZ0FDZ0NBQ0VEQ3lBRElBQkJGR29pQUNnQ0FHb2dBU0FDRUZNYUlBQWdBQ2dDQUNBQ2FqWUNBQ0FGSkFRTHdnRUJBMzhDUUFKQUFrQUNRQUpBSUFCQnFDVnFLQUlBUVFGckRnVUFBUUlEQXdRTElBSkZCRUFQQ3lBQVFjWXhhaUVGSUFCQnhURnFJUU1nQUVIRU1Xb2hBQU5BSUFNZ0F5MEFBQ0FGTFFBQWFpSUVPZ0FBSUFBZ0JDQUFMUUFBYWlJRU9nQUFJQUVnQVMwQUFDQUVhem9BQUNBQlFRRnFJUUVnQWtGL2FpSUNEUUFMRHdzZ0FDQUJJQUlReGdJUEN5QUNSUVJBRHdzRFFDQUFJQUVnQTJvUXd3SWdBMEVRYWlJRElBSkpEUUFMRHdzZ0FFR3NKV29nQVNBQ0lBRVFyZ1FMQytnREFRaC9JQUJCdERGcUlnWW9BZ0FnQUVHMEoyb2dBUzBBQUVFQ2RHb29BZ0J6SVFJZ0JpQUNOZ0lBSUFCQnVERnFJZ2NvQWdBZ0FFRzBKMm9nQVMwQUFVRUNkR29vQWdCeklRTWdCeUFETmdJQUlBQkJ2REZxSWdnb0FnQWdBRUcwSjJvZ0FTMEFBa0VDZEdvb0FnQnpJUVFnQ0NBRU5nSUFJQUJCd0RGcUlna29BZ0FnQUVHMEoyb2dBUzBBQTBFQ2RHb29BZ0J6SVFVZ0NTQUZOZ0lBSUFZZ0FpQUFRYlFuYWlBQkxRQUVRUUowYWlnQ0FITWlBallDQUNBSElBTWdBRUcwSjJvZ0FTMEFCVUVDZEdvb0FnQnpJZ00yQWdBZ0NDQUVJQUJCdENkcUlBRXRBQVpCQW5ScUtBSUFjeUlFTmdJQUlBa2dCU0FBUWJRbmFpQUJMUUFIUVFKMGFpZ0NBSE1pQlRZQ0FDQUdJQUlnQUVHMEoyb2dBUzBBQ0VFQ2RHb29BZ0J6SWdJMkFnQWdCeUFESUFCQnRDZHFJQUV0QUFsQkFuUnFLQUlBY3lJRE5nSUFJQWdnQkNBQVFiUW5haUFCTFFBS1FRSjBhaWdDQUhNaUJEWUNBQ0FKSUFVZ0FFRzBKMm9nQVMwQUMwRUNkR29vQWdCeklnVTJBZ0FnQmlBQ0lBQkJ0Q2RxSUFFdEFBeEJBblJxS0FJQWN6WUNBQ0FISUFNZ0FFRzBKMm9nQVMwQURVRUNkR29vQWdCek5nSUFJQWdnQkNBQVFiUW5haUFCTFFBT1FRSjBhaWdDQUhNMkFnQWdDU0FGSUFCQnRDZHFJQUV0QUE5QkFuUnFLQUlBY3pZQ0FBdDRBUUovQWtBZ0FDZ0NBQkNUQVNJQ0lBRW9BZ0FRa3dFaUEwWUVRQU5BQWtBZ0FDZ0NBRVVFUUVFQUlRQU1BUXNnQUVFRWFpSUFLQUlBRUpNQklnSWdBVUVFYWlJQktBSUFFSk1CSWdOR0RRRWdBeUVBSUFJaEFRd0RDd3RCQUE4RklBTWhBQ0FDSVFFTEN5QUJJQUJJQkg5QmZ3VkJBUXNMa1FRQkJYOGdBQ2dDQUNJRFJRUkFJQUZCQURvQUFBOExJQUpCZjJvaEJDQUFJUUlnQXlFQUFrQURRQ0FFSVFNZ0FpRUVBa0FDZndKQUFrQUNRQU5BQWtBZ0EwRUFUQTBJSUFOQmYyb2hBaUFFUVFScUlRVWdBRUdBQVVrRVFDQUNJUVFnQlNFQ0lBRWhCU0FBSVFOQkFTRUFEQUVMSUFCQmdCQkpCRUFnQTBGK2FpRUNJQU5CQVVvTkF3c2dBRUdBZUhGQmdMQURSZ1IvSUFVb0FnQWlBMEdBZUhGQmdMZ0RSaUVHSUFCQkNuUkJnTWlBWldvZ0Eyb2hBeUFFUVFocUlRUWdCa1VFUUNBRklRUUxJQVpGQkVBZ0FDRURDeUFFQlNBQUlRTWdCUXNoQUFKQUFrQWdBMEdBZ0FSSkJFQWdBa0YrYWlFRUlBSkJBVW9OQmd3QkJTQURRWUNBZ0FGSkJFQWdBaUVFREFJTEN3d0JDeUFFUVgxcUlRSWdCRUVDU2cwRkN5QUFLQUlBSWdWRkRRZ2dBaUVESUFBaEJDQUZJUUFNQVFzTERBUUxJQUloQkNBRklRSWdBU0VGUVFFaEJ5QUFJZ05CQm5aQndBRnlJUVpCQWd3Q0N5QUJJQU5CREhaQjRBRnlPZ0FBSUFBaEFpQUJRUUZxSVFWQkFpRUhJQU5CQm5aQlAzRkJnQUZ5SVFaQkF3d0JDeUFCSUFOQkVuWkI4QUZ5T2dBQUlBRWdBMEVNZGtFL2NVR0FBWEk2QUFFZ0FpRUVJQUFoQWlBQlFRSnFJUVZCQXlFSElBTkJCblpCUDNGQmdBRnlJUVpCQkFzaEFDQUZJQVk2QUFBZ0FTQUhhaUVGSUFOQlAzRkJnQUZ5SVFNTElBRWdBR29oQVNBRklBTTZBQUFnQWlnQ0FDSUFEUUFMQ3lBQlFRQTZBQUFMdWdFQkFuOUJ1QTRvQWdCQmYwWUVRRUc0RGtFU0VKUUNJZ0UyQWdBZ0FSQ1VBaG9MQW44Q1FBSkFBa0FnQUVHYzZRRnFLQUlBRGdJQUFRSUxJQUJCektjQmFpSUJLQUlBSWdCQkVIRUVRRUc0RGlnQ0FFSC9BM0ZCL3dOekRBTUZRYmdPS0FJQVFYOXpJUUlnQUVFQmNRUi9RYVFDQlVHMkF3c2dBbkVNQXdzQUN3OExRYmdPS0FJQVFYOXpJUUlnQUVITXB3RnFJUUVnQUVHUjZRRnFMQUFBQkg5Qi80TUJCVUcyZ3dJTElBSnhDeUVBSUFFZ0FEWUNBQXZlQVFFRWZ5QUFFSHdpQWtVRVFFRUFEd3NnQUVITTh3QnFJUVFnQVVFRlJnUkFBMEFDUUNBRFFRRnFJZ05CL3dCeFJRUkFFSVVCQ3lBRUtBSUFRUVZHRFFBZ0FDQUFRWkM4QTJvcEF3QkJBQ0FBS0FJQUtBSVFRUU54UWJnQ2FoRUNBQ0FBRUh3aUFnMEJRUUFoQWdzTElBSVBCU0FDSVFNTEEwQUNmMEVBSUFRb0FnQWlBa0VGUmcwQUdpQUZRUUZxSWdWQi93QnhSUVJBRUlVQklBUW9BZ0FoQWdzZ0F5QUNJQUZHRFFBYUlBQWdBRUdRdkFOcUtRTUFRUUFnQUNnQ0FDZ0NFRUVEY1VHNEFtb1JBZ0FnQUJCOElnTU5BVUVBQ3lFQ0N5QUNDejBCQVg4Z0FFR2t2QU5xTEFBQVJRUkFJQUVQQzBFQUlBRnJRUTl4SUFGcUlRSWdBRUdZdkFOcUtBSUFRUU5HQkg4Z0FrRVFhZ1VnQWtFSWFnc0wxaEFDRlg4RWZnSkFJd1FoQlNNRVFkQUFhaVFFSUFCQnBMd0RhaUlRUVFBNkFBQWdBRUdzdkFOcUloRkJBRG9BQUNBQUlBQkJyS1lCYWlJTVFRY2dBQ2dDQUNnQ0RFRWZjVUhLQUdvUkFRQkJCMGNOQUNBQVFhaThBMm9pRFVFQU5nSUFBa0FDUUFKQUlBd3NBQUJCMGdCSERRQUNRQUpBQWtBQ1FDQUFRYTJtQVdvc0FBQkJ4UUJyRGgwQUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FRSUxJQUJCcnFZQmFpd0FBRUgrQUVjTkF5QUFRYSttQVdvc0FBQkIzZ0JIRFFNZ0FFR1l2QU5xSWdKQkFUWUNBQ0FBS0FJQUlnTW9BaEFoQmlBQUlBQWdBeWdDRkVFSGNVR0dBV29SQUFCQ2VYeEJBQ0FHUVFOeFFiZ0NhaEVDQUF3RUN3d0JDd3dCQ3lBQVFhNm1BV29zQUFCQjhnQkhEUUFnQUVHdnBnRnFMQUFBUVNGSERRQWdBRUd3cGdGcUxBQUFRUnBIRFFBZ0FFR3hwZ0ZxTEFBQVFRZEhEUUFDUUFKQUFrQUNRQUpBSUFCQnNxWUJhaXdBQUE0REFBRUNBd3RCQWlFQ0RBTUxRUU1oQWd3Q0MwRUVJUUlNQVFzTUFRc2dBRUdZdkFOcUlBSTJBZ0FnQWlFR0RBSUxRUUJCZ0lDQUFSQlhJZ1JGSWc0RVFFR3M5UUlRVmdzZ0FDZ0NBQ2dDRkNFQ1FRQWtCU0FDSUFBUVRxMGpCNjFDSUlhRUlSY2pCU0VDUVFBa0JRSkFJQUpCQVhGRkJFQWdGNmNoQ1NBQUtBSUFLQUlNSVFKQkFDUUZJQUlnQUNBRVFmRC8vd0FRQnlFSEl3VWhBa0VBSkFVZ0FrRUJjVVVFUUFKQUlBZEJBRW9FUUNBQVFaaThBMm9oQ2lBSlFSeElJUXNnQkVFY0lBbHJhaUlJUVFGcUlSSWdDRUVDYWlFVElBaEJBMm9oRkFKQUlBZEJIMG9FUUVFQUlRSUNRQUpBQWtBRFFBSkFBa0FnQkNBQ2FpSURMQUFBUWRJQVJnUkFJQWNnQW1zaUZVRUVUd1JBSUFNc0FBRWlGa0hGQUVjRVFDQVZRUVpMSUJaQjRRQkdjVVVOQXlBRExBQUNRZklBUncwRElBTXNBQU5CSVVjTkF5QURMQUFFUVJwSERRTWdBeXdBQlVFSFJ3MERBa0FDUUFKQUFrQWdBeXdBQmc0REFBRUNBd3RCQWlFRERBY0xEQWtMREFjTERBTUxJQU1zQUFKQi9nQkdCRUFnQXl3QUEwSGVBRVlFUUNBS1FRRTJBZ0FnQ3lBQ1FRQktjVVVOQ3lBSUxBQUFRZElBUncwRUlCSXNBQUJCMHdCSERRUWdFeXdBQUVIR0FFY05CQ0FVTEFBQVFkZ0FSZzBMQ3dzTEN3c2dCeUFDUVFGcUlnSktEUUVNQ0FzTERBSUxRUVFoQXd3QkMwRURJUU1MQlVFQUlRSUNRQUpBQTBBQ1FBSkFJQVFnQW1vaUF5d0FBRUhTQUVZRVFDQUhJQUpySWdoQkJFOEVRQ0FETEFBQklndEJ4UUJHQkVBZ0F5d0FBa0grQUVjTkF5QURMQUFEUWQ0QVJ3MERRUUVoQXd3SEN5QUlRUVpMSUF0QjRRQkdjUVJBSUFNc0FBSkI4Z0JHQkVBZ0F5d0FBMEVoUmdSQUlBTXNBQVJCR2tjTkJTQURMQUFGUVFkSERRVUNRQUpBQWtBQ1FDQURMQUFHRGdNQUFRSURDMEVDSVFNTURBdEJBeUVEREFnTERBa0xDd3NMQ3dzTElBY2dBa0VCYWlJQ1NnMEJEQWNMQ3d3QkMwRUVJUU1MQ3lBS0lBTTJBZ0FMSUEwZ0FpQUphaUlDTmdJQUlBQW9BZ0FvQWhBaEEwRUFKQVVnQXlBQUlBS3RJaGVuSUJkQ0lJaW5RUUFRVUNNRklRSkJBQ1FGSUFKQkFYRU5CQ0FLS0FJQVFYNXhRUUpHQkVBZ0FDZ0NBQ2dDRENFQ1FRQWtCU0FDSUFBZ0RFRUhFQWNhSXdVaEFrRUFKQVVnQWtFQmNRMEZDd3NMSUEwb0FnQWhBaUFPUlFSQUlBUVFVZ3NnQWtVTkJTQUFRWmk4QTJvaEFnd0RDd3NMRUJjaEFpQU9CRUFnQWhBZUN5QUVFRklnQWhBZURBRUxJQUlvQWdBaEJnc0Nmd0pBQWtBQ1FDQUdRUU5yRGdJQkFBSUxJQVZCQURZQ1JDQUZRVHMyQWtnZ0JVRkFhMEVCTmdJQUlBVWdBRUVZYWpZQ0FBd0RDeUFBSUFCQnM2WUJhaUlDUVFFZ0FDZ0NBQ2dDREVFZmNVSEtBR29SQVFBYUlBSXNBQUFOQWtFSURBRUxRUWNMSVFJZ0FFRzBwZ0ZxSUFJMkFnQWdBRUdzOHdCcUtBSUFRYkRMQkdvb0FnQkZCRUFnQUVIUTh3QnFRUUU2QUFBTElBQkJ6UE1BYWlFQ0FrQWdBQkI4QkVBZ0FFSFE4d0JxSVFNZ0FFR1F2QU5xSVFZRFFDQUNLQUlBSWdSQkFVWU5BaUFFUVFSR0lBTXNBQUJCQUVkeERRSWdBQ0FHS1FNQVFRQWdBQ2dDQUNnQ0VFRURjVUc0QW1vUkFnQWdBQkI4RFFBTEN3c2dBRUd0dkFOcUxBQUFSU0FCY2tVTkFDQUFJQUJCa0x3RGFpSURLUU1BUVFBZ0FDZ0NBQ2dDRUVFRGNVRzRBbW9SQWdBZ0VTd0FBQVJBSUFWQkFEWUNSQ0FGUVJrMkFrZ2dCVUZBYTBFQk5nSUFJQVVnQUVFWWFqWUNBQ0FCUlEwQkN5QUFRWjY4QTJvZ0FFSFVwZ0ZxTEFBQU9nQUFBa0FDUUNBQVFkRHpBR29zQUFCRkRRQWdFQ3dBQUVVTkFDQUFRWjI4QTJvaER3d0JDeUFBSUFBb0FnQW9BaFJCQjNGQmhnRnFFUUFBSVJjZ0FFR0l2QU5xSWdjcEF3QWhHU0FES1FNQUlSb2dBaWdDQUNFS0lBQkJuYndEYWlFQklBQkJvYndEYWlFR0lBQkIrTzRDYWlFSkFrQUNRQUpBQTBBQ1FFRUFKQVZCQmlBQUVBVWhCQ01GSVFoQkFDUUZJQWhCQVhFTkF5QUVSUTBBQWtBQ1FBSkFBa0FnQWlnQ0FFRUNhdzRFQUFJREFRTUxEQVVMREFJTElBWWdBU3dBQUFSL0lBa3NBQUJGQlVFQUMwRUJjVG9BQUFzZ0FDZ0NBQ2dDRUNFRUlBTXBBd0FoR0VFQUpBVWdCQ0FBSUJpbklCaENJSWluUVFBUVVDTUZJUVJCQUNRRklBUkJBWEZGRFFFTUF3c0xEQUlMSUFZZ0FTd0FBQVIvSUFCQnVPZ0JhaXdBQUVFQmN3VkJBQXM2QUFBTUFRc1FGeUVHSUFBb0FnQW9BaEFoQkVFQUpBVWdCQ0FBSUJlbklCZENJSWluUVFBUVVDTUZJUVJCQUNRRklBUkJBWEVFUUVFQUVCZ1FXZ1VnQmhBZUN3c2dCeUFaTndNQUlBTWdHamNEQUNBQ0lBbzJBZ0FnQUNnQ0FDZ0NFQ0VDUVFBa0JTQUNJQUFnRjZjZ0YwSWdpS2RCQUJCUUl3VWhBa0VBSkFVZ0FrRUJjUVJBUVFBUUdCQmFCU0FCSVE4TEN5QVBMQUFBQkVBZ0FFR2h2QU5xTEFBQVJRUkFJQVVrQkVFQkR3c0xJQUJCNUx3RGFpQUFRUmhxRUdvYUlBVWtCRUVCRHdzZ0JTUUVRUUFMQmdCQkZ4QUFDd1lBUVJZUUFBc0dBRUVSRUFBTENBQkJCeEFBUVFBTExRRUJmeUFBUVRzUXJRRWlBZ1JBSUFKQkJHb1F5UUloQUNBQkJFQWdBa0VBTmdJQUN3VkJBQ0VBQ3lBQUM5WUJBUUovSXdRaEF5TUVRWUFRYWlRRUFrQWdBQVJBQWtBQ1FBSkFBa0FnQUNnQ0FBNHdBQUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lCQWdzTUJBc2dBVUVBTmdJQURBRUxJQU5CZ0JBUXRnTkZCRUFnQTBFQU9nQUFDeUFESUFFZ0FoQjdHaUFCRUZraUJBUkFJQVJCQVdvZ0Fra2dBU0FFUVg5cVFRSjBhaWdDQUVFdlIzRUVRQ0FCUWZ3TUVJWUNHZ3NMQ3lBQklBQWdBaEI0R2lBREpBUVBDd3NnQWtVRVFDQURKQVFQQ3lBQlFRQTJBZ0FnQXlRRUM3OEJBUUovQWtBZ0FrRi9haUlFQkVCQkFDRUNBMEFDUUFKQUFrQWdBQ0FDUVFKMGFpZ0NBQ0lERGwwQUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnRUNDd3dFQzBFdklRTUxJQUVnQWtFQ2RHb2dBellDQUNBQ1FRRnFJZ0lnQkVrTkFBc0ZRUUFoQWdzTElBRWdBa0VDZEdwQkFEWUNBQXRXQVFOL0lBQW9BZ1FpQlVFSWRTRUVJQVZCQVhFRVFDQUNLQUlBSUFScUtBSUFJUVFMSUFBb0FnQWlBQ2dDQUNnQ0hDRUdJQUFnQVNBQ0lBUnFJQVZCQW5FRWZ5QURCVUVDQ3lBR1FRZHhRWmdDYWhFS0FBc0hBQ0FBSUFGR0N3c0FJQUFRL0FFZ0FCQlNDeElBSUFCQjJDVTJBZ0FnQUVFRWFoQ05Bd3VEQVFFQmZ5TUVJUUVqQkVFUWFpUUVRUUFrQlNBQUVBc2pCU0VBUVFBa0JTQUFRUUZ4UlFSQVFRQWtCVUVaUWJ2eUFDQUJFQTFCQUNRRkMwRUFFQmdpQUJBVkdrRUFKQVZCR1VIajhnQWdBVUVJYWhBTlFRQWtCVUVBRUJnaEFVRUFKQVZCQkJBTEl3VWhBRUVBSkFVZ0FFRUJjUVJBUVFBUUdDSUFFRm9GSUFFUVdnc0xPQUVDZnlNRUlRQWpCRUVRYWlRRVFhaThBMEVERUVrRVFFR2o4UUFnQUJDQ0FRVkJyTHdES0FJQUVFY2hBU0FBSkFRZ0FROExRUUFMdUFFQkJYOGpCQ0VGSXdSQkVHb2tCQ0FBUVF0cUlnWXNBQUFpQTBFQVNDSUVCSDhnQUNnQ0NFSC8vLy8vQjNGQmYyb0ZRUW9MSWdjZ0Fra0VRQ0FBSUFjZ0FpQUhheUFFQkg4Z0FDZ0NCQVVnQTBIL0FYRUxJZ05CQUNBRElBSWdBUkNrQXdVZ0JBUi9JQUFvQWdBRklBQUxJZ01oQkNBQ0JFQWdCQ0FCSUFJUVhSb0xJQVZCQURvQUFDQURJQUpxSUFVc0FBQTZBQUFnQml3QUFFRUFTQVJBSUFBZ0FqWUNCQVVnQmlBQ09nQUFDd3NnQlNRRUlBQUxwd0VCQW44akJDRUZJd1JCa0FOcUpBUWdCU0FBTmdJQUlBVWdBVUYvYWpZQ0JDQUZRUWhxSWdSQkFFSDhBQkJVR2lBRVFYODZBRXNnQkVFZU5nSWtJQVJCZ0FJMkFqQWdCQ0FGUVlnQmFqWUNMQ0FFUVg4MkFrd2dCQ0FGTmdKVUlBRUVRQ0FCUVFCSUJFQkJpTHdEUWNzQU5nSUFRWDhoQUFVZ0JDQUNJQU1RclFNaEFDQUVRUUJCQUJERUFSb2dBQ0FCVHdSQVFYOGhBQXNMQlVGL0lRQUxJQVVrQkNBQUM2a0JBUVYvSXdRaEFpTUVRUkJxSkFRZ0FpQUJRZjhCY1NJR09nQUFBa0FDUUNBQVFSQnFJZ01vQWdBaUJBMEFJQUFRakFJRVFFRi9JUUVGSUFNb0FnQWhCQXdCQ3d3QkN5QUFRUlJxSWdNb0FnQWlCU0FFU1FSQUlBRkIvd0Z4SWdFZ0FDd0FTMGNFUUNBRElBVkJBV28yQWdBZ0JTQUdPZ0FBREFJTEN5QUFJQUpCQVNBQUtBSWtRUjl4UWNvQWFoRUJBRUVCUmdSL0lBSXRBQUFGUVg4TElRRUxJQUlrQkNBQkM5RUJBUU4vSUFKRkJFQVBDeUFDUVg5cUlRUWdBQkJaSVFNQ1FBSkFBMEFDUUNBRFFRQk1CRUFnQUNFQ0RBRUxJQUFnQTBGL2FpSUNRUUowYWlnQ0FFRXZSZzBDSUFJaEF3d0JDd3NNQVFzZ0FDQURRUUowYWlFQ0N5QUVJQUlnQUNJRmEwRUNkVThFUUNBQUVGa2hBd0pBQWtBRFFBSkFJQU5CQUV3RVFDQUFJUUlNQVFzZ0FDQURRWDlxSWdKQkFuUnFLQUlBUVM5R0RRSWdBaUVEREFFTEN3d0JDeUFBSUFOQkFuUnFJUUlMSUFJZ0JXdEJBblVoQkFzZ0FTQUFJQVFRcmdFYUlBRWdCRUVDZEdwQkFEWUNBQXRJQVFKL0lBQW9BZ0FvQWdCQlVHcEJDa2tFUUFOQUlBSkJDbXhCVUdvZ0FDZ0NBQ0lCS0FJQWFpRUNJQUFnQVVFRWFpSUJOZ0lBSUFFb0FnQkJVR3BCQ2trTkFBc0xJQUlMM2hJREZuOEJmZ0Y4SXdRaENDTUVRWUFCYWlRRUlBaEIyQUJxSVJFZ0NFSElBR29oRWlBSVFTaHFJUTRnQ0VFZ2FpRVRJQWhCR0dvaEZDQUlRUkJxSVJVZ0NFRUlhaUVXSUFoQjhBQnFJUmNnQ0VIb0FHb2hHQ0FJUWV3QWFpSUtJQUUyQWdBZ0FFRUFSeUVRUVFBaEFRSkFBa0FEUUFKQUFrQWdDVUYvU2dSQUlBVkIvLy8vL3djZ0NXdE1CRUFnQlNBSmFpRUpEQUlMSUFBb0FnQkJJSEZGQkVCQmlMd0RRY3NBTmdJQUMwRi9JUWtMQ3lBS0tBSUFJZ1lvQWdBaUIwVU5BaUFHSVFVRFFBSkFBa0FDUUNBSERpWUFBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBQUVMREFFTElBb2dCVUVFYWlJRk5nSUFJQVVvQWdBaEJ3d0JDd3NnQlVIZ0pCQ3VBeUVGSUFvZ0NpZ0NBQ0lISUFWQmZuRkJBblJxTmdJQUlBY2dCVUVCZGtFQ2RHb2dCbXRCQW5VaEJTQVFCRUFnQUNBR0lBVVF4UUVMSUFVTkFTQUtJQW9vQWdBaUJTQUtLQUlBS0FJRVFWQnFRUXBQQkg5QmZ5RVBRUUVGSUFVb0FnaEJKRVlFZnlBRktBSUVRVkJxSVE5QkFTRUJRUU1GUVg4aEQwRUJDd3RCQW5ScUlnVTJBZ0FnQlNnQ0FDSUhRV0JxSWdaQkgwdEJBU0FHZEVHSjBRUnhSWElFUUVFQUlRWUZRUUFoQ3lBSElRWURRRUVCSUFaQllHcDBJQXR5SVFZZ0JVRUVhaUlGS0FJQUlnZEJZR29pQzBFZlMwRUJJQXQwUVluUkJIRkZja1VFUUNBR0lRc2dCeUVHREFFTEN5QUtJQVUyQWdBTEFrQWdCMEVxUmdSL0FuOENRQ0FGS0FJRVFWQnFRUXBQRFFBZ0NpZ0NBQ0lGS0FJSVFTUkhEUUFnQkNBRlFRUnFJZ0VvQWdCQlVHcEJBblJxUVFvMkFnQWdBeUFCS0FJQVFWQnFRUU4wYWlrREFLY2hBVUVCSVFjZ0JVRU1hZ3dCQ3lBQkJFQkJmeUVKREFRTElCQUVRQ0FDS0FJQVFRTnFRWHh4SWdVb0FnQWhBU0FDSUFWQkJHbzJBZ0FGUVFBaEFRdEJBQ0VISUFvb0FnQkJCR29MSVFVZ0NpQUZOZ0lBSUFaQmdNQUFjaUVMUVFBZ0FXc2hEU0FCUVFCSUlneEZCRUFnQmlFTEN5QU1SUVJBSUFFaERRc2dCeUVCSUFVRklBb1Fnd0lpRFVFQVNBUkFRWDhoQ1F3REN5QUdJUXNnQ2lnQ0FBc2lCaWdDQUVFdVJnUkFJQVlvQWdSQktrY0VRQ0FLSUFaQkJHbzJBZ0FnQ2hDREFpRUZJQW9vQWdBaEJnd0NDeUFHS0FJSVFWQnFRUXBKQkVBZ0NpZ0NBQ0lHS0FJTVFTUkdCRUFnQkNBR1FRaHFJZ1VvQWdCQlVHcEJBblJxUVFvMkFnQWdBeUFGS0FJQVFWQnFRUU4wYWlrREFLY2hCU0FLSUFaQkVHb2lCallDQUF3REN3c2dBUVJBUVg4aENRd0RDeUFRQkVBZ0FpZ0NBRUVEYWtGOGNTSUdLQUlBSVFVZ0FpQUdRUVJxTmdJQUJVRUFJUVVMSUFvZ0NpZ0NBRUVJYWlJR05nSUFCVUYvSVFVTEMwRUFJUWNEUUNBR0tBSUFRYjkvYWlJTVFUbExCRUJCZnlFSkRBSUxJQW9nQmtFRWFpSUdOZ0lBSUFkQk9teEJydW9BYWlBTWFpd0FBQ0laUWY4QmNTSU1RWDlxUVFoSkJFQWdEQ0VIREFFTEN5QVpSUVJBUVg4aENRd0JDeUFQUVg5S0lSb0NRQUpBSUJsQkUwWUVRQ0FhQkVCQmZ5RUpEQVFGREFJTEFBVWdHZ1JBSUFRZ0QwRUNkR29nRERZQ0FDQUlJQU1nRDBFRGRHb3BBd0EzQXdBTUFnc2dFRVVFUUVFQUlRa01CQXNnQ0NBTUlBSVFzUUVnQ2lnQ0FDRUdDd3dCQ3lBUVJRUkFRUUFoQlF3REN3c2dCa0Y4YWlnQ0FDSU1RVjl4SVFZQ1FBSkFBa0FDUUFKQUFrQUNRQUpBSUFkQkFFY2dERUVQY1VFRFJuRUVmeUFHQlNBTUlnWUxRY01BYXc0eEFnWUdCZ1lHQmdZR0JnWUdCZ1lHQmdNR0JnWUdCZ1lHQmdZR0JnWUdCZ1lCQmdZR0JnWUdCZ1lHQkFBR0JnWUdCUVlMQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQ0FIUWY4QmNVRVlkRUVZZFE0SUFBRUNBd1FIQlFZSEN5QUlLQUlBSUFrMkFnQkJBQ0VGREE4TElBZ29BZ0FnQ1RZQ0FFRUFJUVVNRGdzZ0NDZ0NBQ0FKckRjREFFRUFJUVVNRFFzZ0NDZ0NBQ0FKT3dFQVFRQWhCUXdNQ3lBSUtBSUFJQWs2QUFCQkFDRUZEQXNMSUFnb0FnQWdDVFlDQUVFQUlRVU1DZ3NnQ0NnQ0FDQUpyRGNEQUVFQUlRVU1DUXRCQUNFRkRBZ0xJQWdwQXdDbkVMY0RJQUFRckFFYVFRRWhCUXdIQ3lBSUtRTUFweUFBRUt3QkdrRUJJUVVNQmdzZ0NDZ0NBQ0lIUVFBZ0JSQ3pBeUlHSUFkclFRSjFJUXdnRFNBR0JIOGdEQVVnQlFzaUJrZ0VmeUFHQlNBTkN5RUZJQXRCZ01BQWNRUkFJQUFnQnlBR0VNVUJJQlVnQlNBR2F6WUNBQ0FWUVl5TEJEWUNCQ0FBUWY3dEFDQVZFSkFCR2dVZ0ZpQUZJQVpyTmdJQUlCWkJqSXNFTmdJRUlBQkIvdTBBSUJZUWtBRWFJQUFnQnlBR0VNVUJDd3dGQ3lBSVFZaThBeWdDQUJDU0FpSUhOZ0lBREFJTElBZ29BZ0FoQnd3QkN5QUdRU0J5SWdkQnN1MEFhaXdBQUNFTUlBNGdDMEVEZGtFQmNVRUJjMEdKN2dCcU5nSUFJQTRnQzBFTGRrRUJjVUVCYzBHTDdnQnFOZ0lFSUE0Z0MwRU5ka0VCY1VFQmMwR043Z0JxTmdJSUlBNGdDMEVCY1VFQmMwR1A3Z0JxTmdJTUlBNGdDMEVRZGtFQmNVRUJjMEdSN2dCcU5nSVFJQTRnRERZQ0ZDQU9JQVkyQWhnZ0YwRVFRYXZ1QUNBT0VNRURHZ0pBQWtBQ1FDQUhRZUVBYXc0WUFBSUNBUUFBQUFJQkFnSUNBZ0lCQVFJQ0FnSUJBZ0lCQWdzZ0NDc0RBQ0VjSUJJZ0RUWUNBQ0FTSUFVMkFnUWdFaUFjT1FNSUlBQWdGeUFTRUpBQklRVU1CQXNnQ0NrREFDRWJJQkVnRFRZQ0FDQVJJQVUyQWdRZ0VTQWJOd01JSUFBZ0Z5QVJFSkFCSVFVTUF3dEJBQ0VGREFJTElBZEZCRUFnQ0VHQzdnQTJBZ0JCZ3U0QUlRY0xBa0FnQlVILy8vLy9CMGtFZnlBRkJVSC8vLy8vQndzaURFRUFTZ1JBSUFjaEJVRUFJUVlEUUNBWUlBVkJCQkRNQVNJUFFRQktCRUFnQlNBUGFpRUZJQVpCQVdvaUJpQU1TQTBCSUFZaEJRd0RDd3NnRDBFQVNBUkFRWDhoQ1F3REJTQUdJUVVMQlVFQUlRVUxDeUFOSUFWSUJIOGdCUVVnRFFzaEJpQUxRWURBQUhGQkFFY2lEVVVFUUNBVUlBWWdCV3MyQWdBZ0ZFR01pd1EyQWdRZ0FFSCs3UUFnRkJDUUFSb0xJQVVFUUNBRklRc0RRQ0FISUJnZ0IwRUVFTXdCYWlFSElCZ29BZ0FnQUJDc0FSb2dDMEYvYWlJTERRQUxDeUFOQkVBZ0V5QUdJQVZyTmdJQUlCTkJqSXNFTmdJRUlBQkIvdTBBSUJNUWtBRWFDeUFHSVFVTUFRc0xEQUVMSUFCRkJFQWdBUVJBUVFFaEFBTkFJQVFnQUVFQ2RHb29BZ0FpQVFSQUlBTWdBRUVEZEdvZ0FTQUNFTEVCSUFCQkFXb2hBU0FBUVFsSUJFQWdBU0VBREFJRklBRWhBQXNMQ3lBQVFRcElCRUFEUUNBRUlBQkJBblJxS0FJQUJFQkJmeUVKREFVTElBQkJBV29oQVNBQVFRbElCRUFnQVNFQURBRUZRUUVoQ1FzTEJVRUJJUWtMQlVFQUlRa0xDd3NnQ0NRRUlBa0xjQUVCZnlBQUtBSk1HaUFCQkVBZ0FFSDRBR29pQWlnQ0FFVUVRQ0FDUWF3aktBSUFLQUlBQkg5QmpCNEZRYkM3QXdzMkFnQUxJQUJCeWdCcUlnQXNBQUFpQWdSQUlBSWhBUVVnQUNBQlFRQktCSDlCQVFWQmZ3c2lBVG9BQUFzRklBQXNBRW9oQVFzZ0FVRVlkRUVZZFFzVEFDQUFJQUFRV1VFQ2RHb2dBUkJxR2lBQUN5RUJBbjhnQUJCdVFRRnFJZ0VRYkNJQ0JIOGdBaUFBSUFFUVV3VkJBQXNpQUFzWEFFRUFJQUFnQVNBQ0JIOGdBZ1ZCcEx3REN4Q0tBZ3RDQVFOL0lBSUVRQ0FCSVFNZ0FDRUJBMEFnQTBFRWFpRUVJQUZCQkdvaEJTQUJJQU1vQWdBMkFnQWdBa0YvYWlJQ0JFQWdCQ0VESUFVaEFRd0JDd3NMSUFBTDdBSUJCWDhqQkNFR0l3UkJFR29rQkNBREJIOGdBd1ZCb0x3REN5SUVLQUlBSVFNQ2Z3SkFJQUVFZnlBQUJIOGdBQVVnQmdzaEJTQUNCRUFDUUFKQUlBTUVRQ0FESVFBZ0FpRUREQUVGSUFFc0FBQWlBRUYvU2dSQUlBVWdBRUgvQVhFMkFnQWdBRUVBUnd3SEN5QUJMQUFBSVFCQnJDTW9BZ0FvQWdCRkJFQWdCU0FBUWYrL0EzRTJBZ0JCQVF3SEN5QUFRZjhCY1VHK2Ztb2lBRUV5U3cwRklBRkJBV29oQVNBQVFRSjBRYVFlYWlnQ0FDRUFJQUpCZjJvaUF3MEJDd3dCQ3lBQkxBQUFJZ2RCL3dGeFFRTjJJZ2hCY0dvZ0NDQUFRUnAxYW5KQkIwc05Bd05BQWtBZ0EwRi9haUVESUFkQi93RnhRWUIvYWlBQVFRWjBjaUlBUVFCT0RRQWdBMFVOQWlBQlFRRnFJZ0VzQUFBaUIwSEFBWEZCZ0FGR0RRRU1CUXNMSUFSQkFEWUNBQ0FGSUFBMkFnQWdBaUFEYXd3RUN5QUVJQUEyQWdBTFFYNEZJQU1OQVVFQUN3d0JDeUFFUVFBMkFnQkJpTHdEUWRRQU5nSUFRWDhMSVFBZ0JpUUVJQUFMUUFBZ0FRUkFJQUJCQW5SQjhMc0RhaUFBSUFFUXhRTWlBRFlDQUFVZ0FFRUNkRUh3dXdOcUtBSUFJUUFMSUFCQkNHb2hBU0FBQkg4Z0FRVkJyT29BQ3d0ckFRSi9JQUJCeWdCcUlnSXNBQUFoQVNBQ0lBRkIvd0ZxSUFGeU9nQUFJQUFvQWdBaUFVRUljUVIvSUFBZ0FVRWdjallDQUVGL0JTQUFRUUEyQWdnZ0FFRUFOZ0lFSUFBZ0FDZ0NMQ0lCTmdJY0lBQWdBVFlDRkNBQUlBRWdBQ2dDTUdvMkFoQkJBQXNpQUF2dEFRRUVmd0pBQWtBZ0FrRVFhaUlFS0FJQUlnTU5BQ0FDRUl3Q0JFQkJBQ0VDQlNBRUtBSUFJUU1NQVFzTUFRc2dBeUFDUVJScUlnVW9BZ0FpQkdzZ0FVa0VRQ0FDSUFBZ0FTQUNLQUlrUVI5eFFjb0FhaEVCQUNFQ0RBRUxBa0FnQWl3QVMwRi9TZ1JBSUFFaEF3TkFJQU5GQkVCQkFDRUREQU1MSUFBZ0EwRi9haUlHYWl3QUFFRUtSd1JBSUFZaEF3d0JDd3NnQWlBQUlBTWdBaWdDSkVFZmNVSEtBR29SQVFBaUFpQURTUTBDSUFBZ0Eyb2hBQ0FCSUFOcklRRWdCU2dDQUNFRUJVRUFJUU1MQ3lBRUlBQWdBUkJUR2lBRklBVW9BZ0FnQVdvMkFnQWdBeUFCYWlFQ0N5QUNDNWtCQWdGL0FuNENRQUpBQWtBZ0FMMGlBMEkwaUNJRXAwSC9EM0VpQWdSQUlBSkIvdzlHQkVBTUJBVU1Bd3NBQ3lBQklBQkVBQUFBQUFBQUFBQmlCSDhnQUVRQUFBQUFBQUR3UTZJZ0FSQ09BaUVBSUFFb0FnQkJRR29GUVFBTElnSTJBZ0FNQWdBTEFBQUxJQUVnQktkQi93OXhRWUo0YWpZQ0FDQURRdi8vLy8vLy8vK0hnSCtEUW9DQWdJQ0FnSUR3UDRTL0lRQUxJQUFMU0FFQ2Z5QUFLQUlBTEFBQVFWQnFRUXBKQkVBRFFDQUNRUXBzUVZCcUlBQW9BZ0FpQVN3QUFHb2hBaUFBSUFGQkFXb2lBVFlDQUNBQkxBQUFRVkJxUVFwSkRRQUxDeUFDQzNRQkFuOGdBZ1IvQWtBZ0FDd0FBQ0lEQkVBZ0FDRUVJQU1oQUFOQUlBQkJHSFJCR0hVZ0FTd0FBQ0lEUmlBQ1FYOXFJZ0pCQUVjZ0EwRUFSM0Z4UlEwQ0lBRkJBV29oQVNBRVFRRnFJZ1FzQUFBaUFBMEFRUUFoQUFzRlFRQWhBQXNMSUFCQi93RnhJQUV0QUFCckJVRUFDeUlBQy9zQkFRTi9Ba0FnQVVIL0FYRWlBZ1JBSUFCQkEzRUVRQ0FCUWY4QmNTRURBMEFnQUN3QUFDSUVSU0FFSUFOQkdIUkJHSFZHY2cwRElBQkJBV29pQUVFRGNRMEFDd3NnQWtHQmdvUUliQ0VEQWtBZ0FDZ0NBQ0lDUVlDQmdvUjRjVUdBZ1lLRWVITWdBa0gvL2Z0M2FuRkZCRUFEUUNBQ0lBTnpJZ0pCZ0lHQ2hIaHhRWUNCZ29SNGN5QUNRZi85KzNkcWNRMENJQUJCQkdvaUFDZ0NBQ0lDUVlDQmdvUjRjVUdBZ1lLRWVITWdBa0gvL2Z0M2FuRkZEUUFMQ3dzZ0FVSC9BWEVoQWdOQUlBQkJBV29oQVNBQUxBQUFJZ05GSUFNZ0FrRVlkRUVZZFVaeVJRUkFJQUVoQUF3QkN3c0ZJQUFnQUJCdWFpRUFDd3NnQUFzTkFDQUFRYXdqS0FJQUVNY0RDNlFEQVFaL0lBRkJBWFJCZjJvaEF5QUJRWDlxSVFRQ1FDQUFRWUN3ZldwQmdLNEJTU0FBUVlDa2YycEJ3UEFCU1NBQVFZQjBha0dBRkVrZ0FCRElBMFZ5Y25KRkJFQWdBVUVBUnlJQ0lBQkI0RjVxUVM1SmNRUkFJQUJCeFNGS0JFQUNRQUpBQWtBZ0FFSEhJV3NPQndBQkFRRUJBUUFCQ3d3QkN3d0VDd3NnQUVIZ09Hb2hBQXdDQ3lBQVFZQ21mMnBCSmtrZ0FrRUJjM0VFUUNBQVFhQkhhaUVBREFJRlFRQWhBZ3NDUUFKQUEwQWdBQ0FDUVFKMFFkd3FhaThCQUdzaUJTQUVJQUpCQW5SQjNpcHFMQUFBSWdZaUIzRnJJQUpCQW5SQjN5cHFMUUFBU1EwQklBSkJBV29pQWtFOVJ3MEFDd3dCQ3lBR1FRRkdCRUFnQVNBQWFpQUZRUUZ4YXlFQUJTQURJQWRzSUFCcUlRQUxEQUlMQWtCQkFTQUJheUlFUVFGMFFmUW1haTRCQUNJQ0JFQkJBQ0VEQTBBZ0FrSC8vd054SUFCSEJFQWdBMEVCYWlJRFFRSjBRZlFtYWlBRVFRRjBhaTRCQUNJQ1JRMEREQUVMQ3lBRFFRSjBRZlFtYWlBQlFRRjBhaThCQUNFQURBTUxDeUFBUVZocUlBRkIwQUJzYWlFQ0lBQkIyUGQ3YWlBQlFTaHNha0VvU1FSL0lBSUZJQUFMRHdzTElBQUxPd0VCZnlNRUlRRWpCRUVRYWlRRUlBRWdBRFlDQUVFOElBRVFKeUlBUVlCZ1N3UkFRWWk4QTBFQUlBQnJOZ0lBUVg4aEFBc2dBU1FFSUFBTHl3d0JCbjhDUUNBQUlBRnFJUVVDUUNBQUtBSUVJZ05CQVhGRkJFQWdBQ2dDQUNFQ0lBTkJBM0ZGQkVBUEN5QUNJQUZxSVFGQjFMY0RLQUlBSUFBZ0Ftc2lBRVlFUUNBRlFRUnFJZ0lvQWdBaUEwRURjVUVEUncwQ1FjaTNBeUFCTmdJQUlBSWdBMEYrY1RZQ0FDQUFJQUZCQVhJMkFnUWdCU0FCTmdJQUR3c2dBa0VEZGlFRUlBSkJnQUpKQkVBZ0FDZ0NEQ0lDSUFBb0FnZ2lBMFlFUUVIQXR3TkJ3TGNES0FJQVFRRWdCSFJCZjNOeE5nSUFCU0FESUFJMkFnd2dBaUFETmdJSUN3d0NDeUFBS0FJWUlRY0NRQ0FBS0FJTUlnSWdBRVlFUUNBQVFSQnFJZ05CQkdvaUJDZ0NBQ0lDQkVBZ0JDRURCU0FES0FJQUlnSkZCRUJCQUNFQ0RBTUxDd05BSUFKQkZHb2lCQ2dDQUNJR0JFQWdCaUVDSUFRaEF3d0JDeUFDUVJCcUlnUW9BZ0FpQmdSQUlBWWhBaUFFSVFNTUFRc0xJQU5CQURZQ0FBVWdBQ2dDQ0NJRElBSTJBZ3dnQWlBRE5nSUlDd3NnQndSQUlBQW9BaHdpQTBFQ2RFSHd1UU5xSWdRb0FnQWdBRVlFUUNBRUlBSTJBZ0FnQWtVRVFFSEV0d05CeExjREtBSUFRUUVnQTNSQmYzTnhOZ0lBREFRTEJTQUhRUkJxSUFjb0FoQWdBRWRCQW5ScUlBSTJBZ0FnQWtVTkF3c2dBaUFITmdJWUlBQkJFR29pQkNnQ0FDSURCRUFnQWlBRE5nSVFJQU1nQWpZQ0dBc2dCQ2dDQkNJREJFQWdBaUFETmdJVUlBTWdBallDR0FzTEN3c2dCVUVFYWlJREtBSUFJZ0pCQW5FRVFDQURJQUpCZm5FMkFnQWdBQ0FCUVFGeU5nSUVJQUFnQVdvZ0FUWUNBQ0FCSVFJRlFkaTNBeWdDQUNBRlJnUkFRY3kzQTBITXR3TW9BZ0FnQVdvaUFUWUNBRUhZdHdNZ0FEWUNBQ0FBSUFGQkFYSTJBZ1FnQUVIVXR3TW9BZ0JIQkVBUEMwSFV0d05CQURZQ0FFSEl0d05CQURZQ0FBOExRZFMzQXlnQ0FDQUZSZ1JBUWNpM0EwSEl0d01vQWdBZ0FXb2lBVFlDQUVIVXR3TWdBRFlDQUNBQUlBRkJBWEkyQWdRZ0FDQUJhaUFCTmdJQUR3c2dBa0Y0Y1NBQmFpRUdJQUpCQTNZaEF3SkFJQUpCZ0FKSkJFQWdCU2dDRENJQklBVW9BZ2dpQWtZRVFFSEF0d05Cd0xjREtBSUFRUUVnQTNSQmYzTnhOZ0lBQlNBQ0lBRTJBZ3dnQVNBQ05nSUlDd1VnQlNnQ0dDRUhBa0FnQlNnQ0RDSUJJQVZHQkVBZ0JVRVFhaUlDUVFScUlnTW9BZ0FpQVFSQUlBTWhBZ1VnQWlnQ0FDSUJSUVJBUVFBaEFRd0RDd3NEUUNBQlFSUnFJZ01vQWdBaUJBUkFJQVFoQVNBRElRSU1BUXNnQVVFUWFpSURLQUlBSWdRRVFDQUVJUUVnQXlFQ0RBRUxDeUFDUVFBMkFnQUZJQVVvQWdnaUFpQUJOZ0lNSUFFZ0FqWUNDQXNMSUFjRVFDQUZLQUljSWdKQkFuUkI4TGtEYWlJREtBSUFJQVZHQkVBZ0F5QUJOZ0lBSUFGRkJFQkJ4TGNEUWNTM0F5Z0NBRUVCSUFKMFFYOXpjVFlDQUF3RUN3VWdCMEVRYWlBSEtBSVFJQVZIUVFKMGFpQUJOZ0lBSUFGRkRRTUxJQUVnQnpZQ0dDQUZRUkJxSWdNb0FnQWlBZ1JBSUFFZ0FqWUNFQ0FDSUFFMkFoZ0xJQU1vQWdRaUFnUkFJQUVnQWpZQ0ZDQUNJQUUyQWhnTEN3c0xJQUFnQmtFQmNqWUNCQ0FBSUFacUlBWTJBZ0FnQUVIVXR3TW9BZ0JHQkVCQnlMY0RJQVkyQWdBUEJTQUdJUUlMQ3lBQ1FRTjJJUU1nQWtHQUFra0VRQ0FEUVFOMFFlaTNBMm9oQVVIQXR3TW9BZ0FpQWtFQklBTjBJZ054Qkg4Z0FVRUlhaUlES0FJQUJVSEF0d01nQWlBRGNqWUNBQ0FCUVFocUlRTWdBUXNoQWlBRElBQTJBZ0FnQWlBQU5nSU1JQUFnQWpZQ0NDQUFJQUUyQWd3UEN5QUNRUWgySWdFRWZ5QUNRZi8vL3dkTEJIOUJId1VnQWtFT0lBRWdBVUdBL2o5cVFSQjJRUWh4SWdGMElnTkJnT0FmYWtFUWRrRUVjU0lFSUFGeUlBTWdCSFFpQVVHQWdBOXFRUkIyUVFKeElnTnlheUFCSUFOMFFROTJhaUlCUVFkcWRrRUJjU0FCUVFGMGNnc0ZRUUFMSWdOQkFuUkI4TGtEYWlFQklBQWdBellDSENBQVFRQTJBaFFnQUVFQU5nSVFRY1MzQXlnQ0FDSUVRUUVnQTNRaUJuRkZCRUJCeExjRElBUWdCbkkyQWdBZ0FTQUFOZ0lBREFFTElBRW9BZ0FoQVVFWklBTkJBWFpySVFRZ0FpQURRUjlHQkg5QkFBVWdCQXQwSVFNQ1FBTkFJQUVvQWdSQmVIRWdBa1lOQVNBRFFRRjBJUVFnQVVFUWFpQURRUjkyUVFKMGFpSURLQUlBSWdZRVFDQUVJUU1nQmlFQkRBRUxDeUFESUFBMkFnQU1BUXNnQVVFSWFpSUNLQUlBSWdNZ0FEWUNEQ0FDSUFBMkFnQWdBQ0FETmdJSUlBQWdBVFlDRENBQVFRQTJBaGdQQ3lBQUlBRTJBaGdnQUNBQU5nSU1JQUFnQURZQ0NBc0VBRUVBQzFvQkFYOGpCQ0VDSXdSQmdCQnFKQVFnQVNBQ1FZQVFFR2thSUFCQkJHb2lBeUFCRUQ4MkFnQWdBRUVCT2dBU0lBQkJBRFlDRENBQVFRQTZBQkFnQUVFWWFpQUJRWUFRRUc4YUlBTW9BZ0JCQUVjaEFDQUNKQVFnQUF1SEFRRUNmeU1FSVFJakJFR0FFR29rQkNBQVFaakFBR29pQTBFQU5nSUFJQUVnQWtHQUVCQnBHaUFCRUVBaUJFVUVRRUdJdkFNb0FnQkJBa1lFUUNBRFFRRTJBZ0FMQ3lBQVFRQTZBQklnQUVFQU5nSU1JQUJCQURvQUVDQUVRUUJISWdORkJFQWdBaVFFSUFNUEN5QUFJQVEyQWdRZ0FFRVlhaUFCUVlBUUVHOGFJQUlrQkNBREM0c0JBUUYvSXdRaEF5TUVRUkJxSkFRZ0F5QUNFTlVCSUFFZ0FDZ0NBR29pQUVFTGFpSUJMQUFBUVFCSUJFQWdBQ2dDQUVFQU5nSUFJQUJCQURZQ0JBVWdBRUVBTmdJQUlBRkJBRG9BQUF0QkFDUUZRUllnQUVFQUVBMGpCU0VCUVFBa0JTQUJRUUZ4QkVCQkFCQVlJZ0FRV2dVZ0FDQURLUUlBTndJQUlBQWdBeWdDQ0RZQ0NDQURKQVFMQzJBQkEzOGdBU0FBS0FJQWFpSUJMQUFMSWdKQkFFZ2hBeUFCS0FJRUlRQWdBa0gvQVhFaEFpQURCSDhnQUFVZ0FpSUFDMEVDZEVFRWFoQnNJZ0lnQURZQ0FDQUJLQUlBSVFRZ0FrRUVhaUFEQkg4Z0JBVWdBUXNnQUJDSkFob2dBZ3NrQVFGL0lBRWdBQ2dDQUdvaUF5QUNLQUlBTmdJQUlBTkJCR29nQWtFRWFoQ2xBeG9MVGdBZ0FTQUFLQUlBYWlFQlFSQVFYeUlBSUFFb0FnQTJBZ0JCQUNRRlFSVWdBRUVFYWlBQlFRUnFFQTBqQlNFQlFRQWtCU0FCUVFGeEJFQVFGeUVCSUFBUVVpQUJFQjRGSUFBUEMwRUFDemdCQVg4Z0FFVUVRQThMSUFBc0FCdEJBRWdFUUNBQUtBSVFFRklMSUFCQkJHb2lBU3dBQzBFQVNBUkFJQUVvQWdBUVVnc2dBQkJTQ3lnQkFYOGdBa1VFUUNBQUR3c2dBQ0FCSUFKQmYyb2lBeERHQVJvZ0FDQURha0VBT2dBQUlBQUxEUUFnQUVFSGNVRUNhaEVGQUF2MkF3RUhmeU1FSVFZakJFR1F3QUZxSkFRZ0FrRUFFSzhCSVFjZ0JrR0lnQUZxSWdoQkFEWUNBQ0FBUVFBMkFoQWdBQ0FHUVlqQUFHb2lCVUdBRUJEYUFVVUVRQ0FHSkFSQkFBOExJQVpCQkdvaENpQUdRUWhxSVFzZ0FRUkFBMEFDZnlBRkVNOEJJZ0VvQWdCQkwwWUVRQ0FCUVFBMkFnQUxBa0FDUUNBRFJRMEFJQVVvQWdCQkwwY05BQ0FJS0FJQVJRUkFJQUlnQ0VHQUVCRDNBUXNnQlNBSUlBUVFwUUVFUUVFQklRRkJHd3dEQ3d3QkN5QUZRUUFRcndFaUNTZ0NBRUVxUmdSL0lBa29BZ1JCTDBZRWZ5QUdRUzQyQWdBZ0NrRXZOZ0lBSUFzZ0IwR0FFQkJ2R2lBR0JTQUhDd1VnQndzaEFTQUpJQUVnQkJDbEFRUkFRUUVoQVVFYkRBSUxDeUFBSUFWQmdCQVEyZ0VOQVVFQUlRRkJHd3NoQUFzRkEwQUNmeUFGRU04QktBSUFRUzlHQkVBZ0JVR0lIVUdBRUJCNEdnc0NRQUpBSUFORkRRQWdCU2dDQUVFdlJ3MEFJQWdvQWdCRkJFQWdBaUFJUVlBUUVQY0JDeUFGSUFnZ0JCQ2xBUVJBUVFFaEFVRWJEQU1MREFFTElBVkJBQkN2QVNJSktBSUFRU3BHQkg4Z0NTZ0NCRUV2UmdSL0lBWkJMallDQUNBS1FTODJBZ0FnQ3lBSFFZQVFFRzhhSUFZRklBY0xCU0FIQ3lFQklBa2dBU0FFRUtVQkJFQkJBU0VCUVJzTUFnc0xJQUFnQlVHQUVCRGFBUTBCUVFBaEFVRWJDeUVBQ3dzZ0FFRWJSZ1JBSUFZa0JDQUJEd3RCQUFzNEFRSi9JQUJCRUdvaUFpZ0NBQ0lCSUFBb0FnUlBCRUJCQUE4TElBSWdBVUVCYWlBQUtBSUFJQUZCQW5ScUlnQVFXV28yQWdBZ0FBdU1Cd0VHZnlBQVFRUnFJZ1ZCQVJEa0FTQUFRYWlXQVdvaUJrRUFRWUFDRUZRYUlBQkIwTVlEYWlJRFFRQTJBZ0FnQUVHSXZnSnFRUUEyQWdBZ0FFR1F2Z0pxUVFBMkFnQWdBRUdNdmdKcVFRQTJBZ0FnQUVFVWFpSUNRZ0EzQWdBZ0FrSUFOd0lJSUFKQ0FEY0NFQ0FDUWdBM0FoZ2dBa0lBTndJZ0lBSkNBRGNDS0VFQUpBVkJKQ0FBUWRETUEyb2lCeEFNSXdVaEJFRUFKQVVDUUNBRVFRRnhCRUFRRnlFQkJVRUFKQVZCRVNBQVFZak5BMnBCQVJBTkl3VWhCRUVBSkFVZ0JFRUJjUVJBRUJjaEFTQUhFTElDREFJTElBQkJtTTBEYWlJQ1FnQTNBZ0FnQWtJQU53SUlJQUpDQURjQ0VDQUNRZ0EzQWhnZ0FrSUFOd0lnSUFKQ0FEY0NLQ0FBSUFFMkFnQWdBRUdvbUFGcVFRQTZBQUFnQUVHNG1BRnFRUUE2QUFBZ0FFRzVtQUZxUVFBNkFBQWdBRUc2bUFGcVFRQTZBQUFnQUVITXpRTnFRUUEyQWdBZ0FFSFF6UU5xUVFBMkFnQWdBRUVBTmdJNElBQkJBRFlDQ0NBQVFRQTJBZ1FnQUVIQW1BRnFRZ0EzQXdBZ0FFSEVBR3BCQUVIa2xRRVFWQm9nQUVGL05nSndJQUJCd0s0Q2FrRUFOZ0lBSUFCQnhLNENha0VBTmdJQUlBQkJ1SzRDYWtFQU5nSUFJQUJCdks0Q2FrRUJOZ0lBSUFCQnlLNENha0VBUWZBQ0VGUWFJQUJCaEs4QmFrRUFRYlQvQUJCVUdpQUFRY3pNQTJwQkFEb0FBQ0FBUWJUSkEycEJBRUdVQXhCVUdpQUFRYkRKQTJwQkFqWUNBQ0FBUWNqTUEycEJBRFlDQUNBQVFRQVFnd0VnQUVIVXJnRnFJZ0ZDQURjQ0FDQUJRZ0EzQWdnZ0FVSUFOd0lRSUFCQjBLNEJha0dBNmdBMkFnQWdBRUdBcndGcVFZSEFBRFlDQUNBQVFmeXVBV3BCZ0FFMkFnQWdBRUg0cmdGcVFZQUJOZ0lBSUFCQjlLNEJha0VBTmdJQUlBQkJ6SzRCYWtFQU5nSUFJQUJCN0s0QmFrRUFOZ0lBSUFCQjhLNEJha0VBTmdJQUlBQkJBRFlDYUVFQUlRRURRQ0FBUWNxZ0FXb2dBVUVCZEdvZ0FVRUlkRUgvL3dOeElnSTdBUUFnQUVIS21BRnFJQUZCQVhScUlBSTdBUUFnQUVIS25BRnFJQUZCQVhScUlBRTdBUUFnQUVIS3BBRnFJQUZCQVhScVFRQWdBV3RCQ0hRN0FRQWdBVUVCYWlJQlFZQUNSdzBBQ3lBQVFjcW9BV3BCQUVHQUJoQlVHa0VBSUFCQnlxQUJhaUFBUWNxcUFXb1Fud0VQQ3dzZ0F5Z0NBQVJBSUFOQkFEWUNBQ0FBUWZ6SEEyb29BZ0FRVWdzZ0JoRFlBU0FBS0FJMElnTUVRQ0FERUZJTElBQW9BaVFpQUFSQUlBQVFVZ3NnQWlnQ0FDSUFSUVJBSUFVUW1BRWdBUkFlQ3lBQUVGSWdCUkNZQVNBQkVCNExtdzBCRTM4akJDRUlJd1JCMEFOcUpBUWdBaXdBRVVVRVFDQUlKQVJCQVE4TElBRkJDR29pRUN3QUFFVUVRQ0FCS0FJQUlBQkI2QUJxSWdZb0FnQWlCRUZuYWtvRVFDQUVJQUJCQkdvaUJ5Z0NBQ0lGYXlJQ1FRQklCRUFnQ0NRRVFRQVBDeUFBUWZBQWFpSUtJQUJCK0FCcUlnc29BZ0FnQldzZ0NpZ0NBR28yQWdBZ0JVR0FnQUZLQkVBZ0FrRUFTZ1JBSUFBb0FoQWlCQ0FFSUFWcUlBSVFYUm9MSUFkQkFEWUNBQ0FHSUFJMkFnQUZJQVFoQWdzZ0FrR0FnQUpHQkVCQkFDRUNRWUNBQWlFRUJTQUFLQUlBSUFBb0FoQWdBbXBCZ0lBQ0lBSnJFRjRoQWlBR0tBSUFJZ1VnQW1vaEJDQUNRUUJLQkVBZ0JpQUVOZ0lBQlNBRklRUUxDeUFBUWV3QWFpSUdJQVJCWW1vaUJEWUNBQ0FMSUFjb0FnQWlCVFlDQUNBRlFYOXFJQW9vQWdBaUIyb2hCU0FIUVg5SEJFQWdCaUFFSUFWSUJIOGdCQVVnQlFzMkFnQUxJQUpCZjBZRVFDQUlKQVJCQUE4TEN3c2dDRUd3QTJvaEIwRUFJUUlEUUNBQkVGaEJESFloQkNBQlFRUVFWUUpBQWtBZ0JFSC9BWEZCRDBZRVFDQUJFRmhCREhaQi93RnhJUVVnQVVFRUVGVWdCUVJBSUFWQkFtb2hCQ0FISUFKcVFRQkJBRUYrSUFWcklnVWdBa0ZzYWlJR1N3Ui9JQVVGSUFZTGF4QlVHZ05BSUFSQmYyb2hCU0FFUVFGS0lBSkJBV29pQmtFVVNYRUVRQ0FGSVFRZ0JpRUNEQUVMQ3dWQkR5RUVEQUlMQlNBRVFmOEJjU0VFREFFTERBRUxJQWNnQW1vZ0JEb0FBQXNnQWtFQmFpSUNRUlJKRFFBTFFRQWdCeUFEUWJEM0FHb2lFVUVVRUdnZ0FFSG9BR29oQnlBQVFRUnFJUW9nQUVINEFHb2hEU0FBUWZBQWFpRUxJQUJCRUdvaERpQUFRZXdBYWlFUElBRkJER29oRWlBQlFRUnFJUXdnQTBHMCtBQnFJUk1nQ0VGL2FpRVVRUUFoQWdKQUFrQURRQUpBSUFKQnJnTklJUlVnQWtFQVNpRVdBa0FDUUFKQUEwQWdFQ3dBQUVVaEJDQVZSUTBHSUFRRVFDQUJLQUlBSUFjb0FnQWlCVUY3YWtvRVFDQUZJQW9vQWdBaUJtc2lCRUVBU0EwR0lBc2dEU2dDQUNBR2F5QUxLQUlBYWpZQ0FDQUdRWUNBQVVvRVFDQUVRUUJLQkVBZ0RpZ0NBQ0lGSUFVZ0Jtb2dCQkJkR2dzZ0NrRUFOZ0lBSUFjZ0JEWUNBQVVnQlNFRUN5QUVRWUNBQWtZRVFFRUFJUVJCZ0lBQ0lRVUZJQUFvQWdBZ0RpZ0NBQ0FFYWtHQWdBSWdCR3NRWGlFRUlBY29BZ0FpQmlBRWFpRUZJQVJCQUVvRVFDQUhJQVUyQWdBRklBWWhCUXNMSUE4Z0JVRmlhaUlGTmdJQUlBMGdDaWdDQUNJR05nSUFJQVpCZjJvZ0N5Z0NBQ0lKYWlFR0lBbEJmMGNFUUNBUElBVWdCa2dFZnlBRkJTQUdDellDQUFzZ0JFRi9SZzBHQ3dzZ0VpZ0NBQ0lFSUFFb0FnQWlCVUVCYW1vdEFBQkJDSFFnQkNBRmFpMEFBRUVRZEhJZ0JDQUZRUUpxYWkwQUFISkJDQ0FNS0FJQUlnbHJka0grL3dOeElnWWdBMEcwOXdCcUlCTW9BZ0FpQkVFQ2RHb29BZ0JKQkg4Z0FTQUpJQU5CdVBnQWFpQUdRUkFnQkd0MklnUnFMUUFBYWlJR1FRTjJJQVZxTmdJQUlBd2dCa0VIY1RZQ0FDQURRYmlBQVdvZ0JFRUJkR29GQTBBQ1FDQUVRUUZxSWdSQkQwOEVRRUVQSVFRTUFRc2dCaUFEUWJUM0FHb2dCRUVDZEdvb0FnQlBEUUVMQ3lBQklBUWdDV29pQ1VFRGRpQUZhallDQUNBTUlBbEJCM0UyQWdBZ0EwRzRrQUZxSUFZZ0F5QUVRUUowYWtHdzl3QnFLQUlBYTBFUUlBUnJkaUFEUWZUM0FHb2dCRUVDZEdvb0FnQnFJZ1FnRVNnQ0FFOEVmMEVBQlNBRUMwRUJkR29MSWdRdUFRQWlCRUgvL3dOeFFSQklEUUVnQkVILy93TnhRUkpPRFFNZ0FSQllJUVVnQkVFUVJnUi9JQUZCQXhCVklBVkJEWFpCQTJvRklBRkJCeEJWSUFWQkNYWkJDMm9MSVFVZ0ZrVU5BQXdDQ3dBTElBZ2dBbW9nQkRvQUFDQUNRUUZxSVFJTUF3c2dGQ0FDYWl3QUFDRUpJQUloQkFOQUlBVkJmMm9oQmlBSUlBUnFJQWs2QUFBZ0JFRUJhaUVDSUFSQnJRTklJQVZCQVVweFJRMERJQVloQlNBQ0lRUU1BQXNBQ3lBQkVGZ2hCU0FFUVJKR0JIOGdBVUVERUZVZ0JVRU5ka0VEYWdVZ0FVRUhFRlVnQlVFSmRrRUxhZ3NoQkNBSUlBSnFRUUJCQUNBQ1FYOXFJQUpCclFOS0JIOGdBZ1ZCclFNTGF5SUZRWDRnQkdzZ0JFRi9jeUlHUVg1S0JIOGdCZ1ZCZmd0cklnWkxCSDhnQlFVZ0JndHJFRlFhSUFJaEJRTkFJQVJCZjJvaEJpQUZRUUZxSVFJZ0JVR3RBMGdnQkVFQlNuRkZEUUlnQmlFRUlBSWhCUXdBQ3dBTFFRQWhBQXNNQVFzZ0JBUkFJQUVvQWdBZ0J5Z0NBRW9FUUVFQUlRQU1BZ3NMUVFBZ0NDQURRYklDRUdoQkFDQUlRYklDYWlBRFFld2Rha0hBQUJCb1FRQWdDRUh5QW1vZ0EwSFlPMnBCRUJCb1FRQWdDRUdDQTJvZ0EwSEUyUUJxUVN3UWFFRUJJUUFMSUFna0JDQUFDK2NFQVFsL0lBSkJER29pQ1VFQU5nSUFJQUVzQUFoRkJFQWdBU2dDQUNBQVFlZ0FhaUlHS0FJQUlnUkJlV3BLQkVBZ0JDQUFRUVJxSWdjb0FnQWlCV3NpQTBFQVNBUkFRUUFQQ3lBQVFmQUFhaUlJSUFCQitBQnFJZ29vQWdBZ0JXc2dDQ2dDQUdvMkFnQWdCVUdBZ0FGS0JFQWdBMEVBU2dSQUlBQW9BaEFpQkNBRUlBVnFJQU1RWFJvTElBZEJBRFlDQUNBR0lBTTJBZ0FGSUFRaEF3c2dBMEdBZ0FKR0JFQkJBQ0VEUVlDQUFpRUVCU0FBS0FJQUlBQW9BaEFnQTJwQmdJQUNJQU5yRUY0aEF5QUdLQUlBSWdVZ0Eyb2hCQ0FEUVFCS0JFQWdCaUFFTmdJQUJTQUZJUVFMQ3lBQVFld0FhaUlHSUFSQlltb2lCRFlDQUNBS0lBY29BZ0FpQlRZQ0FDQUZRWDlxSUFnb0FnQWlCMm9oQlNBSFFYOUhCRUFnQmlBRUlBVklCSDhnQkFVZ0JRczJBZ0FMSUFOQmYwWUVRRUVBRHdzTEN5QUJRUUFnQVVFRWFpSUhLQUlBYTBFSGNSQlZJQUVRV0NFR0lBRkJDQkJWSUFaQkMzWkJBM0VpQ0VFRFJnUkFRUUFQQ3lBSklBaEJBMm8yQWdBZ0FpQUdRUWgySWdwQkIzRkJBV28yQWdRZ0FSQllJUXNnQVVFSUVGVkJBQ0VFUVFBaEF3TkFJQUVRV0VFSWRpQUVRUU4wZENBRGFpRURJQUVnQnlnQ0FFRUlhaUlGUVFOMklBRW9BZ0JxSWdrMkFnQWdCeUFGUVFkeE5nSUFJQVJCQVdvaEJTQUVJQWhIQkVBZ0JTRUVEQUVMQ3lBQ0lBTTJBZ0FnQ2tIYUFITWdDMEVJZG5NZ0EzTWdBMEVJZG5NZ0EwRVFkbk5CL3dGeEJFQkJBQThMSUFJZ0NUWUNDQ0FBUWV3QWFpSUJLQUlBSVFBZ0FTQUFJQWxCZjJvZ0Eyb2lBVWdFZnlBQUJTQUJDellDQUNBQ0lBWkJEblpCQVhFNkFCQWdBaUFHUVE5MlFRRnhPZ0FSUVFFTHNCQUJISDhDUUNNRUlRSWpCRUVnYWlRRUlBSkJHR29oRmlBQ1FSQnFJUmNnQWtFSWFpRVlJQUloRVNBQVFlUUFhaUlaS0FJQUlRRWdBRUhRelFOcUlSTWdBRUhnQUdvaUZDZ0NBQ0VEQWtBZ0FFR3N6UU5xSWhJb0FnQWlEd1JBSUFCQnFNMERhaUVNSUFCQnpNMERhaUViSUFCQjBNd0RhaUVOSUFCQnBKWUJhaUVWSUFCQm1NMERhaUVhSUFCQnVwZ0JhaUVjSUFCQndKZ0JhaUVPSUFNZ0FXc2dFeWdDQUNJRWNTRUZRUUFoQWdOQUFrQUNRQ0FNS0FJQUlBSkJBblJxS0FJQUlnY0VRQ0FIUVF4cUlnc3NBQUFFUUNBTFFRQTZBQUFNQWdzZ0J5Z0NCQ0VJSUFRZ0J5Z0NBQ0lMSUFGcmNTQUZTUVJBSUFzZ0FVY0VRQ0FBSUFFZ0N4Q3pBU0FMSVFFZ0ZDZ0NBQ0FMYXlBVEtBSUFJZ1J4SVFVTElBZ2dCVXNOQXlBRUlBZ2dDMnB4SWc5QmYyb2dDMGtFUUNBTlFRQWdGU2dDQUNBTGFpQWJLQUlBSUF0cklnRVF0Z0VnRFNBQklCVW9BZ0FnRHhDMkFRVWdEVUVBSUJVb0FnQWdDMm9nQ0JDMkFRc2dHaWdDQUNBSEtBSVFRUUowYWlnQ0FDSUpRU3hxSVFVZ0NVRXdhaUlJS0FJQUlnRkJ3QUJMQkg4Z0IwRXNhaUVHSUFkQk5Hb2lDaWdDQUNFRUlBZEJNR29pQXlBQk5nSUFJQVFnQVVrRVFDQUhLQUk0SWhCQkFFY2dBU0FRUzNFRVFDQVJJQkEyQWdCQnJQVUNRZGdiSUJFUVlFR3M5UUlRVmlBS0tBSUFJUVFnQXlnQ0FDRUJDeUFHS0FJQUlBRWdCRUVnYWlBRVFRSjJhaUlFU3dSL0lBRUZJQVFpQVFzUVZ5SUVSUVJBUWF6MUFoQldDeUFHSUFRMkFnQWdDaUFCTmdJQUN5QUdLQUlBUVVCcklBVW9BZ0JCUUdzZ0NDZ0NBRUZBYWhCVEdpQURCU0FIUVRCcUN5RUVJQWRCRkdvaEFRSkFBa0FnQkNnQ0FFVU5BQ0FISUE0cEF3Q25JZ00yQW1RZ0IwRXNhaUlHS0FJQVFTUnFJZ29nQXpvQUFDQUtJQU5CQ0hZNkFBRWdDaUFEUVJCMk9nQUNJQW9nQTBFWWRqb0FBeUFHS0FJQVFTaHFJZ01nRGlrREFFSWdpS2NpQmpvQUFDQURJQVpCQ0hZNkFBRWdBeUFHUVJCMk9nQUNJQU1nQmtFWWRqb0FBeUFOSUFFUXNRSWdCQ2dDQUNJQlFjQUFUUTBBSUFnb0FnQWdBVWtFUUNBSlFUUnFJZ1lvQWdBaEF5QUlJQUUyQWdBZ0F5QUJTUVJBSUFrb0FqZ2lDVUVBUnlBQklBbExjUVJBSUJnZ0NUWUNBRUdzOVFKQjJCc2dHQkJnUWF6MUFoQldJQVlvQWdBaEF5QUlLQUlBSVFFTElBVW9BZ0FnQVNBRFFTQnFJQU5CQW5acUlnTkxCSDhnQVFVZ0F5SUJDeEJYSWdORkJFQkJyUFVDRUZZTElBVWdBellDQUNBR0lBRTJBZ0FMQ3lBRktBSUFRVUJySUFjb0FpeEJRR3NnQkNnQ0FFRkFhaEJUR2d3QkN5QUZLQUlBSWdFRVFDQUJFRklnQlVFQU5nSUFDeUFJUVFBMkFnQWdDVUVBTmdJMEN5QUhLQUpvSVFRZ0J5Z0NiQ0VCSUF3b0FnQWlBeUFDUVFKMGFpZ0NBQ0lGQkVBZ0JTZ0NQQ0lEQkVBZ0F4QlNDeUFGS0FJc0lnTUVRQ0FERUZJTElBVW9BaFFpQXdSQUlBTVFVZ3NnQlJCU0lBd29BZ0FoQXdzZ0F5QUNRUUowYWtFQU5nSUFBa0FnQWtFQmFpSURJQklvQWdCSkJFQURRQ0FNS0FJQUlBTkJBblJxS0FJQUlnVkZEUUlnQlNnQ0FDQUxSdzBDSUFVb0FnUWdBVWNOQWlBRkxBQU1EUUlnRFVFQUlBUWdBUkMyQVNBYUtBSUFJQVVvQWhCQkFuUnFLQUlBSWdsQkxHb2hCeUFKUVRCcUlnZ29BZ0FpQWtIQUFFc0VmeUFGUVN4cUlRWWdCVUUwYWlJS0tBSUFJUUVnQlVFd2FpSUVJQUkyQWdBZ0FTQUNTUVJBSUFVb0FqZ2lFRUVBUnlBQ0lCQkxjUVJBSUJjZ0VEWUNBRUdzOVFKQjJCc2dGeEJnUWF6MUFoQldJQW9vQWdBaEFTQUVLQUlBSVFJTElBWW9BZ0FnQWlBQlFTQnFJQUZCQW5acUlnRkxCSDhnQWdVZ0FTSUNDeEJYSWdGRkJFQkJyUFVDRUZZTElBWWdBVFlDQUNBS0lBSTJBZ0FMSUFZb0FnQkJRR3NnQnlnQ0FFRkFheUFJS0FJQVFVQnFFRk1hSUFRRklBVkJNR29MSVFFZ0JVRVVhaUVDQWtBQ1FDQUJLQUlBUlEwQUlBVWdEaWtEQUtjaUJEWUNaQ0FGUVN4cUlnWW9BZ0JCSkdvaUNpQUVPZ0FBSUFvZ0JFRUlkam9BQVNBS0lBUkJFSFk2QUFJZ0NpQUVRUmgyT2dBRElBWW9BZ0JCS0dvaUJDQU9LUU1BUWlDSXB5SUdPZ0FBSUFRZ0JrRUlkam9BQVNBRUlBWkJFSFk2QUFJZ0JDQUdRUmgyT2dBRElBMGdBaEN4QWlBQktBSUFJZ0pCd0FCTkRRQUNRQ0FJS0FJQUlBSkpCRUFnQ1VFMGFpSUdLQUlBSVFRZ0NDQUNOZ0lBSUFRZ0FrOE5BU0FKS0FJNElnbEJBRWNnQWlBSlMzRUVRQ0FXSUFrMkFnQkJyUFVDUWRnYklCWVFZRUdzOVFJUVZpQUdLQUlBSVFRZ0NDZ0NBQ0VDQ3lBSEtBSUFJQUlnQkVFZ2FpQUVRUUoyYWlJRVN3Ui9JQUlGSUFRaUFnc1FWeUlFUlFSQVFhejFBaEJXQ3lBSElBUTJBZ0FnQmlBQ05nSUFDd3NnQnlnQ0FFRkFheUFGS0FJc1FVQnJJQUVvQWdCQlFHb1FVeG9NQVFzZ0J5Z0NBQ0lDQkVBZ0FoQlNJQWRCQURZQ0FBc2dDRUVBTmdJQUlBbEJBRFlDTkFzZ0JTZ0NhQ0VFSUFVb0Ftd2hBU0FNS0FJQUlnSWdBMEVDZEdvb0FnQWlCUVJBSUFVb0Fqd2lBZ1JBSUFJUVVnc2dCU2dDTENJQ0JFQWdBaEJTQ3lBRktBSVVJZ0lFUUNBQ0VGSUxJQVVRVWlBTUtBSUFJUUlMSUFJZ0EwRUNkR3BCQURZQ0FDQURRUUZxSWdVZ0VpZ0NBRWtFUUNBRElRSWdCU0VEREFFRklBTWhBZ3NMQ3dzZ0FDZ0NBQ0FFSUFFUVpTQWNRUUU2QUFBZ0RpQU9LUU1BSUFHdGZEY0RBQ0FVS0FJQUlnTWdEeUlCYXlBVEtBSUFJZ1J4SVFVZ0VpZ0NBQ0VQQ3dzTElBSkJBV29pQWlBUFNRMEJEQU1MQ3lBQ0lCSW9BZ0FpQUU4TkFpQU1LQUlBSVFRRFFDQUVJQUpCQW5ScUtBSUFJZ01FUUNBRFFReHFJZ01zQUFBRVFDQURRUUE2QUFBTEN5QUNRUUZxSWdJZ0FFa05BQXNNQWdzTElBQWdBU0FERUxNQklCa2dGQ2dDQURZQ0FDQVJKQVFQQ3lBWklBRTJBZ0FnRVNRRUM1b0NBUWQvSXdRaEFpTUVRUkJxSkFRZ0FFRUVhaUlFS0FJQUlnVkJBV29nQVFSL0lBRUZRYnkxQXdzaUJoQlphaUVCSUFRZ0FUWUNBQ0FCSUFCQkNHb2lCeWdDQUNJSVRRUkFJQUFvQWdBZ0JVRUNkR29nQmhCcUdpQUFRUlJxSWdBb0FnQkJBV29oQVNBQUlBRTJBZ0FnQWlRRUR3c2dBaUVESUFBb0Fnd2lBa0VBUnlBQklBSkxjUVIvSUFNZ0FqWUNBRUdzOVFKQjJCc2dBeEJnUWF6MUFoQldJQVFvQWdBaEFTQUhLQUlBQlNBSUN5RUNJQUFvQWdBZ0FTQUNRU0JxSUFKQkFuWnFJZ0pMQkg4Z0FRVWdBaUlCQzBFQ2RCQlhJZ0pGQkVCQnJQVUNFRllMSUFBZ0FqWUNBQ0FISUFFMkFnQWdBaUFGUVFKMGFpQUdFR29hSUFCQkZHb2lBQ2dDQUVFQmFpRUJJQUFnQVRZQ0FDQURKQVFMNUFzQkMzOGdBRUhvcmdGcVFRQTJBZ0FnQUVIOHJnRnFJZ0lvQWdCQkVHb2hBU0FDSUFFMkFnQWdBVUgvQVVzRVFDQUNRWkFCTmdJQUlBQkIrSzRCYWlJQklBRW9BZ0JCQVhZMkFnQUxJQUJCM0s0QmFpSUVLQUlBSVFvZ0FFRUVhaUlHRUZnaEJRSkFJQVFvQWdBaUFVSDVBRXNFZjBHQXdBSWdCVUh3L3dOeElnVkxCSDhnQmtFREVGVkJBeUVCUVFBRlFRTWhBUU5BSUFGQkFXb2hBU0FEUVFGcUlnSkJBblJCOUJScUtBSUFJQVZOQkVBZ0FpRUREQUVMQ3lBR0lBRVFWU0FEUVFKMFFmUVVhaWdDQUFzaEFpQUZJQUpyUVJBZ0FXdDJJQUZCQW5SQm5CVnFLQUlBYWdVZ0FVRS9UUVJBSUFWQmdBSkpCRUFnQmtFUUVGVU1Bd1ZCQUNFQkN3TkFJQUZCQVdvaEFrR0FnQUlnQVhZZ0JYRkZCRUFnQWlFQkRBRUxDeUFHSUFJUVZTQUJJUVVNQWd0QmdJQUNJQVZCOFA4RGNTSUZTd1IvSUFaQkFoQlZRUUloQVVFQUJVRUNJUUVEUUNBQlFRRnFJUUVnQTBFQmFpSUNRUUowUWRBVmFpZ0NBQ0FGVFFSQUlBSWhBd3dCQ3dzZ0JpQUJFRlVnQTBFQ2RFSFFGV29vQWdBTElRSWdCU0FDYTBFUUlBRnJkaUFCUVFKMFFmd1ZhaWdDQUdvTElRVUxJQVFnQkNnQ0FDQUZhaUlCSUFGQkJYWnJOZ0lBSUFZUVdDRUNJQUJCMUs0QmFpSUhLQUlBSWdGQi85RUFTd1IvUVlBZ0lBSkI4UDhEY1NJRVN3Ui9JQVpCQlJCVlFRVWhBVUVBQlVFRklRRkJBQ0VEQTBBZ0FVRUJhaUVCSUFOQkFXb2lBa0VDZEVHd0Ztb29BZ0FnQkUwRVFDQUNJUU1NQVFzTElBWWdBUkJWSUFOQkFuUkJzQlpxS0FJQUN5RUNJQVFnQW10QkVDQUJhM1loQWlBQlFRSjBRZEFXYWdVZ0FrSHcvd054SVFRZ0FVSC9EVXNFZnlBRVFZREFBQ0FFU3dSL0lBWkJCUkJWUVFVaEFVRUFCVUVGSVFGQkFDRURBMEFnQVVFQmFpRUJJQU5CQVdvaUFrRUNkRUdFRjJvb0FnQWdCRTBFUUNBQ0lRTU1BUXNMSUFZZ0FSQlZJQU5CQW5SQmhCZHFLQUlBQ3lJQ2EwRVFJQUZyZGlFQ0lBRkJBblJCcEJkcUJTQUVRWUNBQWlBRVN3Ui9JQVpCQkJCVlFRUWhBVUVBQlVFRUlRRkJBQ0VEQTBBZ0FVRUJhaUVCSUFOQkFXb2lBa0VDZEVIWUYyb29BZ0FnQkUwRVFDQUNJUU1NQVFzTElBWWdBUkJWSUFOQkFuUkIyQmRxS0FJQUN5SUNhMEVRSUFGcmRpRUNJQUZCQW5SQi9CZHFDd3NoQVNBSElBY29BZ0FnQVNnQ0FDQUNhaUlKYWlJQklBRkJDSFpyTmdJQUlBQkJ5cW9CYWlBQVFjcWdBV29nQ1VIL0FYRkJBWFJxSWdzdUFRQWlCRUgvL3dOeElnRkIvd0Z4YWlJRExBQUFJUUlnQXlBQ1FRRnFPZ0FBSUFSQkFXcEJFSFJCRUhVaUEwSC9BWEZGQkVBZ0FFSEtvQUZxSVFnZ0FFSEtxZ0ZxSVFjRFFFRUFJQWdnQnhDZkFTQUFRY3FxQVdvZ0N5NEJBQ0lFUWYvL0EzRWlBVUgvQVhGcUlnTXNBQUFoQWlBRElBSkJBV282QUFBZ0JFRUJha0VRZEVFUWRTSURRZjhCY1VVTkFBc0xJQUJCeXFBQmFpQUpRUUYwYWlBQVFjcWdBV29nQWtIL0FYRkJBWFJxSWdJdUFRQTdBUUFnQWlBQlFRRnFPd0VBSUFZUVdFRUlkaUFEUVlEK0EzRnlJZ1JCQVhZaENDQUdRUWNRVlNBQVFlQ3VBV29pQVNnQ0FDRUhBa0FDUUFKQUFrQUNRQ0FGRGdVQkFBSUNBQUlMREFNTElBZ2dBRUdBcndGcUtBSUFTdzBCSUFFZ0IwRUJhaUlCSUFGQkNIWnJOZ0lBREFJTEN5QUhCRUFnQVNBSFFYOXFOZ0lBQ3dzZ0NDQUFRWUN2QVdvaUF5Z0NBRWtFZjBFREJVRUVDeUFGYWlJQ1FRaHFJUUVnQkVHQ0JFOEVRQ0FDSVFFTElBTUNmd0pBSUFkQnNBRkxEUUFnQ2tIQUFFa2dBRUhRcmdGcUtBSUFRZi9UQUV0eERRQkJnY0FBREFFTFFZRCtBUXNpQWpZQ0FDQUFRZFFBYWlJREtBSUFJUUlnQXlBQ1FRRnFOZ0lBSUFCQnhBQnFJQUpCQW5ScUlBZzJBZ0FnQXlBREtBSUFRUU54TmdJQUlBQWdBVFlDV0NBQUlBZzJBbHdnQUVHd21BRnFJZ0lnQWlrREFDQUJyWDAzQXdBZ0FVVUVRQThMSUFCQnBKWUJhaUVFSUFCQjRBQnFJZ2NvQWdBaEF5QUFRZEROQTJvaUJTZ0NBQ0VDQTBBZ0JDZ0NBQ0lBSUFOcUlBQWdBeUFJYXlBQ2NXb3NBQUE2QUFBZ0J5QUhLQUlBUVFGcUlBVW9BZ0FpQW5FaUFEWUNBQ0FCUVg5cUlnRUVRQ0FBSVFNTUFRc0xDOFFGQVF4L0l3UWhDeU1FUVlBQ2FpUUVJQXNoQ2lBQVFjZ01haWdDQUNFR0lBQkIxQXhxSWd3b0FnQWlEU2dDQkNFT0FrQUNRQ0FCQkVBZ0NpRUJEQUVGSUFwQkJHb2hBU0FLSUEwMkFnQWdCaWdDREEwQklBWWhBd3NNQVFzZ0JpZ0NEQ0VHSUFJRVFDQUdJUU1nQWlFSUlBRWhCRUVJSVFrRklBRWhCeUFHSVFVTEEwQUNRQ0FKUVFoR0JFQWdDQ2dDQkNJQklBNUhCRUFnQVNFRElBUWhBUXdDQ3lBRVFRUnFJUUVnQkNBSU5nSUFJQU1vQWd3aUJVVU5BU0FCSVFjTElBVXVBUUJCQVVZRVFDQUZJUU1nQlVFRWFpRUlJQWNoQkVFSUlRa01BZ3NnQlNnQ0NDSUlMQUFBSUF3b0FnQXNBQUFpQVVZRVFDQUZJUU1nQnlFRVFRZ2hDUXdDQ3dOQUlBaEJDR29pQ0N3QUFDQUJSZ1JBSUFVaEF5QUhJUVJCQ0NFSkRBTUZEQUVMQUFzQUN3c2dBU0FLUmdSQUlBc2tCQ0FERHdzTElBNHNBQUFoQ1NBRExnRUFJZ1ZCQVVZRWZ5QURMQUFGQlNBQVFlQ1hBV29vQWdBZ0EwOEVRQ0FMSkFSQkFBOExJQU1vQWdnaUFpd0FBQ0FKUndSQUEwQWdBa0VJYWlJQ0xBQUFJQWxIRFFBTEN5QUNMUUFCSWdSQmYyb2lCMEVCZENJQ0lBTXZBUVFnQlVILy93TnhhMEVCSUFScmFpSUVTd1IvSUFKQmYyb2dCRUVEYkdvZ0JFRUJkRzRGSUFkQkJXd2dCRXNMSWdKQkFXcEIvd0Z4Q3lFQ0lBNUJBV29oQmlBQVFaQ1ZBV29oQ0NBQVFjU1dBV29oRENBQVFjQ1dBV29oQlNBQVFjaVdBV29oRFNBQ1FmOEJjVUVJZENBSlFmOEJjWEloQkFKQUEwQWdBVUY4YWlJQ0tBSUFJUWNDUUFKQUlBd29BZ0FpQUNBRktBSUFSZ1JBSUEwb0FnQWlBQVJBSUEwZ0FDZ0NBRFlDQUFVZ0NFRUFFS0FCSVFBTElBQU5BUVVnRENBQVFYQnFJZ0EyQWdBTUFRc01BUXNnQUNFQklBQkJBVHNCQUNBQUlBUTJBZ1FnQUNBR05nSUlJQUFnQXpZQ0RDQUhJQUEyQWdRTElBQkZCRUJCQUNFQURBSUxJQUlnQ2tjRVFDQUFJUU1nQWlFQkRBRUxDd3NnQ3lRRUlBQUwrZ0lCQW44Z0F5QUFRUWhxSWdVb0FnQkJtSUFCYWlBRUVHOGFJQVVvQWdCQm1JQUJhaUlBS0FJQUJFQWdBQkRQQVNnQ0FFRXZSd1JBSUFNZ0JCRElBUXNMSUFVb0FnQWlBRUdReXdOcUxBQUFCRUFnQXlBQlFlUzhBMm9RbXdFZ0JCQjRHaUFEUVFBZ0JCQzZBeUFESUFRUXlBRWdCU2dDQUNFQUN3SkFJQUJCcUlBQ2FoQlpJZ1lFUUNBQ0lBWWdBaEJaSWdGSkJIOGdCZ1VnQVF0QkFuUnFJUUlEUUFKQUFrQUNRQUpBQWtBZ0FpZ0NBQTR3QUFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQkFnc01Bd3NNQVFzTUJBc2dBa0VFYWlFQ0RBRUxDeUFEUVFBMkFnQVBDd3NDUUFKQUlBQkJ5TXNFYWlnQ0FDSUJRZGdBUmlBQVFlQ0VBMm9vQWdCQkJFWnhCRUJCQUNFQkJTQUJRY1VBUmdSQVFRQWhBUXdDQlVFQUlRRUxDeUFGS0FJQVFlQ0VBMm9vQWdCQkFVWU5BQ0FESUFJZ0JCQjRHZ3dCQ3lBRElBSVFtd0VnQkJCNEdnc2dBeWdDQUJDVEFTRUFEd3Y0QVFFRGZ5TUVJUU1qQkVId0Ztb2tCQ0FEUVNScUlRUWdBeUFBS0FJQUlnVTJBZ0FDUUFKQUFrQUNRQ0FGUVFGckRnTUFBUUlEQ3lBRElBQW9BZ1EyQWdRTUFnc2dBeUFBS0FJRVFYOXpOZ0lFREFFTElBUWdBQ2dDQ0JDbUJDQUVJQU5CQkdvUXFRUUxJQUlFUUNBRElBSVF2d0lMSUFNb0FnQWlBa1VFUUNBREpBUkJBUThMSUFFb0FnQWlBRVVFUUNBREpBUkJBUThMSUFKQkFVWWdBRUVCUm5GRkJFQWdBa0VDUmlBQVFRSkdjVVVFUUNBQ1FRTkdJQUJCQTBaeFJRUkFJQU1rQkVFQUR3c2dBMEVFYWlBQlFRUnFRU0FRYTBVaEFDQURKQVFnQUE4TEN5QURLQUlFSUFFb0FnUkdJUUFnQXlRRUlBQUxjZ0VCZnlBQUtBSUFJZ05CQVVZRVFDQUFRUVJxSWdNZ0F5Z0NBRUgvL3dOeElBRWdBaERRQkVILy93TnhOZ0lBSUFBb0FnQWhBd3NnQTBFQ1JnUkFJQUJCQkdvaUF5QURLQUlBSUFFZ0FoQ1pBVFlDQUNBQUtBSUFJUU1MSUFOQkEwY0VRQThMSUFBb0FnZ2dBU0FDRUtzRUM3NEZBUUovSUFCQkNHb2lCQ2dDQUNJQ1JRUkFRUUJCekJZUVh5SUNJZ05yUVQ5eElBTnFJUU1nQWlBRE5nTHdBU0FDSUFOQmdBRnFOZ0wwQVNBQ0lBTkJvQUZxTmdMNEFTQUNJQU5CcUFGcU5nTDhBU0FDUVFBZ0FrR0lBbW9pQTJ0QlAzRWdBMm9pQXpZQytBTWdBaUFEUVlBQmFqWUMvQU1nQWlBRFFhQUJhallDZ0FRZ0FpQURRYWdCYWpZQ2hBUWdBa0VBSUFKQmtBUnFJZ05yUVQ5eElBTnFJZ00yQW9BR0lBSWdBMEdBQVdvMkFvUUdJQUlnQTBHZ0FXbzJBb2dHSUFJZ0EwR29BV28yQW93R0lBSkJpQWhxUVFBZ0FrR1lCbW9pQTJ0QlAzRWdBMm9pQXpZQ0FDQUNRWXdJYWlBRFFZQUJhallDQUNBQ1FaQUlhaUFEUWFBQmFqWUNBQ0FDUVpRSWFpQURRYWdCYWpZQ0FDQUNRWkFLYWtFQUlBSkJvQWhxSWdOclFUOXhJQU5xSWdNMkFnQWdBa0dVQ21vZ0EwR0FBV28yQWdBZ0FrR1lDbW9nQTBHZ0FXbzJBZ0FnQWtHY0Ntb2dBMEdvQVdvMkFnQWdBa0dZREdwQkFDQUNRYWdLYWlJRGEwRS9jU0FEYWlJRE5nSUFJQUpCbkF4cUlBTkJnQUZxTmdJQUlBSkJvQXhxSUFOQm9BRnFOZ0lBSUFKQnBBeHFJQU5CcUFGcU5nSUFJQUpCb0E1cVFRQWdBa0d3REdvaUEydEJQM0VnQTJvaUF6WUNBQ0FDUWFRT2FpQURRWUFCYWpZQ0FDQUNRYWdPYWlBRFFhQUJhallDQUNBQ1Fhd09haUFEUWFnQmFqWUNBQ0FDUWFnUWFrRUFJQUpCdUE1cUlnTnJRVDl4SUFOcUlnTTJBZ0FnQWtHc0VHb2dBMEdBQVdvMkFnQWdBa0d3RUdvZ0EwR2dBV28yQWdBZ0FrRzBFR29nQTBHb0FXbzJBZ0FnQWtHd0VtcEJBQ0FDUWNBUWFpSURhMEUvY1NBRGFpSUROZ0lBSUFKQnRCSnFJQU5CZ0FGcU5nSUFJQUpCdUJKcUlBTkJvQUZxTmdJQUlBSkJ2QkpxSUFOQnFBRnFOZ0lBSUFRZ0FqWUNBQXNnQUNBQk5nSUFBa0FDUUFKQUFrQWdBVUVCYXc0REFBRUNBd3NnQUVFQU5nSUVEd3NnQUVGL05nSUVEd3NnQWhDc0JBc0wvZ0lCQlg4akJDRUdJd1JCSUdva0JDQUdRUkJxSWdNZ0FDZ0NHQ0lFUVJoMk9nQUFJQU1nQkVFUWRqb0FBU0FESUFSQkNIWTZBQUlnQXlBRU9nQURJQU1nQUVFVWFpSUVLQUlBSWdWQkdIWTZBQVFnQXlBRlFSQjJPZ0FGSUFNZ0JVRUlkam9BQmlBRElBVTZBQWNnQmtFRWFpSUhRUWcyQWdBZ0JrRUlhaUlGUVlCL09nQUFJQUFnQlVFQklBSVFvd0VnQkNnQ0FFSDRBM0ZCd0FOSEJFQURRQ0FGUVFBNkFBQWdBQ0FGUVFFZ0FoQ2pBU0FFS0FJQVFmZ0RjVUhBQTBjTkFBc0xJQUFnQTBFSUlBSVFvd0VnQVNBQUtBSUFOZ0lBSUFFZ0FDZ0NCRFlDQkNBQklBQW9BZ2cyQWdnZ0FTQUFLQUlNTmdJTUlBRWdBQ2dDRURZQ0VDQUhRUVUyQWdBZ0IwRUVFRnNnQmtFRUVGc2dBRUVjYWtIQUFCQmJJQUJCRkJCYklBUkJDQkJiSUFOQkNCQmJJQUpGQkVBZ0JpUUVEd3NnQUVIY0FHb2lBRUlBTndJQUlBQkNBRGNDQ0NBQVFnQTNBaEFnQUVJQU53SVlJQUJDQURjQ0lDQUFRZ0EzQWlnZ0FFSUFOd0l3SUFCQ0FEY0NPQ0FHSkFRTGlBRUJBbjhnQVNnQ0FFVUVRQ0FBUVFCQmdRUVFWQm9QQ3lBQVFRRTZBSUFFSUFBZ0FTQUJFRmxCQVdvaUFVR0FBVWtFZnlBQkJVR0FBUXRCQW5RUVV4b2pCQ0VCSXdSQkVHb2tCRUVVSUFFUUpTRUNJQUVrQkNBQ1Fjc0FhaUVDUVFBaEFRTkFJQUFnQVdvaUF5QUNJQUZxSUFNdEFBQnpPZ0FBSUFGQkFXb2lBVUdBQkVjTkFBc0xEQUFnQUVFQVFZSUVFRlFhQzlFRkFnUi9BWDRDUUNBQVFlZ3hhaUlGTEFBQVJRUkFJQUJCc0RKcUlBQW9BZ0FpQXlBREtBSUFLQUlVUVFkeFFZWUJhaEVBQURjREFDQUFRYmd5YWtFQU9nQUFJQUFvQWdBaUF5QURLQUlBS0FJVVFRZHhRWVlCYWhFQUFDRUdJQUFvQWdBaUFpZ0NBQ2dDRUNFRVFRQWtCU0FFSUFJZ0FhY2dBVUlnaUtkQkFCQlFJd1VoQWtFQUpBVUNRQ0FDUVFGeFJRUkFJQUFvQWdBaEFrRUFKQVZCQmlBQ0VBVWhBaU1GSVFSQkFDUUZJQVJCQVhGRkJFQWdBZ1JBSUFBb0FnQWlBa0hNOHdCcUtBSUFRUU5HQkVCQkFDUUZRUVlnQWtHUXJnSnFRZGdNRUFZaEFpTUZJUVJCQUNRRklBUkJBWEVOQkNBQ1JRUkFJQUJCOERGcUlBQW9BZ0FpQWtHSXZBTnFLUU1BTndNQUlBSW9BZ0FvQWhRaEJFRUFKQVVnQkNBQ0VFNnRJd2V0UWlDR2hDRUJJd1VoQWtFQUpBVWdBa0VCY1EwRklBQkIrREZxSUFFM0F3QWdBRUdBTW1vZ0FDZ0NBRUhBN2dKcUtRTUFOd01BSUFWQkFUb0FBQ0FES0FJQUtBSVFJUUpCQUNRRklBSWdBeUFHcHlBR1FpQ0lwMEVBRUZBakJTRUNRUUFrQlNBQ1FRRnhSUTBIUVFBUUdCQmFDd3NMSUFNb0FnQW9BaEFoQWtFQUpBVWdBaUFESUFhbklBWkNJSWluUVFBUVVDTUZJUUpCQUNRRklBSkJBWEVFUUVFQUVCZ1FXZ1VQQ3dzTEN4QVhJUUlnQXlnQ0FDZ0NFQ0VGUVFBa0JTQUZJQU1nQnFjZ0JrSWdpS2RCQUJCUUl3VWhBMEVBSkFVZ0EwRUJjUVJBUVFBUUdCQmFCU0FDRUI0TEN3c2dBQ2dDQUNJRFFmdnVBbW9zQUFBRVFDQURRYXp6QUdvb0FnQWlBa0dveEFKcUxBQUFCRUFnQUVFWWFrRUFRUVVnQWtHb3dBSnFJQU5CZ2U4Q2FpQURRWkh2QW1vZ0EwSE03d0pxS0FJQUlBTkJxKzhDYWlBRFFhTHZBbW9RdVFFYUJROExDeUFBUVlneWFpSURRZ0EzQXdBZ0EwSUFOd01JSUFCQm1ESnFJZ01vQWdBaUFnUkFJQUlRVWlBRFFRQTJBZ0FMSUFCQm5ESnFRUUEyQWdBZ0FFR2dNbXBCQURZQ0FDQUFRYWd5YWtJQU53TUFJQUFRNGdFYUM1Y0dBUWQvSXdRaEJ5TUVRUkJxSkFRZ0FFRVVhaUlDSUFGQk9Hb2lBeWtDQURjQ0FDQUNJQU1wQWdnM0FnZ2dBaUFES1FJUU53SVFJQUlnQXlnQ0dEWUNHQ0FCUVJocUlRWUNRQUpBSUFGQkhHb2lCQ2dDQUNJQ1FZREFBRWtFUUNBQ0JFQU1BZ1ZCQUNFQ0N3VkJnTUFBSVFJTUFRc01BUXNnQUNnQ0VFR0FnQTlxSUFZb0FnQWdBaEJUR2dzZ0FTZ0NMQ0lEUVlEQUFDQUNheUlGU1FSL0lBTUZJQVVpQXdzRVFDQUFLQUlRUVlDQUQyb2dBbW9nQVNnQ0tDQURFRk1hQ3lBQVFZQ0FFRFlDTUNBQVFRQTJBalFnQVNnQ0VDSUNSUVJBSUFFb0FnQWhBZ3NnQUVFUWFpRURBa0FnQVNnQ0ZFRUFTZ1JBQTBBQ1FBSkFBa0FDUUNBQ0tBSUFRUlpyRGhNQUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQkFnc01CUXNNQVFzZ0FrRW9haUVDREFFTEN5QUFJQUlvQWd3UXRRUUxDeUFES0FJQUlnQkJvWUFQYWkwQUFFRUlkQ0FBUWFDQUQyb3RBQUJ5SUFCQm9vQVBhaTBBQUVFUWRFR0FnQXh4Y2lFRklBQkJuWUFQYWkwQUFFRUlkQ0FBUVp5QUQyb3RBQUJ5SUFCQm5vQVBhaTBBQUVFUWRFR0FnQXh4Y2lJQ0lBVnFRZi8vRDBzaUNBUkFRUUFoQWdzZ0FTQUFJQWdFZjBFQUJTQUZDMm8yQWxRZ0FTQUNOZ0pZSUFZb0FnQWlBZ1JBSUFJUVVpQUdRUUEyQWdBZ0F5Z0NBQ0VBQ3lBRVFRQTJBZ0FnQVVFZ2FpSUZRUUEyQWdBQ1FBSkFJQUJCc1lBUGFpMEFBRUVJZENBQVFiQ0FEMm90QUFCeUlBQkJzb0FQYWkwQUFFRVFkSElnQUVHemdBOXFMUUFBUVJoMGNpSUNRY0EvU1FSQUlBSUVRQ0FFSUFKQlFHc2lBallDQUNBQ0JFQWdBaUVBREFNRklBQWhBVUVBSVFKQkFDRUFDd1VnQnlRRUR3c0ZJQVJCZ01BQU5nSUFRWURBQUNFQURBRUxEQUVMSUFFb0FpUWlBVUVBUnlBQUlBRkxjUVIvSUFjZ0FUWUNBRUdzOVFKQjJCc2dCeEJnUWF6MUFoQldJQVFvQWdBaEFTQUdLQUlBSVFRZ0JTZ0NBQVVnQUNFQlFRQWhCRUVBQ3lFQ0lBUWdBU0FDUVNCcUlBSkJBblpxSWdKTEJIOGdBUVVnQWlJQkN4QlhJZ0pGQkVCQnJQVUNFRllMSUFZZ0FqWUNBQ0FGSUFFMkFnQWdBeWdDQUNFQkN5QUNJQUZCZ0lBUGFpQUFFRk1hSUFja0JBc1hBUUYvSUFBb0FoQWlBUVJBSUFFUVVnc2dBQkNZQVF0VEFRRi9Jd1FoQXlNRVFkQUFhaVFFSUFOQkFEWUNSQ0FEUVFrMkFrZ2dBeUFCTmdJQUlBTkJRR3RCQWpZQ0FDQURJQUkyQWdRZ0FFRUpOZ0lBSUFCQkJHb2lBQ0FBS0FJQVFRRnFOZ0lBSUFNa0JBdHdBUUYvSXdRaEFpTUVRZEFBYWlRRUlBQXNBQXRGQkVBZ0FrRUFOZ0pFSUFKQkN6WUNTQ0FDUVVCclFRRTJBZ0FnQWlBQk5nSUFDeUFBS0FJQVFRSkpCRUFnQUVFQ05nSUFDeUFBUVFScUlnQWdBQ2dDQUVFQmFqWUNBRUVFRUJRaUFFRUNOZ0lBSUFCQmdBaEJBQkFiQzJjQkEzOGdBQ2dDQ0NJQkJFQURRQ0FCS0FJUUlRSWdBU2dDQUNJREJFQWdBeEJTQ3lBQkVGSWdBZ1JBSUFJaEFRd0JDd3NMSUFBb0FoQWlBUVJBSUFFUVVnc2dBRUdZTW1vb0FnQWlBVVVFUUNBQVFSaHFFSTRCRHdzZ0FSQlNJQUJCR0dvUWpnRUxud0VBSUFCQnFNQUNhaEN2QWlBQVFRQkJ3TXNFRUZRYUlBQkJnSUNBRURZQ0RDQUFRYmlFQTJwQkFEWUNBQ0FBUWJ5RUEycEJBellDQUNBQVFiQ0VBMnBCQURZQ0FDQUFRWXlGQTJwQkFEWUNBQ0FBUVpUTEEycEJCRFlDQUNBQVFiaUpBMnBDLy8vLy8vZi8vLy8vQURjREFDQUFRY0NKQTJwQy8vLy8vL2YvLy8vL0FEY0RBQ0FBUWNDRUEycEJBallDQUNBQVFaQ0FBV3BCQVRZQ0FBdlpBd0VGZnlBQVFaQUJhaUlESWdGQkFEWUNDQ0FCUVFBMkFnQkJBQ1FGUVNFZ0FFR2NBV29pQkJBTUl3VWhBVUVBSkFVZ0FVRUJjUVJBRUJjaEFTQURFSTBCSUFFUUhndEJBQ1FGUVNFZ0FFR29BV29pQlJBTUl3VWhBVUVBSkFVZ0FVRUJjUVJBRUJjaEFBVkJBQ1FGUVFSQjBERVFCU0VDSXdVaEFVRUFKQVVDUUFKQUlBRkJBWEVOQUVFQUpBVkJHQ0FDRUF3akJTRUJRUUFrQlNBQlFRRnhCRUFRRnlFQUlBSVFVZ3dDQ3lBQVFVQnJJQUkyQWdCQkFDUUZRUVJCMERFUUJTRUNJd1VoQVVFQUpBVWdBVUVCY1EwQVFRQWtCVUVZSUFJUURDTUZJUUZCQUNRRklBRkJBWEVFUUJBWElRQWdBaEJTQlNBQUlBSTJBa1FnQUVFQU9nQUFJQUJCQURvQURDQUFRZ0EzQXlBZ0FFRUJPZ0FvSUFCQkFEb0FLU0FBUVFBNkFDb2dBRUVBT2dCUUlBQkJBRG9BVVNBQVFRQTZBRklnQUVFQU5nSXNJQUJCQURZQ01DQUFRUUEyQWhnZ0FFRUFOZ0kwSUFCQkFEb0F0QUVnQUVFQU9nQzFBU0FBUWVBQWFpSUJRZ0EzQXdBZ0FVSUFOd01JSUFGQ0FEY0RFQ0FCUWdBM0F4Z2dBRUYvTmdKSUlBQkJBRFlDT0NBQVFRQTJBandnQUVFQU5nSk1JQUJCZ0FGcUlnQkNBRGNEQUNBQVFnQTNBd2dQQ3d3QkN4QVhJUUFMSUFVUWpRRUxJQVFRalFFZ0F4Q05BU0FBRUI0TEtRRUJmeUFBS0FJVUlnRkJCVWtFUUVGL0R3dEJmeUFBS0FJQVFRUnFJQUZCZkdvUW1RRkJmM01MMWdnQ0JIOEJmaU1FSVFZakJFR0FFR29rQkNBQVFhakxCR29pQ1VFQU5nSUFBa0FDUUFKQUFrQUNRQUpBSUFCQnFNNEthaWdDQUE0REFBRUFBUXNNQVFzZ0FVVUVRQ0FBUWZTTENXb3NBQUJGRFFFTElBQkJwTXNFYWlBQk5nSUFJQUJCbUlBQmFpSUhRUUEyQWdBZ0FFR2tpd1JxSWdoQkFEWUNBQUpBSUFJRVFFRUFKQVZCRFNBR0lBSkIvZzhRQnhvakJTRUNRUUFrQlNBQ1FRRnhSUVJBUVFBa0JVRVJJQVlnQjBHQUVCQUhHaU1GSVFKQkFDUUZJQUpCQVhGRkJFQkJBQ1FGUVFZZ0IwR0FFQkFOSXdVaEFrRUFKQVVnQWtFQmNVVU5Bd3NMREFVTEN3SkFJQU1FUUVFQUpBVkJEU0FHSUFOQi9nOFFCeG9qQlNFQ1FRQWtCU0FDUVFGeFJRUkFRUUFrQlVFUklBWWdDRUdBRUJBSEdpTUZJUUpCQUNRRklBSkJBWEZGRFFJTERBVUxDeUFFQkVCQkFDUUZRUThnQnlBRVFZQVFFQWNhSXdVaEFrRUFKQVVnQWtFQmNRMEVRUUFrQlVFR0lBZEJnQkFRRFNNRklRSkJBQ1FGSUFKQkFYRU5CQXNnQlFSQVFRQWtCVUVRSUFnZ0JVR0FFQkFIR2lNRklRSkJBQ1FGSUFKQkFYRU5CQXRCQUNRRlFRVWdBRUhJeXdScUlBRkJBa1lFZjBISURBVkIwQXdMRUFZYUl3VWhBa0VBSkFVZ0FrRUJjUTBESUFCQnlZa0RhaUFCUVFKSE9nQUFJQVpCQURvQUFDQUFRYXpPQ21vaUFpZ0NBQ0VEUVFBa0JVRURJQUJCd013SmFpSUVJQUJCMk04RmFpSUJJQU1nQmhBSUdpTUZJUU5CQUNRRkFrQWdBMEVCY1VVRVFDQUFRZHpQQldvaEF5QUFRYVREQm1vaEJRTkFBa0FnQXlnQ0FFVU5BRUVBSkFWQkJpQUJFQVVoQnlNRklRaEJBQ1FGSUFoQkFYRU5BeUFIUlEwQUlBVW9BZ0JCQTBjTkFDQUNLQUlBSVFkQkFDUUZRUU1nQkNBQklBY2dCaEFJR2lNRklRZEJBQ1FGSUFkQkFYRU5BMEVBSkFWQkZTQUJFQXdqQlNFSFFRQWtCU0FIUVFGeFJRMEJEQU1MQ3lBQVFlQ0xDV29wQXdBaENrRUFKQVZCQVNBQklBcW5JQXBDSUlpblFRQVFVQ01GSVFCQkFDUUZJQUJCQVhGRkRRUUxDd3dEQ3lBQVFkalBCV29oQVNBQVFmV0xDV29zQUFBRVFDQUFRYVREQm1vb0FnQkJBa1lFUUNBQVFaRzRCMm9zQUFBRVFFRUFKQVZCQWlBQlFRQkJBRUhNQUJBSUlRSWpCU0VEUVFBa0JTQURRUUZ4RFFVZ0FrVUVRQ0FHSkFSQkR3OExJQUJCNElzSmFpa0RBQ0VLUVFBa0JVRUJJQUVnQ3FjZ0NrSWdpS2RCQUJCUUl3VWhBRUVBSkFVZ0FFRUJjUTBGSUFZa0JFRUFEd3NMQzBFQUpBVkJGU0FCRUF3akJTRUFRUUFrQlNBQVFRRnhEUUlNQVFBTEFBQUxJQWtvQWdBaEFDQUdKQVFnQUE4TFFkZ0tRWUFJRUJraEFDTUhJUUVnQVVIWUNoQkVSZ1JBSUFBUUZSb1FGaUFHSkFSQkN3OExJQUZCZ0FnUVJFY0VRQ0FBRUI0TElBQVFGU0VCQWtBZ0NTZ0NBQ0lBUlFSQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUlBRW9BZ0FPREFjSUFBRUlBZ01JQlFRSUJnZ0xRUkloQUF3SkMwRU1JUUFNQ0F0QkV5RUFEQWNMUVE4aEFBd0dDMEVRSVFBTUJRdEJDeUVBREFRTFFSZ2hBQXdEQzBFQUlRQU1BZ3RCRlNFQUN3c1FGaUFHSkFRZ0FBdGFBUUovSUFBb0FoUWlBaUFCVFFSQVFRQVBDeUFBS0FJQUlRTWdBU0VBQWtBQ1FBTkFJQU1nQUdvc0FBQkJmMHdFUUNBQVFRRnFJZ0FnQWtrRVFBd0NCVUVBSVFBTUF3c0FDd3NNQVF0QkFBOExRUUVnQVdzZ0FHb0xNUUVDZnlBQVFSaHFJZ0lvQWdBaUFTQUFLQUlVVHdSQVFRQVBDeUFDSUFGQkFXbzJBZ0FnQUNnQ0FDQUJhaXdBQUF1UUFnRUVmeUFBS0FJRUJFQVBDd05BSUFSQkFYWWlBVUdnaHVMdGZuTWhBaUFFUVFGeEJIOGdBZ1VnQVNJQ0MwRUJkaUlEUWFDRzR1MStjeUVCSUFKQkFYRUVmeUFCQlNBRElnRUxRUUYySWdOQm9JYmk3WDV6SVFJZ0FVRUJjUVIvSUFJRklBTWlBZ3RCQVhZaUEwR2dodUx0Zm5NaEFTQUNRUUZ4Qkg4Z0FRVWdBeUlCQzBFQmRpSURRYUNHNHUxK2N5RUNJQUZCQVhFRWZ5QUNCU0FESWdJTFFRRjJJZ05Cb0liaTdYNXpJUUVnQWtFQmNRUi9JQUVGSUFNaUFRdEJBWFlpQTBHZ2h1THRmbk1oQWlBQlFRRnhCSDhnQWdVZ0F5SUNDMEVCZGlJRFFhQ0c0dTErY3lFQklBQWdCRUVDZEdvZ0FrRUJjUVIvSUFFRklBTUxOZ0lBSUFSQkFXb2lCRUdBQWtjTkFBc0wzUU1CQlg5QkFDUUZRUjhnQUJBTUl3VWhBVUVBSkFVZ0FVRUJjUVJBRUJjaUFSQWVDMEVBSkFWQkh5QUFRYkFFYWlJQkVBd2pCU0VDUVFBa0JTQUNRUUZ4QkVBZ0FTRURCVUVBSkFWQkh5QUFRZUFJYWlJQkVBd2pCU0VDUVFBa0JTQUNRUUZ4QkVBZ0FTRURCVUVBSkFWQkh5QUFRWkFOYWlJQkVBd2pCU0VDUVFBa0JTQUNRUUZ4QkVBZ0FTRURCVUVBSkFWQkh5QUFRY1FSYWlJRUVBd2pCU0VCUVFBa0JRSkFJQUZCQVhFRVFCQVhJUUVGUVFBa0JVRWZJQUJCdkJacUlnRVFEQ01GSVFKQkFDUUZJQUpCQVhGRkJFQkJBQ1FGUVI4Z0FFRzBHMm9pQVJBTUl3VWhBa0VBSkFVZ0FrRUJjVVVFUUVFQUpBVkJIeUFBUWF3Z2FpSUJFQXdqQlNFQ1FRQWtCU0FDUVFGeFJRUkFRUUFrQlVFZ0lBQkJyQ1ZxRUF3akJTRUJRUUFrQlNBQlFRRnhCRUFRRnlFQkl3Y2hBaUFBUWF3Z2FoQmNJQUJCdEJ0cUVGd2dBRUc4Rm1vUVhDQUFRY1FSYWhCY0RBVUZJQUJCdENkcVFRQkJnQWdRVkJvZ0FFRUFRYXdsRUZRYUR3c0FDd3NMRUJjaEFpTUhJUVVEUUNBQlFZaDdhaUlCRUZ3Z0FTQUVSdzBBSUFJaEFRc0xDeUFBUVpBTmFoQmNJQUJCNEFocUVGd2dBRUd3QkdvUVhDQUFFRndnQVJBZUN3c0xFQmNoQVFOQUlBTkIwSHRxSWdNUVhDQURJQUJIRFFBTElBRVFIZ3ZmQ2dJRGZ3RitRUUFrQlVFRElBQkIyTThGYWlJQ1FRSVFCaUVESXdVaEJFRUFKQVVDUUNBRVFRRnhSUVJBSUFCQnJNNEthaUFETmdJQUlBTkJBVWdFUUNBQVFmV0xDV29zQUFBRVFDQUFRYVREQm1vb0FnQkJCVVlFUUNBQVFhVDlCMm9zQUFBRVFFRUFKQVZCQWlBQ1FRQkJBRUhNQUJBSUlRTWpCU0VFUVFBa0JTQUVRUUZ4RFFVZ0EwVUVRRUVQRHdzZ0FFSGdpd2xxS1FNQUlRVkJBQ1FGUVFFZ0FpQUZweUFGUWlDSXAwRUFFRkFqQlNFQ1FRQWtCU0FDUVFGeERRVkJBQ1FGUVFRZ0FDQUJFQVloQVNNRklRSkJBQ1FGSUFKQkFYRU5CU0FCRHdzTEN5QUFRWVNNQ1dvc0FBQUVRRUVNRHdzZ0FFR0ZqQWxxTEFBQUJIOUJHQVZCQ2dzUEN5QUFRYWpPQ21vb0FnQkZCRUFnQUVHUXVBZHFMQUFBQkVCQkFDUUZRUUVnQUVFQVFRQkJBRUVBUVFBUUNTRUNJd1VoQTBFQUpBVWdBMEVCY1EwRElBSUVRQ0FDRHd0QkFDUUZRUVFnQUNBQkVBWWhBU01GSVFKQkFDUUZJQUpCQVhFTkF5QUJEd3NMUVFBa0JVRVBJQUZCZ0FocUlnSWdBRUh3endWcVFZQUlFQWNhSXdVaEEwRUFKQVVnQTBFQmNVVUVRRUVBSkFWQkRpQUNJQUZCZ0FnUUJ4b2pCU0VDUVFBa0JTQUNRUUZ4UlFSQVFRQWtCVUVQSUFGQmdEQnFJZ0lnQUVHbzl3WnFRWUFJRUFjYUl3VWhBMEVBSkFVZ0EwRUJjVVVFUUVFQUpBVkJEaUFDSUFGQmdDaHFRWUFJRUFjYUl3VWhBa0VBSkFVZ0FrRUJjVVVFUUNBQlFZRFFBR29pQTBFQU5nQUFJQU1nQUVHUXVBZHFMUUFBSWdJMkFBQWdBRUdSdUFkcUxBQUFCRUFnQXlBQ1FRSnlJZ0kyQUFBTElBQkJrN2dIYWl3QUFBUkFJQU1nQWtFRWNpSUNOZ0FBQ3lBQVFlaTRCMm9zQUFBRVFDQURJQUpCRUhJaUFqWUFBQXNnQUVIcHVBZHFMQUFBQkVBZ0F5QUNRU0J5TmdBQUN5QUJRWVRRQUdvZ0FFSFF0d2RxS1FNQUlnVStBQUFnQVVHSTBBQnFJQVZDSUlnK0FBQWdBVUdNMEFCcUlBQkIyTGNIYWlrREFDSUZQZ0FBSUFGQmtOQUFhaUFGUWlDSVBnQUFJQUZCbE5BQWFpQUFRZlM0QjJvb0FnQUVmMEVEQlVFQ0N6WUFBQ0FBUWZDTENXb29BZ0JCQTBZaEFpQUFRYUgzQm1vc0FBQWlBMEgvQVhFaEJDQURCSDlCeUFFRlFUSUxJUU1nQVVHZzBBQnFJQUlFZnlBREJTQUVDellBQUNBQlFaalFBR29nQUVIc3R3ZHFJZ0lvQWdBMkFBQkJBQ1FGUVFVZ0FFRzR0d2RxRUFVaEF5TUZJUVJCQUNRRklBUkJBWEZGQkVBZ0FVR2MwQUJxSUFNMkFBQWdBVUdrMEFCcUlBQkJvdmNHYWkwQUFFRXdhallBQUNBQlFhalFBR29nQUVHazl3WnFLQUlBTmdBQUlBRkJ0TkFBYWtFQU5nQUFJQUZCdU5BQWFrRUFOZ0FBSUFGQnZOQUFhaUFBUWV5NEIyb29BZ0JCQ25ZMkFBQUNRQUpBQWtBQ1FDQUFRZWkzQjJvb0FnQkJBV3NPQXdBQUFRSUxJQUZCd05BQWFrRUJOZ0FBREFJTElBRkJ3TkFBYWtFQ05nQUFJQUZCeE5BQWFpSURJQUlwQUFBM0FBQWdBeUFDS1FBSU53QUlJQU1nQWlrQUVEY0FFQ0FESUFJcEFCZzNBQmdNQVFzZ0FVSEEwQUJxUVFBMkFBQUxJQUZCNU5BQWFpQUFRZmk0QjJvb0FnQWlBallBQUNBQ0JFQWdBVUhvMEFCcUtBQUFJZ0lFUUNBQlFlelFBR29vQUFBaUEwRi9ha0dmalFaSkJFQkJBQ1FGUVJBZ0FpQUFRZnk0QjJvZ0F4QUhHaU1GSVFKQkFDUUZJQUpCQVhFTkNRc0xDeUFCUWZEUUFHb2dBRUg4K0FkcUxRQUFOZ0FBUVFBUEN3c0xDd3NMQzBHQUNCQVlJUUVqQjBHQUNCQkVSd1JBSUFFUUhnc2dBUkFWSVFFQ1FDQUFRYWpMQkdvb0FnQWlBRVVFUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUNBQktBSUFEZ3dIQ0FBQkNBSURDQVVFQ0FZSUMwRVNJUUFNQ1F0QkRDRUFEQWdMUVJNaEFBd0hDMEVQSVFBTUJndEJFQ0VBREFVTFFRc2hBQXdFQzBFWUlRQU1Bd3RCQUNFQURBSUxRUlVoQUFzTEVCWWdBQXZFQXdFRWZ5TUVJUUlqQkVGQWF5UUVJQUpCSUdvaEF5QUFLQUlBSWdSQkFrWUVRQ0FESUFCQkJHb2lCU2dDQUNJRU9nQUFJQU1nQkVFSWRqb0FBU0FESUFSQkVIWTZBQUlnQXlBRVFSaDJPZ0FESUFGQklDQURRUVFnQWhDbkFTQUZRUUEyQWdBZ0JTQUNMUUFmUVJoMElBSXRBQjVCRUhRZ0FpMEFIVUVJZENBQ0xRQWJRUmgwSUFJdEFCcEJFSFFnQWkwQUdVRUlkQ0FDTFFBWFFSaDBJQUl0QUJaQkVIUWdBaTBBRlVFSWRDQUNMUUFUUVJoMElBSXRBQkpCRUhRZ0FpMEFFVUVJZENBQ0xRQVBRUmgwSUFJdEFBNUJFSFFnQWkwQURVRUlkQ0FDTFFBTFFSaDBJQUl0QUFwQkVIUWdBaTBBQ1VFSWRDQUNMUUFIUVJoMElBSXRBQVpCRUhRZ0FpMEFCVUVJZENBQ0xRQURRUmgwSUFJdEFBSkJFSFFnQWkwQUFVRUlkQ0FDTFFBQWNuSnlJQUl0QUFSemMzTnpJQUl0QUFoemMzTnpJQUl0QUF4emMzTnpJQUl0QUJCemMzTnpJQUl0QUJSemMzTnpJQUl0QUJoemMzTnpJQUl0QUJ4emMzTnpOZ0lBSUFBb0FnQWhCQXNnQkVFRFJ3UkFJQUlrQkE4TElBRkJJQ0FBUVFScUlnQkJJQ0FERUtjQklBQWdBeWtBQURjQUFDQUFJQU1wQUFnM0FBZ2dBQ0FES1FBUU53QVFJQUFnQXlrQUdEY0FHQ0FDSkFRTHhnZ0JCWDhqQkNFTUl3UkI0QVJxSkFRZ0JrRVlTd1JBSUF3a0JBOExJQXhCd0FScUlRc2dERUdnQkdvaENTQU1RWUFFYWlFS0FrQUNRQ0FBUWZnVmFpZ0NBQ0FHUmdSQUlBQkJ4QkZxSUFJUWR3UkFJQUJCeUJWcUlBUkJFQkJyUlFSQVFRQWhBZ3dEQ3dzTElBQkI4QnBxS0FJQUlBWkdCRUFnQUVHOEZtb2dBaEIzQkVBZ0FFSEFHbW9nQkVFUUVHdEZCRUJCQVNFQ0RBTUxDd3NnQUVIb0gyb29BZ0FnQmtZRVFDQUFRYlFiYWlBQ0VIY0VRQ0FBUWJnZmFpQUVRUkFRYTBVRVFFRUNJUUlNQXdzTEN5QUFRZUFrYWlnQ0FDQUdSZ1JBSUFCQnJDQnFJQUlRZHdSQUlBQkJzQ1JxSUFSQkVCQnJSUVJBUVFNaEFnd0RDd3NMSUFNZ0RFR0FCQkR0QVNBTUlBd1FiaUFFUVJBZ0N5QUtJQWxCQVNBR2RCREJBaUFNUVlBRUVGc2dBRUdrSldvaURTZ0NBQ0VESUEwZ0EwRUJhallDQUNBQUlBTkJBM0VpQTBINEJHeHFRZmdWYWlBR05nSUFJQUJCeEJGcUlBTkIrQVJzYWlBQ1FZSUVFRk1hSUFBZ0EwSDRCR3hxUWNnVmFpSUNJQVFwQUFBM0FBQWdBaUFFS1FBSU53QUlJQUFnQTBINEJHeHFRZGdWYWlJQ0lBc3BBQUEzQUFBZ0FpQUxLUUFJTndBSUlBSWdDeWtBRURjQUVDQUNJQXNwQUJnM0FCZ2dBQ0FEUWZnRWJHcEIvQlZxSWdRZ0NTa0FBRGNBQUNBRUlBa3BBQWczQUFnZ0JDQUpLUUFRTndBUUlBUWdDU2tBR0RjQUdDQUFJQU5CK0FSc2FrR2NGbW9pQXlBS0tRQUFOd0FBSUFNZ0Npa0FDRGNBQ0NBRElBb3BBQkEzQUJBZ0F5QUtLUUFZTndBWUlBSkJJRUVCUVFBUTVnRU1BUXNnQUNBQ1FmZ0ViR3BCMkJWcUlnTkJJRUVBUVFBUTVnRWdDeUFES1FBQU53QUFJQXNnQXlrQUNEY0FDQ0FMSUFNcEFCQTNBQkFnQ3lBREtRQVlOd0FZSUFOQklFRUJRUUFRNWdFZ0NTQUFJQUpCK0FSc2FrSDhGV29pQXlrQUFEY0FBQ0FKSUFNcEFBZzNBQWdnQ1NBREtRQVFOd0FRSUFrZ0F5a0FHRGNBR0NBS0lBQWdBa0g0Qkd4cVFad1dhaUlDS1FBQU53QUFJQW9nQWlrQUNEY0FDQ0FLSUFJcEFCQTNBQkFnQ2lBQ0tRQVlOd0FZQ3lBSEJFQWdCeUFLS1FBQU53QUFJQWNnQ2lrQUNEY0FDQ0FISUFvcEFCQTNBQkFnQnlBS0tRQVlOd0FZQ3lBSUJFQWdDU3dBQVNBSkxBQUpjeUFKTEFBUmN5RUNJQWtzQUFJZ0NTd0FDbk1nQ1N3QUVuTWhBeUFKTEFBRElBa3NBQXR6SUFrc0FCTnpJUVFnQ1N3QUJDQUpMQUFNY3lBSkxBQVVjeUVHSUFrc0FBVWdDU3dBRFhNZ0NTd0FGWE1oQnlBSkxBQUdJQWtzQUE1eklBa3NBQlp6SVFvZ0NTd0FCeUFKTEFBUGN5QUpMQUFYY3lFTklBZ2dDU3dBQUNBSkxBQUljeUFKTEFBUWN5QUpMQUFZY3pvQUFDQUlJQUlnQ1N3QUdYTTZBQUVnQ0NBRElBa3NBQnB6T2dBQ0lBZ2dCQ0FKTEFBYmN6b0FBeUFJSUFZZ0NTd0FISE02QUFRZ0NDQUhJQWtzQUIxek9nQUZJQWdnQ2lBSkxBQWVjem9BQmlBSUlBMGdDU3dBSDNNNkFBY2dDVUVnRUZzTElBVUVRQ0FBUWF3bGFpQUJJQXRCZ0FJZ0JSRGxBUXNnQzBFZ0VGc2dEQ1FFQytBS0FVRi9Jd1FoQ2lNRVFjQUJhaVFFSUFwQjJBQnFJUWdnQ2tFNGFpRUpJQXBCREdvaERTQUtRUmhxSVFzZ0NrSDRBR29pRENBQ0lBTkJ3QUJKQkg4Z0F3VkJ3QUFMRUZNYUlBd2dBMnBCQURvQUFDQU1JQU5CQVdwcVFRQTZBQUFnRENBRFFRSnFha0VBT2dBQUlBd2dBMEVEYW1wQkFUb0FBQ0FBSUFFZ0RDQURRUVJxSUFnUXB3RWdDU0FJS1FBQU53QUFJQWtnQ0NrQUNEY0FDQ0FKSUFncEFCQTNBQkFnQ1NBSUtRQVlOd0FZSUEwZ0IwRi9haUlETmdJQUlBMUJFRFlDQkNBTlFSQTJBZ2dnQ2lBRU5nSUFJQW9nQlRZQ0JDQUtJQVkyQWdnZ0NFRUJhaUVwSUFsQkFXb2hCQ0FJUVFKcUlTb2dDVUVDYWlFRklBaEJBMm9oS3lBSlFRTnFJUVlnQ0VFRWFpRXNJQWxCQkdvaEJ5QUlRUVZxSVMwZ0NVRUZhaUVPSUFoQkJtb2hMaUFKUVFacUlROGdDRUVIYWlFdklBbEJCMm9oRUNBSVFRaHFJVEFnQ1VFSWFpRVJJQWhCQ1dvaE1TQUpRUWxxSVJJZ0NFRUthaUV5SUFsQkNtb2hFeUFJUVF0cUlUTWdDVUVMYWlFVUlBaEJER29oTkNBSlFReHFJUlVnQ0VFTmFpRTFJQWxCRFdvaEZpQUlRUTVxSVRZZ0NVRU9haUVYSUFoQkQyb2hOeUFKUVE5cUlSZ2dDRUVRYWlFNElBbEJFR29oR1NBSVFSRnFJVGtnQ1VFUmFpRWFJQWhCRW1vaE9pQUpRUkpxSVJzZ0NFRVRhaUU3SUFsQkUyb2hIQ0FJUVJScUlUd2dDVUVVYWlFZElBaEJGV29oUFNBSlFSVnFJUjRnQ0VFV2FpRStJQWxCRm1vaEh5QUlRUmRxSVQ4Z0NVRVhhaUVnSUFoQkdHb2hRQ0FKUVJocUlTRWdDRUVaYWlGQklBbEJHV29oSWlBSVFScHFJVUlnQ1VFYWFpRWpJQWhCRzJvaFF5QUpRUnRxSVNRZ0NFRWNhaUZFSUFsQkhHb2hKU0FJUVIxcUlVVWdDVUVkYWlFbUlBaEJIbW9oUmlBSlFSNXFJU2NnQ0VFZmFpRkhJQWxCSDJvaEtFRUFJUUlEUUNBTklBSkJBblJxSVVnZ0F3UkFRUUFoQXdOQUlBQWdBU0FJUVNBZ0N4Q25BU0FJSUFzcEFBQTNBQUFnQ0NBTEtRQUlOd0FJSUFnZ0N5a0FFRGNBRUNBSUlBc3BBQmczQUJnZ0NTQUpMQUFBSUFnc0FBQnpPZ0FBSUFRZ0JDd0FBQ0FwTEFBQWN6b0FBQ0FGSUFVc0FBQWdLaXdBQUhNNkFBQWdCaUFHTEFBQUlDc3NBQUJ6T2dBQUlBY2dCeXdBQUNBc0xBQUFjem9BQUNBT0lBNHNBQUFnTFN3QUFITTZBQUFnRHlBUExBQUFJQzRzQUFCek9nQUFJQkFnRUN3QUFDQXZMQUFBY3pvQUFDQVJJQkVzQUFBZ01Dd0FBSE02QUFBZ0VpQVNMQUFBSURFc0FBQnpPZ0FBSUJNZ0V5d0FBQ0F5TEFBQWN6b0FBQ0FVSUJRc0FBQWdNeXdBQUhNNkFBQWdGU0FWTEFBQUlEUXNBQUJ6T2dBQUlCWWdGaXdBQUNBMUxBQUFjem9BQUNBWElCY3NBQUFnTml3QUFITTZBQUFnR0NBWUxBQUFJRGNzQUFCek9nQUFJQmtnR1N3QUFDQTRMQUFBY3pvQUFDQWFJQm9zQUFBZ09Td0FBSE02QUFBZ0d5QWJMQUFBSURvc0FBQnpPZ0FBSUJ3Z0hDd0FBQ0E3TEFBQWN6b0FBQ0FkSUIwc0FBQWdQQ3dBQUhNNkFBQWdIaUFlTEFBQUlEMHNBQUJ6T2dBQUlCOGdIeXdBQUNBK0xBQUFjem9BQUNBZ0lDQXNBQUFnUHl3QUFITTZBQUFnSVNBaExBQUFJRUFzQUFCek9nQUFJQ0lnSWl3QUFDQkJMQUFBY3pvQUFDQWpJQ01zQUFBZ1Fpd0FBSE02QUFBZ0pDQWtMQUFBSUVNc0FBQnpPZ0FBSUNVZ0pTd0FBQ0JFTEFBQWN6b0FBQ0FtSUNZc0FBQWdSU3dBQUhNNkFBQWdKeUFuTEFBQUlFWXNBQUJ6T2dBQUlDZ2dLQ3dBQUNCSExBQUFjem9BQUNBRFFRRnFJZ01nU0NnQ0FFa05BQXNMSUFvZ0FrRUNkR29vQWdBaUF5QUpLUUFBTndBQUlBTWdDU2tBQ0RjQUNDQURJQWtwQUJBM0FCQWdBeUFKS1FBWU53QVlJQUpCQVdvaUFrRURSd1JBSUEwZ0FrRUNkR29vQWdBaEF3d0JDd3NnREVIRUFCQmJJQWxCSUJCYklBaEJJQkJiSUF0QklCQmJJQW9rQkF1VUNBRU1meU1FSVFZakJFR1FCV29rQkNBR1FmZ0VhaUVGSUFaQjZBUnFJUWNnQmtIZ0Ftb2hDeUFHUWNRQmFpRUtJQVpCc0FGcUlRZ2dCa0VVYWlFTUlBQWdBaEIzSVFrQ1FBSkFJQVFFUUNBSkJFQWdBQ3dBckFRRVFDQUFRWVFFYWlBRVFRZ1FhMFVFUUVFQUlRTU1CQXNMQ3lBQVFiQUVhaUFDRUhjRVFDQUFRZHdJYWl3QUFBUkFJQUJCdEFocUlBUkJDQkJyUlFSQVFRRWhBd3dFQ3dzTElBQkI0QWhxSUFJUWR3UkFJQUJCakExcUxBQUFCRUFnQUVIa0RHb2dCRUVJRUd0RkJFQkJBaUVEREFRTEN3c2dBRUdRRFdvZ0FoQjNCRUFnQUVHOEVXb3NBQUFFUUNBQVFaUVJhaUFFUVFnUWEwVUVRRUVESVFNTUJBc0xDd1VnQ1FSQUlBQXNBS3dFUlFSQVFRQWhBd3dEQ3dzZ0FFR3dCR29nQWhCM0JFQWdBRUhjQ0dvc0FBQkZCRUJCQVNFRERBTUxDeUFBUWVBSWFpQUNFSGNFUUNBQVFZd05haXdBQUVVRVFFRUNJUU1NQXdzTElBQkJrQTFxSUFJUWR3UkFJQUJCdkJGcUxBQUFSUVJBUVFNaEF3d0RDd3NMREFFTElBVWdBQ0FEUWJBRWJHcEJqQVJxSWdJcEFBQTNBQUFnQlNBQ0tRQUlOd0FJSUFjZ0FDQURRYkFFYkdwQm5BUnFJZ0lwQUFBM0FBQWdCeUFDS1FBSU53QUlJQUJCckNWcUlBRWdCVUdBQVNBSEVPVUJJQVZCRUJCYklBZEJFQkJiSUFZa0JBOExJQU1nQzBHSUFoRE5BaG9nQXhCWlFRRjBJUWtnQkVFQVJ5SU5CRUFnQ3lBSmFpQUVLUUFBTndBQUlBbEJDR29oQ1FzZ0NoQ3RCQ0FJUVFGcUlRNGdDRUVDYWlFUElBWkJFR29oRUVFQUlRTURRQ0FLSUFzZ0NVRUFFS01CSUFnZ0F6b0FBQ0FPSUFOQkNIWTZBQUFnRHlBRFFSQjJPZ0FBSUFvZ0NFRURRUUFRb3dFZ0EwSC8vd0J4UlFSQUlBd2dDa0djQVJCVEdpQU1JQVpCQUJDdEFpQUhJQU5CRG5acUlCQW9BZ0E2QUFBTElBTkJBV29pQTBHQWdCQkhEUUFMSUFvZ0NFRUFFSzBDSUFVZ0NDZ0NBQ0lET2dBQUlBVWdBMEVJZGpvQUFTQUZJQU5CRUhZNkFBSWdCU0FEUVJoMk9nQURJQVVnQ0NnQ0JDSURPZ0FFSUFVZ0EwRUlkam9BQlNBRklBTkJFSFk2QUFZZ0JTQURRUmgyT2dBSElBVWdDQ2dDQ0NJRE9nQUlJQVVnQTBFSWRqb0FDU0FGSUFOQkVIWTZBQW9nQlNBRFFSaDJPZ0FMSUFVZ0NDZ0NEQ0lET2dBTUlBVWdBMEVJZGpvQURTQUZJQU5CRUhZNkFBNGdCU0FEUVJoMk9nQVBJQUFnQUVIQUVXb2lBeWdDQUVHd0JHeHFJQUpCZ2dRUVV4b2dBQ0FES0FJQUlnSkJzQVJzYWlBTk9nQ3NCQ0FOQkVBZ0FDQUNRYkFFYkdvZ0JDa0FBRGNBaEFRTElBQWdBa0d3Qkd4cVFZd0VhaUlDSUFVcEFBQTNBQUFnQWlBRktRQUlOd0FJSUFBZ0F5Z0NBRUd3Qkd4cVFad0VhaUlDSUFjcEFBQTNBQUFnQWlBSEtRQUlOd0FJSUFNZ0F5Z0NBRUVCYWtFRGNUWUNBQ0FMUVlnQ0VGc2dBRUdzSldvZ0FTQUZRWUFCSUFjUTVRRWdCVUVRRUZzZ0IwRVFFRnNnQmlRRUMrNEZBUngvSXdRaEJpTUVRUkJxSkFRZ0FVRUJhaUlMTFFBQVFRaDBJQUV0QUFCeUlBRkJBbW9pREMwQUFFRVFkSElnQVVFRGFpSU5MUUFBUVJoMGNpQUFRYlF4YWlnQ0FDSU9jeUVDSUFGQkJXb2lEeTBBQUVFSWRDQUJRUVJxSWhBdEFBQnlJQUZCQm1vaUVTMEFBRUVRZEhJZ0FVRUhhaUlTTFFBQVFSaDBjaUFBUWJneGFpSVRLQUlBY3lFSklBRkJDV29pRkMwQUFFRUlkQ0FCUVFocUloVXRBQUJ5SUFGQkNtb2lGaTBBQUVFUWRISWdBVUVMYWlJWExRQUFRUmgwY2lBQVFid3hhaUlZS0FJQWN5RURJQUZCRFdvaUdTMEFBRUVJZENBQlFReHFJaG90QUFCeUlBRkJEbW9pR3kwQUFFRVFkSElnQVVFUGFpSWNMUUFBUVJoMGNpQUFRY0F4YWlJZEtBSUFjeUVFSUFZZ0FTa0FBRGNBQUNBR0lBRXBBQWczQUFoQkh5RUhBMEFnQUVHMEwyb2dBRUcwTVdvZ0IwRURjVUVDZEdvb0FnQWlDQ0FFUVF0MElBUkJGWFp5SUFOcWN5SUZRUWgyUWY4QmNXb3RBQUJCQ0hRZ0FFRzBMMm9nQlVIL0FYRnFMUUFBY2lBQVFiUXZhaUFGUVJCMlFmOEJjV290QUFCQkVIUnlJQUJCdEM5cUlBVkJHSFpxTFFBQVFSaDBjaUFDY3lFS0lBQkJ0QzlxSUFnZ0EwRVJkQ0FEUVE5MmNpQUVjMm9pQWtFSWRrSC9BWEZxTFFBQVFRaDBJQUJCdEM5cUlBSkIvd0Z4YWkwQUFISWdBRUcwTDJvZ0FrRVFka0gvQVhGcUxRQUFRUkIwY2lBQVFiUXZhaUFDUVJoMmFpMEFBRUVZZEhJZ0NYTWhCU0FIUVg5cUlRZ2dCMEVBU2dSQUlBUWhDU0FESVFJZ0NDRUhJQW9oQXlBRklRUU1BUXNMSUFFZ0RpQUtjeUlCT2dBQUlBc2dBVUVJZGpvQUFDQU1JQUZCRUhZNkFBQWdEU0FCUVJoMk9nQUFJQkFnRXlnQ0FDQUZjeUlCT2dBQUlBOGdBVUVJZGpvQUFDQVJJQUZCRUhZNkFBQWdFaUFCUVJoMk9nQUFJQlVnR0NnQ0FDQURjeUlCT2dBQUlCUWdBVUVJZGpvQUFDQVdJQUZCRUhZNkFBQWdGeUFCUVJoMk9nQUFJQm9nSFNnQ0FDQUVjeUlCT2dBQUlCa2dBVUVJZGpvQUFDQWJJQUZCRUhZNkFBQWdIQ0FCUVJoMk9nQUFJQUFnQmhEckFTQUdKQVFMd1FVQkduOGdBVUVCYWlJSkxRQUFRUWgwSUFFdEFBQnlJQUZCQW1vaUNpMEFBRUVRZEhJZ0FVRURhaUlMTFFBQVFSaDBjaUFBUWJReGFpZ0NBQ0lNY3lFQ0lBRkJCV29pRFMwQUFFRUlkQ0FCUVFScUlnNHRBQUJ5SUFGQkJtb2lEeTBBQUVFUWRISWdBVUVIYWlJUUxRQUFRUmgwY2lBQVFiZ3hhaUlSS0FJQWN5RUlJQUZCQ1dvaUVpMEFBRUVJZENBQlFRaHFJaE10QUFCeUlBRkJDbW9pRkMwQUFFRVFkSElnQVVFTGFpSVZMUUFBUVJoMGNpQUFRYnd4YWlJV0tBSUFjeUVESUFGQkRXb2lGeTBBQUVFSWRDQUJRUXhxSWhndEFBQnlJQUZCRG1vaUdTMEFBRUVRZEhJZ0FVRVBhaUlhTFFBQVFSaDBjaUFBUWNBeGFpSWJLQUlBY3lFRUEwQWdBRUcwTDJvZ0FFRzBNV29nQjBFRGNVRUNkR29vQWdBaUJpQUVRUXQwSUFSQkZYWnlJQU5xY3lJRlFRaDJRZjhCY1dvdEFBQkJDSFFnQUVHMEwyb2dCVUgvQVhGcUxRQUFjaUFBUWJRdmFpQUZRUkIyUWY4QmNXb3RBQUJCRUhSeUlBQkJ0QzlxSUFWQkdIWnFMUUFBUVJoMGNpQUNjeUVGSUFCQnRDOXFJQVlnQTBFUmRDQURRUTkyY2lBRWMyb2lBa0VJZGtIL0FYRnFMUUFBUVFoMElBQkJ0QzlxSUFKQi93RnhhaTBBQUhJZ0FFRzBMMm9nQWtFUWRrSC9BWEZxTFFBQVFSQjBjaUFBUWJRdmFpQUNRUmgyYWkwQUFFRVlkSElnQ0hNaEJpQUhRUUZxSWdkQklFY0VRQ0FFSVFnZ0F5RUNJQVVoQXlBR0lRUU1BUXNMSUFFZ0RDQUZjeUlDT2dBQUlBa2dBa0VJZGpvQUFDQUtJQUpCRUhZNkFBQWdDeUFDUVJoMk9nQUFJQTRnRVNnQ0FDQUdjeUlDT2dBQUlBMGdBa0VJZGpvQUFDQVBJQUpCRUhZNkFBQWdFQ0FDUVJoMk9nQUFJQk1nRmlnQ0FDQURjeUlDT2dBQUlCSWdBa0VJZGpvQUFDQVVJQUpCRUhZNkFBQWdGU0FDUVJoMk9nQUFJQmdnR3lnQ0FDQUVjeUlDT2dBQUlCY2dBa0VJZGpvQUFDQVpJQUpCRUhZNkFBQWdHaUFDUVJoMk9nQUFJQUFnQVJEckFRdWdBd0VMZnlNRUlRSWpCRUdBQVdva0JDQUFRYlFuYWhDOEFpQUNJZ01nQVVHQUFSQ2VBaG9nQXhCdUlRUWdBRUcwTVdwQitmQ09uWDAyQWdBZ0FFRzRNV3BCOTZXMCt3TTJBZ0FnQUVHOE1XcEJ0Y1RXcUFjMkFnQWdBRUhBTVdwQm8rS2ZwM28yQWdBZ0FFRzBMMnBCNXl4QmdBSVFVeG9nQkVVaUNRUkFJQU1rQkE4TEEwQkJBQ0VGQTBBZ0FFRzBKMm9nQVNBRmFpMEFBQ0FHYTBIL0FYRkJBblJxS0FJQUlnZEIvd0Z4SWdJZ0FFRzBKMm9nQmlBQklBVkJBWEpxTFFBQWFrSC9BWEZCQW5ScUtBSUFRZjhCY1NJS1J3UkFRUUVoQ0FOQUlBQkJ0QzlxSUFKcUlnc3NBQUFoRENBTElBQkJ0QzlxSUFjZ0JXb2dDR3BCL3dGeGFpSUhMQUFBT2dBQUlBY2dERG9BQUNBSVFRRnFJUWdnQWtFQmFpSUhRZjhCY1NJQ0lBcEhEUUFMQ3lBRlFRSnFJZ1VnQkVrTkFBc2dCa0VCYWlJR1FZQUNSdzBBQ3lBRVFROXhCRUFnQkVFUGNpRUNJQVFoQVFOQUlBTWdBV3BCQURvQUFDQUJRUUZxSWdFZ0FrME5BQXNMSUFrRVFDQURKQVFQQlVFQUlRRUxBMEFnQUNBRElBRnFFTVFDSUFGQkVHb2lBU0FFU1EwQUN5QURKQVFMa0FJQkNIOGdBa1VFUUE4TElBQkJ5REZxSVFVZ0FFSEtNV29oQmlBQVFjd3hhaUVISUFCQnpqRnFJUWdEUUNBRklBVXVBUUFpQTBILy93TnhRYlFrYWpzQkFDQUdJQUJCdENkcUlBTkJOR3BCRUhSQkVIVkIvZ054UVFGMlFRSjBhaWdDQUNBR0x3RUFjeUlFT3dFQUlBY2dCeThCQUNBQVFiUW5haUFEUVRScVFSQjBRUkIxUWY0RGNVRUJka0VDZEdvb0FnQkJFSFpySWdrN0FRQWdDQ0FJTHdFQUlncEJEM1JCZ0lBQ2NTQUtRUUYyY2lBRVFmLy9BM0Z6SWdSQkFYWWdCRUVQZEhJaUJEc0JBQ0FGSUFRZ0NVSC8vd054SUFOQnRDUnFRUkIwUVJCMVFmLy9BM0Z6Y3lJRE93RUFJQUVnQTBFSWRpQUJMUUFBY3pvQUFDQUJRUUZxSVFFZ0FrRi9haUlDRFFBTEM1b0JBUUovSUFCRkJFQkJFUThMSUFCQjJNOEZhaUlCRUxJQklRSWdBRUhBekFscUVLRUJJQUVRZmlBQVFmak9CV29vQWdBaUFRUkFJQUVRVWdzZ0FFR2N6Z1ZxS0FJQUlnRUVRQ0FCRUZJTElBQkJ3TTBGYWlnQ0FDSUJCRUFnQVJCU0N5QUFRZVRNQldvb0FnQWlBUVJBSUFFUVVnc2dBRUdJekFWcUtBSUFJZ0VFUUNBQkVGSUxJQUFRZVNBQUVGSWdBZ1IvUVFBRlFSRUxDeThBSUFCQnFDVnFRUUUyQWdBZ0FFSEVNV3BCQURvQUFDQUFRY1V4YWtFSE9nQUFJQUJCeGpGcVFjMEFPZ0FBQzJrQ0FuOENmaUFBUVFScUlRRWdBQ2dDQUVFdFJpSUNSUVJBSUFBaEFRc2dBZ1IrUW44RlFnRUxJUVFnQVNnQ0FDSUFRVkJxUVFwUEJFQkJBQThMQTBBZ0EwSUtmaUFBUVZCcXJId2hBeUFCUVFScUlnRW9BZ0FpQUVGUWFrRUtTUTBBQ3lBRElBUitwd3N6QVFKL0lBQW9BZ0FpQWdSQUlBQWhBUVVnQUE4TEEwQWdBU0FDRUpNQk5nSUFJQUZCQkdvaUFTZ0NBQ0lDRFFBTElBQUxOUUVDZnlBQUtBSUFJZ0lFUUNBQUlRRUZJQUFQQ3dOQUlBRWdBa0VCRUpNQ05nSUFJQUZCQkdvaUFTZ0NBQ0lDRFFBTElBQUxUUUVDZnlBQ1JRUkFJQUVQQ3dOQUlBRWdBMEVDZEdvZ0FDQURRUUYwSWdSQkFYSnFMUUFBUVFoMElBQWdCR290QUFCeUlnUTJBZ0FnQkVFQVJ5QURRUUZxSWdNZ0FrbHhEUUFMSUFFTFZRRUNmeUFDUlFSQUlBRVBDd0pBQTBBZ0FTQURRUUYwSWdScUlBQW9BZ0E2QUFBZ0FTQUVRUUZ5YWlBQUtBSUFRUWgyT2dBQUlBQW9BZ0JGRFFFZ0FFRUVhaUVBSUFOQkFXb2lBeUFDU1EwQUN3c2dBUXVhRVFFTGZ5TUVJUVlqQkVHUTBBQnFKQVFnQmtHUXdBQnFJUUlnQmtFUWFpRURJQUJCREdvaUNFRUFOZ0FBUVFBa0JVRUVRYkRPQ2hBRklRRWpCU0VGUVFBa0JRSkFBa0FnQlVFQmNRUkFRUUFoQVVFQUlRTU1BUVZCQUNRRlFSTWdBUkFNSXdVaEJVRUFKQVVnQlVFQmNRUkFRWUFJUWRnS0VCa2hBQ01ISVFJRlFRQWtCVUVCSUFGQjJNOEZhaUlGSUFFUURTTUZJUVJCQUNRRkFrQWdCRUVCY1FSQVFZQUlRZGdLRUJraEFDTUhJUUlGUVFBa0JVRUNJQUZCd013SmFpSUxJQUVRRFNNRklRUkJBQ1FGSUFSQkFYRUVRRUdBQ0VIWUNoQVpJUUFqQnlFQ0lBVVFmZ3dDQ3lBQlFhakxCR29pQ2tFQU5nSUFJQUZCcU00S2FpQUFLQUFJTmdJQVFRQWtCVUVESUFGQmlNd0ZhaUlFUVlnZEVBMGpCU0VIUVFBa0JTQUhRUUZ4QkVBZ0FTRUREQVVMSUFKQkFEb0FBQUpBQWtBZ0FDZ0FBQ0lIUlEwQVFRQWtCVUVOSUFJZ0IwR0FFQkFIR2lNRklRZEJBQ1FGSUFkQkFYRkZEUUJCZ0FoQjJBb1FHU0VBSXdjaEFnd0JDeUFBS0FBRUlRZEJBQ1FGUVFFZ0FpQUhJQU5CZ0JBUUNCb2pCU0VDUVFBa0JRSkFBa0FnQWtFQmNRMEFRUUFrQlVFRUlBRWdBeEFOSXdVaEFrRUFKQVVnQWtFQmNRMEFJQUZCdUlRRGFrRUJOZ0lBSUFGQmpNc0Rha0VCTmdJQUlBRkJzTXNFYWlBQUtBQWtOZ0lBSUFGQnJNc0VhaUFBS0FBb05nSUFJQUZCbllVRGFrRUJPZ0FBUVFBa0JVRUJJQVVnQTBFRUVBY2hBaU1GSVFOQkFDUUZJQU5CQVhFTkFBSkFJQUlFUUVFQUpBVkJBU0FGUVFFUUJpRUNJd1VoQTBFQUpBVWdBMEVCY1EwQ0lBSkZCRUFDUUNBS0tBSUFJZ0JGQkVCQnJQVUNLQUlBSWdCQkFVMEVRRUVOSVFBTUFnc0NRQUpBQWtBQ1FBSkFBa0FDUUFKQUlBQkJBbXNPQ2dBQkJ3SURCd1VFQndZSEMwRVNJUUFNQ0F0QkRDRUFEQWNMUVJNaEFBd0dDMEVQSVFBTUJRdEJFQ0VBREFRTFFRc2hBQXdEQzBFWUlRQU1BZ3RCRlNFQUN3c2dDQ0FBTmdBQUlBc1FvUUVnQlJCK0lBRkIrTTRGYWlnQ0FDSUFCRUFnQUJCU0N5QUJRWnpPQldvb0FnQWlBQVJBSUFBUVVnc2dBVUhBelFWcUtBSUFJZ0FFUUNBQUVGSUxJQUZCNU13RmFpZ0NBQ0lBQkVBZ0FCQlNDeUFFS0FJQUlnQUVRQ0FBRUZJTElBRVFlU0FCRUZKQkFDRUJEQUlMSUFCQklHb2lBeUFCUWZXTENXb3RBQUFpQWpZQUFDQUJRZmVMQ1dvc0FBQUVRQ0FESUFKQkJISWlBallBQUFzZ0FVSDBpd2xxTEFBQUJFQWdBeUFDUVFoeUlnSTJBQUFMSUFGQitvc0phaXdBQUFSQUlBTWdBa0VRY2lJQ05nQUFDeUFCUWZpTENXb3NBQUFFUUNBRElBSkJJSElpQWpZQUFBc2dBVUg3aXdscUxBQUFCRUFnQXlBQ1FjQUFjaUlDTmdBQUN5QUJRZnlMQ1dvc0FBQUVRQ0FESUFKQmdBRnlJZ0kyQUFBTElBRkIrWXNKYWl3QUFBUkFJQU1nQWtHQUFuSTJBQUFMSUFaQ0FEY0NBQ0FHUWdBM0FnZ0NRQUpBQWtBQ1FDQUFRUlJxSWdvb0FBQkZEUUJCQUNRRlFRSWdCU0FHRUFZaEFpTUZJUVJCQUNRRklBUkJBWEVOQWlBQ1JRMEFBa0JCQUNBR0tBSUVRUUowUVFGeUlnSkJJRXNFZnlBQ0JVRWdDeEJYSWdSRklnY0VRRUVBSkFWQkZFR3M5UUlRRENNRklRbEJBQ1FGSUFsQkFYRkZEUUZCZ0FoQjJBb1FHU0VBSXdjaEFnd0ZDd3NnQkVFQUlBSVFWQm9nQmlnQ0FDRUpRUUFrQlVFT0lBa2dCQ0FDUVg5cUVBY2FJd1VoQWtFQUpBVWdBa0VCY1FSQVFZQUlRZGdLRUJraEFDTUhJUUlnQncwRUlBUVFVZ3dFQ3lBRUVHNUJBV29oQWlBRElBTW9BQUJCQW5JMkFBQWdBQ0FDSUFvb0FBQWlBMHNFZjBFVUJVRUJDellBSENBQVFSaHFJZ2tnQWlBRFNRUi9JQUlpQXdVZ0F3czJBQUFnQUVFUWFpSUFLQUFBSUFRZ0EwRi9haEJUR2lBQ0lBb29BQUJOQkVBZ0FDZ0FBQ0FKS0FBQVFYOXFha0VBT2dBQUN5QUhEUUVnQkJCU0RBRUxJQUJCQURZQUdDQUFRUUEyQUJ3TFFRQWtCVUVGSUFzZ0JSQU5Jd1VoQUVFQUpBVWdBRUVCY1EwQUlBWW9BZ0FpQUFSQUlBQVFVZ3NNQXd0QmdBaEIyQW9RR1NFQUl3Y2hBZ3NnQmlnQ0FDSURCRUFnQXhCU0N3d0RCU0FJUVE4MkFBQWdDeENoQVNBRkVINGdBVUg0emdWcUtBSUFJZ0FFUUNBQUVGSUxJQUZCbk00RmFpZ0NBQ0lBQkVBZ0FCQlNDeUFCUWNETkJXb29BZ0FpQUFSQUlBQVFVZ3NnQVVIa3pBVnFLQUlBSWdBRVFDQUFFRklMSUFRb0FnQWlBQVJBSUFBUVVnc2dBUkI1SUFFUVVrRUFJUUVMQ3lBR0pBUWdBUThMUVlBSVFkZ0tFQmtoQUNNSElRSUxDeUFCSVFNTUJRc0xJQUZCK000RmFpZ0NBQ0lEQkVBZ0F4QlNDeUFCUVp6T0JXb29BZ0FpQXdSQUlBTVFVZ3NnQVVIQXpRVnFLQUlBSWdNRVFDQURFRklMSUFGQjVNd0ZhaWdDQUNJREJFQWdBeEJTQ3lBQlFZak1CV29vQWdBaUF3UkFJQU1RVWdzZ0FSQjVDeUFCRUZKQkFDRUJRUUFoQXdzTUFRdEJnQWhCMkFvUUdTRUFJd2NoQWdzZ0FrR0FDQkJFUndSQUlBSkIyQW9RUkVjRVFDQUFFQjRMSUFBUUZSb2dDRUVMTmdBQUlBRUVRQ0FCUWNETUNXb1FvUUVnQVVIWXp3VnFFSDRnQVVINHpnVnFLQUlBSWdBRVFDQUFFRklMSUFGQm5NNEZhaWdDQUNJQUJFQWdBQkJTQ3lBQlFjRE5CV29vQWdBaUFBUkFJQUFRVWdzZ0FVSGt6QVZxS0FJQUlnQUVRQ0FBRUZJTElBRkJpTXdGYWlnQ0FDSUFCRUFnQUJCU0N5QUJFSGtnQXhCU0N4QVdJQVlrQkVFQUR3c2dBQkFWS0FJQUlRQUNRQUpBSUFGQkFFY2lBZ1JBSUFGQnFNc0VhaWdDQUNJRkJFQWdDQ0FGTmdBQURBSUxDeUFJQW44Q1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBZ0FBNE1Cd2dBQVFnQ0F3Z0ZCQWdHQ0F0QkVnd0lDMEVNREFjTFFSTU1CZ3RCRHd3RkMwRVFEQVFMUVFzTUF3dEJHQXdDQzBFQURBRUxRUlVMTmdBQUlBSU5BQXdCQ3lBQlFjRE1DV29Rb1FFZ0FVSFl6d1ZxRUg0Z0FVSDR6Z1ZxS0FJQUlnQUVRQ0FBRUZJTElBRkJuTTRGYWlnQ0FDSUFCRUFnQUJCU0N5QUJRY0ROQldvb0FnQWlBQVJBSUFBUVVnc2dBVUhrekFWcUtBSUFJZ0FFUUNBQUVGSUxJQUZCaU13RmFpZ0NBQ0lBQkVBZ0FCQlNDeUFCRUhrZ0F4QlNDeEFXSUFZa0JFRUFDN1FLQWc1L0FYNGpCQ0VESXdSQmdNOERhaVFFSUFOQnFNNERhaUVGSUFCQnJMd0RhaXdBQUFSQUlBVkJBRFlDUkNBRlFSczJBa2dnQlVGQWEwRUJOZ0lBSUFVZ0FFRVlhallDQUVHczlRSkJBeEJrSUFNa0JFRUFEd3NnQTBIWXpRTnFJUWtnQTBIY3pRTnFJUVFnQXlFR0lBQkI4SzBDYWlFTElBQkJpcTRDYWlJTUxRQUFRUVZNQkVBZ0FFR0pyZ0pxSWcwdEFBQWhBeUFBUVppOEEyb29BZ0JCQTBZRWYwRXlCVUVkQ3lBRFR3UkFJQUJCdU80Q2FpSU9LUU1BUWdCUkJFQWdBRUg1N2dKcUxBQUFSUVJBSUFZa0JFRUJEd3NMSUFCQjhQRUFhaUlJRU1JRUlBWWdDQkNpQWlBQVFkVHZBbW9vQWdBaEEwRUFKQVZCQlNBR0lBTkJBQkFPSXdVaEEwRUFKQVVDUUNBRFFRRnhSUVJBQW44Q1FDQUNEUUFnQUVIQTdnSnFJZzhwQXdBaUVVS0FnSUFJVlFSQUlBUkJBRFlDUkNBRVFSdzJBa2dnQkVGQWEwRUJOZ0lBSUFRZ0FFRVlhallDQUVFQUpBVWpCU0VCUVFBa0JTQUJRUUZ4RFFSQkFBd0NDeUFCUlFSQUlBQkJtZklBYWtFQk9nQUFEQUVMSUFGQkNHb2lDaWdDQUNFRUlBRkJCR29pRUNBUnB5SUROZ0lBSUJHbklRY2dCQ0FEU1FSL0lBRW9BZ3dpQjBFQVJ5QUhJQU5KY1FSQVFRQWtCU0FKSUFjMkFnQkJBa0dzOVFKQjJCc2dDUkFPSXdVaEEwRUFKQVVnQTBFQmNRMEZRUUFrQlVFVVFhejFBaEFNSXdVaEEwRUFKQVVnQTBFQmNRMEZJQW9vQWdBaEJDQVFLQUlBSVFNTElBRW9BZ0FnQXlBRVFTQnFJQVJCQW5acUlnUkxCSDhnQXdVZ0JDSURDeEJYSWdSRkJFQkJBQ1FGUVJSQnJQVUNFQXdqQlNFSFFRQWtCU0FIUVFGeERRVUxJQUVnQkRZQ0FDQUtJQU0yQWdBZ0R5a0RBS2NGSUFjTElRTWdBU2dDQUNFRVFRQWtCVUVMSUFnZ0JDQURFQTRqQlNFRFFRQWtCU0FEUVFGeERRTUxJQUJCKys0Q2Fpd0FBQVJBUVFBZ0FFR3M4d0JxS0FJQUlnTkJxTVFDYWl3QUFFVU5BUm9nQTBHb3dBSnFJUVFnQUVIODdnSnFLQUlBSVFjZ0FFR0I3d0pxSVFNZ0FFR0E3d0pxTEFBQVJRUkFRUUFoQXdzZ0FFSE03d0pxS0FJQUlRbEJBQ1FGUVFFZ0NFRUFJQWNnQkNBRElBQkJrZThDYWlBSklBQkJxKzhDYWlBQVFhTHZBbW9RRWlNRklRTkJBQ1FGSUFOQkFYRU5Bd3NnQUVIUTdnSnFJZ01vQWdBaEJFRUFKQVZCQkNBQVFaanpBR29pQnlBRVFRRVFEaU1GSVFSQkFDUUZJQVJCQVhFTkFpQUFRWkR5QUdvZ0Rpa0RBRGNEQUNBQVFaanlBR3BCQURvQUFFRUFKQVZCQXlBSUlBQWdBaEFPSXdVaEFrRUFKQVVnQWtFQmNRMENJQUJCd2ZJQWFpQUFRZm51QW1vc0FBQTZBQUFnQUVHbzhnQnFJQXMyQWdBZ0FFR3M4Z0JxUVFBMkFnQWdCa0d3bUFGcUlBQkJ3TzRDYWlrREFDSVJOd01BSUFaQnlKZ0Jha0VBT2dBQUlBd3NBQUFFUUNBTkxRQUFJUUpCQUNRRlFRWWdCaUFDUVFBUURnVkJBQ1FGUVFJZ0NDQVJweUFSUWlDSXB4QlBDeU1GSVFKQkFDUUZJQUpCQVhFTkFpQUFRYXZ2QW1vaEFpQUFRYXJ2QW1vc0FBQkZCRUJCQUNFQ0MwRUFKQVZCRnlBSElBTWdBaEFISVFJakJTRURRUUFrQlNBRFFRRnhEUUlnQWdSL1FRRUZJQVZCQURZQ1JDQUZRUjAyQWtnZ0JTQUFRUmhxTmdJQUlBVkJRR3RCQWpZQ0FDQUZJQUJCa0s0Q2FqWUNCRUVBSkFVakJTRUNRUUFrQlNBQ1FRRnhEUU5CQUNRRlFRcEJyUFVDUVFNUURTTUZJUUpCQUNRRklBSkJBWEVOQXlBQkJFQWdBU2dDQUNJQUJFQWdBQkJTSUFGQkFEWUNBQXNnQVVFQU5nSUVJQUZCQURZQ0NBdEJBQXNMSVFBZ0JoQ1ZBU0FHSkFRZ0FBOExDeEFYSVFFZ0JoQ1ZBU0FCRUI0TEN5QUZRUUEyQWtRZ0JVRWNOZ0pJSUFWQlFHdEJBVFlDQUNBRklBQkJHR28yQWdBZ0JpUUVRUUFMWHdJQmZ3RitJQUJCdEtZQmFpZ0NBQ0FBUWFpOEEyb29BZ0JxclNFQ0lBQkJtTHdEYWlnQ0FFRUNSZ1IrSUFCQnhLWUJhaWdDQUswZ0Fud0ZJQUJCaEtjQmFpZ0NBQ0VCSUFBZ0FFSEVwZ0ZxS0FJQUVQQUJJQUZxclNBQ2ZBc0xEd0FnQUVHUjZRRnFMQUFBUVFCSEM1UUJBUVYvSUFBUWZDSUNSUVJBUVFBUEN5QUFRY3p6QUdvaEF5QUFRWkN1QW1vaEJRSkFBMEFnQXlnQ0FDSUVRUVZHQkVCQkFDRUNEQUlMSUFaQkFXb2lCa0gvQUhGRkJFQVFoUUVnQXlnQ0FDRUVDeUFFUVFOR0JFQWdCU0FCRUhORkRRSUxJQUFnQUVHUXZBTnFLUU1BUVFBZ0FDZ0NBQ2dDRUVFRGNVRzRBbW9SQWdBZ0FCQjhJZ0lOQUVFQUlRSUxDeUFDQzdBTkFqUi9BMzRqQkNFRkl3UkJvTUVBYWlRRUlBRkJGR29pQ1NnQ0FDQUNheUlFSUFGQkdHb2lCeWdDQUVrRVFDQUZKQVFQQ3lBSElBUTJBZ0FnQWtFQlRRUkFJQVVrQkE4TElBVkIrQUJxSVJFZ0JVSHdBR29oRWlBRlFZREJBR29oRXlBRFFRUnFJUW9nQTBFZWFpRWNJQUJCaUx3RGFpRVVJQU5CTUdvaEhTQURRU0JxSVFzZ0EwR3h3UUJxSVFnZ0EwRzZ3UUJxSVI0Z0EwSGN3UUJxSVI4Z0FFRVlhaUVWSUFWQmdBRnFJZ1JCUUdzaElDQUVRY1FBYWlFaElBUkJ5QUJxSVNJZ0JFRUVhaUVqSUFOQmtjRUFhaUVrSUFOQm9jRUFhaUVsSUFOQmtNRUFhaUVtSUFOQmpNRUFhaUVuSUFOQmk4RUFhaUVvSUFOQnNzRUFhaUVNSUFSQlFHc2hLU0FFUWNRQWFpRXFJQVJCeUFCcUlTc2dCRUVFYWlFc0lBTkI0TUFBYWlJdFFRUnFJUzRnQTBIQXdBQnFJUllnQTBHNHdBQnFJUmNnQTBHd3dBQnFJUmdnQTBIandRQnFJUzhnQUVIUXB3RnFJVEFnQTBId3dRQnFJVEVnQTBIMGdRRnFJVElnQTBIMHdRQnFJVE1nQTBIMmdRRnFJUmtnQTBIM2dRRnFJUm9nQTBINGd3RnFJUTBnQTBINGdRRnFJUTRnQTBIMWdRRnFJVFFnQTBIOGhRRnFJVFVnQTBINGhRRnFJVFlnQTBHZ3dBQnFJZ1pCQ0dvaER5QUdRUVJxSVJzZ0JrRU1haUUzQWtBRFFDQUJFR0VpT0VJQVVRMEJJQWtvQWdBZ0J5Z0NBQ0lBYXlJQ1JTQTRJQUt0VlhJTkFTQUJFR0VoT2lBSEtBSUFJUU1nT2tJQlVTQUtLQUlBSWdKQkFVWnhCRUFnSEVFQk9nQUFJQUVRWWFjaUFrRUJjUVJBSUFFUVlTSTVRZ0JTQkVBZ0N5QVVLUU1BSURsOE53TUFDd3NnQWtFQ2NRUkFJQUVRWVNJNVFnQlNCRUFnSFNBVUtRTUFJRGw4TndNQUN3c2dDaWdDQUNFQ0N5QTRJQUN0ZktjaUVDQURheUVBQWtBZ0FrRitjVUVDUmdSQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUNBNlFnRjlJamhDSUlpbkRRY2dPS2NPQndBQkFnTUVCUVlIQ3lBQkVHR25CRUFnS2tFQU5nSUFJQ3RCSURZQ0FDQUVJQlUyQWdBZ0tVRUNOZ0lBSUN3Z0N6WUNBRUdzOVFKQkFSQmtEQWtMSUFnZ0FSQmhweUlBUVFGeE9nQUFJQjRnQUVFQmRrRUJjVG9BQUNBZklBRVF1d0lpQUVIL0FYRTJBZ0FnQUVIL0FYRkJHRW9FUUNBaFFRQTJBZ0FnSWtFZ05nSUFJQVFnRlRZQ0FDQWdRUUkyQWdBZ0l5QUxOZ0lBUWF6MUFrRUJFR1FMSUFFZ0pFRVFFSG9hSUFFZ0pVRVFFSG9hSUFnc0FBQUVRQ0FCSUF4QkNCQjZHaUFCSUFSQkJCQjZHaUFGRUtJQklBVWdERUVJRUgwZ0JTQVRFSmNCSUFnZ0JDQVRRUVFRYTBVNkFBQWdDaWdDQUVFRFJnUkFJQXhCdEx3RFFRZ1FhMFVFUUNBSVFRQTZBQUFMQ3dzZ0prRUJPZ0FBSUNkQkJUWUNBQ0FvUVFFNkFBQU1DQXNnQVJCaHB3MEhJQzFCQXpZQ0FDQUJJQzVCSUJCNkdnd0hDeUFBUVFoTkRRWWdBUkJocHlJQVFRRnhRUUJISVFJZ0FFRUNjUVJBSUFJRVFDQVlJQUVRcGdHc1FvQ3Q0Z1IrUW9DQStxbnR1K3pPQVh3M0F3QUZJQmdnQVJEb0FUY0RBQXNMSUFCQkJIRUVRQ0FDQkVBZ0Z5QUJFS1lCckVLQXJlSUVma0tBZ1BxcDdidnN6Z0Y4TndNQUJTQVhJQUVRNkFFM0F3QUxDeUFBUVFoeFJRMEdJQUlFUUNBV0lBRVFwZ0dzUW9DdDRnUitRb0NBK3FudHUrek9BWHczQXdBRklCWWdBUkRvQVRjREFBc01CZ3NnQUVVTkJTQUJFR0VhSUFFUVlhY2lBRVVOQlNBdlFRRTZBQUFnRWlBQU5nSUFJQVJCRkVHY0RpQVNFS29ER2lBd0lBUkJnQkFRZUJvTUJRc2dNU0FCRUdFK0FnQWdNaUFCRUdHblFRRnhPZ0FBSUFFUVlhY2hBQ0FFUVFBNkFBQWdBRUgvUDBrRVFDQUJJQVFnQUJCNkdpQUVJQUJxUVFBNkFBQUxJQVFnTTBHQUVCQzZBUm9NQkFzZ0dTQUJFR0duSWdKQkFuWkJBWEU2QUFBZ0dpQUNRUU4yUVFGeE9nQUFJQTFCQURvQUFDQU9RUUE2QUFBZ0FrRUJjUVJBSUFFZ0RpQUJFR0duSWdCQi93RkpCSDhnQUFWQi93RWlBQXNRZWhvZ0RpQUFha0VBT2dBQUN5QUNRUUp4QkVBZ0FTQU5JQUVRWWFjaUFFSC9BVWtFZnlBQUJVSC9BU0lBQ3hCNkdpQU5JQUJxUVFBNkFBQUxJQmtzQUFBRVFDQTJJQUVRWVQ0Q0FBc2dHaXdBQUFSQUlEVWdBUkJoUGdJQUN5QTBRUUU2QUFBTUF3c2dBa0VEUmdSQUlBQWdDU2dDQUNBUWEwRUJSbW9oQUFzZ0R5Z0NBQ0VESUJzZ0FEWUNBQ0FESUFCSkJFQWdOeWdDQUNJQ1FRQkhJQUFnQWt0eEJIOGdFU0FDTmdJQVFhejFBa0hZR3lBUkVHQkJyUFVDRUZZZ0R5Z0NBQ0VESUJzb0FnQUZJQUFMSVFJZ0JpZ0NBQ0FDSUFOQklHb2dBMEVDZG1vaUEwc0VmeUFDQlNBRElnSUxFRmNpQTBVRVFFR3M5UUlRVmdzZ0JpQUROZ0lBSUE4Z0FqWUNBQXNnQVNBR0tBSUFJQUFRZWhvTEN3c2dCeUFRTmdJQUlBa29BZ0FnRUd0QkFVc05BQXNMSUFVa0JBdkJBZ0VGZnlNRUlRRWpCRUdBQldva0JDQUFRYXp6QUdvaUF5Z0NBQ0lFUWFqRUFtb3NBQUFFUUNBQkpBUVBDeUFCUVlBRWFpRUNBbjhDUUNBRVFiRExCR29vQWdBaUJVVU5BQ0FCUVFBMkFnQUNRQUpBUVFRZ0JFR3N5d1JxS0FJQUlBRkJnQUVnQlVFUGNVSHFBR29SQXdCQmYwWUVRQ0FCUVFBMkFnQU1BUVVnQVNnQ0FFVU5BUXNNQVFzZ0FrRUFPZ0FBUVFJZ0F5Z0NBQ0lFUWF6TEJHb29BZ0FnQWtHQUFTQUVRYkRMQkdvb0FnQkJEM0ZCNmdCcUVRTUFRWDlHQkVBZ0FrRUFPZ0FBQ3lBQ1FRQWdBVUdBQVJEREFSb2dBa0dBQVJCYkN5QURLQUlBUWFqQUFtb2dBUkN1QWlBQlFZQUVFRnNnQXlnQ0FDSUNRYWpFQW1vc0FBQkZEUUFnQWd3QkN5QUFFTElCR2lBREtBSUFRYWpMQkdwQkZqWUNBRUdzOVFKQi93RVFwQUVnQXlnQ0FBc2lBRUd0eEFKcVFRRTZBQUFnQVNRRUM4OHBBaE4vQTM0akJDRUJJd1JCNE1jQWFpUUVJQUZCMkFkcUlRMGdBU0lIUVlnSGFpRURJQWRCdkFacUlRUWdCMEh3QldvaERpQUhRYVFGYWlFUUlBZEIyQVJxSVFvZ0IwR01CR29oQVNBSFFjQURhaUVMSUFkQjlBSnFJUXdnQjBHb0Ftb2hBaUFIUWR3QmFpRUlJQWRCa0FGcUlRWWdCMEh3QUdvaUJTQUFFTGdCQWtBQ1FBSkFJQUJCcEx3RGFpSVNMQUFBQkVBZ0FFR0l2QU5xSWc4cEF3QWdBRUdvdkFOcUtBSUFyVUlJZkZVRVFFRUFKQVZCSENBQUVBd2pCU0VKUVFBa0JTQUpRUUZ4QkVBUUZ5RUFEQVVMSUFBb0FnQW9BZ3doQ1VFQUpBVWdDU0FBSUExQkVCQUhJUWtqQlNFUlFRQWtCUUovQWtBZ0VVRUJjUTBBSUFsQkVFY0VRRUVBSkFWQkJTQUFFRTZ0SXdldFFpQ0doQ0VVSXdVaEFVRUFKQVVnQVVFQmNRMEJBa0FDUUNBUEtRTUFJQlJTRFFBZ0FFR1F2QU5xS1FNQUlCUlNEUUFNQVFzZ0JrRUFOZ0pFSUFaQk56WUNTQ0FHUVVCclFRRTJBZ0FnQmlBQVFSaHFOZ0lBUVFBa0JTTUZJUUJCQUNRRklBQkJBWEVOQWtFQUpBVkJDa0dzOVFKQkFSQU5Jd1VoQUVFQUpBVWdBRUVCY1EwQ0MwRUFJUUFNQmdzZ0FFR3M4d0JxS0FJQVFhakFBbW9oQmlBQVFaQ25BV29vQWdBaEQwRUFKQVZCQVNBQVFaekFBR29pQ1VFQVFRVWdCaUFBUVpTbkFXb2dEU0FQUVFBZ0J4QUtHaU1GSVFaQkFDUUZBa0FnQmtFQmNVVUVRQ0FBUVl5bkFXb3NBQUFFUUNBSElBQkJwS2NCYWtFSUVHc0VRQ0FJUVFBMkFrUWdDRUVHTmdKSUlBaEJRR3RCQVRZQ0FDQUlJQUJCR0dvMkFnQkJBQ1FGSXdVaEFVRUFKQVVnQVVFQmNRMERJQUJCcmJ3RGFrRUJPZ0FBUVFBa0JVRUtRYXoxQWtFTEVBMGpCU0VBUVFBa0JTQUFRUUZ4RFFOQkFDRUFEQWtMQ3lBRklBazJBaHhCQVNFSURBWUxDeEFYREFFTEVCY0xJUUFNQkFWQkFDRUlDd1ZCQUNFSUN3dEJBQ1FGUVFvZ0JVRUhFQVloQmlNRklROUJBQ1FGQWtBZ0QwRUJjVVVFUUNBR1FRZEpCRUJCQUNRRlFRVWdBQkJPclNNSHJVSWdob1FoRkNNRklRRkJBQ1FGSUFGQkFYRU5BaUFBUVlpOEEyb3BBd0FnRkZFRVFDQUFRWkM4QTJvcEF3QWdGRkVFUUVFQUlRQU1CUXNMSUFKQkFEWUNSQ0FDUVRjMkFrZ2dBa0ZBYTBFQk5nSUFJQUlnQUVFWWFqWUNBRUVBSkFVakJTRUFRUUFrQlNBQVFRRnhEUUpCQUNRRlFRcEJyUFVDUVFFUURTTUZJUUJCQUNRRklBQkJBWEVOQWtFQUlRQU1Bd3NnQUVHWXBnRnFJUUlnQUVHb3BnRnFJZzlCQURvQUFFRUFKQVZCRENBRkVBVWhCaU1GSVFsQkFDUUZJQWxCQVhGRkJFQWdBaUFHTmdJQVFRQWtCVUVOSUFWQkJCQUdJUVlqQlNFSlFRQWtCU0FKUVFGeEJFQVFGeUVBREFVTFFRQWtCVUVESUFVUVRxMGpCNjFDSUlhRUlSUWpCU0VKUVFBa0JRSkFJQWxCQVhGRkJFQWdCa1VnRkVJQVVYSUVRQ0FNUVFBMkFrUWdERUVZTmdKSUlBeEJRR3RCQVRZQ0FDQU1JQUJCR0dvMkFnQkJBQ1FGSXdVaEFVRUFKQVVnQVVFQmNRMENJQUJCckx3RGFrRUJPZ0FBUVFBa0JVRUtRYXoxQWtFREVBMGpCU0VBUVFBa0JTQUFRUUZ4RFFKQkFDRUFEQVlMQWtBZ0JrRjlhaUFVcHlJTWFpSUpRUUJJSUFaQkJHb2dER29pQmtFSFNYSUVRQ0FMUVFBMkFrUWdDMEVZTmdKSUlBdEJRR3RCQVRZQ0FDQUxJQUJCR0dvMkFnQkJBQ1FGSXdVaEFVRUFKQVVnQVVFQmNVVUVRQ0FBUWF5OEEycEJBVG9BQUVFQUpBVkJDa0dzOVFKQkF4QU5Jd1VoQUVFQUpBVWdBRUVCY1VVRVFFRUFJUUFNQ1FzTEJVRUFKQVZCQ2lBRklBa1FCaG9qQlNFTFFRQWtCU0FMUVFGeFJRUkFJQVZCRkdvaUNTZ0NBQ0FHU1FSQVFRQWtCVUVGSUFBUVRxMGpCNjFDSUlhRUlSUWpCU0VDUVFBa0JTQUNRUUZ4RFFNZ0FFR0l2QU5xS1FNQUlCUlJCRUFnQUVHUXZBTnFLUU1BSUJSUkJFQkJBQ0VBREFzTEN5QUJRUUEyQWtRZ0FVRTNOZ0pJSUFGQlFHdEJBVFlDQUNBQklBQkJHR28yQWdCQkFDUUZJd1VoQUVFQUpBVWdBRUVCY1EwRFFRQWtCVUVLUWF6MUFrRUJFQTBqQlNFQVFRQWtCU0FBUVFGeERRTkJBQ0VBREFrTFFRQWtCVUVQSUFVUUJTRVJJd1VoQVVFQUpBVWdBVUVCY1VVRVFFRUFKQVZCQXlBRkVFNnRJd2V0UWlDR2hDRVVJd1VoQVVFQUpBVWdBVUVCY1VVRVFDQUFRWnltQVdvaUN5QVVQZ0lBUVFBa0JVRURJQVVRVHEwakI2MUNJSWFFSVJRakJTRUJRUUFrQlNBQlFRRnhSUVJBSUFCQm9LWUJhaUlNSUJTbklnRTJBZ0FnRHlBQlFRSjJRUUZ4T2dBQUlBQkJwS1lCYWlJUElBWTJBZ0FnQUVITTh3QnFJZ1lnQ3lnQ0FEWUNBQUpBSUFJb0FnQWdFVWNpRVFSQUlBcEJBRFlDUkNBS1FSZzJBa2dnQ2tGQWEwRUJOZ0lBSUFvZ0FFRVlhaUlCTmdJQVFRQWtCU01GSVFwQkFDUUZBa0FnQ2tFQmNVVUVRQ0FBUWF5OEEyb2lDa0VCT2dBQVFRQWtCVUVLUWF6MUFrRURFQTBqQlNFVFFRQWtCU0FUUVFGeERRRWdDa0VCT2dBQVFRQWtCVUVLUWF6MUFrRURFQTBqQlNFS1FRQWtCU0FLUVFGeERRRWdDRVVFUUNBTUtBSUFJUUVNQkFzZ0VFRUFOZ0pFSUJCQkJEWUNTQ0FRSUFFMkFnQWdFRUZBYTBFQ05nSUFJQkFnQVRZQ0JFRUFKQVVqQlNFQlFRQWtCU0FCUVFGeERRRWdBRUd0dkFOcVFRRTZBQUJCQUNFQURBOExDeEFYSVFBTURnc0xBa0FnQVVFQmNRUkFRUUFrQlVFRElBVVFUcTBqQjYxQ0lJYUVJUlFqQlNFQlFRQWtCUUpBSUFGQkFYRkZCRUFnRkNBUEtBSUFyVlFFUUNBTUtBSUFJUUVNQkFzZ0RrRUFOZ0pFSUE1QkdEWUNTQ0FPUVVCclFRRTJBZ0FnRGlBQVFSaHFOZ0lBUVFBa0JTTUZJUUZCQUNRRklBRkJBWEVOQVNBQVFheThBMnBCQVRvQUFFRUFKQVZCQ2tHczlRSkJBeEFOSXdVaEFFRUFKQVVnQUVFQmNVVUVRRUVBSVFBTUVBc0xDeEFYSVFBTURnVkNBQ0VVQ3dzQ1FBSkFJQUZCQW5GRkRRQkJBQ1FGUVFNZ0JSQk9yU01IclVJZ2hvUWhGU01GSVFGQkFDUUZJQUZCQVhGRkRRQU1BUXNnQUVHSXZBTnFJaEFwQXdBaEZpQVBLQUlBSVFGQkFDUUZRUXNnQUNBQkVBWWhBU01GSVE1QkFDUUZJQTVCQVhFTkFDQUFRWkM4QTJvaURpQVdJQlY4SUFHdGZEY0RBQUpBQWtBQ1FBSkFBa0FnQ3lnQ0FDSUtRUUZyRGdVQkFnSUFBd1FMSUFCQitLWUJhaUlCSUFJcEFnQTNBZ0FnQVNBQ0tRSUlOd0lJSUFFZ0FpZ0NFRFlDRUVFQUpBVkJBeUFGRUU2dEl3ZXRRaUNHaENFVUl3VWhBVUVBSkFVQ1FDQUJRUUZ4UlFSQUlCU25CRUFnQkVFQU5nSkVJQVJCSURZQ1NDQUVJQUJCR0dvaUFEWUNBQ0FFUVVCclFRSTJBZ0FnQkNBQU5nSUVRUUFrQlNNRklRQkJBQ1FGSUFCQkFYRU5Ba0VBSkFWQkNrR3M5UUpCQVJBTkl3VWhBRUVBSkFVZ0FFRUJjUTBDUVFBaEFBd1RDMEVBSkFWQkF5QUZFRTZ0SXdldFFpQ0doQ0VVSXdVaEFVRUFKQVVDUUNBQlFRRnhSUVJBSUFCQmpLY0JhaUlCSUJTblFRRnhPZ0FBUVFBa0JVRUxJQVVRQlNFQ0l3VWhCRUVBSkFVZ0JFRUJjUTBCSUFCQmtLY0JhaUFDUWY4QmNUWUNBQ0FDUWY4QmNVRVlTZ1JBSUFOQkFEWUNSQ0FEUVNBMkFrZ2dBeUFBUVJocUlnQTJBZ0FnQTBGQWEwRUNOZ0lBSUFNZ0FEWUNCRUVBSkFVakJTRUFRUUFrQlNBQVFRRnhEUUpCQUNRRlFRcEJyUFVDUVFFUURTTUZJUUJCQUNRRklBQkJBWEVOQWtFQUlRQU1GUXRCQUNRRlFSSWdCU0FBUVpTbkFXcEJFQkFIR2lNRklRSkJBQ1FGSUFKQkFYRU5BUUpBSUFFc0FBQUVRRUVBSkFWQkVpQUZJQUJCcEtjQmFpSUNRUWdRQnhvakJTRUVRUUFrQlNBRVFRRnhEUU5CQUNRRlFSSWdCU0FOUVFRUUJ4b2pCU0VFUVFBa0JTQUVRUUZ4QkVBUUZ5RUFCVUVBSkFWQkhpQUhFQXdqQlNFRVFRQWtCUUpBQWtBZ0JFRUJjUTBBUVFBa0JVRUpJQWNnQWtFSUVBNGpCU0VDUVFBa0JTQUNRUUZ4RFFCQkFDUUZRUTBnQnlBREVBMGpCU0VDUVFBa0JTQUNRUUZ4QkVBUUZ5RUFCU0FCSUEwZ0EwRUVFR3RGT2dBQURBVUxEQUVMRUJjaEFBc0xEQmNMQ3lBU1FRRTZBQUFNQndzTEVCY2hBQXdUQ3dzUUZ5RUFEQkVMUVFBa0JVRWJJQUJCdUtZQmFpSURFQXdqQlNFQlFRQWtCU0FCUVFGeERRTWdBeUFDS1FJQU53SUFJQU1nQWlrQ0NEY0NDQ0FESUFJb0FoQTJBaEJCQUNRRlFRTWdCUkJPclNNSHJVSWdob1FoRlNNRklRRkJBQ1FGQWtBZ0FVRUJjVVVFUUNBQVFaMjhBMm9pQkNBVnB5SUNRUUZ4SWdFNkFBQWdBRUdjdkFOcUlBSkJBblpCQVhFNkFBQWdBRUdmdkFOcUlBSkJCSFpCQVhFNkFBQWdBRUdqdkFOcUlBSkJBM1pCQVhFNkFBQWdBRUdndkFOcVFRQTZBQUFnQUVHaXZBTnFRUUU2QUFBZ0FrRUNjUVIvUVFBa0JVRURJQVVRVHEwakI2MUNJSWFFSVJVakJTRUJRUUFrQlNBQlFRRnhEUUlnQkN3QUFDRUJJQlduQlVFQUN5RUNJQUJCd0x3RGFpQUNOZ0lBSUFCQm9id0RhaUFDUlNBQlFmOEJjVUVBUjNFNkFBQWdGRUlBVWdSQVFRQWtCVUVGSUFBZ0JTQVVweUFERUE4akJTRUJRUUFrQlNBQlFRRnhEUUlMSUFCQjFxWUJhaXdBQUVVTkJDQUFRZGltQVdvaUFTa0RBRUlBVVEwRUlBQkJyUE1BYWlnQ0FFR1FnQUZxS0FJQVJRMEVJQkFwQXdBaEZDQU9LUU1BSVJVZ0JpZ0NBQ0VDUVFBa0JVRUtJQUJCMlBNQWFpSURJQUJCQUJBT0l3VWhCRUVBSkFVZ0JFRUJjUTBCSUFFcEF3QWhGa0VBSkFWQkFTQURJQmFuSUJaQ0lJaW5FRThqQlNFQlFRQWtCU0FCUVFGeERRRWdFQ0FVTndNQUlBNGdGVGNEQUNBR0lBSTJBZ0FNQkFzTEVCY2hBQXdRQ3lBQVFiQ25BV29oQVNBQVFmQ3RBbW9oQTBFQUpBVkJDQ0FLUVFKR0JIOGdBUVVnQXlJQkMwRUFFQTBqQlNFRFFRQWtCU0FEUVFGeEJFQVFGeUVBREJBTElBRWdBaWtDQURjQ0FDQUJJQUlwQWdnM0FnZ2dBU0FDS0FJUU5nSVFJQXNvQWdCQkFrWWhDaUFCUWVuQkFHcEJBVG9BQUNBQlFjakFBR29pQWlBVk53TUFRUUFrQlVFRElBVVFUcTBqQjYxQ0lJYUVJUlVqQlNFRFFRQWtCUUpBSUFOQkFYRkZCRUFnQVVHRXdRQnFJZ01nRlQ0Q0FFRUFKQVZCQXlBRkVFNnRJd2V0UWlDR2hDRVZJd1VoQkVFQUpBVWdCRUVCY1EwQklBRkIwTUFBYWlJRUlCVTNBd0FnQVVHS3dRQnFJQU1vQWdCQkNIRWlDMEVEZGpvQUFDQUxCRUFnQkVMLy8vLy85Ly8vLy84QU53TUFRdi8vLy8vMy8vLy8vd0FoRlFzZ0FVSFl3QUJxSUFJcEF3QWlGaUFWVlFSK0lCWUZJQlVMTndNQVFRQWtCVUVESUFVUVRxMGpCNjFDSUlhRUlSVWpCU0VDUVFBa0JTQUNRUUZ4RFFFZ0FVRWNhaUlMSUJVK0FnQWdBeWdDQUNJQ1FRSnhCRUJCQUNRRlFRd2dCUkFGSVFJakJTRUVRUUFrQlNBRVFRRnhEUUpCQUNRRlFRNGdBVUd3d0FCcUlBSVFCaG9qQlNFQ1FRQWtCU0FDUVFGeERRSWdBeWdDQUNFQ0N5QUJRZURBQUdvaUJFRUFOZ0lBSUFKQkJIRUVRQ0FFUVFJMkFnQkJBQ1FGUVF3Z0JSQUZJUUlqQlNFRVFRQWtCU0FFUVFGeERRSWdBVUhrd0FCcUlBSTJBZ0FMSUFGQjhNRUFha0VBTmdJQVFRQWtCVUVESUFVUVRxMGpCNjFDSUlhRUlSVWpCU0VDUVFBa0JRSkFJQUpCQVhGRkJFQWdBU0FWcHlJRVFRZDJRUWR4T2dBYUlBRkJHV29pQmlBRVFUOXhRVEpxT2dBQVFRQWtCVUVESUFVUVRxMGpCNjFDSUlhRUlSVWpCU0VDUVFBa0JTQUNRUUZ4RFFFZ0FVRVlhaUlJSUJVOEFBQkJBQ1FGUVFNZ0JSQk9yU01IclVJZ2hvUWhGU01GSVFKQkFDUUZJQUpCQVhFRVFCQVhJUUFNRkFzZ0ZhY2hBaUFCUWVqQkFHb2dEQ2dDQUVFR2RrRUJjVG9BQUNBQlFlekJBR29pREVFQ05nSUFBa0FDUUFKQUFrQUNRQ0FJTEFBQURnSUJBQUlMUVFFaENBd0NDMEVBSVFnTUFRc01BUXNnRENBSU5nSUFDeUFCUVlqQkFHb2dBU2dDQ0NJSVFRTjJRUUZ4T2dBQUlBRkJpY0VBYWlBSVFRUjJRUUZ4T2dBQUlBRkI2c0VBYWlBSVFRVjJRUUZ4T2dBQUlBRkI0TUVBYWlBS0lBUkJ3QUJ4UVFCSGNUb0FBQ0FCUWVIQkFHb2lDQ0FES0FJQVFRRnhJZ002QUFCQmdJQUlJQVJCQ25aQkQzRjBJUVFnQVVIa3dRQnFJQU1FZjBFQUJTQUVDellDQUNBQlFZekJBR29nQVVHTHdRQnFMQUFBQkg5QkJRVkJBQXMyQWdCQkFDUUZRUklnQlNBTklBSkIvejlKQkg4Z0FnVkIvejhpQWdzUUJ4b2pCU0VEUVFBa0JRSkFJQU5CQVhGRkJFQWdEU0FDYWtFQU9nQUFRUUFrQlVFVklBMGdBVUVnYWlJQ1FZQVFFQWNhSXdVaEEwRUFKQVVnQTBFQmNRMEJJQlJDQUZJRVFFRUFKQVZCQlNBQUlBVWdGS2NnQVJBUEl3VWhBVUVBSkFVZ0FVRUJjUTBDQ3dKQUlBb0VRQ0FBUWF6ekFHb2lBeWdDQUVHTWhRTnFLQUlBSWdGQkFVWUVRRUVBSkFWQkRTQUNFQVVhSXdVaEFVRUFKQVVnQVVFQmNRMEVJQU1vQWdCQmpJVURhaWdDQUNFQkN5QUJRUUpHQkVCQkFDUUZRUTRnQWhBRkdpTUZJUUZCQUNRRklBRkJBWEVOQkFzQ1FDQUFRWmk4QTJvaUJDZ0NBRUVDUmdSQUlBWXRBQUJCRkU0TkFTQUxLQUlBUVJCeFJRMEJJQWhCQVRvQUFBc0xJQXdvQWdBaUFVRUNSZ1JBSUFzZ0NDd0FBQVIvUVJBRlFTQUxOZ0lBUVFJaEFRc2dBaUVEQTBBQ1FBSkFBa0FDUUFKQUFrQWdBeWdDQUE1ZEFBTURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TUNBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TUJBd3NNQndzZ0JDZ0NBRUVEUncwQ0lBRU5BeUFEUWQ4QU5nSUFRUUFoQVF3REN3d0JDd3dCQ3lBRFFTODJBZ0FMSUFOQkJHb2hBd3dBQ3dBRlFRQWtCVUVHSUFKQmpBNFFCaUVCSXdVaEEwRUFKQVVnQTBFQmNRMERJQUVOQVNBQVFaNjhBMnBCQVRvQUFBc0xJQkVFUUNBSFFRQTJBa1FnQjBFYU5nSklJQWNnQUVFWWFqWUNBQ0FIUVVCclFRSTJBZ0FnQnlBQ05nSUVRUUFrQlNNRklRRkJBQ1FGSUFGQkFYRU5BZ3NNQndzTEVCY2hBQXdUQ3dzUUZ5RUFEQkVMQ3hBWElRQU1Ed3NnQUVHd3JRSnFJZ0VnQWlrQ0FEY0NBQ0FCSUFJcEFnZzNBZ2dnQVNBQ0tBSVFOZ0lRUVFBa0JVRURJQVVRVHEwakI2MUNJSWFFSVJRakJTRUJRUUFrQlNBQlFRRnhCRUFRRnlFQURBOEZJQUJCekswQ2FpQVVwMEVCY1RvQUFDQUFRYyt0QW1wQkFEb0FBQ0FBUWMydEFtcEJBRG9BQUNBQVFjNnRBbXBCQURvQUFBc0xJQTRwQXdBZ0VDa0RBRlVFUUNBSktBSUFJUUFNRFFzZ0RVRUFOZ0pFSUExQkdEWUNTQ0FOUVVCclFRRTJBZ0FnRFNBQVFSaHFOZ0lBUVFBa0JTTUZJUUZCQUNRRklBRkJBWEVOQUNBQVFheThBMnBCQVRvQUFFRUFKQVZCQ2tHczlRSkJBeEFOSXdVaEFFRUFKQVVnQUVFQmNVVUVRRUVBSVFBTURRc0xFQmNoQUF3TUN3c0xFQmNoQUF3SkN3c0xFQmNoQUF3R0N3c1FGeUVBREFRTEN3c1FGeUVBREFFTElBVW9BZ0FpQVVVRVFDQUhKQVFnQUE4TElBRVFVaUFISkFRZ0FBOExJQVVvQWdBaUFVVUVRQ0FBRUI0TElBRVFVaUFBRUI1QkFBdmRRd0liZndKK0l3UWhBU01FUWJEREFHb2tCQ0FCSWhCQnFBTnFJUTBnRUVIWUFtb2hDeUFRUVl3Q2FpRU9JQkJCd0FGcUlRSWdFRUgwQUdvaEFTQVFRU2hxSVFNZ0VFRUlhaUlFSUFBUXVBRUNRQUpBQWtBQ1FDQUFRYVM4QTJvaUNDd0FBRVVOQUNBQVFZaThBMm9pQlNrREFDQUFRYWk4QTJvb0FnQ3RRZ2Q4VncwQVFRQWtCVUVjSUFBUURDTUZJUVpCQUNRRklBWkJBWEVOQVNBQUtBSUFLQUlNSVFaQkFDUUZJQVlnQUNBTlFRZ1FCeUVHSXdVaEIwRUFKQVVDUUNBSFFRRnhSUVJBSUFaQkNFWUVRQ0FBUWF6ekFHb29BZ0JCcU1BQ2FpRURRUUFrQlVFQklBQkJuTUFBYWlJRlFRQkJCQ0FESUExQkFFRUFRUUJCQUJBS0dpTUZJUU5CQUNRRklBTkJBWEVOQWlBRUlBVTJBaHhCQVNFV0RBTUxRUUFrQlVFRklBQVFUcTBqQjYxQ0lJYUVJUndqQlNFQlFRQWtCU0FCUVFGeFJRUkFBa0FDUUNBRktRTUFJQnhTRFFBZ0FFR1F2QU5xS1FNQUlCeFNEUUFNQVFzZ0EwRUFOZ0pFSUFOQk56WUNTQ0FEUVVCclFRRTJBZ0FnQXlBQVFSaHFOZ0lBUVFBa0JTTUZJUUJCQUNRRklBQkJBWEVOQTBFQUpBVkJDa0dzOVFKQkFSQU5Jd1VoQUVFQUpBVWdBRUVCY1EwREMwRUFJUUFNQlFzTEN4QVhJUUFNQXd0QkFDUUZRUW9nQkVFSEVBWWFJd1VoQTBFQUpBVWdBMEVCY1EwQUlBUkJGR29pRnlnQ0FFVUVRRUVBSkFWQkJTQUFFRTZ0SXdldFFpQ0doQ0VjSXdVaEFrRUFKQVVnQWtFQmNRMEJJQUJCaUx3RGFpa0RBQ0FjVVFSQUlBQkJrTHdEYWlrREFDQWNVUVJBUVFBaEFBd0VDd3NnQVVFQU5nSkVJQUZCTnpZQ1NDQUJRVUJyUVFFMkFnQWdBU0FBUVJocU5nSUFRUUFrQlNNRklRQkJBQ1FGSUFCQkFYRU5BVUVBSkFWQkNrR3M5UUpCQVJBTkl3VWhBRUVBSkFVZ0FFRUJjUTBCUVFBaEFBd0NDMEVBSkFWQkNpQUVFQVVoQVNNRklRTkJBQ1FGSUFOQkFYRU5BQ0FBUVppbUFXb2lCeUFCUWYvL0EzRTJBZ0FnQUVHb3BnRnFJZ1pCQURvQUFFRUFKQVZCQ3lBRUVBVWhBeU1GSVFGQkFDUUZBa0FnQVVFQmNVVUVRQ0FEUWY4QmNTRUJRUUFrQlVFS0lBUVFCU0VLSXdVaEJVRUFKQVVnQlVFQmNVVUVRQ0FBUWFDbUFXb2lCU0FLUWYvL0EzRWlDallDQUNBR0lBcEJEblpCQVhFNkFBQkJBQ1FGUVFvZ0JCQUZJUVlqQlNFS1FRQWtCU0FLUVFGeFJRUkFJQUJCcEtZQmFpSUtJQVpCLy84RGNTSUpOZ0lBSUFCQm5LWUJhaUlVSUFFMkFnQWdCa0gvL3dOeFFRZElCRUFnQWtFQU5nSkVJQUpCR0RZQ1NDQUNRVUJyUVFFMkFnQWdBaUFBUVJocU5nSUFRUUFrQlNNRklRRkJBQ1FGSUFGQkFYRU5CQ0FBUWF5OEEycEJBVG9BQUVFQUpBVkJDa0dzOVFKQkF4QU5Jd1VoQUVFQUpBVWdBRUVCY1EwRVFRQWhBQXdHQ3dKQUFrQUNRQUpBQWtBQ1FBSkFJQU5CR0hSQkdIVkI4d0JyRGdrQUFRUUVCQVFFQWdNRUMwRUJJUUVNQkF0QkFpRUJEQU1MUVFNaEFRd0NDMEVGSVFFTUFRc01BUXNnRkNBQk5nSUFDeUFBUWN6ekFHb2dBVFlDQUFKQUFrQUNRQUpBSUFGQkFXc09kUUVDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBQUlMUVFBa0JVRUtJQVJCQmhBR0dnd0NDeUFGS0FJQVFRSnhSUTBBUVFBa0JVRUtJQVJCQmhBR0dnd0JDMEVBSkFWQkNpQUVJQWxCZVdvUUJob0xJd1VoQVVFQUpBVWdBVUVCY1EwRElBQkJpTHdEYWlJWUtRTUFJUndnQ2lnQ0FDRUJRUUFrQlVFTElBQWdBUkFHSVFFakJTRUNRUUFrQlNBQ1FRRnhSUVJBSUFCQmtMd0RhaUlLSUJ3Z0FhMThOd01BQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBZ0ZDZ0NBQ0lCUVFGckRua0FBUUVJQWdnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBTUZCd1lFQ0F0QkFDUUZRUnNnQUVHNHBnRnFJZ0VRRENNRklRSkJBQ1FGSUFKQkFYRU5EU0FCSUFjcEFnQTNBZ0FnQVNBSEtRSUlOd0lJSUFFZ0J5Z0NFRFlDRUVFQUpBVkJDaUFFRUFVaEFTTUZJUUpCQUNRRklBSkJBWEVORFNBQVFjeW1BV29pQXlBQk93RUFRUUFrQlVFTUlBUVFCU0VDSXdVaEFVRUFKQVVnQVVFQmNRME5JQUJCMEtZQmFpQUNOZ0lBSUFCQm5id0RhaUFBUWNDbUFXb29BZ0FpQVVFQmNUb0FBQ0FBUVp5OEEyb2dBVUVEZGtFQmNUb0FBQ0FBUVorOEEyb2dBVUVDZGtFQmNUb0FBQ0FBUWFPOEEyb2dBVUVHZGtFQmNUb0FBQ0FJSUFGQkIzWkJBWEU2QUFBZ0FFR2d2QU5xSUFJRWYwRUJCU0FETGdFQVFRQkhDMEVCY1RvQUFDQUFRZFNtQVdvZ0FVRUJka0VCY1RvQUFDQUFRYUc4QTJvZ0FVRUlka0VCY1RvQUFDQUFRYUs4QTJvZ0FVRUVka0VCY1RvQUFBd0lDeUFBUWJDbkFXb2hBeUFBUWZDdEFtb2hBa0VBSkFWQkNDQUJRUUpHSWc4RWZ5QURCU0FDSWdNTFFRQVFEU01GSVFGQkFDUUZJQUZCQVhGRkJFQWdBeUFIS1FJQU53SUFJQU1nQnlrQ0NEY0NDQ0FESUFjb0FoQTJBaEFnQTBHSXdRQnFJQU5CQ0dvaUNTZ0NBQ0lCUVFGeE9nQUFJQU5CaWNFQWFpQUJRUUYyUVFGeE9nQUFJQU5CaThFQWFpSUdJQUZCQW5aQkFYRTZBQUFnQTBHUXdRQnFJQUZCQ25aQkFYRTZBQUFnQTBIZ3dRQnFJQThFZjBFQUlRVWdBVUVFZGtFQmNRVWdBVUVRY1VFQVJ5RUZRUUFMT2dBQUlBTkI2c0VBYWlBRlFRRnhPZ0FBSUFOQjRjRUFhaUlNSUFGQjRBRnhRZUFCUmlJQ09nQUFJQU5CNU1FQWFpQUNCSDlCQUFWQmdJQUVJQUZCQlhaQkIzRjBDellDQUNBRFFlTEJBR29pR1NBQlFRTjJRUUZ4T2dBQUlBTkI0OEVBYWlBQlFRdDJRUUZ4T2dBQVFRQWtCVUVNSUFRUUJTRUJJd1VoQWtFQUpBVWdBa0VCY1VVRVFDQURRUlJxSWhvZ0FUWUNBRUVBSkFWQkRDQUVFQVVoQWlNRklRRkJBQ1FGQWtBZ0FVRUJjVVVFUUVFQUpBVkJDeUFFRUFVaEFTTUZJUVZCQUNRRklBVkJBWEZGQkVBZ0EwRVlhaUlJSUFFNkFBQWdBMEhnd0FCcVFRSTJBZ0JCQUNRRlFRd2dCQkFGSVFFakJTRUZRUUFrQlNBRlFRRnhEUUlnQTBIa3dBQnFJQUUyQWdCQkFDUUZRUXdnQkJBRklSc2pCU0VCUVFBa0JRSkFJQUZCQVhGRkJFQkJBQ1FGUVFzZ0JCQUZJUUVqQlNFRlFRQWtCU0FGUVFGeERRRWdBMEVaYWlJUklBRTZBQUJCQUNRRlFRc2dCQkFGSVFFakJTRUZRUUFrQlNBRlFRRnhEUUVnQXlBQlFmOEJjVUhRQVdvNkFCcEJBQ1FGUVFvZ0JCQUZJUklqQlNFQlFRQWtCUUpBSUFGQkFYRkZCRUJCQUNRRlFRd2dCQkFGSVFVakJTRUJRUUFrQlNBQlFRRnhEUUVnQTBFY2FpSVRJQVUyQWdBZ0EwR013UUJxSWhWQkFEWUNBQ0FHTEFBQUJFQWdGUUovQWtBQ1FBSkFBa0FnRVN3QUFFRU5hdzRPQUFNQkF3TURBd0lEQXdNREF3SURDMEVCREFNTFFRSU1BZ3RCQXd3QkMwRUVDellDQUFzZ0VrSC8vd054SVFFZ0EwSHN3UUJxSWhKQkFqWUNBQUpBQWtBQ1FBSkFJQWdzQUFBaUJrRURhdzREQUFFQUFRdEJBU0VJREFFTElBWkIvd0Z4UVFaSUJFQkJBQ0VJREFFTElBTkI4TUVBYWtFQU5nSUFEQUVMSUJJZ0NEWUNBQ0FEUWZEQkFHb2lDRUVBTmdJQUlBWkJBMFlnQlVHQTRBTnhRWURBQWtaeFJRMEFJQWhCQVRZQ0FDQURRZlRCQUdwQkFEWUNBQXNnQTBIb3dRQnFJQVZCQUVnZ0QwRUJjM0U2QUFBZ0EwSHB3UUJxSUFrb0FnQkJnQUp4SWdWQkNIWTZBQUFDUUNBRkJFQkJBQ1FGUVF3Z0JCQUZJUVVqQlNFR1FRQWtCUUpBSUFaQkFYRkZCRUJCQUNRRlFRd2dCQkFGSVFZakJTRUlRUUFrQlNBSVFRRnhEUUVnQmlBQ2NTRUlEQU1MQ3hBWElRQU1HZ1ZCQUNFRlFRQWhCaUFDSVFnTEN5QURRWXJCQUdvZ0NFRi9SaUlJT2dBQUlBTkJ5TUFBYWlJVklBV3RRaUNHSUJvb0FnQ3RoRGNEQUNBR3JVSWdoaUFDcllRaEhDQURRZERBQUdvZ0NBUitRdi8vLy8vMy8vLy8vd0FGSUJ3TE53TUFRUUFrQlVFU0lBUWdEU0FCUWY4L1NRUi9JQUVGUWY4L0N5SUNFQWNhSXdVaEJVRUFKQVVDZndKQUlBVkJBWEVOQUNBTklBSnFRUUE2QUFBQ1FDQVBCRUFDUUFKQUlBa29BZ0JCZ0FSeEJFQkJBQ1FGUVIwZ0N4QU1Jd1VoQWtFQUpBVUNRQ0FDUVFGeFJRUkFJQTBRYmtFQmFpRUNRUUFrQlVFRUlBc2dEU0FOSUFKcUlBRWdBbXNnQTBFZ2FpSUJRWUFRRUJFakJTRUNRUUFrQlNBQ1FRRnhEUUVnQVNnQ0FFVU5Bd3dFQ3dzUUZ3d0dCU0FEUVNCcUlnRkJBRFlDQUFzTFFRQWtCVUVFSUEwZ0FVR0FFRUVCRUE4akJTRUNRUUFrQlNBQ1FRRnhEUU1MSUFCQnJQTUFhaUlGS0FJQVFZeUZBMm9vQWdBaUFrRUJSZ1JBUVFBa0JVRU5JQUVRQlJvakJTRUNRUUFrQlNBQ1FRRnhEUU1nQlNnQ0FFR01oUU5xS0FJQUlRSUxJQUpCQWtZRVFFRUFKQVZCRGlBQkVBVWFJd1VoQWtFQUpBVWdBa0VCY1EwREN3SkFJQUJCbUx3RGFpSUdLQUlBUVFKR0JFQWdFUzBBQUVFVVRnMEJJQk1vQWdCQkVIRkZEUUVnREVFQk9nQUFDd3NnRWlnQ0FDSUZRUUpHQkg4Z0V5QU1MQUFBQkg5QkVBVkJJQXMyQWdBZ0FTRUNRUUlGSUFFaEFpQUZDeUVCQTBBQ1FBSkFBa0FDUUFKQUFrQWdBaWdDQUE1ZEFBTURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TUNBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TUJBd3NNQndzZ0JpZ0NBRUVEUncwQ0lBRU5BeUFDUWQ4QU5nSUFRUUFoQVF3REN3d0JDd3dCQ3lBQ1FTODJBZ0FMSUFKQkJHb2hBZ3dBQ3dBRlFRQWtCVUVSSUEwZ0EwRWdhaUlJUVlBUUVBY2FJd1VoQWtFQUpBVWdBa0VCY1EwQ0FrQUNRQ0FES0FJTUlBRnJRVmhxSUFrb0FnQkJCM1pCQ0hGQkNITnFJZ0pCQUV3TkFDQURRYURBQUdvaEJpQURRYWpBQUdvaUR5Z0NBQ0VGSUFOQnBNQUFhaUlNSUFJMkFnQWdCU0FDU1FSQUlBTkJyTUFBYWlnQ0FDSUJRUUJISUFJZ0FVdHhCSDlCQUNRRklCQWdBVFlDQUVFQ1FhejFBa0hZR3lBUUVBNGpCU0VCUVFBa0JTQUJRUUZ4RFFOQkFDUUZRUlJCclBVQ0VBd2pCU0VCUVFBa0JTQUJRUUZ4RFFNZ0R5Z0NBQ0VGSUF3b0FnQUZJQUlMSVFFZ0JpZ0NBQ0FCSUFWQklHb2dCVUVDZG1vaUJVc0VmeUFCQlNBRklnRUxFRmNpQlVVRVFFRUFKQVZCRkVHczlRSVFEQ01GSVF4QkFDUUZJQXhCQVhFTkF3c2dCaUFGTmdJQUlBOGdBVFlDQUFzZ0JpZ0NBQ0VCUVFBa0JVRVNJQVFnQVNBQ0VBY2FJd1VoQVVFQUpBVWdBVUVCY1EwQlFRQWtCVUVHSUFoQnJBNFFCaUVCSXdVaEFrRUFKQVVnQWtFQmNRMEJJQUVOQUNBQVFiRHpBR29pQWlBR0tBSUFJZ0V0QUFsQkNIUWdBUzBBQ0hJZ0FTMEFDa0VRZEhJZ0FTMEFDMEVZZEhLdFFnbUdOd01BSUFBb0FnQW9BaFFoQVVFQUpBVWdBU0FBRUU2dEl3ZXRRaUNHaENFY0l3VWhBVUVBSkFVZ0FVRUJjUTBCSUFJcEF3QWhIVUVBSkFWQkFTQWRweUFkUWlDSXB5QWNweUFjUWlDSXB4Qk5JUVVqQlNFQlFRQWtCU0FCUVFGeERRRWdBRUc0OHdCcUlnRWdCVFlDQUNBQ0tRTUFJQnhDeUFGL2ZDRWRRUUFrQlVFQklCMm5JQjFDSUlpbklCeW5JQnhDSUlpbkVFMGhBaU1GSVFWQkFDUUZJQVZCQVhFTkFTQUNJQUVvQWdBaUFrd05BQ0FCSUFKQkFXbzJBZ0FMUVFBa0JVRUdJQWhCakE0UUJpRUJJd1VoQWtFQUpBVWdBa0VCY1EwQUlBRU5BaUFBUVo2OEEycEJBVG9BQUF3Q0N4QVhEQU1MQUFzZ0NTZ0NBRUdBQ0hFRVFFRUFKQVZCRWlBRUlBTkJrY0VBYWtFSUVBY2FJd1VoQVVFQUpBVWdBVUVCY1EwQkMwRUFKQVZCQ1NBRFFiREFBR29nR3hBTkl3VWhBVUVBSkFVZ0FVRUJjUTBBQWtBZ0NTZ0NBRUdBSUhFRVFFRUFKQVZCQ2lBRUVBVWhBU01GSVFKQkFDUUZJQUpCQVhFRVFCQVhEQVFMSUFCQjRPY0JhaUVKSUFCQjZPY0JhaUVHSUFCQjhPY0JhaUVJSUF0QkdHb2hBaUFMUVJScUlRVUNRQ0FCUWYvL0EzRWlEMEVNZGlJQlFRaHhCRUJCQUNRRlFRc2dDU0FMRUEwakJTRU1RUUFrQlNBTVFRRnhEUUVnQVVFRWNRUkFJQVVnQlNnQ0FFRUJhallDQUFzZ0FrRUFOZ0lBSUFGQkEzRWlEQVJBSUF4QkEzTWhFVUVBSVFFRFFFRUFKQVZCQ3lBRUVBVWhFeU1GSVJKQkFDUUZJQkpCQVhFTkF5QUNJQUlvQWdBZ0UwSC9BWEVnRVNBQmFrRURkSFJ5TmdJQUlBRkJBV29pQVNBTVNBMEFDd3RCQUNRRlFRd2dDU0FMRUEwakJTRUJRUUFrQlNBQlFRRnhEUUVMQWtBZ0QwRUlkaUlCUVFoeEJFQkJBQ1FGUVF3Z0JCQUZJUWtqQlNFTVFRQWtCU0FNUVFGeERRRkJBQ1FGUVFrZ0JpQUpFQTBqQlNFSlFRQWtCU0FKUVFGeERRRkJBQ1FGUVFzZ0JpQUxFQTBqQlNFSlFRQWtCU0FKUVFGeERRSWdBVUVFY1FSQUlBVWdCU2dDQUVFQmFqWUNBQXNnQWtFQU5nSUFJQUZCQTNFaUNRUkFJQWxCQTNNaERFRUFJUUVEUUVFQUpBVkJDeUFFRUFVaEVTTUZJUk5CQUNRRklCTkJBWEVOQkNBQ0lBSW9BZ0FnRVVIL0FYRWdEQ0FCYWtFRGRIUnlOZ0lBSUFGQkFXb2lBU0FKU0EwQUN3dEJBQ1FGUVF3Z0JpQUxFQTBqQlNFQlFRQWtCU0FCUVFGeERRSUxJQTlCQkhZaUFVRUljVVVOQTBFQUpBVkJEQ0FFRUFVaEJpTUZJUWxCQUNRRklBbEJBWEVOQUVFQUpBVkJDU0FJSUFZUURTTUZJUVpCQUNRRklBWkJBWEVOQUVFQUpBVkJDeUFJSUFzUURTTUZJUVpCQUNRRklBWkJBWEVOQVNBQlFRUnhCRUFnQlNBRktBSUFRUUZxTmdJQUN5QUNRUUEyQWdBZ0FVRURjU0lGQkVBZ0JVRURjeUVHUVFBaEFRTkFRUUFrQlVFTElBUVFCU0VKSXdVaEQwRUFKQVVnRDBFQmNRMERJQUlnQWlnQ0FDQUpRZjhCY1NBR0lBRnFRUU4wZEhJMkFnQWdBVUVCYWlJQklBVklEUUFMQzBFQUpBVkJEQ0FJSUFzUURTTUZJUUZCQUNRRklBRkJBWEVOQVF3REN4QVhEQVFMRUJjTUF3c0xJQW9nQ2lrREFDQVZLUU1BZkRjREFDQVpMQUFBUVFCSElRRkJBQ1FGUVF3Z0JDQUJFQVloQVNNRklRSkJBQ1FGQWtBZ0FrRUJjVVVFUUNBREtBSUFJQUZCLy84RGNVY0VRQ0FBUWF5OEEycEJBVG9BQUVFQUpBVkJDa0dzOVFKQkFSQU5Jd1VoQVVFQUpBVWdBVUVCY1EwQ0lCWU5GU0FPUVFBMkFrUWdEa0VhTmdKSUlBNGdBRUVZYWpZQ0FDQU9RVUJyUVFJMkFnQWdEaUFEUVNCcU5nSUVRUUFrQlNNRklRRkJBQ1FGSUFGQkFYRU5BZ3NNRkFzTEVCY01BUXNRRndzaEFBd1lDd3NRRnlFQURCWUxDeEFYSVFBTUZBc0xDeEFYSVFBTUVRc0xFQmNoQUF3UEN5QUFRYkN0QW1vaUFTQUhLUUlBTndJQUlBRWdCeWtDQ0RjQ0NDQUJJQWNvQWhBMkFoQWdBRUhNclFKcUlBQkJ1SzBDYWlnQ0FDSUJRUUZ4T2dBQUlBQkJ6YTBDYWlBQlFRRjJRUUZ4SWdJNkFBQWdBRUhPclFKcUlBRkJBblpCQVhFNkFBQWdBRUhQclFKcUlnTWdBVUVEZGtFQmNTSUJPZ0FBSUFKQi93RnhCRUJCQUNRRlFRd2dCQkFGSVFFakJTRUNRUUFrQlNBQ1FRRnhEUXdnQUVIRXJRSnFJQUUyQWdBZ0F5d0FBQ0VCQ3lBQlFmOEJjUVJBUVFBa0JVRUtJQVFRQlNFQkl3VWhBa0VBSkFVZ0FrRUJjUTBNSUFCQnlLMENhaUFCUWYvL0EzRWlBVFlDQUNBQVFjQzhBMm9nQVRZQ0FBc01CZ3NnQUVId3N3TnFJZ0VnQnlrQ0FEY0NBQ0FCSUFjcEFnZzNBZ2dnQVNBSEtBSVFOZ0lRUVFBa0JVRUtJQVFRQlNFQkl3VWhBa0VBSkFVZ0FrRUJjUTBLSUFCQmhMUURhaUFCT3dFQVFRQWtCVUVMSUFRUUJTRUJJd1VoQWtFQUpBVWdBa0VCY1EwS0lBQkJoclFEYWlBQk9nQUFRUUFrQlVFTElBUVFCU0VCSXdVaEFrRUFKQVVnQWtFQmNRMEtJQUJCaDdRRGFpQUJPZ0FBUVFBa0JVRUtJQVFRQlNFQkl3VWhBa0VBSkFVZ0FrRUJjUTBLSUFCQmlMUURhaUFCT3dFQURBVUxJQUJCMExRRGFpSUJJQWNwQWdBM0FnQWdBU0FIS1FJSU53SUlJQUVnQnlnQ0VEWUNFRUVBSkFWQkRDQUVFQVVoQVNNRklRSkJBQ1FGSUFKQkFYRU5DU0FBUWVTMEEyb2dBVFlDQUVFQUpBVkJDaUFFRUFVaEFTTUZJUUpCQUNRRklBSkJBWEVOQ1NBQVFlaTBBMm9nQVRzQkFFRUFKQVZCQ2lBRUVBVWhBU01GSVFKQkFDUUZJQUpCQVhFTkNTQUFRZXEwQTJvZ0FUc0JBQXdFQ3lBQVFiUzBBMm9pQVNBSEtRSUFOd0lBSUFFZ0J5a0NDRGNDQ0NBQklBY29BaEEyQWhCQkFDUUZRUXNnQkJBRklRRWpCU0VDUVFBa0JTQUNRUUZ4RFFnZ0FFSEl0QU5xSUFFNkFBQkJBQ1FGUVFzZ0JCQUZJUUVqQlNFQ1FRQWtCU0FDUVFGeERRZ2dBRUhKdEFOcUlBRTZBQUJCQUNRRlFRc2dCQkFGSVFFakJTRUNRUUFrQlNBQ1FRRnhEUWdnQUVIS3RBTnFJQUU2QUFCQkFDUUZRUXdnQkJBRklRRWpCU0VDUVFBa0JTQUNRUUZ4RFFnZ0FFSE10QU5xSUFFMkFnQU1Bd3NnQUVHTXRBTnFJZ0VnQnlrQ0FEY0NBQ0FCSUFjcEFnZzNBZ2dnQVNBSEtBSVFOZ0lRUVFBa0JVRU1JQVFRQlNFQkl3VWhBa0VBSkFVZ0FrRUJjUTBISUFCQm9MUURhaUlDSUFFMkFnQkJBQ1FGUVFzZ0JCQUZJUUVqQlNFRFFRQWtCU0FEUVFGeERRY2dBRUdrdEFOcUlBRTZBQUJCQUNRRlFRb2dCQkFGSVFFakJTRURRUUFrQlNBRFFRRnhEUWNnQUVHbXRBTnFJZ01nQVRzQkFFRUFKQVZCRENBRUVBVWhBU01GSVFWQkFDUUZJQVZCQVhFTkJ5QUFRYWkwQTJvZ0FUWUNBRUVBSkFWQkVpQUVJQUJCckxRRGFrRUlFQWNhSXdVaEFVRUFKQVVnQVVFQmNRMEhJQW9nQ2lrREFDQUNLQUlBclh3M0F3QWdBRUd3OHdCcUlBTXZBUUJCQ1hTdE53TUFEQUlMSUFCQjBLMENhaUlCSUFjcEFnQTNBZ0FnQVNBSEtRSUlOd0lJSUFFZ0J5Z0NFRFlDRUVFQUpBVkJEQ0FFRUFVaEFpTUZJUU5CQUNRRklBTkJBWEVOQmlBQVFlU3RBbW9nQWpZQ0FDQUtJQW9wQXdBZ0FxMThOd01BUVFBa0JVRUtJQVFRQlNFQ0l3VWhBMEVBSkFVZ0EwRUJjUTBHSUFCQjZLMENhaUlESUFJN0FRQkJBQ1FGUVFzZ0JCQUZJUUlqQlNFRlFRQWtCU0FGUVFGeERRWWdBRUhxclFKcUlBSTZBQUFDUUFKQUFrQUNRQUpBSUFNdUFRQkJnQUpyRGdZQ0FBRUNBZ01FQ3lBQVFleTBBMm9pQWlBQktRSUFOd0lBSUFJZ0FTa0NDRGNDQ0NBQ0lBRXBBaEEzQWhBZ0FpQUJMZ0VZT3dFWUlBSWdBU3dBR2pvQUdrRUFKQVZCQ2lBRUVBVWhBU01GSVFKQkFDUUZJQUpCQVhFTkNpQUFRWWkxQTJvaUFpQUJPd0VBUVFBa0JVRUtJQVFRQlNFRkl3VWhBVUVBSkFVZ0FVRUJjUTBLSUFCQmlyVURhaUlESUFVN0FRQWdBaTRCQUNJQlFmLy9BM0ZCL3dGS0JFQWdBa0gvQVRzQkFFSC9BU0VCQ3lBRlFmLy9BM0ZCL3dGS0JFQWdBMEgvQVRzQkFBdEJBQ1FGUVJJZ0JDQUFRWXkxQTJvZ0FVSC8vd054RUFjYUl3VWhBVUVBSkFVZ0FVRUJjUTBLSUFNdkFRQWhBVUVBSkFWQkVpQUVJQUJCakxjRGFpQUJFQWNhSXdVaEFVRUFKQVVnQVVFQmNRMEtJQUJCakxVRGFpQUNMd0VBYWtFQU9nQUFJQUJCakxjRGFpQURMd0VBYWtFQU9nQUFEQVVMSUFCQmpMa0RhaUlDSUFFcEFnQTNBZ0FnQWlBQktRSUlOd0lJSUFJZ0FTa0NFRGNDRUNBQ0lBRXVBUmc3QVJnZ0FpQUJMQUFhT2dBYVFRQWtCVUVNSUFRUUJTRUJJd1VoQWtFQUpBVWdBa0VCY1EwSklBQkJxTGtEYWlBQk5nSUFRUUFrQlVFTUlBUVFCU0VCSXdVaEFrRUFKQVVnQWtFQmNRMEpJQUJCckxrRGFpQUJOZ0lBREFRTElBQkJzTGtEYWlJQ0lBRXBBZ0EzQWdBZ0FpQUJLUUlJTndJSUlBSWdBU2tDRURjQ0VDQUNJQUV1QVJnN0FSZ2dBaUFCTEFBYU9nQWFRUUFrQlVFTUlBUVFCU0VCSXdVaEFrRUFKQVVnQWtFQmNRMElJQUJCekxrRGFpQUJOZ0lBUVFBa0JVRUxJQVFRQlNFQkl3VWhBa0VBSkFVZ0FrRUJjUTBJSUFCQjBMa0RhaUFCT2dBQVFRQWtCVUVMSUFRUUJTRUJJd1VoQWtFQUpBVWdBa0VCY1EwSUlBQkIwYmtEYWlBQk9nQUFRUUFrQlVFTUlBUVFCU0VCSXdVaEFrRUFKQVVnQWtFQmNRMElJQUJCMUxrRGFpQUJOZ0lBREFNTElBQkIyTGtEYWlJQ0lBRXBBZ0EzQWdBZ0FpQUJLUUlJTndJSUlBSWdBU2tDRURjQ0VDQUNJQUV1QVJnN0FSZ2dBaUFCTEFBYU9nQWFRUUFrQlVFTUlBUVFCU0VCSXdVaEFrRUFKQVVnQWtFQmNRMEhJQUJCOUxrRGFpQUJOZ0lBUVFBa0JVRUxJQVFRQlNFQkl3VWhBa0VBSkFVZ0FrRUJjUTBISUFCQitMa0RhaUFCT2dBQVFRQWtCVUVMSUFRUUJTRUJJd1VoQWtFQUpBVWdBa0VCY1EwSElBQkIrYmtEYWlBQk9nQUFRUUFrQlVFTUlBUVFCU0VCSXdVaEFrRUFKQVVnQWtFQmNRMEhJQUJCL0xrRGFpQUJOZ0lBUVFBa0JVRUtJQVFRQlNFQkl3VWhBa0VBSkFVZ0FrRUJjUTBISUFCQmdMb0RhaUlDSUFGQi8vOERjVUdEQWtnRWZ5QUJCVUdEQWlJQkN6c0JBRUVBSkFWQkVpQUVJQUJCZ3JvRGFpQUJRZi8vQTNFUUJ4b2pCU0VCUVFBa0JTQUJRUUZ4RFFjZ0FFR0N1Z05xSUFJdkFRQnFRUUE2QUFBTUFnc01BUXNnQlNnQ0FFR0FnQUp4QkVCQkFDUUZRUXdnQkJBRklRRWpCU0VDUVFBa0JTQUNRUUZ4RFFZZ0NpQUtLUU1BSUFHdGZEY0RBQXNMUVFBa0JVRU1JQVJCQUJBR0lRRWpCU0VDUVFBa0JTQUNRUUZ4UlFSQUFrQWdCeWdDQUNBQlFmLy9BM0ZIQkVBQ1FBSkFBa0FnRkNnQ0FFRUZhdzUxQVFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFBZ0lBQWdzTUF3c2dBRUhPclFKcUxBQUFCRUFnQUNnQ0FDZ0NGQ0VCUVFBa0JTQUJJQUFRVHEwakI2MUNJSWFFSVJ3akJTRUJRUUFrQlNBQlFRRnhCRUFRRnlFQURBMExJQUFvQWdBb0FoUWhBVUVBSkFVZ0FTQUFFRTZ0SXdldFFpQ0doQ0VkSXdVaEFVRUFKQVVDUUNBQlFRRnhSUVJBSUFBb0FnQW9BaEFoQVVFQUpBVWdBU0FBSUIxQ2VYd2lIYWNnSFVJZ2lLZEJBQkJRSXdVaEFVRUFKQVVnQVVFQmNRMEJRUUFrQlVFSUlBQVFCU0VCSXdVaEFrRUFKQVVnQWtFQmNRMEJRUUFrQlVFSUlBQVFCU0VDSXdVaEEwRUFKQVVnQTBFQmNRMEJRUUFrQlVFSUlBQVFCU0VESXdVaEJVRUFKQVVnQlVFQmNRMEJRUUFrQlVFSUlBQVFCU0VGSXdVaEJrRUFKQVVnQmtFQmNRMEJRUUFrQlVFSUlBQVFCU0VHSXdVaENFRUFKQVVnQ0VFQmNRMEJRUUFrQlVFSUlBQVFCU0VJSXdVaEIwRUFKQVVnQjBFQmNRMEJRUUFrQlVFSUlBQVFCU0VISXdVaERrRUFKQVVnRGtFQmNRMEJJQUFvQWdBb0FoQWhEa0VBSkFVZ0RpQUFJQnluSUJ4Q0lJaW5RUUFRVUNNRklRNUJBQ1FGSUE1QkFYRUVRRUVBRUJnUVdnVWdCeUFJSUFZZ0JTQURJQUlnQVhKeWNuSnlja0gvQVhGRkRRWU1CQXNMQ3hBWElRRWdBQ2dDQUNnQ0VDRUNRUUFrQlNBQ0lBQWdIS2NnSEVJZ2lLZEJBQkJRSXdVaEFrRUFKQVVnQWtFQmNVVUVRQ0FCSVFBTURRdEJBQkFZRUZvTEN5QUFRYXk4QTJwQkFUb0FBRUVBSkFWQkNrR3M5UUpCQXhBTkl3VWhBVUVBSkFVZ0FVRUJjVVVFUUNBV1JRMENJQXRCQURZQ1JDQUxRUVEyQWtnZ0N5QUFRUmhxSWdFMkFnQWdDMEZBYTBFQ05nSUFJQXNnQVRZQ0JFRUFKQVVqQlNFQlFRQWtCU0FCUVFGeFJRUkFJQUJCcmJ3RGFrRUJPZ0FBUVFBaEFBd0xDd3NRRnlFQURBb0xDeUFLS1FNQUlCZ3BBd0JWQkVBZ0Z5Z0NBQ0VBREFnTElBMUJBRFlDUkNBTlFSZzJBa2dnRFVGQWEwRUJOZ0lBSUEwZ0FFRVlhallDQUVFQUpBVWpCU0VCUVFBa0JTQUJRUUZ4UlFSQUlBQkJyTHdEYWtFQk9nQUFRUUFrQlVFS1FhejFBa0VERUEwakJTRUFRUUFrQlNBQVFRRnhSUVJBUVFBaEFBd0pDd3NMRUJjaEFBd0hDd3NMQ3dzUUZ5RUFEQUlMRUJjaEFBd0JDeUFFS0FJQUlnRkZCRUFnRUNRRUlBQVBDeUFCRUZJZ0VDUUVJQUFQQ3lBRUtBSUFJZ0ZGQkVBZ0FCQWVDeUFCRUZJZ0FCQWVRUUFMbEFzQ0NuOENmaU1FSVFNakJFR2dFR29rQkNBRFFTQnFJUUlnQXlBQUVMZ0JBa0FDUUFKQUlBQkJpTHdEYWlJSEtRTUFJQUJCcUx3RGFpZ0NBSzFWQkg5QkFDUUZRUW9nQTBFVkVBWWFJd1VoQVVFQUpBVWdBVUVCY1EwQlFRQWtCVUVJSUFCQnNLY0Jha0VBRUEwakJTRUJRUUFrQlNBQlFRRnhEUUVnQUVHMHB3RnFRUUkyQWdCQkFDUUZRUXdnQXhBRklRRWpCU0VFUVFBa0JTQUVRUUZ4RFFFZ0FFSEVwd0ZxSWdVZ0FUWUNBRUVBSkFWQkRDQURFQVVoQVNNRklRUkJBQ1FGSUFSQkFYRU5BU0FBUVlEb0FXb2dBYTAzQXdBZ0FFR1E2QUZxUVFFMkFnQkJBQ1FGUVFvZ0F4QUZJUUVqQlNFRVFRQWtCU0FFUVFGeERRRWdBRUdVNkFGcUlBRkIvLzhEY1RZQ0FFRUFKQVZCQ2lBREVBVWhBU01GSVFSQkFDUUZJQVJCQVhFTkFTQUFRYnluQVdvaUNDQUJRZi8vQTNFMkFnQkJBQ1FGUVF3Z0F4QUZJUWtqQlNFQlFRQWtCU0FCUVFGeFJRUkFRUUFrQlVFTElBTVFCU0VCSXdVaEJFRUFKQVVnQkVFQmNVVUVRQ0FBUWN5bkFXb2dBVUgvQVhFMkFnQkJBQ1FGUVFzZ0F4QUZJUUVqQlNFRVFRQWtCU0FFUVFGeFJRUkFJQUJCdUtjQmFpSUVJQUZCL3dGeFFZQ0FBbkkyQWdCQkFDUUZRUXNnQXhBRklRRWpCU0VHUVFBa0JTQUdRUUZ4UlFSQUlBQkJ5YWNCYWlBQlFmOEJjVUVDUmdSL1FRMEZRUW9MT2dBQVFRQWtCVUVMSUFNUUJTRUJJd1VoQmtFQUpBVWdCa0VCY1VVRVFDQUJRZjhCY1NFQlFRQWtCVUVMSUFNUUJTRUdJd1VoQ2tFQUpBVWdDa0VCY1VVRVFDQUFRY3FuQVdvZ0Jqb0FBQ0FBUWJqb0FXb2dCQ2dDQUNJRVFRRnhPZ0FBSUFCQnVlZ0JhaUFFUVFGMlFRRnhPZ0FBSUFCQnUrZ0JhaUFFUVFKMlFRRnhJZ1E2QUFBZ0FFRzg2QUZxSUFRMkFnQWdBRUg0NXdGcUlnUWdCU2dDQUswM0F3QWdBRUdVNlFGcVFZQ0FCRFlDQUVFQUpBVkJDU0FBUWVEbkFXb2dDUkFOSXdVaEJVRUFKQVVnQlVFQmNVVUVRRUVBSkFWQkNpQURJQUVRQmhvakJTRUZRUUFrQlNBRlFRRnhSUVJBUVFBa0JVRVNJQU1nQWlBQkVBY2FJd1VoQlVFQUpBVUNRQ0FGUVFGeFJRUkFJQUlnQVdwQkFEb0FBRUVBSkFWQkNDQUNJQUpCZ0JBUURpTUZJUUZCQUNRRklBRkJBWEVOQVVFQUpBVkJFU0FDSUFCQjBLY0JhaUlCUVlBUUVBY2FJd1VoQWtFQUpBVWdBa0VCY1EwQklBQkJyUE1BYWlJRktBSUFRWXlGQTJvb0FnQWlBa0VCUmdSQVFRQWtCVUVOSUFFUUJSb2pCU0VDUVFBa0JTQUNRUUZ4RFFJZ0JTZ0NBRUdNaFFOcUtBSUFJUUlMSUFKQkFrWUVRRUVBSkFWQkRpQUJFQVVhSXdVaEFrRUFKQVVnQWtFQmNRMENDeUFES0FJVUlnSUVRQ0FBUVpDOEEyb2dCeWtEQUNJTUlBZ29BZ0N0ZkNBRUtRTUFmQ0lMTndNQUJTQUFRWkM4QTJvcEF3QWhDeUFIS1FNQUlRd0xJQUJCelBNQWFrRUNOZ0lBSUFJaEFBd01Dd3NRRnlFQURBc0xDd3NMRUJjaEFBd0hDd3NMQ3hBWEJVRUFKQVZCQ2lBRFFRY1FCaG9qQlNFQlFRQWtCU0FCUVFGeERRRkJBQ1FGUVJzZ0FFRzRwZ0ZxRUF3akJTRUJRUUFrQlNBQlFRRnhEUUZCQUNRRlFSSWdBeUFDUVFRUUJ4b2pCU0VDUVFBa0JTQUNRUUZ4UlFSQVFRQWtCVUVLSUFNUUJTRUNJd1VoQVVFQUpBVWdBVUVCY1VVRVFFRUFKQVZCQ3lBREVBVWhBU01GSVFSQkFDUUZJQVJCQVhGRkJFQWdBRUdRdkFOcUlBY3BBd0FpRENBQ1FmLy9BM0d0ZkNJTE53TUFJQUJCelBNQWFrRUJOZ0lBSUFCQm5id0RhaUFCUWY4QmNTSUNRUUZ4T2dBQUlBQkJuTHdEYWlBQ1FRTjJRUUZ4T2dBQUlBQkJuN3dEYWlBQ1FRSjJRUUZ4T2dBQUlBQkIxS1lCYWlBQ1FRRjJRUUZ4T2dBQUlBQkIxYVlCYWlBQ1FRUjJRUUZ4T2dBQUlBTW9BaFFoQUF3RkN3c0xFQmNMSVFBTUFnc1FGeUVBREFFTElBc2dERmNFUUVFQUlRQUxJQU1vQWdBaUFrVUVRQ0FESkFRZ0FBOExJQUlRVWlBREpBUWdBQThMSUFNb0FnQWlBMFVFUUNBQUVCNExJQU1RVWlBQUVCNUJBQXNpQUNBQUlBQkJrTHdEYWlrREFFRUFJQUFvQWdBb0FoQkJBM0ZCdUFKcUVRSUFDMXdCQVg4akJDRUNJd1JCMEFCcUpBUWdBQ0FCRVBFQkJFQWdBaVFFRHdzZ0FFR3R2QU5xTEFBQVJRUkFJQUpCQURZQ1JDQUNRVGcyQWtnZ0FrRkFhMEVCTmdJQUlBSWdBRUVZYWpZQ0FBdEJyUFVDUVFJUXBBRWdBaVFFQzZRR0FRZC9JQUFRMGdFZ0FFSDBEVFlDQUVFQUpBVkJHQ0FBUVp6QUFHb2lCQkFNSXdVaEFrRUFKQVVnQWtFQmNRUkFFQmNoQWlBQUVIQWdBaEFlQzBFQUpBVkJGaUFBUWZEeEFHb2lCUkFNSXdVaEFrRUFKQVVnQWtFQmNRUkFFQmNoQWdVZ0FFSEE4d0JxSWdaQ0FEY0RBRUVBSkFWQkdTQUFRZGp6QUdvaUJ4QU1Jd1VoQWtFQUpBVUNRQ0FDUVFGeEJFQVFGeUVDQlNBQVFkRG5BV29pQWtJQU53SUFJQUpDQURjQ0NDQUNRZ0EzQWhBZ0FrSUFOd0lZSUFKQ0FEY0NJQ0FBUVpEdUFtb2lBa0lBTndJQUlBSkNBRGNDQ0NBQ1FnQTNBaEFnQWtJQU53SVlJQUpDQURjQ0lDQUFRYXp6QUdvaUNFRUFOZ0lBSUFCQnFQTUFhaUFCUlNJQ09nQUFBa0FnQWdSQVFRQWtCVUVFUWNETEJCQUZJUU1qQlNFQlFRQWtCU0FCUVFGeEJFQVFGeUVDQlVFQUpBVkJHaUFERUF3akJTRUJRUUFrQlNBQlFRRnhSUVJBSUFNaEFRd0RDeEFYSVFJZ0F4QlNJQUJCa080Q2FpZ0NBQ0lEQkVBZ0F4QlNDd3NnQUVIUTV3RnFLQUlBSWdNRVFDQURFRklMSUFjUXRRSU1Bd3NMSUFnZ0FUWUNBQ0FBSUFGQm5ZVURhaXdBQURvQUZTQUFRWmk4QTJwQkFqWUNBQ0FBUWFpOEEycEJBRFlDQUNBR1FnQTNBd0FnQUVHdHZBTnFRUUE2QUFBZ0FFR3N2QU5xUVFBNkFBQWdBRUhJOHdCcVFRQTJBZ0FnQUVHSXZBTnFJZ0ZDQURjREFDQUJRZ0EzQXdnZ0FFR2N2QU5xSWdGQ0FEY0NBQ0FCUVFBNkFBZ2dBRUd3OHdCcVFuODNBd0FnQUVHNDh3QnFRWDgyQWdBZ0FFR3dyUUpxSWdGQ0FEY0RBQ0FCUWdBM0F3Z2dBVUlBTndNUUlBRkNBRGNER0NBQVFjQzhBMnBCQURZQ0FDQUFRZVM4QTJwQkFEWUNBQ0FBUWI2OEEycEJBRG9BQUNBQVFkRHpBR3BCQURvQUFDQUFRYmltQVdvaUFVSUFOd01BSUFGQ0FEY0RDQ0FCUWdBM0F4QWdBVUlBTndNWUlBRkNBRGNESUNBQlFnQTNBeWdnQVVJQU53TXdJQUZDQURjRE9DQUJRVUJyUWdBM0F3QWdBVUlBTndOSUlBRkNBRGNEVUNBQlFnQTNBMWdnQVVJQU53TmdJQUZDQURjRGFDQUJRUUEyQW5BZ0FFSEl2QU5xSWdCQ0FEY0RBQ0FBUWdBM0F3Z2dBRUlBTndNUUlBQkJBRG9BR0E4TEN5QUZFSVFCQ3lBRUVJNEJJQUFRY0NBQ0VCNExqd2dCQzM4akJDRUNJd1JCTUdva0JDQUNRUkJxSVFvZ0FrRUlhaUVISUFJaUNVRVlhaUlGUWdBM0FnQWdCVUlBTndJSVFRQWtCVUVVSUFBZ0JVRUFFQWNoQWlNRklRTkJBQ1FGQWtBZ0EwRUJjVVVFUUNBQ0JIOGdCVUVFYWlJR0tBSUFJZ3RCQVdvaEFpQUdJQUkyQWdBZ0FpQUZRUWhxSWdnb0FnQWlCRXNFZnlBRktBSU1JZ05CQUVjZ0FpQURTM0VFZjBFQUpBVWdDU0FETmdJQVFRSkJyUFVDUWRnYklBa1FEaU1GSVFOQkFDUUZJQU5CQVhFTkJFRUFKQVZCRkVHczlRSVFEQ01GSVFOQkFDUUZJQU5CQVhFTkJDQUlLQUlBSVFRZ0JpZ0NBQVVnQWdzaEF5QUZLQUlBSUFNZ0JFRWdhaUFFUVFKMmFpSUVTd1IvSUFNaUJBVWdCQXNRVnlJRFJRUkFRUUFrQlVFVVFhejFBaEFNSXdVaERFRUFKQVVnREVFQmNRMEVDeUFGSUFNMkFnQWdDQ0FFTmdJQUlBWW9BZ0FGSUFVb0FnQWhBeUFDQ3lFRUlBTWdCRUYvYW1wQkFEb0FBQ0FCUVFocUlnUW9BZ0FoQXlBQlFRUnFJZ1lnQWpZQ0FDQURJQUpKQkVBZ0FTZ0NEQ0lJUVFCSElBSWdDRXR4QkVCQkFDUUZJQWNnQ0RZQ0FFRUNRYXoxQWtIWUd5QUhFQTRqQlNFQ1FRQWtCU0FDUVFGeERRUkJBQ1FGUVJSQnJQVUNFQXdqQlNFQ1FRQWtCU0FDUVFGeERRUWdCQ2dDQUNFRElBWW9BZ0FoQWdzZ0FTZ0NBQ0FDSUFOQklHb2dBMEVDZG1vaUEwc0VmeUFDQlNBRElnSUxRUUowRUZjaUEwVUVRRUVBSkFWQkZFR3M5UUlRRENNRklRZEJBQ1FGSUFkQkFYRU5CQXNnQVNBRE5nSUFJQVFnQWpZQ0FBc0NmeUFBUVppOEEyb29BZ0JCQTBZRVFDQUZLQUlBSVFBZ0FTZ0NBQ0VDSUFZb0FnQWhBMEVBSkFWQkZTQUFJQUlnQXhBSEdpTUZJUUJCQUNRRklBQkJBWEVOQkFVZ0JTZ0NBQ0VDSUFFb0FnQWhBeUFBUVl5dUFtb29BZ0JCQVhGRkJFQWdCaWdDQUNFQVFRQWtCVUVSSUFJZ0F5QUFFQWNhSXdVaEFFRUFKQVVnQUVFQmNRMEZJQUVNQWd0QkFDUUZRUllnQWlBRElBdEJBWFlpQUJBSEdpTUZJUUpCQUNRRklBSkJBWEVOQkNBQktBSUFJQUJCQW5ScVFRQTJBZ0FMSUFFTElnQW9BZ0FpQXhCWklRQWdCQ2dDQUNFQ0lBWWdBRFlDQUNBQ0lBQkpCRUFnQVNnQ0RDSUhRUUJISUFBZ0IwdHhCRUJCQUNRRklBb2dCellDQUVFQ1FhejFBa0hZR3lBS0VBNGpCU0VBUVFBa0JTQUFRUUZ4RFFSQkFDUUZRUlJCclBVQ0VBd2pCU0VBUVFBa0JTQUFRUUZ4RFFRZ0FTZ0NBQ0VESUFRb0FnQWhBaUFHS0FJQUlRQUxJQU1nQUNBQ1FTQnFJQUpCQW5acUlnSkxCSDhnQUFVZ0FpSUFDMEVDZEJCWElnSkZCRUJCQUNRRlFSUkJyUFVDRUF3akJTRURRUUFrQlNBRFFRRnhEUVFMSUFFZ0FqWUNBQ0FFSUFBMkFnQUxRUUVGUVFBTElRQWdCU2dDQUNJQlJRUkFJQWtrQkNBQUR3c2dBUkJTSUFra0JDQUFEd3NMRUJjaEFDQUZLQUlBSWdGRkJFQWdBQkFlQ3lBQkVGSWdBQkFlUVFBTEJnQWdBQ1FIQzY4WEFneC9BbjRqQkNFSUl3UkJnTkFEYWlRRUlBQkJucndEYWl3QUFFVUVRQ0FJSkFSQkFBOExJQWhCcU04RGFpRUtJQWhCb004RGFpRU1JQWhCbU04RGFpRUxJQWhCa004RGFpRU5JQWhCMk0wRGFpRUhJQWhCc004RGFpRUVJQWhCck04RGFpRUpJQUFnQUNnQ0FDZ0NGRUVIY1VHR0FXb1JBQUFoRHdKQUFrQUNRQUpBQWtBZ0FFR1l2QU5xSWdZb0FnQkJBVVlFUUNBQUtBSUFLQUlRSVFJZ0FFR292QU5xS0FJQVFRZHFyU0VPUVFBa0JTQUNJQUFnRHFjZ0RrSWdpS2RCQUJCUUl3VWhBa0VBSkFVZ0FrRUJjVVVFUUVFQUpBVkJDQ0FBRUFVaEFpTUZJUU5CQUNRRklBTkJBWEZGQkVCQkFDUUZRUWdnQUJBRklRTWpCU0VGUVFBa0JTQUZRUUZ4UlFSQUlBTkIvd0Z4UVFoMElBSkIvd0Z4Y2lFQ0RBVUxDd3NGSUFBb0FnQW9BaEFoQWlBQVFkU21BV29zQUFCRkJFQkJBQ1FGUVFRZ0FCQk9yU01IclVJZ2hvUWhEaU1GSVFOQkFDUUZJQU5CQVhFTkFrRUFKQVVnQWlBQUlBNm5JQTVDSUlpblFRQVFVQ01GSVFKQkFDUUZJQUpCQVhFTkFrRUFKQVZCQ0NBQVFZd09FQVloQWlNRklRTkJBQ1FGSUFOQkFYRU5BaUFDUlFSQVFRQWhBUXdGQzBFQUpBVkJDU0FBSUFFUUJpRUJJd1VoQWtFQUpBVWdBa0VCY1EwQ0RBUUxJQUJCcUx3RGFpZ0NBRUVVYXEwaERrRUFKQVVnQWlBQUlBNm5JQTVDSUlpblFRQVFVQ01GSVFKQkFDUUZJQUpCQVhGRkJFQkJBQ1FGUVFZZ0FCQUZHaU1GSVFKQkFDUUZJQUpCQVhGRkJFQWdBRUdzdkFOcUxBQUFSUVJBSUFCQi9MTURhaWdDQUVIei93TnFJUUlNQlFzZ0NFRUFOZ0pFSUFoQk9UWUNTQ0FJUVVCclFRRTJBZ0FnQ0NBQVFSaHFOZ0lBUVFBa0JTTUZJUUZCQUNRRklBRkJBWEZGQkVCQkFDRUJEQVlMQ3dzTEN4QVhJUUVNQWdzQ1FBSkFJQVlvQWdCQkFVWUVRQ0FBUWRXbUFXb3NBQUJGRFFFRklBQkJoN1FEYWl3QUFFRXdSZzBCSUFCQmhyUURhaXdBQUVGeGFrRVlkRUVZZFVIL0FYRkJEa29FUUVFQUlRRU1CQXNnQUVHSHRBTnFMUUFBUVRWS0JFQkJBQ0VCREFRTEMwRUFKQVZCRmlBSEVBd2pCU0VEUVFBa0JTQURRUUZ4QkVBUUZ5RUJCU0FIUVFFNkFDa0NRQUpBSUFZb0FnQkJBVVlFZjBFQUpBVkJDQ0FBRUFVaEF5TUZJUVZCQUNRRklBVkJBWEVOQVVFQUpBVkJDQ0FBRUFVaEJTTUZJUXBCQUNRRklBcEJBWEVOQVVFQUpBVkJGeUFIRUF3akJTRUtRUUFrQlNBS1FRRnhEUUVnQUVHR3RBTnFRUTg2QUFBZ0FrSCsvd05xSVFJZ0JVSC9BWEZCQ0hRZ0EwSC9BWEZ5QlNBQVFZUzBBMm92QVFBTElRTkJBQ1FGUVFNZ0J5QUFRUUFRRGlNRklRVkJBQ1FGSUFWQkFYRU5BQ0FIUVFBNkFDZ2dCeUFDUWYvL0EzR3ROd01nUVFBa0JVRUVJQWRCcUFGcUlnSkJBa0VCRUE0akJTRUZRUUFrQlNBRlFRRnhEUUJCQUNRRlFRY2dDQ0FIRUEwakJTRUZRUUFrQlNBRlFRRnhCRUFRRnlFQkJVRUFKQVZCQlNBSVFZQ0FCRUVBRUE0akJTRUZRUUFrQlFKQUFrQWdCVUVCY1EwQUlBaEJzSmdCYWlBRHJUY0RBQ0FJUWNpWUFXcEJBRG9BQUNBQVFZYTBBMm90QUFBaEEwRUFKQVZCQmlBSUlBTkJBQkFPSXdVaEEwRUFKQVVnQTBFQmNRMEFJQVlvQWdCQkFVY0VRRUVBSkFWQkNTQUNFQVVoQWlNRklRTkJBQ1FGSUFOQkFYRU5BU0FBUVlpMEEyb3ZBUUFnQWtILy93TnhSd1JBSUFSQkFEWUNSQ0FFUVRrMkFrZ2dCRUZBYTBFQk5nSUFJQVFnQUVFWWFqWUNBRUVBSkFVakJTRUJRUUFrQlNBQlFRRnhEUUlnQ0JDVkFTQUhFSVFCUVFBaEFRd0tDd3RCQUNRRlFRY2dCeUFFSUFrUURpTUZJUUpCQUNRRkFrQWdBa0VCY1VVRVFDQUJRUWhxSWdVb0FnQWhCaUFCUVFScUlnTWdDU2dDQUVFQmFpSUNOZ0lBSUFZZ0Fra0VRQ0FCS0FJTUlncEJBRWNnQWlBS1MzRUVRRUVBSkFVZ0RTQUtOZ0lBUVFKQnJQVUNRZGdiSUEwUURpTUZJUUpCQUNRRklBSkJBWEVOQTBFQUpBVkJGRUdzOVFJUURDTUZJUUpCQUNRRklBSkJBWEVOQXlBRktBSUFJUVlnQXlnQ0FDRUNDeUFCS0FJQUlBSWdCa0VnYWlBR1FRSjJhaUlHU3dSL0lBSUZJQVlpQWd0QkFuUVFWeUlHUlFSQVFRQWtCVUVVUWF6MUFoQU1Jd1VoQ2tFQUpBVWdDa0VCY1EwREN5QUJJQVkyQWdBZ0JTQUNOZ0lBSUFNb0FnQWhBZ3NnQVNnQ0FFRUFJQUpCQW5RUVZCb2dCQ2dDQUNFQ0lBRW9BZ0FoQmlBSktBSUFJUVJCQUNRRlFSRWdBaUFHSUFRUUJ4b2pCU0VDUVFBa0JTQUNRUUZ4RFFFZ0FTZ0NBQ0lFRUZraEFpQUZLQUlBSVFZZ0F5QUNOZ0lBSUFZZ0Fra0VRQ0FCS0FJTUlnbEJBRWNnQWlBSlMzRUVRRUVBSkFVZ0N5QUpOZ0lBUVFKQnJQVUNRZGdiSUFzUURpTUZJUUpCQUNRRklBSkJBWEVOQTBFQUpBVkJGRUdzOVFJUURDTUZJUUpCQUNRRklBSkJBWEVOQXlBRktBSUFJUVlnQXlnQ0FDRUNJQUVvQWdBaEJBc2dCQ0FDSUFaQklHb2dCa0VDZG1vaUJrc0VmeUFDQlNBR0lnSUxRUUowRUZjaUJrVUVRRUVBSkFWQkZFR3M5UUlRRENNRklRUkJBQ1FGSUFSQkFYRU5Bd3NnQVNBR05nSUFJQVVnQWpZQ0FBc2dDQkNWQVNBSEVJUUJJQU1oQVF3SkN3c1FGeUVCREFFTEVCY2hBUXNnQ0JDVkFRc01BUXNRRnlFQkN5QUhFSVFCQ3d3REN5QUNRZi8vQTNFaUJRUkFRUUFnQlVFZ1N3Ui9JQVVGUVNBTElnTVFWeUlDUlFSQVFRQWtCVUVVUWF6MUFoQU1Jd1VoQWtFQUpBVWdBa0VCY1FSQUVCY2hBUXdGQlVFQUlRSUxDd1ZCQUNFQ1FRQWhBd3NnQUNnQ0FDZ0NEQ0VFUVFBa0JTQUVJQUFnQWlBRkVBY2FJd1VoQkVFQUpBVUNRQ0FFUVFGeEJFQWdBaUVCQlNBR0tBSUFRUUZIQkVBZ0FFR0l0QU5xTHdFQUlRWkJBQ1FGUVJOQmZ5QUNJQVVRQnlFRUl3VWhDVUVBSkFVZ0NVRUJjUVJBSUFJaEFRd0RDeUFFUWYvL0EzRkIvLzhEY3lBR1FmLy9BM0ZIQkVBZ0IwRUFOZ0pFSUFkQk9UWUNTQ0FIUVVCclFRRTJBZ0FnQnlBQVFSaHFOZ0lBUVFBa0JTTUZJUUZCQUNRRklBRkJBWEVFUUNBQ0lRRU1CQXNnQWtVRVFFRUFJUUVNQmdzZ0FoQlNRUUFoQVF3RkN3c2dBVUVJYWlJTEtBSUFJUWtnQVVFRWFpSUdJQVZCQVdvaUJ6WUNBQ0FKSUFWTkJFQWdBU2dDRENJRVFRQkhJQVVnQkU5eEJIOUJBQ1FGSUF3Z0JEWUNBRUVDUWF6MUFrSFlHeUFNRUE0akJTRUVRUUFrQlNBRVFRRnhCRUFnQWlFQkRBUUxRUUFrQlVFVVFhejFBaEFNSXdVaEJFRUFKQVVnQkVFQmNRUkFJQUloQVF3RUN5QUxLQUlBSVFrZ0JpZ0NBQVVnQndzaEJDQUJLQUlBSUFRZ0NVRWdhaUFKUVFKMmFpSUpTd1IvSUFRRklBa2lCQXRCQW5RUVZ5SUpSUVJBUVFBa0JVRVVRYXoxQWhBTUl3VWhERUVBSkFVZ0RFRUJjUVJBSUFJaEFRd0VDd3NnQVNBSk5nSUFJQXNnQkRZQ0FBc2dCU0FEVHdSQUlBSWdCeUFEUVNCcUlBTkJBblpxSWdOTEJIOGdCd1VnQXdzUVZ5SURCRUFnQXlFQ0JVRUFKQVZCRkVHczlRSVFEQ01GSVFOQkFDUUZJQU5CQVhFRVFDQUNJUUVNQkFWQkFDRUNDd3NMSUFJZ0JXcEJBRG9BQUNBQktBSUFJUU5CQUNRRlFSRWdBaUFESUFVUUJ4b2pCU0VEUVFBa0JTQURRUUZ4QkVBZ0FpRUJCU0FCS0FJQUlnY1FXU0VFSUFzb0FnQWhCU0FHSUFRMkFnQWdCU0FFU1FSQUlBRW9BZ3dpQTBFQVJ5QUVJQU5MY1FSL1FRQWtCU0FLSUFNMkFnQkJBa0dzOVFKQjJCc2dDaEFPSXdVaEEwRUFKQVVnQTBFQmNRUkFJQUloQVF3RkMwRUFKQVZCRkVHczlRSVFEQ01GSVFOQkFDUUZJQU5CQVhFRVFDQUNJUUVNQlFzZ0FTRURJQXNvQWdBaEJTQUdLQUlBSVFFZ0F5Z0NBQVVnQVNFRElBUWhBU0FIQ3lBQklBVkJJR29nQlVFQ2Rtb2lCRXNFZnlBQkJTQUVJZ0VMUVFKMEVGY2lCRVVFUUVFQUpBVkJGRUdzOVFJUURDTUZJUVZCQUNRRklBVkJBWEVFUUNBQ0lRRU1CUXNMSUFNZ0JEWUNBQ0FMSUFFMkFnQUxJQUpGQkVBZ0JpRUJEQVFMSUFJUVVpQUdJUUVNQXdzTEN4QVhJUUlnQVVVRVFDQUNJUUVNQXdzZ0FSQlNJQUloQVF3Q0N5QUJLQUlBUVFCSElRRUxJQUFvQWdBb0FoQWhBa0VBSkFVZ0FpQUFJQStuSUE5Q0lJaW5RUUFRVUNNRklRQkJBQ1FGSUFCQkFYRUVRRUVBRUJnUVdnVWdDQ1FFSUFFUEN3d0JDeUFBS0FJQUtBSVFJUUpCQUNRRklBSWdBQ0FQcHlBUFFpQ0lwMEVBRUZBakJTRUFRUUFrQlNBQVFRRnhCRUJCQUJBWUVGb0ZJQUVRSGdzTFFRQUxVQUlDZndGK0l3UWhBU01FUVJCcUpBUUNmMEVBSUFCQjJQTUFhaUlDUWVneGFpd0FBRVVOQUJvZ0FTQUNRYkF5YWlrREFEY0RBRUVCQ3dSK0lBRXBBd0FGSUFBUTB3RUxJUU1nQVNRRUlBTUxIUUFnQUVIWTh3QnFJQUVnQWhDUUJBUkFEd3NnQUNBQklBSVFuQUVMT3dFQmZ5TUVJUU1qQkVFUWFpUUVJQUJCMlBNQWFpQUJJQUlnQXhDcUJBUkFJQU1vQWdBaEFBVWdBQ0FCSUFJUTFBRWhBQXNnQXlRRUlBQUxGd0FnQUVIQXBRRnFRUUE2QUFBZ0FDQUJJQUlRbUFJTENnQWdBQkIrSUFBUVVnc2NBQ0FCSUFLdElBT3RRaUNHaENBRUlBQkJBM0ZCdUFKcUVRSUFDeG9BSUFFZ0FxMGdBNjFDSUlhRUlBQkJBM0ZCdEFKcUVSY0FDeDBCQVg0Z0FTQUFRUWR4UVlZQmFoRUFBQ0lDUWlDSXB5UUhJQUtuQ3lJQUlBR3RJQUt0UWlDR2hDQURyU0FFclVJZ2hvUWdBRUVCY1VHRUFXb1JFZ0FMSmdBZ0FTQUNJQU1nQkNBRklBYXRJQWV0UWlDR2hDQUlJQWtnQUVFQmNVR0NBV29SRVFBTEJnQkJGUkFBQ3dZQVFSUVFBQXNtQUVHczlRSkJBRFlDQUVHdzlRSkJBRFlDQUVHMDlRSkJBVG9BQUVHMTlRSkJBRFlBQUFzR0FFRVBFQUFMQ0FCQkNoQUFRUUFMQ0FCQkNSQUFRUUFMSXdBZ0FTQUFVd1IvUWVRQUJTQUJRZ0JSQkg5QkFBVWdBRUxrQUg0Z0FYK25Dd3NMRUFBakJVVUVRQ0FBSkFVZ0FTUUdDd3NJQUVFSUVBQkJBQXNJQUVFR0VBQkJBQXNJQUVFRUVBQkJBQXNQQUVFQUVBQkVBQUFBQUFBQUFBQUxJZ0FnQVNBQ0lBTWdCQ0FGSUFZZ0J5QUlJQWtnQ2lBQVFRRnhRYklDYWhFV0FBc2dBQ0FCSUFJZ0F5QUVJQVVnQmlBSElBZ2dDU0FBUVFGeFFiQUNhaEVWQUFzYUFDQUJJQUlnQXlBRUlBVWdCaUFBUVFkeFFhZ0NhaEVMQUFzWUFDQUJJQUlnQXlBRUlBVWdBRUVIY1VHZ0Ftb1JEQUFMRmdBZ0FTQUNJQU1nQkNBQVFRZHhRWmdDYWhFS0FBc1VBQ0FCSUFJZ0F5QUFRUjl4UWZnQmFoRUhBQXNVQUNBQklBSWdBeUFBUVFGeFFmWUJhaEVVQUFzU0FDQUJJQUlnQUVFZmNVSFdBV29SQmdBTEVBQWdBU0FBUVQ5eFFaWUJhaEVUQUFzT0FDQUFRUWR4UVk0QmFoRUlBQXNnQUNBQklBSWdBeUFFSUFVZ0JpQUhJQWdnQ1NBQVFRRnhRWUFCYWhFUUFBc2FBQ0FCSUFJZ0F5QUVJQVVnQmlBQVFRTnhRZndBYWhFUEFBc1lBQ0FCSUFJZ0F5QUVJQVVnQUVFQmNVSDZBR29SRGdBTEZnQWdBU0FDSUFNZ0JDQUFRUTl4UWVvQWFoRURBQXNVQUNBQklBSWdBeUFBUVI5eFFjb0FhaEVCQUFzUkFDQUJJQUlnQUVFZmNVRXFhaEVFQUFzUEFDQUJJQUJCSDNGQkNtb1JDUUFMRGdBZ0FTQUNJQUJCQVhFUkRRQUxHZ0FnQUFSL0lBQkJzQXBCbUF0QkFCQ2FBVUVBUndWQkFBc0xTUUVCZnlNRUlRTWpCRUVRYWlRRUlBTWdBaWdDQURZQ0FDQUFJQUVnQXlBQUtBSUFLQUlRUVI5eFFjb0FhaEVCQUNJQUJFQWdBaUFES0FJQU5nSUFDeUFESkFRZ0FFRUJjUXQxQVFKL0FrQWdBQ0FCS0FJSVJnUkFRUUFnQVNBQ0lBTVF3UUVGSUFCQkVHb2dBQ2dDRENJRVFRTjBhaUVGSUFCQkVHb2dBU0FDSUFNUStRRWdCRUVCU2dSQUlBRkJObW9oQkNBQVFSaHFJUUFEUUNBQUlBRWdBaUFERVBrQklBUXNBQUFOQXlBQVFRaHFJZ0FnQlVrTkFBc0xDd3NMckFVQkNYOENRQ0FBSUFFb0FnaEdCRUFnQVNnQ0JDQUNSZ1JBSUFGQkhHb2lBQ2dDQUVFQlJ3UkFJQUFnQXpZQ0FBc0xCU0FBSUFFb0FnQkhCRUFnQUNnQ0RDRUZJQUJCRUdvZ0FTQUNJQU1nQkJDckFTQUZRUUZNRFFJZ0FFRVFhaUFGUVFOMGFpRUhJQUJCR0dvaEJTQUFLQUlJSWdaQkFuRkZCRUFnQVVFa2FpSUFLQUlBUVFGSEJFQWdCa0VCY1VVRVFDQUJRVFpxSVFZRFFDQUdMQUFBRFFZZ0FDZ0NBRUVCUmcwR0lBVWdBU0FDSUFNZ0JCQ3JBU0FGUVFocUlnVWdCMGtOQUF3R0N3QUxJQUZCR0dvaEJpQUJRVFpxSVFnRFFDQUlMQUFBRFFVZ0FDZ0NBRUVCUmdSQUlBWW9BZ0JCQVVZTkJnc2dCU0FCSUFJZ0F5QUVFS3NCSUFWQkNHb2lCU0FIU1EwQURBVUxBQXNMSUFGQk5tb2hBQU5BSUFBc0FBQU5BeUFGSUFFZ0FpQURJQVFRcXdFZ0JVRUlhaUlGSUFkSkRRQU1Bd3NBQ3lBQktBSVFJQUpIQkVBZ0FVRVVhaUlMS0FJQUlBSkhCRUFnQVNBRE5nSWdJQUZCTEdvaURDZ0NBRUVFUmcwRElBQkJFR29nQUNnQ0RFRURkR29oRFNBQlFUUnFJUWNnQVVFMWFpRUdJQUZCTm1vaENDQUFRUWhxSVFrZ0FVRVlhaUVLUVFBaEF5QUFRUkJxSVFWQkFDRUFBbjhDUUFKQUEwQWdCU0FOVHcwQklBZEJBRG9BQUNBR1FRQTZBQUFnQlNBQklBSWdBa0VCSUFRUXZ3RWdDQ3dBQUEwQkFrQWdCaXdBQUFSQUlBY3NBQUJGQkVBZ0NTZ0NBRUVCY1FSQVFRRWhBd3dEQlVFQklRTU1CUXNBQ3lBS0tBSUFRUUZHRFFRZ0NTZ0NBRUVDY1VVTkJFRUJJUU5CQVNFQUN3c2dCVUVJYWlFRkRBQUxBQXNnQUVVRVFDQUxJQUkyQWdBZ0FVRW9haUlBSUFBb0FnQkJBV28yQWdBZ0FTZ0NKRUVCUmdSQUlBb29BZ0JCQWtZRVFDQUlRUUU2QUFBZ0F3MERRUVFNQkFzTEN5QUREUUJCQkF3QkMwRURDeUVBSUF3Z0FEWUNBQXdEQ3dzZ0EwRUJSZ1JBSUFGQkFUWUNJQXNMQ3d1QUFnRUlmeUFBSUFFb0FnaEdCRUJCQUNBQklBSWdBeUFFRU1BQkJTQUJRVFJxSWdZc0FBQWhDU0FCUVRWcUlnY3NBQUFoQ2lBQVFSQnFJQUFvQWd3aUNFRURkR29oQ3lBR1FRQTZBQUFnQjBFQU9nQUFJQUJCRUdvZ0FTQUNJQU1nQkNBRkVMOEJBa0FnQ0VFQlNnUkFJQUZCR0dvaERDQUFRUWhxSVFnZ0FVRTJhaUVOSUFCQkdHb2hBQU5BSUEwc0FBQU5BaUFHTEFBQUJFQWdEQ2dDQUVFQlJnMERJQWdvQWdCQkFuRkZEUU1GSUFjc0FBQUVRQ0FJS0FJQVFRRnhSUTBFQ3dzZ0JrRUFPZ0FBSUFkQkFEb0FBQ0FBSUFFZ0FpQURJQVFnQlJDL0FTQUFRUWhxSWdBZ0Mwa05BQXNMQ3lBR0lBazZBQUFnQnlBS09nQUFDd3UyQVFFQ2Z3SkFJQUpCZjJvaUJBUkFRUUFoQWdOQUFrQUNRQUpBSUFBZ0Ftb3NBQUFpQXc1ZEFBSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUJBZ3NNQkF0Qkx5RURDeUFCSUFKcUlBTTZBQUFnQWtFQmFpSUNJQVJKRFFBTEJVRUFJUUlMQ3lBQklBSnFRUUE2QUFBTDR3SUJBbjhqQkNFREl3UkJRR3NrQkNBQ0lBSW9BZ0FvQWdBMkFnQWdBQ0FCUmdSL1FRRUZJQUZCd0F0R0N3Ui9RUUVGSUFFRWZ5QUJRYkFLUVpnTFFRQVFtZ0VpQVFSL0lBRW9BZ2dnQUNnQ0NFRi9jM0VFZjBFQUJTQUFRUXhxSWdBb0FnQWdBVUVNYWlJQktBSUFSZ1IvUVFFRklBQW9BZ0JCdUF0R0JIOUJBUVVnQUNnQ0FDSUFCSDhnQUVHd0NrR2dDa0VBRUpvQklnUUVmeUFCS0FJQUlnQUVmeUFBUWJBS1FhQUtRUUFRbWdFaUFRUi9JQU5CQkdvaUFFSUFOd0lBSUFCQ0FEY0NDQ0FBUWdBM0FoQWdBRUlBTndJWUlBQkNBRGNDSUNBQVFnQTNBaWdnQUVFQU5nSXdJQU1nQVRZQ0FDQURJQVEyQWdnZ0EwRi9OZ0lNSUFOQkFUWUNNQ0FCSUFNZ0FpZ0NBRUVCSUFFb0FnQW9BaHhCQjNGQm1BSnFFUW9BSUFNb0FoaEJBVVlFZnlBQ0lBTW9BaEEyQWdCQkFRVkJBQXNGUVFBTEJVRUFDd1ZCQUFzRlFRQUxDd3NMQlVFQUN3VkJBQXNMSVFBZ0F5UUVJQUFMTVFFQ2Z5QUFLQUlBUVhScUlnRkJDR29pQWlnQ0FDRUFJQUlnQUVGL2FqWUNBQ0FBUVg5cVFRQklCRUFnQVJCU0N3c0tBQ0FBUVFScUtBSUFDd1lBUVpYekFBdHBBUUovUVFBa0JVRUZFQVFoQUNNRklRRkJBQ1FGSUFGQkFYRUVRRUVBRUJnUVdnc2dBQVJBSUFBb0FnQWlBQVJBSUFBcEF6QkNnSDZEUW9EV3JKbjB5Sk9td3dCUkJFQWdBQ2dDREJEOUFRc0xDd0ovUWVna1FlZ2tLQUlBSWdBMkFnQWdBQXNRL1FFTEx3RUJmeU1FSVFFakJFRVFhaVFFSUFBUVVrR3N2QU1vQWdCQkFCQktCRUJCaHZJQUlBRVFnZ0VGSUFFa0JBc0xnZ0VCQW44Z0FDZ0NBQ0lDUlFSQUR3c2dBUVIvUWNRTkJVSGdEUXNoQXlBQkJFQWdBaUVCQlNBQ0lRRURRQ0FESUFFUWRBUkFJQUJCM3dBMkFnQUxJQUJCQkdvaUFDZ0NBQ0lCRFFBTER3c0RRQUpBQWtBZ0F5QUJFSFFOQUNBQUtBSUFRU0JKRFFBTUFRc2dBRUhmQURZQ0FBc2dBRUVFYWlJQUtBSUFJZ0VOQUFzTEtBRUJmeU1FSVFBakJFRVFhaVFFUWF5OEEwRXRFRWdFUUVIVThRQWdBQkNDQVFVZ0FDUUVDd3M2QVFGL0lBQWdBU2dDQ0VZRVFFRUFJQUVnQWlBREVNRUJCU0FBS0FJSUlnUWdBU0FDSUFNZ0JDZ0NBQ2dDSEVFSGNVR1lBbW9SQ2dBTEM4Y0NBUU4vQWtBZ0FDQUJLQUlJUmdSQUlBRW9BZ1FnQWtZRVFDQUJRUnhxSWdBb0FnQkJBVWNFUUNBQUlBTTJBZ0FMQ3dVZ0FDQUJLQUlBUndSQUlBQW9BZ2dpQUNBQklBSWdBeUFFSUFBb0FnQW9BaGhCQjNGQm9BSnFFUXdBREFJTElBRW9BaEFnQWtjRVFDQUJRUlJxSWdVb0FnQWdBa2NFUUNBQklBTTJBaUFnQVVFc2FpSURLQUlBUVFSR0RRTWdBVUUwYWlJR1FRQTZBQUFnQVVFMWFpSUhRUUE2QUFBZ0FDZ0NDQ0lBSUFFZ0FpQUNRUUVnQkNBQUtBSUFLQUlVUVFkeFFhZ0NhaEVMQUFKQUFrQWdCeXdBQUFSQUlBWXNBQUFFUUVFRElRQUZRUU1oQUF3Q0N3VkJCQ0VBREFFTERBRUxJQVVnQWpZQ0FDQUJRU2hxSWdJZ0FpZ0NBRUVCYWpZQ0FDQUJLQUlrUVFGR0JFQWdBU2dDR0VFQ1JnUkFJQUZCQVRvQU5nc0xDeUFESUFBMkFnQU1Bd3NMSUFOQkFVWUVRQ0FCUVFFMkFpQUxDd3NMUUFFQmZ5QUFJQUVvQWdoR0JFQkJBQ0FCSUFJZ0F5QUVFTUFCQlNBQUtBSUlJZ1lnQVNBQ0lBTWdCQ0FGSUFZb0FnQW9BaFJCQjNGQnFBSnFFUXNBQ3dzWUFDQUFJQUVvQWdoR0JFQkJBQ0FCSUFJZ0F4REJBUXNMcmdFQUFrQWdBQ0FCS0FJSVJnUkFJQUVvQWdRZ0FrWUVRQ0FCUVJ4cUlnQW9BZ0JCQVVjRVFDQUFJQU0yQWdBTEN3VWdBQ0FCS0FJQVJnUkFJQUVvQWhBZ0FrY0VRQ0FCUVJScUlnQW9BZ0FnQWtjRVFDQUJJQU0yQWlBZ0FDQUNOZ0lBSUFGQktHb2lBQ0FBS0FJQVFRRnFOZ0lBSUFFb0FpUkJBVVlFUUNBQktBSVlRUUpHQkVBZ0FVRUJPZ0EyQ3dzZ0FVRUVOZ0lzREFRTEN5QURRUUZHQkVBZ0FVRUJOZ0lnQ3dzTEN3c2FBQ0FBSUFFb0FnaEdCRUJCQUNBQklBSWdBeUFFRU1BQkN3dklBUUVDZnlNRUlRTWpCRUZBYXlRRUlBQWdBVVlFZjBFQkJTQUJCSDhnQVVHd0NrR2dDa0VBRUpvQklnRUVmeUFEUVFScUlnUkNBRGNDQUNBRVFnQTNBZ2dnQkVJQU53SVFJQVJDQURjQ0dDQUVRZ0EzQWlBZ0JFSUFOd0lvSUFSQkFEWUNNQ0FESUFFMkFnQWdBeUFBTmdJSUlBTkJmellDRENBRFFRRTJBakFnQVNBRElBSW9BZ0JCQVNBQktBSUFLQUljUVFkeFFaZ0NhaEVLQUNBREtBSVlRUUZHQkg4Z0FpQURLQUlRTmdJQVFRRUZRUUFMQlVFQUN3VkJBQXNMSVFBZ0F5UUVJQUFMbEFJQ0JYOEJmaU1FSVFFakJFRXdhaVFFSUFGQkdHb2hBaUFCUVJCcUlRTWdBVUVrYWlFRUVQNEJJZ0FFUUNBQUtBSUFJZ0FFUUNBQUtRTXdJZ1ZDZ0g2RFFvRFdySm4weUpPbXd3QlNCRUFnQWtHWThBQTJBZ0JCNXU4QUlBSVFnZ0VMSUFCQjBBQnFJUUlnQlVLQjFxeVo5TWlUcHNNQVVRUkFJQUFvQWl3aEFnc2dCQ0FDTmdJQUlBQW9BZ0FpQUNnQ0JDRUNRWmdLSUFBZ0JFR1lDaWdDQUNnQ0VFRWZjVUhLQUdvUkFRQUVRQ0FFS0FJQUlnQWdBQ2dDQUNnQ0NFRWZjVUVLYWhFSkFDRUFJQUZCbVBBQU5nSUFJQUVnQWpZQ0JDQUJJQUEyQWdoQmtPOEFJQUVRZ2dFRklBTkJtUEFBTmdJQUlBTWdBallDQkVHOTd3QWdBeENDQVFzTEMwR004QUFnQVVFZ2FoQ0NBUXNOQUNBQUlBRWdBUkJaRUtBREM3QUVBUWwvSUFGQjcvLy8vd05MQkVBZ0FCQ0tBUXNnQUVFSWFpSUlRUU5xSWdvc0FBQWlCVUVBU0NJSkJIOGdDQ2dDQUVILy8vLy9CM0ZCZjJvaEFpQUFLQUlFQlVFQklRSWdCVUgvQVhFTElnY2dBVXNFZnlBSElnRUZJQUVMUVFKSklRTWdBVUVFYWtGOGNVRi9haUVCQWtBZ0F3Ui9RUUVpQVFVZ0FRc2dBa2NFUUFKQUFuOGdBd1JBSUFBb0FnQWhCQ0FKQkVBZ0JDRURRUUFoQlNBQUlRUUZJQUFnQkNBRlFmOEJjVUVCYWhDUEFSb2dCQkJTREFNTEJTQUJRUUZxSWdOQi8vLy8vd05MSVFZQ1FDQUJJQUpMQkVBZ0JrVUVRQ0FEUVFKMEVGOGhCQXdDQzBFSUVCUWhBa0VBSkFWQkZ5QUNRY3p1QUJBTkl3VWhCa0VBSkFVZ0JrRUJjUVJBRUJjaEJpQUNFQm9nQmhBZUJTQUNRZXdsTmdJQUlBSkIrQXBCREJBYkN3VUNRQUpBSUFZRVFFRUlFQlFoQVVFQUpBVkJGeUFCUWN6dUFCQU5Jd1VoQUVFQUpBVWdBRUVCY1FSQVFRQVFHQ0VBSUFFUUdnVWdBVUhzSlRZQ0FFRUFKQVZCR0NBQlFmZ0tRUXdRRGtFQUpBVU1BZ3NGUVFBa0JVRUVJQU5CQW5RUUJTRUVJd1VoQWtFQUpBVWdBa0VCY1EwQkRBUUxEQUVMUVFBUUdDRUFDeUFBRUJVYUVCWU1CZ3NMSUFrRVFDQUFLQUlBSVFOQkFTRUZCU0FFSUFBZ0JVSC9BWEZCQVdvUWp3RWFJQUJCQkdvTUFnc0xJQVFnQXlBQVFRUnFJZ0lvQWdCQkFXb1Fqd0VhSUFNUVVpQUZSUTBCSUFGQkFXb2hBeUFDQ3lFQklBZ2dBMEdBZ0lDQWVISTJBZ0FnQVNBSE5nSUFJQUFnQkRZQ0FBd0NDeUFLSUFjNkFBQUxDd3Y1QWdFRmZ5TUVJUWtqQkVFUWFpUUVRZTcvLy84RElBRnJJQUpKQkVBZ0FCQ0tBUXNnQUVFSWFpSU1MQUFEUVFCSUJIOGdBQ2dDQUFVZ0FBc2hDaUFCUWVmLy8vOEJTUVJBSUFJZ0FXb2lDQ0FCUVFGMElnSkpCSDhnQWdVZ0NDSUNDMEVFYWtGOGNTRUlJQUpCQWtrRWYwRUNCU0FJQ3lJQ1FmLy8vLzhEU3dSQVFRZ1FGQ0VDUVFBa0JVRVhJQUpCek80QUVBMGpCU0VJUVFBa0JTQUlRUUZ4QkVBUUZ5RUlJQUlRR2lBSUVCNEZJQUpCN0NVMkFnQWdBa0g0Q2tFTUVCc0xCU0FDSVFzTEJVSHYvLy8vQXlFTEN5QUxRUUowRUY4aEFpQUVCRUFnQWlBS0lBUVFqd0VhQ3lBR0JFQWdBaUFFUVFKMGFpQUhJQVlRandFYUN5QURJQVZySWdNZ0JHc2lCd1JBSUFJZ0JFRUNkR29nQmtFQ2RHb2dDaUFFUVFKMGFpQUZRUUowYWlBSEVJOEJHZ3NnQVVFQlJ3UkFJQW9RVWdzZ0FDQUNOZ0lBSUF3Z0MwR0FnSUNBZUhJMkFnQWdBQ0FESUFacUlnQTJBZ1FnQ1VFQU5nSUFJQUlnQUVFQ2RHb2dDU2dDQURZQ0FDQUpKQVFMUEFFQmZ5QUNCRUJCQUNRRlFSOGdBQ0FCSUFJUUJ4b2pCU0VCUVFBa0JTQUJRUUZ4QkVCQkFCQVlJZ0FRV2dVZ0FDRURDd1VnQUNFREN5QURDN2dCQVFWL0l3UWhCU01FUVJCcUpBUWdBRUVJYWlJRVFRTnFJZ1lzQUFBaUEwRUFTQ0lIQkg4Z0JDZ0NBRUgvLy8vL0IzRkJmMm9GUVFFTElnUWdBa2tFUUNBQUlBUWdBaUFFYXlBSEJIOGdBQ2dDQkFVZ0EwSC9BWEVMSWdOQkFDQURJQUlnQVJDZUF3VWdCd1IvSUFBb0FnQUZJQUFMSWdNZ0FTQUNFSjhER2lBRlFRQTJBZ0FnQXlBQ1FRSjBhaUFGS0FJQU5nSUFJQVlzQUFCQkFFZ0VRQ0FBSUFJMkFnUUZJQVlnQWpvQUFBc0xJQVVrQkNBQUMrMEJBUVIvSUFBZ0FCQlpRUUowYWlFQ0EwQWdBa0Y4YWlJQ0lBQkxJQUlvQWdCQlVHcEJDa2xCQVhOeEJFQU1BUVVnQWlFQkN3c0RRQ0FCUVh4cUlRUWdBU0FBU3lJRElBRW9BZ0JCVUdwQkNrbHhCRUFnQkNFQkRBRUxDeUFEUlFSQUlBSVBDd0pBQWtBRFFDQUJLQUlBSWdSQkxrWU5BaUFFUVZCcVFRcEpEUUVnQVVGOGFpSUJJQUJMRFFBTUFnc0FDeUFBRUZraEF3SkFBa0FEUUNBRFFRQktCRUFnQUNBRFFYOXFJZ1JCQW5ScUtBSUFRUzlHRFFJZ0JDRUREQUVMQ3d3QkN5QUFJQU5CQW5ScUlRQUxJQUJCTGhCMElnQkJBRWNnQUNBQlNYRUVmeUFCQlNBQ0N3OExJQUlMRFFBZ0FDQUJJQUVRYmhEL0FRdm1BZ0VJZnlBQlFXOUxCRUFnQUJDS0FRc2dBRUVMYWlJSkxBQUFJZ1ZCQUVnaUJBUi9JQUFvQWdoQi8vLy8vd2R4UVg5cUlRWWdBQ2dDQkFWQkNpRUdJQVZCL3dGeEN5SUhJQUZMQkg4Z0J5SUJCU0FCQzBFTFNTRURJQUZCRUdwQmNIRkJmMm9oQVFKQUlBTUVmMEVLQlNBQkN5SUlJQVpIQkVBQ1FBSkFJQU1FUUNBQUtBSUFJUUlnQkFSQVFRQWhCQ0FBSVFFRklBQWdBaUFGUWY4QmNVRUJhaENKQVJvZ0FoQlNEQU1MQlNBSVFRRnFJUUlnQ0NBR1N3UkFJQUlRWHlFQkJVRUFKQVZCQkNBQ0VBVWhBU01GSVFOQkFDUUZJQU5CQVhFRVFFRUFFQmdRRlJvUUZnd0dDd3NnQkFSQUlBQW9BZ0FoQWtFQklRUUZJQUVnQUNBRlFmOEJjVUVCYWhDSkFSb2dBRUVFYWlFRERBSUxDeUFCSUFJZ0FFRUVhaUlES0FJQVFRRnFFSWtCR2lBQ0VGSWdCRVVOQVNBSVFRRnFJUUlMSUFBZ0FrR0FnSUNBZUhJMkFnZ2dBeUFITmdJQUlBQWdBVFlDQUF3Q0N5QUpJQWM2QUFBTEN3dUNBZ0VEZnlNRUlRa2pCRUVRYWlRRVFXNGdBV3NnQWtrRVFDQUFFSW9CQ3lBQUxBQUxRUUJJQkg4Z0FDZ0NBQVVnQUFzaENpQUJRZWYvLy84SFNRUi9JQUlnQVdvaUNDQUJRUUYwSWdKSkJIOGdBZ1VnQ0NJQ0MwRVFha0Z3Y1NFSUlBSkJDMGtFZjBFTEJTQUlDd1ZCYndzaUFoQmZJUWdnQkFSQUlBZ2dDaUFFRUlrQkdnc2dCZ1JBSUFnZ0JHb2dCeUFHRUlrQkdnc2dBeUFGYXlJRElBUnJJZ2NFUUNBSUlBUnFJQVpxSUFvZ0JHb2dCV29nQnhDSkFSb0xJQUZCQ2tjRVFDQUtFRklMSUFBZ0NEWUNBQ0FBSUFKQmdJQ0FnSGh5TmdJSUlBQWdBeUFHYWlJQU5nSUVJQWxCQURvQUFDQUlJQUJxSUFrc0FBQTZBQUFnQ1NRRUMwb0JCSDhnQUNBQlJ3UkFJQUVzQUFzaUFrRUFTQ0VESUFFb0FnQWhCQ0FCS0FJRUlRVWdBa0gvQVhFaEFpQUFJQU1FZnlBRUJTQUJDeUFEQkg4Z0JRVWdBZ3NRL3dFYUN5QUFDN1FCQVFSL0l3UWhBeU1FUVJCcUpBUWdBRUlBTndJQUlBQkJBRFlDQ0NBQkxBQUxRUUJJQkVBZ0FTZ0NBQ0VFSUFFb0FnUWlBa0Z2U3dSQUlBQVFpZ0VMSUFKQkMwa0VRQ0FBSUFJNkFBc0ZJQUFnQWtFUWFrRndjU0lGRUY4aUFUWUNBQ0FBSUFWQmdJQ0FnSGh5TmdJSUlBQWdBallDQkNBQklRQUxJQUFnQkNBQ0VJa0JHaUFEUVFBNkFBQWdBQ0FDYWlBRExBQUFPZ0FBQlNBQUlBRXBBZ0EzQWdBZ0FDQUJLQUlJTmdJSUN5QURKQVFMTHdBZ0FFSFlKVFlDQUVFQUpBVkJHQ0FBUVFScUlBRVFEU01GSVFCQkFDUUZJQUJCQVhFRVFCQVhJZ0FRSGdzTFBBRUNmeUFCRUc0aUEwRU5haEJmSWdJZ0F6WUNBQ0FDSUFNMkFnUWdBa0VBTmdJSUlBSkJER29pQWlBQklBTkJBV29RVXhvZ0FDQUNOZ0lBQ3dZQUlBQVFYd3NwQVFGL0l3UWhCQ01FUVJCcUpBUWdCQ0FETmdJQUlBQWdBU0FDSUFRUWdBSWhBQ0FFSkFRZ0FBdGlBUVIvQW44Q1FDQUJLQUpNUVFCSURRQU1BQXNnQUVIL0FYRWhBeUFBUWY4QmNTSUVJQUVzQUV0SEJFQWdBVUVVYWlJRktBSUFJZ0lnQVNnQ0VFa0VRQ0FGSUFKQkFXbzJBZ0FnQWlBRE9nQUFJQVFNQWdzTElBRWdBQkNCQWdzaUFBdUxBZ0VHZnlNRUlRUWpCRUVRYWlRRVFhd2pLQUlBSVFVZ0FTd0FTa0VCU0FSQUlBRkJBUkNGQWhvTFFhd2pJQUVvQW5nMkFnQUNRQUpBSUFCQmdBRkpCRUFnQUVIL0FYRWhCaUFBUWY4QmNTSUNJQUVzQUV0SEJFQWdBVUVVYWlJSEtBSUFJZ01nQVNnQ0VFa0VRQ0FISUFOQkFXbzJBZ0FnQXlBR09nQUFJQUloQUF3RUN3c2dBU0FBRUlFQ0lRQUZJQUZCRkdvaUFpZ0NBQ0lEUVFScUlBRW9BaEJKQkVBZ0F5QUFFTEFCSWdOQkFFZ05BaUFDSUFJb0FnQWdBMm8yQWdBRklBUWdBQkN3QVNJQ1FRQklEUUlnQkNBQ0lBRVFqUUlnQWtrTkFnc0xJQUJCZjBZTkFBd0JDeUFCSUFFb0FnQkJJSEkyQWdCQmZ5RUFDMEdzSXlBRk5nSUFJQVFrQkNBQUM3a0JBUVIvSXdRaEJDTUVRWUFCYWlRRUlBUkJ5QUJxSWdOQ0FEY0NBQ0FEUWdBM0FnZ2dBMElBTndJUUlBTkNBRGNDR0NBRFFRQTJBaUFnQkVId0FHb2lCU0FDS0FJQU5nSUFRUUFnQVNBRklBUWdBeENFQWtFQVNBUi9RWDhGQW44Z0FDZ0NUQnBCQUFzaEFpQUFRUUVRaFFJYUlBQWdBQ2dDQUNJR1FWOXhOZ0lBSUFBZ0FTQUZJQVFnQXhDRUFpRUJJQUFnQUNnQ0FDSURJQVpCSUhGeU5nSUFJQU5CSUhFRWYwRi9CU0FCQ3dzaEFDQUVKQVFnQUFzOEFRSi9Ba0FnQUNnQ0FDSURCRUFnQUNFQ0EwQWdBU0FERUhSRkRRSWdBa0VFYWlJQ0tBSUFJZ01OQUFzRklBQWhBZ3NMSUFJZ0FHdEJBblVMYndFRGZ5QUFJQUZyUVFKMUlBSkpCRUFEUUNBQUlBSkJmMm9pQWtFQ2RHb2dBU0FDUVFKMGFpZ0NBRFlDQUNBQ0RRQUxCU0FDQkVBZ0FDRURBMEFnQVVFRWFpRUVJQU5CQkdvaEJTQURJQUVvQWdBMkFnQWdBa0YvYWlJQ0JFQWdCQ0VCSUFVaEF3d0JDd3NMQ3lBQUN6QUJBbjhnQWdSQUlBQWhBd05BSUFOQkJHb2hCQ0FESUFFMkFnQWdBa0YvYWlJQ0JFQWdCQ0VEREFFTEN3c2dBQXVUQWdFQmZ3SkFBa0FnQVNBQWMwRURjUTBBSUFKQkFFY2lBeUFCUVFOeFFRQkhjUVJBQTBBZ0FDQUJMQUFBSWdNNkFBQWdBMFVOQXlBQVFRRnFJUUFnQWtGL2FpSUNRUUJISWdNZ0FVRUJhaUlCUVFOeFFRQkhjUTBBQ3dzZ0F3UkFJQUVzQUFBRVFDQUNRUU5MQkVBRFFDQUJLQUlBSWdOQmdJR0NoSGh4UVlDQmdvUjRjeUFEUWYvOSszZHFjUTBFSUFBZ0F6WUNBQ0FCUVFScUlRRWdBRUVFYWlFQUlBSkJmR29pQWtFRFN3MEFDd3NNQWdzRlFRQWhBZ3NNQVFzZ0FnUkFJQUVoQXlBQ0lRRURRQ0FBSUFNc0FBQWlBam9BQUNBQ1JRUkFJQUVoQWd3REN5QURRUUZxSVFNZ0FFRUJhaUVBSUFGQmYyb2lBUTBBUVFBaEFnc0ZRUUFoQWdzTElBQkJBQ0FDRUZRYUlBQUxhUUVEZnlBQUlBQVFXVUVDZEdvaEF3SkFJQUlFUUNBQ0lRUWdBU0VDSUFNaEFRTkFJQUlvQWdBaUJVVU5BaUFDUVFScUlRSWdBVUVFYWlFRElBRWdCVFlDQUNBRVFYOXFJZ1FFUUNBRElRRU1BUVVnQXlFQkN3c0ZJQU1oQVFzTElBRkJBRFlDQUNBQUN6SUFBa0FnQWdSQUEwQWdBQ2dDQUNBQlJnMENJQUJCQkdvaEFDQUNRWDlxSWdJTkFFRUFJUUFMQlVFQUlRQUxDeUFBQzNVQkFuOENmeUFCS0FJQUlnSUVmeUFCS0FJRVJRUkFJQUFnQWhCMElnRUVRQ0FCSUFCclFRSjFEQU1GSUFBUVdRd0RDd0FMQWtBZ0FDZ0NBQ0lEQkVBZ0FDRUNBMEFnQVNBREVIUU5BaUFDUVFScUlnSW9BZ0FpQXcwQUN3VWdBQ0VDQ3dzZ0FpQUFhMEVDZFFVZ0FCQlpDd3NpQUF0REFRRi9Jd1FoQWlNRVFSQnFKQVFnQWlBQU5nSUFJQUlnQVRZQ0JFSFRBQ0FDRUNnaUFFR0FZRXNFUUVHSXZBTkJBQ0FBYXpZQ0FFRi9JUUFMSUFJa0JDQUFDNVFCQVFKL0l3UWhBaU1FUVpBZ2FpUUVJQUpCQ0dvaEF3SkFBa0FnQUFSQUlBRUVRQXdDQlVHSXZBTkJGallDQUVFQUlRQUxCVUdBSUNFQklBTWhBQXdCQ3d3QkN5QUNJQUEyQWdBZ0FpQUJOZ0lFUWJjQklBSVFJeUlCUVlCZ1N3Ui9RWWk4QTBFQUlBRnJOZ0lBUVg4RklBRUxRUUJJQkVCQkFDRUFCU0FBSUFOR0JFQWdBeENIQWlFQUN3c0xJQUlrQkNBQUN6MEJBWDhnQUVIL0FYRWlBVUdBQVVrRWZ5QUJCU0FBUVJoMFFSaDFRZisvQTNFaEFTQUFRWDlIUWF3aktBSUFLQUlBUlhFRWZ5QUJCVUYvQ3dzTHpnTUJBMzhqQkNFR0l3UkJFR29rQkFKQUlBQUVRQUpBSUFKQkEwc0VRQ0FDSVFRZ0FTZ0NBQ0VEQTBBQ1FDQURLQUlBSWdWQmYycEIvZ0JMQkg4Z0JVVU5BU0FBSUFWQkFCQ1JBU0lGUVg5R0JFQkJmeUVDREFjTElBUWdCV3NoQkNBQUlBVnFCU0FBSUFVNkFBQWdCRUYvYWlFRUlBRW9BZ0FoQXlBQVFRRnFDeUVBSUFFZ0EwRUVhaUlETmdJQUlBUkJBMHNOQVNBRUlRTU1Bd3NMSUFCQkFEb0FBQ0FCUVFBMkFnQWdBaUFFYXlFQ0RBTUZJQUloQXdzTElBTUVRQ0FBSVFRZ0FTZ0NBQ0VBQWtBQ1FBTkFJQUFvQWdBaUJVRi9ha0grQUVzRWZ5QUZSUTBDSUFZZ0JVRUFFSkVCSWdWQmYwWUVRRUYvSVFJTUJ3c2dBeUFGU1EwRElBUWdBQ2dDQUVFQUVKRUJHaUFFSUFWcUlRUWdBeUFGYXdVZ0JDQUZPZ0FBSUFSQkFXb2hCQ0FCS0FJQUlRQWdBMEYvYWdzaEF5QUJJQUJCQkdvaUFEWUNBQ0FERFFBTUJRc0FDeUFFUVFBNkFBQWdBVUVBTmdJQUlBSWdBMnNoQWd3REN5QUNJQU5ySVFJTEJTQUJLQUlBSWdBb0FnQWlBUVJBUVFBaEFnTkFJQUZCL3dCTEJFQWdCaUFCUVFBUWtRRWlBVUYvUmdSQVFYOGhBZ3dGQ3dWQkFTRUJDeUFCSUFKcUlRSWdBRUVFYWlJQUtBSUFJZ0VOQUFzRlFRQWhBZ3NMQ3lBR0pBUWdBZ3ZsQ2dFVGZ5QUJLQUlBSVFRQ2Z3SkFJQU5GRFFBZ0F5Z0NBQ0lGUlEwQUlBQUVmeUFEUVFBMkFnQWdCU0VQSUFBaEN5QUNJUklnQkNFSFFTc0ZJQVVoQ1NBRUlRZ2dBaUVOUVJrTERBRUxJQUJCQUVjaEEwR3NJeWdDQUNnQ0FBUkFJQU1FUUNBQUlSUWdBaUVUSUFRaERrRVBEQUlGSUFRaEZTQUNJUlpCRGd3Q0N3QUxJQU5GQkVBZ0JCQnVJUXhCT3d3QkN3SkFJQUlFUUNBRUlRTWdBQ0VGSUFJaEJBTkFJQU1zQUFBaUNnUkFJQU5CQVdvaEF5QUZRUVJxSVFZZ0JTQUtRZisvQTNFMkFnQWdCRUYvYWlJRVJRMERJQVloQlF3QkN3c2dCVUVBTmdJQUlBRkJBRFlDQUNBQ0lBUnJJUXhCT3d3Q0JTQUVJUU1MQ3lBQklBTTJBZ0FnQWlFTVFUc0xJUU1EUUFKQUFrQUNRQ0FEUVE1R0JFQWdGU0VFSUJZaEF3TkFJQVFzQUFBaUJVSC9BWEZCZjJwQi93QkpCRUFnQkVFRGNVVUVRQ0FFS0FJQUlnWkIvd0Z4SVFVZ0JrSC8vZnQzYWlBR2NrR0FnWUtFZUhGRkJFQURRQ0FEUVh4cUlRTWdCRUVFYWlJRUtBSUFJZ1ZCLy8zN2Qyb2dCWEpCZ0lHQ2hIaHhSUTBBQ3lBRlFmOEJjU0VGQ3dzTElBVkIvd0Z4SWdWQmYycEIvd0JKQkVBZ0JFRUJhaUVFSUFOQmYyb2hBd3dCQ3dzZ0JVRytmbW9pQlVFeVN3UkFJQVFoQlNBQUlRWU1Bd1VnQlVFQ2RFR2tIbW9vQWdBaENTQUVRUUZxSVFnZ0F5RU5RUmtoQXd3RkN3QUZJQU5CRDBZRVFBSkFJQk1FUUNBVUlRUWdFeUVESUE0aEJRTkFBa0FDUUNBRkxBQUFJZ1pCL3dGeFFYOXFRZjhBU1FSQUlBTkJCRXNnQlVFRGNVVnhCRUFDUUFOQUlBVW9BZ0FpQmtILy9mdDNhaUFHY2tHQWdZS0VlSEVOQVNBRUlBWkIvd0Z4TmdJQUlBUWdCUzBBQVRZQ0JDQUVJQVV0QUFJMkFnZ2dCVUVFYWlFS0lBUkJFR29oQmlBRUlBVXRBQU0yQWd3Z0EwRjhhaUlEUVFSTEJFQWdCaUVFSUFvaEJRd0JDd3NnQmlFRUlBb2lCU3dBQUNFR0RBTUxJQVpCL3dGeElRWUxDd3NnQmtIL0FYRWlDa0YvYWtIL0FFOE5BQ0FGUVFGcUlRVWdCRUVFYWlFR0lBUWdDallDQUNBRFFYOXFJZ05GRFFNZ0JpRUVEQUVMQ3lBS1FiNSthaUlHUVRKTEJFQWdCQ0VHREFZTElBWkJBblJCcEI1cUtBSUFJUThnQkNFTElBTWhFaUFGUVFGcUlRZEJLeUVEREFjRklBNGhCUXNMSUFFZ0JUWUNBQ0FDSVF4Qk95RUREQVVGSUFOQkdVWUVRQ0FJTFFBQVFRTjJJZ05CY0dvZ0F5QUpRUnAxYW5KQkIwc0VRQ0FBSVFNZ0NTRUdJQWdoQlNBTklRUU1CQVVnQ0VFQmFpRURJQWxCZ0lDQUVIRUVmeUFETEFBQVFjQUJjVUdBQVVjRVFDQUFJUU1nQ1NFR0lBZ2hCU0FOSVFRTUJnc2dDRUVDYWlFRElBbEJnSUFnY1FSL0lBTXNBQUJCd0FGeFFZQUJSd1JBSUFBaEF5QUpJUVlnQ0NFRklBMGhCQXdIQ3lBSVFRTnFCU0FEQ3dVZ0F3c2hGU0FOUVg5cUlSWkJEaUVEREFjTEFBVWdBMEVyUmdSQUlBY3RBQUFpQlVFRGRpSURRWEJxSUFNZ0QwRWFkV3B5UVFkTEJFQWdDeUVESUE4aEJpQUhJUVVnRWlFRURBVUZJQWRCQVdvaEJDQUZRWUIvYWlBUFFRWjBjaUlEUVFCSUJFQWdCQzBBQUVHQWYyb2lCVUUvU3dSQUlBZEJmMm9oRUNBTElSRU1DUXNnQjBFQ2FpRUVJQVVnQTBFR2RISWlBMEVBU0FSQUlBUXRBQUJCZ0g5cUlnUkJQMHNFUUNBSFFYOXFJUkFnQ3lFUkRBb0ZJQWRCQTJvaERpQUVJQU5CQm5SeUlRTUxCU0FFSVE0TEJTQUVJUTRMSUFzZ0F6WUNBQ0FMUVFScUlSUWdFa0YvYWlFVFFROGhBd3dJQ3dBRklBTkJPMFlFUUNBTUR3c0xDd3NMREFJTElBVkJmMm9oQlNBR0JFQWdCU0VRSUFNaEVRVWdBeUVHSUFRaEF3d0JDd3dCQ3lBRkxBQUFCRUFnQlNFUUlBWWhFUVVnQmdSQUlBWkJBRFlDQUNBQlFRQTJBZ0FMSUFJZ0Eyc2hERUU3SVFNTUFnc0xRWWk4QTBIVUFEWUNBQ0FSQkVBZ0FTQVFOZ0lBQzBGL0lReEJPeUVEREFBTEFBdUpBUUVDZnlBQVJRUkFEd3NnQUNnQ0FFVUVRQThMSUFBUVdTRUVBa0FDUUFOQUFrQWdCRUVBVEFSQUlBQWhBd3dCQ3lBQUlBUkJmMm9pQTBFQ2RHb29BZ0JCTDBZTkFpQURJUVFNQVFzTERBRUxJQUFnQkVFQ2RHb2hBd3NnQTBFdUVLMEJJZ01FUUNBRFFRQTJBZ0FMSUFGRkJFQVBDeUFBUWVRTUlBSVFlQm9nQUNBQklBSVFlQm9McFFJQkEzOGpCQ0VFSXdSQkVHb2tCQUpBSUFCQkJrc0VmMEVBQlVHWXZBTVFIQ0FBUVFaSEJFQWdBQ0FCRUlzQ0lRQkJtTHdERUNvTUFnc2dBUVJBSUFSQm5Pb0FLUUFBTndBQUlBUkJwT29BS1FBQU53QUlRUUFoQUFOQUlBRkJPeENSQWlJRElBRnJJZ0pCRUVnRVFDQUVJQUVnQWhCVEdpQUVJQUpxUVFBNkFBQWdBMEVCYWlFQ0lBTXNBQUFFUUNBQ0lRRUxDeUFBSUFRUWl3SWFJQUJCQVdvaUFFRUdSdzBBQ3d0QkFDRUJRYXlLQkNFQUEwQWdBVUVDZEVId3V3TnFLQUlBSWdKQkNHb2hBeUFDQkg4Z0F3VkJyT29BSWdNTEVHNGhBaUFBSUFNZ0FoQlRHaUFBSUFKcUlnTkJPem9BQUNBQUlBSkJBV3BxSVFBZ0FVRUJhaUlCUVFaSERRQUxJQU5CQURvQUFFR1l2QU1RS2tHc2lnUUxJUUFMSUFRa0JDQUFDem9CQW44Z0FDZ0NFQ0FBUVJScUlnTW9BZ0FpQkdzaUFDQUNTd1JBSUFJaEFBc2dCQ0FCSUFBUVV4b2dBeUFES0FJQUlBQnFOZ0lBSUFJTC9CY0RFMzhDZmdKOEl3UWhEU01FUWJBRWFpUUVJQTFCQURZQ0FDQUJ2VUlBVXdSQUlBR2FJUUZCQVNFUlFlZnBBQ0VPQlNBRVFZQVFjVVVoQmlBRVFRRnhCSDlCN2VrQUJVSG82UUFMSVE0Z0JFR0JFSEZCQUVjaEVTQUdSUVJBUWVycEFDRU9Dd3NnRFVFSWFpRUpJQTFCakFScUlnOGhFaUFOUVlBRWFpSUlRUXhxSVJNQ2Z5QUJ2VUtBZ0lDQWdJQ0ErUDhBZzBLQWdJQ0FnSUNBK1A4QVVRUi9JQVZCSUhGQkFFY2lBd1IvUWZycEFBVkIvdWtBQ3lFRklBRWdBV0loQmlBREJIOUJndW9BQlVHRzZnQUxJUWtnQUVFZ0lBSWdFVUVEYWlJRElBUkIvLzk3Y1JCbUlBQWdEaUFSRUdNZ0FDQUdCSDhnQ1FVZ0JRdEJBeEJqSUFCQklDQUNJQU1nQkVHQXdBQnpFR1lnQXdVZ0FTQU5FSTRDUkFBQUFBQUFBQUJBb2lJQlJBQUFBQUFBQUFBQVlpSUdCRUFnRFNBTktBSUFRWDlxTmdJQUN5QUZRU0J5SWd0QjRRQkdCRUFnRGtFSmFpRUdJQVZCSUhFaUJ3UkFJQVloRGdzZ0EwRUxTMEVNSUFOcklnWkZja1VFUUVRQUFBQUFBQUFnUUNFYkEwQWdHMFFBQUFBQUFBQXdRS0loR3lBR1FYOXFJZ1lOQUFzZ0Rpd0FBRUV0UmdSOElCc2dBWm9nRzZHZ21nVWdBU0Fib0NBYm9Rc2hBUXRCQUNBTktBSUFJZ2xySVFZZ0NVRUFTQVIvSUFZRklBa0xyQ0FURUpJQklnWWdFMFlFUUNBSVFRdHFJZ1pCTURvQUFBc2dFVUVDY2lFSUlBWkJmMm9nQ1VFZmRVRUNjVUVyYWpvQUFDQUdRWDVxSWdrZ0JVRVBham9BQUNBRFFRRklJUW9nQkVFSWNVVWhEQ0FQSVFVRFFDQUZJQWNnQWFvaUJrR0s2Z0JxTFFBQWNqb0FBQ0FCSUFhM29VUUFBQUFBQUFBd1FLSWhBU0FGUVFGcUlnWWdFbXRCQVVZRWZ5QU1JQW9nQVVRQUFBQUFBQUFBQUdGeGNRUi9JQVlGSUFaQkxqb0FBQ0FGUVFKcUN3VWdCZ3NoQlNBQlJBQUFBQUFBQUFBQVlnMEFDd0ovQWtBZ0EwVU5BRUYrSUJKcklBVnFJQU5PRFFBZ0EwRUNhaUVESUFVZ0Vtc01BUXNnQlNBU2F5SURDeUVHSUFCQklDQUNJQk1nQ1dzaUJ5QUlhaUFEYWlJRklBUVFaaUFBSUE0Z0NCQmpJQUJCTUNBQ0lBVWdCRUdBZ0FSekVHWWdBQ0FQSUFZUVl5QUFRVEFnQXlBR2EwRUFRUUFRWmlBQUlBa2dCeEJqSUFCQklDQUNJQVVnQkVHQXdBQnpFR1lnQlF3Q0N5QUdCRUFnRFNBTktBSUFRV1JxSWdjMkFnQWdBVVFBQUFBQUFBQ3dRYUloQVFVZ0RTZ0NBQ0VIQ3lBSlFhQUNhaUVHSUFkQkFFZ0VmeUFKQlNBR0lna0xJUWdEUUNBSUlBR3JJZ1kyQWdBZ0NFRUVhaUVJSUFFZ0JyaWhSQUFBQUFCbHpjMUJvaUlCUkFBQUFBQUFBQUFBWWcwQUN5QUhRUUJLQkVBZ0NTRUdBMEFnQjBFZFNBUi9JQWNGUVIwTElRd2dDRUY4YWlJSElBWlBCRUFnREswaEdVRUFJUW9EUUNBSElBY29BZ0N0SUJtR0lBcXRmQ0lhUW9DVTY5d0RnajRDQUNBYVFvQ1U2OXdEZ0tjaENpQUhRWHhxSWdjZ0JrOE5BQXNnQ2dSQUlBWkJmR29pQmlBS05nSUFDd3NEUUNBSUlBWkxCRUFnQ0VGOGFpSUhLQUlBUlFSQUlBY2hDQXdDQ3dzTElBMGdEU2dDQUNBTWF5SUhOZ0lBSUFkQkFFb05BQXNGSUFraEJnc2dBMEVBU0FSL1FRWUZJQU1MSVFvZ0IwRUFTQVJBSUFwQkdXcEJDVzFCQVdvaEVDQUxRZVlBUmlFVklBWWhBeUFJSVFZRFFFRUFJQWRySWd4QkNVNEVRRUVKSVF3TElBTWdCa2tFUUVFQklBeDBRWDlxSVJaQmdKVHIzQU1nREhZaEZFRUFJUWNnQXlFSUEwQWdDQ0FJS0FJQUloY2dESFlnQjJvMkFnQWdGeUFXY1NBVWJDRUhJQWhCQkdvaUNDQUdTUTBBQ3lBRFFRUnFJUWdnQXlnQ0FFVUVRQ0FJSVFNTElBY0VRQ0FHSUFjMkFnQWdCa0VFYWlFR0N3VWdBMEVFYWlFSUlBTW9BZ0JGQkVBZ0NDRURDd3NnRlFSL0lBa0ZJQU1MSWdnZ0VFRUNkR29oQnlBR0lBaHJRUUoxSUJCS0JFQWdCeUVHQ3lBTklBMG9BZ0FnREdvaUJ6WUNBQ0FIUVFCSURRQWdCaUVIQ3dVZ0JpRURJQWdoQndzZ0NTRU1JQU1nQjBrRVFDQU1JQU5yUVFKMVFRbHNJUVlnQXlnQ0FDSUlRUXBQQkVCQkNpRUpBMEFnQmtFQmFpRUdJQWdnQ1VFS2JDSUpUdzBBQ3dzRlFRQWhCZ3NnQzBIbkFFWWhGU0FLUVFCSElSWWdDaUFMUWVZQVJ3Ui9JQVlGUVFBTGF5QVdJQlZ4UVI5MFFSOTFhaUlKSUFjZ0RHdEJBblZCQ1d4QmQycElCSDhnQ1VHQXlBQnFJZ2xCQ1cwaEVDQUpRUWx2SWdsQkNFZ0VRRUVLSVFnRFFDQUpRUUZxSVFzZ0NFRUtiQ0VJSUFsQkIwZ0VRQ0FMSVFrTUFRc0xCVUVLSVFnTElBd2dFRUVDZEdwQmhHQnFJZ2tvQWdBaUVDQUljQ0VMSUFsQkJHb2dCMFlpRkNBTFJYRkZCRUFnRUNBSWJrRUJjUVI4UkFFQUFBQUFBRUJEQlVRQUFBQUFBQUJBUXdzaEhDQUxJQWhCQW0waUYwa2hHQ0FVSUFzZ0YwWnhCSHhFQUFBQUFBQUE4RDhGUkFBQUFBQUFBUGcvQ3lFQklCZ0VRRVFBQUFBQUFBRGdQeUVCQ3lBUkJFQWdISm9oR3lBT0xBQUFRUzFHSWhRRVFDQWJJUndMSUFHYUlSc2dGRVVFUUNBQklSc0xCU0FCSVJzTElBa2dFQ0FMYXlJTE5nSUFJQndpQVNBYm9DQUJZZ1JBSUFrZ0N5QUlhaUlHTmdJQUlBWkIvNVByM0FOTEJFQURRQ0FKUVFBMkFnQWdDVUY4YWlJSklBTkpCRUFnQTBGOGFpSURRUUEyQWdBTElBa2dDU2dDQUVFQmFpSUdOZ0lBSUFaQi81UHIzQU5MRFFBTEN5QU1JQU5yUVFKMVFRbHNJUVlnQXlnQ0FDSUxRUXBQQkVCQkNpRUlBMEFnQmtFQmFpRUdJQXNnQ0VFS2JDSUlUdzBBQ3dzTEN5QUdJUWdnQnlBSlFRUnFJZ1pOQkVBZ0J5RUdDeUFEQlNBR0lRZ2dCeUVHSUFNTElRa0RRQUpBSUFZZ0NVMEVRRUVBSVJBTUFRc2dCa0Y4YWlJREtBSUFCRUJCQVNFUUJTQURJUVlNQWdzTEMwRUFJQWhySVJRZ0ZRUkFJQW9nRmtFQmMwRUJjV29pQXlBSVNpQUlRWHRLY1FSL0lBVkJmMm9oQlNBRFFYOXFJQWhyQlNBRlFYNXFJUVVnQTBGL2Fnc2hBeUFFUVFoeElncEZCRUFnRUFSQUlBWkJmR29vQWdBaUN3UkFJQXRCQ25BRVFFRUFJUWNGUVFBaEIwRUtJUW9EUUNBSFFRRnFJUWNnQ3lBS1FRcHNJZ3B3UlEwQUN3c0ZRUWtoQndzRlFRa2hCd3NnQmlBTWEwRUNkVUVKYkVGM2FpRUtJQVZCSUhKQjVnQkdCRUFnQXlBS0lBZHJJZ2RCQUVvRWZ5QUhCVUVBSWdjTFRnUkFJQWNoQXdzRklBTWdDaUFJYWlBSGF5SUhRUUJLQkg4Z0J3VkJBQ0lIQzA0RVFDQUhJUU1MQzBFQUlRb0xCU0FLSVFNZ0JFRUljU0VLQ3lBRlFTQnlRZVlBUmlJVkJFQkJBQ0VISUFoQkFFd0VRRUVBSVFnTEJTQVRJQWhCQUVnRWZ5QVVCU0FJQzZ3Z0V4Q1NBU0lIYTBFQ1NBUkFBMEFnQjBGL2FpSUhRVEE2QUFBZ0V5QUhhMEVDU0EwQUN3c2dCMEYvYWlBSVFSOTFRUUp4UVN0cU9nQUFJQWRCZm1vaUJ5QUZPZ0FBSUJNZ0Iyc2hDQXNnQUVFZ0lBSWdFVUVCYWlBRGFpQURJQXB5SWhaQkFFZHFJQWhxSWdzZ0JCQm1JQUFnRGlBUkVHTWdBRUV3SUFJZ0N5QUVRWUNBQkhNUVppQVZCRUFnRDBFSmFpSU9JUW9nRDBFSWFpRUlJQWtnREVzRWZ5QU1CU0FKQ3lJSElRa0RRQ0FKS0FJQXJTQU9FSklCSVFVZ0NTQUhSZ1JBSUFVZ0RrWUVRQ0FJUVRBNkFBQWdDQ0VGQ3dVZ0JTQVBTd1JBSUE5Qk1DQUZJQkpyRUZRYUEwQWdCVUYvYWlJRklBOUxEUUFMQ3dzZ0FDQUZJQW9nQldzUVl5QUpRUVJxSWdVZ0RFMEVRQ0FGSVFrTUFRc0xJQllFUUNBQVFacnFBRUVCRUdNTElBVWdCa2tnQTBFQVNuRUVRQU5BSUFVb0FnQ3RJQTRRa2dFaUNTQVBTd1JBSUE5Qk1DQUpJQkpyRUZRYUEwQWdDVUYvYWlJSklBOUxEUUFMQ3lBQUlBa2dBMEVKU0FSL0lBTUZRUWtMRUdNZ0EwRjNhaUVKSUFWQkJHb2lCU0FHU1NBRFFRbEtjUVJBSUFraEF3d0JCU0FKSVFNTEN3c2dBRUV3SUFOQkNXcEJDVUVBRUdZRklBbEJCR29oQlNBUUJIOGdCZ1VnQlFzaERDQURRWDlLQkVBZ0NrVWhFU0FQUVFscUlnb2hFRUVBSUJKcklSSWdEMEVJYWlFT0lBTWhCU0FKSVFZRFFDQUdLQUlBclNBS0VKSUJJZ01nQ2tZRVFDQU9RVEE2QUFBZ0RpRURDd0pBSUFZZ0NVWUVRQ0FEUVFGcUlRZ2dBQ0FEUVFFUVl5QVJJQVZCQVVoeEJFQWdDQ0VEREFJTElBQkJtdW9BUVFFUVl5QUlJUU1GSUFNZ0QwME5BU0FQUVRBZ0F5QVNhaEJVR2dOQUlBTkJmMm9pQXlBUFN3MEFDd3NMSUFBZ0F5QUZJQkFnQTJzaUEwb0VmeUFEQlNBRkN4QmpJQVpCQkdvaUJpQU1TU0FGSUFOcklnVkJmMHB4RFFBZ0JTRURDd3NnQUVFd0lBTkJFbXBCRWtFQUVHWWdBQ0FISUJNZ0Iyc1FZd3NnQUVFZ0lBSWdDeUFFUVlEQUFITVFaaUFMQ3dzaEFDQU5KQVFnQUNBQ1NBUi9JQUlGSUFBTEN5NEFJQUJDQUZJRVFBTkFJQUZCZjJvaUFTQUFwMEVIY1VFd2Nqb0FBQ0FBUWdPSUlnQkNBRklOQUFzTElBRUxOZ0FnQUVJQVVnUkFBMEFnQVVGL2FpSUJJQUNuUVE5eFFZcnFBR290QUFBZ0FuSTZBQUFnQUVJRWlDSUFRZ0JTRFFBTEN5QUJDL1FDQVFOL0l3UWhCQ01FUVlBQmFpUUVJQVJCL0FCcUlRVWdCRUhrSXlrQ0FEY0NBQ0FFUWV3aktRSUFOd0lJSUFSQjlDTXBBZ0EzQWhBZ0JFSDhJeWtDQURjQ0dDQUVRWVFrS1FJQU53SWdJQVJCakNRcEFnQTNBaWdnQkVHVUpDa0NBRGNDTUNBRVFad2tLUUlBTndJNElBUkJRR3RCcENRcEFnQTNBZ0FnQkVHc0pDa0NBRGNDU0NBRVFiUWtLUUlBTndKUUlBUkJ2Q1FwQWdBM0FsZ2dCRUhFSkNrQ0FEY0NZQ0FFUWN3a0tRSUFOd0pvSUFSQjFDUXBBZ0EzQW5BZ0JFSGNKQ2dDQURZQ2VBSkFBa0FnQVVGL2FrSCsvLy8vQjAwTkFDQUJCRUJCaUx3RFFjc0FOZ0lBUVg4aEFBVWdCU0VBUVFFaEFRd0JDd3dCQ3lBRUlBRkJmaUFBYXlJRlN3Ui9JQVVpQVFVZ0FRczJBakFnQkVFVWFpSUZJQUEyQWdBZ0JDQUFOZ0lzSUFSQkVHb2lCaUFBSUFGcUlnQTJBZ0FnQkNBQU5nSWNJQVFnQWlBREVNNEJJUUFnQVFSQUlBVW9BZ0FpQVNBQklBWW9BZ0JHUVI5MFFSOTFha0VBT2dBQUN3c2dCQ1FFSUFBTEtRRUJmeU1FSVFRakJFRVFhaVFFSUFRZ0F6WUNBQ0FBSUFFZ0FpQUVFTUFESVFBZ0JDUUVJQUFMMWdFQkFuOENRQ0FCSUFCelFRTnhSUVJBSUFGQkEzRUVRQU5BSUFBZ0FTd0FBQ0lDT2dBQUlBSkZEUU1nQUVFQmFpRUFJQUZCQVdvaUFVRURjUTBBQ3dzZ0FTZ0NBQ0lDUVlDQmdvUjRjVUdBZ1lLRWVITWdBa0gvL2Z0M2FuRkZCRUFEUUNBQVFRUnFJUU1nQUNBQ05nSUFJQUZCQkdvaUFTZ0NBQ0lDUVlDQmdvUjRjVUdBZ1lLRWVITWdBa0gvL2Z0M2FuRUVRQ0FESVFBRklBTWhBQXdCQ3dzTEN5QUFJQUVzQUFBaUFqb0FBQ0FDQkVBRFFDQUFRUUZxSWdBZ0FVRUJhaUlCTEFBQUlnSTZBQUFnQWcwQUN3c0xJQUFMandJQkEzOGdBVUgvQVhFaEJBSkFBa0FnQWtFQVJ5SURJQUJCQTNGQkFFZHhCRUFnQVVIL0FYRWhCUU5BSUFBdEFBQWdCVVlOQWlBQ1FYOXFJZ0pCQUVjaUF5QUFRUUZxSWdCQkEzRkJBRWR4RFFBTEN5QUREUUJCQUNFQkRBRUxJQUF0QUFBZ0FVSC9BWEVpQTBZRVFDQUNJUUVGSUFSQmdZS0VDR3doQkFKQUFrQWdBa0VEU3dSQUlBSWhBUU5BSUFBb0FnQWdCSE1pQWtHQWdZS0VlSEZCZ0lHQ2hIaHpJQUpCLy8zN2QycHhSUVJBSUFCQkJHb2hBQ0FCUVh4cUlnRkJBMHNOQVF3REN3c0ZJQUloQVF3QkN3d0JDeUFCUlFSQVFRQWhBUXdEQ3dzRFFDQUFMUUFBSUFOR0RRSWdBRUVCYWlFQUlBRkJmMm9pQVEwQVFRQWhBUXNMQ3lBQkJIOGdBQVZCQUFzTFF3RUJmeU1FSVFJakJFRVFhaVFFSUFJZ0FEWUNBQ0FDSUFFMkFnUkIyd0FnQWhBcElnQkJnR0JMQkVCQmlMd0RRUUFnQUdzMkFnQkJmeUVBQ3lBQ0pBUWdBQXVXQmdFSmZ5TUVJUUlqQkVHUUFtb2tCQ0FDUVFocUlRVWdBaUVHQWtBZ0FTd0FBRVVFUUVHZTVRQVFPeUlCQkVBZ0FTd0FBQTBDQ3lBQVFReHNRYVhsQUdvUU95SUJCRUFnQVN3QUFBMENDMEh0NVFBUU95SUJCRUFnQVN3QUFBMENDMEh5NVFBaEFRc0xRUUFoQWdOQUFrQUNRQUpBSUFFZ0Ftb3NBQUFPTUFBQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFBRUxJQUloQkF3QkN5QUNRUUZxSWdKQkQwa05BU0FDSVFRTEN3SkFBa0FDUUNBQkxBQUFJZ0pCTGtZRVFFSHk1UUFoQVFVZ0FTQUVhaXdBQUFSQVFmTGxBQ0VCQlNBQ1FjTUFSdzBDQ3dzZ0FTd0FBVVVOQVFzZ0FVSHk1UUFRaXdGRkRRQWdBVUg2NVFBUWl3RkZEUUJCakx3REtBSUFJZ0lFUUFOQUlBRWdBa0VJYWhDTEFVVU5BeUFDS0FJWUlnSU5BQXNMUVpDOEF4QWNBa0JCakx3REtBSUFJZ0lFUUFOQUlBRWdBa0VJYWhDTEFRUkFJQUlvQWhnaUFrVU5Bd3dCQ3d0QmtMd0RFQ29NQXdzTEFrQUNRRUhRdXdNb0FnQU5BRUdBNWdBUU95SUNSUTBBSUFJc0FBQkZEUUJCL2dFZ0JHc2hDU0FFUVFGcUlRb0RRQUpBSUFKQk9oQ1JBaUlITEFBQUlRTWdCeUFDYXlBRFFRQkhRUjkwUVI5MWFpSUlJQWxKQkVBZ0JTQUNJQWdRVXhvZ0JTQUlhaUlDUVM4NkFBQWdBa0VCYWlBQklBUVFVeG9nQlNBS0lBaHFha0VBT2dBQUlBVWdCaEFkSWdNTkFTQUhMQUFBSVFNTElBY2dBMEgvQVhGQkFFZHFJZ0lzQUFBTkFRd0NDd3RCSEJCc0lnSUVRQ0FDSUFNMkFnQWdBaUFHS0FJQU5nSUVJQUpCQ0dvaUF5QUJJQVFRVXhvZ0F5QUVha0VBT2dBQUlBSkJqTHdES0FJQU5nSVlRWXk4QXlBQ05nSUFJQUloQVFVZ0F5QUdLQUlBRU1RREdnd0JDd3dCQzBFY0VHd2lBZ1JBSUFKQjNCMG9BZ0EyQWdBZ0FrSGdIU2dDQURZQ0JDQUNRUWhxSWdNZ0FTQUVFRk1hSUFNZ0JHcEJBRG9BQUNBQ1FZeThBeWdDQURZQ0dFR012QU1nQWpZQ0FBc2dBaUVCQzBHUXZBTVFLaUFBSUFGeUJIOGdBUVZCM0IwTElRSU1BUXNnQUVVRVFDQUJMQUFCUVM1R0JFQkIzQjBoQWd3Q0N3dEJBQ0VDQ3lBR0pBUWdBZ3VLQXdFS2Z5QUFLQUlJSUFBb0FnQkJvdHJ2MXdacUlnWVFqQUVoQkNBQUtBSU1JQVlRakFFaEF5QUFLQUlRSUFZUWpBRWhCd0pBSUFRZ0FVRUNka2tFUUNBRElBRWdCRUVDZEdzaUJVa2dCeUFGU1hFRVFDQUhJQU55UVFOeEJFQkJBQ0VCQlNBRFFRSjJJUW9nQjBFQ2RpRUxRUUFoQlFOQUFrQWdBQ0FGSUFSQkFYWWlCMm9pREVFQmRDSUlJQXBxSWdOQkFuUnFLQUlBSUFZUWpBRWhDU0FBSUFOQkFXcEJBblJxS0FJQUlBWVFqQUVpQXlBQlNTQUpJQUVnQTJ0SmNVVUVRRUVBSVFFTUJnc2dBQ0FESUFscWFpd0FBQVJBUVFBaEFRd0dDeUFDSUFBZ0Eyb1Fpd0VpQTBVTkFDQUVRUUZHSVFnZ0JDQUhheUVFSUFOQkFFZ2lBd1JBSUFjaEJBc2dBMFVFUUNBTUlRVUxJQWhGRFFGQkFDRUJEQVVMQ3lBQUlBZ2dDMm9pQWtFQ2RHb29BZ0FnQmhDTUFTRUZJQUFnQWtFQmFrRUNkR29vQWdBZ0JoQ01BU0lDSUFGSklBVWdBU0FDYTBseEJFQWdBQ0FDYWlFQklBQWdBaUFGYW1vc0FBQUVRRUVBSVFFTEJVRUFJUUVMQ3dWQkFDRUJDd1ZCQUNFQkN3c2dBUXVlQVFFQ2Z3SkFBa0FDUUFOQUlBSkJ1dFlBYWkwQUFDQUFSZzBCSUFKQkFXb2lBa0hYQUVjTkFFR1Mxd0FoQUVIWEFDRUNEQUlMQUFzZ0FnUkFRWkxYQUNFQURBRUZRWkxYQUNFQUN3d0JDd05BSUFBaEF3TkFJQU5CQVdvaEFDQURMQUFBQkVBZ0FDRUREQUVMQ3lBQ1FYOXFJZ0lOQUFzTElBRW9BaFFpQVFSL0lBRW9BZ0FnQVNnQ0JDQUFFTVlEQlVFQUN5SUJCSDhnQVFVZ0FBc0xQQUFnQUVHQWdBaEpCSDhnQUVFSWRrR2FQMm90QUFCQkJYUWdBRUVEZGtFZmNYSkJtajlxTFFBQUlBQkJCM0YyUVFGeEJTQUFRZjcvQzBrTEM3SURBUXQvSXdRaEJpTUVRVEJxSkFRZ0JrRVFhaUVISUFaQklHb2lBeUFBUVJ4cUlna29BZ0FpQkRZQ0FDQURJQUJCRkdvaUNpZ0NBQ0FFYXlJRU5nSUVJQU1nQVRZQ0NDQURJQUkyQWd3Z0JpSUlJQUJCUEdvaURDZ0NBRFlDQUNBSUlBTTJBZ1FnQ0VFQ05nSUlBa0FDUUNBRUlBSnFJZ1pCa2dFZ0NCQWlJZ1ZCZ0dCTEJIOUJpTHdEUVFBZ0JXczJBZ0JCZnlJRkJTQUZDMFlOQUVFQ0lRUWdBeUVCSUFVaEF3TkFJQU5CQUU0RVFDQUdJQU5ySVFZZ0FVRUlhaUVGSUFNZ0FTZ0NCQ0lOU3lJTEJFQWdCU0VCQ3lBRUlBdEJIM1JCSDNWcUlRUWdBU0FCS0FJQUlBTWdDd1IvSUEwRlFRQUxheUlEYWpZQ0FDQUJRUVJxSWdVZ0JTZ0NBQ0FEYXpZQ0FDQUhJQXdvQWdBMkFnQWdCeUFCTmdJRUlBY2dCRFlDQ0NBR1FaSUJJQWNRSWlJRFFZQmdTd1IvUVlpOEEwRUFJQU5yTmdJQVFYOGlBd1VnQXd0R0RRSU1BUXNMSUFCQkFEWUNFQ0FKUVFBMkFnQWdDa0VBTmdJQUlBQWdBQ2dDQUVFZ2NqWUNBQ0FFUVFKR0JIOUJBQVVnQWlBQktBSUVhd3NoQWd3QkN5QUFJQUFvQWl3aUFTQUFLQUl3YWpZQ0VDQUpJQUUyQWdBZ0NpQUJOZ0lBQ3lBSUpBUWdBZ3NHQUVHSXZBTUxlQUVCZnlNRUlRTWpCRUVnYWlRRUlBTWdBQ2dDUERZQ0FDQURRUUEyQWdRZ0F5QUJOZ0lJSUFNZ0EwRVVhaUlBTmdJTUlBTWdBallDRUVHTUFTQURFQ0FpQVVHQVlFc0VmMEdJdkFOQkFDQUJhellDQUVGL0JTQUJDMEVBU0FSL0lBQkJmellDQUVGL0JTQUFLQUlBQ3lFQUlBTWtCQ0FBQy80QkFRWi9Jd1FoQkNNRVFTQnFKQVFnQkVFUWFpSUZJQUUyQWdBZ0JVRUVhaUlISUFJZ0FFRXdhaUlJS0FJQUlnTkJBRWRyTmdJQUlBVWdBRUVzYWlJR0tBSUFOZ0lJSUFVZ0F6WUNEQ0FFSUFBb0FqdzJBZ0FnQkNBRk5nSUVJQVJCQWpZQ0NFR1JBU0FFRUNFaUEwR0FZRXNFZjBHSXZBTkJBQ0FEYXpZQ0FFRi9JZ01GSUFNTFFRRklCRUFnQUNBQUtBSUFJQU5CTUhGQkVITnlOZ0lBSUFNaEFnVWdBeUFIS0FJQUlnVkxCRUFnQUVFRWFpSUhJQVlvQWdBaUJqWUNBQ0FBSUFZZ0F5QUZhMm8yQWdnZ0NDZ0NBQVJBSUFjZ0JrRUJhallDQUNBQklBSkJmMnBxSUFZc0FBQTZBQUFMQlNBRElRSUxDeUFFSkFRZ0FncytBUUYvSXdRaEFTTUVRUkJxSkFRZ0FTQUFLQUk4TmdJQVFRWWdBUkFtSWdCQmdHQkxCRUJCaUx3RFFRQWdBR3MyQWdCQmZ5RUFDeUFCSkFRZ0FBdXlCd0VLZndKQUlBQkJCR29pQnlnQ0FDSUdRWGh4SVFJZ0JrRURjVVVFUUNBQlFZQUNTUTBCSUFJZ0FVRUVhazhFUUNBQ0lBRnJRYUM3QXlnQ0FFRUJkRTBFUUNBQUR3c0xEQUVMSUFBZ0Ftb2hCQ0FDSUFGUEJFQWdBaUFCYXlJQ1FROU5CRUFnQUE4TElBY2dCa0VCY1NBQmNrRUNjallDQUNBQUlBRnFJZ0VnQWtFRGNqWUNCQ0FFUVFScUlnTWdBeWdDQUVFQmNqWUNBQ0FCSUFJUWxRSWdBQThMUWRpM0F5Z0NBQ0FFUmdSQVFjeTNBeWdDQUNBQ2FpSUNJQUZORFFFZ0J5QUdRUUZ4SUFGeVFRSnlOZ0lBSUFBZ0FXb2lBeUFDSUFGcklnRkJBWEkyQWdSQjJMY0RJQU0yQWdCQnpMY0RJQUUyQWdBZ0FBOExRZFMzQXlnQ0FDQUVSZ1JBUWNpM0F5Z0NBQ0FDYWlJRElBRkpEUUVnQXlBQmF5SUNRUTlMQkVBZ0J5QUdRUUZ4SUFGeVFRSnlOZ0lBSUFBZ0FXb2lBU0FDUVFGeU5nSUVJQUFnQTJvaUF5QUNOZ0lBSUFOQkJHb2lBeUFES0FJQVFYNXhOZ0lBQlNBSElBWkJBWEVnQTNKQkFuSTJBZ0FnQUNBRGFrRUVhaUlCSUFFb0FnQkJBWEkyQWdCQkFDRUJRUUFoQWd0QnlMY0RJQUkyQWdCQjFMY0RJQUUyQWdBZ0FBOExJQVFvQWdRaUEwRUNjUTBBSUFOQmVIRWdBbW9pQ0NBQlNRMEFJQWdnQVdzaENpQURRUU4ySVFVQ1FDQURRWUFDU1FSQUlBUW9BZ3dpQWlBRUtBSUlJZ05HQkVCQndMY0RRY0MzQXlnQ0FFRUJJQVYwUVg5emNUWUNBQVVnQXlBQ05nSU1JQUlnQXpZQ0NBc0ZJQVFvQWhnaENRSkFJQVFvQWd3aUFpQUVSZ1JBSUFSQkVHb2lBMEVFYWlJRktBSUFJZ0lFUUNBRklRTUZJQU1vQWdBaUFrVUVRRUVBSVFJTUF3c0xBMEFnQWtFVWFpSUZLQUlBSWdzRVFDQUxJUUlnQlNFRERBRUxJQUpCRUdvaUJTZ0NBQ0lMQkVBZ0N5RUNJQVVoQXd3QkN3c2dBMEVBTmdJQUJTQUVLQUlJSWdNZ0FqWUNEQ0FDSUFNMkFnZ0xDeUFKQkVBZ0JDZ0NIQ0lEUVFKMFFmQzVBMm9pQlNnQ0FDQUVSZ1JBSUFVZ0FqWUNBQ0FDUlFSQVFjUzNBMEhFdHdNb0FnQkJBU0FEZEVGL2MzRTJBZ0FNQkFzRklBbEJFR29nQ1NnQ0VDQUVSMEVDZEdvZ0FqWUNBQ0FDUlEwREN5QUNJQWsyQWhnZ0JFRVFhaUlGS0FJQUlnTUVRQ0FDSUFNMkFoQWdBeUFDTmdJWUN5QUZLQUlFSWdNRVFDQUNJQU0yQWhRZ0F5QUNOZ0lZQ3dzTEN5QUtRUkJKQkVBZ0J5QUlJQVpCQVhGeVFRSnlOZ0lBSUFBZ0NHcEJCR29pQVNBQktBSUFRUUZ5TmdJQUJTQUhJQVpCQVhFZ0FYSkJBbkkyQWdBZ0FDQUJhaUlCSUFwQkEzSTJBZ1FnQUNBSWFrRUVhaUlDSUFJb0FnQkJBWEkyQWdBZ0FTQUtFSlVDQ3lBQUR3dEJBQXNLQUNBQUtBSUVFSWNDQzVzREFFRzRDMEczTlJBNFFjZ0xRYncxUVFGQkFVRUFFQ3hCMEF0QndUVkJBVUdBZjBIL0FCQXlRZUFMUWNZMVFRRkJnSDlCL3dBUU1rSFlDMEhTTlVFQlFRQkIvd0VRTWtIb0MwSGdOVUVDUVlDQWZrSC8vd0VRTWtId0MwSG1OVUVDUVFCQi8vOERFREpCK0F0QjlUVkJCRUdBZ0lDQWVFSC8vLy8vQnhBeVFZQU1RZmsxUVFSQkFFRi9FREpCaUF4QmhqWkJCRUdBZ0lDQWVFSC8vLy8vQnhBeVFaQU1RWXMyUVFSQkFFRi9FREpCbUF4Qm1UWkJCQkF4UWFBTVFaODJRUWdRTVVISUNFR21OaEEwUVpnSlFiSTJFRFJCNkFoQkJFSFROaEExUWJBSlFlQTJFREJCdUFsQkFFSHdOaEF6UWNBSlFRQkJqamNRTTBISUNVRUJRYk0zRUROQjBBbEJBa0hhTnhBelFkZ0pRUU5CK1RjUU0wSGdDVUVFUWFFNEVETkI2QWxCQlVHK09CQXpRZkFKUVFSQjVEZ1FNMEg0Q1VFRlFZSTVFRE5Cd0FsQkFFR3BPUkF6UWNnSlFRRkJ5VGtRTTBIUUNVRUNRZW81RUROQjJBbEJBMEdMT2hBelFlQUpRUVJCclRvUU0wSG9DVUVGUWM0NkVETkJnQXBCQmtId09oQXpRWWdLUVFkQmp6c1FNMEdRQ2tFSFFhODdFRE1MQndCQkFCRFFBd3NFQUVFQkN6d0JBWDhqQkNFQkl3UkJFR29rQkNBQlFRQTZBQUFnQUNBQlFRRWdBQ2dDQUNnQ0RFRWZjVUhLQUdvUkFRQWFJQUVzQUFBaEFDQUJKQVFnQUFzV0FDQUNSUVJBUVFFUEN5QUFLQUlFSUFFZ0FoQkRDeXNBSUFBZ0FVRUFJQUFvQWdBb0FnaEJIM0ZCeWdCcUVRRUFCRUJCQVE4TFFhejFBaUFCRUxnRVFRQUw1Z0lDQTM4RGZpQUFRUVJxSWdVb0FnQWlCRVVFUUVFQkR3c2dBYWNoQXlBQlFnQlRJQUpCQUVkeEJFQWdBQ0FBS0FJQUtBSVVRUWR4UVlZQmFoRUFBQ0VHQWtBZ0FrRUJSZ1JBSUFZaEJ3VWdBQ2dDQUNnQ0VDRUNRUUFrQlNBQ0lBQkJBRUVBUVFJUVVDTUZJUUpCQUNRRklBSkJBWEZGQkVBZ0FDZ0NBQ2dDRkNFQ1FRQWtCU0FDSUFBUVRxMGpCNjFDSUlhRUlRZ2pCU0VDUVFBa0JTQUNRUUZ4UlFSQUlBQW9BZ0FvQWhBaEFrRUFKQVVnQWlBQUlBYW5JQVpDSUlpblFRQVFVQ01GSVFKQkFDUUZJQUpCQVhGRkJFQWdDQ0VIREFRTFFRQVFHQkJhQ3dzUUZ5RUNJQUFvQWdBb0FoQWhBMEVBSkFVZ0F5QUFJQWFuSUFaQ0lJaW5RUUFRVUNNRklRTkJBQ1FGSUFOQkFYRUVRRUVBRUJnUVdnVWdBaEFlQ3dzTFFRQWhBaUFISUFGOHB5RURJQVVvQWdBaEJBc2dBRUVBT2dBSUlBSkJBVVloQUNBQ0JIOUJxVFVGUWFVMUN5RUNJQVFnQXlBQUJIOUJyVFVGSUFJTEVFSUxYQUVCZnlBQVFjUWROZ0lBSUFBb0FnUWlBVVVFUUNBQUVGSVBDeUFBTEFBUUJFQWdBQkJTRHdzZ0FDd0FFZ1JBUVFBa0JRVkJBQ1FGUVN3Z0FSQU1DeU1GSVFGQkFDUUZJQUZCQVhGRkJFQWdBQkJTRHd0QkFCQVlFRm9MR1FBZ0FFRUNSd1JBUVFFUEN5QUNRWnlCQkJEUUFScEJBUXNQQUNBQklBQW9BZ0JxSUFJNUF3QUxEUUFnQVNBQUtBSUFhaXNEQUF0TkFRRi9RY2dBRUY4aUFFSUFOd01BSUFCQ0FEY0RDQ0FBUWdBM0F4QWdBRUlBTndNWUlBQkNBRGNESUNBQVFnQTNBeWdnQUVJQU53TXdJQUJDQURjRE9DQUFRVUJyUWdBM0F3QWdBQXMwQUNBRFFRSkdCSDhnQUNBQklBSVF1Z0VGSUFBZ0FTQUNFSHNMR2lBQ1JRUkFEd3NnQVNBQ1FYOXFRUUowYWtFQU5nSUFDeVlCQVg5QklCQmZJZ0JDQURjREFDQUFRZ0EzQXdnZ0FFSUFOd01RSUFCQ0FEY0RHQ0FBQzVRQ0FRVi9Jd1FoQlNNRVFSQnFKQVFnQWlnQ0FDRUVJQVVpQTBJQU53SUFJQU5CQURZQ0NDQUVRVzlMQkVBZ0F4Q0tBUXNnQWtFRWFpRUdBa0FDUUNBRVFRdEpCRUFnQXlBRU9nQUxJQVFFUUNBRElRSU1BZ1VnQXlFQ0N3VWdBeUFFUVJCcVFYQnhJZ2NRWHlJQ05nSUFJQU1nQjBHQWdJQ0FlSEkyQWdnZ0F5QUVOZ0lFREFFTERBRUxJQUlnQmlBRUVGTWFDeUFDSUFScVFRQTZBQUFnQVNBQUtBSUFhaUlBUVF0cUlnRXNBQUJCQUVnRVFDQUFLQUlBUVFBNkFBQWdBRUVBTmdJRUJTQUFRUUE2QUFBZ0FVRUFPZ0FBQzBFQUpBVkJGQ0FBUVFBUURTTUZJUUZCQUNRRklBRkJBWEVFUUVFQUVCZ2lBQkJhQlNBQUlBTXBBZ0EzQWdBZ0FDQURLQUlJTmdJSUlBVWtCQXNMZWdFRWZ5QUJJQUFvQWdCcUlnSXNBQXNpQVVFQVNDSUVCSDhnQWlnQ0JDSUFRUVJxRUd3aEF5QUJRZjhCY1NFQklBQUZJQUZCL3dGeElnRkJCR29RYkNFRElBRWhBQ0FDS0FJRUN5RUZJQU1nQURZQ0FDQUNLQUlBSVFBZ0EwRUVhaUFFQkg4Z0FBVWdBZ3NnQkFSL0lBVUZJQUVMRUZNYUlBTUxKZ0VCZnlBQVJRUkFEd3NnQUVFRWFpSUJMQUFMUVFCSUJFQWdBU2dDQUJCU0N5QUFFRklMR0FFQmYwRVFFRjhpQUVJQU53TUFJQUJDQURjRENDQUFDNzhCQVFKL0l3UWhBeU1FUVJCcUpBUWdBQ2dDQUNFRUlBRWdBQ2dDQkNJQVFRRjFhaUVCSUFCQkFYRUVRQ0FCS0FJQUlBUnFLQUlBSVFRTElBTWlBQ0FCSUFJZ0JFRWZjVUg0QVdvUkJ3QkJBQ1FGUVFSQkVCQUZJUUVqQlNFQ1FRQWtCU0FDUVFGeFJRUkFJQUVnQUNnQ0FEWUNBQ0FCUVFScUlnSWdBRUVFYWlJREtRSUFOd0lBSUFJZ0F5Z0NDRFlDQ0NBQUpBUWdBUThMRUJjaEFTQUFRUVJxSWdBc0FBdEJBRTRFUUNBQkVCNExJQUFvQWdBUVVpQUJFQjVCQUF1T0FRRUJmeUFBUVFScUlnTkNBRGNDQUNBRFFRQTJBZ2dnQVNnQ0FDRUJRUUFrQlVFSUlBRWdBZ1IvUVFBRlFRSUxRUUJCQUJBSUlRRWpCU0VDUVFBa0JTQUNRUUZ4UlFSQUlBQWdBVFlDQUVFQUpBVkJHeUFEUWQwMEVBWWFJd1VoQUVFQUpBVWdBRUVCY1VVRVFBOExDeEFYSVFBZ0F5d0FDMEVBVGdSQUlBQVFIZ3NnQXlnQ0FCQlNJQUFRSGd2UkFnRUNmeU1FSVFJakJFSFFBR29rQkNBQUtBSUFJUU1nQVNBQUtBSUVJZ0JCQVhWcUlRRWdBRUVCY1FSQUlBRW9BZ0FnQTJvb0FnQWhBd3NnQWlJQUlBRWdBMEVmY1VIV0FXb1JCZ0JCQUNRRlFRUkJ5QUFRQlNFQkl3VWhBa0VBSkFVZ0FrRUJjVVVFUUNBQklBQW9BZ0EyQWdBZ0FVRUVhaUlESUFCQkJHb2lBaWtDQURjQ0FDQURJQUlvQWdnMkFnZ2dBa0lBTndJQUlBSkJBRFlDQ0NBQlFSQnFJZ01nQUVFUWFpSUNLUUlBTndJQUlBTWdBaWdDQ0RZQ0NDQUNRZ0EzQXdBZ0FrRUFOZ0lJSUFGQkhHb2lBaUFBUVJ4cUlnTXBBZ0EzQWdBZ0FpQURLUUlJTndJSUlBSWdBeWtDRURjQ0VDQUNJQU1wQWhnM0FoZ2dBaUFES1FJZ053SWdJQUlnQXlnQ0tEWUNLQ0FBSkFRZ0FROExFQmNoQVNBQUxBQWJRUUJJQkVBZ0FDZ0NFQkJTQ3lBQVFRUnFJZ0FzQUF0QkFFNEVRQ0FCRUI0TElBQW9BZ0FRVWlBQkVCNUJBQXVFQXdFRGZ5TUVJUUlqQkVHQThBQnFKQVFnQWtFQVFmenZBQkJVR2lBQktBSUFJQUlRdmdJaEJDQUFRUVJxSWdOQ0FEY0NBQ0FEUWdBM0FnZ2dBMElBTndJUUlBQWdCRFlDQUVFQUpBVkJHeUFEUWVrMEVBWWFJd1VoQVVFQUpBVWdBVUVCY1VVRVFDQUVCRUFnQWlRRUR3dEJBQ1FGUVJ3Z0FFRVFhaUFDUVlBd2FoQUdHaU1GSVFGQkFDUUZJQUZCQVhGRkJFQWdBQ0FDUVlEUUFHb29BQUEyQWh3Z0FDQUNRWWpRQUdvb0FBQzRSQUFBQUFBQUFQQkJvaUFDUVlUUUFHb29BQUM0b0RrRElDQUFJQUpCa05BQWFpZ0FBTGhFQUFBQUFBQUE4RUdpSUFKQmpOQUFhaWdBQUxpZ09RTW9JQUFnQWtHVTBBQnFLQUFBTmdJd0lBQWdBa0dZMEFCcUtBQUFOZ0kwSUFBZ0FrR2MwQUJxS0FBQU5nSTRJQUFnQWtHZzBBQnFLQUFBTmdJOElBQkJRR3NnQWtHazBBQnFLQUFBTmdJQUlBQWdBa0dvMEFCcUtBQUFOZ0pFSUFJa0JBOExDeEFYSVFFZ0FDd0FHMEVBU0FSQUlBQW9BaEFRVWdzZ0F5d0FDMEVBVGdSQUlBRVFIZ3NnQXlnQ0FCQlNJQUVRSGd1dUF3RUVmeU1FSVFVakJFRkFheVFFSUFBb0FnQWhDQ0FCSUFBb0FnUWlBVUVCZFdvaEFDQUJRUUZ4QkVBZ0FDZ0NBQ0FJYWlnQ0FDRUlDeUFGUVJocUlRWWdCVUVNYWlJSElBSVExUUZCQUNRRlFSTWdCU0FERUEwakJTRUJRUUFrQlNBQlFRRnhCRUFRRnlFQUJVRUFKQVVnQ0NBR0lBQWdCeUFGSUFRUUVDTUZJUUJCQUNRRkFrQWdBRUVCY1FSQUVCY2hBQVZCQUNRRlFRUkJJQkFGSVFBakJTRUJRUUFrQlNBQlFRRnhCRUFRRnlFQUlBWXNBQnRCQUVnRVFDQUdLQUlRRUZJTElBWkJCR29pQWl3QUMwRUFUZzBDSUFJb0FnQVFVZ3dDQ3lBQUlBWW9BZ0EyQWdBZ0FFRUVhaUlDSUFaQkJHb2lBU2tDQURjQ0FDQUNJQUVvQWdnMkFnZ2dBVUlBTndJQUlBRkJBRFlDQ0NBQVFSQnFJZ0lnQmtFUWFpSUJLUUlBTndJQUlBSWdBU2dDQ0RZQ0NDQUJRZ0EzQWdBZ0FVRUFOZ0lJSUFBZ0JpZ0NIRFlDSENBRkxBQUxRUUJJQkVBZ0JTZ0NBQkJTQ3lBSExBQUxRUUJPQkVBZ0JTUUVJQUFQQ3lBSEtBSUFFRklnQlNRRUlBQVBDd3NnQlN3QUMwRUFTQVJBSUFVb0FnQVFVZ3NMSUFjc0FBdEJBRTRFUUNBQUVCNExJQWNvQWdBUVVpQUFFQjVCQUF2a0F3RURmd0pBSXdRaEJTTUVRYUNCQVdva0JDQUZRYUFCYWlFSElBVkJBRUdjQVJCVUdpQUNLQUlBSVFZZ0JTQUNMQUFMUVFCSUJIOGdCZ1VnQWdzMkFBUWdCU0FITmdBUUlBVkJnSUFCTmdBVUlBVWdCRUVCYzBFQmNUWUFDQ0FGUVFjMkFDUWdCVUVBTmdBb0lBTW9BZ0FoQWlBRExBQUxRUUJJQkg4Z0FnVWdBd3RCbklFRVFZQUJFTzBCSUFFZ0JSRE9BallDQUNBQVFRUnFJZ1pDQURjQ0FDQUdRZ0EzQWdnZ0JrSUFOd0lRUVFBa0JVRWJJQVpCOGpRUUJob2pCU0VCUVFBa0JRSkFJQUZCQVhFRVFCQVhJUUVGSUFVb0FBd2lBUVJBSUFBZ0FUWUNBQXdEQ3lBQVFRQTJBZ0FnQUNBRktBQWdOZ0ljSUFVb0FCeEJBVWNOQWlBRktBQVlJZ1FFZjBFQUlBUkJJRXNFZnlBRUJVRWdDMEVDZEJCWElnSkZCRUJCQUNRRlFSUkJyUFVDRUF3akJTRUJRUUFrQlNBQlFRRnhCRUFRRnlFQkRBUUxDeUFDQlVFQUlRSkJBQXNoQTBFQUpBVkJFU0FISUFJZ0JFRUNkQkFIR2lNRklRRkJBQ1FGSUFGQkFYRkZCRUJCQUNRRlFSd2dBRUVRYWlBQ0VBWWFJd1VoQVVFQUpBVWdBVUVCY1VVRVFDQUNSUTBFSUFNUVVnd0VDd3NRRnlFQklBSUVRQ0FERUZJTEN3c2dBQ3dBRzBFQVNBUkFJQUFvQWhBUVVnc2dCaXdBQzBFQVRnUkFJQUVRSGdzZ0JpZ0NBQkJTSUFFUUhnOExJQVVrQkF0QUFRSi9RUVFRWHlJQlFRQTJBZ0JCQUNRRlFScEJCa0h5NVFBUUJob2pCU0VBUVFBa0JTQUFRUUZ4QkVBUUZ5RUFJQUVRVWlBQUVCNEZJQUVQQzBFQUN6b0JBWDhnQUVVRVFBOExJQUFvQWdBaUFRUkFRUUFrQlVFWUlBRVFCUm9qQlNFQlFRQWtCU0FCUVFGeEJFQkJBQkFZRUZvTEN5QUFFRklMQlFCQm1BZ0x6UklCQW45Qm1BaEJvQWhCc0FoQkFFSEpNVUVXUWN3eFFRQkJ6REZCQUVIT01VSFpNVUVuRUMxQm1BaEJBVUdRSFVISk1VRVhRUUVRTGtFSUVGOGlBRUVGTmdJQUlBQkJBRFlDQkVHWUNFSGNNVUVGUVpRZFFlRXhRUUVnQUVFQUVDOUJDQkJmSWdCQkVqWUNBQ0FBUVFBMkFnUkJtQWhCNkRGQkFrR29IVUgyTVVFUklBQkJBQkF2UVFnUVh5SUFRUTgyQWdBZ0FFRUFOZ0lFUVpnSVFmb3hRUU5Cc0IxQmd6SkJIQ0FBUVFBUUwwSEFDRUdJTWtHT01rRUNRZGt4UVNnUU5rRUFKQVZCQkVFRUVBVWhBQ01GSVFGQkFDUUZJQUZCQVhGRkJFQWdBRUVBTmdJQVFRQWtCVUVFUVFRUUJTRUJJd1VoQWtFQUpBVWdBa0VCY1VVRVFDQUJRUUEyQWdCQkFDUUZRUUZCd0FoQmtESkJnQXhCOWpGQkVpQUFRWUFNUVpneVFSQWdBUkFUSXdVaEFFRUFKQVVnQUVFQmNVVUVRRUVBSkFWQkJFRUVFQVVoQUNNRklRRkJBQ1FGSUFGQkFYRkZCRUFnQUVFRU5nSUFRUUFrQlVFRVFRUVFCU0VCSXdVaEFrRUFKQVVnQWtFQmNVVUVRQ0FCUVFRMkFnQkJBQ1FGUVFGQndBaEJuVEpCeUFoQjlqRkJFeUFBUWNnSVFaZ3lRUkVnQVJBVEl3VWhBRUVBSkFVZ0FFRUJjVVVFUUVFQUpBVkJLVUhBQ0JBTUl3VWhBRUVBSkFVZ0FFRUJjUVJBUVFBUUdDSUFFRm9MUWVBSVFhVXlRWTR5UVFOQjJURkJLaEEyUVFBa0JVRUVRUVFRQlNFQUl3VWhBVUVBSkFVZ0FVRUJjVVVFUUNBQVFRQTJBZ0JCQUNRRlFRUkJCQkFGSVFFakJTRUNRUUFrQlNBQ1FRRnhSUVJBSUFGQkFEWUNBRUVBSkFWQkFVSGdDRUd2TWtIQUNFSDJNVUVVSUFCQndBaEJtREpCRWlBQkVCTWpCU0VBUVFBa0JTQUFRUUZ4UlFSQVFRQWtCVUVFUVFRUUJTRUFJd1VoQVVFQUpBVWdBVUVCY1VVRVFDQUFRUkEyQWdCQkFDUUZRUVJCQkJBRklRRWpCU0VDUVFBa0JTQUNRUUZ4UlFSQUlBRkJFRFlDQUVFQUpBVkJBVUhnQ0VHMU1rSG9DRUgyTVVFVklBQkI2QWhCbURKQkV5QUJFQk1qQlNFQVFRQWtCU0FBUVFGeFJRUkFRUUFrQlVFRVFRUVFCU0VBSXdVaEFVRUFKQVVnQVVFQmNVVUVRQ0FBUVJ3MkFnQkJBQ1FGUVFSQkJCQUZJUUVqQlNFQ1FRQWtCU0FDUVFGeFJRUkFJQUZCSERZQ0FFRUFKQVZCQVVIZ0NFRzlNa0dBREVIMk1VRVdJQUJCZ0F4Qm1ESkJGQ0FCRUJNakJTRUFRUUFrQlNBQVFRRnhSUVJBUVFBa0JVRXBRZUFJRUF3akJTRUFRUUFrQlNBQVFRRnhCRUJCQUJBWUlnQVFXZ3RCZ0FsQnd6SkJqakpCQkVIWk1VRXJFRFpCQUNRRlFRUkJCQkFGSVFBakJTRUJRUUFrQlFKQUlBRkJBWEZGQkVBZ0FFRUFOZ0lBUVFBa0JVRUVRUVFRQlNFQkl3VWhBa0VBSkFVZ0FrRUJjUTBCSUFGQkFEWUNBRUVBSkFWQkFVR0FDVUd2TWtIQUNFSDJNVUVYSUFCQndBaEJtREpCRlNBQkVCTWpCU0VBUVFBa0JTQUFRUUZ4RFFGQkFDUUZRUVJCQkJBRklRQWpCU0VCUVFBa0JTQUJRUUZ4RFFFZ0FFRVFOZ0lBUVFBa0JVRUVRUVFRQlNFQkl3VWhBa0VBSkFVZ0FrRUJjUTBCSUFGQkVEWUNBRUVBSkFWQkFVR0FDVUhSTWtIb0NFSDJNVUVZSUFCQjZBaEJtREpCRmlBQkVCTWpCU0VBUVFBa0JTQUFRUUZ4RFFGQkFDUUZRUVJCQkJBRklRQWpCU0VCUVFBa0JTQUJRUUZ4RFFFZ0FFRWNOZ0lBUVFBa0JVRUVRUVFRQlNFQkl3VWhBa0VBSkFVZ0FrRUJjUTBCSUFGQkhEWUNBRUVBSkFWQkFVR0FDVUc5TWtHQURFSDJNVUVaSUFCQmdBeEJtREpCRnlBQkVCTWpCU0VBUVFBa0JTQUFRUUZ4RFFGQkFDUUZRUVJCQkJBRklRQWpCU0VCUVFBa0JTQUJRUUZ4RFFFZ0FFRWdOZ0lBUVFBa0JVRUVRUVFRQlNFQkl3VWhBa0VBSkFVZ0FrRUJjUTBCSUFGQklEWUNBRUVBSkFWQkFVR0FDVUhXTWtHZ0RFSGZNa0VCSUFCQm9BeEI0ekpCQVNBQkVCTWpCU0VBUVFBa0JTQUFRUUZ4RFFGQkFDUUZRUVJCQkJBRklRQWpCU0VCUVFBa0JTQUJRUUZ4RFFFZ0FFRW9OZ0lBUVFBa0JVRUVRUVFRQlNFQkl3VWhBa0VBSkFVZ0FrRUJjUTBCSUFGQktEWUNBRUVBSkFWQkFVR0FDVUhvTWtHZ0RFSGZNa0VCSUFCQm9BeEI0ekpCQVNBQkVCTWpCU0VBUVFBa0JTQUFRUUZ4RFFGQkFDUUZRUVJCQkJBRklRQWpCU0VCUVFBa0JTQUJRUUZ4RFFFZ0FFRXdOZ0lBUVFBa0JVRUVRUVFRQlNFQkl3VWhBa0VBSkFVZ0FrRUJjUTBCSUFGQk1EWUNBRUVBSkFWQkFVR0FDVUh3TWtHQURFSDJNVUVaSUFCQmdBeEJtREpCRnlBQkVCTWpCU0VBUVFBa0JTQUFRUUZ4RFFGQkFDUUZRUVJCQkJBRklRQWpCU0VCUVFBa0JTQUJRUUZ4RFFFZ0FFRTBOZ0lBUVFBa0JVRUVRUVFRQlNFQkl3VWhBa0VBSkFVZ0FrRUJjUTBCSUFGQk5EWUNBRUVBSkFWQkFVR0FDVUgzTWtHQURFSDJNVUVaSUFCQmdBeEJtREpCRnlBQkVCTWpCU0VBUVFBa0JTQUFRUUZ4RFFGQkFDUUZRUVJCQkJBRklRQWpCU0VCUVFBa0JTQUJRUUZ4RFFFZ0FFRTROZ0lBUVFBa0JVRUVRUVFRQlNFQkl3VWhBa0VBSkFVZ0FrRUJjUTBCSUFGQk9EWUNBRUVBSkFWQkFVR0FDVUg3TWtHQURFSDJNVUVaSUFCQmdBeEJtREpCRnlBQkVCTWpCU0VBUVFBa0JTQUFRUUZ4RFFGQkFDUUZRUVJCQkJBRklRQWpCU0VCUVFBa0JTQUJRUUZ4RFFFZ0FFRThOZ0lBUVFBa0JVRUVRUVFRQlNFQkl3VWhBa0VBSkFVZ0FrRUJjUTBCSUFGQlBEWUNBRUVBSkFWQkFVR0FDVUdBTTBHQURFSDJNVUVaSUFCQmdBeEJtREpCRnlBQkVCTWpCU0VBUVFBa0JTQUFRUUZ4RFFGQkFDUUZRUVJCQkJBRklRQWpCU0VCUVFBa0JTQUJRUUZ4RFFFZ0FFSEFBRFlDQUVFQUpBVkJCRUVFRUFVaEFTTUZJUUpCQUNRRklBSkJBWEVOQVNBQlFjQUFOZ0lBUVFBa0JVRUJRWUFKUVljelFZQU1RZll4UVJrZ0FFR0FERUdZTWtFWElBRVFFeU1GSVFCQkFDUUZJQUJCQVhFTkFVRUFKQVZCQkVFRUVBVWhBQ01GSVFGQkFDUUZJQUZCQVhFTkFTQUFRY1FBTmdJQVFRQWtCVUVFUVFRUUJTRUJJd1VoQWtFQUpBVWdBa0VCY1EwQklBRkJ4QUEyQWdCQkFDUUZRUUZCZ0FsQmpqTkJnQXhCOWpGQkdTQUFRWUFNUVpneVFSY2dBUkFUSXdVaEFFRUFKQVVnQUVFQmNRMEJRUUFrQlVFcFFZQUpFQXdqQlNFQVFRQWtCU0FBUVFGeEJFQkJBQkFZSWdBUVdnVVBDd3NMRUJjaEFFRUFKQVZCS1VHQUNSQU1Jd1VoQVVFQUpBVWdBVUVCY1FSQVFRQVFHQ0lBRUZvRklBQVFIZ3NMQ3dzTEN3c0xDd3NRRnlFQVFRQWtCVUVwUWVBSUVBd2pCU0VCUVFBa0JTQUJRUUZ4QkVCQkFCQVlJZ0FRV2dVZ0FCQWVDd3NMQ3dzTEN4QVhJUUJCQUNRRlFTbEJ3QWdRRENNRklRRkJBQ1FGSUFGQkFYRUVRRUVBRUJnaUFCQmFCU0FBRUI0TEN5MEJBWDhnQVNBQVJnUkFEd3NnQWtVRVFBOExJQUVnQUNBQ1FYOXFJZ01ReGdFYUlBRWdBMnBCQURvQUFBc0hBRUVBRU9zREN3UUFRUUVMRGdBZ0FFR2N6Z1ZxSUFFUXBnSUxtQU1DQkg4Q2ZnSkFJQVJCQUVjaUNTQUZRUUJIY1FSQUlBUkJBRFlDQUFzZ0FVRWdhaUlIRUZsQi93OUxEUUFnQUVIa3pBVnFJQUZCNGNFQWFpd0FBRUVBUnlJR0lBZEJBRUVGRUtBQ0RRQWdBRUhVelFWcUtBSUFCRUFnQUVIQXpRVnFJQVlnQjBFQVFRVVFvQUpGRFFFTElBRkJzTUFBYWlFSUlBQkJxSWtEYWlrREFDSUtRZ0JTQkVBZ0NDa0RBQ0FLV2cwQkN5QUFRYkNKQTJvcEF3QWlDa0lBVWdSQUlBZ3BBd0FnQ2xnTkFRc2dBQ2dDQUNBQktBSWNJZ2h4RFFBZ0FDd0FDQVJBSUFBb0FnUWdDSEZGRFFFTElBWkZCRUFnQUVHNGlRTnFLUU1BSWdwQy8vLy8vL2YvLy8vL0FGRWdDaUFCUWREQUFHb3BBd0FpQ2xWeVJRMEJJQUJCd0lrRGFpa0RBQ0lMSUFwWklBdEMvLy8vLy9mLy8vLy9BRkp4RFFFTElBQkJpTXdGYWlJR1FRQTJBaEFnQmhDaEFpSUJSUTBBUVFFaEFBSkFBa0FEUUNBQklBY2dBeENsQVVVRVFDQUFRUUZxSVFBZ0JoQ2hBaUlCRFFFTUFnc0xEQUVMUVFBUEN5QUNCRUFnQWlBQklBY1FuUUZGT2dBQUN5QUpSUVJBSUFBUEN5QUVJQUVnQlJCdkdpQUFEd3RCQUF2RkFRRUNmeUFBRUxzRUlBQkJ5TXNFYWtFQU5nSUFJQUJCaUl3RmFrRUFOZ0lBSUFCQnZNc0Vha0VBT2dBQUlBQkJ3TXNFYWtFQU5nSUFJQUJCeE1zRWFrRUFPZ0FBSUFCQmlNd0ZhaENlQVNBQVFlVE1CV29RbmdFZ0FFSEF6UVZxRUo0QklBQkIrTTRGYWhDZUFTQUFRWnpPQldvUW5nRWdBRUh3aEFOcUlnRW9BZ0FpQWtVRVFDQUFRZlNFQTJwQkFEWUNBQ0FBUWZpRUEycEJBRFlDQUE4TElBSVFVaUFCUVFBMkFnQWdBRUgwaEFOcVFRQTJBZ0FnQUVINGhBTnFRUUEyQWdBTDFRSUJCMzhnQUJDMkFrRUFKQVZCSlNBQVFZak1CV29pQnhBTUl3VWhBVUVBSkFVZ0FVRUJjUVJBRUJjaEFTQUFFSGtnQVJBZUMwRUFKQVZCSlNBQVFlVE1CV29pQXhBTUl3VWhBVUVBSkFVZ0FVRUJjUVJBRUJjaEFRVkJBQ1FGUVNVZ0FFSEF6UVZxSWdRUURDTUZJUUZCQUNRRklBRkJBWEVFUUJBWElRRWpCeUVDQlVFQUpBVkJKU0FBUVp6T0JXb2lCUkFNSXdVaEFVRUFKQVVnQVVFQmNRUkFFQmNoQVNNSElRSUZRUUFrQlVFbElBQkIrTTRGYWlJR0VBd2pCU0VCUVFBa0JTQUJRUUZ4QkVBUUZ5RUJJd2NoQWdWQkFDUUZRU1lnQUJBTUl3VWhBVUVBSkFVZ0FVRUJjVVVFUUE4TEVCY2hBU01ISVFJZ0JpZ0NBQ0lHQkVBZ0JoQlNDd3NnQlNnQ0FDSUZCRUFnQlJCU0N3c2dCQ2dDQUNJRUJFQWdCQkJTQ3dzZ0F5Z0NBQ0lEQkVBZ0F4QlNDd3NnQnlnQ0FDSUNSUVJBSUFBUWVTQUJFQjRMSUFJUVVpQUFFSGtnQVJBZUMwWUJBWDhnQUVFQU93RVVJQUJCR0dvaUFVRUFOZ0lBSUFGQkFEc0JCQ0FCUVFBNkFBWWdBRUVnYWlJQVFnQTNBd0FnQUVJQU53TUlJQUJDQURjREVDQUFRZ0EzQXhnTDFRSUJCWDhqQkNFREl3UkJFR29rQkNBQVFhakFBR29pQlNnQ0FDRUNJQUJCcE1BQWFpSUVJQUUyQWdBZ0FpQUJTUVJBSUFCQnJNQUFhaWdDQUNJR1FRQkhJQVlnQVVseEJFQWdBeUFHTmdJQVFhejFBa0hZR3lBREVHQkJyUFVDRUZZZ0JTZ0NBQ0VDSUFRb0FnQWhBUXNnQUVHZ3dBQnFJZ1FvQWdBZ0FTQUNRU0JxSUFKQkFuWnFJZ0pMQkg4Z0FRVWdBaUlCQ3hCWElnSkZCRUJCclBVQ0VGWUxJQVFnQWpZQ0FDQUZJQUUyQWdBTElBQkJBRG9BRUNBQVFlREFBR3BCQUJDb0JDQUFRUUEyQWh3Z0FFR3h3UUJxUVFBNkFBQWdBRUc2d1FCcVFRQTZBQUFnQUVId3dRQnFRUUEyQWdBZ0FFSDFnUUZxUVFBNkFBQWdBRUd3d0FCcUlnRkNBRGNEQUNBQlFnQTNBd2dnQVVJQU53TVFJQUJCaU1FQWFpSUJRZ0EzQXdBZ0FVRUFPZ0FJSUFCQjNNRUFhaUlBUWdBM0FnQWdBRUVBTmdJSUlBQkJBRHNCRENBQVFRQTZBQTRnQXlRRUM0WUJBQUpBQWtBQ1FBSkFBa0FnQVVFUGF3NGtBQVFFQkFRQkJBUUVCQVFCQkFRQ0JBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUURCQXNnQUVHb21BRnFMQUFBQkVBUEN5QUFJQUlRaGdRUEN5QUFRYWlZQVdvc0FBQUVRQThMSUFBZ0FoQ0VCQThMSUFCQnFKZ0JhaXdBQUFSQUR3c2dBQ0FDRUlFRUR3c2dBQ0FDRVBzREN3dUxBd0VJZnlBQlJRUkFRYXoxQWhCV0N5QUJRWUNBRUVzRWZ5QUJCVUdBZ0JBTElnTWdBRUhNelFOcUlnWW9BZ0FpQkUwRVFBOExBa0FDUUFKQUlBSUVRQ0FBUWFTV0FXb29BZ0JCQUVjaEFpQUFRYWlZQVdvaUFTd0FBRVVOQVVFRUVCUWlBVUhFSlRZQ0FDQUJRZGdLUVFvUUd3VWdBRUdvbUFGcUlnRXNBQUFFUUVFQUlRSU1Bd1ZCQUNFQ0RBSUxBQXNNQWdzZ0F4QnNJZ1ZGRFFBZ0JVRUFJQU1RVkJvZ0JFVWdBa0VCYzNKRkJFQWdBMEYvYWlFQ0lBQkJwSllCYWlnQ0FDRUhJQUFvQW1BaENDQUVRWDlxSVFsQkFTRUJBMEFnQlNBSUlBRnJJZ29nQW5GcUlBY2dDaUFKY1dvc0FBQTZBQUFnQVVFQmFpSUJJQVJORFFBTEN5QUFRYVNXQVdvaUFTZ0NBQ0lDQkVBZ0FoQlNDeUFCSUFVMkFnQU1BUXNnQTBHQWdJQUlTU0FDY2dSQVFRUVFGQ0lDUWNRbE5nSUFJQUpCMkFwQkNoQWJDeUFBUWFTV0FXb2lBaWdDQUNJRUJFQWdCQkJTSUFKQkFEWUNBQXNnQUVHb2xnRnFJQU1ROXdNZ0FVRUJPZ0FBQ3lBR0lBTTJBZ0FnQUVIUXpRTnFJQU5CZjJvMkFnQUwxQUVCQlg4Z0FCRFlBU0FCUlFSQUR3c0NRQUpBQWtBRFFDQUJJQVJySWdKQklDQURhMjRpQlVHQWdJQUNUUVJBUVlDQWdBSWhCUXNnQWlBRlNRMEJBMEFnQWhCc0lnWkZCRUFnQWlBQ1FRVjJheUlDSUFWSkRRTU1BUXNMSUFaQkFDQUNFRlFhSUFBZ0EwRUNkR29nQmpZQ0FDQUFRWUFCYWlBRFFRSjBhaUFDSUFScUlnUTJBZ0FnQkNBQlNTSUNJQU5CQVdvaUEwRWdTWEVOQUF3Q0N3QUxRUVFRRkNJQVFjUWxOZ0lBSUFCQjJBcEJDaEFiREFFTElBSUVRRUVFRUJRaUFFSEVKVFlDQUNBQVFkZ0tRUW9RR3dzTEM2UUdBZ2wvQVg0Q1FDTUVJUVFqQkVFUWFpUUVJQVFoQndKQUFrQUNRQUpBSUFNc0FBQWlCQTRFQWdBQUFRTUxJQUJCd0pnQmFpa0RBQ0VOSUFKQkJFd05BeUFOcHlFS0lBSkJmR29oQ3lBRVFRSkdCSDlCNlFFRlFlZ0JDeUVNSUFFaEFFRUFJUUlEUUNBQVFRRnFJUU1nQWtFQmFpRUVJQUFzQUFBaUJVRm9SaUFNSUFWQi93RnhSbklFZnlBRUlBcHFRZi8vL3dkeElRVWdBRUVDYWlJR0xRQUFRUWgwSUFNdEFBQnlJQUJCQTJvaUNDMEFBRUVRZEhJZ0FFRUVhaUlKTFFBQVFSaDBjaUlFUVFCSUJFQWdCQ0FGYWtGL1NnUkFJQU1nQkVHQWdJQUlhaUlET2dBQUlBWWdBMEVJZGpvQUFDQUlJQU5CRUhZNkFBQWdDU0FEUVJoMk9nQUFDd1VnQkVHQWdJQjRha0VBU0FSQUlBTWdCQ0FGYXlJRE9nQUFJQVlnQTBFSWRqb0FBQ0FJSUFOQkVIWTZBQUFnQ1NBRFFSaDJPZ0FBQ3dzZ0FrRUZhaUVDSUFCQkJXb0ZJQVFoQWlBREN5RUFJQUlnQzBnTkFBc01Bd3NnQUVIQW1BRnFLUU1BSVEwZ0FrRURUQTBDUVFBaEFDQU5weUVESUFKQmZXb2hCQU5BSUFFZ0FHb2lBaXdBQTBGclJnUkFJQUlnQWtFQmFpSUZMUUFBUVFoMElBSXRBQUJ5SUFKQkFtb2lCaTBBQUVFUWRISWdBQ0FEYWtFQ2Rtc2lBam9BQUNBRklBSkJDSFk2QUFBZ0JpQUNRUkIyT2dBQUN5QUFRUVJxSWdBZ0JFZ05BQXNNQWdzZ0F5d0FEQ0VGSUFCQkpHb2hCQ0FBUVN4cUlnWW9BZ0FoQXlBQVFTaHFJZ2dnQWpZQ0FDQURJQUpKQkVBZ0FDZ0NNQ0lBUVFCSElBQWdBa2x4Qkg4Z0J5QUFOZ0lBUWF6MUFrSFlHeUFIRUdCQnJQVUNFRllnQmlnQ0FDRURJQWdvQWdBRklBSUxJUUFnQkNnQ0FDQUFJQU5CSUdvZ0EwRUNkbW9pQTBzRWZ5QUFCU0FESWdBTEVGY2lBMFVFUUVHczlRSVFWZ3NnQkNBRE5nSUFJQVlnQURZQ0FBc2dCQ2dDQUNFR0lBVUVRRUVBSVFOQkFDRUFCU0FISkFRZ0JnOExJQVZCL3dGeElRa0RRQ0FESUFKSkJFQWdBeUVFUVFBaENBTkFJQUJCQVdvaEJTQUdJQVJxSUFoQi93RnhJQUVnQUdvdEFBQnJJZ2c2QUFBZ0JDQUphaUlFSUFKSkJFQWdCU0VBREFFRklBVWhBQXNMQ3lBRFFRRnFJZ01nQ1VjTkFDQUdJUUVMREFFTElBY2tCRUVBRHdzZ0J5UUVJQUVMdEFNQkNYOGpCQ0VDSXdSQklHb2tCQ0FBUVRocUlnVW9BZ0FpQTBIL1Awc0VRQ0FBRU5rQklBVW9BZ0FpQTBIL1Awc0VRQ0FGUVFBMkFnQkJBQ0VEQ3dzZ0FDZ0NaQ0lHSUFBb0FtQWlDRVlFZnlBQlFRUnFJZ1FoQnlBRUtBSUFJUVFnQUVIUXpRTnFLQUlBSVFsQkFBVWdBRUhRelFOcUtBSUFJZ2tnQmlBSWEzRWdBVUVFYWlJSEtBSUFJZ1JOQ3lFS0lBQkJOR29oQmlBQklBbzZBQTBnQnlBSUlBUnFJQWx4TmdJQUlBSWdBU2tDQURjQ0FDQUNJQUVwQWdnM0FnZ2dCU0FEUVFGcUlnRTJBZ0FnQVNBQVFUeHFJZ2NvQWdBaUEwMEVRQ0FHS0FJQUlBRkJmMnBCQkhScUlnQWdBaWtDQURjQ0FDQUFJQUlwQWdnM0FnZ2dBaVFFUVFFUEN5QUNRUkJxSVFRZ0FFRkFheWdDQUNJQVFRQkhJQUVnQUV0eEJIOGdCQ0FBTmdJQVFhejFBa0hZR3lBRUVHQkJyUFVDRUZZZ0J5Z0NBQ0VESUFVb0FnQUZJQUVMSVFBZ0JpZ0NBQ0FBSUFOQklHb2dBMEVDZG1vaUFVc0VmeUFBQlNBQklnQUxRUVIwRUZjaUFVVUVRRUdzOVFJUVZnc2dCaUFCTmdJQUlBY2dBRFlDQUNBQklBVW9BZ0JCZjJwQkJIUnFJZ0FnQWlrQ0FEY0NBQ0FBSUFJcEFnZzNBZ2dnQWlRRVFRRUwrUVFCQjM4Z0FTd0FDRVVFUUNBQktBSUFJQUJCNkFCcUlnWW9BZ0FpQTBGd2Frb0VRQ0FESUFCQkJHb2lCeWdDQUNJRmF5SUVRUUJJQkVCQkFBOExJQUJCOEFCcUlnZ2dBRUg0QUdvaUNTZ0NBQ0FGYXlBSUtBSUFhallDQUNBRlFZQ0FBVW9FUUNBRVFRQktCRUFnQUNnQ0VDSURJQU1nQldvZ0JCQmRHZ3NnQjBFQU5nSUFJQVlnQkRZQ0FBVWdBeUVFQ3lBRVFZQ0FBa1lFUUVFQUlRUkJnSUFDSVFNRklBQW9BZ0FnQUNnQ0VDQUVha0dBZ0FJZ0JHc1FYaUVFSUFZb0FnQWlCU0FFYWlFRElBUkJBRW9FUUNBR0lBTTJBZ0FGSUFVaEF3c0xJQUJCN0FCcUlnVWdBMEZpYWlJQU5nSUFJQWtnQnlnQ0FDSUROZ0lBSUFOQmYyb2dDQ2dDQUNJR2FpRURJQVpCZjBjRVFDQUZJQUFnQTBnRWZ5QUFCU0FEQ3pZQ0FBc2dCRUYvUmdSQVFRQVBDd3NMSUFFUVdFRU9kaUVHSUFFZ0FVRUVhaUlGS0FJQVFRSnFJZ0JCQTNZZ0FTZ0NBR28yQWdBZ0JTQUFRUWR4TmdJQVFRQWhCRUVBSVFBRFFDQUJFRmhCQ0hZZ0FFRURkSFFnQkdvaEJDQUJJQVVvQWdCQkNHb2lBMEVEZGlBQktBSUFhallDQUNBRklBTkJCM0UyQWdBZ0FFRUJhaUVESUFBZ0JrY0VRQ0FESVFBTUFRc0xJQUlnQkRZQ0JDQUJFRmhCRG5ZaEJpQUJJQVVvQWdCQkFtb2lBRUVEZGlBQktBSUFhallDQUNBRklBQkJCM0UyQWdCQkFDRUVRUUFoQUFOQUlBRVFXRUVJZGlBQVFRTjBkQ0FFYWlFRUlBRWdCU2dDQUVFSWFpSURRUU4ySUFFb0FnQnFOZ0lBSUFVZ0EwRUhjVFlDQUNBQVFRRnFJUU1nQUNBR1J3UkFJQU1oQUF3QkN3c2dBaUFFTmdJSUlBSWdBUkJZUVExMk9nQUFJQUZCQXhCVklBSXNBQUFFUUVFQkR3c2dBaUFCRUZoQkMzWkJBV282QUF3Z0FVRUZFRlZCQVF1WUh3RXRmd0pBSXdRaEJDTUVRUkJxSkFRZ0FFSEltQUZxSWg1QkFUb0FBQ0FBUWJpWUFXb2lIeXdBQUFSQUlBQkI3QUJxSVE0Z0FFRUlhaUVISUFCQndKZ0JhaUVhSUFCQjhBQnFJUk1nQUVINEFHb2hFaUFBUVlRQmFpRWJJQUJCNkFCcUlRZ2dBRUVFYWlFWElBQkI4QUJxSVJnZ0FFRUVhaUVNQlNBQlJRUkFJQUJCaEFGcVFRQkJuSlVCRUZRYUlBQkJ4QUJxSWdKQ0FEY0NBQ0FDUWdBM0FnZ2dBa0lBTndJUUlBSkNBRGNDR0NBQ1FRQTJBaUFnQUVHZ2xnRnFJQUJCek0wRGFpZ0NBQ0lDUVlDQWdBSkpCSDhnQWdWQmdJQ0FBZ3NnQUVIUXpRTnFLQUlBY1RZQ0FBc2dBRUVBTmdJNElBQkJDR29pQjBFQU5nSUFJQUJCQkdvaUJVRUFOZ0lBSUFCQndKZ0JhaUlhUWdBM0F3QWdBRUhvQUdvaUEwSUFOd01BSUFOQ0FEY0RDQ0FEUWdBM0F4QWdBMEVBTmdJWUlBQkI4QUJxSWdaQmZ6WUNBQ0FCUlFSQUlBQkJ3SzRDYWtFQU5nSUFJQUJCeEs0Q2FrRUFOZ0lBSUFCQnVLNENha0VBTmdJQUlBQkJ2SzRDYWtFQk5nSUFJQUJCeUs0Q2FrRUFRZkFDRUZRYUlBQkJoSzhCYWtFQVFiVC9BQkJVR2lBQVFjek1BMnBCQURvQUFDQUFRYlRKQTJwQkFFR1VBeEJVR2lBQVFiREpBMnBCQWpZQ0FDQUFRY2pNQTJwQkFEWUNBQXNnQUNBQkVJTUJJQU1vQWdBaUFpQUZLQUlBSWdocklnRkJBRWdOQVNBR0lBQkIrQUJxSWhJb0FnQWdDR3NnQmlnQ0FHbzJBZ0FnQ0VHQWdBRktCRUFnQVVFQVNnUkFJQUFvQWhBaUFpQUNJQWhxSUFFUVhSb0xJQVZCQURZQ0FDQURJQUUyQWdBRklBSWhBUXNnQVVHQWdBSkdCRUJCQUNFQlFZQ0FBaUVDQlNBQUtBSUFJQUFvQWhBZ0FXcEJnSUFDSUFGckVGNGhBU0FES0FJQUlnZ2dBV29oQWlBQlFRQktCRUFnQXlBQ05nSUFCU0FJSVFJTEN5QUFRZXdBYWlJT0lBSkJZbW9pQWpZQ0FDQVNJQVVvQWdBaUNEWUNBQ0FJUVg5cUlBWW9BZ0FpREdvaENDQU1RWDlIQkVBZ0RpQUNJQWhJQkg4Z0FnVWdDQXMyQWdBTElBRkJmMFlOQVNBQUlBQkJCR29pRENBQVFmQUFhaUlURUtRQ1JRMEJJQUFnRENBVElBQkJoQUZxSWhzUW93SkZEUUVDUUNBRElRZ2dCU0VYSUFZaEdBc0xJQVFoRHlBQVFkRE5BMm9oRUNBQVFlQUFhaUVKSUFCQkJHb2hDaUFBUWFDV0FXb2hJQ0FBUVJCcUlSUWdBRUdJQW1vaElTQUFRYWlZQVdvaEZTQUFRYVNXQVdvaElpQUFRYWlXQVdvaERTQUFRZlFmYWlFaklBQkJ6QUJxSVJ3Z0FFSFFBR29oSkNBQVFjZ0FhaUVkSUFCQnhBQnFJUllnQUVIWUFHb2hHU0FBUWVBOWFpRWxJQUJCM0R4cUlTWWdBRUh3SG1vaEp5QUFRY3piQUdvaEtDQUFRY2phQUdvaEtTQUFRWVFCYWlFcUlBQkJzSmdCYWlFcklBQkI4QUJxSVN3Z0FFSDBBR29oTFNBQVFZQUJhaUV1QWtBQ1FBSkFBMEFDUUNBSklBa29BZ0FnRUNnQ0FDSUVjU0lDTmdJQUlBb29BZ0FpQVNBT0tBSUFUZ1JBQTBBQ1FDQUJJQ3dvQWdBaUF5QVNLQUlBSWdWcUlnSklCRUFnQVNBQ1FYOXFSdzBCSUFjb0FnQWdMU2dDQUVnTkFRc2dMaXdBQUEwRElBQWdEQ0FURUtRQ1JRMEdJQUFnRENBVElCc1Fvd0pGRFFZZ0NpZ0NBQ0VCREFFTEN5QUlLQUlBSWdRZ0FXc2lBa0VBU0EwQklCZ2dCU0FCYXlBRGFqWUNBQ0FCUVlDQUFVb0VmeUFDUVFCS0JFQWdGQ2dDQUNJRUlBUWdBV29nQWhCZEdnc2dGMEVBTmdJQUlBZ2dBallDQUNBQ0JTQUVDeUlCUVlDQUFrWUVRRUVBSVFGQmdJQUNJUUlGSUFBb0FnQWdGQ2dDQUNBQmFrR0FnQUlnQVdzUVhpRUJJQWdvQWdBaUJDQUJhaUVDSUFGQkFFb0VRQ0FJSUFJMkFnQUZJQVFoQWdzTElBNGdBa0ZpYWlJQ05nSUFJQklnRnlnQ0FDSUROZ0lBSUFOQmYyb2dHQ2dDQUNJRmFpRUVJQVZCZjBjRVFDQU9JQUlnQkVnRWZ5QUNCU0FFQ3pZQ0FBc2dBVUYvUmcwQklBa29BZ0FoQWlBUUtBSUFJUVFnQXlFQkN5QWdLQUlBSWdNZ0FrWWdBeUFDYXlBRWNVR0RJRXR5Qkg4Z0FRVWdBQkRaQVNBYUtRTUFJQ3NwQXdCVkRRUWdIeXdBQUEwRElBb29BZ0FMSVFJZ0ZDZ0NBQ0lHSUFKQkFXcHFMUUFBUVFoMElBWWdBbW90QUFCQkVIUnlJQVlnQWtFQ2Ftb3RBQUJ5UVFnZ0J5Z0NBQ0lFYTNaQi92OERjU0lESUFCQmlBRnFJQ0VvQWdBaUFVRUNkR29vQWdCSkJFQWdDaUFFSUFCQmpBSnFJQU5CRUNBQmEzWWlCR290QUFCcUlnTkJBM1lnQW1vaUFUWUNBQ0FISUFOQkIzRWlBallDQUNBQVFZd0thaUFFUVFGMGFpRURCUU5BQWtBZ0FVRUJhaUlCUVE5UEJFQkJEeUVCREFFTElBTWdBRUdJQVdvZ0FVRUNkR29vQWdCUERRRUxDeUFLSUFFZ0JHb2lCRUVEZGlBQ2FpSUNOZ0lBSUFjZ0JFRUhjU0lFTmdJQUlBQkJqQnBxSUFNZ0FDQUJRUUowYWlnQ2hBRnJRUkFnQVd0MklBQkJ5QUZxSUFGQkFuUnFLQUlBYWlJQklDb29BZ0JQQkg5QkFBVWdBUXRCQVhScUlRTWdBaUVCSUFRaEFnc2dBeTRCQUNJRVFmLy9BM0ZCZ0FKSUJFQWdGU3dBQUFSL0lBa2dDU2dDQUNJQlFRRnFOZ0lBSUEwZ0FSQjFCU0FpS0FJQUlRRWdDU0FKS0FJQUlnSkJBV28yQWdBZ0FTQUNhZ3NpQVNBRU9nQUFEQUlMSUFSQi8vOERjU0VESUFSQi8vOERjVUdGQWt3RVFBSkFBa0FDUUNBRVFZQUNhdzRDQUFFQ0N5QUFJQXdnRHhENkEwVU5CeUFBSUE4UStRTWFEQVFMSUJrb0FnQWlBVVVOQXlBV0tBSUFJUVFnRlN3QUFFVUVRQ0FBSUFFZ0JCQjJEQVFMSUJBb0FnQWhBeUFKS0FJQUlnSWdCR3NoQkFOQUlBMGdCQ0FEY1JCMUxBQUFJUVVnRFNBQ0VIVWdCVG9BQUNBSklBa29BZ0JCQVdvZ0EzRWlBallDQUNBQlFYOXFJZ0ZGRFFRZ0JFRUJhaUVFREFBTEFBc2dBRUhFQUdvZ0EwSCtmV29pQkVFQ2RHb29BZ0FoQXlBRUJIOGdCQ0VCQTBBZ0FFSEVBR29nQVVFQ2RHb2dBRUhFQUdvZ0FVRi9haUlCUVFKMGFpZ0NBRFlDQUNBQkRRQUxJQlFvQWdBaEJpQUhLQUlBSVFJZ0NpZ0NBQVVnQVFzaEJDQVdJQU0yQWdBZ0JpQUVRUUZxYWkwQUFFRUlkQ0FHSUFScUxRQUFRUkIwY2lBR0lBUkJBbXBxTFFBQWNrRUlJQUpyZGtIKy93TnhJZ1VnQUVITTJnQnFJQ2dvQWdBaUFVRUNkR29vQWdCSkJFQWdDaUFDSUFCQjBOc0FhaUFGUVJBZ0FXdDJJZ1ZxTFFBQWFpSUNRUU4ySUFScUlnRTJBZ0FnQnlBQ1FRZHhJZ0kyQWdBZ0FFSFE0d0JxSUFWQkFYUnFJUVVGQTBBQ1FDQUJRUUZxSWdGQkQwOEVRRUVQSVFFTUFRc2dCU0FBUWN6YUFHb2dBVUVDZEdvb0FnQlBEUUVMQ3lBS0lBRWdBbW9pQzBFRGRpQUVhaUlDTmdJQUlBY2dDMEVIY1NJRU5nSUFJQUJCMFBNQWFpQUZJQUFnQVVFQ2RHcEJ5Tm9BYWlnQ0FHdEJFQ0FCYTNZZ0FFR00yd0JxSUFGQkFuUnFLQUlBYWlJQklDa29BZ0JQQkg5QkFBVWdBUXRCQVhScUlRVWdBaUVCSUFRaEFnc2dCUzhCQUNJTElnUkJBbllpRVVGL2FpRUZJQmtnQzBILy93TnhRUWhJQkg4Z0JFRUNhZ1VnQkVFRGNVRUVjaUFGZEVFQ2FpRUVJQVVFUUNBR0lBRkJBV3BxTFFBQVFRaDBJQVlnQVdvdEFBQkJFSFJ5SUFZZ0FVRUNhbW90QUFCeVFRZ2dBbXQyUWYvL0EzRkJFU0FSYTNZZ0JHb2hCQ0FLSUFJZ0JXb2lBa0VEZGlBQmFqWUNBQ0FISUFKQkIzRTJBZ0FMSUFRTElnRTJBZ0FnRlN3QUFFVUVRQ0FBSUFFZ0F4QjJEQU1MSUJBb0FnQWhCU0FKS0FJQUlRSWdBVVVOQWlBQ0lBTnJJUVFEUUNBTklBUWdCWEVRZFN3QUFDRURJQTBnQWhCMUlBTTZBQUFnQ1NBSktBSUFRUUZxSUFWeElnSTJBZ0FnQVVGL2FpSUJSUTBESUFSQkFXb2hCQXdBQ3dBTElBTkIrbjFxSWd0QkFuWWlFVUYvYWlFRklBdEJDRWtFUUNBRFFmeDlhaUVFQlNBRVFRSnFRUkIwUVJCMVFRTnhRUVJ5SUFWMFFRSnFJUVFnQlFSQUlBWWdBVUVCYW1vdEFBQkJDSFFnQmlBQmFpMEFBRUVRZEhJZ0JpQUJRUUpxYWkwQUFISkJDQ0FDYTNaQi8vOERjVUVSSUJGcmRpQUVhaUVFSUFvZ0FpQUZhaUlDUVFOMklBRnFJZ0UyQWdBZ0J5QUNRUWR4SWdJMkFnQUxDeUFHSUFGQkFXcHFMUUFBUVFoMElBWWdBV290QUFCQkVIUnlJQVlnQVVFQ2Ftb3RBQUJ5UVFnZ0FtdDJRZjcvQTNFaUJTQUFRZlFlYWlBaktBSUFJZ05CQW5ScUtBSUFTUVIvSUFvZ0FpQUFRZmdmYWlBRlFSQWdBMnQySWdOcUxRQUFhaUlDUVFOMklBRnFJZ0UyQWdBZ0J5QUNRUWR4SWdJMkFnQWdBRUg0SjJvZ0EwRUJkR29GQTBBQ1FDQURRUUZxSWdOQkQwOEVRRUVQSVFNTUFRc2dCU0FBUWZRZWFpQURRUUowYWlnQ0FFOE5BUXNMSUFvZ0F5QUNhaUlDUVFOMklBRnFJZ0UyQWdBZ0J5QUNRUWR4SWdJMkFnQWdBRUg0TjJvZ0JTQUFJQU5CQW5ScVFmQWVhaWdDQUd0QkVDQURhM1lnQUVHMEgyb2dBMEVDZEdvb0FnQnFJZ01nSnlnQ0FFOEVmMEVBQlNBREMwRUJkR29MSWdNdkFRQWlFU0lEUVFGMklndEJmMm9oQlNBUlFmLy9BM0ZCQkVnRVFDQURRUUZxSVFFRklBTkJBWEZCQW5JZ0JYUkJBV29oQXdKL0lBVUVmeUFGUVFOTkJFQWdCaUFCUVFGcWFpMEFBRUVRZENBR0lBRnFMUUFBUVJoMGNpQUdJQUZCQW1wcUxRQUFRUWgwY2lBR0lBRkJBMnBxTFFBQWNpQUNkQ0FHSUFGQkJHcHFMUUFBUVFnZ0FtdDJja0VoSUF0cmRpQURhaUVESUFvZ0FpQUZhaUlDUVFOMklBRnFOZ0lBSUFjZ0FrRUhjVFlDQUNBRERBSUxJQVZCQkVZRVFDQURJUVVnQVNFREJTQUdJQUZCQVdwcUxRQUFRUkIwSUFZZ0FXb3RBQUJCR0hSeUlBWWdBVUVDYW1vdEFBQkJDSFJ5SUFZZ0FVRURhbW90QUFCeUlBSjBJQVlnQVVFRWFtb3RBQUJCQ0NBQ2EzWnlRU1VnQzJ0MlFRUjBJQU5xSVFVZ0NpQUxRWHRxSUFKcUlnSkJBM1lnQVdvaUF6WUNBQ0FISUFKQkIzRWlBallDQUFzZ0JTQUdJQU5CQVdwcUxRQUFRUWgwSUFZZ0Eyb3RBQUJCRUhSeUlBWWdBMEVDYW1vdEFBQnlRUWdnQW10MlFmNy9BM0VpQmlBQVFlQThhaUFsS0FJQUlnRkJBblJxS0FJQVNRUi9JQW9nQWlBQVFlUTlhaUFHUVJBZ0FXdDJJZ0ZxTFFBQWFpSUNRUU4ySUFOcU5nSUFJQWNnQWtFSGNUWUNBQ0FBUWVURkFHb2dBVUVCZEdvRkEwQUNRQ0FCUVFGcUlnRkJEMDhFUUVFUElRRU1BUXNnQmlBQVFlQThhaUFCUVFKMGFpZ0NBRThOQVFzTElBb2dBU0FDYWlJQ1FRTjJJQU5xTmdJQUlBY2dBa0VIY1RZQ0FDQUFRZVRWQUdvZ0JpQUFJQUZCQW5ScVFkdzhhaWdDQUd0QkVDQUJhM1lnQUVHZ1BXb2dBVUVDZEdvb0FnQnFJZ0VnSmlnQ0FFOEVmMEVBQlNBQkMwRUJkR29MSWdFdkFRQnFCU0FEQ3dzaUFVR0FBa3NFUUNBQlFZREFBRXNoQWlBQlFZQ0FFRXNFZjBFREJVRUNDeUVESUFJRWZ5QURCVUVCQ3lBRWFpRUVDd3NnSkNBY0tBSUFOZ0lBSUJ3Z0hTZ0NBRFlDQUNBZElCWW9BZ0EyQWdBZ0ZpQUJOZ0lBSUJrZ0JEWUNBQ0FWTEFBQVJRUkFJQUFnQkNBQkVIWU1BZ3NnRUNnQ0FDRUZJQWtvQWdBaEFpQUVSUTBCSUFJZ0FXc2hBeUFDSVFFRFFDQU5JQU1nQlhFUWRTd0FBQ0VDSUEwZ0FSQjFJQUk2QUFBZ0NTQUpLQUlBUVFGcUlBVnhJZ0UyQWdBZ0JFRi9haUlFUlEwQ0lBTkJBV29oQXd3QUN3QUxDd3dDQ3lBZVFRQTZBQUFnRHlRRUR3c2dEeVFFRHdzZ0FCRFpBU0FQSkFRUEN5QUVKQVFMaGdVQkFYOENRQ0FBS0FLQUFTSURJQUZMQkVBZ0F5RUFCU0FBS0FLRUFTSURJQUZMQkVBZ0F5RUFCU0FBS0FLSUFTSURJQUZMQkVBZ0F5RUFCU0FBS0FLTUFTSURJQUZMQkVBZ0F5RUFCU0FBS0FLUUFTSURJQUZMQkVBZ0F5RUFCU0FBS0FLVUFTSURJQUZMQkVBZ0F5RUFCU0FBS0FLWUFTSURJQUZMQkVBZ0F5RUFCU0FBS0FLY0FTSURJQUZMQkVBZ0F5RUFCU0FBS0FLZ0FTSURJQUZMQkVBZ0F5RUFCU0FBS0FLa0FTSURJQUZMQkVBZ0F5RUFCU0FBS0FLb0FTSURJQUZMQkVBZ0F5RUFCU0FBS0FLc0FTSURJQUZMQkVBZ0F5RUFCU0FBS0FLd0FTSURJQUZMQkVBZ0F5RUFCU0FBS0FLMEFTSURJQUZMQkVBZ0F5RUFCU0FBS0FLNEFTSURJQUZMQkVBZ0F5RUFCU0FBS0FLOEFTSURJQUZMQkVBZ0F5RUFCU0FBS0FMQUFTSURJQUZMQkVBZ0F5RUFCU0FBS0FMRUFTSURJQUZMQkVBZ0F5RUFCU0FBS0FMSUFTSURJQUZMQkVBZ0F5RUFCU0FBS0FMTUFTSURJQUZMQkVBZ0F5RUFEQlFMSUFBb0F0QUJJZ01nQVVzRVFDQURJUUFNRkFzZ0FDZ0MxQUVpQXlBQlN3UkFJQU1oQUF3VUN5QUFLQUxZQVNJRElBRkxCRUFnQXlFQURCUUxJQUFvQXR3QklnTWdBVXNFUUNBRElRQU1GQXNnQUNnQzRBRWlBeUFCU3dSQUlBTWhBQXdVQ3lBQUtBTGtBU0lESUFGTEJFQWdBeUVBREJRTElBQW9BdWdCSWdNZ0FVc0VRQ0FESVFBTUZBc2dBQ2dDN0FFaUF5QUJTd1JBSUFNaEFBd1VDeUFBS0FMd0FTSURJQUZMQkVBZ0F5RUFEQlFMSUFBb0F2UUJJZ01nQVVzRVFDQURJUUFNRkFzZ0FDZ0MrQUVpQXlBQlN3UkFJQU1oQUF3VUN5QUFLQUw4QVNJQUlBRkxEUk5CQUNFQVFRQVBDd3NMQ3dzTEN3c0xDd3NMQ3dzTEN3c0xDd3NnQUNBQmF5SUFJQUpKQkg4Z0FBVWdBZ3NMNUFFQkJuOGpCQ0VDSXdSQkVHb2tCQ0FBUVFScUlnUW9BZ0JCQVdvaEF5QUVJQU0yQWdBZ0F5QUFRUWhxSWdZb0FnQWlCMDBFUUNBQUtBSUFJQU5CZjJwQkFuUnFJQUUyQWdBZ0FpUUVEd3NnQWlFRklBQW9BZ3dpQWtFQVJ5QURJQUpMY1FSL0lBVWdBallDQUVHczlRSkIyQnNnQlJCZ1FhejFBaEJXSUFRb0FnQWhBeUFHS0FJQUJTQUhDeUVDSUFBb0FnQWdBeUFDUVNCcUlBSkJBblpxSWdKTEJIOGdBd1VnQWlJREMwRUNkQkJYSWdKRkJFQkJyUFVDRUZZTElBQWdBallDQUNBR0lBTTJBZ0FnQWlBRUtBSUFRWDlxUVFKMGFpQUJOZ0lBSUFVa0JBdUFGd0VUZndKQUFrQWpCQ0VGSXdSQk1Hb2tCQ0FGUVNCcUlSRWdCVUVZYWlFU0lBVkJFR29oRXlBRlFRaHFJUlFnQlNFTUlBQkJqTTBEYWtFQU5nSUFJQUJCaU0wRGFpSUlRUUEyQWdBZ0FFR1V6UU5xS0FJQUlBSWdBMEdBZ0FKSUJIOGdBd1ZCZ0lBQ0N4QlRHaUFBUWRETUEyb2lGVUVRYWlJQ0tBSUFSUVJBSUFKQmhJQVFFRjgyQWdBTEFrQUNRQ0FCUVlBQmNRUkFJQWdRY2lJQ0JFQWdBa0YvYWlFSERBSUZJQUJCQUJDREFTQUFRYnpOQTJvaEN5QUFRWnpOQTJvaUFpZ0NBQ0VEQ3dVZ0FFSEl6UU5xS0FJQUlRY01BUXNNQVFzZ0J5QUFRWnpOQTJvaUFpZ0NBQ0lEU3cwQ0lBY2dBRUc4elFOcUlnc29BZ0JMRFFJTElBQkJtTTBEYWlFRUlBQkJ1TTBEYWlFT0lBQkJ5TTBEYWlBSE5nSUFRZkFBRUY4aUJrRVVhaUVKSUFaQkFEWUNiQ0FKUWdBM0FnQWdDVUlBTndJSUlBbENBRGNDRUNBSlFnQTNBaGdnQ1VJQU53SWdJQWxDQURjQ0tDQUpRZ0EzQWpBZ0J5QURSaUlXQkVBZ0IwR0F3QUJMRFFFZ0FpQUhRUUZxSWdNMkFnQWdBeUFBUWFETkEyb2lDaWdDQUNJRlN3Ui9JQUJCcE0wRGFpZ0NBQ0lOUVFCSElBTWdEVXR4QkVBZ0RDQU5OZ0lBUWF6MUFrSFlHeUFNRUdCQnJQVUNFRllnQ2lnQ0FDRUZJQUlvQWdBaEF3c2dCQ2dDQUNBRElBVkJJR29nQlVFQ2Rtb2lCVXNFZnlBRElnVUZJQVVMUVFKMEVGY2lBMFVFUUVHczlRSVFWZ3NnQkNBRE5nSUFJQW9nQlRZQ0FDQURJUVVnQWlnQ0FBVWdCQ2dDQUNFRklBTUxJUUpCOEFBUVh5SURRUlJxSVFRZ0EwRUFOZ0pzSUFSQ0FEY0NBQ0FFUWdBM0FnZ2dCRUlBTndJUUlBUkNBRGNDR0NBRVFnQTNBaUFnQkVJQU53SW9JQVJDQURjQ01DQUZJQUpCZjJvaUFrRUNkR29nQXpZQ0FDQUdJQUkyQWhBZ0RrRUFFUDBESUFOQkFEWUNDQVVnQkNnQ0FDQUhRUUowYWlnQ0FDRURJQVlnQnpZQ0VDQURRUWhxSWdJZ0FpZ0NBRUVCYWpZQ0FBc2dBRUdvelFOcUlRb0NRQUpBSUFCQnJNMERhaUlOS0FJQUlnVUVRRUVBSVFKQkFDRUVBMEFnQ2lnQ0FDSVFJQVFnQW10QkFuUnFJQkFnQkVFQ2RHb29BZ0EyQWdBZ0FpQUtLQUlBSUFSQkFuUnFJaEFvQWdCRmFpSUNRUUJLQkVBZ0VFRUFOZ0lBQ3lBRVFRRnFJZ1FnQlVrTkFBc2dBZ1JBSUFJaEJDQUZJUUlGSUFWQmdNQUFTd1JBSUFZb0Fqd2lBQVJBSUFBUVVnc2dCaWdDTENJQUJFQWdBQkJTQ3lBSktBSUFJZ0FFUUNBQUVGSUxEQVVGREFNTEFBc0ZRUUFoQlF3QkN3d0JDeUFOSUFWQkFXb2lBallDQUNBQ0lBQkJzTTBEYWlJRUtBSUFJZ1ZMQkVBZ0FFRzB6UU5xS0FJQUlnbEJBRWNnQWlBSlMzRUVRQ0FVSUFrMkFnQkJyUFVDUWRnYklCUVFZRUdzOVFJUVZpQUVLQUlBSVFVZ0RTZ0NBQ0VDQ3lBS0tBSUFJQUlnQlVFZ2FpQUZRUUoyYWlJRlN3Ui9JQUlGSUFVaUFndEJBblFRVnlJRlJRUkFRYXoxQWhCV0N5QUtJQVUyQWdBZ0JDQUNOZ0lBSUEwb0FnQWhBZ3RCQVNFRUN5QUtLQUlBSUFJZ0JHdEJBblJxSUFZMkFnQWdCa0VJYWlJSklBTW9BZ2cyQWdBZ0NCQnlJZ0pCZ2dKcUlRVWdCaUFCUWNBQWNRUi9JQVVGSUFJaUJRc2dBRUhnQUdvaUJDZ0NBQ0lDYWlBQVFkRE5BMm9pQ2lnQ0FIRTJBZ0FnQVVFZ2NRUkFJQVlnQ0JCeUlnSTJBZ1FnRGlnQ0FDQUhRUUowYWlBQ05nSUFJQVFvQWdBaEFnVWdCaUFISUFzb0FnQkpCSDhnRGlnQ0FDQUhRUUowYWlnQ0FBVkJBQXMyQWdRTElBWWdBQ2dDWkNJQUlBSkdCSDlCQUFVZ0NpZ0NBQ0FBSUFKcmNTQUZUUXRCQVhFNkFBd2dCa0hNQUdvaUJFSUFOd0lBSUFSQ0FEY0NDQ0FFUWdBM0FoQWdCRUVBTmdJWUlBWkJnSUFQTmdKWUlBWWdCa0VFYWlJT0tBSUFOZ0pjSUFZZ0NTZ0NBRFlDWUNBQlFSQnhCRUFnQ0JCWVFRbDJJUUFnQ0VFSEVGVWdBRUVCY1FSQUlBUWdDQkJ5TmdJQUN5QUFRUUp4QkVBZ0JpQUlFSEkyQWxBTElBQkJCSEVFUUNBR0lBZ1FjallDVkFzZ0FFRUljUVJBSUFZZ0NCQnlOZ0pZQ3lBQVFSQnhCRUFnQmlBSUVISTJBbHdMSUFCQklIRUVRQ0FHSUFnUWNqWUNZQXNnQUVIQUFIRUVRQ0FHSUFnUWNqWUNaQXNMQWtBZ0ZnUkFJQWdRY2lJRlFYOXFRZjcvQTBzTkEwRUFJQVZCSUVzRWZ5QUZCVUVnQ3hCWElnSkZCRUJCclBVQ0VGWkJBQ0VDQzBFQUlRQUNRQUpBQWtBQ1FBTkFJQWdvQWdCQkEycEIvLzhCU3cwQlFRQWtCVUVWSUFnUUJTRUhJd1VoQzBFQUpBVWdDMEVCY1EwQ0lBSWdBR29nQjBFSWRqb0FBRUVBSkFWQkVDQUlRUWdRRFNNRklRZEJBQ1FGSUFkQkFYRU5BeUFBUVFGcUlnQWdCVWtOQUF0QkFDUUZRUVlnRlNBQ0lBVWdBMEVVYWhBUEl3VWhBRUVBSkFVZ0FFRUJjUTBDSUFJUVVnd0ZDeUFDUlEwR0lBSVFVZ3dHQ3hBWElRQWdBZ1JBSUFBaER3VWdBQkFlQ3d3QkN4QVhJUThMSUFJUVVpQVBFQjRMQ3lBR0lBTW9BaFEyQWlRZ0JpQURLQUlvTmdJb0lBTkJRR3NvQWdBaUIwRi9ha0gvUDBrRVFDQUdRVHhxSVFVZ0JrRkFheUlMS0FJQUlBZHFJUUFnQ3lBQU5nSUFJQUFnQmtIRUFHb2lEeWdDQUNJQ1N3UkFJQVlvQWtnaUNrRUFSeUFBSUFwTGNRUkFJQk1nQ2pZQ0FFR3M5UUpCMkJzZ0V4QmdRYXoxQWhCV0lBOG9BZ0FoQWlBTEtBSUFJUUFMSUFVb0FnQWdBQ0FDUVNCcUlBSkJBblpxSWdKTEJIOGdBQ0lDQlNBQ0N4QlhJZ0JGQkVCQnJQVUNFRllMSUFVZ0FEWUNBQ0FQSUFJMkFnQUZJQVVvQWdBaEFBc2dBQ0FES0FJOElBY1FVeG9MSUFaQkxHb2lBeWdDQUNFQUlBWkJNR29pQlNnQ0FFSEFBRWtFUUNBQUJFQWdBQkJTSUFOQkFEWUNBQXNnQmtFMGFpSUhRUUEyQWdBZ0JVSEFBRFlDQUNBR0tBSTRJZ0JCZjJwQlAwa0VmeUFTSUFBMkFnQkJyUFVDUWRnYklCSVFZRUdzOVFJUVZpQUhLQUlBSVFJZ0F5Z0NBQ0VMSUFVb0FnQUZRUUFoQWtFQUlRdEJ3QUFMSVFBZ0N5QUFJQUpCSUdvZ0FrRUNkbW9pQWtzRWZ5QUFJZ0lGSUFJTEVGY2lBRVVFUUVHczlRSVFWZ3NnQXlBQU5nSUFJQWNnQWpZQ0FBc2dBQ0FFS0FJQUlnSTZBQUFnQUNBQ1FRaDJPZ0FCSUFBZ0FrRVFkam9BQWlBQUlBSkJHSFk2QUFNZ0FFRUVhaUlDSUFZb0FsQWlCRG9BQUNBQ0lBUkJDSFk2QUFFZ0FpQUVRUkIyT2dBQ0lBSWdCRUVZZGpvQUF5QUFRUWhxSWdJZ0JpZ0NWQ0lFT2dBQUlBSWdCRUVJZGpvQUFTQUNJQVJCRUhZNkFBSWdBaUFFUVJoMk9nQURJQUJCREdvaUFpQUdLQUpZSWdRNkFBQWdBaUFFUVFoMk9nQUJJQUlnQkVFUWRqb0FBaUFDSUFSQkdIWTZBQU1nQUVFUWFpSUNJQVlvQWx3aUJEb0FBQ0FDSUFSQkNIWTZBQUVnQWlBRVFSQjJPZ0FDSUFJZ0JFRVlkam9BQXlBQVFSUnFJZ0lnQmlnQ1lDSUVPZ0FBSUFJZ0JFRUlkam9BQVNBQ0lBUkJFSFk2QUFJZ0FpQUVRUmgyT2dBRElBQkJHR29pQWlBR0tBSmtJZ1E2QUFBZ0FpQUVRUWgyT2dBQklBSWdCRUVRZGpvQUFpQUNJQVJCR0hZNkFBTWdBRUVjYWlJQ0lBNG9BZ0FpQkRvQUFDQUNJQVJCQ0hZNkFBRWdBaUFFUVJCMk9nQUNJQUlnQkVFWWRqb0FBeUFBUVNCcUlnSkJBRG9BQUNBQ1FRQTZBQUVnQWtFQU9nQUNJQUpCQURvQUF5QUFRU3hxSWdJZ0NTZ0NBQ0lFT2dBQUlBSWdCRUVJZGpvQUFTQUNJQVJCRUhZNkFBSWdBaUFFUVJoMk9nQURJQUJCTUdvaUFFSUFOd0FBSUFCQ0FEY0FDQ0FCUVFoeFJRUkFJQXdrQkVFQkR3c2dDQ2dDQUVFRGFrSC8vd0ZMRFFFZ0NCQnlJZ0pCd0Q5TERRRWdBa0ZBYXlJQUlBVW9BZ0JMQkVBZ0JTQUFOZ0lBSUFBZ0JrRTBhaUlFS0FJQUlnRkxCRUFnQmlnQ09DSUhRUUJISUFBZ0IwdHhCRUFnRVNBSE5nSUFRYXoxQWtIWUd5QVJFR0JCclBVQ0VGWWdCQ2dDQUNFQklBVW9BZ0FoQUFzZ0F5Z0NBQ0FBSUFGQklHb2dBVUVDZG1vaUFVc0VmeUFBQlNBQklnQUxFRmNpQVVVRVFFR3M5UUlRVmdzZ0F5QUJOZ0lBSUFRZ0FEWUNBQXNMSUFNb0FnQWhBU0FDQkVCQkFDRUFCU0FNSkFSQkFROExJQUZCUUdzaEFRSkFBMEFnQ0NnQ0FFRURha0gvL3dGTEJFQkJBQ0VBREFJTElBRWdBR29nQ0JCWVFRaDJPZ0FBSUFoQkNCQlZJQUJCQVdvaUFDQUNTUTBBUVFFaEFBc0xJQXdrQkNBQUR3c2dCaEJTQ3lBTUpBUkJBQXVTQmdFTmZ5QUFRUkJxSWdrb0FnQWlBU0FBUVFScUlnY29BZ0FpQlVFQmFtb3RBQUJCQ0hRZ0FTQUZhaTBBQUVFUWRISWdBU0FGUVFKcWFpMEFBSEpCQ0NBQVFRaHFJZ2dvQWdBaUEydDJRUWgySWdaQi93RnhJUXNnQnlBRFFRaHFJZ0pCQTNZZ0JXb2lBellDQUNBSUlBSkJCM0VpQWpZQ0FDQUdRUWR4UVFGcUlRVUNRQUpBQWtBQ1FBSkFBa0FDUUNBR1FRZHhRUVpyRGdJQUFRSUxJQUVnQTBFQmFpSUdhaTBBQUVFSWRDQUJJQU5xTFFBQVFSQjBjaUFCSUFOQkFtcHFMUUFBY2tFSUlBSnJka0VJZGtIL0FYRkJCMm9oQlNBSElBWTJBZ0FnQ0NBQ05nSUFEQUlMSUFFZ0EwRUJhbW90QUFCQkNIUWdBU0FEYWkwQUFFRVFkSElnQVNBRFFRSnFJZ0ZxTFFBQWNrRUlJQUpyZGtILy93TnhJUVVnQnlBQk5nSUFJQWdnQWpZQ0FDQUZSUVJBUVFBaEJVRUFJUU1NQXdzTEMwRUFJQVZCSUVzRWZ5QUZCVUVnQ3hCWElnTkZCRUJCclBVQ0VGWkJBQ0VEQ3lBRlFYOXFJUXdnQUVIc0FHb2hEVUVBSVFZZ0FFSG9BR29pQ2lnQ0FDRUJJQWNvQWdBaEFnTkFJQUlnQVVGL2FrNEVRQ0FCSUFKcklnUkJBRWdFZjBFQUJTQUNRWUNBQVVvRVFDQUVRUUJLQkVBZ0NTZ0NBQ0lCSUFFZ0Ftb2dCQkJkR2dzZ0IwRUFOZ0lBSUFvZ0JEWUNBQ0FFSVFFTElBQW9BZ0FoQWlBSktBSUFJQUZxSVFSQkFDUUZRUnNnQWlBRVFZQ0FBaUFCYXhBSElRUWpCU0VCUVFBa0JTQUJRUUZ4RFFVZ0NpZ0NBQ0lDSUFScUlRRWdCRUVBU2dSQUlBb2dBVFlDQUFVZ0FpRUJDeUFOSUFGQlltbzJBZ0FnQkVGL1J3c2hBaUFHSUF4SUlBSkJBWE54QkVCQkFDRUFEQVFMSUFjb0FnQWhBZ3NnQXlBR2FpQUpLQUlBSWdRZ0FrRUJhbW90QUFCQkNIUWdCQ0FDYWkwQUFFRVFkSElnQkNBQ1FRSnFhaTBBQUhKQkNDQUlLQUlBSWdScmRrRUlkam9BQUNBSElBUkJDR29pQkVFRGRpQUNhaUlDTmdJQUlBZ2dCRUVIY1RZQ0FDQUdRUUZxSWdZZ0JVZ05BQXNMUVFBa0JVRUdJQUFnQ3lBRElBVVFDQ0VBSXdVaEFVRUFKQVVnQVVFQmNRMEJDeUFEUlFSQUlBQVBDeUFERUZJZ0FBOExFQmNoQUNBRFJRUkFJQUFRSGdzZ0F4QlNJQUFRSGtFQUM0Y0RBUWQvQWtBZ0FFSEFzUUpxSWdNUWNTSUVRWDlHRFFBZ0JFRUhjVUVCYWlFQkFrQUNRQUpBQWtBQ1FBSkFBa0FDUUNBRVFRZHhRUVpyRGdJQUFRSUxJQU1RY1NJQ1FYOUhCRUFnQWtFSGFpRUJEQU1MREFjTElBTVFjU0lDUVg5R0RRWWdBeEJ4SWdGQmYwY0VRQ0FCSUFKQkNIUnFJUUVNQWdzTUJnc01BUXNnQVVVRVFFRUFJUUZCQUNFQ0RBSUxDMEVBSUFGQklFc0VmeUFCQlVFZ0N4QlhJZ0pGQkVCQnJQVUNFRlpCQUNFQ0N5QUJRUUJLQkVBRFFBSkFRUUFrQlVFVUlBTVFCU0VHSXdVaEIwRUFKQVVnQjBFQmNRMEZJQVpCZjBZTkFDQUNJQVZxSUFZNkFBQWdCVUVCYWlJRklBRklEUUVNQXdzTFFRQWtCVUVqSUFNUURDTUZJUUZCQUNRRklBRkJBWEVOQXlBQVFjak1BMnBCQURZQ0FFRUFJUUFNQWdzTFFRQWtCVUVHSUFBZ0JDQUNJQUVRQ0NFQUl3VWhBVUVBSkFVZ0FVRUJjUTBCQ3lBQ1JRUkFJQUFQQ3lBQ0VGSWdBQThMRUJjaEFDQUNSUVJBSUFBUUhnc2dBaEJTSUFBUUhrRUFEd3NnQXhDV0FTQUFRY2pNQTJwQkFEWUNBRUVBQzZFaEFTcC9RY1MxQXlnQ0FFVUVRQU5BSUFOQkVVWUVmMEVTQlNBREN5SUlRZjhCY1NFRFFRRWdDSFFoRGlBQ1FkeUFCR29nQXlBSVFRSjBRWXdiYWlnQ0FDSUpRUUZLQkg4Z0NRVkJBUXNRVkJwQkFDRUhJQW9oQXdOQUlBSkJBblJCd0xVRGFpQUROZ0lBSUFKQkFXb2hBaUFESUE1cUlRTWdCMEVCYWlJSElBbElEUUFMSUFoQkFXb2lCMEVUUndSQUlBTWhDaUFISVFNTUFRc0xDeUFBUWNpWUFXb2lIVUVCT2dBQUFrQWdBRUc0bUFGcUloNHNBQUFFUUNBQVFlZ0FhaUVKSUFCQkVHb2hEaUFBSVFvZ0FFRUlhaUVJSUFCQndKZ0JhaUVhSUFCQkJHb2hCd1VnQVVVRVFDQUFRWVFCYWtFQVFaeVZBUkJVR2lBQVFjUUFhaUlDUWdBM0FnQWdBa0lBTndJSUlBSkNBRGNDRUNBQ1FnQTNBaGdnQWtFQU5nSWdJQUJCb0pZQmFpQUFRY3pOQTJvb0FnQWlBa0dBZ0lBQ1NRUi9JQUlGUVlDQWdBSUxJQUJCME0wRGFpZ0NBSEUyQWdBTElBQkJBRFlDT0NBQVFRaHFJZ2hCQURZQ0FDQUFRUVJxSWdkQkFEWUNBQ0FBUWNDWUFXb2lHa0lBTndNQUlBQkI2QUJxSWdKQ0FEY0RBQ0FDUWdBM0F3Z2dBa0lBTndNUUlBSkJBRFlDR0NBQVFYODJBbkFnQVVVRVFDQUFRY0N1QW1wQkFEWUNBQ0FBUWNTdUFtcEJBRFlDQUNBQVFiaXVBbXBCQURZQ0FDQUFRYnl1QW1wQkFUWUNBQ0FBUWNpdUFtcEJBRUh3QWhCVUdpQUFRWVN2QVdwQkFFRzAvd0FRVkJvZ0FFSE16QU5xUVFBNkFBQWdBRUcweVFOcVFRQkJsQU1RVkJvZ0FFR3d5UU5xUVFJMkFnQWdBRUhJekFOcVFRQTJBZ0FMSUFBZ0FSQ0RBU0FDS0FJQUlnb2dCeWdDQUNJSmF5SURRUUJJQkVBUEN5QUpRWUNBQVVvRVFDQURRUUJLQkVBZ0FDZ0NFQ0lLSUFvZ0NXb2dBeEJkR2dzZ0IwRUFOZ0lBSUFJZ0F6WUNBQVVnQ2lFREN5QUFLQUlBSUFCQkVHb2lEaWdDQUNBRGFrR0FnQUlnQTJzUVhpRURJQUlvQWdBaUNTQURhaUVLSUFOQkFFb0VRQ0FDSUFvMkFnQWdBQ0FLUVdKcU5nSnNCU0FBSUFsQlltbzJBbXdnQTBGL1JnUkFEd3NMSUFFRVFDQUFRY3pNQTJvc0FBQUVRQ0FDSVFrZ0FDRUtEQU1MQ3lBQUVOc0JCRUFnQWlFSklBQWhDZ1VQQ3dzTElBQkIwTTBEYWlFUklBQkI0QUJxSVFzZ0FFSHNBR29oRnlBQVFlUUFhaUVmSUFCQnlNd0RhaUVTSUFCQndMRUNhaUVNSUFCQnNNa0RhaUVnSUFCQnBKWUJhaUVUSUFCQmlBSnFJU0VnQUVIMEgyb2hJaUFBUWN3QWFpRVVJQUJCMEFCcUlSc2dBRUhJQUdvaEZTQUFRY1FBYWlFUElBQkIyQUJxSVJZZ0FFRzhzUUpxSVJnZ0FFRzRzUUpxSVJrZ0FFSGdQV29oSXlBQVFkdzhhaUVrSUFCQjhCNXFJU1VnQUVITTJ3QnFJU1lnQUVISTJnQnFJU2NnQUVITXpRTnFJU2dnQUVITXpBTnFJUndnQUVHRUFXb2hLU0FBUWJDWUFXb2hLa0VBSVFFQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQTBBQ1FDQUxJQXNvQWdBZ0VTZ0NBSEUyQWdBZ0J5Z0NBQ0lFSUJjb0FnQktCRUFnQ1NnQ0FDSURJQVJySWdKQkFFZ05BU0FFUVlDQUFVb0VRQ0FDUVFCS0JFQWdEaWdDQUNJRElBTWdCR29nQWhCZEdnc2dCMEVBTmdJQUlBa2dBallDQUFVZ0F5RUNDeUFLS0FJQUlBNG9BZ0FnQW1wQmdJQUNJQUpyRUY0aEFpQUpLQUlBSWdRZ0Ftb2hBeUFDUVFCS0JFQWdDU0FETmdJQUlCY2dBMEZpYWpZQ0FBVWdGeUFFUVdKcU5nSUFJQUpCZjBZTkFnc0xJQjhvQWdBaUFpQUxLQUlBSWdOR0lBSWdBMnNnRVNnQ0FIRkJnd0pMY2tVRVFDQUFFS1VDSUJvcEF3QWdLaWtEQUZVTkNTQWVMQUFBRFFNTElCSW9BZ0JCQVVZRVFDQU1FSEVpQWtGL1JnMEVJQUlnSUNnQ0FFWUVRQUpBQWtBQ1FBSkFBa0FDUUFKQUlBd1FjVUYvYXc0SEFRSUdBQVFGQXdZTERBZ0xEQXNMSUFBUTJ3RkZEUVlNQndzZ0RCQnhJZ0pCZjBZTkN5QUFJQUpCQkdwQkFSQjJEQVlMSUFBUWdBUkZEUVFNQlFzZ0RCQnhJZ0pCZjBZTkNDQU1FSEVpQTBGL1JnMElJQXdRY1NJRVFYOUdEUWdnREJCeElnRkJmMFlOQ0NBQUlBRkIvd0Z4SWdGQklHb2dCRUgvQVhFZ0EwSC9BWEVnQWtIL0FYRkJDSFJ5UVFoMGNrRUNhaEIyREFRTEN5QVRLQUlBSVFNZ0N5QUxLQUlBSWdSQkFXbzJBZ0FnQXlBRWFpQUNPZ0FBREFJTElBNG9BZ0FpQmlBSEtBSUFJZ05CQVdwcUxRQUFRUWgwSUFZZ0Eyb3RBQUJCRUhSeUlBWWdBMEVDYW1vdEFBQnlRUWdnQ0NnQ0FDSUVhM1pCL3Y4RGNTSUZJQUJCaUFGcUlDRW9BZ0FpQWtFQ2RHb29BZ0JKQkVBZ0J5QUVJQUJCakFKcUlBVkJFQ0FDYTNZaUJHb3RBQUJxSWdWQkEzWWdBMm9pQWpZQ0FDQUlJQVZCQjNFaUF6WUNBQ0FBUVl3S2FpQUVRUUYwYWlFRkJRTkFBa0FnQWtFQmFpSUNRUTlQQkVCQkR5RUNEQUVMSUFVZ0FFR0lBV29nQWtFQ2RHb29BZ0JQRFFFTEN5QUhJQUlnQkdvaUJFRURkaUFEYWlJRE5nSUFJQWdnQkVFSGNTSUVOZ0lBSUFCQmpCcHFJQVVnQUNBQ1FRSjBhaWdDaEFGclFSQWdBbXQySUFCQnlBRnFJQUpCQW5ScUtBSUFhaUlDSUNrb0FnQlBCSDlCQUFVZ0FndEJBWFJxSVFVZ0F5RUNJQVFoQXdzZ0JTNEJBQ0lGUWYvL0EzRkJnQUpJQkVBZ0V5Z0NBQ0VDSUFzZ0N5Z0NBQ0lEUVFGcU5nSUFJQUlnQTJvZ0JUb0FBQXdDQ3lBRlFmLy9BM0VoQkNBRlFmLy9BM0ZCamdKTUJFQUNRQUpBQWtBQ1FDQUZRWUFDYXc0REFBRUNBd3NnQmlBQ1FRRnFhaTBBQUVFSWRDQUdJQUpxTFFBQVFSQjBjaUFHSUFKQkFtcHFMUUFBY2tFSUlBTnJkaUlFUVlDQUFuRkZEUXNnQnlBRFFRRnFJZ05CQTNZZ0FtbzJBZ0FnQ0NBRFFRZHhOZ0lBSUJ4QkFEb0FBQ0FBRU5zQlJRMEVEQVVMSUFBUS93TkZEUU1NQkFzZ0ZpZ0NBQ0lDUlEwRElBQWdBaUFQS0FJQUVIWU1Bd3NnQlVILy93TnhRWWNDVGdSQUlBUkIrWDFxSWdWQndURnFMUUFBSVFRZ0JVRzVNV290QUFCQkFXb2dCaUFDUVFGcWFpMEFBRUVJZENBR0lBSnFMUUFBUVJCMGNpQUdJQUpCQW1wcUxRQUFja0VJSUFOcmRrSC8vd054UVJBZ0JHdDJhaUVGSUFjZ0F5QUVhaUlEUVFOMklBSnFOZ0lBSUFnZ0EwRUhjVFlDQUNBYklCUW9BZ0EyQWdBZ0ZDQVZLQUlBTmdJQUlCVWdEeWdDQURZQ0FDQVBJQVUyQWdBZ0ZrRUNOZ0lBSUFzb0FnQWlBaUFGYXlJRElDZ29BZ0JCLzE5cUlnUkpJQUlnQkVseEJFQWdFeWdDQUNJRUlBTnFJUU1nQ3lBQ1FRSnFOZ0lBSUFRZ0Ftb2lBaUFETEFBQU9nQUFJQUlnQXl3QUFUb0FBUVVnRXlnQ0FDSUVJQUpxSUFRZ0F5QVJLQUlBY1dvc0FBQTZBQUFnQ3lBTEtBSUFRUUZxSUJFb0FnQWlBbkVpQkRZQ0FDQVRLQUlBSWdVZ0JHb2dCU0FEUVFGcUlBSnhhaXdBQURvQUFDQUxJQXNvQWdCQkFXb2dFU2dDQUhFMkFnQUxEQU1MSUFCQnhBQnFJQVJCL1gxcUlnUkJBblJxS0FJQUlSQWdCVUgvL3dOeFFZTUNTZ1IvSUFRaEFnTkFJQUJCeEFCcUlBSkJBblJxSUFCQnhBQnFJQUpCZjJvaUEwRUNkR29vQWdBMkFnQWdBa0VCU2dSQUlBTWhBZ3dCQ3dzZ0RpZ0NBQ0VHSUFnb0FnQWhBeUFIS0FJQUJTQUNDeUVFSUE4Z0VEWUNBQ0FHSUFSQkFXcHFMUUFBUVFoMElBWWdCR290QUFCQkVIUnlJQVlnQkVFQ2Ftb3RBQUJ5UVFnZ0EydDJRZjcvQTNFaUJTQUFRY3phQUdvZ0ppZ0NBQ0lDUVFKMGFpZ0NBRWtFUUNBSElBTWdBRUhRMndCcUlBVkJFQ0FDYTNZaUJXb3RBQUJxSWdOQkEzWWdCR29pQWpZQ0FDQUlJQU5CQjNFaUF6WUNBQ0FBUWREakFHb2dCVUVCZEdvaEJRVURRQUpBSUFKQkFXb2lBa0VQVHdSQVFROGhBZ3dCQ3lBRklBQkJ6Tm9BYWlBQ1FRSjBhaWdDQUU4TkFRc0xJQWNnQWlBRGFpSU5RUU4ySUFScUlnTTJBZ0FnQ0NBTlFRZHhJZ1EyQWdBZ0FFSFE4d0JxSUFVZ0FDQUNRUUowYWtISTJnQnFLQUlBYTBFUUlBSnJkaUFBUVl6YkFHb2dBa0VDZEdvb0FnQnFJZ0lnSnlnQ0FFOEVmMEVBQlNBQ0MwRUJkR29oQlNBRElRSWdCQ0VEQ3lBRkx3RUFJZ1ZCMFRCcUxRQUFRUUpxSVFRZ0JVSHRNR290QUFBaERTQUZRWGhxUVJSSkJFQWdCaUFDUVFGcWFpMEFBRUVJZENBR0lBSnFMUUFBUVJCMGNpQUdJQUpCQW1wcUxRQUFja0VJSUFOcmRrSC8vd054UVJBZ0RXdDJJQVJxSVFRZ0J5QURJQTFxSWdOQkEzWWdBbW8yQWdBZ0NDQURRUWR4TmdJQUN5QVdJQVFpQWpZQ0FDQUFJQUlnRUJCMkRBSUxJQVJCOFgxcUlnVkIwVEJxTFFBQVFRTnFJUkFnQlVIdE1Hb3RBQUFoQlNBRVFlbDlha0VVU1FSQUlBWWdBa0VCYW1vdEFBQkJDSFFnQmlBQ2FpMEFBRUVRZEhJZ0JpQUNRUUpxYWkwQUFISkJDQ0FEYTNaQi8vOERjVUVRSUFWcmRpQVFhaUVRSUFjZ0F5QUZhaUlEUVFOMklBSnFJZ1EyQWdBZ0NDQURRUWR4SWdNMkFnQUZJQUloQkFzZ0JpQUVRUUZxYWkwQUFFRUlkQ0FHSUFScUxRQUFRUkIwY2lBR0lBUkJBbXBxTFFBQWNrRUlJQU5yZGtIKy93TnhJZ1VnQUVIMEhtb2dJaWdDQUNJQ1FRSjBhaWdDQUVrRVFDQUhJQU1nQUVINEgyb2dCVUVRSUFKcmRpSUZhaTBBQUdvaUEwRURkaUFFYWlJQ05nSUFJQWdnQTBFSGNTSUROZ0lBSUFCQitDZHFJQVZCQVhScUlRVUZBMEFDUUNBQ1FRRnFJZ0pCRDA4RVFFRVBJUUlNQVFzZ0JTQUFRZlFlYWlBQ1FRSjBhaWdDQUU4TkFRc0xJQWNnQWlBRGFpSU5RUU4ySUFScUlnTTJBZ0FnQ0NBTlFRZHhJZ1EyQWdBZ0FFSDROMm9nQlNBQUlBSkJBblJxUWZBZWFpZ0NBR3RCRUNBQ2EzWWdBRUcwSDJvZ0FrRUNkR29vQWdCcUlnSWdKU2dDQUU4RWYwRUFCU0FDQzBFQmRHb2hCU0FESVFJZ0JDRURDeUFGTHdFQUlpc2lCVUVDZEVIQXRRTnFLQUlBUVFGcUlRUWdCVUhjZ0FScUxBQUFJZ1ZCL3dGeElRMENmeUFGQkg4Z0swRUpUQVJBSUFZZ0FrRUJhbW90QUFCQkNIUWdCaUFDYWkwQUFFRVFkSElnQmlBQ1FRSnFhaTBBQUhKQkNDQURhM1pCLy84RGNVRVFJQTFyZGlBRWFpRUVJQWNnQXlBTmFpSURRUU4ySUFKcU5nSUFJQWdnQTBFSGNUWUNBQ0FFREFJTElBVkIvd0Z4UVFSS0JFQWdCaUFDUVFGcWFpMEFBRUVJZENBR0lBSnFMUUFBUVJCMGNpQUdJQUpCQW1wcUxRQUFja0VJSUFOcmRrSC8vd054UVJRZ0RXdDJRUVIwSUFScUlRVWdCeUFOUVh4cUlBTnFJZ05CQTNZZ0Ftb2lCRFlDQUNBSUlBTkJCM0VpQXpZQ0FBVWdCQ0VGSUFJaEJBc2dHQ2dDQUNJQ1FRQktCRUFnR0NBQ1FYOXFOZ0lBSUJrb0FnQWdCV29NQWdzZ0JpQUVRUUZxYWkwQUFFRUlkQ0FHSUFScUxRQUFRUkIwY2lBR0lBUkJBbXBxTFFBQWNrRUlJQU5yZGtIKy93TnhJZ1lnQUVIZ1BHb2dJeWdDQUNJQ1FRSjBhaWdDQUVrRWZ5QUhJQU1nQUVIa1BXb2dCa0VRSUFKcmRpSUNhaTBBQUdvaUEwRURkaUFFYWpZQ0FDQUlJQU5CQjNFMkFnQWdBRUhreFFCcUlBSkJBWFJxQlFOQUFrQWdBa0VCYWlJQ1FROVBCRUJCRHlFQ0RBRUxJQVlnQUVIZ1BHb2dBa0VDZEdvb0FnQlBEUUVMQ3lBSElBSWdBMm9pQTBFRGRpQUVhallDQUNBSUlBTkJCM0UyQWdBZ0FFSGsxUUJxSUFZZ0FDQUNRUUowYWtIY1BHb29BZ0JyUVJBZ0FtdDJJQUJCb0QxcUlBSkJBblJxS0FJQWFpSUNJQ1FvQWdCUEJIOUJBQVVnQWd0QkFYUnFDeUlDTGdFQUlnTkIvLzhEY1NFQ0lBTkJFRVlFUUNBWVFRODJBZ0FnR1NnQ0FDRUNCU0FaSUFJMkFnQUxJQUlnQldvRklBUUxDeUlDUWY4L1N5RURJQUpCLy84UFN3Ui9RUUlGUVFFTElRUWdHeUFVS0FJQU5nSUFJQlFnRlNnQ0FEWUNBQ0FWSUE4b0FnQTJBZ0FnRHlBQ05nSUFJQllnQXdSL0lBUUZRUUFMSUJCcUlnTTJBZ0FnQUNBRElBSVFkZ3dCQ3dzTUJ3c2dIVUVBT2dBQUR3c2dEQkNXQVNBU1FRQTJBZ0FNQlFzZ0RCQ1dBU0FTUVFBMkFnQU1CQXNnREJDV0FTQVNRUUEyQWdBTUF3c2dEQkNXQVNBU1FRQTJBZ0FNQWdzZ0J5QURRUUpxSWdGQkEzWWdBbW8yQWdBZ0NDQUJRUWR4TmdJQUlCd2dCRUVPZGtFQmNVRUJjem9BQUF3QkN3OExJQUFRcFFJTDVnVUJCMzhnQUNnQ2FDQUFRUVJxSWdNb0FnQWlCRUVGYWtnRVFBOExJQUJCdUs0Q2FpZ0NBQVJBSUFBZ0FFSEFyZ0pxS0FJQUlnSkI3QjFzYWtHSXNBRnFLQUlBSVFFZ0FDZ0NFQ0lGSUFSQkFXcHFMUUFBUVFoMElBVWdCR290QUFCQkVIUnlJQVVnQkVFQ2Ftb3RBQUJ5UVFnZ0FFRUlhaUlHS0FJQUlnZHJka0grL3dOeElnVWdBQ0FDUWV3ZGJHcEJpSzhCYWlBQlFRSjBhaWdDQUVrRWZ5QURJQWNnQUNBQ1Fld2RiR3BCakxBQmFpQUZRUkFnQVd0MklnRnFMUUFBYWlJRFFRTjJJQVJxTmdJQUlBWWdBMEVIY1RZQ0FDQUFJQUpCN0Ixc2FrR011QUZxSUFGQkFYUnFCUU5BQWtBZ0FVRUJhaUlCUVE5UEJFQkJEeUVCREFFTElBVWdBQ0FDUWV3ZGJHcEJpSzhCYWlBQlFRSjBhaWdDQUU4TkFRc0xJQU1nQVNBSGFpSURRUU4ySUFScU5nSUFJQVlnQTBFSGNUWUNBQ0FBSUFKQjdCMXNha0dNeUFGcUlBVWdBQ0FDUWV3ZGJHb2dBVUVDZEdwQmhLOEJhaWdDQUd0QkVDQUJhM1lnQUNBQ1Fld2RiR3BCeUs4QmFpQUJRUUowYWlnQ0FHb2lBU0FBUVlTdkFXb2dBa0hzSFd4cUtBSUFUd1IvUVFBRklBRUxRUUYwYWdzaUFTNEJBRUdBQWtjRVFBOExCU0FBS0FJUUlnRWdCRUVCYW1vdEFBQkJDSFFnQVNBRWFpMEFBRUVRZEhJZ0FTQUVRUUpxYWkwQUFISkJDQ0FBUVFocUlnVW9BZ0FpQm10MlFmNy9BM0VpQWlBQVFZZ0JhaUFBS0FLSUFpSUJRUUowYWlnQ0FFa0VmeUFESUFZZ0FFR01BbW9nQWtFUUlBRnJkaUlCYWkwQUFHb2lBa0VEZGlBRWFqWUNBQ0FGSUFKQkIzRTJBZ0FnQUVHTUNtb2dBVUVCZEdvRkEwQUNRQ0FCUVFGcUlnRkJEMDhFUUVFUElRRU1BUXNnQWlBQVFZZ0JhaUFCUVFKMGFpZ0NBRThOQVFzTElBTWdBU0FHYWlJRFFRTjJJQVJxTmdJQUlBVWdBMEVIY1RZQ0FDQUFRWXdhYWlBQ0lBQWdBVUVDZEdvb0FvUUJhMEVRSUFGcmRpQUFRY2dCYWlBQlFRSjBhaWdDQUdvaUFTQUFLQUtFQVU4RWYwRUFCU0FCQzBFQmRHb0xJZ0V1QVFCQmpRSkhCRUFQQ3dzZ0FCQzBBUm9Mc0F3QkYzOENRQ0FBSUFCQndLNENhaWdDQUNJQ1Fkd0FiR3BCbks4Q2FpSVdJQllvQWdCQkFXbzJBZ0FnQUNBQ1Fkd0FiR3BCNks0Q2FpSUpJQUFnQWtIY0FHeHFRZVN1QW1vaUF5Z0NBQ0lNTmdJQUlBTWdBQ0FDUWR3QWJHcEI0SzRDYWlJREtBSUFJZ28yQWdBZ0F5QUFJQUpCM0FCc2FrSHNyZ0pxSWhnb0FnQWlCQ0FBSUFKQjNBQnNha0hjcmdKcUlnTW9BZ0JySWdzMkFnQWdBeUFFTmdJQUlBQkJ5SzRDYWlBQ1Fkd0FiR29pRHlnQ0FDQUViQ0FBSUFKQjNBQnNha0dncndKcUloY29BZ0JCQTNScUlBc2dBQ0FDUWR3QWJHcEJ6SzRDYWlJUUtBSUFiR29nQ2lBQUlBSkIzQUJzYWtIUXJnSnFJaEVvQWdCc2FpQU1JQUFnQWtIY0FHeHFRZFN1QW1vaUVpZ0NBR3hxSUFCQnhLNENhaUlOS0FJQUlBQWdBa0hjQUd4cVFkaXVBbW9pRXlnQ0FHeHFRUU4yUWY4QmNTQUJheUVEUVFBZ0FVRVlkQ0lPUVJWMUlnRnJJUWdnQUNBQ1Fkd0FiR3BCOEs0Q2FpSVVJQlFvQWdBZ0RrR0FnSUIvU2dSL0lBRUZJQWdMYWpZQ0FFRUFJQUVnQkdzaUNHc2hCeUFBSUFKQjNBQnNha0gwcmdKcUlnNGdDRUYvU2dSL0lBZ0ZJQWNMSUE0b0FnQnFOZ0lBUVFBZ0JDQUJhaUlJYXlFSElBQWdBa0hjQUd4cVFmaXVBbW9pQkNBSVFYOUtCSDhnQ0FVZ0J3c2dCQ2dDQUdvMkFnQkJBQ0FCSUF0cklnZHJJUVVnQUNBQ1Fkd0FiR3BCL0s0Q2FpSUlJQWRCZjBvRWZ5QUhCU0FGQ3lBSUtBSUFhallDQUVFQUlBc2dBV29pQjJzaEJTQUFJQUpCM0FCc2FrR0Fyd0pxSWdzZ0IwRi9TZ1IvSUFjRklBVUxJQXNvQWdCcU5nSUFRUUFnQVNBS2F5SUZheUVHSUFBZ0FrSGNBR3hxUVlTdkFtb2lCeUFGUVg5S0JIOGdCUVVnQmdzZ0J5Z0NBR28yQWdCQkFDQUtJQUZxSWdWcklRWWdBQ0FDUWR3QWJHcEJpSzhDYWlJS0lBVkJmMG9FZnlBRkJTQUdDeUFLS0FJQWFqWUNBRUVBSUFFZ0RHc2lCV3NoQmlBQUlBSkIzQUJzYWtHTXJ3SnFJZ3dnQlVGL1NnUi9JQVVGSUFZTElBd29BZ0JxTmdJQVFRQWdDU2dDQUNBQmFpSUpheUVHSUFBZ0FrSGNBR3hxUVpDdkFtb2lCU0FKUVg5S0JIOGdDUVVnQmdzZ0JTZ0NBR28yQWdCQkFDQUJJQTBvQWdCcklnWnJJUlVnQUNBQ1Fkd0FiR3BCbEs4Q2FpSUpJQVpCZjBvRWZ5QUdCU0FWQ3lBSktBSUFhallDQUVFQUlBMG9BZ0FnQVdvaUFXc2hGU0FBSUFKQjNBQnNha0dZcndKcUlnWWdBVUYvU2dSL0lBRUZJQlVMSUFZb0FnQnFOZ0lBSUJnZ0F5QVhLQUlBYTBFWWRFRVlkU0lBTmdJQUlBMGdBRFlDQUNBWElBTTJBZ0FnRmlnQ0FFRWZjUTBBSUJRb0FnQWhBaUFVUVFBMkFnQWdEaWdDQUNJQklBSkpJZ0JGQkVBZ0FpRUJDeUFPUVFBMkFnQWdCQ2dDQUNJQ0lBRkpJZzBFUUNBQ0lRRUxJQTBFUUVFQ0lRQUxJQVJCQURZQ0FDQUlLQUlBSWdJZ0FVa2lCQVJBSUFJaEFRc2dCQVJBUVFNaEFBc2dDRUVBTmdJQUlBc29BZ0FpQWlBQlNTSUVCRUFnQWlFQkN5QUVCRUJCQkNFQUN5QUxRUUEyQWdBZ0J5Z0NBQ0lDSUFGSklnUUVRQ0FDSVFFTElBUUVRRUVGSVFBTElBZEJBRFlDQUNBS0tBSUFJZ0lnQVVraUJBUkFJQUloQVFzZ0JBUkFRUVloQUFzZ0NrRUFOZ0lBSUF3b0FnQWlBaUFCU1NJRUJFQWdBaUVCQ3lBRUJFQkJCeUVBQ3lBTVFRQTJBZ0FnQlNnQ0FDSUNJQUZKSWdRRVFDQUNJUUVMSUFRRVFFRUlJUUFMSUFWQkFEWUNBQ0FKS0FJQUlnSWdBVWtpQkVVRVFDQUJJUUlMSUFRRVFFRUpJUUFMSUFsQkFEWUNBQ0FHS0FJQUlBSkpCRUJCQ2lFQUN5QUdRUUEyQWdBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFJQUJCQVdzT0NnQUJBZ01FQlFZSENBa0tDeUFQS0FJQUlnQkJiMHdOQ2lBUElBQkJmMm8yQWdBTUNnc2dEeWdDQUNJQVFSQk9EUWtnRHlBQVFRRnFOZ0lBREFrTElCQW9BZ0FpQUVGdlRBMElJQkFnQUVGL2FqWUNBQXdJQ3lBUUtBSUFJZ0JCRUU0TkJ5QVFJQUJCQVdvMkFnQU1Cd3NnRVNnQ0FDSUFRVzlNRFFZZ0VTQUFRWDlxTmdJQURBWUxJQkVvQWdBaUFFRVFUZzBGSUJFZ0FFRUJhallDQUF3RkN5QVNLQUlBSWdCQmIwd05CQ0FTSUFCQmYybzJBZ0FNQkFzZ0VpZ0NBQ0lBUVJCT0RRTWdFaUFBUVFGcU5nSUFEQU1MSUJNb0FnQWlBRUZ2VEEwQ0lCTWdBRUYvYWpZQ0FBd0NDeUFUS0FJQUlnQkJFRTROQVNBVElBQkJBV28yQWdBTUFRc2dBMEgvQVhFUEN5QURRZjhCY1F1dElBSWpmd0YrSUFCQnVKZ0JhaUlaTEFBQUJFQWdBQ0FBS0FKa05nSmdJQUJCc0pnQmFpSUJJUWtnQVNrREFDRWxCU0FCUlFSQUlBQkJoQUZxUVFCQm5KVUJFRlFhSUFCQnhBQnFJZ2RDQURjQ0FDQUhRZ0EzQWdnZ0IwSUFOd0lRSUFkQ0FEY0NHQ0FIUVFBMkFpQWdBRUdnbGdGcUlBQkJ6TTBEYWlnQ0FDSUhRWUNBZ0FKSkJIOGdCd1ZCZ0lDQUFnc2dBRUhRelFOcUtBSUFjVFlDQUFzZ0FFRUFOZ0k0SUFCQkFEWUNDQ0FBUVFScUlnbEJBRFlDQUNBQVFjQ1lBV3BDQURjREFDQUFRZWdBYWlJRVFnQTNBd0FnQkVJQU53TUlJQVJDQURjREVDQUVRUUEyQWhnZ0FFSHdBR29pQmtGL05nSUFJQUZGQkVBZ0FFSEFyZ0pxUVFBMkFnQWdBRUhFcmdKcVFRQTJBZ0FnQUVHNHJnSnFRUUEyQWdBZ0FFRzhyZ0pxUVFFMkFnQWdBRUhJcmdKcVFRQkI4QUlRVkJvZ0FFR0Vyd0ZxUVFCQnRQOEFFRlFhSUFCQnpNd0Rha0VBT2dBQUlBQkJ0TWtEYWtFQVFaUURFRlFhSUFCQnNNa0Rha0VDTmdJQUlBQkJ5TXdEYWtFQU5nSUFDeUFBSUFFUWd3RWdCQ2dDQUNJSElBa29BZ0FpQTJzaUFrRUFTQVJBRHdzZ0JpQUFRZmdBYWlJRktBSUFJQU5ySUFZb0FnQnFOZ0lBSUFOQmdJQUJTZ1JBSUFKQkFFb0VRQ0FBS0FJUUlnY2dCeUFEYWlBQ0VGMGFDeUFKUVFBMkFnQWdCQ0FDTmdJQUlBSWhCd3NnQjBHQWdBSkdCRUJCQUNFQ1FZQ0FBaUVIQlNBQUtBSUFJQUFvQWhBZ0IycEJnSUFDSUFkckVGNGhBaUFFS0FJQUlnY2dBbW9oQXlBQ1FRQktCRUFnQkNBRE5nSUFJQU1oQndzTElBQkI3QUJxSWdNZ0IwRmlhaUlFTmdJQUlBVWdDU2dDQUNJSE5nSUFJQWRCZjJvZ0JpZ0NBQ0lIYWlFRklBZEJmMGNFUUNBRElBUWdCVWdFZnlBRUJTQUZDellDQUFzZ0FrRi9SZ1JBRHdzZ0FVVUVRQ0FBRUxRQlJRUkFEd3NMSUFCQnNKZ0JhaUlCS1FNQVFuOThJU1VnQVNBbE53TUFJQUVoQ1FzQ1FDQWxRbjlWQkVBZ0FFSFF6UU5xSVJBZ0FFSGdBR29oQnlBQVFRUnFJUW9nQUVIb0FHb2hFeUFBUWZnQWFpRVhJQUJCOEFCcUlSVWdBRUVRYWlFVUlBQkI3QUJxSVJnZ0FFSGtBR29oQVNBQVFiaXVBbW9oR2lBQVFRaHFJUXNnQUVHSUFtb2hHeUFBUWFTV0FXb2hEaUFBUWZRZmFpRWNJQUJCMUFCcUlRMGdBRUhjQUdvaEVTQUFRZGdBYWlFU0lBQkI4QjVxSVIwZ0FFSE0yd0JxSVI0Z0FFSEkyZ0JxSVI4Z0FFSE16UU5xSVNBZ0FFR0VBV29oSVNBQVFjQ3VBbW9oRmlBQVFieXVBbW9oSWlBQVFibVlBV29oSXlBQVFicVlBV29oSkFOQUFrQWdCeUFIS0FJQUlCQW9BZ0FpQW5FaUJUWUNBQ0FLS0FJQUlnUWdFeWdDQUNJRFFXSnFTZ1JBSUFNZ0JHc2lBa0VBU0EwRUlCVWdGeWdDQUNBRWF5QVZLQUlBYWpZQ0FDQUVRWUNBQVVvRVFDQUNRUUJLQkVBZ0ZDZ0NBQ0lESUFNZ0JHb2dBaEJkR2dzZ0NrRUFOZ0lBSUJNZ0FqWUNBQVVnQXlFQ0N5QUNRWUNBQWtZRVFFRUFJUU5CZ0lBQ0lRSUZJQUFvQWdBZ0ZDZ0NBQ0FDYWtHQWdBSWdBbXNRWGlFRElCTW9BZ0FpQWlBRGFpRUZJQU5CQUVvRVFDQVRJQVUyQWdBZ0JTRUNDd3NnR0NBQ1FXSnFJZ1EyQWdBZ0Z5QUtLQUlBSWdJMkFnQWdBa0YvYWlBVktBSUFJZ0pxSVFVZ0FrRi9Sd1JBSUJnZ0JDQUZTQVIvSUFRRklBVUxOZ0lBQ3lBRFFYOUdEUVFnQnlnQ0FDRUZJQkFvQWdBaEFnc2dBU2dDQUNJR0lBVkdJQVlnQldzZ0FuRkJqUUpMY2tVRVFDQWtRUUU2QUFBZ0FDZ0NBQ0VFSUE0b0FnQWdCbW9oQXlBRklBWkpCRUFnQkNBRElBSkJBQ0FHYTNFUVpTQUFLQUlBSUE0b0FnQWdCeWdDQUJCbElDTkJBVG9BQUFVZ0JDQURJQVVnQm1zUVpRc2dBU0FIS0FJQUlnVTJBZ0FnR1N3QUFBMEJDd0pBQWtBZ0dpZ0NBQVJBSUFBZ0ZpZ0NBQ0lHUWV3ZGJHcEJpTEFCYWlnQ0FDRUNJQlFvQWdBaUF5QUtLQUlBSWdSQkFXcHFMUUFBUVFoMElBTWdCR290QUFCQkVIUnlJQU1nQkVFQ2Ftb3RBQUJ5UVFnZ0N5Z0NBQ0lEYTNaQi92OERjU0lGSUFBZ0JrSHNIV3hxUVlpdkFXb2dBa0VDZEdvb0FnQkpCSDhnQ2lBRElBQWdCa0hzSFd4cVFZeXdBV29nQlVFUUlBSnJkaUlEYWkwQUFHb2lBa0VEZGlBRWFqWUNBQ0FMSUFKQkIzRTJBZ0FnQUNBR1Fld2RiR3BCakxnQmFpQURRUUYwYWdVRFFBSkFJQUpCQVdvaUFrRVBUd1JBUVE4aEFnd0JDeUFGSUFBZ0JrSHNIV3hxUVlpdkFXb2dBa0VDZEdvb0FnQlBEUUVMQ3lBS0lBSWdBMm9pQTBFRGRpQUVhallDQUNBTElBTkJCM0UyQWdBZ0FDQUdRZXdkYkdwQmpNZ0JhaUFGSUFBZ0JrSHNIV3hxSUFKQkFuUnFRWVN2QVdvb0FnQnJRUkFnQW10MklBQWdCa0hzSFd4cVFjaXZBV29nQWtFQ2RHb29BZ0JxSWdJZ0FFR0Vyd0ZxSUFaQjdCMXNhaWdDQUU4RWYwRUFCU0FDQzBFQmRHb0xJZ0l1QVFBaUFrR0FBa1lFUUNBQUVMUUJEUUlNQndVZ0FDQUNRZi8vQTNFUWd3UWhCU0FPS0FJQUlRTWdCeUFIS0FJQUlnSkJBV28yQWdBZ0F5QUNhaUFGT2dBQUlCWWdGaWdDQUVFQmFpSUNJQ0lvQWdCR0JIOUJBQVVnQWdzMkFnQWdDU0FKS1FNQVFuOThJaVUzQXdBTEJTQVVLQUlBSWdnZ0NpZ0NBQ0lNUVFGcWFpMEFBRUVJZENBSUlBeHFMUUFBUVJCMGNpQUlJQXhCQW1wcUxRQUFja0VJSUFzb0FnQWlBMnQyUWY3L0EzRWlCaUFBUVlnQmFpQWJLQUlBSWdKQkFuUnFLQUlBU1FSL0lBb2dBeUFBUVl3Q2FpQUdRUkFnQW10MklnUnFMUUFBYWlJQ1FRTjJJQXhxSWdNMkFnQWdDeUFDUVFkeElnSTJBZ0FnQUVHTUNtb2dCRUVCZEdvRkEwQUNRQ0FDUVFGcUlnSkJEMDhFUUVFUElRUU1BUXNnQmlBQVFZZ0JhaUFDUVFKMGFpZ0NBRThOQVNBQ0lRUUxDeUFLSUFRZ0Eyb2lBa0VEZGlBTWFpSUROZ0lBSUFzZ0FrRUhjU0lDTmdJQUlBQkJqQnBxSUFZZ0FDQUVRUUowYWlnQ2hBRnJRUkFnQkd0MklBQkJ5QUZxSUFSQkFuUnFLQUlBYWlJRUlDRW9BZ0JQQkg5QkFBVWdCQXRCQVhScUN5SUVMZ0VBSWdSQi8vOERjVUdBQWtnRVFDQU9LQUlBSVFJZ0J5QUZRUUZxTmdJQUlBSWdCV29nQkRvQUFDQUpJQWtwQXdCQ2Yzd2lKVGNEQUF3REN5QUVRZi8vQTNFaEJpQUVRZi8vQTNGQmpRSktCRUFnQmtIeWZXb2lCRUhSTUdvdEFBQkJBMm9oQlNBRVFlMHdhaTBBQUNFRUlBWkI2bjFxUVJSSkJFQWdDQ0FEUVFGcWFpMEFBRUVJZENBSUlBTnFMUUFBUVJCMGNpQUlJQU5CQW1wcUxRQUFja0VJSUFKcmRrSC8vd054UVJBZ0JHdDJJQVZxSVFVZ0NpQUNJQVJxSWdKQkEzWWdBMm9pQkRZQ0FDQUxJQUpCQjNFaUF6WUNBQVVnQXlFRUlBSWhBd3NnQ0NBRVFRRnFhaTBBQUVFSWRDQUlJQVJxTFFBQVFSQjBjaUFJSUFSQkFtcHFMUUFBY2tFSUlBTnJka0grL3dOeElnd2dBRUgwSG1vZ0hDZ0NBQ0lDUVFKMGFpZ0NBRWtFZnlBS0lBTWdBRUg0SDJvZ0RFRVFJQUpyZGlJR2FpMEFBR29pQWtFRGRpQUVhaUlETmdJQUlBc2dBa0VIY1NJQ05nSUFJQUJCK0NkcUlBWkJBWFJxQlFOQUFrQWdBa0VCYWlJQ1FROVBCRUJCRHlFR0RBRUxJQXdnQUVIMEhtb2dBa0VDZEdvb0FnQlBEUUVnQWlFR0N3c2dDaUFHSUFOcUlnSkJBM1lnQkdvaUF6WUNBQ0FMSUFKQkIzRWlBallDQUNBQVFmZzNhaUFNSUFBZ0JrRUNkR3BCOEI1cUtBSUFhMEVRSUFacmRpQUFRYlFmYWlBR1FRSjBhaWdDQUdvaUJDQWRLQUlBVHdSL1FRQUZJQVFMUVFGMGFnc2lCQzhCQUNJTVFRSjBRY3daYWlnQ0FFRUJhaUVFSUF4QmlURnFMUUFBSVFZZ0RFRjhha0VzU1FSQUlBZ2dBMEVCYW1vdEFBQkJDSFFnQ0NBRGFpMEFBRUVRZEhJZ0NDQURRUUpxYWkwQUFISkJDQ0FDYTNaQi8vOERjVUVRSUFacmRpQUVhaUVFSUFvZ0FpQUdhaUlDUVFOMklBTnFOZ0lBSUFzZ0FrRUhjVFlDQUFzZ0JDSUNRZjgvU3lFR0lBSkIvLzhQU3dSL1FRSUZRUUVMSVFRZ0RTQU5LQUlBSWdOQkFXbzJBZ0FnQUVIRUFHb2dBMEVEY1VFQ2RHb2dBallDQUNBUklBSTJBZ0FnRWlBR0JIOGdCQVZCQUFzZ0JXb2lBellDQUNBSklBa3BBd0FnQTYxOU53TUFJQUFnQXlBQ0VIWU1BZ3NDUUFKQUFrQWdCRUdBQW1zT0RnRUNBZ0lDQWdJQ0FnSUNBZ0lBQWdzZ0FCQzBBUTBEREFnTElCSW9BZ0FoQlNBUktBSUFJUU1nRFNBTktBSUFJZ0pCQVdvMkFnQWdBRUhFQUdvZ0FrRURjVUVDZEdvZ0F6WUNBQ0FSSUFNMkFnQWdFaUFGTmdJQUlBa2dDU2tEQUNBRnJYMDNBd0FnQUNBRklBTVFkZ3dDQ3lBRVFmLy9BM0ZCaFFKT0JFQWdCa0g3ZldvaUJVSEJNV290QUFBaEJDQUZRYmt4YWkwQUFFRUJhaUFJSUFOQkFXcHFMUUFBUVFoMElBZ2dBMm90QUFCQkVIUnlJQWdnQTBFQ2Ftb3RBQUJ5UVFnZ0FtdDJRZi8vQTNGQkVDQUVhM1pxSVFVZ0NpQUNJQVJxSWdKQkEzWWdBMm8yQWdBZ0N5QUNRUWR4TmdJQUlBMGdEU2dDQUNJQ1FRRnFOZ0lBSUFCQnhBQnFJQUpCQTNGQkFuUnFJQVUyQWdBZ0VTQUZOZ0lBSUJKQkFqWUNBQ0FKSUFrcEF3QkNmbnczQXdBZ0J5Z0NBQ0lHSUFWcklnUWdJQ2dDQUVIL1gyb2lBa2tnQmlBQ1NYRUVRQ0FPS0FJQUlnSWdCR29oQXlBSElBWkJBbW8yQWdBZ0FpQUdhaUlDSUFNc0FBQTZBQUFnQWlBRExBQUJPZ0FCQlNBT0tBSUFJZ0lnQm1vZ0FpQUVJQkFvQWdCeGFpd0FBRG9BQUNBSElBY29BZ0JCQVdvZ0VDZ0NBQ0lGY1NJRE5nSUFJQTRvQWdBaUFpQURhaUFDSUFSQkFXb2dCWEZxTEFBQU9nQUFJQWNnQnlnQ0FFRUJhaUFRS0FJQWNUWUNBQXNNQWdzZ0FFSEVBR29nRFNnQ0FDSU1JQVpyUVFOeFFRSjBhaWdDQUNFUElBZ2dBMEVCYW1vdEFBQkJDSFFnQ0NBRGFpMEFBRUVRZEhJZ0NDQURRUUpxYWkwQUFISkJDQ0FDYTNaQi92OERjU0lFSUFCQnpOb0FhaUFlS0FJQUlnVkJBblJxS0FJQVNRUi9JQW9nQWlBQVFkRGJBR29nQkVFUUlBVnJkaUlGYWkwQUFHb2lBa0VEZGlBRGFpSUROZ0lBSUFzZ0FrRUhjU0lDTmdJQUlBQkIwT01BYWlBRlFRRjBhZ1VEUUFKQUlBVkJBV29pQlVFUFR3UkFRUThoQlF3QkN5QUVJQUJCek5vQWFpQUZRUUowYWlnQ0FFOE5BUXNMSUFvZ0JTQUNhaUlDUVFOMklBTnFJZ00yQWdBZ0N5QUNRUWR4SWdJMkFnQWdBRUhROHdCcUlBUWdBQ0FGUVFKMGFrSEkyZ0JxS0FJQWEwRVFJQVZyZGlBQVFZemJBR29nQlVFQ2RHb29BZ0JxSWdVZ0h5Z0NBRThFZjBFQUJTQUZDMEVCZEdvTElnVXZBUUFpQmtIUk1Hb3RBQUJCQW1vaEJTQUdRZTB3YWkwQUFDRUVJQVpCZUdwQkZFa0VRQ0FJSUFOQkFXcHFMUUFBUVFoMElBZ2dBMm90QUFCQkVIUnlJQWdnQTBFQ2Ftb3RBQUJ5UVFnZ0FtdDJRZi8vQTNGQkVDQUVhM1lnQldvaEJTQUtJQUlnQkdvaUFrRURkaUFEYWpZQ0FDQUxJQUpCQjNFMkFnQUxJQVVoQWlBUFFZQUNTd1JBSUE5Qi96OUxJUVVnRDBILy93OUxCSDlCQXdWQkFnc2hBeUFDSUFVRWZ5QURCVUVCQzJvaEFnc2dEU0FNUVFGcU5nSUFJQUJCeEFCcUlBeEJBM0ZCQW5ScUlBODJBZ0FnRVNBUE5nSUFJQklnQWpZQ0FDQUpJQWtwQXdBZ0FxMTlOd01BSUFBZ0FpQVBFSFlNQVFzTUFRc2dDU2tEQUNFbEN5QWxRbjlWRFFFTUF3c0xEd1VnQUVIZ0FHb2hCeUFBUWVRQWFpRUJDd3NnQUJDQ0JDQUhLQUlBSWdRZ0FTZ0NBQ0lHUndSQUlBQkJ1cGdCYWtFQk9nQUFDeUFBS0FJQUlRVWdBRUdrbGdGcUlnSW9BZ0FnQm1vaEF5QUVJQVpKQkVBZ0JTQURJQUJCME0wRGFpZ0NBRUVBSUFacmNSQmxJQUFvQWdBZ0FpZ0NBQ0FIS0FJQUVHVWdBRUc1bUFGcVFRRTZBQUFGSUFVZ0F5QUVJQVpyRUdVTElBRWdCeWdDQURZQ0FBdjVDd0VLZndKQUFrQWdBRUhvcmdGcVFRQTJBZ0FnQUVFRWFpSUZFRmdoQVFKQUlBQkI4SzRCYWlJREtBSUFRUUpHQkVBZ0JVRUJFRlVnQVVILy93Rk5CRUFnQTBFQU5nSUFJQUZCQVhRaEFRd0NDd3dEQ3dzZ0FVRUlkaUVFSUFCQjVLNEJhaUVHSUFCQjJLNEJhaUlIS0FJQVFTVkpCSDlCQUNFQkEwQWdBVUVDZEVIOEVtb29BZ0FoQ0NBQlFRRnFJUUpCZ0g0Z0FVRUJSaUlLQkg4Z0JpZ0NBRUVEYWdVZ0FVRUNkRUc0RTJvb0FnQUxJZ2wxSUFnZ0JITnhCRUFnQWlFQkRBRUxDeUFGSUFvRWZ5QUdLQUlBUVFOcUJTQUJRUUowUWJnVGFpZ0NBQXNpQWhCVklBRUZRUUFoQVFOQUlBRkJBblJCK0JOcUtBSUFJUWdnQVVFQmFpRUNRWUIrSUFGQkEwWWlDZ1IvSUFZb0FnQkJBMm9GSUFGQkFuUkJ0QlJxS0FJQUN5SUpkU0FJSUFSemNRUkFJQUloQVF3QkN3c2dCU0FLQkg4Z0JpZ0NBRUVEYWdVZ0FVRUNkRUcwRkdvb0FnQUxJZ0lRVlNBQkN5SUNRUWhOQkVBZ0EwRUFOZ0lBSUFjZ0J5Z0NBQ0FDYWlJQklBRkJCSFpyTmdJQVFZQWdJQVVRV0VIdy93TnhJZ1pMQkg4Z0JVRUZFRlZCQlNFQlFRQUZRUVVoQVVFQUlRTURRQ0FCUVFGcUlRRWdBMEVCYWlJRVFRSjBRYkFXYWlnQ0FDQUdUUVJBSUFRaEF3d0JDd3NnQlNBQkVGVWdBMEVDZEVHd0Ztb29BZ0FMSVFNZ0FFSEtuQUZxSUFZZ0EydEJFQ0FCYTNZZ0FVRUNkRUhRRm1vb0FnQnFRZjhCY1NJQlFRRjBhaUlGTGdFQUlRTWdBQ0FCUVFGMGFrSEluQUZxSVFRZ0FRUkFJQVVnQkM0QkFEc0JBQ0FFSUFNN0FRQUxJQUJCMUFCcUlnRW9BZ0FoQkNBQklBUkJBV28yQWdBZ0FFSEVBR29nQkVFQ2RHb2dBMEgvL3dOeFFRRnFJZ00yQWdBZ0FTQUJLQUlBUVFOeE5nSUFJQUFnQWtFQ2FpSUJOZ0pZREFFTElBSkJDVVlFUUNBRElBTW9BZ0JCQVdvMkFnQU1BZ3NnQTBFQU5nSUFJQUpCRGtZRVFFR0F3QUlnQlJCWVFmRC9BM0VpQkVzRWZ5QUZRUU1RVlVFRElRRkJBQVZCQXlFQlFRQWhBZ05BSUFGQkFXb2hBU0FDUVFGcUlnTkJBblJCOUJScUtBSUFJQVJOQkVBZ0F5RUNEQUVMQ3lBRklBRVFWU0FDUVFKMFFmUVVhaWdDQUFzaEFpQUJRUUowUVp3VmFpZ0NBRUVGYWlBRUlBSnJRUkFnQVd0MmFpRUJJQVVRV0VFQmRrR0FnQUp5SVFNZ0JVRVBFRlVnQUNBQk5nSllEQUVMSUFCQnhBQnFRUUVnQW1zZ0FFSFVBR29pQ1NnQ0FHcEJBM0ZCQW5ScUtBSUFJUWRCZ0lBQ0lBVVFXRUh3L3dOeElnaExCSDhnQlVFQ0VGVkJBaUVCUVFBRlFRSWhBVUVBSVFNRFFDQUJRUUZxSVFFZ0EwRUJhaUlFUVFKMFFkQVZhaWdDQUNBSVRRUkFJQVFoQXd3QkN3c2dCU0FCRUZVZ0EwRUNkRUhRRldvb0FnQUxJUU1nQWtFS1JpQUlJQU5yUVJBZ0FXdDJJQUZCQW5SQi9CVnFLQUlBYWlJQlFRSnFJZ0pCZ1FKR2NRUkFJQVlnQmlnQ0FFRUJjellDQUE4TElBRkJBMm9oQVNBSFFZQUNTd1IvSUFFRklBSUxJQWNnQUVHQXJ3RnFLQUlBVDJvaEFTQUpJQWtvQWdBaUFrRUJhallDQUNBQVFjUUFhaUFDUVFKMGFpQUhOZ0lBSUFrZ0NTZ0NBRUVEY1RZQ0FDQUFJQUUyQWxnZ0FDQUhOZ0pjSUFCQnNKZ0JhaUlDSUFJcEF3QWdBYTE5TndNQUlBRkZCRUFQQ3lBQVFhU1dBV29oQkNBQVFlQUFhaUlES0FJQUlRSWdBRUhRelFOcUlnVW9BZ0FoQUFOQUlBUW9BZ0FpQmlBQ2FpQUdJQUlnQjJzZ0FIRnFMQUFBT2dBQUlBTWdBeWdDQUVFQmFpQUZLQUlBSWdCeElnSTJBZ0FnQVVGL2FpSUJEUUFMRHdzZ0FDQUROZ0pjSUFCQnNKZ0JhaUlDSUFJcEF3QWdBYTE5TndNQUlBRkZCRUFQQ3lBQVFhU1dBV29oQlNBQVFlQUFhaUlFS0FJQUlRSWdBRUhRelFOcUlnWW9BZ0FoQUFOQUlBVW9BZ0FpQnlBQ2FpQUhJQUlnQTJzZ0FIRnFMQUFBT2dBQUlBUWdCQ2dDQUVFQmFpQUdLQUlBSWdCeElnSTJBZ0FnQVVGL2FpSUJEUUFMRHdzZ0FDZ0NYQ0VFSUFCQnNKZ0JhaUlCSUFFcEF3QWdBQ2dDV0NJQnJYMDNBd0FnQVVVRVFBOExJQUJCcEpZQmFpRUZJQUJCNEFCcUlnTW9BZ0FoQWlBQVFkRE5BMm9pQmlnQ0FDRUFBMEFnQlNnQ0FDSUhJQUpxSUFjZ0FpQUVheUFBY1dvc0FBQTZBQUFnQXlBREtBSUFRUUZxSUFZb0FnQWlBSEVpQWpZQ0FDQUJRWDlxSWdFTkFBc0x4ZzBDRG44RGZpQUJSUVJBSUFCQmhBRnFRUUJCbkpVQkVGUWFJQUJCeEFCcUlnSkNBRGNDQUNBQ1FnQTNBZ2dnQWtJQU53SVFJQUpDQURjQ0dDQUNRUUEyQWlBZ0FFR2dsZ0ZxSUFCQnpNMERhaWdDQUNJQ1FZQ0FnQUpKQkg4Z0FnVkJnSUNBQWdzZ0FFSFF6UU5xS0FJQWNUWUNBQXNnQUVFQU5nSTRJQUJCQURZQ0NDQUFRUVJxSWd4QkFEWUNBQ0FBUWNDWUFXcENBRGNEQUNBQVFlZ0FhaUlIUWdBM0F3QWdCMElBTndNSUlBZENBRGNERUNBSFFRQTJBaGdnQUVId0FHb2lDVUYvTmdJQUlBRUVRQ0FBUVFFUWd3RUZJQUJCd0s0Q2FrRUFOZ0lBSUFCQnhLNENha0VBTmdJQUlBQkJ1SzRDYWtFQU5nSUFJQUJCdks0Q2FrRUJOZ0lBSUFCQnlLNENha0VBUWZBQ0VGUWFJQUJCaEs4QmFrRUFRYlQvQUJCVUdpQUFRY3pNQTJwQkFEb0FBQ0FBUWJUSkEycEJBRUdVQXhCVUdpQUFRYkRKQTJwQkFqWUNBQ0FBUWNqTUEycEJBRFlDQUNBQVFRQVFnd0VnQUVIVXJnRnFJZ0pDQURjQ0FDQUNRZ0EzQWdnZ0FrSUFOd0lRSUFCQjBLNEJha0dBNmdBMkFnQWdBRUdBcndGcVFZSEFBRFlDQUNBQVFmeXVBV3BCZ0FFMkFnQWdBRUg0cmdGcVFZQUJOZ0lBQ3lBQVFmU3VBV29pQ2tFQU5nSUFJQUJCeks0QmFpSU9RUUEyQWdBZ0FFSHNyZ0ZxSWd0QkFEWUNBQ0FBUWZDdUFXcEJBRFlDQUNBSFFRQTJBZ0FnRENnQ0FDSUNRUUJNQkVBZ0NTQUFRZmdBYWlJRktBSUFJQUpySUFrb0FnQnFOZ0lBSUFBb0FnQWdBQ2dDRUVHQWdBSVFYaUVHSUFjb0FnQWlBaUFHYWlFRElBWkJBRW9FUUNBSElBTTJBZ0FnQXlFQ0N5QUFRZXdBYWlJRElBSkJZbW9pQmpZQ0FDQUZJQXdvQWdBaUFqWUNBQ0FDUVg5cUlBa29BZ0FpQW1vaEJTQUNRWDlIQkVBZ0F5QUdJQVZJQkg4Z0JnVWdCUXMyQWdBTEN5QUFRZUFBYWlJSUlBRUVmeUFBS0FKa0JVRUFJUUVEUUNBQVFjcWdBV29nQVVFQmRHb2dBVUVJZEVILy93TnhJZ0k3QVFBZ0FFSEttQUZxSUFGQkFYUnFJQUk3QVFBZ0FFSEtuQUZxSUFGQkFYUnFJQUU3QVFBZ0FFSEtwQUZxSUFGQkFYUnFRUUFnQVd0QkNIUTdBUUFnQVVFQmFpSUJRWUFDUncwQUN5QUFRY3FvQVdwQkFFR0FCaEJVR2tFQUlBQkJ5cUFCYWlBQVFjcXFBV29RbndGQkFBc2lBVFlDQUNBQVFiQ1lBV29pRHlrREFDSVNRbjk4SVJBZ0R5QVFOd01BSUJKQ0FGVUVRQ0FBRU4wQklBcEJDRFlDQUVFUklRUUZJQkFoRVFzRFFBSkFJQVJCRVVZRVFDQVBLUU1BSVJFTElCRkNmMWNOQUNBSUlBZ29BZ0FnQUVIUXpRTnFJZ1lvQWdBaUFuRWlBVFlDQUNBTUtBSUFJZ1FnQnlnQ0FDSURRV0pxU2dSQUlBTWdCR3NpQVVFQVNBMEJJQWtnQUVINEFHb2lCU2dDQUNBRWF5QUpLQUlBYWpZQ0FDQUVRWUNBQVVvRVFDQUJRUUJLQkVBZ0FDZ0NFQ0lDSUFJZ0JHb2dBUkJkR2dzZ0RFRUFOZ0lBSUFjZ0FUWUNBQVVnQXlFQkN5QUJRWUNBQWtZRVFFRUFJUUpCZ0lBQ0lRRUZJQUFvQWdBZ0FDZ0NFQ0FCYWtHQWdBSWdBV3NRWGlFQ0lBY29BZ0FpQVNBQ2FpRURJQUpCQUVvRVFDQUhJQU0yQWdBZ0F5RUJDd3NnQUVIc0FHb2lBeUFCUVdKcUlnUTJBZ0FnQlNBTUtBSUFJZ0UyQWdBZ0FVRi9haUFKS0FJQUlnRnFJUVVnQVVGL1J3UkFJQU1nQkNBRlNBUi9JQVFGSUFVTE5nSUFDeUFDUVg5R0RRRWdDQ2dDQUNFQklBWW9BZ0FoQWdzZ0FFSGtBR29pQlNnQ0FDSU5JQUZHSUEwZ0FXc2dBbkZCalFKTGNrVUVRQ0FBUWJxWUFXcEJBVG9BQUNBQUtBSUFJUVFnQUVHa2xnRnFJZ01vQWdBZ0RXb2hCaUFCSUExSkJFQWdCQ0FHSUFKQkFDQU5hM0VRWlNBQUtBSUFJQU1vQWdBZ0NDZ0NBQkJsSUFCQnVaZ0Jha0VCT2dBQUJTQUVJQVlnQVNBTmF4QmxDeUFGSUFnb0FnQTJBZ0FMSUFzb0FnQUVRQ0FBRU53QlFSRWhCQXdDQ3lBS0lBb29BZ0FpQWtGL2FpSUJOZ0lBSUFKQkFVZ0VmeUFBRU4wQklBcEJCellDQUVFSEJTQUJDeUVDSUE0Z0RpZ0NBQ0lEUVFGMElnRTJBZ0FnQTBHQUFYRUVRQ0FBUWZ5dUFXb29BZ0FnQUVINHJnRnFLQUlBU3dSQUlBQVFwd0lGSUFBUTNBRUxRUkVoQkF3Q0N5QUtJQUpCZjJvMkFnQWdBa0VCU0FSQUlBQVEzUUVnQ2tFSE5nSUFJQTRvQWdBaEFRc2dEaUFCUVFGME5nSUFJQUZCZ0FGeFJRUkFJQUFRaFFSQkVTRUVEQUlMSUFCQi9LNEJhaWdDQUNBQVFmaXVBV29vQWdCTEJFQWdBQkRjQVFVZ0FCQ25BZ3RCRVNFRURBRUxDeUFJS0FJQUlnWWdBRUhrQUdvaUJTZ0NBQ0lMUndSQUlBQkJ1cGdCYWtFQk9nQUFDeUFBS0FJQUlRTWdBRUdrbGdGcUlnRW9BZ0FnQzJvaEFpQUdJQXRKQkVBZ0F5QUNJQUJCME0wRGFpZ0NBRUVBSUF0cmNSQmxJQUFvQWdBZ0FTZ0NBQ0FJS0FJQUVHVWdBRUc1bUFGcVFRRTZBQUFGSUFNZ0FpQUdJQXRyRUdVTElBVWdDQ2dDQURZQ0FBdnVDZ0lZZndGK0lBQkIxQXhxSWdrb0FnQWlBaXdBQUNFTElBSW9BZ1FoQVNBQ0xRQUJJZ0loQmdKQUlBSkIvd0Z4UVI5SUJFQWdBRUhJREdvb0FnQW9BZ3dpQWdSQUlBSkJCR29oQXlBQ0xnRUFRUUZHQkVBZ0EwRUJhaUlITFFBQUlRSWdCeUFDUWY4QmNVRWdTQ0FDUWY4QmNXbzZBQUFnQXlFQ0RBTUxJQUlvQWdnaUFpd0FBQ0FMUndSQUEwQWdBa0VJYWlJSExBQUFJQXRIQkVBZ0J5RUNEQUVMQ3lBQ0xRQUpJQUl0QUFGSUJFQWdCeUVDQlNBSEtRSUFJUmtnQnlBQ0tRSUFOd0lBSUFJZ0dUY0NBQXNMSUFKQkFXb2lCeTBBQUNJRVFmTUFTQVJBSUFjZ0JFSC9BWEZCQW1vNkFBQWdBeUFETHdFQVFRSnFPd0VBQ3dWQkFDRUNDd1ZCQUNFQ0N3c0NRQ0FBUWVBTWFpSUVLQUlBQkVBZ0FFR1FsUUZxSVE0Z0FFSGdsd0ZxSWdNb0FnQWhCeUFESUFkQkFXbzJBZ0FnQnlBTE9nQUFJQU1vQWdBaUJ5QUFRZXlYQVdvb0FnQkpCRUFnQVFSQUlBY2dBVWtFUUNBQklRSUZJQUJCQUNBQ0VLZ0NJZ0pGRFFRTElBUWdCQ2dDQUVGL2FpSUJOZ0lBSUFFRVFDQUFRY2dNYWlJRElRa2dBeWdDQUNFREJTQURJQU1vQWdBZ0FFSFFER29vQWdBZ0FFSElER29pQ1NnQ0FDSURSMEVmZEVFZmRXbzJBZ0FnQWlJSElRSUxCU0FKS0FJQUlBYzJBZ1FnQUVISURHb2lDU2dDQUNJQ0lRTUxJQU12QVFBaUJDRU5Ba0FnQUVIUURHb2lFU2dDQUNJQklBTkhCRUFnQUVHNmxRRnFJUklnQUVIQWxnRnFJUW9nQUVIRWxnRnFJUThnQUVIY0RHb2hFeUFFUWYvL0EzRkJBMG9oRkNBR1FRRjBJUlZCQVNBR2F5QURMd0VFYWlBTmF5RVdJQUVoQXdOQUFrQWdBeTRCQUNJQlFmLy9BM0VoQ0NBQlFRRkdCRUFnQUVISWxnRnFJQkl0QUFBaUJrRUNkR29pQkNnQ0FDSUJCRUFnQkNBQktBSUFOZ0lBQlNBS0lBb29BZ0FpQVNBQVFaU1ZBV29nQm1vaUJTMEFBRUVFZEdvaUJEWUNBQ0FFSUE4b0FnQkxCRUFnQ2lBRUlBVXRBQUJCQkhSck5nSUFJQTRnQmhDZ0FTRUJDd3NnQVVVTkJ5QUJJQU5CQkdvaUJpa0NBRGNDQUNBRElBRTJBZ2dnQVVFQmFpSUVMUUFBSWdWQkFYUkIvd0Z4SVFFZ0JDQUZRZjhCY1VFZVNBUi9JQUVGUWZnQUlnRUxPZ0FBSUFZZ0V5Z0NBQ0FVYWlBQlFmOEJjV29pQVRzQkFDQURRUVJxSVFZRkFrQWdDRUVCY1VVRVFDQURRUWhxSWdRb0FnQWhCaUFBSUFoQkFYWWlCV3BCdVpVQmFpd0FBQ0lYSUFCQnVwVUJhaUFGYWl3QUFDSUJSZ1JBSUFaRkRRb01BZ3NnQUVISWxnRnFJQUZCL3dGeEloQkJBblJxSWd3b0FnQWlBUVJBSUF3Z0FTZ0NBRFlDQUFVZ0NpQUtLQUlBSWdFZ0FFR1VsUUZxSUJCcUloZ3RBQUJCQkhScUlndzJBZ0FnRENBUEtBSUFTd1JBSUFvZ0RDQVlMUUFBUVFSMGF6WUNBQ0FPSUJBUW9BRWhBUXNMSUFGRkRRTWdBU0FHSUFWQkJIUVFVeG9nQmlBQVFjaVdBV29nRjBIL0FYRkJBblJxSWdVb0FnQTJBZ0FnQlNBR05nSUFJQVFnQVRZQ0FBc0xJQWhCQW5RZ0RVMGdDRUVEZENBRFFRUnFJZ1l2QVFBaUFVOXhRUUYwSUFoQkFYUWdEVWx5SUFGcUlRRWdCaUFCT3dFQUN5QUJRZi8vQTNFaUJVRUdhaUFWYkNJRUlCWWdCV29pQlVFR2JFa0VRQ0FFSUFWTEJIOUJBZ1ZCQVFzZ0JDQUZRUUowVDJvaEJVRURJUVFGSUFRZ0JVRUpiRThFZjBFRkJVRUVDeUFFSUFWQkRHeFBhaUFFSUFWQkQyeFBhaUlFSVFVTElBWWdCQ0FCYWpzQkFDQURLQUlJSWdFZ0NFRURkR29nQnpZQ0JDQUJJQWhCQTNScUlBczZBQUFnQVNBSVFRTjBhaUFGT2dBQklBTWdDRUVCYWpzQkFDQURLQUlNSWdNZ0NTZ0NBRWNOQVF3REN3c2dCRUVBTmdJQURBUUxDeUFKSUFJMkFnQWdFU0FDTmdJQUR3c0ZJQUJCQVNBQ0VLZ0NJUUlnQ1NnQ0FDQUNOZ0lFSUFCQjBBeHFJQUkyQWdBZ0FFSElER29nQWpZQ0FDQUNCRUFQQ3dzTElBQVEzd0VnQUVId0ZHcEJBRG9BQUF1WUJnRVBmeU1FSVFzakJFR0FDR29rQkNBQUxnRUFJZ05CLy84RGNTSU1JQUZCMkF4cUlnOG9BZ0FpQW1zaEJDQURRWUFDUmdSL1FRRWhDQ0FCUWNJTWFnVWdBVUVDYWlBQklBUnFRZThPYWkwQUFFRUdkR29nQUNnQ0RDOEJBQ0FNYXlBRVNrRUNkR29nREVFTGJDQUFMd0VFUzBFRGRHb2dBaUFFU2tFRWRHb2dBVUh5RkdvdEFBQkJBblJxSWdJdkFRQWlBeUFDTFFBQ2RpRUZJQUlnQXlBRmF6c0JBQ0FGSUFWRmFpRUlJQUlMSVFrZ0FVR0lsUUZxSWhBZ0NEWUNBQ0FCUWZBVWFpSU5MQUFBSVFvZ0FDZ0NDRUY0YWlFQ0lBc2lBeUVHQTBBZ0FpRUZBMEFnQVVId0RHb2dCVUVJYWlJQ0xRQUFhaXdBQUNBS1JnUkFJQUloQlF3QkN3c2dCeUFGTFFBSmFpRUhJQVpCQkdvaEJTQUdJQUkyQWdBZ0JFRi9haUlFQkVBZ0JTRUdEQUVMQ3lBUUlBZ2dCMm9pRGpZQ0FDQUJRZmlVQVdvb0FnQWdBVUgwbEFGcUtBSUFheUVFSUFGQi9KUUJhaUlDS0FJQUlBNXVJUVVnQWlBRk5nSUFJQVFnQlc0aUNDQU9UZ1JBSUFza0JFRUFEd3NnQVVHQWxRRnFJUVlnQ0NBSFNBUkFRUUFoQkFVZ0JpQUhOZ0lBSUFGQmhKVUJhaUFPTmdJQUlBd2dEeWdDQUdzaEFpQUJRZkFNYWlBREtBSUFMUUFBYWlBS09nQUFJQUpCZjJvaUFnUkFBMEFnQVVId0RHb2dBMEVFYWlJREtBSUFMUUFBYWlBTkxBQUFPZ0FBSUFKQmYyb2lBZzBBQ3dzZ0NTQVFLQUlBSUFrdkFRQnFPd0VBSUE4Z0FDOEJBRFlDQUNBTEpBUkJBUThMQTBBZ0EwRUVhaUVDSUFRZ0F5Z0NBQ0lIUVFGcUlnb3RBQUFpQldvaUF5QUlUQVJBSUFNaEJDQUNJUU1NQVFzTElBRkJoSlVCYWlBRE5nSUFJQVlnQkRZQ0FDQUpRUUpxSWdJc0FBQWlCa0gvQVhGQkIwZ0VRQ0FKUVFOcUlnUXNBQUJCZjJwQkdIUkJHSFVoQXlBRUlBTTZBQUFnQTBVRVFDQUpJQWt2QVFCQkFYUTdBUUFnQWlBR1FRRnFPZ0FBSUFSQkF5QUdRZjhCY1hRNkFBQUxDeUFCUWRRTWFpQUhOZ0lBSUFvZ0JVRUVham9BQUNBQVFRUnFJZ0lnQWk4QkFFRUVhanNCQUNBS0xRQUFRZndBU2dSQUlBQWdBUkRlQVFzZ0RTQU5MQUFBUVFGcU9nQUFJQUZCNkF4cUlBRkI3QXhxS0FJQU5nSUFJQXNrQkVFQkM2a0RBUXgvSUFGQjhoUnFJQUZCOEJKcUlBRkIxQXhxSWdRb0FnQXRBQUJxTEFBQUlnSTZBQUFnQVNBQVFRUnFJZ05CQVdvaUJpMEFBQ0lISWdoQkIzUnFRZlFUYWlBQlFmRVVhaUlGTFFBQUlBSkIvd0Z4YWlBQklBQW9BZ3d2QVFCcVFlOFFhaTBBQUdvZ0FVSHdFbW9nQXkwQUFDSUphaTBBQUVFQmRHb2dBVUhvREdvaUNpZ0NBQ0lMUVJwMlFTQnhha0VCZEdvaEFDQUJRZmlVQVdvb0FnQWdBVUgwbEFGcUtBSUFheUVNSUFGQi9KUUJhaUlOS0FJQVFRNTJJUUlnRFNBQ05nSUFJQXdnQW00Z0FDOEJBQ0lDU1FSQUlBUWdBellDQUNBR0lBZEJCM1pCQVhNZ0NHbzZBQUFnQVVHQWxRRnFRUUEyQWdBZ0FVR0VsUUZxSUFBdkFRQTJBZ0FnQUNBQUx3RUFJZ0JCZ0FGcUlBQkJJR3BCQjNack93RUFJQVZCQVRvQUFDQUtJQXRCQVdvMkFnQUZJQUZCZ0pVQmFpQUNOZ0lBSUFBZ0FDOEJBQ0lESUFOQklHcEJCM1pyT3dFQUlBRkJoSlVCYWtHQWdBRTJBZ0FnQVVIY0RHb2dBQzhCQUVFS2RrSEJNR290QUFBMkFnQWdBVUhZREdwQkFUWUNBQ0FCUWZBTWFpQUphaUFCUWZBVWFpd0FBRG9BQUNBRlFRQTZBQUFnQkVFQU5nSUFDd3ZqQkFJTmZ3RitJQUZCaUpVQmFpSU1JQUJCQkdvaUJ5OEJBQ0lDTmdJQUlBQW9BZ2doQXlBQlFmaVVBV29vQWdBZ0FVSDBsQUZxS0FJQWF5RUZJQUZCL0pRQmFpSUdLQUlBSUFKdUlRUWdCaUFFTmdJQUlBVWdCRzRpQ2lBQ1RnUkFRUUFQQ3lBQlFZQ1ZBV29oQ0NBS0lBTkJBV29pQlMwQUFDSUVTQVJBSUFGQmhKVUJhaUFFTmdJQUlBRkI4UlJxSUFSQkFYUWdBa3NpQWpvQUFDQUJRZWdNYWlJR0lBWW9BZ0FnQW1vMkFnQWdBVUhVREdvZ0F6WUNBQ0FGSUFSQkJHb2lBem9BQUNBSElBY3ZBUUJCQkdvN0FRQWdBMEg4QUVzRVFDQUFJQUVRM2dFTElBaEJBRFlDQUVFQkR3c2dBVUhVREdvaUNTZ0NBQ0lOUlFSQVFRQVBDeUFCUWZFVWFrRUFPZ0FBSUFBdkFRQkJmMm9oQmdKQUFrQURRQUpBSUFOQkNHb2hBaUFFSUFOQkNXb2lDeTBBQUNJT2FpSUZJQXBLRFFBZ0JrRi9haUlHUlEwQ0lBVWhCQ0FDSVFNTUFRc0xEQUVMSUFGQjhoUnFJQUZCOEJKcUlBMHRBQUJxTEFBQU9nQUFJQWdnQlRZQ0FDQUJRZkFNYWlBQ0xRQUFhaUFCUWZBVWFpSURMQUFBT2dBQUlBRkIyQXhxSUFBdkFRQWlBRFlDQUNBSlFRQTJBZ0FnQUVGL2FpRUFBMEFnQVVId0RHb2dBa0Y0YWlJQ0xRQUFhaUFETEFBQU9nQUFJQUJCZjJvaUFBMEFDeUFCUVlTVkFXb2dEQ2dDQURZQ0FFRUJEd3NnQVVHRWxRRnFJQVUyQWdBZ0NDQUVOZ0lBSUFrZ0FqWUNBQ0FMSUE1QkJHbzZBQUFnQnlBSEx3RUFRUVJxT3dFQUlBc3RBQUFnQXkwQUFVd0VRRUVCRHdzZ0Fpa0NBQ0VQSUFJZ0F5a0NBRGNDQUNBRElBODNBZ0FnQ1NBRE5nSUFJQTlDQ0lpblFmOEJjVUg4QUV3RVFFRUJEd3NnQUNBQkVONEJRUUVMTXdBZ0FFSUFOd0lBSUFCQ0FEY0NDQ0FBUVFBMkFoQWdBRUVBTmdJRUlBQkJBRFlDQ0NBQVFRQTJBaFFnQUVFQU5nSllDK2dMQVF0L0lBRkJCR29pQ0NnQ0FDSURRZUwvQVVvRVFDQUJRZWdBYWlJTEtBSUFJQU5ySWdsQkFFNEVRQ0FCUWZBQWFpSUdJQUZCK0FCcUlnY29BZ0FnQTJzZ0JpZ0NBR28yQWdBQ1FBSkFJQWtFUUNBQlFSQnFJZ1FvQWdBaUJTQUZJQU5xSUFrUVhSb2dDRUVBTmdJQUlBc2dDVFlDQUNBSlFZQ0FBa2NOQVVHQWdBSWhBd1VnQ0VFQU5nSUFJQXRCQURZQ0FDQUJRUkJxSVFRTUFRc01BUXNnQVNnQ0FDQUVLQUlBSUFscVFZQ0FBaUFKYXhCZUlRVWdDeWdDQUNJRElBVnFJUVFnQlVFQVNnUkFJQXNnQkRZQ0FDQUVJUU1MQ3lBQlFld0FhaUlGSUFOQlltb2lDellDQUNBSElBZ29BZ0FpQXpZQ0FDQURRWDlxSUFZb0FnQWlCR29oQnlBRVFYOUhCRUFnQlNBTElBZElCSDhnQ3dVZ0J3czJBZ0FMQ3dzZ0FVRVFhaUlNS0FJQUlRUWdDQ0FEUVFGcUlnVTJBZ0FnQkNBRGFpMEFBQ0lOUVNCeFFRQkhJZ3NFUUNBRFFlSC9BVW9FUUNBQlFlZ0FhaUlHS0FJQUlBVnJJZ3BCQUVnRVFDQUZJUU1GSUFGQjhBQnFJZ2tnQVVINEFHb2lCeWdDQUNBRFFYOXphaUFKS0FJQWFqWUNBQUpBQWtBZ0NnUkFJQVFnQkNBRmFpQUtFRjBhSUFoQkFEWUNBQ0FHSUFvMkFnQWdDa0dBZ0FKR0JFQkJnSUFDSVFNRklBd29BZ0FoQkF3Q0N3VWdDRUVBTmdJQUlBWkJBRFlDQUF3QkN3d0JDeUFCS0FJQUlBUWdDbXBCZ0lBQ0lBcHJFRjRoQlNBR0tBSUFJZ01nQldvaEJDQUZRUUJLQkVBZ0JpQUVOZ0lBSUFRaEF3c0xJQUZCN0FCcUlnVWdBMEZpYWlJR05nSUFJQWNnQ0NnQ0FDSUROZ0lBSUFOQmYyb2dDU2dDQUNJRWFpRUhJQVJCZjBjRVFDQUZJQVlnQjBnRWZ5QUdCU0FIQ3pZQ0FBc0xCU0FGSVFNTElBd29BZ0FoQkNBSUlBTkJBV29pQlRZQ0FDQUVJQU5xTFFBQVFSUjBRWUNBUUdzaENpQUZJUU1GSUFCQmtKVUJhaWdDQUFSQUlBVWhBd1ZCQUE4TEN5QU5RY0FBY1FSQUlBTkI0djhCU2dSQUlBRkI2QUJxSWdZb0FnQWdBMnNpQlVFQVRnUkFJQUZCOEFCcUlna2dBVUg0QUdvaUJ5Z0NBQ0FEYXlBSktBSUFhallDQUFKQUFrQWdCUVJBSUFRZ0JDQURhaUFGRUYwYUlBaEJBRFlDQUNBR0lBVTJBZ0FnQlVHQWdBSkdCRUJCZ0lBQ0lRTUZJQXdvQWdBaEJBd0NDd1VnQ0VFQU5nSUFJQVpCQURZQ0FBd0JDd3dCQ3lBQktBSUFJQVFnQldwQmdJQUNJQVZyRUY0aEJTQUdLQUlBSWdNZ0JXb2hCQ0FGUVFCS0JFQWdCaUFFTmdJQUlBUWhBd3NMSUFGQjdBQnFJZ1VnQTBGaWFpSUdOZ0lBSUFjZ0NDZ0NBQ0lETmdJQUlBTkJmMm9nQ1NnQ0FDSUVhaUVISUFSQmYwY0VRQ0FGSUFZZ0IwZ0VmeUFHQlNBSEN6WUNBQXNMQ3lBTUtBSUFJUVFnQ0NBRFFRRnFOZ0lBSUFJZ0JDQURhaTBBQURZQ0FBc2dBRUgwbEFGcUlBRVFqd1FnQ3dSQUlBMUJIM0VpQTBFQmFpRUJJQU5CQTJ4Qlkyb2hBaUFBUVpDVkFXb2lCU2dDQUNFRUlBTkJEMHNFZnlBQ0JTQUJJZ0lMUVFGR0JFQWdCRVVFUUVFQUR3c2dCVUVBTmdJQUlBQkJ2SllCYWlnQ0FCQlNRUUFQQ3lBRUlBcEhCRUFnQkFSQUlBVkJBRFlDQUNBQVFieVdBV29pQVNnQ0FCQlNCU0FBUWJ5V0FXb2hBUXNnQVNBS1FReHVRUVIwUVNCcUlnRVFiQ0lETmdJQUlBTUVRQ0FBUWVpWEFXb2dBeUFCYWtGd2FqWUNBQ0FGSUFvMkFnQUZRYXoxQWhCV0N3c2dBRUh3RkdwQkFUb0FBQ0FBUWVRTWFpQUNOZ0lBSUFBUTN3RWdBRUh3RUdwQkFEb0FBQ0FBUWZFUWFrRUNPZ0FBSUFCQjhoQnFJZ0ZDaElpUW9NQ0FnWUlFTndBQUlBRkJCRG9BQ0NBQVFmc1Fha0VHUWZVQkVGUWFJQUJCOEE1cVFRQTZBQUFnQUVIeERtcEJBVG9BQUNBQVFmSU9ha0VDT2dBQVFRTWhCRUVCSVFKQkFTRUZRUU1oQXdOQUlBQkI4QTVxSUFOcUlBUTZBQUFnQlVFQmFpRUJJQUpCZjJvaUFrVWlCd1JBSUFFaEFnc2dCQ0FIYWlFRUlBZEZCRUFnQlNFQkN5QURRUUZxSWdOQmdBSkhCRUFnQVNFRkRBRUxDeUFBUWZBU2FpSUJRZ0EzQWdBZ0FVSUFOd0lJSUFGQ0FEY0NFQ0FCUWdBM0FoZ2dBVUlBTndJZ0lBRkNBRGNDS0NBQlFnQTNBakFnQVVJQU53STRJQUJCc0JOcVFRaEJ3QUVRVkJvZ0FFSEVER3BCQnpvQUFBc2dBRUhJREdvb0FnQkJBRWNMMGdVQkRIOGpCQ0VKSXdSQkVHb2tCQ0FBS0FLd0FTSUJJQUFvQXJRQlJ3UkFJQUZCQURvQUFBc2dDU0lGSUFVMkFnZ2dCVUVFYWlJS0lBVTJBZ0FnQlNJQklnTWhBZ05BSUFCQnVBRnFJQVJCQW5ScUlnY29BZ0FpQmdSQUlBQkJCR29nQkdvaENDQUdJUUVEUUNBSElBRW9BZ0FpQXpZQ0FDQUJJQVUyQWdnZ0FTQUNOZ0lFSUFJZ0FUWUNDQ0FLSUFFMkFnQWdBVUYvT3dFQUlBRWdDQzBBQURzQkFpQURCRUFnQVNFQ0lBTWhBUXdCQlNBQklnSWhBd3NMQ3lBRVFRRnFJZ1JCSmtjTkFBc2dBeUFGUndSQUlBTWhCQU5BQWtBZ0JDQUVRUUpxSWdjdUFRQWlBVUgvL3dOeElnSkJCSFJxSWdNdUFRQkJmMFlFUUFOQUlBSWdBeThCQWlJSWFrR0FnQVJQRFFJZ0F5Z0NDQ0lHSUFOQkJHb2lBaWdDQURZQ0JDQUNLQUlBSUFZMkFnZ2dCeUFCUWYvL0EzRWdDR29pQWtILy93TnhJZ0U3QVFBZ0JDQUNRZi8vQTNFaUFrRUVkR29pQXk0QkFFRi9SZzBBQ3dzTElBUW9BZ1FpQkNBRlJ3MEFDeUFLS0FJQUlRRUxJQUVnQlVZRVFDQUpKQVFQQ3lBQVFjd0NhaUVMQTBBZ0FTZ0NDQ0lESUFGQkJHb2lBaWdDQURZQ0JDQUNLQUlBSUFNMkFnZ2dBUzhCQWlJQ0lRUWdBa0gvL3dOeFFZQUJTZ1IvSUFSQmYzTWlBa0gvZlVzRWZ5QUNCVUgvZlF0QmdBRnFJQVJxSWdKQmdIOXhJUXdnQVVHQUVHb2dBa0VIZGtFTGRHb2hCeUFFSVFNZ0N5Z0NBQ0VDQTBBZ0FTQUNOZ0lBSUFzZ0FUWUNBQ0FEUVlCL2FpRUlJQUZCZ0JCcUlRWWdBU0VDSUFOQmdBSktCRUFnQ0NFRElBWWhBUXdCQ3dzZ0JFR0FmMm9nREdzaEJDQUhCU0FCQ3lFQ0lBUWdBRUVFYWlBQVFTcHFJQVJCZjJvaUJtb3RBQUFpQVdvdEFBQkhCRUFnQWlBQVFRUnFJQUZCZjJvaUFXb3RBQUFpQTBFRWRHb2lCQ0FBUWJnQmFpQUdJQU5yUVFKMGFpSURLQUlBTmdJQUlBTWdCRFlDQUFzZ0FpQUFRYmdCYWlBQlFRSjBhaUlCS0FJQU5nSUFJQUVnQWpZQ0FDQUtLQUlBSWdFZ0JVY05BQXNnQ1NRRUM5MENBUVIvSUFCQnVBRnFRUUJCbUFFUVZCb2dBQ0FBS0FLc0FTSUNOZ0xRQWlBQUtBSUFJZ05CQ0cxQkRHNUIxQUJzSWdGQkRHNUJCSFFoQkNBQUlBSWdBeUFCYXlJQlFReHVRUVIwUVJCcWFpSUROZ0xVQWlBQUlBTTJBckFCSUFBZ0FpQUJhallDM0FJZ0FDQURJQVJxTmdLMEFTQUFRUUU2QUFRZ0FFRUNPZ0FGSUFCQkF6b0FCaUFBUVFRNkFBY2dBRUVHT2dBSUlBQkJDRG9BQ1NBQVFRbzZBQW9nQUVFTU9nQUxRUThoQTBFSUlRUURRQ0FBUVFScUlBUnFJQU02QUFBZ0JFRUJhaUVCSUFOQkEyb2hBaUFFUVF0SUJFQWdBaUVESUFFaEJBd0JDd3NnQTBFRWFpRUNJQUZCSmtnRVFBTkFJQUJCQkdvZ0FXb2dBam9BQUNBQlFRRnFJUVFnQWtFRWFpRUNJQUZCSlVnRVFDQUVJUUVNQVFzTEN5QUFRUUE2QUtvQlFRQWhBa0VBSVFFRFFDQUFRU3BxSUFKcUlBRWdBaUFBUVFScUlBRnFMUUFBVG1vaUFUb0FBQ0FDUVFGcUlnSkJnQUZIRFFBTEMra0tBUXAvQWtBZ0FFRVlhaUlLSUFFMkFnQWdBRUVFYWlJTFFRQTJBZ0FnQUVFQU5nSUFJQUJCZnpZQ0NDQUJRUVJxSWdVb0FnQWlBRUhpL3dGS0JFQWdBVUhvQUdvaUJDZ0NBQ0FBYXlJQ1FRQk9CRUFnQVVId0FHb2lDU0FCUWZnQWFpSUlLQUlBSUFCcklBa29BZ0JxTmdJQUFrQUNRQ0FDQkVBZ0FVRVFhaUlES0FJQUlnWWdCaUFBYWlBQ0VGMGFJQVZCQURZQ0FDQUVJQUkyQWdBZ0FrR0FnQUpIRFFGQmdJQUNJUUFGSUFWQkFEWUNBQ0FFUVFBMkFnQWdBVUVRYWlFRERBRUxEQUVMSUFFb0FnQWdBeWdDQUNBQ2FrR0FnQUlnQW1zUVhpRUdJQVFvQWdBaUFDQUdhaUVESUFaQkFFb0VRQ0FFSUFNMkFnQWdBeUVBQ3dzZ0FVSHNBR29pQmlBQVFXSnFJZ1EyQWdBZ0NDQUZLQUlBSWdBMkFnQWdBRUYvYWlBSktBSUFJZ05xSVFnZ0EwRi9Sd1JBSUFZZ0JDQUlTQVIvSUFRRklBZ0xOZ0lBQ3dzTElBRW9BaEFoQVNBRklBQkJBV28yQWdBZ0N5QUJJQUJxTFFBQUlnZzJBZ0FnQ2lnQ0FDSUhRUVJxSWdVb0FnQWlBRUhpL3dGS0JFQWdCMEhvQUdvaUJDZ0NBQ0FBYXlJQ1FRQk9CRUFnQjBId0FHb2lDU0FIUWZnQWFpSUdLQUlBSUFCcklBa29BZ0JxTmdJQUFrQUNRQ0FDQkVBZ0IwRVFhaUlCS0FJQUlnTWdBeUFBYWlBQ0VGMGFJQVZCQURZQ0FDQUVJQUkyQWdBZ0FrR0FnQUpIRFFGQmdJQUNJUUFGSUFWQkFEWUNBQ0FFUVFBMkFnQWdCMEVRYWlFQkRBRUxEQUVMSUFjb0FnQWdBU2dDQUNBQ2FrR0FnQUlnQW1zUVhpRURJQVFvQWdBaUFDQURhaUVCSUFOQkFFb0VRQ0FFSUFFMkFnQWdBU0VBQ3dzZ0IwSHNBR29pQXlBQVFXSnFJZ1EyQWdBZ0JpQUZLQUlBSWdBMkFnQWdBRUYvYWlBSktBSUFJZ0ZxSVFZZ0FVRi9Sd1JBSUFNZ0JDQUdTQVIvSUFRRklBWUxOZ0lBQ3dzTElBY29BaEFoQVNBRklBQkJBV28yQWdBZ0N5QUlRUWgwSUFFZ0FHb3RBQUJ5SWdnMkFnQWdDaWdDQUNJSFFRUnFJZ1VvQWdBaUFFSGkvd0ZLQkVBZ0IwSG9BR29pQkNnQ0FDQUFheUlDUVFCT0JFQWdCMEh3QUdvaUNTQUhRZmdBYWlJR0tBSUFJQUJySUFrb0FnQnFOZ0lBQWtBQ1FDQUNCRUFnQjBFUWFpSUJLQUlBSWdNZ0F5QUFhaUFDRUYwYUlBVkJBRFlDQUNBRUlBSTJBZ0FnQWtHQWdBSkhEUUZCZ0lBQ0lRQUZJQVZCQURZQ0FDQUVRUUEyQWdBZ0IwRVFhaUVCREFFTERBRUxJQWNvQWdBZ0FTZ0NBQ0FDYWtHQWdBSWdBbXNRWGlFRElBUW9BZ0FpQUNBRGFpRUJJQU5CQUVvRVFDQUVJQUUyQWdBZ0FTRUFDd3NnQjBIc0FHb2lBeUFBUVdKcUlnUTJBZ0FnQmlBRktBSUFJZ0EyQWdBZ0FFRi9haUFKS0FJQUlnRnFJUVlnQVVGL1J3UkFJQU1nQkNBR1NBUi9JQVFGSUFZTE5nSUFDd3NMSUFjb0FoQWhBU0FGSUFCQkFXbzJBZ0FnQ3lBSVFRaDBJQUVnQUdvdEFBQnlJZ0EyQWdBZ0FFRUlkQ0VKSUFvb0FnQWlBa0VFYWlJRktBSUFJZ0JCNHY4QlRBMEFJQUpCNkFCcUlnZ29BZ0FnQUdzaUNrRUFTQTBBSUFKQjhBQnFJZ1FnQWtINEFHb2lCaWdDQUNBQWF5QUVLQUlBYWpZQ0FBSkFBa0FnQ2dSQUlBSkJFR29pQVNnQ0FDSURJQU1nQUdvZ0NoQmRHaUFGUVFBMkFnQWdDQ0FLTmdJQUlBcEJnSUFDUncwQlFZQ0FBaUVBQlNBRlFRQTJBZ0FnQ0VFQU5nSUFJQUpCRUdvaEFRd0JDd3dCQ3lBQ0tBSUFJQUVvQWdBZ0NtcEJnSUFDSUFwckVGNGhBeUFJS0FJQUlnQWdBMm9oQVNBRFFRQktCRUFnQ0NBQk5nSUFJQUVoQUFzTElBSkI3QUJxSWdNZ0FFRmlhaUlJTmdJQUlBWWdCU2dDQUNJQU5nSUFJQVFvQWdBaUFVRi9SZzBBSUFNZ0NDQUFRWDlxSUFGcUlnRklCSDhnQ0FVZ0FRczJBZ0FnQWlnQ0VDRUJJQVVnQUVFQmFqWUNBQ0FMSUFrZ0FTQUFhaTBBQUhJMkFnQVBDeUFDS0FJUUlRRWdCU0FBUVFGcU5nSUFJQXNnQ1NBQklBQnFMUUFBY2pZQ0FBdS9BUUVCZnlBQVFlZ3hhaXdBQUVVRVFFRUFEd3NDUUFKQUFrQUNRQ0FDRGdJQUFRSUxJQUJCc0RKcUlnSXBBd0FnQVZZRVFDQUFRYWd5YWlrREFDQUJWZ1JBSUFBZ0FFSHdNV29wQXdBUXNBSUxDeUFDSUFFM0F3QU1BZ3NnQUVHd01tb2lBaUFDS1FNQUlBRjhOd01BREFFTElBQkJ1REpxSWdOQkFUb0FBQ0FDUVFKSEJFQkJBUThMSUFBb0FnQWdBVUVDRUp3QklBQkJzREpxSUFBb0FnQVEwd0UzQXdBZ0EwRUFPZ0FBUVFFUEN5QUFRYmd5YWtFQk9nQUFRUUVMYXdBZ0FDQUJFTkVCTndOb0lBQkJBRFlDMEFFZ0FFRUFOZ0xVQVNBQVFRRTZBTmdCSUFCQjNNRUFhaUFBS0FJSVFhakVBbW9zQUFBNkFBQWdBRUVBT2dCaElBQkIzY0VBYWtFQU9nQUFJQUJCQVRvQTJRRWdBRUVBT2dEYUFTQUFRUUE2QU5zQklBQVF3d1FMdmdFQ0JIOEJma0VBUVlDQUVCQlhJZ1JGSWdVRVFFR3M5UUlRVmdzQ1FBSkFBa0FEUUVFQUpBVkJHeUFBSUFSQmdJQVFFQWNoQWlNRklRTkJBQ1FGSUFOQkFYRU5BU0FDUVFGcVFRSkpEUUlnQWFjaEEwRUFKQVZCRGlBQUlBUWdBU0FDclZVRWZ5QUNCU0FESWdJTEVBNGpCU0VEUVFBa0JTQURRUUZ4RFFFZ0FxMGhCaUFCSUFGQ2YxVUVmaUFHQlVJQUMzMGhBUXdBQ3dBTEVCY2hBQ0FGQkVBZ0FCQWVDeUFFRUZJZ0FCQWVEQUVMSUFVRVFBOExJQVFRVWdzTHlnTUJCSDhDUUNNRUlRWWpCRUhBd1FCcUpBUWdCa0hvd0FCcUlRZ2dCa0djd0FCcUlRY2dCQ0FFSUFVUStBRWdCaERTQVVFQUpBVkJFQ0FHSUFRUUJpRUpJd1VoQlVFQUpBVUNRQ0FGUVFGeFJRUkFJQWxGQkVBZ0IwRUFOZ0pFSUFkQkVUWUNTQ0FISUFJMkFnQWdCeUFFTmdJRUlBZEJRR3RCQXpZQ0FDQUhJQU0yQWdoQkFDUUZJd1VoQVVFQUpBVWdBVUVCY1EwQ0lBaEJBRFlDUkNBSVFSSTJBa2dnQ0VGQWEwRUJOZ0lBSUFnZ0FqWUNBRUVBSkFVakJTRUJRUUFrQlNBQlFRRnhEUUlnQUNnQ0NFR295d1JxUVJjMkFnQWdCaEJ3SUFZa0JFRUFEd3RCQUVHQWdNQUFFRmNpQkVVaUF3UkFRUUFrQlVFVVFhejFBaEFNSXdVaEFFRUFKQVVnQUVFQmNRUkFFQmNoQUNBR0VIQWdBQkFlQ3dzQ1FBSkFBMEJCQUNRRlFRSVFDeU1GSVFCQkFDUUZJQUJCQVhFTkFrRUFKQVZCQkNBR0lBUkJnSURBQUJBSElRSWpCU0VBUVFBa0JTQUFRUUZ4RFFJZ0FrVU5BVUVBSkFWQkdpQUJJQVFnQWhBSEdpTUZJUUJCQUNRRklBQkJBWEZGRFFBTUFnc0FDeUFERFFNZ0JCQlNEQU1MRUJjaEFDQURCRUFnQmhCd0lBQVFIZ3NnQkJCU0lBWVFjQ0FBRUI0TEN4QVhJUUFnQmhCd0lBQVFIa0VBRHdzZ0JoQndJQVlrQkVFQkM0OERBUVovSXdRaEJDTUVRZERBQUdva0JDQUVRWUJBYXlFRElBUkJ6TUFBYWlFR0FrQUNRQUpBSUFCQkNHb2lCeWdDQUNJRlFjakxCR29vQWdCQnhRQnJEaFFCQWdJQ0FnSUNBZ0lDQWdBQ0FnSUNBZ0lDQVFJTElBSkJBVFlDRENBRUpBUkJBUThMSUFWQnlZa0RhaXdBQUFSQUlBUWtCRUVCRHdzZ0JTQUNJQUJCNE1FQWFpSUFRWUFRSUFZZ0FVR0E2QUZxSWdVcEF3QWdBVUhnNXdGcUlnaEJBUkM3QVFSL1FRRUZJQVlzQUFBRWYwRUFCVUdzOVFJZ0FVRVlhaUlCSUFBUXN3SWdCeWdDQUVHb3l3UnFRUkEyQWdBQ2YwRUFJQUFvQWdCRkRRQWFJQUJCeEEwUXh3RkZDd1IvUVFBRklBTkJBRFlDUkNBRFFlb0FOZ0pJSUFOQlFHdEJBVFlDQUNBRElBRTJBZ0FnQkNBQVFZQVFFRzhhSUFCQkFSQ1NBeUFIS0FJQUlBSWdBRUdBRUNBR0lBVXBBd0FnQ0VFQkVMc0JCSDhnQTBFQU5nSkVJQU5CSVRZQ1NDQURJQUUyQWdBZ0F5QUVOZ0lFSUFOQlFHdEJBellDQUNBRElBQTJBZ2hCQVFWQnJQVUNJQUVnQUJDekFrRUFDd3NMQ3lFQUlBUWtCQ0FBRHdzZ0JDUUVRUUVMcmdFQkIzOGpCQ0VESXdSQjhNQUFhaVFFSUFOQkNHb2hCQ0FBUVFocUlnWW9BZ0FpQlVISmlRTnFMQUFBQkVBZ0F5QUNOZ0lBSUFSQnZMVUROZ0lBSUFNa0JBOExJQU5CR0dvaENDQURRUkJxSVFrZ0EwR2d3QUJxSVFJZ0EwRWdhaUVIQWtBQ1FBSkFJQUJCNE1FQWFpRUVJQVZCcElrRGFpd0FBQm9nQVVITXB3RnFJZ1VvQWdBYURBQUxJQWtnQkRZQ0FDQUlRYnkxQXpZQ0FBc2dBRUhkd1FCcVFRRTZBQUFMSUFNa0JBdWZBZ0VFZnlNRUlRRWpCRUdBQldva0JDQUJRWUFFYWlFQ0lBQkJDR29pQXlnQ0FDSUVRYWpFQW1vc0FBQkZCRUFnQkVHd3l3UnFLQUlBSWdCRkJFQWdBU1FFUVFBUEN5QUJRUUEyQWdBQ1FBSkFRUVFnQkVHc3l3UnFLQUlBSUFGQmdBRWdBRUVQY1VIcUFHb1JBd0JCZjBZRVFDQUJRUUEyQWdBTUFRVWdBU2dDQUVVTkFRc01BUXNnQWtFQU9nQUFRUUlnQXlnQ0FDSUFRYXpMQkdvb0FnQWdBa0dBQVNBQVFiRExCR29vQWdCQkQzRkI2Z0JxRVFNQVFYOUdCRUFnQWtFQU9nQUFDeUFDUVFBZ0FVR0FBUkREQVJvZ0FrR0FBUkJiQ3lBREtBSUFRYWpBQW1vZ0FSQ3VBaUFCUVlBRUVGc2dBeWdDQUNJQVFhM0VBbXBCQVRvQUFDQUFRYWpFQW1vc0FBQkZCRUFnQVNRRVFRQVBDd3NnQVNRRVFRRUw4aWdDSm44QmZnSkFJd1FoQXlNRVFkQ0hBbW9rQkNBQlFmam5BV29pQ1NrREFFSUFVd1JBSUFsQ0FEY0RBQXNnQVVHQTZBRnFJaEVwQXdCQ0FGTUVRQ0FSUWdBM0F3QUxJQUJCQ0dvaUJ5Z0NBRUhJeXdScUtBSUFJUTBnQWtVRVFDQUFMQUJoUlFSQUlBTWtCRUVBRHdzZ0FTQUFRUkJxUVFBZ0RSQzFBVVVFUUVHczlRSkJBUkJrSUFNa0JFRUFEd3NMSUFOQjJNQUFhaUVlSUFOQnlNQUFhaUVRSUFOQndNQUFhaUVaSUFOQnVNQUFhaUVhSUFOQnNNQUFhaUVrSUFNaUJrSG9oZ0pxSVFzZ0JrSE14Z0ZxSVFvZ0JrR0F4Z0ZxSVJNZ0JrRzB4UUZxSVJRZ0JrSG94QUZxSVJVZ0JrSEFod0pxSVFNZ0JrSG9oQUZxSVFJZ0JrSG94QUJxSVF3Z0JrSGt3QUJxSVJZZ0JrRzRod0pxSVE0Z0FVR3dwd0ZxSVFVQ1FBSkFBa0FDUUFKQUlBRkJ6UE1BYWlnQ0FFRUNhdzUyQUFJRUF3UUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQVFRTElBQkIzY0VBYWlJYlFRQTZBQUFnQnlnQ0FDSUVRZVNFQTJvb0FnQkZCRUFnQUNnQzFBRWdCRUdjekFWcUtBSUFUd1JBSUFBc0FOa0JEUVlMQ3lBRFFRQTZBQUFnQkNBRklBTkJCU0FDUVlBUUVQQURJUVFnQnlnQ0FDSUZRZUNFQTJvb0FnQkJBa1lFUUNBRlFhaUFBbW9nQWtHQUVCQnZHaUFIS0FJQVFhaUFBbW9RbXdGQkFEWUNBQ0FIS0FJQVFhaUFBbW9ReWdFRVFDQUhLQUlBUWFpQUFtcEJBRFlDQUFzTElBUkJBRWNpQWlBRExBQUFSWEVFUUNBQVFRQTZBTmtCQ3lBQkVPNEJJQUZCMEtjQmFpQU1FSzhCR2lBQlFaUHBBV29zQUFBRVFDQUhLQUlBUVl6TEEyb29BZ0FpQkVFQlJ5QURMQUFBUlhFRVFDQU1RUUFROWdFaEF5QUhLQUlBUVl6TEEyb29BZ0JCZjJvZ0EwWUVmeUFNUVFFUTlnRWFJQUlnQkVFQVIzRUZRUUFMSVFJTEJTQUJRWkhwQVdvc0FBQkZCRUFnQWlBSEtBSUFRWXpMQTJvb0FnQkJBa2x4SVFJTEN5QUFRUkJxSVJJZ0FDQUJRYm5vQVdvaUpTd0FBRG9BWVNBQVFlSUFhaUltUVFBNkFBQWdBU0FCUVpDOEEyb3BBd0FnQ1NrREFIMUJBQ0FCS0FJQUtBSVFRUU54UWJnQ2FoRUNBQUpBQWtBQ1FDQUFRZGdCYWlJRExBQUFCRUFnQWdSQUlBRkJ1T2dCYWl3QUFBUkFJQVpCQURZQ1JDQUdRY1VBTmdKSUlBWWdBVUVZYWpZQ0FDQUdRVUJyUVFJMkFnQWdCaUFNTmdJRUlBY29BZ0JCcU1zRWFrRU1OZ0lBUWF6MUFrRUdFR1FGSUFOQkFEb0FBRUVBSVFOQkFTRWZEQU1MQ3lBRFFRQTZBQUFGSUFOQkFEb0FBQ0FDQkVCQkFDRURRUUVoSHd3Q0N3c2dBVUdjdkFOcUxBQUFCRUJCQVNFREJVRUJJUUJCQUNFQ0RBSUxDd0ovSUFjb0FnQkJ5WWtEYWl3QUFCb2dEVUhKQUVjaEp5QURRUUJISVFKQkFRc0VRQ0FBSUFFZ0RDQUFRZURCQUdvaUJVR0FFQkNwQWlBQ0JIOUJBQVVnQlNnQ0FBUi9JQUZCdU9nQmFpd0FBRVVGUVFBTEN5SUVRUUZ4SVFJQ1FBSkFJQWNvQWdBaUNFSGJoQU5xTEFBQURRQWdDRUhjaEFOcUxBQUFEUUFNQVFzQ1FBSkFBa0FnRFVIRkFHc09GQUFCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVBQVFzTUFRc01BUXNnQmtHUXdBQnFJZ2hDQURjREFDQUlRZ0EzQXdnZ0NFSUFOd01RSUFRZ0J5Z0NBRUhiaEFOcUxBQUFSWEVoQWdzZ0FVRzc2QUZxSWlBc0FBQUVRQ0FBRUpZRUlRZ2dCeWdDQUNFRUlBaEZCRUFnQkVHb3l3UnFRUlkyQWdBTUJBc2dCRUdveEFKcUxBQUFSUVJBUWF6MUFrRUJFR1FnQnlnQ0FDSUVRYWpMQkdwQkZqWUNBRUVBSVFJTEJTQUhLQUlBSVFRTElBUkJwSXNFYWlJRUtBSUFCRUFnQlNBRVFZQVFFRzhhQ3lBQlFjbW5BV29pS0N3QUFDSUVRZjhCY1VFeVNpRUlJQVJCYzJwQkdIUkJHSFZCL3dGeFFSQktJUVFnQVVIS3B3RnFJaUVzQUFCQkFFY2dBVUdZdkFOcUlod29BZ0JCQTBZRWZ5QUlCU0FFQzNFRVFFR3M5UUlnQVVFWWFpSUFJQXdRdHdRZ0JrRUFOZ0pFSUFaQklqWUNTQ0FHUVVCclFRRTJBZ0FnQmlBQU5nSUFRYXoxQWtFQ0VHUWdCeWdDQUVHb3l3UnFRUTQyQWdBZ0FTQUJRWkM4QTJvcEF3QkJBQ0FCS0FJQUtBSVFRUU54UWJnQ2FoRUNBQ0FCUVp5OEEyb3NBQUJGSVE4TUF3c2dGaUFIS0FJQVFhakFBbXBCaEFRUVV4b2dBVUc4NkFGcUtBSUFJUWdnQVVIQjZBRnFJUVFnQVVIQTZBRnFMQUFBUlFSQVFRQWhCQXNnQVVHTTZRRnFLQUlBSVJkQkFDUUZRUUVnRWtFQUlBZ2dGaUFFSUFGQjBlZ0JhaUFYSUFGQjYrZ0JhaUlJSUE0UUVpTUZJUVJCQUNRRkFrQWdCRUVCY1VVRVFBSkFJQ0FzQUFBRVFDQUJRZUhvQVdvc0FBQkZEUUVnQVVIaTZBRnFJQTVCQ0JCclJRMEJJQUZCckx3RGFpd0FBQTBCSUFwQkFEWUNSQ0FLUVFZMkFrZ2dDa0ZBYTBFQk5nSUFJQW9nQVVFWWFqWUNBRUVBSkFVakJTRUNRUUFrQlNBQ1FRRnhEUU5CQUNRRlFRcEJyUFVDUVFzUURTTUZJUUpCQUNRRklBSkJBWEVOQXlBSEtBSUFRYWpMQkdvaUFpZ0NBRUVQUmdSQVFRQWhBZ3dDQ3lBQ1FSZzJBZ0JCQUNFQ0N3dEJBQ1FGUVNJZ0NoQU1Jd1VoQkVFQUpBVWdCRUVCY1FSQUVCY2hBQVVnQVVHZzZRRnFJaUlvQWdBaUJFRUFSeUVYQWtBQ1FBSkFBa0FnQkVFRlJpQVhRUUZ6Y2dSQVFRQWtCVUVSSUFFUUJTRU9Jd1VoQkVFQUpBVWdCRUVCY1EwQ0lBSkJBWEZCQUVjaEJDQU9SUVJBSUFSRkRRSkJBQ1FGUVJnZ0FDQUJJQW9RQnlFQ0l3VWhCRUVBSkFVZ0JFRUJjUTBESUFKQkFYRWhBZ3dDQ3lBRVJRUkFRUUVoQkF3RUN3SkFBa0FnRFVIRkFHc09EQUFCQVFFQUFRRUJBUUVCQUFFTFFRRWhCQXdFQ3lBSEtBSUFRZUNFQTJvb0FnQkJBVVlFUUVFQklRUU1CQXNnQUVITUFXb2lCQ0FFS0FJQVFRRnFOZ0lBUVFBa0JVRU1JQUFnQVNBTUVBNGpCU0VFUVFBa0JTQUVRUUZ4RFFKQkFTRUVEQU1GSUExQjBBQkhJQUpCQVhGQkFFZHhSUTBCSUFjb0FnQkJ5WWtEYWl3QUFBMEJJQVpCQURvQUFFRUFKQVZCRUNBRkVBVWhCQ01GSVE1QkFDUUZBa0FnRGtFQmNVVUVRQ0FFSUFZc0FBQWlCRVZ4QkVBZ0J5Z0NBQ0VFSUJFcEF3QWhLa0VBSkFWQkFTQUVRUUFnQlVHQUVDQUdJQ3FuSUNwQ0lJaW5JQUZCNE9jQmFrRUFFRXdhSXdVaEJFRUFKQVVnQkVFQmNRMENJQVlzQUFBaEJBc2dCRUgvQVhFRVFFRUFJUUlMREFNTEN4QVhJUUFMREFNTElBSkJBWEZGQkVBZ0FVR2N2QU5xTEFBQVJRUkFRUUFoQkVFQklROE1Bd3RCQUNRRlFRUWdERUVBUVFCQkFSQUlJUUlqQlNFRFFRQWtCU0FEUVFGeERRRWdBZ1JBUVFFaEEwRUJJUUlGUVFBaEJFRUJJUU5CQVNFQ0RBTUxDeUFIS0FJQVFjbUpBMm9zQUFBaUJBUkFJQnRCQVRvQUFBc2dBMEVCY1NJalFRQkhJUTRnQkNBamNpSXBRZjhCY1VFQVJ5RWRBa0FnRGtVRVFBSkFJQTFCMEFCSElCMUJBWE54QkVCQkFDUUZRUklnQ2hBRklRUWpCU0VZUVFBa0JTQVlRUUZ4RFFNZ0JFVU5BU0FMUVFBMkFrUWdDMEU2TmdKSUlBc2dBVUVZYWlJRU5nSUFJQXRCUUd0QkFqWUNBQ0FMSUFVMkFnUkJBQ1FGSXdVaEMwRUFKQVVnQzBFQmNRMERRUUFrQlVFTlFhejFBaUFFSUFVUURpTUZJUVJCQUNRRklBUkJBWEVOQXdzTElBQkJ6QUZxSWdRZ0JDZ0NBRUVCYWpZQ0FBc2dBRUhRQVdvaUdDQVlLQUlBUVFGcU5nSUFBa0FnSndSQUlBNEVRQ0FrSUF3MkFnQU1BZ3NDUUFKQUFrQUNRQ0FIS0FJQVFjbUpBMm9zQUFBRWYwSFVBQVVnRFF0QnhRQnJEaFFDQXdNREF3TURBd01EQXdFREF3TUFBd01EQWdNTElCb2dERFlDQUF3RUN5QVpJQXcyQWdBTUF3c2dFQ0FGTmdJQUN3c0xJQWNvQWdBaUJFSE1oQU5xTEFBQVJRUkFJQWNvQWdBaEJBc2dBRUdBQVdvaUMwSUFOd01BSUF0Q0FEY0RDQ0FCUVpEb0FXb2lDeWdDQUNFUUlBUkJvSXNFYWlnQ0FDRUVRUUFrQlVFRUlBQkJ1QUZxSWhrZ0VDQUVFQTRqQlNFRVFRQWtCU0FFUVFGeERRQWdDeWdDQUNFRUlBY29BZ0JCb0lzRWFpZ0NBQ0VRUVFBa0JVRUVJQUJCb0FGcUlBUWdFQkFPSXdVaEJFRUFKQVVnQkVFQmNRMEFJQUFnQ1NrREFEY0RNRUVBSkFWQkF5QVNJQUVnQ2hBT0l3VWhCRUVBSkFVZ0JFRUJjUTBBSUFBZ0tUb0FPU0FBSUNNNkFEb2dIUVIvSUFvZ0J5Z0NBQ0lFUVp5RkEyb3NBQUJCQVhNNkFCTkJBQVVDUUNBQlFheThBMm9zQUFCRkJFQWdDU2tEQUVJTGhpQVJLUU1BSWlwWERRRWdLa0tBd3RjdldRUkFRUUFrQlVFRklBRVFUcTBqQjYxQ0lJYUVJU29qQlNFRVFRQWtCU0FFUVFGeERRUWdLaUFKS1FNQVZ3MENDMEVBSkFVakJTRUVRUUFrQlNBRVFRRnhEUU1MQ3lBS0lBY29BZ0FpQkVHY2hRTnFMQUFBUVFGek9nQVRJQTFCMEFCSElBNUJBWE54Q3lFSkFrQUNRQ0FYQkVBZ0lpZ0NBQ0lRUVFSR0lSb0NRQUpBQWtBZ0VFRUJja0VGUmdSQVFRQWtCVUVFSUFBZ0FTQUJRYVRwQVdvZ0JrR0FFQkFRSXdVaEJFRUFKQVVDUUNBRVFRRnhSUVJBSUFZb0FnQkZJQWxCQVhOeURRTWdHZ1IvUVFBa0JVRVpJQVVnQmtHQUVCQUhCVUVBSkFWQkFpQUFJQW9nQVVFWWFpQUZJQVpCZ0JBUUNRc2hCQ01GSVFWQkFDUUZJQVZCQVhFTkFTQUVEUU5CQUNFRURBUUxDd1VDUUNBUVFYOXFRUU5KQkVBZ0NVVU5BMEVBSkFWQkJTQUVJQklnQVNBRkVBZ2hCQ01GSVFWQkFDUUZJQVZCQVhFTkFTQUVCRUJCQVNFRlFRRWhCQXdHQlVFQUlRUU1CUXNBQlNBR1FRQTJBa1FnQmtIR0FEWUNTQ0FHSUFGQkdHbzJBZ0FnQmtGQWEwRUNOZ0lBSUFZZ0JUWUNCRUVBSkFVakJTRUVRUUFrQlNBRVFRRnhEUUZCQUNFRURBUUxBQXNMRUJjaEFBd0pDeUFKSUJ3b0FnQkJBa2R5QkVCQkFTRUZRUUVoQkFWQkFTRUVEQUVMREFFTFFRQWhCUXNnR3lBSklBUnhRUUZ4T2dBQURBRUZJQUZCdU9nQmFpd0FBQVJBUVFFaEJVRUJJUVFNQWdzZ0lTd0FBRVVFUUNBUktRTUFJU3BCQUNRRlFRSWdFaUFxcHlBcVFpQ0lweEJQSXdVaEJFRUFKQVVnQkVFQmNRMERRUUVoQlVFQklRUU1BZ3NnQUVISUFXb2lCQ2dDQUNFRklBRkJsT2tCYWlnQ0FDRUpJQUZCa09rQmFpSVNMQUFBUVFCSElSQkJBQ1FGUVFVZ0JTQUpJQkFRRGlNRklRVkJBQ1FGSUFWQkFYRU5BaUFFS0FJQUlnUkJzSmdCYWlBUktRTUFOd01BSUFSQnlKZ0Jha0VBT2dBQUlCd29BZ0JCQTBjZ0tDMEFBQ0lGUVJCSWNVVUVRQ0FTTEFBQVFRQkhJUWxCQUNRRlFRWWdCQ0FGUWY4QmNTQUpFQTRqQlNFRVFRQWtCU0FFUVFGeERRTkJBU0VGUVFFaEJBd0NDeUFZS0FJQVFRRkxCSDhnQVVHY3ZBTnFMQUFBUVFCSEJVRUFDeUVGUVFBa0JVRUdJQVJCRHlBRkVBNGpCU0VFUVFBa0JTQUVRUUZ4UlFSQVFRRWhCVUVCSVFRTUFnc0xEQUVMUVFBa0JVRVZJQUVRRENNRklRbEJBQ1FGSUFsQkFYRU5BQUpBQWtBZ0pTd0FBQVJBUVFBaENBd0JCU0FCUWVyb0FXb3NBQUJGQkVCQkFDRUlDMEVBSkFWQkZ5QVpJQXNnQ0JBSElRZ2pCU0VKUVFBa0JTQUpRUUZ4UlEwQkN3d0JDd0pBSUFGQmtPa0JhaXdBQUFSQUlDRXNBQUJGRFFFZ0VTa0RBRUlCVXlBSVFRRnpjZzBCSUFCQkFUb0Eyd0VGSUFCQkFEb0Eyd0VMQ3dKL0lBNGdCVUVCYzNJRWYwRUFCU0FJQkVBQ1FBSkFJQTFCeVFCckRnZ0FBUUVCQVFFQkFBRUxRUUFNQXdzZ0J5Z0NBRUhNaEFOcUxBQUFCSDlCM0JFRlFlUVJDeUVGSUFzb0FnQUVmMEc4dFFNRlFZQVNDeUVJSUI0Z0JUWUNBQ0FlSUFnMkFnUkJBQXdDQ3dKQUFrQWdJQ3dBQUVVTkFDQUJRZUhvQVdvc0FBQUVRQ0FCUWF5OEEyb3NBQUJGRFFFTElBQXNBTnNCRFFBZ0UwRUFOZ0pFSUJOQkJEWUNTQ0FUSUFGQkdHbzJBZ0FnRTBGQWEwRUNOZ0lBSUJNZ0REWUNCQXdCQ3lBVVFRQTJBa1FnRkVFRE5nSklJQlFnQVVFWWFqWUNBQ0FVUVVCclFRSTJBZ0FnRkNBTU5nSUVDMEVBSkFVakJTRUZRUUFrQlNBRlFRRnhEUUpCQUNRRlFRcEJyUFVDUVFNUURTTUZJUVZCQUNRRklBVkJBWEVOQWdKQUFrQWdCeWdDQUVHb3l3UnFJZ1VvQWdCQkQyc09DZ0FCQVFFQkFRRUJBUUFCQzBFQkRBSUxJQVZCRERZQ0FFRUJDd3NoQlNBZEJFQkJBQ0VFUVFFaER3d0ZDd0pBQWtBQ1FDQU5RY1VBYXc0VUFBRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRQUJDd3dCQzBFQUlRUkJBU0VQREFVTElCY0VRQ0FpS0FJQVFRVkhJQVJCQVhOeUJFQkJBQ0VFUVFFaER3d0dDd3NnQlFSQUlBY29BZ0JCbklVRGFpd0FBRVVFUUVFQUlRUkJBU0VQREFZTFFRQWtCU01GSVFSQkFDUUZJQVJCQVhFTkFRdEJBQ1FGSXdVaEJFRUFKQVVnQkVFQmNRMEFRUUFrQlVFVElBb1FCUm9qQlNFRVFRQWtCU0FFUVFGeERRQUNRQ0FIS0FJQVFaQ0ZBMm9zQUFBRVFDQWNLQUlBUVFOSERRRWdBVUdscVFKcUxBQUFSUTBCUVFBa0JVRVBJQUVnQ2tFWWFoQU5Jd1VoQkVFQUpBVWdCRUVCY1EwQ0N3dEJBQ1FGSXdVaEJFRUFKQVVnQkVFQmNRMEFBa0FnQnlnQ0FFR2tpUU5xTEFBQVJRUkFJQUZCektjQmFpZ0NBQ0VFUVFBa0JVRVBJQXBCR0dvaUJTQUVFQVloQkNNRklRaEJBQ1FGSUFoQkFYRU5BaUFFRFFFZ0ZVRUFOZ0pFSUJWQkVEWUNTQ0FWSUFGQkdHbzJBZ0FnRlVGQWEwRUNOZ0lBSUJVZ0JUWUNCRUVBSkFVakJTRUVRUUFrQlNBRVFRRnhEUUlMQ3lBYlFRRTZBQUJCQUNFRVFRRWhEd3dFQ3hBWElRQU1CQXNRRnlFQURBTUxFQmNoQUF3Q0N4QVhJUUFNQVFzZ0NoQndJQllRWENBUFJRUkFJQVFoRHd3SEN5QUNRUUZ4UVFCSElRSWdBMEVCY1VVaEF5QWZSUVJBSUFNaEFBd0dDeUFBUWRRQmFpSUFJQUFvQWdCQkFXbzJBZ0FnQXlFQURBVUxJQW9RY0FzZ0ZoQmNJQUFRSGdzTEVCY2hBQ0FXRUZ3Z0FCQWVDd3dCQ3lBbUxBQUFCSDlCQUFVZ0FrVUVRQ0FCUVp5OEEyb3NBQUFFUUNBQUJFQkJBQ0VQREFRTEJTQUJJQUZCa0x3RGFpa0RBRUVBSUFFb0FnQW9BaEJCQTNGQnVBSnFFUUlBQ3d0QkFRc2hEd3NnQmlRRUlBOFBDeUFBUWQzQkFHb3NBQUFFUUNBSEtBSUFJQUVnQUVIZ3dRQnFFSndFQ3d3Q0N5QUFRZDNCQUdvc0FBQUVRQ0FIS0FJQUlBRWdBRUhnd1FCcUVKc0VDd3dCQ3lBQlFjeXRBbW9zQUFCRkRRRWdBU0FBUVJCcVFRQWdEUkMxQVFSQUlBRWdBVUdJdkFOcUtRTUFRUUFnQVNnQ0FDZ0NFRUVEY1VHNEFtb1JBZ0FnQmlRRVFRRVBCVUdzOVFKQkFSQmtEQUlMQUFzZ0FTQUJRWkM4QTJvcEF3QkJBQ0FCS0FJQUtBSVFRUU54UWJnQ2FoRUNBQ0FHSkFSQkFROExJQVlrQkVFQUM1b0JBUUovSUFCQ0FEY0RBQ0FBUVJCcUlnTVF0d0lnQUNBQk5nSUlJQUJCQURZQzNBRWdBRUhnd1FCcVFRQTJBZ0FnQUVFQU5nTE1BVUVBSkFWQkJFSFl6UU1RQlNFQkl3VWhBa0VBSkFVZ0FrRUJjUVJBRUJjaEFpQURFSVFCSUFJUUhndEJBQ1FGUVFjZ0FTQURFQTBqQlNFQ1FRQWtCU0FDUVFGeFJRUkFJQUFnQVRZQ3lBRVBDeEFYSVFBZ0FSQlNJQU1RaEFFZ0FCQWVDNElEQWdkL0FYNGdBRUdRTW1vaEJrR0FnQVFnQUVHVU1tb2lBeWdDQUNJQ2EwR0FBa2tFUUNBQUtBSVFJZ1VnQlNBQ2FpQUdLQUlBSUFKcklnSVFVeG9nQTBFQU5nSUFJQVlnQWpZQ0FDQUFFT0lCR2lBREtBSUFJUUlMSUFKQkIyb2dCaWdDQUVzRVFFRUFEd3NnQVNBQVFSQnFJZ2NvQWdBZ0FtcEJCeERwQVNBRElBTW9BZ0JCQjJvMkFnQWdBUkNtQVNFSUlBRkJCQkM2QWlJQ1FYMXFJQUVRWVNJSnAyb2hCQ0FKUWdCUklBSkZJQVJCQUVoeWNnUkFJQUJCNkRGcVFRQTZBQUJCQUE4TElBWW9BZ0FnQXlnQ0FDSUNheUVGQWtBZ0JFRUFTZ1JBSUFFZ0J5Z0NBQ0FDYWlBRklBUkpCSDhnQlFVZ0JBc2lBaERwQVNBRElBTW9BZ0FnQW1vMkFnQWdCQ0FDYXlJQ1FRQktCRUFEUUFKQUlBTkJBRFlDQUNBR1FRQTJBZ0FnQUJEaUFVVUVRRUVBSVFBTUFRc2dBU0FIS0FJQUlBTW9BZ0JxSUFVZ0Fra0VmeUFGQlNBQ0N5SUVFT2tCSUFNZ0F5Z0NBQ0FFYWpZQ0FDQUNJQVJySWdKQkFFb05BUXdFQ3d0QkFBOExDd3NnQ0NBQkVMZ0NSZ3RPQVFGL0FrQUNRQUpBSUFKQm1Md0RhaWdDQUVFQ2F3NENBQUVDQ3lNRUlRUWpCRUdBRUdva0JDQUNRY3luQVdvb0FnQWFJQVFrQkVFQUR3c2dBQ0FESUFKQnNLY0JhaENkQkE4TFFRQUxSd0FnQUVISmlRTnFMQUFBQkVBUEN5QUFRWkNGQTJvc0FBQkZCRUFQQ3lBQlFaaThBMm9vQWdCQkFrY0VRQThMSUFGQmtLNENha0hNRVJCekJFQVBDeUFCSUFJUW9RUUxPQUFnQUVISmlRTnFMQUFBQkVBUEN5QUJRZWl0QW1vdUFRQkJnUUpIQkVBUEN5QUFRWkNGQTJvc0FBQkZCRUFQQ3lBQklBSVFvZ1FMclFFQkFuOGpCQ0VESXdSQmdCQnFKQVFnQWtIMHdRQnFJZ1FnQTBHQUVCQnBHZ0pBQWtBZ0FrSHd3UUJxS0FJQVFYNXhRUUpIRFFBZ0EwRzNNRUVFRUpBQ0JFQWdBMEc4TUVFRUVKQUNCRUFnQXlBRFFZQVFFSXNEREFJRlFRQWhBQXNGUVFBaEFBc01BUXNnQUVHVGhRTnFMQUFBUlFSQUlBTXNBQUJCTDBZRVFFRUFJUUFNQWdzZ0FrRWdhaUFFRUo4RVJRUkFRUUFoQUF3Q0N3c2dBeUFCRUo0RUlRQUxJQU1rQkNBQUM1WUJBUUovSXdRaEFpTUVRZEFRYWlRRUlBRWdBa0hRQUdvaUEwR0FFQkJwR2lBQUlBTVF0UU5CZjBjRVFDQUNKQVJCQVE4TFFZaThBeWdDQUVFUlJnUkFJQUpCQURZQ1JDQUNRZHNBTmdKSUlBSkJRR3RCQVRZQ0FDQUNJQUUyQWdBRklBSkJBRFlDUkNBQ1FSUTJBa2dnQWtFQU5nSUFJQUpCUUd0QkFqWUNBQ0FDSUFFMkFnUkJyUFVDUVFFUVpBc2dBaVFFUVFBTHB3TUJCSDhnQUNnQ0FFRXZSZ1JBUVFBUEN3SkFJQUFvQWdBaUF3UkFJQUFoQWtFQUlRQURRQ0FDUVFScUlRUUNRQ0FEUVM5R0JFQWdCQ2dDQUNJRFJRMEVJQU5CTDBjRVFBSkFJQVFvQWdCQkxrWUVRQ0FDUVFocUlnVW9BZ0JCTDBZRWYwRUJCU0FGS0FJQVJRc2hBeUFFS0FJQVFTNUdCRUFnQlNnQ0FFRXVSZ1JBSUFKQkRHb2lBaWdDQUVFdlJ3UkFJQUlvQWdBRVFDQUFRUUZxSVFJZ0F3MElJQUloQUF3RkN3c2dBdzBHREFNTEN5QUFRUUZxSVFJZ0EwVUVRQ0FDSVFBTEJTQUFRUUZxSVFBTEN3c0xDeUFFS0FJQUlnTUVRQ0FFSVFJTUFRc0xCVUVBSVFBTEN5QUJLQUlBUVM5R0JFQkJBQThGUVFBaEF5QUJJUUlMQTBBQ1FBSkFBa0FDUUFKQUlBSW9BZ0FPTHdBQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQkFnc01Bd3NnQWtFRWFpSUJLQUlBUVM1R0JFQWdBa0VJYWlJRUtBSUFRUzlIQkVBZ0JDZ0NBQTBEQ3lBREJFQWdBa0Y4YWlnQ0FFRXZSdzBEQ3lBQVFYOXFJUUFMREFFTElBSkJCR29oQVFzZ0EwRUJhaUVESUFFaEFnd0JDd3NnQUVGL1NndkhBZ0VFZndKQUl3UWhBaU1FUWRBUWFpUUVJQUVnQWtIUUFHb2lCVUdBRUJCcEdnSkFJQUJCcUtrQ2FpSURMQUFBQkVBZ0F4QTlJZ1FFUUNBQVFhaXRBbW9nQkNnQ0NEWUNBQXdDQ3lBQVFhYXBBbW9zQUFCRkJFQWdBeENVQVNFQklBSkJBRFlDUkNBQ1FkY0FOZ0pJREFNTEN3c0NRQ0FBUWFpckFtb2lBeXdBQUFSQUlBTVFQQ0lFQkVBZ0FFR3NyUUpxSUFRb0FnZzJBZ0FNQWdzZ0FFR25xUUpxTEFBQVJRUkFJQU1RbEFFaEFTQUNRUUEyQWtRZ0FrSFlBRFlDU0F3REN3c0xJQVVnQUVHb3JRSnFLQUlBSUFCQnJLMENhaWdDQUJETEFVVUVRQ0FDSkFRUEN5QUNRUUEyQWtRZ0FrSFpBRFlDU0NBQ0lBQkJHR28yQWdBZ0FrRkFhMEVDTmdJQUlBSWdBVFlDQkVHczlRSkJDUkJrSUFJa0JBOExJQUlnQUVFWWFqWUNBQ0FDUVVCclFRSTJBZ0FnQWlBQk5nSUVRYXoxQWtFQkVHUWdBaVFFQzVnQ0FRVi9Ba0FqQkNFQ0l3UkIwQ0JxSkFRZ0FTQUNRZEFRYWlJR1FZQVFFR2thSUFCQmtPNENhaWdDQUNJRUVHNUJBV29oQXlBQ1FkQUFhaUlGSUFRZ0Eyb2dBRUdVN2dKcUtBSUFJQU5ySWdNUXhnRWFJQVVnQTJwQkFEb0FBQ0FFRUQwaUEwVUVRQ0FFRUpRQklRRWdBa0VBTmdKRUlBSkIxd0EyQWtnTUFRc2dBeWdDQ0NFRUlBVVFQQ0lEUlFSQUlBVVFsQUVoQVNBQ1FRQTJBa1FnQWtIWUFEWUNTQXdCQ3lBR0lBUWdBeWdDQ0JETEFRUkFJQUpCQURZQ1JDQUNRZGtBTmdKSUlBSWdBRUVZYWpZQ0FDQUNRVUJyUVFJMkFnQWdBaUFCTmdJRVFhejFBa0VKRUdRTElBSWtCQThMSUFJZ0FFRVlhallDQUNBQ1FVQnJRUUkyQWdBZ0FpQUJOZ0lFUWF6MUFrRUJFR1FnQWlRRUM3OENBUVYvQWtBakJDRUNJd1JCMEJCcUpBUWdBU0FDUWRBQWFpSUZRWUFRRUdrYUlBQkJyTHdEYWl3QUFBUkFJQUpCQURZQ1JDQUNRZFlBTmdKSURBRUxRWWk4QTBFQU5nSUFJQUJCakxVRGFpSURFRDBpQkVVRVFDQURFSlFCSVFFZ0FrRUFOZ0pFSUFKQjF3QTJBa2dnQWlBQVFSaHFOZ0lBSUFKQlFHdEJBallDQUNBQ0lBRTJBZ1JCclBVQ1FRRVFaQ0FDSkFRUEN5QUVLQUlJSVFaQmlMd0RRUUEyQWdBZ0FFR010d05xSWdNUVBDSUVSUVJBSUFNUWxBRWhBU0FDUVFBMkFrUWdBa0hZQURZQ1NBd0JDeUFGSUFZZ0JDZ0NDQkRMQVFSQUlBSkJBRFlDUkNBQ1Fka0FOZ0pJSUFJZ0FFRVlhallDQUNBQ1FVQnJRUUkyQWdBZ0FpQUJOZ0lFUWF6MUFrRUpFR1FMSUFJa0JBOExJQUlnQUVFWWFqWUNBQ0FDUVVCclFRSTJBZ0FnQWlBQk5nSUVRYXoxQWtFREVHUWdBaVFFQ3lVQkFYOGpCQ0VESXdSQjBDQnFKQVFnQVNBQklBSVErQUVDUUNBREpBUkJBQThBQ3dBTGlnUUNDSDhDZmlNRUlRUWpCRUV3YWlRRUlBUkJDR29pQTBFQUVMZ0JRUUFrQlVFSElBQWdBeEFHSVFJakJTRUJRUUFrQlFKQUlBRkJBWEZGQkVBZ0FnUi9RUUFrQlVFRElBTVFUaG9qQlNFQlFRQWtCU0FCUVFGeERRSkJBQ1FGUVFNZ0F4Qk9yU01IclVJZ2hvUWhDU01GSVFGQkFDUUZJQUZCQVhFTkFrRUFKQVZCQXlBREVFNnRJd2V0UWlDR2hDRUtJd1VoQVVFQUpBVWdBVUVCY1EwQ0lBQkJtREpxSVFZZ0FFR2dNbW9pQ0NnQ0FDRUJJQUJCbkRKcUlnY2dDcWNpQlRZQ0FDQUJJQVZKQkVBZ0FFR2tNbW9vQWdBaUFrRUFSeUFDSUFWSmNRUi9RUUFrQlNBRUlBSTJBZ0JCQWtHczlRSkIyQnNnQkJBT0l3VWhBVUVBSkFVZ0FVRUJjUTBFUVFBa0JVRVVRYXoxQWhBTUl3VWhBVUVBSkFVZ0FVRUJjUTBFSUFnb0FnQWhBaUFIS0FJQUJTQUJJUUlnQlFzaEFTQUdLQUlBSUFFZ0FrRWdhaUFDUVFKMmFpSUNTd1IvSUFFRklBSWlBUXNRVnlJSFJRUkFRUUFrQlVFVVFhejFBaEFNSXdVaEFrRUFKQVVnQWtFQmNRMEVDeUFHSUFjMkFnQWdDQ0FCTmdJQUN5QUdLQUlBSVFGQkFDUUZRUklnQXlBQklBVVFCeG9qQlNFQlFRQWtCU0FCUVFGeERRSWdBRUdvTW1vZ0FFSHdNV29wQXdBZ0NYMDNBd0JCQVFWQkFBc2hBU0FES0FJQUlnQkZCRUFnQkNRRUlBRVBDeUFBRUZJZ0JDUUVJQUVQQ3dzUUZ5RUJJQU1vQWdBaUFFVUVRQ0FCRUI0TElBQVFVaUFCRUI1QkFBc1lBQ0FBS0FJQVFRSkhCRUJCQUE4TElBQW9BZ1JCZjNNTHR3d0JBbjhnQUVFQUlBQnJRVDl4SUFCcUlnSTJBdkFCSUFBZ0FrR0FBV28yQXZRQklBQWdBa0dnQVdvMkF2Z0JJQUFnQWtHb0FXbzJBdndCSUFBZ0FVWWlBd1JBSUFCQkFDQUFRWWdDYWlJQ2EwRS9jU0FDYWlJQ05nTDRBeUFBSUFKQmdBRnFOZ0w4QXlBQUlBSkJvQUZxTmdLQUJDQUFJQUpCcUFGcU5nS0VCQ0FBUVFBZ0FFR1FCR29pQW10QlAzRWdBbW9pQWpZQ2dBWWdBQ0FDUVlBQmFqWUNoQVlnQUNBQ1FhQUJhallDaUFZZ0FDQUNRYWdCYWpZQ2pBWWdBRUdJQ0dwQkFDQUFRWmdHYWlJQ2EwRS9jU0FDYWlJQ05nSUFJQUJCakFocUlBSkJnQUZxTmdJQUlBQkJrQWhxSUFKQm9BRnFOZ0lBSUFCQmxBaHFJQUpCcUFGcU5nSUFJQUJCa0FwcVFRQWdBRUdnQ0dvaUFtdEJQM0VnQW1vaUFqWUNBQ0FBUVpRS2FpQUNRWUFCYWpZQ0FDQUFRWmdLYWlBQ1FhQUJhallDQUNBQVFad0thaUFDUWFnQmFqWUNBQ0FBUVpnTWFrRUFJQUJCcUFwcUlnSnJRVDl4SUFKcUlnSTJBZ0FnQUVHY0RHb2dBa0dBQVdvMkFnQWdBRUdnREdvZ0FrR2dBV28yQWdBZ0FFR2tER29nQWtHb0FXbzJBZ0FnQUVHZ0RtcEJBQ0FBUWJBTWFpSUNhMEUvY1NBQ2FpSUNOZ0lBSUFCQnBBNXFJQUpCZ0FGcU5nSUFJQUJCcUE1cUlBSkJvQUZxTmdJQUlBQkJyQTVxSUFKQnFBRnFOZ0lBSUFCQnFCQnFRUUFnQUVHNERtb2lBbXRCUDNFZ0Ftb2lBallDQUNBQVFhd1FhaUFDUVlBQmFqWUNBQ0FBUWJBUWFpQUNRYUFCYWpZQ0FDQUFRYlFRYWlBQ1FhZ0JhallDQUFVZ0FpQUJLQUx3QVVHd0FSQlRHaUFBSUFFb0FvQUNOZ0tBQWlBQUlBRXNBSVFDT2dDRUFpQUFRUUFnQUVHSUFtb2lBbXRCUDNFZ0Ftb2lBallDK0FNZ0FDQUNRWUFCYWpZQy9BTWdBQ0FDUWFBQmFqWUNnQVFnQUNBQ1FhZ0JhallDaEFRZ0FpQUJLQUw0QTBHd0FSQlRHaUFBSUFFb0FvZ0VOZ0tJQkNBQUlBRXNBSXdFT2dDTUJDQUFRUUFnQUVHUUJHb2lBbXRCUDNFZ0Ftb2lBallDZ0FZZ0FDQUNRWUFCYWpZQ2hBWWdBQ0FDUWFBQmFqWUNpQVlnQUNBQ1FhZ0JhallDakFZZ0FpQUJLQUtBQmtHd0FSQlRHaUFBSUFFb0FwQUdOZ0tRQmlBQUlBRXNBSlFHT2dDVUJpQUFRWWdJYWtFQUlBQkJtQVpxSWdKclFUOXhJQUpxSWdJMkFnQWdBRUdNQ0dvZ0FrR0FBV28yQWdBZ0FFR1FDR29nQWtHZ0FXbzJBZ0FnQUVHVUNHb2dBa0dvQVdvMkFnQWdBaUFCUVlnSWFpZ0NBRUd3QVJCVEdpQUFRWmdJYWlBQlFaZ0lhaWdDQURZQ0FDQUFRWndJYWlBQlFad0lhaXdBQURvQUFDQUFRWkFLYWtFQUlBQkJvQWhxSWdKclFUOXhJQUpxSWdJMkFnQWdBRUdVQ21vZ0FrR0FBV28yQWdBZ0FFR1lDbW9nQWtHZ0FXbzJBZ0FnQUVHY0Ntb2dBa0dvQVdvMkFnQWdBaUFCUVpBS2FpZ0NBRUd3QVJCVEdpQUFRYUFLYWlBQlFhQUthaWdDQURZQ0FDQUFRYVFLYWlBQlFhUUthaXdBQURvQUFDQUFRWmdNYWtFQUlBQkJxQXBxSWdKclFUOXhJQUpxSWdJMkFnQWdBRUdjREdvZ0FrR0FBV28yQWdBZ0FFR2dER29nQWtHZ0FXbzJBZ0FnQUVHa0RHb2dBa0dvQVdvMkFnQWdBaUFCUVpnTWFpZ0NBRUd3QVJCVEdpQUFRYWdNYWlBQlFhZ01haWdDQURZQ0FDQUFRYXdNYWlBQlFhd01haXdBQURvQUFDQUFRYUFPYWtFQUlBQkJzQXhxSWdKclFUOXhJQUpxSWdJMkFnQWdBRUdrRG1vZ0FrR0FBV28yQWdBZ0FFR29EbW9nQWtHZ0FXbzJBZ0FnQUVHc0Rtb2dBa0dvQVdvMkFnQWdBaUFCUWFBT2FpZ0NBRUd3QVJCVEdpQUFRYkFPYWlBQlFiQU9haWdDQURZQ0FDQUFRYlFPYWlBQlFiUU9haXdBQURvQUFDQUFRYWdRYWtFQUlBQkJ1QTVxSWdKclFUOXhJQUpxSWdJMkFnQWdBRUdzRUdvZ0FrR0FBV28yQWdBZ0FFR3dFR29nQWtHZ0FXbzJBZ0FnQUVHMEVHb2dBa0dvQVdvMkFnQWdBaUFCUWFnUWFpZ0NBRUd3QVJCVEdpQUFRYmdRYWlBQlFiZ1FhaWdDQURZQ0FDQUFRYndRYWlBQlFid1FhaXdBQURvQUFBc2dBRUd3RW1wQkFDQUFRY0FRYWlJQ2EwRS9jU0FDYWlJQ05nSUFJQUJCdEJKcUlBSkJnQUZxTmdJQUlBQkJ1QkpxSUFKQm9BRnFOZ0lBSUFCQnZCSnFJQUpCcUFGcU5nSUFJQU1FUUNBQVFjZ1NhaUFCUWNnU2FrR0VCQkJUR2c4TElBSWdBVUd3RW1vb0FnQkJzQUVRVXhvZ0FFSEFFbW9nQVVIQUVtb29BZ0EyQWdBZ0FFSEVFbW9nQVVIRUVtb3NBQUE2QUFBZ0FFSElFbW9nQVVISUVtcEJoQVFRVXhvTEVBQWdBRUVBTmdJSUlBQkJBRFlDQUF0WUFRRi9JQUFnQVRZQ0FDQUJRWDlxUVFKSkJFQWdBRUVBTmdJRUR3c2dBVUVEUndSQUR3c2dBRUVFYWlJQ1FaY3dLUUFBTndBQUlBSkJuekFwQUFBM0FBZ2dBa0duTUNrQUFEY0FFQ0FDUWE4d0tRQUFOd0FZQzg4VUFRMS9Jd1FoQ3lNRVFZQUNhaVFFSUFzaENpQUFRY2dXYWlFTkEwQUNRQ0FOS0FJQUlnTWdCRUVHZENJSFN3UkFJQUFnQkVHSUFteHFJUVVnQXlBSGF5SURRY0FBU1FSL0lBTUZRY0FBSWdNTEJFQWdBQ0FFUVlnQ2JHcEI4QUZxSVF3Z0FDQUVRWWdDYkdwQitBRnFJUTRnQUVISUVtb2dCMm9oQnlBQUlBUkJpQUpzYWtHQUFtb2lBaWdDQUNFSUEwQUNRQ0FNS0FJQUlBaHFJUWtnQTBHQUFTQUlheUlHVFEwQUlBa2dCeUFHRUZNYUlBSWdBaWdDQUNBR2FqWUNBQ0FPS0FJQUlnZ29BZ0FoQ1NBSUlBbEJRR3MyQWdBZ0NFRUVhaUlJSUFnb0FnQWdDVUcvZjB0cU5nSUFJQVVnRENnQ0FCQnRJQXdvQWdBaUNFRkFheUVKSUFnZ0NTa0FBRGNBQUNBSUlBa3BBQWczQUFnZ0NDQUpLUUFRTndBUUlBZ2dDU2tBR0RjQUdDQUlJQWtwQUNBM0FDQWdDQ0FKS1FBb053QW9JQWdnQ1NrQU1EY0FNQ0FJSUFrcEFEZzNBRGdnQWlBQ0tBSUFRVUJxSWdnMkFnQWdCeUFHYWlFSElBTWdCbXNpQXcwQkRBUUxDeUFKSUFjZ0F4QlRHaUFDSUFJb0FnQWdBMm8yQWdBTEJTQUFJQVJCaUFKc2FpRUZDd3NnQlNBS0lBUkJCWFJxRU9BQklBUkJBV29pQkVFSVJ3MEFDeUFBUWNBUWFpRUlJQUJCc0JKcUlRY2dBRUc0RW1vaENVRWdJUU1nQ2lFRklBQkJ3QkpxSWdRb0FnQWhBQUpBQWtBRFFDQUhLQUlBSUFCcUlRSWdBMEdBQVNBQWF5SUdUUTBCSUFJZ0JTQUdFRk1hSUFRZ0JDZ0NBQ0FHYWpZQ0FDQUpLQUlBSWdBb0FnQWhBaUFBSUFKQlFHczJBZ0FnQUVFRWFpSUFJQUFvQWdBZ0FrRy9mMHRxTmdJQUlBZ2dCeWdDQUJCdElBY29BZ0FpQUVGQWF5RUNJQUFnQWlrQUFEY0FBQ0FBSUFJcEFBZzNBQWdnQUNBQ0tRQVFOd0FRSUFBZ0Fpa0FHRGNBR0NBQUlBSXBBQ0EzQUNBZ0FDQUNLUUFvTndBb0lBQWdBaWtBTURjQU1DQUFJQUlwQURnM0FEZ2dCQ0FFS0FJQVFVQnFJZ0EyQWdBZ0JTQUdhaUVGSUFNZ0Jtc2lBdzBBQ3d3QkN5QUNJQVVnQXhCVEdpQUVJQVFvQWdBZ0Eyb2lBRFlDQUF0QklDRUZJQXBCSUdvaEF3SkFBa0FEUUNBSEtBSUFJQUJxSVFJZ0JVR0FBU0FBYXlJR1RRMEJJQUlnQXlBR0VGTWFJQVFnQkNnQ0FDQUdhallDQUNBSktBSUFJZ0FvQWdBaEFpQUFJQUpCUUdzMkFnQWdBRUVFYWlJQUlBQW9BZ0FnQWtHL2YwdHFOZ0lBSUFnZ0J5Z0NBQkJ0SUFjb0FnQWlBRUZBYXlFQ0lBQWdBaWtBQURjQUFDQUFJQUlwQUFnM0FBZ2dBQ0FDS1FBUU53QVFJQUFnQWlrQUdEY0FHQ0FBSUFJcEFDQTNBQ0FnQUNBQ0tRQW9Od0FvSUFBZ0Fpa0FNRGNBTUNBQUlBSXBBRGczQURnZ0JDQUVLQUlBUVVCcUlnQTJBZ0FnQXlBR2FpRURJQVVnQm1zaUJRMEFDd3dCQ3lBQ0lBTWdCUkJUR2lBRUlBUW9BZ0FnQldvaUFEWUNBQXRCSUNFRklBcEJRR3NoQXdKQUFrQURRQ0FIS0FJQUlBQnFJUUlnQlVHQUFTQUFheUlHVFEwQklBSWdBeUFHRUZNYUlBUWdCQ2dDQUNBR2FqWUNBQ0FKS0FJQUlnQW9BZ0FoQWlBQUlBSkJRR3MyQWdBZ0FFRUVhaUlBSUFBb0FnQWdBa0cvZjB0cU5nSUFJQWdnQnlnQ0FCQnRJQWNvQWdBaUFFRkFheUVDSUFBZ0Fpa0FBRGNBQUNBQUlBSXBBQWczQUFnZ0FDQUNLUUFRTndBUUlBQWdBaWtBR0RjQUdDQUFJQUlwQUNBM0FDQWdBQ0FDS1FBb053QW9JQUFnQWlrQU1EY0FNQ0FBSUFJcEFEZzNBRGdnQkNBRUtBSUFRVUJxSWdBMkFnQWdBeUFHYWlFRElBVWdCbXNpQlEwQUN3d0JDeUFDSUFNZ0JSQlRHaUFFSUFRb0FnQWdCV29pQURZQ0FBdEJJQ0VGSUFwQjRBQnFJUU1DUUFKQUEwQWdCeWdDQUNBQWFpRUNJQVZCZ0FFZ0FHc2lCazBOQVNBQ0lBTWdCaEJUR2lBRUlBUW9BZ0FnQm1vMkFnQWdDU2dDQUNJQUtBSUFJUUlnQUNBQ1FVQnJOZ0lBSUFCQkJHb2lBQ0FBS0FJQUlBSkJ2MzlMYWpZQ0FDQUlJQWNvQWdBUWJTQUhLQUlBSWdCQlFHc2hBaUFBSUFJcEFBQTNBQUFnQUNBQ0tRQUlOd0FJSUFBZ0Fpa0FFRGNBRUNBQUlBSXBBQmczQUJnZ0FDQUNLUUFnTndBZ0lBQWdBaWtBS0RjQUtDQUFJQUlwQURBM0FEQWdBQ0FDS1FBNE53QTRJQVFnQkNnQ0FFRkFhaUlBTmdJQUlBTWdCbW9oQXlBRklBWnJJZ1VOQUFzTUFRc2dBaUFESUFVUVV4b2dCQ0FFS0FJQUlBVnFJZ0EyQWdBTFFTQWhCU0FLUVlBQmFpRURBa0FDUUFOQUlBY29BZ0FnQUdvaEFpQUZRWUFCSUFCcklnWk5EUUVnQWlBRElBWVFVeG9nQkNBRUtBSUFJQVpxTmdJQUlBa29BZ0FpQUNnQ0FDRUNJQUFnQWtGQWF6WUNBQ0FBUVFScUlnQWdBQ2dDQUNBQ1FiOS9TMm8yQWdBZ0NDQUhLQUlBRUcwZ0J5Z0NBQ0lBUVVCcklRSWdBQ0FDS1FBQU53QUFJQUFnQWlrQUNEY0FDQ0FBSUFJcEFCQTNBQkFnQUNBQ0tRQVlOd0FZSUFBZ0Fpa0FJRGNBSUNBQUlBSXBBQ2czQUNnZ0FDQUNLUUF3TndBd0lBQWdBaWtBT0RjQU9DQUVJQVFvQWdCQlFHb2lBRFlDQUNBRElBWnFJUU1nQlNBR2F5SUZEUUFMREFFTElBSWdBeUFGRUZNYUlBUWdCQ2dDQUNBRmFpSUFOZ0lBQzBFZ0lRVWdDa0dnQVdvaEF3SkFBa0FEUUNBSEtBSUFJQUJxSVFJZ0JVR0FBU0FBYXlJR1RRMEJJQUlnQXlBR0VGTWFJQVFnQkNnQ0FDQUdhallDQUNBSktBSUFJZ0FvQWdBaEFpQUFJQUpCUUdzMkFnQWdBRUVFYWlJQUlBQW9BZ0FnQWtHL2YwdHFOZ0lBSUFnZ0J5Z0NBQkJ0SUFjb0FnQWlBRUZBYXlFQ0lBQWdBaWtBQURjQUFDQUFJQUlwQUFnM0FBZ2dBQ0FDS1FBUU53QVFJQUFnQWlrQUdEY0FHQ0FBSUFJcEFDQTNBQ0FnQUNBQ0tRQW9Od0FvSUFBZ0Fpa0FNRGNBTUNBQUlBSXBBRGczQURnZ0JDQUVLQUlBUVVCcUlnQTJBZ0FnQXlBR2FpRURJQVVnQm1zaUJRMEFDd3dCQ3lBQ0lBTWdCUkJUR2lBRUlBUW9BZ0FnQldvaUFEWUNBQXRCSUNFRklBcEJ3QUZxSVFNQ1FBSkFBMEFnQnlnQ0FDQUFhaUVDSUFWQmdBRWdBR3NpQmswTkFTQUNJQU1nQmhCVEdpQUVJQVFvQWdBZ0JtbzJBZ0FnQ1NnQ0FDSUFLQUlBSVFJZ0FDQUNRVUJyTmdJQUlBQkJCR29pQUNBQUtBSUFJQUpCdjM5TGFqWUNBQ0FJSUFjb0FnQVFiU0FIS0FJQUlnQkJRR3NoQWlBQUlBSXBBQUEzQUFBZ0FDQUNLUUFJTndBSUlBQWdBaWtBRURjQUVDQUFJQUlwQUJnM0FCZ2dBQ0FDS1FBZ053QWdJQUFnQWlrQUtEY0FLQ0FBSUFJcEFEQTNBREFnQUNBQ0tRQTROd0E0SUFRZ0JDZ0NBRUZBYWlJQU5nSUFJQU1nQm1vaEF5QUZJQVpySWdVTkFBc01BUXNnQWlBRElBVVFVeG9nQkNBRUtBSUFJQVZxSWdBMkFnQUxRU0FoQlNBS1FlQUJhaUVLQWtBQ1FBTkFBa0FnQnlnQ0FDQUFhaUVESUFWQmdBRWdBR3NpQWswTkFDQURJQW9nQWhCVEdpQUVJQVFvQWdBZ0FtbzJBZ0FnQ1NnQ0FDSUFLQUlBSVFNZ0FDQURRVUJyTmdJQUlBQkJCR29pQUNBQUtBSUFJQU5CdjM5TGFqWUNBQ0FJSUFjb0FnQVFiU0FIS0FJQUlnQkJRR3NoQXlBQUlBTXBBQUEzQUFBZ0FDQURLUUFJTndBSUlBQWdBeWtBRURjQUVDQUFJQU1wQUJnM0FCZ2dBQ0FES1FBZ053QWdJQUFnQXlrQUtEY0FLQ0FBSUFNcEFEQTNBREFnQUNBREtRQTROd0E0SUFRZ0JDZ0NBRUZBYWlJQU5nSUFJQVVnQW1zaUJVVU5BaUFLSUFKcUlRb01BUXNMREFFTElBZ2dBUkRnQVNBTEpBUVBDeUFESUFvZ0JSQlRHaUFFSUFRb0FnQWdCV28yQWdBZ0NDQUJFT0FCSUFza0JBdXdBZ0lFZndOK0lBQkI2REZxSWdZc0FBQkZCRUJCQUE4TElBQkJxREpxSVFVZ0FFR2NNbW9oQnlBQVFiQXlhaUVFQTBBZ0JTa0RBQ0FIS0FJQXJYd2dCQ2tEQUZnRVFDQUFFS1FFRFFFTEN5QUdMQUFBUlFSQUlBQkJ1REpxTEFBQVJRUkFRUUFQQ3lBQUtBSUFJQVFwQXdCQkFCQ2NBVUVBRHdzZ0JDa0RBQ0lJSUFVcEF3QWlDVm9FUUNBSUlBS3RJZ3A4SUFrZ0J5Z0NBSzE4V0FSQUlBRWdBRUdZTW1vb0FnQWdDQ0FKZmFkcUlBSVFVeG9nQXlBQ05nSUFJQVFnQkNrREFDQUtmRGNEQUNBQVFiZ3lha0VCT2dBQVFRRVBDd3NnQUVHNE1tb2lCU3dBQUFSQUlBQW9BZ0FnQ0VFQUVKd0JJQVZCQURvQUFBc2dBQ2dDQUNBQklBSVExQUVpQUVFQVNBUi9JQVpCQURvQUFFRUFCU0FESUFBMkFnQWdCQ0FFS1FNQUlBQ3NmRGNEQUVFQkN3djJCZ0VQZjBHQUJDQUFRY2dXYWlJT0tBSUFJZ2RySVFZZ0IwVWdCaUFDUzNJRWZ5QUJJUWtnQWdVZ0FFSElFbW9nQjJvZ0FTQUdFRk1hQTBBZ0FDQURRWWdDYkdvaERDQUFJQU5CaUFKc2FrSHdBV29oQ0NBQUlBTkJpQUpzYWtINEFXb2hEVUhBQUNFS0lBQkJ5QkpxSUFOQkJuUnFJUXNnQUNBRFFZZ0NiR3BCZ0FKcUlnY29BZ0FoQkFKQUFrQURRQ0FJS0FJQUlBUnFJUVVnQ2tHQUFTQUVheUlKVFEwQklBVWdDeUFKRUZNYUlBY2dCeWdDQUNBSmFqWUNBQ0FOS0FJQUlnUW9BZ0FoQlNBRUlBVkJRR3MyQWdBZ0JFRUVhaUlFSUFRb0FnQWdCVUcvZjB0cU5nSUFJQXdnQ0NnQ0FCQnRJQWdvQWdBaUJFRkFheUVGSUFRZ0JTa0FBRGNBQUNBRUlBVXBBQWczQUFnZ0JDQUZLUUFRTndBUUlBUWdCU2tBR0RjQUdDQUVJQVVwQUNBM0FDQWdCQ0FGS1FBb053QW9JQVFnQlNrQU1EY0FNQ0FFSUFVcEFEZzNBRGdnQnlBSEtBSUFRVUJxSWdRMkFnQWdDeUFKYWlFTElBb2dDV3NpQ2cwQUN3d0JDeUFGSUFzZ0NoQlRHaUFISUFjb0FnQWdDbW8yQWdBTElBTkJBV29pQTBFSVJ3MEFDeUFCSUFacUlRbEJBQ0VISUFJZ0Jtc0xJZ3RCL3dOTElROUJBQ0VFQTBBZ0FDQUVRWWdDYkdvaEVDQVBCRUFnQUNBRVFZZ0NiR3BCOEFGcUlRMGdBQ0FFUVlnQ2JHcEIrQUZxSVJFZ0NTQUVRUVowYWlFQ0lBc2hDaUFBSUFSQmlBSnNha0dBQW1vaUNDZ0NBQ0VEQTBCQndBQWhCU0FDSVFFQ1FBSkFBMEFnRFNnQ0FDQURhaUVHSUFWQmdBRWdBMnNpREUwTkFTQUdJQUVnREJCVEdpQUlJQWdvQWdBZ0RHbzJBZ0FnRVNnQ0FDSURLQUlBSVFZZ0F5QUdRVUJyTmdJQUlBTkJCR29pQXlBREtBSUFJQVpCdjM5TGFqWUNBQ0FRSUEwb0FnQVFiU0FOS0FJQUlnTkJRR3NoQmlBRElBWXBBQUEzQUFBZ0F5QUdLUUFJTndBSUlBTWdCaWtBRURjQUVDQURJQVlwQUJnM0FCZ2dBeUFHS1FBZ053QWdJQU1nQmlrQUtEY0FLQ0FESUFZcEFEQTNBREFnQXlBR0tRQTROd0E0SUFnZ0NDZ0NBRUZBYWlJRE5nSUFJQUVnREdvaEFTQUZJQXhySWdVTkFDQURJUUVMREFFTElBWWdBU0FGRUZNYUlBZ2dDQ2dDQUNBRmFpSUJOZ0lBQ3lBQ1FZQUVhaUVDSUFwQmdIeHFJZ3BCL3dOTEJFQWdBU0VEREFFTEN3c2dCRUVCYWlJRVFRaEpEUUFMSUF0Qi93TnhJZ0ZGQkVBZ0RpQUJJQWRxTmdJQUR3c2dBRUhJRW1vZ0Iyb2dDU0FMSUFGcmFpQUJFRk1hSUE0Z0FTQUhhallDQUF1NUNnRURmeUFBUWNBUWFrRUFRZkFCRUZRYUlBQkJ3QkpxUVFBMkFnQWdBRUhFRW1vaUEwRUFPZ0FBSUFCQnlCSnFRUUJCaEFRUVZCb2dBRUcwRW1vaUFpZ0NBQ0lCUWF3UktRSUFOd0lBSUFGQnRCRXBBZ0EzQWdnZ0FVRzhFU2tDQURjQ0VDQUJRY1FSS1FJQU53SVlJQUlvQWdBaUFTQUJLQUlBUWFDQW9CQnpOZ0lBSUFGQkRHb2lBU0FCS0FJQVFZQ0FoSUFDY3pZQ0FDQUFRUUJCOEFFUVZCb2dBRUVBTmdLQUFpQUFRUUE2QUlRQ0lBQkI5QUZxSWdJb0FnQWlBVUdzRVNrQ0FEY0NBQ0FCUWJRUktRSUFOd0lJSUFGQnZCRXBBZ0EzQWhBZ0FVSEVFU2tDQURjQ0dDQUNLQUlBSWdFZ0FTZ0NBRUdnZ0tBUWN6WUNBQ0FCUVF4cUlnRWdBU2dDQUVHQWdJQ0FBbk0yQWdBZ0FFR0lBbXBCQUVId0FSQlVHaUFBUVFBMkFvZ0VJQUJCQURvQWpBUWdBRUg4QTJvaUFpZ0NBQ0lCUWF3UktRSUFOd0lBSUFGQnRCRXBBZ0EzQWdnZ0FVRzhFU2tDQURjQ0VDQUJRY1FSS1FJQU53SVlJQUlvQWdBaUFTQUJLQUlBUWFDQW9CQnpOZ0lBSUFGQkNHb2lBaUFDS0FJQVFRRnpOZ0lBSUFGQkRHb2lBU0FCS0FJQVFZQ0FnSUFDY3pZQ0FDQUFRWkFFYWtFQVFmQUJFRlFhSUFCQkFEWUNrQVlnQUVFQU9nQ1VCaUFBUVlRR2FpSUNLQUlBSWdGQnJCRXBBZ0EzQWdBZ0FVRzBFU2tDQURjQ0NDQUJRYndSS1FJQU53SVFJQUZCeEJFcEFnQTNBaGdnQWlnQ0FDSUJJQUVvQWdCQm9JQ2dFSE0yQWdBZ0FVRUlhaUlDSUFJb0FnQkJBbk0yQWdBZ0FVRU1haUlCSUFFb0FnQkJnSUNBZ0FKek5nSUFJQUJCbUFacVFRQkI4QUVRVkJvZ0FFR1lDR3BCQURZQ0FDQUFRWndJYWtFQU9nQUFJQUJCakFocUlnSW9BZ0FpQVVHc0VTa0NBRGNDQUNBQlFiUVJLUUlBTndJSUlBRkJ2QkVwQWdBM0FoQWdBVUhFRVNrQ0FEY0NHQ0FDS0FJQUlnRWdBU2dDQUVHZ2dLQVFjellDQUNBQlFRaHFJZ0lnQWlnQ0FFRURjellDQUNBQlFReHFJZ0VnQVNnQ0FFR0FnSUNBQW5NMkFnQWdBRUdnQ0dwQkFFSHdBUkJVR2lBQVFhQUtha0VBTmdJQUlBQkJwQXBxUVFBNkFBQWdBRUdVQ21vaUFpZ0NBQ0lCUWF3UktRSUFOd0lBSUFGQnRCRXBBZ0EzQWdnZ0FVRzhFU2tDQURjQ0VDQUJRY1FSS1FJQU53SVlJQUlvQWdBaUFTQUJLQUlBUWFDQW9CQnpOZ0lBSUFGQkNHb2lBaUFDS0FJQVFRUnpOZ0lBSUFGQkRHb2lBU0FCS0FJQVFZQ0FnSUFDY3pZQ0FDQUFRYWdLYWtFQVFmQUJFRlFhSUFCQnFBeHFRUUEyQWdBZ0FFR3NER3BCQURvQUFDQUFRWndNYWlJQ0tBSUFJZ0ZCckJFcEFnQTNBZ0FnQVVHMEVTa0NBRGNDQ0NBQlFid1JLUUlBTndJUUlBRkJ4QkVwQWdBM0FoZ2dBaWdDQUNJQklBRW9BZ0JCb0lDZ0VITTJBZ0FnQVVFSWFpSUNJQUlvQWdCQkJYTTJBZ0FnQVVFTWFpSUJJQUVvQWdCQmdJQ0FnQUp6TmdJQUlBQkJzQXhxUVFCQjhBRVFWQm9nQUVHd0RtcEJBRFlDQUNBQVFiUU9ha0VBT2dBQUlBQkJwQTVxSWdJb0FnQWlBVUdzRVNrQ0FEY0NBQ0FCUWJRUktRSUFOd0lJSUFGQnZCRXBBZ0EzQWhBZ0FVSEVFU2tDQURjQ0dDQUNLQUlBSWdFZ0FTZ0NBRUdnZ0tBUWN6WUNBQ0FCUVFocUlnSWdBaWdDQUVFR2N6WUNBQ0FCUVF4cUlnRWdBU2dDQUVHQWdJQ0FBbk0yQWdBZ0FFRzREbXBCQUVId0FSQlVHaUFBUWJnUWFrRUFOZ0lBSUFCQnJCQnFJZ0lvQWdBaUFVR3NFU2tDQURjQ0FDQUJRYlFSS1FJQU53SUlJQUZCdkJFcEFnQTNBaEFnQVVIRUVTa0NBRGNDR0NBQ0tBSUFJZ0VnQVNnQ0FFR2dnS0FRY3pZQ0FDQUJRUWhxSWdJZ0FpZ0NBRUVIY3pZQ0FDQUJRUXhxSWdFZ0FTZ0NBRUdBZ0lDQUFuTTJBZ0FnQTBFQk9nQUFJQUJCdkJCcVFRRTZBQUFMUndBZ0FFR0J4cFM2QmpZQ0FDQUFRWW5YdHY1K05nSUVJQUJCL3JucnhYazJBZ2dnQUVIMnFNbUJBVFlDRENBQVFmRER5NTU4TmdJUUlBQkJBRFlDR0NBQVFRQTJBaFFMM0JjQmFuOGdBa1VFUUE4TElBQkJDR29pTGl3QUFDRVZJQUJCQ1dvaUx5d0FBQ0VXSUFCQkNtb2lNQ3dBQUNFWElBQkJDMm9pTVN3QUFDRVlJQUJCREdvaU1pd0FBQ0VaSUFCQkRXb2lNeXdBQUNFYUlBQkJEbW9pTkN3QUFDRWJJQUJCRDJvaU5Td0FBQ0VjSUFCQkVHb2lOaXdBQUNFZElBQkJFV29pTnl3QUFDRWVJQUJCRW1vaU9Dd0FBQ0VmSUFCQkUyb2lPU3dBQUNFZ0lBQkJGR29pT2l3QUFDRWhJQUJCRldvaU95d0FBQ0VpSUFCQkZtb2lQQ3dBQUNFaklBQkJGMm9pUFN3QUFDRWtJQUpCQkhZaUpRUkFJQUJCQkdvaFBpQUFRU2hxSVQ4Z0FFRXBhaUZBSUFCQkttb2hRU0FBUVN0cUlVSWdBRUVzYWlGRElBQkJMV29oUkNBQVFTNXFJVVVnQUVFdmFpRkdJQUJCTUdvaFJ5QUFRVEZxSVVnZ0FFRXlhaUZKSUFCQk0yb2hTaUFBUVRScUlVc2dBRUUxYWlGTUlBQkJObW9oVFNBQVFUZHFJVTRnQUVFWWFpRlBJQUJCR1dvaFVDQUFRUnBxSVZFZ0FFRWJhaUZTSUFCQkhHb2hVeUFBUVIxcUlWUWdBRUVlYWlGVklBQkJIMm9oVmlBQVFTQnFJVmNnQUVFaGFpRllJQUJCSW1vaFdTQUFRU05xSVZvZ0FFRWthaUZiSUFCQkpXb2hYQ0FBUVNacUlWMGdBRUVuYWlGZUEwQWdBQ0ErS0FJQUlnSkJCSFJxTEFBYklBRkJBMm9pWHl3QUFITWhEU0FBSUFKQkJIUnFMQUFlSUFGQkJtb2lZQ3dBQUhNaERpQUFJQUpCQkhScUxBQWhJQUZCQ1dvaVlTd0FBSE1oRHlBQUlBSkJCSFJxTEFBa0lBRkJER29pWWl3QUFITWhFQ0FBSUFKQkJIUnFMQUFhSUFGQkFtb2lZeXdBQUhNaEVTQUFJQUpCQkhScUxBQWRJQUZCQldvaVpDd0FBSE1oRWlBQUlBSkJCSFJxTEFBZ0lBRkJDR29pWlN3QUFITWhDU0FBSUFKQkJIUnFMQUFqSUFGQkMyb2laaXdBQUhNaENpQUFJQUpCQkhScUxBQW1JQUZCRG1vaVp5d0FBSE1oQ3lBQUlBSkJCSFJxTEFBWklBRkJBV29pYUN3QUFITWhEQ0FBSUFKQkJIUnFMQUFjSUFGQkJHb2lhU3dBQUhNaEV5QUFJQUpCQkhScUxBQWZJQUZCQjJvaWFpd0FBSE1oQnlBQUlBSkJCSFJxTEFBaUlBRkJDbW9pYXl3QUFITWhCU0FBSUFKQkJIUnFMQUFsSUFGQkRXb2liQ3dBQUhNaEJpQUFRUmhxSUFKQkJIUnFMQUFBSUFFc0FBQnpJUlFnQVVFUGFpSnRMQUFBSVFnRFFDQUdRZjhCY1NJRVFRSjBRZHpRQTJvc0FBQWdGRUgvQVhFaUJrRUNkRUhjMkFOcUxBQUFjeUFGUWY4QmNTSUZRUUowUWR6SUEyb3NBQUJ6SUFkQi93RnhJZ2RCQW5SQjNNQURhaXdBQUhNaEZDQUVRUUowUWQzUUEyb3NBQUFnQmtFQ2RFSGQyQU5xTEFBQWN5QUZRUUowUWQzSUEyb3NBQUJ6SUFkQkFuUkIzY0FEYWl3QUFITWhKaUFFUVFKMFFkN1FBMm9zQUFBZ0JrRUNkRUhlMkFOcUxBQUFjeUFGUVFKMFFkN0lBMm9zQUFCeklBZEJBblJCM3NBRGFpd0FBSE1oSnlBRVFRSjBRZC9RQTJvc0FBQWdCa0VDZEVIZjJBTnFMQUFBY3lBRlFRSjBRZC9JQTJvc0FBQnpJQWRCQW5SQjM4QURhaXdBQUhNaEtDQU1RZjhCY1NJRVFRSjBRZHpRQTJvc0FBQWdFMEgvQVhFaUJrRUNkRUhjMkFOcUxBQUFjeUFMUWY4QmNTSUZRUUowUWR6SUEyb3NBQUJ6SUFwQi93RnhJZ2RCQW5SQjNNQURhaXdBQUhNaEV5QUVRUUowUWQzUUEyb3NBQUFnQmtFQ2RFSGQyQU5xTEFBQWN5QUZRUUowUWQzSUEyb3NBQUJ6SUFkQkFuUkIzY0FEYWl3QUFITWhDaUFFUVFKMFFkN1FBMm9zQUFBZ0JrRUNkRUhlMkFOcUxBQUFjeUFGUVFKMFFkN0lBMm9zQUFCeklBZEJBblJCM3NBRGFpd0FBSE1oQ3lBRVFRSjBRZC9RQTJvc0FBQWdCa0VDZEVIZjJBTnFMQUFBY3lBRlFRSjBRZC9JQTJvc0FBQnpJQWRCQW5SQjM4QURhaXdBQUhNaEJ5QVNRZjhCY1NJRVFRSjBRZHpRQTJvc0FBQWdDVUgvQVhFaUJrRUNkRUhjMkFOcUxBQUFjeUFSUWY4QmNTSUZRUUowUWR6SUEyb3NBQUJ6SUFBZ0FrRUVkR29zQUNjZ0NITkIvd0Z4SWdoQkFuUkIzTUFEYWl3QUFITWhDU0FFUVFKMFFkM1FBMm9zQUFBZ0JrRUNkRUhkMkFOcUxBQUFjeUFGUVFKMFFkM0lBMm9zQUFCeklBaEJBblJCM2NBRGFpd0FBSE1oRENBRVFRSjBRZDdRQTJvc0FBQWdCa0VDZEVIZTJBTnFMQUFBY3lBRlFRSjBRZDdJQTJvc0FBQnpJQWhCQW5SQjNzQURhaXdBQUhNaEtTQUVRUUowUWQvUUEyb3NBQUFnQmtFQ2RFSGYyQU5xTEFBQWN5QUZRUUowUWQvSUEyb3NBQUJ6SUFoQkFuUkIzOEFEYWl3QUFITWhLaUFQUWY4QmNTSUVRUUowUWR6UUEyb3NBQUFnRUVIL0FYRWlDRUVDZEVIYzJBTnFMQUFBY3lBT1FmOEJjU0lHUVFKMFFkeklBMm9zQUFCeklBMUIvd0Z4SWdWQkFuUkIzTUFEYWl3QUFITWhLeUFFUVFKMFFkM1FBMm9zQUFBZ0NFRUNkRUhkMkFOcUxBQUFjeUFHUVFKMFFkM0lBMm9zQUFCeklBVkJBblJCM2NBRGFpd0FBSE1oTENBRVFRSjBRZDdRQTJvc0FBQWdDRUVDZEVIZTJBTnFMQUFBY3lBR1FRSjBRZDdJQTJvc0FBQnpJQVZCQW5SQjNzQURhaXdBQUhNaExTQUVRUUowUWQvUUEyb3NBQUFnQ0VFQ2RFSGYyQU5xTEFBQWN5QUdRUUowUWQvSUEyb3NBQUJ6SUFWQkFuUkIzOEFEYWl3QUFITWhDQ0FDUVg5cUlRUWdBa0VDU2dSQUlBQWdCRUVFZEdvc0FCc2dLSE1oRFNBQUlBUkJCSFJxTEFBZUlBdHpJUTRnQUNBRVFRUjBhaXdBSVNBTWN5RVBJQUFnQkVFRWRHb3NBQ1FnSzNNaEVDQUFJQVJCQkhScUxBQWFJQ2R6SVJFZ0FDQUVRUVIwYWl3QUhTQUtjeUVTSUFBZ0JFRUVkR29zQUNBZ0NYTWhDU0FBSUFSQkJIUnFMQUFqSUNweklRb2dBQ0FFUVFSMGFpd0FKaUF0Y3lFTElBQWdCRUVFZEdvc0FCa2dKbk1oRENBQUlBUkJCSFJxTEFBY0lCTnpJUk1nQUNBRVFRUjBhaXdBSHlBSGN5RUhJQUFnQkVFRWRHb3NBQ0lnS1hNaEJTQUFJQVJCQkhScUxBQWxJQ3h6SVFZZ0FFRVlhaUFFUVFSMGFpd0FBQ0FVY3lFVUlBUWhBZ3dCQ3dzZ1R5d0FBQ0EvTEFBQUlCUnpRZjhCY1VIY3ZnTnFMQUFBY3lFQ0lGQXNBQUFnVEN3QUFDQXNjMEgvQVhGQjNMNERhaXdBQUhNaEJDQlJMQUFBSUVrc0FBQWdLWE5CL3dGeFFkeStBMm9zQUFCeklRWWdVaXdBQUNCR0xBQUFJQWR6UWY4QmNVSGN2Z05xTEFBQWN5RUZJRk1zQUFBZ1F5d0FBQ0FUYzBIL0FYRkIzTDREYWl3QUFITWhCeUJVTEFBQUlFQXNBQUFnSm5OQi93RnhRZHkrQTJvc0FBQnpJUTBnVlN3QUFDQk5MQUFBSUMxelFmOEJjVUhjdmdOcUxBQUFjeUVPSUZZc0FBQWdTaXdBQUNBcWMwSC9BWEZCM0w0RGFpd0FBSE1oRHlCWExBQUFJRWNzQUFBZ0NYTkIvd0Z4UWR5K0Eyb3NBQUJ6SVJBZ1dDd0FBQ0JFTEFBQUlBcHpRZjhCY1VIY3ZnTnFMQUFBY3lFUklGa3NBQUFnUVN3QUFDQW5jMEgvQVhGQjNMNERhaXdBQUhNaEVpQmFMQUFBSUU0c0FBQWdDSE5CL3dGeFFkeStBMm9zQUFCeklRZ2dXeXdBQUNCTExBQUFJQ3R6UWY4QmNVSGN2Z05xTEFBQWN5RUpJRndzQUFBZ1NDd0FBQ0FNYzBIL0FYRkIzTDREYWl3QUFITWhDaUJkTEFBQUlFVXNBQUFnQzNOQi93RnhRZHkrQTJvc0FBQnpJUXNnWGl3QUFDQkNMQUFBSUNoelFmOEJjVUhjdmdOcUxBQUFjeUVNSUFBc0FBQUVRQ0FDSUJWeklRSWdFaUFmY3lFU0lBZ2dJSE1oQ0NBSklDRnpJUWtnQkNBV2N5RUVJQW9nSW5NaENpQUxJQ056SVFzZ0RDQWtjeUVNSUFZZ0YzTWhCaUFGSUJoeklRVWdCeUFaY3lFSElBMGdHbk1oRFNBT0lCdHpJUTRnRHlBY2N5RVBJQkFnSFhNaEVDQVJJQjV6SVJFTElBRXNBQUFoRlNCb0xBQUFJUllnWXl3QUFDRVhJRjhzQUFBaEdDQnBMQUFBSVJrZ1pDd0FBQ0VhSUdBc0FBQWhHeUJxTEFBQUlSd2daU3dBQUNFZElHRXNBQUFoSGlCckxBQUFJUjhnWml3QUFDRWdJR0lzQUFBaElTQnNMQUFBSVNJZ1p5d0FBQ0VqSUcwc0FBQWhKQ0FESUFJNkFBQWdBeUFFT2dBQklBTWdCam9BQWlBRElBVTZBQU1nQXlBSE9nQUVJQU1nRFRvQUJTQURJQTQ2QUFZZ0F5QVBPZ0FISUFNZ0VEb0FDQ0FESUJFNkFBa2dBeUFTT2dBS0lBTWdDRG9BQ3lBRElBazZBQXdnQXlBS09nQU5JQU1nQ3pvQURpQURJQXc2QUE4Z0FVRVFhaUVCSUFOQkVHb2hBeUFsUVg5cUlpVU5BQXNMSUM0Z0ZUb0FBQ0F2SUJZNkFBQWdNQ0FYT2dBQUlERWdHRG9BQUNBeUlCazZBQUFnTXlBYU9nQUFJRFFnR3pvQUFDQTFJQnc2QUFBZ05pQWRPZ0FBSURjZ0hqb0FBQ0E0SUI4NkFBQWdPU0FnT2dBQUlEb2dJVG9BQUNBN0lDSTZBQUFnUENBak9nQUFJRDBnSkRvQUFBdktDZ0VqZnlNRUlRRWpCRUVRYWlRRUlBQkJCR29pRkNnQ0FFRUJUQVJBSUFFa0JBOExJQUVpQWtFRWFpRVZJQUpCQ0dvaEZpQUNRUXhxSVJjZ0FrRUJhaUVZSUFKQkJXb2hHU0FDUVFscUlSb2dBa0VOYWlFYklBSkJBbW9oSENBQ1FRWnFJUjBnQWtFS2FpRWVJQUpCRG1vaEh5QUNRUU5xSVNBZ0FrRUhhaUVoSUFKQkMyb2hJaUFDUVE5cUlTTkJBU0VCQTBBZ0FDQUJRUVIwYWkwQUhDRURJQUFnQVVFRWRHb3RBQjBoQkNBQUlBRkJCSFJxTFFBZUlRVWdBQ0FCUVFSMGFpMEFIeUVHSUFBZ0FVRUVkR290QUNBaEJ5QUFJQUZCQkhScUxRQWhJUWdnQUNBQlFRUjBhaTBBSWlFSklBQWdBVUVFZEdvdEFDTWhDaUFBSUFGQkJIUnFMUUFrSVFzZ0FDQUJRUVIwYWkwQUpTRU1JQUFnQVVFRWRHb3RBQ1loRFNBQUlBRkJCSFJxTFFBbklRNGdBaUFBSUFGQkJIUnFMUUFaSWc5QkFuUkIzUEFEYWl3QUFDQUFRUmhxSUFGQkJIUnFJaE10QUFBaUVFRUNkRUhjK0FOcUxBQUFjeUFBSUFGQkJIUnFMUUFhSWhGQkFuUkIzT2dEYWl3QUFITWdBQ0FCUVFSMGFpMEFHeUlTUVFKMFFkemdBMm9zQUFCek9nQUFJQlVnQkVFQ2RFSGM4QU5xTEFBQUlBTkJBblJCM1BnRGFpd0FBSE1nQlVFQ2RFSGM2QU5xTEFBQWN5QUdRUUowUWR6Z0Eyb3NBQUJ6T2dBQUlCWWdDRUVDZEVIYzhBTnFMQUFBSUFkQkFuUkIzUGdEYWl3QUFITWdDVUVDZEVIYzZBTnFMQUFBY3lBS1FRSjBRZHpnQTJvc0FBQnpPZ0FBSUJjZ0RFRUNkRUhjOEFOcUxBQUFJQXRCQW5SQjNQZ0RhaXdBQUhNZ0RVRUNkRUhjNkFOcUxBQUFjeUFPUVFKMFFkemdBMm9zQUFCek9nQUFJQmdnRDBFQ2RFSGQ4QU5xTEFBQUlCQkJBblJCM2ZnRGFpd0FBSE1nRVVFQ2RFSGQ2QU5xTEFBQWN5QVNRUUowUWQzZ0Eyb3NBQUJ6T2dBQUlCa2dCRUVDZEVIZDhBTnFMQUFBSUFOQkFuUkIzZmdEYWl3QUFITWdCVUVDZEVIZDZBTnFMQUFBY3lBR1FRSjBRZDNnQTJvc0FBQnpPZ0FBSUJvZ0NFRUNkRUhkOEFOcUxBQUFJQWRCQW5SQjNmZ0RhaXdBQUhNZ0NVRUNkRUhkNkFOcUxBQUFjeUFLUVFKMFFkM2dBMm9zQUFCek9nQUFJQnNnREVFQ2RFSGQ4QU5xTEFBQUlBdEJBblJCM2ZnRGFpd0FBSE1nRFVFQ2RFSGQ2QU5xTEFBQWN5QU9RUUowUWQzZ0Eyb3NBQUJ6T2dBQUlCd2dEMEVDZEVIZThBTnFMQUFBSUJCQkFuUkIzdmdEYWl3QUFITWdFVUVDZEVIZTZBTnFMQUFBY3lBU1FRSjBRZDdnQTJvc0FBQnpPZ0FBSUIwZ0JFRUNkRUhlOEFOcUxBQUFJQU5CQW5SQjN2Z0RhaXdBQUhNZ0JVRUNkRUhlNkFOcUxBQUFjeUFHUVFKMFFkN2dBMm9zQUFCek9nQUFJQjRnQ0VFQ2RFSGU4QU5xTEFBQUlBZEJBblJCM3ZnRGFpd0FBSE1nQ1VFQ2RFSGU2QU5xTEFBQWN5QUtRUUowUWQ3Z0Eyb3NBQUJ6T2dBQUlCOGdERUVDZEVIZThBTnFMQUFBSUF0QkFuUkIzdmdEYWl3QUFITWdEVUVDZEVIZTZBTnFMQUFBY3lBT1FRSjBRZDdnQTJvc0FBQnpPZ0FBSUNBZ0QwRUNkRUhmOEFOcUxBQUFJQkJCQW5SQjMvZ0RhaXdBQUhNZ0VVRUNkRUhmNkFOcUxBQUFjeUFTUVFKMFFkL2dBMm9zQUFCek9nQUFJQ0VnQkVFQ2RFSGY4QU5xTEFBQUlBTkJBblJCMy9nRGFpd0FBSE1nQlVFQ2RFSGY2QU5xTEFBQWN5QUdRUUowUWQvZ0Eyb3NBQUJ6T2dBQUlDSWdDRUVDZEVIZjhBTnFMQUFBSUFkQkFuUkIzL2dEYWl3QUFITWdDVUVDZEVIZjZBTnFMQUFBY3lBS1FRSjBRZC9nQTJvc0FBQnpPZ0FBSUNNZ0RFRUNkRUhmOEFOcUxBQUFJQXRCQW5SQjMvZ0RhaXdBQUhNZ0RVRUNkRUhmNkFOcUxBQUFjeUFPUVFKMFFkL2dBMm9zQUFCek9nQUFJQk1nQWlrQUFEY0FBQ0FUSUFJcEFBZzNBQWdnQVVFQmFpSUJJQlFvQWdCSURRQUxJQUlrQkF2ZUNnRWhmeU1FSVFJakJFRWdhaVFFSUFCQkJHb2lEaWdDQUNJRVFYcHFJUXNnQWlBQktRQUFOd0FBSUFJZ0FTa0FDRGNBQ0NBQ0lBRXBBQkEzQUJBZ0FpQUJLUUFZTndBWUlBUkJCa29pQlFSQVFRQWhBUU5BSUFvZ0MwZ2dBVUVFU0hFRVFDQUtJUU1nQVNFR1FRQWhDUU5BSUFCQkdHb2dCMEVFZEdvZ0FTQUpha0VDZEdvZ0FpQUtJQWxxUVFKMGFpZ0FBRFlBQUNBR1FRRnFJUWdnQ1VFQmFpRUpJQU5CQVdvaUF5QUxTQ0FHUVFOSWNRUkFJQWdoQmd3QkJTQUlJUUVnQXlFS0N3c0xJQWNnQVVFRVJpSURhaUVHSUFNRVFFRUFJUUVMSUFvZ0MwNGdCaUFPS0FJQUlnTktjZ1JBSUFFaENpQUdJUUVnQXlFR0JTQUdJUWNNQVFzTEJVRUFJUUVnQkNFR0N5QUJJQVpLQkVBZ0FpUUVEd3NnQWlBRVFYbHFJZ05CQW5ScVFRRnFJUllnQWlBRFFRSjBha0VDYWlFWElBSkJBV29oRHlBQ0lBTkJBblJxUVFOcUlSZ2dBa0VDYWlFUUlBSWdBMEVDZEdvaEdTQUNRUU5xSVJFZ0MwRUlSaUVhSUFSQkIwb2hHeUFDSUF0QkFtMGlERUYvYWlJRFFRSjBhaUVjSUFJZ0RFRUNkR29oRWlBQ0lBTkJBblJxUVFGcUlSMGdBaUFNUVFKMGFrRUJhaUVUSUFJZ0EwRUNkR3BCQW1vaEhpQUNJQXhCQW5ScVFRSnFJUlFnQWlBRFFRSjBha0VEYWlFZklBSWdERUVDZEdwQkEyb2hGU0FFUVJSSUlTQWdERUVCYWlFaElBVkJBWE1oSWdOQUlBSWdBaXdBQUNBV0xRQUFRYjY4QTJvc0FBQnpJZ002QUFBZ0R5QVBMQUFBSUJjdEFBQkJ2cndEYWl3QUFITWlDRG9BQUNBUUlCQXNBQUFnR0MwQUFFRyt2QU5xTEFBQWN5SUpPZ0FBSUJFZ0VTd0FBQ0FaTFFBQVFiNjhBMm9zQUFCeklnYzZBQUFnQWlBRElBMUJ2cjREYWl3QUFITWlCRG9BQUNBYUJFQkJBU0VGSUFnaEF5QUpJUWdnQnlFSklBUWhCd05BSUFJZ0JVRUNkR29pQkN3QUFDQUhjeUVISUFRZ0J6b0FBQ0FDSUFWQkFuUnFRUUZxSWdRc0FBQWdBM01oQXlBRUlBTTZBQUFnQWlBRlFRSjBha0VDYWlJRUxBQUFJQWh6SVFnZ0JDQUlPZ0FBSUFJZ0JVRUNkR3BCQTJvaUJDd0FBQ0FKY3lFSklBUWdDVG9BQUNBRlFRRnFJZ1VnREVnTkFBc2dFaUFTTEFBQUlCd3RBQUJCdnJ3RGFpd0FBSE1pQ0RvQUFDQVRJQk1zQUFBZ0hTMEFBRUcrdkFOcUxBQUFjeUlKT2dBQUlCUWdGQ3dBQUNBZUxRQUFRYjY4QTJvc0FBQnpJZ2M2QUFBZ0ZTQVZMQUFBSUI4dEFBQkJ2cndEYWl3QUFITWlCRG9BQUNBZ0JFQWdJU0VEQTBBZ0FpQURRUUowYWlJRkxBQUFJQWh6SVFnZ0JTQUlPZ0FBSUFJZ0EwRUNkR3BCQVdvaUJTd0FBQ0FKY3lFSklBVWdDVG9BQUNBQ0lBTkJBblJxUVFKcUlnVXNBQUFnQjNNaEJ5QUZJQWM2QUFBZ0FpQURRUUowYWtFRGFpSUZMQUFBSUFSeklRUWdCU0FFT2dBQUlBTkJBV29pQTBFSVJ3MEFDd3NGSUJzRVFFRUJJUVVnQkNFREEwQWdBaUFGUVFKMGFpSUVMQUFBSUFOeklRTWdCQ0FET2dBQUlBSWdCVUVDZEdwQkFXb2lCQ3dBQUNBSWN5RUlJQVFnQ0RvQUFDQUNJQVZCQW5ScVFRSnFJZ1FzQUFBZ0NYTWhDU0FFSUFrNkFBQWdBaUFGUVFKMGFrRURhaUlFTEFBQUlBZHpJUWNnQkNBSE9nQUFJQVZCQVdvaUJTQUxSdzBBQ3dzTElBRWdCa29nSW5KRkJFQWdBU0VESUFvaEFVRUFJUW9EUUNBS0lBdElJQUZCQkVoeEJFQWdBU0VHSUFvaENFRUFJUWNEUUNBQVFSaHFJQU5CQkhScUlBRWdCMnBCQW5ScUlBSWdDaUFIYWtFQ2RHb29BQUEyQUFBZ0JrRUJhaUVKSUFkQkFXb2hCeUFJUVFGcUlnZ2dDMGdnQmtFRFNIRUVRQ0FKSVFZTUFRVWdDU0VCSUFnaENnc0xDeUFESUFGQkJFWWlCbW9oQXlBR0JIOUJBQVVnQVFzaEJpQUtJQXRPSUFNZ0RpZ0NBQ0lJU25JRVFDQURJUUVnQmlFS0lBZ2hCZ1VnQmlFQkRBRUxDd3NnRFVFQmFpRU5JQUVnQmt3TkFBc2dBaVFFQzdVSkFRVi9Jd1FoQXlNRVFZQUdhaVFFSUFOQmdBSnFJUVJCQVNFQUEwQWdCQ0FDYWlBQVFmOEJjU0lCT2dBQUlBUWdBa0gvQVdwcUlBRTZBQUFnQWtFQmFpRUJJQU1nQUdvZ0Fqb0FBQ0FBUVFGMElBQnpJQUJCZ0FGeEJIOUJtd0lGUVFBTGN5SUFRUUZIQkVBZ0FTRUNEQUVMQzBHK3ZnTkJBVG9BQUVHL3ZnTkJBam9BQUVIQXZnTkJCRG9BQUVIQnZnTkJDRG9BQUVIQ3ZnTkJFRG9BQUVIRHZnTkJJRG9BQUVIRXZnTkJ3QUE2QUFCQnhiNERRWUIvT2dBQVFjYStBMEViT2dBQVFjZStBMEUyT2dBQVFjaStBMEhzQURvQUFFSEp2Z05CV0RvQUFFSEt2Z05CcTM4NkFBQkJ5NzREUWMwQU9nQUFRY3krQTBHYWZ6b0FBRUhOdmdOQkx6b0FBRUhPdmdOQjNnQTZBQUJCejc0RFFieC9PZ0FBUWRDK0EwSGpBRG9BQUVIUnZnTkJSam9BQUVIU3ZnTkJsMzg2QUFCQjA3NERRVFU2QUFCQjFMNERRZW9BT2dBQVFkVytBMEZVT2dBQVFkYStBMEd6ZnpvQUFFSFh2Z05CL1FBNkFBQkIyTDREUVhvNkFBQkIyYjREUVc4NkFBQkIycjREUVVVNkFBQkIyNzREUVpGL09nQUFRUUFoQUFOQUlBQkJ2cndEYWlBQVFmOEJjUVIvSUFRZ0F5QUFhaXdBQUVGL2MwSC9BWEZxTFFBQUJVRUFDeUlDUWVNQWN5QUNRUUYwSUFKQkFuUnpJQUpCQTNSeklBSkJCSFJ6SWdKeklBSkJDSFp6T2dBQUlBQkIzTDREYWlBQVFRRjBJQUJCQTNSeklBQkJCblJ6SWdKQkJYTWdBa0VJZG5NaUFrSC9BWEVFZnlBRUlBTWdBa0gvQVhGcUxBQUFRWDl6UWY4QmNXb3RBQUFGUVFBTElnSkIvd0Z4SWdFNkFBQWdBRUVDZEVIZXdBTnFJQUZCL3dGeFFRQkhJZ1VFZnlBRUlBTWdBbW90QUFCQjZBQnFhaTBBQUFWQkFBc2lBVUgvQVhFaUFUb0FBQ0FBUVFKMFFkM0lBMm9nQVRvQUFDQUFRUUowUWR6UUEyb2dBVG9BQUNBQVFRSjBRZC9ZQTJvZ0FUb0FBQ0FDUVFKMFFkN2dBMm9nQVRvQUFDQUNRUUowUWQzb0Eyb2dBVG9BQUNBQ1FRSjBRZHp3QTJvZ0FUb0FBQ0FDUVFKMFFkLzRBMm9nQVRvQUFDQUFRUUowUWR6QUEyb2dCUVIvSUFRZ0F5QUNhaTBBQUVISEFXcHFMUUFBQlVFQUN5SUJRZjhCY1NJQk9nQUFJQUJCQW5SQjM4Z0RhaUFCT2dBQUlBQkJBblJCM3RBRGFpQUJPZ0FBSUFCQkFuUkIzZGdEYWlBQk9nQUFJQUpCQW5SQjNPQURhaUFCT2dBQUlBSkJBblJCMytnRGFpQUJPZ0FBSUFKQkFuUkIzdkFEYWlBQk9nQUFJQUpCQW5SQjNmZ0RhaUFCT2dBQUlBQkJBblJCM2NBRGFpQUZCSDhnQkNBRElBSnFMUUFBUWU0QmFtb3RBQUFGUVFBTElnRkIvd0Z4SWdFNkFBQWdBRUVDZEVIY3lBTnFJQUU2QUFBZ0FFRUNkRUhmMEFOcUlBRTZBQUFnQUVFQ2RFSGUyQU5xSUFFNkFBQWdBa0VDZEVIZDRBTnFJQUU2QUFBZ0FrRUNkRUhjNkFOcUlBRTZBQUFnQWtFQ2RFSGY4QU5xSUFFNkFBQWdBa0VDZEVIZStBTnFJQUU2QUFBZ0FFRUNkRUhmd0FOcUlBVUVmeUFFSUFNZ0Ftb3RBQUJCM3dGcWFpMEFBQVZCQUFzaUFVSC9BWEVpQVRvQUFDQUFRUUowUWQ3SUEyb2dBVG9BQUNBQVFRSjBRZDNRQTJvZ0FUb0FBQ0FBUVFKMFFkellBMm9nQVRvQUFDQUNRUUowUWQvZ0Eyb2dBVG9BQUNBQ1FRSjBRZDdvQTJvZ0FUb0FBQ0FDUVFKMFFkM3dBMm9nQVRvQUFDQUNRUUowUWR6NEEyb2dBVG9BQUNBQVFRRnFJZ0JCZ0FKSERRQUxJQU1rQkFzWkFFRyt2QU1zQUFCRkJFQkJBQkN4QkFzZ0FFRUJPZ0FBQzVRQkFRTi9JQUFzQUlBRVJRUkFJQUZCQURZQ0FBOExJQUVnQUNBQ1FZQUJTUVIvSUFJRlFZQUJDMEVDZEJCVEdpTUVJUUFqQkVFUWFpUUVRUlFnQUJBbElRTWdBQ1FFSUFNaEFDQUNRUUowSWdNRVFDQUFRY3NBYWlFRVFRQWhBQU5BSUFFZ0FHb2lCU0FFSUFCcUlBVXRBQUJ6T2dBQUlBQkJBV29pQUNBRFJ3MEFDd3NnQVNBQ1FYOXFRUUowYWtFQU5nSUFDL2tIQVFWL0l3UWhCaU1FUVJCcUpBUWdBRUVBTmdJRUlBQkJBRFlDQUNBQUtBSU1JQUVnQWtHQWdBSkpCSDhnQWdWQmdJQUNDeEJUR2lBQ1FRRkxCRUJCQVNFRkEwQWdBU0FGYWl3QUFDQUVjeUVFSUFWQkFXb2lCU0FDUncwQUN3c2dCa0VJYWlFSElBQkJDQkJWSUFOQkZHb2lCVUVBTmdJQUFrQWdCRUgvQVhFZ0FTMEFBRVlFUUFKL1FYOGdBU0FDRUprQklnQkJndkhuajM5SUJIOGdBRUhBN2RuRWZFZ0VRQ0FBUVlHMW9KbDhhdzBFSUFKQk9VY05CRUVCREFJTElBQkJ0OFRPbm41SUJIOGdBRUhBN2RuRWZHc05CQ0FDUWZnQVJ3MEVRUUlGSUFCQnQ4VE9ubjVyRFFRZ0FrR1ZBVWNOQkVFRUN3VWdBRUgrc2VpYkJFZ0VRQ0FBUVlMeDU0OS9hdzBFSUFKQkhVY05CRUVEREFJTElBQkIrSzZpbFFWSUJIOGdBRUgrc2VpYkJHc05CQ0FDUWRnQlJ3MEVRUVVGSUFCQitLNmlsUVZyRFFRZ0FrRTFSdzBFUVFBTEN3c2lBRUVNYkVIc0Rtb29BZ0FoQ0NBRFFRUnFJZ0lvQWdCQkFXb2hBQ0FDSUFBMkFnQWdBQ0FEUVFocUlnUW9BZ0FpQVVzRVFDQURLQUlNSWdkQkFFY2dBQ0FIUzNFRVFDQUdJQWMyQWdCQnJQVUNRZGdiSUFZUVlFR3M5UUlRVmlBRUtBSUFJUUVnQWlnQ0FDRUFDeUFES0FJQUlBQWdBVUVnYWlBQlFRSjJhaUlCU3dSL0lBQWlBUVVnQVF0QktHd1FWeUlBUlFSQVFhejFBaEJXQ3lBRElBQTJBZ0FnQkNBQk5nSUFCU0FES0FJQUlRQUxJQVVnQlNnQ0FDSUJRUUZxTmdJQUlBQWdBVUVvYkdwQktEWUNBQ0FBSUFGQktHeHFRUXhxSWdJZ0NEWUNBQ0FBSUFGQktHeHFJQUkyQWhRZ0FDQUJRU2hzYWlBQUlBRkJLR3hxUVJ4cU5nSWtJQUFnQVVFb2JHcEJBellDR0NBQUlBRkJLR3hxUVFNMkFnZ2dCaVFFRHdzTElBTkJCR29pQWlnQ0FFRUJhaUVBSUFJZ0FEWUNBQ0FBSUFOQkNHb2lCQ2dDQUNJQlN3UkFJQU1vQWd3aUNFRUFSeUFBSUFoTGNRUkFJQWNnQ0RZQ0FFR3M5UUpCMkJzZ0J4QmdRYXoxQWhCV0lBUW9BZ0FoQVNBQ0tBSUFJUUFMSUFNb0FnQWdBQ0FCUVNCcUlBRkJBblpxSWdGTEJIOGdBQVVnQVNJQUMwRW9iQkJYSWdKRkJFQkJyUFVDRUZZTElBTWdBallDQUNBRUlBQTJBZ0FGSUFNb0FnQWhBZ3NnQlNBRktBSUFJZ05CQVdvMkFnQWdBaUFEUVNoc2FrRVdOZ0lBSUFJZ0EwRW9iR29nQWlBRFFTaHNha0VNYWpZQ0ZDQUNJQU5CS0d4cUlBSWdBMEVvYkdwQkhHbzJBaVFnQWlBRFFTaHNha0VETmdJWUlBSWdBMEVvYkdwQkF6WUNDQ0FEUVg5S0JFQkJBQ0VBQlNBR0pBUVBDd05BSUFJZ0FFRW9iR3BCRkdvaUFTZ0NBRVVFUUNBQklBSWdBRUVvYkdwQkRHbzJBZ0FMSUFJZ0FFRW9iR3BCSkdvaUFTZ0NBRVVFUUNBQklBSWdBRUVvYkdwQkhHbzJBZ0FMSUFCQkFXb2hBU0FBSUFOSUJFQWdBU0VBREFFTEN5QUdKQVFML1JZQkYzOENRQUpBQWtBQ1FBSkFBa0FnQVVFQmF3NEdBQUFCQXdRQ0JRc2dBQ2dDTENFR0lBQW9BaVFpQkVILy93NUxJQVJCQkVoeUJFQVBDeUFFUVFSTUJFQVBDeUFFUVh4cUlRVWdBRUVRYWlJSEtBSUFJUUFnQVVFQ1JnUi9RZWtCQlVIb0FRc2hDRUVBSVFFRFFDQUFRUUZxSVFRZ0FVRUJhaUVDSUFBc0FBQWlDVUZvUmlBSUlBbEIvd0Z4Um5JRWZ5QUNJQVpxSVFJZ0J5Z0NBQ0lKSUFSTklBbEJnSUFRYWlBRVMzRWlBd1IvSUFBdEFBSkJDSFFnQkMwQUFISWdBQzBBQTBFUWRISWdBQzBBQkVFWWRISUZJQVFvQWdBTElnbEJBRWdFUUNBSklBSnFRWDlLQkVBZ0NVR0FnSUFJYWlFQ0lBTUVRQ0FFSUFJNkFBQWdBQ0FDUVFoMk9nQUNJQUFnQWtFUWRqb0FBeUFBSUFKQkdIWTZBQVFGSUFRZ0FqWUNBQXNMQlNBSlFZQ0FnQWhJQkVBZ0NTQUNheUVDSUFNRVFDQUVJQUk2QUFBZ0FDQUNRUWgyT2dBQ0lBQWdBa0VRZGpvQUF5QUFJQUpCR0hZNkFBUUZJQVFnQWpZQ0FBc0xDeUFCUVFWcUlRRWdBRUVGYWdVZ0FpRUJJQVFMSVFBZ0FTQUZTQTBBQ3c4TElBQW9BaVFpQVVILy93NUxJQUZCRlVoeUJFQVBDeUFCUVJWTUJFQVBDeUFCUVd0cUlRTWdBQ2dDRUNFQklBQW9BaXhCQkhZaEFBTkFJQUVzQUFCQkgzRWlBa0VQU2dSQUlBSkJjR29pQ1VIbkxtb3RBQUFoQWtIUDV3QWdDWFpCQVhFRVFDQUNRUUZ4QkVBZ0FTd0FCVUU4Y1VFVVJnUkFJQUZCQTJvaUJpMEFBRUVJZENBQlFRSnFJZ1V0QUFBaUIzSWdBVUVFYWlJSUxRQUFJZ3BCRUhSeUlBQkJBblJySWd0Qi9QLy9BWEVoQ1NBRklBa2dCMEVEY1hJNkFBQWdCaUFMUVFoMk9nQUFJQWdnQ1VFUWRpQUtRY0FCY1hJNkFBQUxDeUFDUVFKeEJFQWdBU3dBQ2tINEFIRkJLRVlFUUNBQlFRaHFJZ1l0QUFCQkNIUWdBVUVIYWlJRkxRQUFJZ2R5SUFGQkNXb2lDQzBBQUNJS1FSQjBjaUFBUVFOMGF5SUxRZmovL3dOeElRa2dCU0FKSUFkQkIzRnlPZ0FBSUFZZ0MwRUlkam9BQUNBSUlBbEJFSFlnQ2tHQUFYRnlPZ0FBQ3dzZ0FrRUVjUVJBSUFFc0FBOUI4QUZ4UWRBQVJnUkFJQUZCRFdvaUNTMEFBRUVJZENBQlFReHFJZ1l0QUFBaUJYSWdBVUVPYWlJSExRQUFRUkIwY2lBQVFRUjBheUVDSUFZZ0FrSHdBWEVnQlVFUGNYSTZBQUFnQ1NBQ1FRaDJPZ0FBSUFjZ0FrRVFkam9BQUFzTEN3c2dBVUVRYWlFQklBQkJBV29oQUNBRVFSQnFJZ1FnQTBnTkFBc1BDeUFBS0FJVUlRWWdBRUVRYWlJSEtBSUFJZ0ZCb0lBUGFpQUFLQUlrSWdNNkFBQWdBVUdoZ0E5cUlBTkJDSFk2QUFBZ0FVR2lnQTlxSUFOQkVIWTZBQUFnQVVHamdBOXFJQU5CR0hZNkFBQWdBMEdBd0FkSklBWkJBRXB4QkVCQkFDRUFCUThMSUFOQkFYUWhCUU5BSUFJZ0Eyb2lBU0FGU0FSQVFRQWhDUU5BSUFCQkFXb2hCQ0FKUWY4QmNTQUhLQUlBSWdnZ0FHb3RBQUJySVFrZ0NDQUJhaUFKT2dBQUlBRWdCbW9pQVNBRlNBUkFJQVFoQUF3QkJTQUVJUUFMQ3dzZ0FrRUJhaUlDSUFaSERRQUxEd3NnQUNnQ0ZFRjlhaUVLSUFBb0FoZ2hDU0FBS0FJUUlnRkJvSUFQYWlBQUtBSWtJZ2M2QUFBZ0FVR2hnQTlxSUFkQkNIWTZBQUFnQVVHaWdBOXFJQWRCRUhZNkFBQWdBVUdqZ0E5cUlBZEJHSFk2QUFBZ0IwSC92d2RMSUFvZ0NYSkJBRWh5QkVBUEN5QUJJQWRxSVFnZ0IwRUFTZ1JBUVFBaEFBTkFJQUlnQ21zaUJFRUNTZ1JBUVFBZ0FDQUlJQVJxSWdRdEFBQWlDMm9nQkVGOWFpMEFBQ0lFYXlJRklBQnJJZ05ySVE1QkFDQUZJQXRySWdacklROUJBQ0FGSUFScklnVnJJUXdnQTBGL1NnUi9JQU1GSUE0aUF3c2dCa0YvU2dSL0lBWUZJQThpQmd0S0lBTWdCVUYvU2dSL0lBVUZJQXdpQlF0S2NpRURJQVlnQlV3RVFDQUxJUVFMSUFNRVFDQUVJUUFMQ3lBQlFRRnFJUVFnQUNBQkxRQUFheUlCUWY4QmNTRUFJQWdnQW1vZ0FUb0FBQ0FDUVFOcUlnSWdCMGdFUUNBRUlRRU1BUXNMSUFkQkFVb0VRRUVBSVFCQkFTRUNJQVFoQVFOQUlBSWdDbXNpQkVFQ1NnUkFRUUFnQUNBSUlBUnFJZ1F0QUFBaUMyb2dCRUY5YWkwQUFDSUVheUlGSUFCcklnTnJJUTVCQUNBRklBdHJJZ1pySVE5QkFDQUZJQVJySWdWcklRd2dBMEYvU2dSL0lBTUZJQTRpQXdzZ0JrRi9TZ1IvSUFZRklBOGlCZ3RLSUFNZ0JVRi9TZ1IvSUFVRklBd2lCUXRLY2lFRElBWWdCVXdFUUNBTElRUUxJQU1FUUNBRUlRQUxDeUFCUVFGcUlRUWdBQ0FCTFFBQWF5SUJRZjhCY1NFQUlBZ2dBbW9nQVRvQUFDQUNRUU5xSWdJZ0IwZ0VRQ0FFSVFFTUFRc0xJQWRCQWtvRVFFRUFJUUJCQWlFQ0lBUWhBUU5BSUFJZ0Ntc2lCRUVDU2dSQVFRQWdBQ0FJSUFScUlnUXRBQUFpQzJvZ0JFRjlhaTBBQUNJRWF5SUZJQUJySWdOcklRNUJBQ0FGSUF0cklnWnJJUTlCQUNBRklBUnJJZ1ZySVF3Z0EwRi9TZ1IvSUFNRklBNGlBd3NnQmtGL1NnUi9JQVlGSUE4aUJndEtJQU1nQlVGL1NnUi9JQVVGSUF3aUJRdEtjaUVESUFZZ0JVd0VRQ0FMSVFRTElBTUVRQ0FFSVFBTEN5QUJRUUZxSVFRZ0FDQUJMUUFBYXlJQlFmOEJjU0VBSUFnZ0Ftb2dBVG9BQUNBQ1FRTnFJZ0lnQjBnRVFDQUVJUUVNQVFzTEN3c0xJQWtnQjBGK2FpSUJTQVJBSUFraEFBVVBDd05BSUFnZ0FHb2lCQ0FFTFFBQUlBZ2dBRUVCYW1vdEFBQWlCR282QUFBZ0NDQUFRUUpxYWlJQ0lBSXRBQUFnQkdvNkFBQWdBRUVEYWlJQUlBRklEUUFMRHdzZ0FDZ0NGQ0VUSUFBb0FoQWlBa0dnZ0E5cUlBQW9BaVFpRURvQUFDQUNRYUdBRDJvZ0VFRUlkam9BQUNBQ1FhS0FEMm9nRUVFUWRqb0FBQ0FDUWFPQUQyb2dFRUVZZGpvQUFDQVFRWURBQjBrZ0UwRUFTbkZGQkVBUEN5QUNJQkJxSVJnRFFDQU9JQkJJQkVCQkFDRVVJQTRoRDBFQUlRQkJBQ0VCUVFBaEJFRUFJUkpCQUNFRFFRQWhDVUVBSVJFZ0FpRU1RUUFoQzBFQUlRcEJBQ0VJUVFBaEIwRUFJUVZCQUNFR1FRQWhGZ05BSUF4QkFXb2hGeUFZSUE5cUlBUWdDV3dnRVVFRGRHb2dBU0FKSUFOckloVnNhaUFBSUJKc2FrRURka0gvQVhFZ0RDd0FBQ0lEUWY4QmNXc2lERG9BQUNBTUlCRnJRUmgwUVJoMUlSRkJBQ0FEUVFOMElnSnJJUTBnQTBGL1NnUi9JQUlGSUEwTElBdHFJUXRCQUNBQ0lBbHJJZ05ySVEwZ0EwRi9TZ1IvSUFNRklBMExJQXBxSVFwQkFDQUNJQWxxSWdOcklRMGdDQ0FEUVg5S0JIOGdBd1VnRFF0cUlRaEJBQ0FDSUJWcklnTnJJUTBnQnlBRFFYOUtCSDhnQXdVZ0RRdHFJUWRCQUNBQ0lCVnFJZ05ySVEwZ0JTQURRWDlLQkg4Z0F3VWdEUXRxSVFWQkFDQUNJQkpySWdOcklRMGdCaUFEUVg5S0JIOGdBd1VnRFF0cUlRWkJBQ0FDSUJKcUlnSnJJUU1nRmlBQ1FYOUtCSDhnQWdVZ0F3dHFJUU1DUUNBVVFSOXhSUVJBSUFNZ0JpQUZJQWNnQ0NBS0lBdEpJZ0lFZnlBS0JTQUxJZ29MU1NJREJIOGdDQVVnQ2lJSUMwa2lDZ1IvSUFjRklBZ2lCd3RKSWdnRWZ5QUZCU0FISWdVTFNTSUhCSDhnQmdVZ0JRdEpJUVlnQXdSQVFRSWhBZ3NnQ2dSQVFRTWhBZ3NnQ0FSQVFRUWhBZ3NnQndSQVFRVWhBZ3NDUUFKQUFrQUNRQUpBQWtBQ1FDQUdCSDlCQmdVZ0FndEJCM0ZCQVdzT0JnQUJBZ01FQlFZTElBUWdCRUZ2U2tFZmRFRWZkV29oQkVFQUlRTkJBQ0VHUVFBaEJVRUFJUWRCQUNFSVFRQWhDa0VBSVFzTUJ3c2dCQ0FFUVJCSWFpRUVRUUFoQTBFQUlRWkJBQ0VGUVFBaEIwRUFJUWhCQUNFS1FRQWhDd3dHQ3lBQklBRkJiMHBCSDNSQkgzVnFJUUZCQUNFRFFRQWhCa0VBSVFWQkFDRUhRUUFoQ0VFQUlRcEJBQ0VMREFVTElBRWdBVUVRU0dvaEFVRUFJUU5CQUNFR1FRQWhCVUVBSVFkQkFDRUlRUUFoQ2tFQUlRc01CQXNnQUNBQVFXOUtRUjkwUVI5MWFpRUFRUUFoQTBFQUlRWkJBQ0VGUVFBaEIwRUFJUWhCQUNFS1FRQWhDd3dEQ3lBQUlBQkJFRWhxSVFCQkFDRURRUUFoQmtFQUlRVkJBQ0VIUVFBaENFRUFJUXBCQUNFTERBSUxRUUFoQTBFQUlRWkJBQ0VGUVFBaEIwRUFJUWhCQUNFS1FRQWhDd3NMSUJSQkFXb2hGQ0FQSUJOcUlnOGdFRWdFUUNBSklRSWdGU0VTSUJFaENTQU1JUkVnRnlFTUlBTWhGaUFDSVFNTUFRVWdGeUVDQ3dzTElBNUJBV29pRGlBVFJ3MEFDd3NMRUFBZ0FFRUJFT1FCSUFCQkFEWUNFQXRmQUNNRUlRQWpCRUhRQUdva0JDQUFRUUEyQWtRZ0FFRWZOZ0pJSUFBZ0FUWUNBQ0FBUVVCclFRSTJBZ0FnQUNBQ05nSUVRYXoxQWlnQ0FFRUNTUVJBUWF6MUFrRUNOZ0lBQzBHdzlRSkJzUFVDS0FJQVFRRnFOZ0lBSUFBa0JBdFRBUUYvSXdRaEFpTUVRZEFBYWlRRUlBSkJBRFlDUkNBQ1FRZzJBa2dnQWtFQU5nSUFJQUpCUUd0QkFqWUNBQ0FDSUFFMkFnUWdBRUVHTmdJQUlBQkJCR29pQUNBQUtBSUFRUUZxTmdJQUlBSWtCQXN2QUNBQVFRVTJBZ0FnQUVFRWFpSUFJQUFvQWdCQkFXbzJBZ0JCQkJBVUlnQkJCVFlDQUNBQVFZQUlRUUFRR3dzNkFDQUFLQUlBUVFKSkJFQWdBRUVDTmdJQUN5QUFRUVJxSWdBZ0FDZ0NBRUVCYWpZQ0FFRUVFQlFpQUVFQ05nSUFJQUJCZ0FoQkFCQWJDNVVCQUNBQVFRQkJ3TXNFRUZRYUlBQkJnSUNBRURZQ0RDQUFRYmlFQTJwQkFEWUNBQ0FBUWJ5RUEycEJBellDQUNBQVFiQ0VBMnBCQURZQ0FDQUFRWXlGQTJwQkFEWUNBQ0FBUVpUTEEycEJCRFlDQUNBQVFiaUpBMnBDLy8vLy8vZi8vLy8vQURjREFDQUFRY0NKQTJwQy8vLy8vL2YvLy8vL0FEY0RBQ0FBUWNDRUEycEJBallDQUNBQVFaQ0FBV3BCQVRZQ0FBc1hBQ0FBUVFFNkFBd2dBQ0FCTmdJVUlBQWdBallDRUF1ZEFRRUVmeUFBUVFocUlRUWdBUVJBSUFRb0FnQWlBd1JBQTBBZ0F5Z0NFQ0VGSUFNb0FnQWlCZ1JBSUFZUVVnc2dBeEJTSUFVRVFDQUZJUU1NQVFzTEN3c2dBQ0FCTmdJQUlBQWdBa0VCY1RvQUJDQUVRUUEyQWdBZ0FFRUFOZ0lNSUFCQkVHb2lBU2dDQUFSQUlBQkJBRFlDRkNBQVFlZ3hha0VBT2dBQUR3c2dBVUdBZ0FRUVh6WUNBQ0FBUVFBMkFoUWdBRUhvTVdwQkFEb0FBQXNTQUNBQVFRRTZBTFVCSUFBb0FrUVF5QUlMVFFBZ0FRUkFJQUFnQUVGQWF5Z0NBRUVCSUFJZ0F5QUVJQVVnQmlBSElBZ1F1UUZCQVhFNkFMUUJCU0FBSUFBb0FrUkJBQ0FDSUFNZ0JDQUZJQVlnQnlBSUVMa0JRUUZ4T2dDMUFRc0xGZ0FnQVNBQUtBSWNOZ0lBSUFJZ0FDZ0NHRFlDQUFzaEFDQUJCRUFnQUNBQk5nSXNDeUFDQkVBZ0FDQUNOZ0l3Q3lBQVFYODJBa2dMd1FFQkFYOGdBRUVBT2dBQUlBQkJBRG9BRENBQVFnQTNBeUFnQUVFQk9nQW9JQUJCQURvQUtTQUFRUUE2QUNvZ0FFRUFPZ0JRSUFCQkFEb0FVU0FBUVFBNkFGSWdBRUVBTmdJc0lBQkJBRFlDTUNBQVFRQTJBaGdnQUVFQU5nSTBJQUJCQURvQXRBRWdBRUVBT2dDMUFTQUFRZUFBYWlJQlFnQTNBd0FnQVVJQU53TUlJQUZDQURjREVDQUJRZ0EzQXhnZ0FFRi9OZ0pJSUFCQkFEWUNPQ0FBUVFBMkFqd2dBRUVBTmdKTUlBQkJnQUZxSWdCQ0FEY0RBQ0FBUWdBM0F3Z0xOQUVCZnlNRUlRRWpCRUVRYWlRRUlBRVFTeG9nQUNBQktBSUFyRUtBcmVJRWZrS0FnUHFwN2J2c3pnRjhOd01BSUFFa0JBdVBBUUVFZnlBQVFSaHFJZ0lRdlFJZ0FFR1lNbW9pQVVJQU53SUFJQUZDQURjQ0NDQUFRUkJxSWdGQkFEWUNBQ0FBUVFBMkFnQWdBRUVBT2dBRUlBQkJBRFlDQ0NBQVFRQTJBZ3hCQUNRRlFRZEJnSUFFRUFVaEF5TUZJUVJCQUNRRklBUkJBWEVFUUJBWElRQWdBaENPQVNBQUVCNEZJQUVnQXpZQ0FDQUFRUUEyQWhRZ0FFSG9NV3BCQURvQUFBc0xod0VCQVg4akJDRUNJd1JCTUdva0JDQUNJQUZCQVhSQlBuRTJBZ0FnQWlBQlFRVjJRVDl4TmdJRUlBSWdBVUVMZGtFZmNUWUNDQ0FDSUFGQkVIWkJIM0UyQWd3Z0FpQUJRUlYyUVE5eFFYOXFOZ0lRSUFJZ0FVRVpka0hRQUdvMkFoUWdBa0YvTmdJZ0lBQWdBaEJHckVLQXJlSUVma0tBZ1BxcDdidnN6Z0Y4TndNQUlBSWtCQXQ0QVFGL0l3UWhBU01FUVJCcUpBUWdBU0FBS1FNQVFvQ0FodGFTeEpPeGZueENnSzNpQklBK0FnQWdBUkJGSWdBb0FneEJFSFFnQUNnQ0ZFRVpkRUdBZ0lDQUJtcHlJQUFvQWhCQkZYUkJnSUNBQVdweUlBQW9BZ2hCQzNSeUlBQW9BZ1JCQlhSeUlBQW9BZ0JCQVhaeUlRQWdBU1FFSUFBTGZ3RUJmeU1FSVFJakJFRXdhaVFFSUFJZ0FTZ0NGRFlDQUNBQ0lBRW9BaEEyQWdRZ0FpQUJLQUlNTmdJSUlBSWdBU2dDQ0RZQ0RDQUNJQUVvQWdSQmYybzJBaEFnQWlBQktBSUFRWlJ4YWpZQ0ZDQUNRWDgyQWlBZ0FDQUNFRWFzUW9DdDRnUitRb0NBK3FudHUrek9BWHdnQVNnQ0dLMThOd01BSUFJa0JBdVpBUUVDZnlNRUlRTWpCRUVRYWlRRUlBTWdBQ2tEQUVLQWdJYldrc1NUc1g1OFFvQ3Q0Z1NBUGdJQUlBRWdBeEJGSWdJb0FoUkI3QTVxTmdJQUlBRWdBaWdDRUVFQmFqWUNCQ0FCSUFJb0FndzJBZ2dnQVNBQ0tBSUlOZ0lNSUFFZ0FpZ0NCRFlDRUNBQklBSW9BZ0EyQWhRZ0FTQUFLUU1BUW9DdDRnU0NQZ0lZSUFFZ0FpZ0NHRFlDSENBQklBSW9BaHcyQWlBZ0F5UUVDeDBBSUFBZ0FheENnSzNpQkg1Q2dJRDZxZTI3N000QmZEY0RBQ0FBQytvRUFRbC9JQVZCQUVjaUJpQURRUUZMY1VVRVFFRUFJUUVnQlVGL2FpRUNJQVFnQmdSL1FRQUZJQUlMUVFKMGFrRUFOZ0lBRHdzZ0FFRUVhaUVLSUFJdEFBQkJDSFFoREVFQklRWWdBRUVJYWlJTktBSUFJUUFDUUFOQUlBQUVmeUFLTEFBQUlRc2dBQVVnQ2lBQ0lBWnFMQUFBSWdBNkFBQWdEVUVJTmdJQUlBWkJBV29oQmlBQUlRdEJDQXNoRGdKQUFrQUNRQUpBQWtBQ1FDQUxRZjhCY1VFR2RnNEVBQUVDQXdRTElBUWdCMEVDZEdvZ0FpQUdhaTBBQURZQ0FDQUdRUUZxSVFZZ0IwRUJhaUVBREFRTElBUWdCMEVDZEdvZ0RDQUNJQVpxTFFBQWNqWUNBQ0FHUVFGcUlRWWdCMEVCYWlFQURBTUxJQVFnQjBFQ2RHb2dBaUFHUVFGcWFpMEFBRUVJZENBQ0lBWnFMUUFBY2pZQ0FDQUdRUUpxSVFZZ0IwRUJhaUVBREFJTElBWkJBV29oQ0NBQ0lBWnFMUUFBSWdCQmdBRnhCRUFnQmtFQ2FpRUdJQWNnQlU4RVFDQUhJUUFNQXdzZ0FpQUlhaTBBQUNFSklBQkIvd0J4UVFKcUlRZ2dCeUVBQTBBZ0JDQUFRUUowYWlBQklBQnFMUUFBSUFscVFmOEJjU0FNY2pZQ0FDQUlRWDlxSVFjZ0FFRUJhaUlBSUFWSklBaEJBVXB4QkVBZ0J5RUlEQUVMQ3dVZ0J5QUZUd1JBSUFnaEJpQUhJUUFNQXdzZ0FFRUNhaUVKSUFjaEFBTkFJQVFnQUVFQ2RHb2dBU0FBYWl3QUFEWUNBQ0FKUVg5cUlRWWdBRUVCYWlJQUlBVkpJQWxCQVVweEJFQWdCaUVKREFFRklBZ2hCZ3NMQ3d3QkN3d0NDeUFLSUF0Qi93RnhRUUowT2dBQUlBMGdEa0YrYWlJSU5nSUFJQUFnQlVraUJ5QUdJQU5KY1FSQUlBQWhCeUFJSVFBTUFRVWdBQ0VCSUFjaEFBc0xJQVZCZjJvaEFpQUVJQUFFZnlBQkJTQUNDMEVDZEdwQkFEWUNBQXNMSGdBZ0FFRUFPZ0FFSUFCQkFEWUNDQ0FBUVFBMkFnd2dBRUVBTmdJUUMwVUJBbjhnQUVFVWFpSUNLQUlBUVFOSkJFQkJBQThMSUFCQkdHb2hBMEYvSUFBb0FnQkJBbW9nQVFSL0lBTUZJQUlMS0FJQVFYNXFFSmtCUWYvL0EzRkIvLzhEY3d0SUFRTi9JQUJCR0dvaUFpZ0NBQ0lCUVFGcUlnTWdBQ2dDRkU4RVFFRUFEd3NnQUNnQ0FDSUFJQU5xTFFBQVFRaDBJQUFnQVdvdEFBQnlJUUFnQWlBQlFRSnFOZ0lBSUFBTHdRUUJDbjhqQkNFREl3UkJFR29rQkNBRFFRaHFJUVVnQUVFY2FpSUxLQUlBUlFSQUlBRkZCRUFnQXlRRVFRQVBDeUFBUVFScUlnWW9BZ0FnQVdvaEFpQUdJQUkyQWdBZ0FpQUFRUWhxSWdjb0FnQWlCRXNFUUNBQUtBSU1JZ2hCQUVjZ0FpQUlTM0VFUUNBRklBZzJBZ0JCclBVQ1FkZ2JJQVVRWUVHczlRSVFWaUFIS0FJQUlRUWdCaWdDQUNFQ0N5QUFLQUlBSUFJZ0JFRWdhaUFFUVFKMmFpSUVTd1IvSUFJaUJBVWdCQXNRVnlJQ1JRUkFRYXoxQWhCV0N5QUFJQUkyQWdBZ0J5QUVOZ0lBQlNBQUtBSUFJUUlMSUFBb0FoQWlCQ0FDSUFCQkZHb2lBQ2dDQUdvZ0FTQUVLQUlBS0FJTVFSOXhRY29BYWhFQkFDRUJJQUFnQUNnQ0FDQUJhallDQUNBREpBUWdBUThMSUFNaEJDQUFRUVJxSWdZb0FnQWlCU0FBUVJScUlnY29BZ0FpQW1zaUF5QUJTUVIvSUFaQkFDQUJJQU5ySWdKclFROXhJQUpxSWdnZ0JXb2lBallDQUNBQ0lBQkJDR29pQ1NnQ0FDSURTd1JBSUFBb0Fnd2lDa0VBUnlBQ0lBcExjUVJBSUFRZ0NqWUNBRUdzOVFKQjJCc2dCQkJnUWF6MUFoQldJQWtvQWdBaEF5QUdLQUlBSVFJTElBQW9BZ0FnQWlBRFFTQnFJQU5CQW5acUlnTkxCSDhnQWdVZ0F5SUNDeEJYSWdORkJFQkJyUFVDRUZZTElBQWdBellDQUNBSklBSTJBZ0FGSUFBb0FnQWhBd3NnQUNFQ0lBQW9BaEFpQUNBRElBVnFJQWdnQUNnQ0FDZ0NERUVmY1VIS0FHb1JBUUFoQUNBTEtBSUFJQUlvQWdBZ0JXb2dDQkRxQVNBSEtBSUFJQUFFZnlBQkJVRUFDMm9GSUFJZ0FTSUFhZ3NoQVNBSElBRTJBZ0FnQkNRRUlBQUxFUUFnQUNBQklBSWdBMEVBUVFBUXVRSUxRd0VCZnlBQ1JRUkFJQUFQQ3dOQUlBRWdBMm90QUFBZ0FFSC8vd054YWlJQVFROTJRUUZ4SUFCQkFYUnlRZi8vQTNFaEFDQURRUUZxSWdNZ0FrY05BQXNnQUF2RkJBRURmMEhBOVFJb0FnQUVRRUVBSVFBRlFRQWhBQU5BSUFCQkFYWWlBa0dnaHVMdGZuTWhBU0FBUVFGeEJIOGdBUVVnQWlJQkMwRUJkaUlEUWFDRzR1MStjeUVDSUFGQkFYRUVmeUFDQlNBRElnSUxRUUYySWdOQm9JYmk3WDV6SVFFZ0FrRUJjUVIvSUFFRklBTWlBUXRCQVhZaUEwR2dodUx0Zm5NaEFpQUJRUUZ4Qkg4Z0FnVWdBeUlDQzBFQmRpSURRYUNHNHUxK2N5RUJJQUpCQVhFRWZ5QUJCU0FESWdFTFFRRjJJZ05Cb0liaTdYNXpJUUlnQVVFQmNRUi9JQUlGSUFNaUFndEJBWFlpQTBHZ2h1THRmbk1oQVNBQ1FRRnhCSDhnQVFVZ0F5SUJDMEVCZGlJQ1FhQ0c0dTErY3lFRElBQkJBblJCdlBVQ2FpQUJRUUZ4Qkg4Z0F3VWdBZ3MyQWdBZ0FFRUJhaUlBUVlBQ1J3MEFRUUFoQUFzTEEwQWdBRUVDZEVHOC9RSnFJQUJCQW5SQnZQVUNhaWdDQUNJQlFmOEJjVUVDZEVHODlRSnFLQUlBSUFGQkNIWnpJZ0UyQWdBZ0FFRUNkRUc4aFFOcUlBRkIvd0Z4UVFKMFFiejFBbW9vQWdBZ0FVRUlkbk1pQVRZQ0FDQUFRUUowUWJ5TkEyb2dBVUgvQVhGQkFuUkJ2UFVDYWlnQ0FDQUJRUWgyY3lJQk5nSUFJQUJCQW5SQnZKVURhaUFCUWY4QmNVRUNkRUc4OVFKcUtBSUFJQUZCQ0haeklnRTJBZ0FnQUVFQ2RFRzhuUU5xSUFGQi93RnhRUUowUWJ6MUFtb29BZ0FnQVVFSWRuTWlBVFlDQUNBQVFRSjBRYnlsQTJvZ0FVSC9BWEZCQW5SQnZQVUNhaWdDQUNBQlFRaDJjeUlCTmdJQUlBQkJBblJCdkswRGFpQUJRZjhCY1VFQ2RFRzg5UUpxS0FJQUlBRkJDSFp6TmdJQUlBQkJBV29pQUVHQUFrY05BQXNMQ1FCQnZid0RFTkVFQ3hzQkFYOGpCQ0VCSXdRZ0FHb2tCQ01FUVE5cVFYQnhKQVFnQVFzTG1tTmVBRUdBQ0F2bEJUZ1RBQUJVRmdBQW5CSUFBRjRXQUFDUUJBQUFBQUFBQUhRU0FBQ1lHZ0FBSEJNQUFJb2FBQUFBQUFBQUdBUUFBQndUQUFCN0dnQUFBUUFBQUJnRUFBQjBFZ0FBVmhvQUFGUVRBQUFYR2dBQUFBQUFBQUVBQUFDSUJBQUFBQUFBQUhRU0FBQU1HZ0FBVkJNQUFLY1pBQUFBQUFBQUFRQUFBSWdFQUFBQUFBQUFkQklBQUpjWkFBQjBFZ0FBNWhrQUFIUVNBQUN4R2dBQVZCTUFBRnNmQUFBQUFBQUFBUUFBQUlnRUFBQUFBQUFBZEJJQUFFZ2ZBQUIwRWdBQUtSOEFBSFFTQUFBS0h3QUFkQklBQU9zZUFBQjBFZ0FBekI0QUFIUVNBQUN0SGdBQWRCSUFBSTRlQUFCMEVnQUFieDRBQUhRU0FBQlFIZ0FBZEJJQUFERWVBQUIwRWdBQUVoNEFBSFFTQUFEekhRQUFkQklBQU5RZEFBQjBFZ0FBSVRnQUFKd1NBQUNCT0FBQU1BVUFBQUFBQUFDY0VnQUFMamdBQUVBRkFBQUFBQUFBZEJJQUFFODRBQUNjRWdBQVhEZ0FBQ0FGQUFBQUFBQUFuQklBQUtRNUFBQVlCUUFBQUFBQUFKd1NBQUN4T1FBQUdBVUFBQUFBQUFDY0VnQUF3VGtBQUdnRkFBQUFBQUFBbkJJQUFQWTVBQUF3QlFBQUFBQUFBSndTQUFEU09RQUFpQVVBQUFBQUFBQ2NFZ0FBR0RvQUFEQUZBQUFBQUFBQUFCTUFBRUE2QUFBQUV3QUFRam9BQUFBVEFBQkZPZ0FBQUJNQUFFYzZBQUFBRXdBQVNUb0FBQUFUQUFCTE9nQUFBQk1BQUUwNkFBQUFFd0FBVHpvQUFBQVRBQUJST2dBQUFCTUFBRk02QUFBQUV3QUFWVG9BQUFBVEFBQlhPZ0FBQUJNQUFGazZBQUFBRXdBQVd6b0FBSndTQUFCZE9nQUFNQVVBQUFBQUFBQ2NFZ0FBZmpvQUFDQUZBQUFBQUFBQVdBQUFBQUFBQUFCVUFBQUFBQUFBQUZFQUFBQlBBQUFBQUFBQUFDNEFBQUFBQUFBQWN3QUFBR1lBQUFCNEFBQUFBQUFBQUM4QUFBQUFBQUFBTGdBQUFISUFBQUJoQUFBQWNnQUFBQUFBQUFCbEFBQUFlQUFBQUdVQUFBQUFBQUFBY2dBQUFHRUFBQUJ5QUFBQUFBQUFBREFBQUFBd0FBQUFBQUFBQUQ4QUFBQXFBQUFBUEFBQUFENEFBQUI4QUFBQUlnQUFBQUFBQUFBL0FBQUFLZ0JCOEEwTGhRVUlCQUFBQVFBQUFBSUFBQUFCQUFBQUFnQUFBQUVBQUFBQkFBQUFRd0FBQUUwQUFBQlVBQUFBQUFBQUFEc0FBQUFsQUFBQWRRQUFBQUFBQUFCU0FBQUFVZ0FBQUFBQUFBRC8vLy8vWHdBQUFGOEFBQUJ5QUFBQVlRQUFBSElBQUFCZkFBQUFBQUFBQUNvQUFBQS9BQUFBQUFBQUFEVUFBQUNIYUZldEFRQUFBRGtBQUFCKzVkYzhBZ0FBQUhnQUFBQS9pV2szQXdBQUFCMEFBQUI5QndZT0JnQUFBSlVBQUFESVhTd2NCQUFBQU5nQUFBQUI1NFc4QlFBQUFKZ3Zpa0tSUkRkeHovdkF0YVhidGVsYndsWTU4Ukh4V2FTQ1A1TFZYaHlybUtvSDJBRmJneEsraFRFa3czME1WWFJkdm5MK3NkNkFwd2JjbTNUeG04SEJhWnZraGtlKzc4YWR3US9Nb1F3a2J5enBMYXFFZEVyY3FiQmMyb2o1ZGxKUlBwaHR4akdveUNjRHNNZC9XYi96QytER1I1R24xVkZqeWdabktTa1VoUXEzSnpnaEd5NzhiU3hORXcwNFUxUnpDbVc3Q21wMkxzbkNnWVVzY3BLaDZMK2lTMllhcUhDTFM4S2pVV3pIR2VpUzBTUUdtZGFGTlE3MGNLQnFFQmJCcEJrSWJEY2VUSGRJSjdXOHNEU3pEQnc1U3FyWVRrL0tuRnZ6Ynk1bzdvS1BkRzlqcFhnVWVNaUVDQUxIalByL3ZwRHJiRkNrOTZQNXZ2SjRjY1puNWdscWhhNW51M0x6Ymp3NjlVK2xmMUlPVVl4b0JadXIyWU1mR2MzZ1cxVUFBQUJQQUFBQVZ3QUFBQUFBQUFBZ0FBQUFBQUFBQUFnQUFBQUlBQUFBQ0FBQUFBZ0FBQUFJQUFBQUlBQUFBQUFBQUFBZ0FBQUFJQUFBQUQ4QUFBQUFBQUFBSlFBQUFITUFBQUFsQUFBQWN3QUFBQ0FBQUFBQUFBQUFDQUFBQUFnQUFBQUlBQUFBQ0FBQUFBZ0FBQUFnQUFBQUlBQUFBQ0FBQUFBZ0FBQUFJQUFBQUFBQUFBQWdBQUFBSlFBQUFITUFBQUFBQUFBQUlBQUFBQ0FBQUFBZ0FBQUFJQUFBQUNBQVFZQVRDM0dnQUFBQTBBQUFBT0FBQUFEd0FBQUErQUFBQVB3QUFBRCtBQUFBL3dBQUFNQUFBQUNBQUFBQWtBQUFBSmdBQUFDY0FBQUFzQUFBQUFFQUFBQURBQUFBQkFBQUFBUUFBQUFGQUFBQUJnQUFBQWNBQUFBSUFBQUFDQUFBQUFRQUFBQUVBQUFBQlFBQUFBWUFBQUFHQUFBQUJBQkIvQk1MY1VBQUFBQmdBQUFBb0FBQUFOQUFBQURnQUFBQThBQUFBUGdBQUFEOEFBQUF3QUFBQUlBQUFBQ1FBQUFBbUFBQUFKd0FBQUN3QUFBQUFnQUFBQU1BQUFBREFBQUFBd0FBQUFRQUFBQUVBQUFBQlFBQUFBWUFBQUFHQUFBQUJBQUFBQVFBQUFBRkFBQUFCZ0FBQUFZQUFBQUVBRUgxRkFzbG9BQUFBTUFBQUFEUUFBQUE0QUFBQU9vQUFBRHVBQUFBOEFBQUFQSUFBRUR5QUFELy93QkJyQlVMVGdVQUFBQUhBQUFBQ1FBQUFBMEFBQUFTQUFBQUZnQUFBQm9BQUFBaUFBQUFKQUFBQUFDQUFBQUFvQUFBQU1BQUFBRFFBQUFBNEFBQUFPb0FBQUR1QUFBQThBQUFBUElBQUFEeUFBRC8vd0JCaUJZTFJnSUFBQUFEQUFBQUJRQUFBQWNBQUFBTEFBQUFFQUFBQUJRQUFBQVlBQUFBSUFBQUFDQUFBQUFBRUFBQUFDUUFBQUNBQUFBQXdBQUFBUG9BQVAvL0FBRC8vd0FBLy84QVFlZ1dDeEVDQUFBQUJ3QUFBRFVBQUFCMUFBQUE2UUJCaFJjTEhTQUFBQURBQUFBQTRBQUFBUEFBQUFEeUFBQUE4Z0FBNFBjQUFQLy9BRUc4RndzK0JBQUFBQ3dBQUFBOEFBQUFUQUFBQUZBQUFBQlFBQUFBZndBQUFBQ0FBQUFBd0FBQUFPQUFBQUR5QUFBQThnQUFBUElBQUFEeUFBQUE4Z0FBLy84QVFaQVlDellJQUFBQUVBQUFBQmdBQUFBaEFBQUFJUUFBQUNFQUFBQWhBQUFBSVFBQUFBRC9BQUQvL3dBQS8vOEFBUC8vQUFELy93QUEvLzhBUWV3WUN3SC9BRUg5R0FzWkNBQUFBQ1FBQUFEdUFBQ0EvZ0FBLy84QUFQLy9BQUQvL3dCQnRCa0xEUUlBQUFBUUFBQUEyZ0FBQVBzQVFkQVpDNXNFQVFBQUFBSUFBQUFEQUFBQUJBQUFBQVlBQUFBSUFBQUFEQUFBQUJBQUFBQVlBQUFBSUFBQUFEQUFBQUJBQUFBQVlBQUFBSUFBQUFEQUFBQUFBQUVBQUlBQkFBQUFBZ0FBQUFNQUFBQUVBQUFBQmdBQUFBZ0FBQUFNQUFBQUVBQUFBQmdBQUFBZ0FBQUFNQUFBQUVBQUFBQmdBQUFBZ0FBQUFNQUFBQUFBQVFBQWdBRUFBQUFDQUFBQUF3QUFBQVFBQUFBRkFBQUFCZ0FBQUFjQUFBQUlBQUFBQ1FBQUFBb0FBQUFMQUFBQURBQUFBQTBBQUFBT0FBQUFEd0FFQUFBQUFnQUFBQUlBQUFBQ0FBQUFBZ0FBQUFJQUFBQUNBQUFBQWdBQUFBSUFBQUFDQUFBQUFnQUFBQUlBQUFBQ0FBQUFBZ0FBQUFJQUFBQUNBQUFBRGdBQUFBQUFBQUFNQUFBQVRRQUFBR0VBQUFCNEFBQUFhUUFBQUcwQUFBQjFBQUFBYlFBQUFDQUFBQUJoQUFBQWJBQUFBR3dBQUFCdkFBQUFkd0FBQUdVQUFBQmtBQUFBSUFBQUFHRUFBQUJ5QUFBQWNnQUFBR0VBQUFCNUFBQUFJQUFBQUhNQUFBQnBBQUFBZWdBQUFHVUFBQUFnQUFBQUtBQUFBQ1VBQUFCMUFBQUFLUUFBQUNBQUFBQnBBQUFBY3dBQUFDQUFBQUJsQUFBQWVBQUFBR01BQUFCbEFBQUFaUUFBQUdRQUFBQmxBQUFBWkFBQUFBQUFBQUFxQUFBQUFBQUFBQ0FFQUFCZ0JBQUFJQVFBQUdnRUFBQm9CQUFBeUFVQUFJQUVBQUFnQkFBQVFBUUFBQ0FFQUFESUJRQUFBQUFBQUpBRUFBQURBQUFBQkFBQUFBTUFBQUFFQUFBQUFnQUFBQUlBQUFENERnQUFGQUFBQUVNdVZWUkdMVGdBUWZnZEN4YmVFZ1NWQUFBQUFQLy8vLy8vLy8vLy8vLy8vOXdPQUVHa0hndlJBUUlBQU1BREFBREFCQUFBd0FVQUFNQUdBQURBQndBQXdBZ0FBTUFKQUFEQUNnQUF3QXNBQU1BTUFBREFEUUFBd0E0QUFNQVBBQURBRUFBQXdCRUFBTUFTQUFEQUV3QUF3QlFBQU1BVkFBREFGZ0FBd0JjQUFNQVlBQURBR1FBQXdCb0FBTUFiQUFEQUhBQUF3QjBBQU1BZUFBREFId0FBd0FBQUFMTUJBQUREQWdBQXd3TUFBTU1FQUFEREJRQUF3d1lBQU1NSEFBRERDQUFBd3drQUFNTUtBQUREQ3dBQXd3d0FBTU1OQUFEVERnQUF3dzhBQU1NQUFBeTdBUUFNd3dJQURNTURBQXpEQkFBTTAvUVBBQUFKQUVHQUlBc0JBUUJCbENBTEVnVUFBQUFBQUFBQUJnQUFBQ1FCQVFBQUJBQkJ3Q0FMQlAvLy8vOEFRZkFnQ3dWMEVBQUFCUUJCZ0NFTEFRRUFRWmdoQ3dzSEFBQUFCZ0FBQUN3RkFRQkJzQ0VMQVFJQVFiOGhDd1gvLy8vLy93QkJyQ01MQXZEZEFFR0lKQXNCQ0FCQnJ5UUxCZi8vLy8vL0FFSGdKQXVORENVQUFBQUFBQUFBQVFBQUFBQUFBQUFnQlFBQUJRQUFBQVlBQUFBSEFBQUFDQUFBQUFrQUFBQUJBQUFBQVFBQUFBRUFBQUFBQUFBQVNBVUFBQVVBQUFBSkFBQUFCd0FBQUFnQUFBQUpBQUFBQWdBQUFBSUFBQUFDQUFBQUFBQUFBRmdGQUFBS0FBQUFDd0FBQUFJQUFBQUFBQUFBYUFVQUFBd0FBQUFOQUFBQUF3QUFBQUFBQUFCNEJRQUFEQUFBQUE0QUFBQURBQUFBQUFBQUFLZ0ZBQUFGQUFBQUR3QUFBQWNBQUFBSUFBQUFDZ0FBQUFBQUFBQ1lCUUFBQlFBQUFCQUFBQUFIQUFBQUNBQUFBQXNBQUFBQUFBQUFLQVlBQUFVQUFBQVJBQUFBQndBQUFBZ0FBQUFNQUFBQUFBQUFBRGdHQUFBRkFBQUFFZ0FBQUFjQUFBQUlBQUFBQ1FBQUFBTUFBQUFEQUFBQUF3QUFBRWtBTVFGVEFIOEJNQUZwQUhnQi93Q0JBVk1DZ2dHREFZUUJoUUdHQVZRQ2h3R0lBWWtCVmdLS0FWY0Npd0dNQVk0QjNRR1BBVmtDa0FGYkFwRUJrZ0dUQVdBQ2xBRmpBcFlCYVFLWEFXZ0NtQUdaQVp3QmJ3S2RBWElDbndGMUFxWUJnQUtuQWFnQnFRR0RBcXdCclFHdUFZZ0Nyd0d3QWJFQmlnS3lBWXNDdHdHU0FyZ0J1UUc4QWIwQnhBSEdBY1FCeFFIRkFjWUJ4d0hKQWNjQnlBSElBY2tCeWdITUFjb0J5d0hMQWN3QjhRSHpBZkVCOGdIeUFmTUI5QUgxQWZZQmxRSDNBYjhCSUFLZUFZWURyQU9JQTYwRGlRT3VBNG9EcndPTUE4d0RqZ1BOQTQ4RHpnT1pBMFVEbVFPK0g2TUR3Z1AzQS9nRCtnUDdBMkFlbXg2ZUh0OEFXUjlSSDFzZlV4OWRIMVVmWHg5WEg3d2ZzeC9NSDhNZjdCL2xIL3dmOHg4NkFtVXNPd0k4QWowQ21nRStBbVlzUVFKQ0FrTUNnQUZFQW9rQ1JRS01BdlFEdUFQNUEvSUQvUU43QS80RGZBUC9BMzBEd0FUUEJDWWh5UU1xSVdzQUt5SGxBREloVGlHRElZUWhZQ3hoTEdJc2F3SmpMSDBkWkN4OUFtMHNVUUp1TEhFQ2J5eFFBbkFzVWdKeUxITXNkU3gyTEg0c1B3Si9MRUFDOGl6ekxIMm5lUjJMcDR5bmphZGxBcXFuWmdMSEVDY3R6UkF0TFhZRGR3T2NBN1VBa2dQUUE1Z0QwUU9tQTlVRG9BUFdBNW9EOEFPaEEvRURsUVAxQTg4RDF3TUFBQUFBUVFBZ0dzQUFJQjhBQVFFdk1nRUJCVGtCQVE5S0FRRXRlUUVCQlhBREFRT1JBeUFSb3dNZ0NRQUVVQkFRQkNBZ1lBUUJJWW9FQVRYQkJBRU4wQVFCUHhRRkFSTXhCVEFtb0FFQkJiTUJBUVBOQVFFUDNnRUJFZmdCQVNjaUFnRVIyQU1CRndBZUFaV2dIZ0ZmQ0IvNENCZ2YrQVlvSC9nSU9CLzRDRWdmK0Fab0gvZ0lpQi80Q0pnZitBaW9IL2dJdUIvNEFyb2Z0Z0xJSDZvRTJCLzRBdG9mbkFMb0gvZ0M2aCtRQXZnZmdBTDZINElDUmdJQkNSQUZBUU5nSVJBUUFDd3dMMmNzQVFXQUxBRmo2eXdCQTBDbUFTMkFwZ0VYSXFjQkRUS25BVDE1cHdFRGZxY0JDWkNuQVFPZ3B3RUpJZjhnR2dBQUFBQTRVa0ZTWDBWWVNWUUFOMEZ5WTJocGRtVUExeE9WSTBuRndNMzVIQkIzTU4wQ0t1Z0JzZWtPV05zWjM4UDBXbGZ2bVluL3g1TkdYRUwyRGRnb1BoM1o1bFlHUnhpcnhHVngybnRkVzZPeXlrTXM2MnY2UytveHAzM1RVM0tka0NEQmp5U2VmUGU3V2RhTkwzbmtQWUxWd3E3N1lXNDI1WE01bUY1cDg5UTMwZlUvQzZUSUg1eFJzT01WVEdPTHZIOFIrRFBQZUwzU0NPSXBTTGZMaDZXbVBHSUhlaWFicWtXcy9PNG5oanVBN0J2d1VJTURWYzZSVDVxT245ekpoVXBBRklIZ3VZcG5yYllySXY1U3hwZm50RG9LZGhwbURES0VGcitJYjZLekxRU1ViS0U0VG43eTNnK3ZraGNoOGJXK1RlRUFMcW02UkYvdFFUWFEvYWdKRW1RMGRMaWdZRzBsSG1xTWFKWUZ6SFZ3VkFRRUJnWUFBQWNIQkFRQUFBUUVBQUFBQVFJREJBVUdCd2dKQ2dzTURRNFBEZ29FQ0FrUERRWUJEQUFDQ3djRkF3c0lEQUFGQWc4TkNnNERCZ2NCQ1FRSENRTUJEUXdMRGdJR0JRb0VBQThJQ1FBRkJ3SUVDZzhPQVFzTUJnZ0REUUlNQmdvQUN3Z0RCQTBIQlE4T0FRa01CUUVQRGcwRUNnQUhCZ01KQWdnTERRc0hEZ3dCQXdrRkFBOEVDQVlDQ2dZUERna0xBd0FJREFJTkJ3RUVDZ1VLQWdnRUJ3WUJCUThMQ1E0RERBMEEzUTZKRjNhVFAwUEgwREt3aXBGK0pYUWZpcW1oTEJMaHlzaUFGUUR5eWs5Y1B6OWNBQzgvUHk4QUdRNEpCd1VGQkFRRUF3TURBZ0lDQWdBQkFnTUVCUVlIQ0FvTURoQVVHQndnS0RBNFFGQmdjSUNnd09BQVFmVXdDNlVTQVFFQkFRSUNBZ0lEQXdNREJBUUVCQVVGQlFVQUFBQUFBUUVDQWdNREJBUUZCUVlHQndjSUNBa0pDZ29MQ3d3TURRME9EZzhQRUJBUUVCQVFFQkFRRUJBUUVCQUFCQWdRSUVDQXdBSUNBd1FGQmdZR2FXa0FkZ0JTWVhKQmNtTm9hWFpsQUhacEFHOXdaVzRBYVdscGFXbHBBR2RsZEVacGJHVklaV0ZrWlhJQWFXbHBBSEpsWVdSR2FXeGxBR2xwYVdrQVUzUmhkR1VBYVFCbGNuSkRiMlJsQUhacGFXa0FaWEp5Vkhsd1pRQkJjbU5JWldGa1pYSUFjM1JoZEdVQVkyOXRiV1Z1ZEFCbWJHRm5jd0JCY21OR2FXeGxTR1ZoWkdWeUFHNWhiV1VBY0dGamExTnBlbVVBWkdscEFIWnBhV1FBZFc1d1UybDZaUUJvYjNOMFQxTUFZM0pqQUhScGJXVUFkVzV3Vm1WeUFHMWxkR2h2WkFCbWFXeGxRWFIwY2dBeE0wRnlZMFpwYkdWSVpXRmtaWElBVGxOME0xOWZNakV5WW1GemFXTmZjM1J5YVc1blNYZE9VMTh4TVdOb1lYSmZkSEpoYVhSelNYZEZSVTVUWHpsaGJHeHZZMkYwYjNKSmQwVkZSVVVBVGxOME0xOWZNakl4WDE5aVlYTnBZMTl6ZEhKcGJtZGZZMjl0Ylc5dVNVeGlNVVZGUlFBNVFYSmpTR1ZoWkdWeUFFNVRkRE5mWHpJeE1tSmhjMmxqWDNOMGNtbHVaMGxqVGxOZk1URmphR0Z5WDNSeVlXbDBjMGxqUlVWT1UxODVZV3hzYjJOaGRHOXlTV05GUlVWRkFEVlRkR0YwWlFCRlVsSmZVRkpQUTBWVFV3QkZVbEpmVWtWQlJBQkZVbEpmVDFCRlRnQlFTekV3VW1GeVFYSmphR2wyWlFCUU1UQlNZWEpCY21Ob2FYWmxBREV3VW1GeVFYSmphR2wyWlFCVFJWUUFSVTVFQUVOVlVnQTBSbWxzWlFCMmIybGtBR0p2YjJ3QVkyaGhjZ0J6YVdkdVpXUWdZMmhoY2dCMWJuTnBaMjVsWkNCamFHRnlBSE5vYjNKMEFIVnVjMmxuYm1Wa0lITm9iM0owQUdsdWRBQjFibk5wWjI1bFpDQnBiblFBYkc5dVp3QjFibk5wWjI1bFpDQnNiMjVuQUdac2IyRjBBR1J2ZFdKc1pRQnpkR1E2T25OMGNtbHVad0J6ZEdRNk9tSmhjMmxqWDNOMGNtbHVaengxYm5OcFoyNWxaQ0JqYUdGeVBnQnpkR1E2T25kemRISnBibWNBWlcxelkzSnBjSFJsYmpvNmRtRnNBR1Z0YzJOeWFYQjBaVzQ2T20xbGJXOXllVjkyYVdWM1BHTm9ZWEkrQUdWdGMyTnlhWEIwWlc0Nk9tMWxiVzl5ZVY5MmFXVjNQSE5wWjI1bFpDQmphR0Z5UGdCbGJYTmpjbWx3ZEdWdU9qcHRaVzF2Y25sZmRtbGxkengxYm5OcFoyNWxaQ0JqYUdGeVBnQmxiWE5qY21sd2RHVnVPanB0WlcxdmNubGZkbWxsZHp4emFHOXlkRDRBWlcxelkzSnBjSFJsYmpvNmJXVnRiM0o1WDNacFpYYzhkVzV6YVdkdVpXUWdjMmh2Y25RK0FHVnRjMk55YVhCMFpXNDZPbTFsYlc5eWVWOTJhV1YzUEdsdWRENEFaVzF6WTNKcGNIUmxiam82YldWdGIzSjVYM1pwWlhjOGRXNXphV2R1WldRZ2FXNTBQZ0JsYlhOamNtbHdkR1Z1T2pwdFpXMXZjbmxmZG1sbGR6eHNiMjVuUGdCbGJYTmpjbWx3ZEdWdU9qcHRaVzF2Y25sZmRtbGxkengxYm5OcFoyNWxaQ0JzYjI1blBnQmxiWE5qY21sd2RHVnVPanB0WlcxdmNubGZkbWxsZHp4cGJuUTRYM1ErQUdWdGMyTnlhWEIwWlc0Nk9tMWxiVzl5ZVY5MmFXVjNQSFZwYm5RNFgzUStBR1Z0YzJOeWFYQjBaVzQ2T20xbGJXOXllVjkyYVdWM1BHbHVkREUyWDNRK0FHVnRjMk55YVhCMFpXNDZPbTFsYlc5eWVWOTJhV1YzUEhWcGJuUXhObDkwUGdCbGJYTmpjbWx3ZEdWdU9qcHRaVzF2Y25sZmRtbGxkenhwYm5Rek1sOTBQZ0JsYlhOamNtbHdkR1Z1T2pwdFpXMXZjbmxmZG1sbGR6eDFhVzUwTXpKZmRENEFaVzF6WTNKcGNIUmxiam82YldWdGIzSjVYM1pwWlhjOFpteHZZWFErQUdWdGMyTnlhWEIwWlc0Nk9tMWxiVzl5ZVY5MmFXVjNQR1J2ZFdKc1pUNEFaVzF6WTNKcGNIUmxiam82YldWdGIzSjVYM1pwWlhjOGJHOXVaeUJrYjNWaWJHVStBRTR4TUdWdGMyTnlhWEIwWlc0eE1XMWxiVzl5ZVY5MmFXVjNTV1ZGUlFCT01UQmxiWE5qY21sd2RHVnVNVEZ0WlcxdmNubGZkbWxsZDBsa1JVVUFUakV3WlcxelkzSnBjSFJsYmpFeGJXVnRiM0o1WDNacFpYZEpaa1ZGQUU0eE1HVnRjMk55YVhCMFpXNHhNVzFsYlc5eWVWOTJhV1YzU1cxRlJRQk9NVEJsYlhOamNtbHdkR1Z1TVRGdFpXMXZjbmxmZG1sbGQwbHNSVVVBVGpFd1pXMXpZM0pwY0hSbGJqRXhiV1Z0YjNKNVgzWnBaWGRKYWtWRkFFNHhNR1Z0YzJOeWFYQjBaVzR4TVcxbGJXOXllVjkyYVdWM1NXbEZSUUJPTVRCbGJYTmpjbWx3ZEdWdU1URnRaVzF2Y25sZmRtbGxkMGwwUlVVQVRqRXdaVzF6WTNKcGNIUmxiakV4YldWdGIzSjVYM1pwWlhkSmMwVkZBRTR4TUdWdGMyTnlhWEIwWlc0eE1XMWxiVzl5ZVY5MmFXVjNTV2hGUlFCT01UQmxiWE5qY21sd2RHVnVNVEZ0WlcxdmNubGZkbWxsZDBsaFJVVUFUakV3WlcxelkzSnBjSFJsYmpFeGJXVnRiM0o1WDNacFpYZEpZMFZGQUU0eE1HVnRjMk55YVhCMFpXNHpkbUZzUlFCT1UzUXpYMTh5TVRKaVlYTnBZMTl6ZEhKcGJtZEphRTVUWHpFeFkyaGhjbDkwY21GcGRITkphRVZGVGxOZk9XRnNiRzlqWVhSdmNrbG9SVVZGUlFBU0VSTVVGUllYR0JrYUd4d2RIaDhnSVJFaUl5UVJKU1luS0NrcUt5d1JMUzR2RUJBd0VCQVFFQkFRRURFeU14QTBOUkFRRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFVFlSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkUzRVJFUkVUZ1JPVG83UEQwK0VSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVQ4UUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFSUUVFUlFrTkVSVVpIU0VrUUVCQktTMHhOVGhBUUVFOVFFQkFRRUZFUUVCQVFFQkFRRUJBUkVSRlNVeEFRRUJBUUVCQVFFQkFRRVJFUkVWUVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUkVWVVFFQkFRVmhBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJCWEVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJCWVdWcGJFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUZ3UUVCQVFFQkFRRUJBUUVCQVFFQkFRRUFCQnVzTUFDeUQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy93QkI0c01BQ3piKy8vOEgvdi8vQndBQUFBQUFCQ0FFLy85Ly8vLy9mLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL0Qvd01BSDFBQVFhTEVBQXVrQVNBQUFBQUFBTjg4UU5mLy8vdi8vLy8vLy8vLy8vKy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vOEQvUC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLzhBL3YvLy8zOEMvdi8vLy84QUFBQUFBUCsvdGdELy8vOEhCd0FBQVA4SC8vLy8vLy8vLy83L3cvLy8vLy8vLy8vLy8vLy8vKzhmL3VIL253QUEvLy8vLy8vL0FPRC8vLy8vLy8vLy8vLy8vLzhEQVAvLy8vLy9CekFFLy8vLy9QOGZBQUQvLy84QkFFSE94UUFMNUFIOUh3QUFBQUFBQVBBRC8zLy8vLy8vLy8vLzcvL2Y0Zi9QLy83KzdwLzUvLy85eGVPZldZQ3d6LzhEQU82SCtmLy8vVzNEaHhrQ1hzRC9Qd0R1di92Ly8vM3Q0NzhiQVFEUC93QUE3cC81Ly8vOTdlT2ZHY0N3ei84Q0FPekhQZFlZeC8vRHh4MkJBTUQvQUFEdTMvMy8vLzN2NDk4ZFlBUFAvd0FBN04vOS8vLzk3K1BmSFdCQXovOEdBT3pmL2YvLy8vL24zMTJBQU0vL0FQenMvMy84Ly8vN0wzK0FYLzhBQUF3QS92Ly8vLzkvL3djL0lQOERBQUFBQUpZbDhQNnU3UDg3WHlELzh3QUFBQUFCQUFBQS93TUFBUC8rLy8vL0gvNy9BLy8vL3YvLy94OEFRYnJIQUF1VkF2Ly8vLy8vLzMvNS93UC8vK2ZCLy85L1FQOHovLy8vLzc4Zy8vLy8vLy8zLy8vLy8vLy8vLy8vUFg4OS8vLy8vLzg5Ly8vLy96MS9QZjkvLy8vLy8vLy8vejMvLy8vLy8vLy8vNGNBQUFBQS8vOEFBUC8vLy8vLy8vLy8vLzhmQVA3Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLzUvLy8vNy8vd2YvLy8vLy8vLy8vLy9IQVFELzN3OEEvLzhQQVAvL0R3RC8zdzBBLy8vLy8vLy96Ly8vQVlBUS93TUFBQUFBL3dQLy8vLy8vLy8vLy8vLy93RC8vLy8vL3dmLy8vLy8vLy8vL3o4QS8vLy9ILzhQL3dIQS8vLy8vejhmQVAvLy8vLy9ELy8vL3dQL0F3QUFBQUQvLy84UC8vLy8vLy8vLzMvKy94OEEvd1AvQTRBQVFkckpBQXN3Ly8vLy8vLy83Ly92RC84REFBQUFBUC8vLy8vLzgvLy8vLy8vLzcvL0F3RC8vLy8vLy84L0FQL2ovLy8vLy84L0FFR1h5Z0FMRzk1dkFQLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL3dCQnVzb0FDeUQvL3o4Ly8vLy8vejgvLzZyLy8vOC8vLy8vLy8vLzMxL2NIODhQL3gvY0h3QkI2TW9BQ3dZQ2dBQUEveDhBUWZyS0FBc1NoUHd2UGxDOS8vUGdRd0FBLy8vLy8vOEJBRUd3eXdBTFVNRC8vLy8vLy84REFBRC8vLy8vLzMvLy8vLy8vMy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9IM2dNQVAvLy8vKy9JUC8vLy8vLy8vK0FBQUQvLzM4QWYzOS9mMzkvZjMvLy8vLy9BQUFBQUFDQUFFR2F6QUFMVitBQUFBRCtBejRmL3YvLy8vLy8vLy8vLzMvZy92Ly8vLy8vLy8vLy8vLzM0UC8vLy84Ly92Ly8vLy8vLy8vLy8vOS9BQUQvLy84SEFBQUFBQUFBLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9Qd0JCK3N3QUN6TC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL0h3QUFBQUFBQVAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vSHdCQnRNMEFDenovLy8vLy96Ly9ILy8vL3c4QUFQLy8vLy8vZi9DUC8vLy9nUC8vLy8vLy8vLy8vLzhBQUFBQWdQLzgvLy8vLy8vLy8vLy8vLy8vZVE4QS93Y0FRZm5OQUF0bi83djMvLy8vQUFBQS8vLy8vLy8vRHdELy8vLy8vLy8vL3c4QS93TUFBUHdJLy8vLy8vOEgvLy8vL3djQS8vLy9ILy8vLy8vLy8vZi9BSUQvQXdBQUFBRC8vLy8vLy85L0FQOC8vd1AvLzM4RS8vLy8vLy8vLzM4RkFBQTQvLzg4QUg1K2ZnQi9md0JCOHM0QUM0Z0IvLy8vLy84SC93UC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vdzhBLy85LytQLy8vLy8vRC8vLy8vLy8vLy8vLy8vLy8vOC8vLy8vLy8vLy8vLy8vLy8vL3dNQUFBQUFmd0Q0NFAvOWYxL2IvLy8vLy8vLy8vLy8vLy8vL3dNQUFBRDQvLy8vLy8vLy8vLy8vLy8vUHdBQS8vLy8vLy8vLy8vOC8vLy8vLy8vQUFBQUFBRC9Ed0JCaU5BQUMxTGYvLy8vLy8vLy8vLy8vLy8vLy8vLy94OEFBUDhEL3YvL0IvNy8vd2ZBLy8vLy8vLy8vLy8vLzMvOC9Qd2NBQUFBQVAvdi8vOS8vLyszL3ovL1B3QUFBQUQvLy8vLy8vLy8vLy8vLy8vLy8vOEhBRUhpMEFBTEIvLy8vLy8vL3g4QVFZclJBQXRHLy8vL0gvLy8vLy8vL3dFQUFBQUFBUC8vLzM4QUFQLy8vd2NBQUFBQUFBRC8vLzgvLy8vLy93Ly9QZ0FBQUFBQS8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy96Ly9Bd0JCMnRFQUN3cy8vZi8vLy8rL2tmLy9Qd0JCK3RFQUN3ai8vejhBLy8vL0F3QkJpdElBQ3dqLy8vLy8vLy8vd0FCQm10SUFDeEJ2OE8vKy8vOFBBQUFBQUFELy8vOGZBRUc2MGdBTEQvLy8vLy8vL3o4QS8vOC9BUC8vQndCQjJ0SUFDd3IvLy8vLy8vLy8vLzhCQUVINjBnQUxLUC8vLy8vLy8vLy9Qd0FBQU1EL0FBRDgvLy8vLy8vL0FRQUEvLy8vQWY4RC8vLy8vLy8veC84QVFhclRBQXNNLy8vLy8vLy8vLzhlQVA4REFFSEswd0FMSHYvLy8vLy8vejhBL3dNQUFBQUFBQUQvLy8vLy8vLy8vLy8vLy8vL2Z3QkIrdE1BQ3czLy8vLy8vLy8vLy8vLy8vOEhBRUdhMUFBTEJ2Ly8vLy8vZndCQnV0UUFDd2ovLy8vLy8vLy9BUUJCMnRRQUN4VC8vLy8vLy8vLy94OEEvLy8vLy85L0FBRDQvd0JCK3RRQUN3RURBRUdhMVFBTG1BSC8vLy8vLy8vLy8vLy8zLy8vLy8vLy8vLy8zMlRlLyt2di8vLy8vLy8vLzcvbjM5Ly8vLzk3WC96OS8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLzgvLy8vLy9mLy85Ly8vLy9mLy85Ly8vLy9mLy85Ly8vLy9mLy8vLy8zLy8vLzkvLy8zei8vLy8vLy8vKy8vLy8rVy92Y0toT3FXcXBiMzkxNy8rLzhQN3Z2L0R3QkJ1dFlBQytzUFZDRWlHUTBCQWdNUlN4d01FQVFMSFJJZUoyaHViM0J4WWlBRkJnOFRGQlVhQ0JZSEtDUVhHQWtLRGhzZkpTT0RnbjBtS2lzOFBUNC9RMGRLVFZoWldsdGNYVjVmWUdGalpHVm1aMmxxYTJ4eWMzUjVlbnQ4QUVsc2JHVm5ZV3dnWW5sMFpTQnpaWEYxWlc1alpRQkViMjFoYVc0Z1pYSnliM0lBVW1WemRXeDBJRzV2ZENCeVpYQnlaWE5sYm5SaFlteGxBRTV2ZENCaElIUjBlUUJRWlhKdGFYTnphVzl1SUdSbGJtbGxaQUJQY0dWeVlYUnBiMjRnYm05MElIQmxjbTFwZEhSbFpBQk9ieUJ6ZFdOb0lHWnBiR1VnYjNJZ1pHbHlaV04wYjNKNUFFNXZJSE4xWTJnZ2NISnZZMlZ6Y3dCR2FXeGxJR1Y0YVhOMGN3QldZV3gxWlNCMGIyOGdiR0Z5WjJVZ1ptOXlJR1JoZEdFZ2RIbHdaUUJPYnlCemNHRmpaU0JzWldaMElHOXVJR1JsZG1salpRQlBkWFFnYjJZZ2JXVnRiM0o1QUZKbGMyOTFjbU5sSUdKMWMza0FTVzUwWlhKeWRYQjBaV1FnYzNsemRHVnRJR05oYkd3QVVtVnpiM1Z5WTJVZ2RHVnRjRzl5WVhKcGJIa2dkVzVoZG1GcGJHRmliR1VBU1c1MllXeHBaQ0J6WldWckFFTnliM056TFdSbGRtbGpaU0JzYVc1ckFGSmxZV1F0YjI1c2VTQm1hV3hsSUhONWMzUmxiUUJFYVhKbFkzUnZjbmtnYm05MElHVnRjSFI1QUVOdmJtNWxZM1JwYjI0Z2NtVnpaWFFnWW5rZ2NHVmxjZ0JQY0dWeVlYUnBiMjRnZEdsdFpXUWdiM1YwQUVOdmJtNWxZM1JwYjI0Z2NtVm1kWE5sWkFCSWIzTjBJR2x6SUdSdmQyNEFTRzl6ZENCcGN5QjFibkpsWVdOb1lXSnNaUUJCWkdSeVpYTnpJR2x1SUhWelpRQkNjbTlyWlc0Z2NHbHdaUUJKTDA4Z1pYSnliM0lBVG04Z2MzVmphQ0JrWlhacFkyVWdiM0lnWVdSa2NtVnpjd0JDYkc5amF5QmtaWFpwWTJVZ2NtVnhkV2x5WldRQVRtOGdjM1ZqYUNCa1pYWnBZMlVBVG05MElHRWdaR2x5WldOMGIzSjVBRWx6SUdFZ1pHbHlaV04wYjNKNUFGUmxlSFFnWm1sc1pTQmlkWE41QUVWNFpXTWdabTl5YldGMElHVnljbTl5QUVsdWRtRnNhV1FnWVhKbmRXMWxiblFBUVhKbmRXMWxiblFnYkdsemRDQjBiMjhnYkc5dVp3QlRlVzFpYjJ4cFl5QnNhVzVySUd4dmIzQUFSbWxzWlc1aGJXVWdkRzl2SUd4dmJtY0FWRzl2SUcxaGJua2diM0JsYmlCbWFXeGxjeUJwYmlCemVYTjBaVzBBVG04Z1ptbHNaU0JrWlhOamNtbHdkRzl5Y3lCaGRtRnBiR0ZpYkdVQVFtRmtJR1pwYkdVZ1pHVnpZM0pwY0hSdmNnQk9ieUJqYUdsc1pDQndjbTlqWlhOekFFSmhaQ0JoWkdSeVpYTnpBRVpwYkdVZ2RHOXZJR3hoY21kbEFGUnZieUJ0WVc1NUlHeHBibXR6QUU1dklHeHZZMnR6SUdGMllXbHNZV0pzWlFCU1pYTnZkWEpqWlNCa1pXRmtiRzlqYXlCM2IzVnNaQ0J2WTJOMWNnQlRkR0YwWlNCdWIzUWdjbVZqYjNabGNtRmliR1VBVUhKbGRtbHZkWE1nYjNkdVpYSWdaR2xsWkFCUGNHVnlZWFJwYjI0Z1kyRnVZMlZzWldRQVJuVnVZM1JwYjI0Z2JtOTBJR2x0Y0d4bGJXVnVkR1ZrQUU1dklHMWxjM05oWjJVZ2IyWWdaR1Z6YVhKbFpDQjBlWEJsQUVsa1pXNTBhV1pwWlhJZ2NtVnRiM1psWkFCRVpYWnBZMlVnYm05MElHRWdjM1J5WldGdEFFNXZJR1JoZEdFZ1lYWmhhV3hoWW14bEFFUmxkbWxqWlNCMGFXMWxiM1YwQUU5MWRDQnZaaUJ6ZEhKbFlXMXpJSEpsYzI5MWNtTmxjd0JNYVc1cklHaGhjeUJpWldWdUlITmxkbVZ5WldRQVVISnZkRzlqYjJ3Z1pYSnliM0lBUW1Ga0lHMWxjM05oWjJVQVJtbHNaU0JrWlhOamNtbHdkRzl5SUdsdUlHSmhaQ0J6ZEdGMFpRQk9iM1FnWVNCemIyTnJaWFFBUkdWemRHbHVZWFJwYjI0Z1lXUmtjbVZ6Y3lCeVpYRjFhWEpsWkFCTlpYTnpZV2RsSUhSdmJ5QnNZWEpuWlFCUWNtOTBiMk52YkNCM2NtOXVaeUIwZVhCbElHWnZjaUJ6YjJOclpYUUFVSEp2ZEc5amIyd2dibTkwSUdGMllXbHNZV0pzWlFCUWNtOTBiMk52YkNCdWIzUWdjM1Z3Y0c5eWRHVmtBRk52WTJ0bGRDQjBlWEJsSUc1dmRDQnpkWEJ3YjNKMFpXUUFUbTkwSUhOMWNIQnZjblJsWkFCUWNtOTBiMk52YkNCbVlXMXBiSGtnYm05MElITjFjSEJ2Y25SbFpBQkJaR1J5WlhOeklHWmhiV2xzZVNCdWIzUWdjM1Z3Y0c5eWRHVmtJR0o1SUhCeWIzUnZZMjlzQUVGa1pISmxjM01nYm05MElHRjJZV2xzWVdKc1pRQk9aWFIzYjNKcklHbHpJR1J2ZDI0QVRtVjBkMjl5YXlCMWJuSmxZV05vWVdKc1pRQkRiMjV1WldOMGFXOXVJSEpsYzJWMElHSjVJRzVsZEhkdmNtc0FRMjl1Ym1WamRHbHZiaUJoWW05eWRHVmtBRTV2SUdKMVptWmxjaUJ6Y0dGalpTQmhkbUZwYkdGaWJHVUFVMjlqYTJWMElHbHpJR052Ym01bFkzUmxaQUJUYjJOclpYUWdibTkwSUdOdmJtNWxZM1JsWkFCRFlXNXViM1FnYzJWdVpDQmhablJsY2lCemIyTnJaWFFnYzJoMWRHUnZkMjRBVDNCbGNtRjBhVzl1SUdGc2NtVmhaSGtnYVc0Z2NISnZaM0psYzNNQVQzQmxjbUYwYVc5dUlHbHVJSEJ5YjJkeVpYTnpBRk4wWVd4bElHWnBiR1VnYUdGdVpHeGxBRkpsYlc5MFpTQkpMMDhnWlhKeWIzSUFVWFZ2ZEdFZ1pYaGpaV1ZrWldRQVRtOGdiV1ZrYVhWdElHWnZkVzVrQUZkeWIyNW5JRzFsWkdsMWJTQjBlWEJsQUU1dklHVnljbTl5SUdsdVptOXliV0YwYVc5dUFBQk1RMTlCVEV3QVRFTmZRMVJaVUVVQUFBQUFURU5mVGxWTlJWSkpRd0FBVEVOZlZFbE5SUUFBQUFBQVRFTmZRMDlNVEVGVVJRQUFURU5mVFU5T1JWUkJVbGtBVEVOZlRVVlRVMEZIUlZNQVRFRk9Sd0JETGxWVVJpMDRBRkJQVTBsWUFFMVZVMHhmVEU5RFVFRlVTQUFSQUFvQUVSRVJBQUFBQUFVQUFBQUFBQUFKQUFBQUFBc0FRYTNtQUFzaEVRQVBDaEVSRVFNS0J3QUJFd2tMQ3dBQUNRWUxBQUFMQUFZUkFBQUFFUkVSQUVIZTVnQUxBUXNBUWVmbUFBc1lFUUFLQ2hFUkVRQUtBQUFDQUFrTEFBQUFDUUFMQUFBTEFFR1k1d0FMQVF3QVFhVG5BQXNWREFBQUFBQU1BQUFBQUFrTUFBQUFBQUFNQUFBTUFFSFM1d0FMQVE0QVFkN25BQXNWRFFBQUFBUU5BQUFBQUFrT0FBQUFBQUFPQUFBT0FFR002QUFMQVJBQVFaam9BQXNlRHdBQUFBQVBBQUFBQUFrUUFBQUFBQUFRQUFBUUFBQVNBQUFBRWhJU0FFSFA2QUFMRGhJQUFBQVNFaElBQUFBQUFBQUpBRUdBNlFBTEFRc0FRWXpwQUFzVkNnQUFBQUFLQUFBQUFBa0xBQUFBQUFBTEFBQUxBRUc2NlFBTEFRd0FRY2JwQUF0ZERBQUFBQUFNQUFBQUFBa01BQUFBQUFBTUFBQU1BQUF0S3lBZ0lEQllNSGdBTFRCWUt6QllJREJZTFRCNEt6QjRJREI0QUdsdVpnQkpUa1lBYm1GdUFFNUJUZ0F3TVRJek5EVTJOemc1UVVKRFJFVkdMZ0JETGxWVVJpMDRBRUdzNmdBTEdrTUFFUUFLQUJFUkVRQUFBQUFGQUFBQUFBQUFDUUFBQUFBTEFFSE82Z0FMR2hFQUR3b1JFUkVEQ2djQUFSTUpDd3NBQUFrR0N3QUFDd0FHQUVILzZnQUxBUXNBUVlyckFBc1dDZ29BQUFBQUNnQUFBZ0FKQ3dBQUFBa0FDd0FBQ3dCQnVlc0FDd0VNQUVIRjZ3QUxGUXdBQUFBQURBQUFBQUFKREFBQUFBQUFEQUFBREFCQjgrc0FDd0VPQUVILzZ3QUxGUTBBQUFBRURRQUFBQUFKRGdBQUFBQUFEZ0FBRGdCQnJld0FDd0VRQUVHNTdBQUxIZzhBQUFBQUR3QUFBQUFKRUFBQUFBQUFFQUFBRUFBQUVnQUFBQklTRWdCQjhPd0FDdzRTQUFBQUVoSVNBQUFBQUFBQUNRQkJvZTBBQ3dFTEFFR3Q3UUFMRlFvQUFBQUFDZ0FBQUFBSkN3QUFBQUFBQ3dBQUN3QkIyKzBBQ3dFTUFFSG43UUFMdkFjTUFBQUFBQXdBQUFBQUNRd0FBQUFBQUF3QUFBd0FBQ1VxY3dBb2JuVnNiQ2tBSXdBckFDMEFJQUF3QUV3QUFHcE1URXdBYWdBQUFBQUFhbW9BQUFBQWFnQUFhaVVsSlhNbGN5VnpKWE1sY3lvdUtpVmpKV01BWW1GemFXTmZjM1J5YVc1bkFHRnNiRzlqWVhSdmNqeFVQam82WVd4c2IyTmhkR1VvYzJsNlpWOTBJRzRwSUNkdUp5QmxlR05sWldSeklHMWhlR2x0ZFcwZ2MzVndjRzl5ZEdWa0lITnBlbVVBZEdWeWJXbHVZWFJwYm1jZ2QybDBhQ0FsY3lCbGVHTmxjSFJwYjI0Z2IyWWdkSGx3WlNBbGN6b2dKWE1BZEdWeWJXbHVZWFJwYm1jZ2QybDBhQ0FsY3lCbGVHTmxjSFJwYjI0Z2IyWWdkSGx3WlNBbGN3QjBaWEp0YVc1aGRHbHVaeUIzYVhSb0lDVnpJR1p2Y21WcFoyNGdaWGhqWlhCMGFXOXVBSFJsY20xcGJtRjBhVzVuQUhWdVkyRjFaMmgwQUZOME9XVjRZMlZ3ZEdsdmJnQk9NVEJmWDJONGVHRmlhWFl4TVRaZlgzTm9hVzFmZEhsd1pWOXBibVp2UlFCVGREbDBlWEJsWDJsdVptOEFUakV3WDE5amVIaGhZbWwyTVRJd1gxOXphVjlqYkdGemMxOTBlWEJsWDJsdVptOUZBRTR4TUY5ZlkzaDRZV0pwZGpFeE4xOWZZMnhoYzNOZmRIbHdaVjlwYm1adlJRQndkR2h5WldGa1gyOXVZMlVnWm1GcGJIVnlaU0JwYmlCZlgyTjRZVjluWlhSZloyeHZZbUZzYzE5bVlYTjBLQ2tBWTJGdWJtOTBJR055WldGMFpTQndkR2h5WldGa0lHdGxlU0JtYjNJZ1gxOWplR0ZmWjJWMFgyZHNiMkpoYkhNb0tRQmpZVzV1YjNRZ2VtVnlieUJ2ZFhRZ2RHaHlaV0ZrSUhaaGJIVmxJR1p2Y2lCZlgyTjRZVjluWlhSZloyeHZZbUZzY3lncEFIUmxjbTFwYm1GMFpWOW9ZVzVrYkdWeUlIVnVaWGh3WldOMFpXUnNlU0J5WlhSMWNtNWxaQUIwWlhKdGFXNWhkR1ZmYUdGdVpHeGxjaUIxYm1WNGNHVmpkR1ZrYkhrZ2RHaHlaWGNnWVc0Z1pYaGpaWEIwYVc5dUFITjBaRG82WW1Ga1gyRnNiRzlqQUZOME9XSmhaRjloYkd4dll3QlRkREV4Ykc5bmFXTmZaWEp5YjNJQVUzUXhNbXhsYm1kMGFGOWxjbkp2Y2dCT01UQmZYMk40ZUdGaWFYWXhNVGxmWDNCdmFXNTBaWEpmZEhsd1pWOXBibVp2UlFCT01UQmZYMk40ZUdGaWFYWXhNVGRmWDNCaVlYTmxYM1I1Y0dWZmFXNW1iMFVBVGpFd1gxOWplSGhoWW1sMk1USXpYMTltZFc1a1lXMWxiblJoYkY5MGVYQmxYMmx1Wm05RkFIWUFSRzRBWWdCakFHZ0FZUUJ6QUhRQWFRQnFBR3dBYlFCbUFHUUFUakV3WDE5amVIaGhZbWwyTVRFMlgxOWxiblZ0WDNSNWNHVmZhVzVtYjBVQVRqRXdYMTlqZUhoaFltbDJNVEl4WDE5MmJXbGZZMnhoYzNOZmRIbHdaVjlwYm1adlJRPT0iKSxnLm9uUnVudGltZUluaXRpYWxpemVkPSgpPT5wb3N0TWVzc2FnZSh7dHlwZToiV0FTTV9MT0FERUQifSk7ZWxzZSBpZigiZmV0Y2giPT1BLmRhdGEudHlwZSlFKEEuZGF0YSkudGhlbigoQj0+e0MoQSxCKX0pLChCPT57Y29uc3QgST17dHlwZToiRVJST1IiLHJlc291cmNlSWQ6QS5kYXRhLnJlc291cmNlSWQsdXJsOkEuZGF0YS51cmx9O3NlbGYucG9zdE1lc3NhZ2UoSSl9KSk7ZWxzZSBpZigidW5wYWNrIj09QS5kYXRhLnR5cGUpe2NvbnN0e2J1ZmZlcjpCfT1BLmRhdGE7aWYoIUkpdGhyb3cgbmV3IEVycm9yKCJ1bnBhY2tCcmlkZ2Ugbm90IGRldGVjdGVkIik7aWYoIWcpdGhyb3cgbmV3IEVycm9yKCJ1bnBhY2sgbm90IGRldGVjdGVkIik7Y29uc3QgUT1JLmNyZWF0ZUV4dHJhY3RvckZyb21EYXRhKEIpLmV4dHJhY3RBbGwoKTtDKEEsUSl9fX0oKTsKCg==","data:application/json;charset=utf-8;base64,",!1);const cB=zU.hardwareConcurrency-1;const nB=new class extends nQ{constructor(){super(),this.__adapter=void 0,this.__totalWork=0,this.__doneWork=0,this.plugins={},this.systemUrls={};const F="https://storage.googleapis.com/visualive-tmp/zea-engine-resources";this.systemUrls["ZeaEngine/Vive.vla"]=F+"/Vive.vla",this.systemUrls["ZeaEngine/Oculus.vla"]=F+"/Oculus.vla",this.__commonResources={}}setAdapter(F){this.__adapter=F}getAdapter(){return this.__adapter}registerPlugin(F){k("Resource loader plugin registered: %s",F.getType()),F.init(this),this.plugins[F.getType()]=F}resolveFileId(F){return this.__adapter?this.__adapter.resolveFileId(F):F}resolveFilename(F){return this.__adapter?this.__adapter.resolveFilename(F):F.includes("/")?F.split("/")[1]:F}resolveURL(F){return this.__adapter?this.__adapter.resolveURL(F):this.systemUrls[F]?this.systemUrls[F]:F}loadURL(F,U,Q,B=!0){return console.warn('Deprecated. Use "#loadUrl".'),this.loadUrl(F,U,Q,B)}loadUrl(F,U,Q,B=!0){console.warn("deprecated use #loadArchive"),this.loadArchive(U).then((F=>{Q(F)}))}loadArchive(F){return console.warn("Deprecated. Use \"#loadFile('archive', url)\"."),this.loadFile("archive",F)}loadJSON(F){return console.warn("Deprecated. Use \"#loadFile('json', url)\"."),this.loadFile("json",F)}loadText(F){return console.warn("Deprecated. Use \"#loadFile('text', url)\"."),this.loadFile("text",F)}loadFile(F,U){const Q=this.plugins[F];if(!Q)throw new Error(`There's no plugin registered for the type of file "${F}". Did you add the plugins script? See: https://docs.zea.live/zea-engine/#/adding-default-plugins`);this.incrementWorkload();const B=Q.loadFile(U);return B.then((()=>{this.incrementWorkDone(),this.emit("loaded",{url:U})}),(()=>{this.incrementWorkDone()})),B}getCommonResource(F){return this.__commonResources[F]}setCommonResource(F,U){this.__commonResources[F]=U}loadCommonAssetResource(F){return getCommonResource(F)}addWork(F,U){this.incrementWorkload(U)}addWorkDone(F,U){this.incrementWorkDone(U)}incrementWorkload(F=1){this.__totalWork+=F;const U=this.__doneWork/this.__totalWork*100;this.emit("progressIncremented",{percent:U})}incrementWorkDone(F=1){this.__doneWork+=F;const U=this.__doneWork/this.__totalWork*100;if(this.emit("progressIncremented",{percent:U}),this.__doneWork>this.__totalWork)throw new Error("Mismatch between work loaded and work done.")}},aB=new class{constructor(){this.__callbacks={},this.__workers=[],this.__nextWorker=0}init(F){this.resourceLoader=F}getType(){return"archive"}__getWorker(){return this.__nextWorker=(this.__nextWorker+1)%cB,null==this.__workers[this.__nextWorker]&&(this.__workers[this.__nextWorker]=(()=>new Promise(((F,U)=>{const Q=new ZB;Q.postMessage({type:"init"}),Q.onmessage=B=>{if("WASM_LOADED"===B.data.type)F(Q);else if("FINISHED"===B.data.type)this.__onFinishedReceiveFileData(B.data);else if("ERROR"===B.data.type){const F=B.data;console.warn("Unable to load Resource: "+F.resourceId,B.data),U(new Error("Unable to load Resource: "+F.resourceId))}}})))()),this.__workers[this.__nextWorker]}__terminateWorkers(){for(const F of this.__workers)F.terminate();this.__workers=[]}loadFile(F){this.resourceLoader.incrementWorkload(1);return new Promise(((U,Q)=>{F in this.__callbacks||(this.__callbacks[F]=[]),this.__callbacks[F].push(U),fetch(F).then((U=>{if(this.resourceLoader.incrementWorkDone(1),function(F){return!!F.ok&&F}(U))return U.arrayBuffer();Q(new Error(`loadArchive: ${U.status} - ${U.statusText} : ${F}`))})).then((Q=>{const B=F;B in this.__callbacks||(this.__callbacks[B]=[]),this.__callbacks[B].push(U),this.__getWorker().then((F=>{F.postMessage({type:"unpack",resourceId:B,buffer:Q})}))}))}),(()=>{}))}__onFinishedReceiveFileData(F){const U=F.resourceId,Q=this.__callbacks[U];if(Q){for(const U of Q)U(F.entries);delete this.__callbacks[U]}}shutDownWorkers(){this.__workers.forEach((F=>{F.then((F=>{F.terminate()}))}))}};nB.registerPlugin(aB);const SB=new class{init(F){this.resourceLoader=F}getType(){return"json"}loadFile(F){this.resourceLoader.incrementWorkload(1);return new Promise(((U,Q)=>{fetch(F).then((B=>{this.resourceLoader.incrementWorkDone(1),!function(F){return!!F.ok&&F}(B)?Q(`loadJSON: ${B.status} - ${B.statusText} : ${F}`):U(B.json())}))}),(()=>{}))}};nB.registerPlugin(SB);const gB=new class{init(F){this.resourceLoader=F}getType(){return"text"}loadFile(F){this.resourceLoader.incrementWorkload(1);return new Promise(((U,Q)=>{fetch(F).then((B=>{this.resourceLoader.incrementWorkDone(1),!function(F){return!!F.ok&&F}(B)?Q(`loadText: ${B.status} - ${B.statusText} : ${F}`):U(B.text())}))}),(()=>{}))}};nB.registerPlugin(gB);const bB=new class{init(F){this.resourceLoader=F}getType(){return"binary"}loadFile(F){this.resourceLoader.incrementWorkload(1);return new Promise(((U,Q)=>{fetch(F).then((B=>{this.resourceLoader.incrementWorkDone(1),!function(F){return!!F.ok&&F}(B)?Q(`loadBinary: ${B.status} - ${B.statusText} : ${F}`):U(B.arrayBuffer())}))}),(()=>{}))}};nB.registerPlugin(bB);class GB{constructor(F){if(F){const U=F.split("-"),Q=U[0].split(".");this.major=parseInt(Q[0]),this.minor=parseInt(Q[1]),this.patch=parseInt(Q[2]),2==U.length&&(this.branch=U[1])}else this.major=0,this.minor=0,this.patch=0}compare(F){const U=[this.major,this.minor,this.patch];for(let Q=0;Q<3;Q++)if(U[Q]!==F[Q])return U[Q]-F[Q];return 0}equals(F){return console.log("Version#equals method is deprecated, use 'compare' instead "),!(this.patch==F[2]&&this.minor==F[1]&&this.major==F[0])}lessThan(F){return console.log("Version#lessThan method is deprecated, use 'compare' instead "),!(this.major>=F[0]||this.minor>=F[1]||this.patch>=F[2])}greaterThan(F){return console.log("Version#greaterThan method is deprecated, use 'compare' instead "),this.major>F[0]||this.minor>F[1]||this.patch>F[2]}greaterOrEqualThan(F){return console.log("Version#greaterOrEqualThan method is deprecated, use 'compare' instead "),!(this.major<F[0])&&(this.major>F[0]||!(this.minor<F[1])&&(this.minor>F[1]||!(this.patch<F[2])))}}class CB{constructor(F=0){this.__data=new ArrayBuffer(F),this.__byteOffset=0,this.__reserved=F,this.__dataView=new DataView(this.__data)}pos(){return this.__byteOffset}seek(F){this.__byteOffset=F}seekEnd(){this.__byteOffset=this.__reserved}getBuffer(){if(this.__data.byteLength==this.__byteOffset)return this.__data;return new Uint8Array(this.__data).slice(0,this.__byteOffset).buffer}__grow(){const F=2*(this.__reserved>0?this.__reserved:1),U=new ArrayBuffer(F),Q=new Uint8Array(U),B=new Uint8Array(this.__data);Q.set(B),this.__data=U,this.__dataView=new DataView(this.__data),this.__reserved=F}__reserve(F){this.__byteOffset+F>this.__reserved&&this.__grow()}__offset(F){this.__byteOffset+=F,this.__byteOffset>this.__reserved&&this.__grow()}writeUInt8(F){this.__reserve(1),this.__dataView.setUint8(this.__byteOffset,F),this.__offset(1)}writeUInt16(F){this.__reserve(2),this.__dataView.setUint16(this.__byteOffset,F,!0),this.__offset(2)}writeUInt32(F){this.__reserve(4),this.__dataView.setUint32(this.__byteOffset,F,!0),this.__offset(4)}writeSInt32(F){this.__reserve(4),this.__dataView.setInt32(this.__byteOffset,F,!0),this.__offset(4)}writeFloat16(F){const U=DU.encode16BitFloat(F);this.writeUInt16(U)}writeFloat32(F){this.__reserve(4),this.__dataView.setFloat32(this.__byteOffset,F,!0),this.__offset(4)}writeUInt8Array(F,U=!0){const Q=F.size?F.size:F.length;this.__reserve(Q+(U?4:0)),U&&this.writeUInt32(Q);for(let U=0;U<Q;U++)this.writeUInt8(F[U])}writeUInt16Array(F,U=!0){const Q=F.size?F.size:F.length;this.__reserve(2*Q+(U?4:0)),U&&this.writeUInt32(Q);for(let U=0;U<Q;U++)this.writeUInt16(F[U])}writeUInt32Array(F,U=!0){const Q=F.size?F.size:F.length;this.__reserve(4*Q+(U?4:0)),U&&this.writeUInt32(Q);for(let U=0;U<Q;U++)this.writeUInt32(F[U])}writeFloat32Array(F,U=!0){const Q=F.size?F.size:F.length;this.__reserve(4*Q+(U?4:0)),U&&this.writeUInt32(Q);for(let U=0;U<Q;U++)this.writeFloat32(F[U])}writeStr(F,U=!0){const Q=F.length;this.__reserve(4*Q+(U?4:0)),U&&this.writeUInt32(Q);for(let U=0;U<Q;U++)this.writeFloat32(F.charCodeAt(U))}writeSInt32Vec2(F){this.writeSInt32(F.x),this.writeSInt32(F.y)}writeUInt32Vec2(F){this.writeUInt32(F.x),this.writeUInt32(F.y)}writeFloat16Vec2(F){this.writeFloat16(F.x),this.writeFloat16(F.y)}writeFloat32Vec2(F){this.writeFloat32(F.x),this.writeFloat32(F.y)}writeFloat16Vec3(F){this.writeFloat16(F.x),this.writeFloat16(F.y),this.writeFloat16(F.z)}writeFloat32Vec3(F){this.writeFloat32(F.x),this.writeFloat32(F.y),this.writeFloat32(F.z)}writeFloat16Quat(F){this.writeFloat16(F.x),this.writeFloat16(F.y),this.writeFloat16(F.z),this.writeFloat16(F.w)}writeFloat32Quat(F){this.writeFloat32(F.x),this.writeFloat32(F.y),this.writeFloat32(F.z),this.writeFloat32(F.w)}writeRGBFloat32Color(F){this.writeFloat32(F.r),this.writeFloat32(F.g),this.writeFloat32(F.b)}writeRGBAFloat32Color(F){this.writeFloat32(F.r),this.writeFloat32(F.g),this.writeFloat32(F.b),this.writeFloat32(F.a)}writeRGBUInt8Color(F){this.writeUInt8(F.r),this.writeUInt8(F.g),this.writeUInt8(F.b)}writeRGBAUInt8Color(F){this.writeUInt8(F.r),this.writeUInt8(F.g),this.writeUInt8(F.b),this.writeUInt8(F.a)}writeBox2(F){this.writeFloat32Vec2(F.p0),this.writeFloat32Vec2(F.p1)}writeBox3(F){this.writeFloat32Vec3(F.p0),this.writeFloat32Vec3(F.p1)}writePadd(F){const U=F-this.__byteOffset;this.__reserve(U),this.__offset(U)}writeAlignment(F){const U=this.__byteOffset%F;0!=U&&(this.__reserve(F-U),this.__offset(F-U))}}class hB extends rQ{constructor(F){super(F,"","FilePath")}getFilepath(){return this.__value?nB.getFilepath(this.__value):""}setFilepath(F){this.setValue(nB.resolveFileId(F))}getFilename(){return nB.resolveFilename(this.__value)}getExt(){const F=this.getFilename(),U=F.lastIndexOf(".");if(-1!=U)return F.substring(U).toLowerCase()}getStem(){const F=this.getFilename();if(F){const U=F.split(".");return 2==U.length?U[0]:F}}getFileDesc(){return this.getFile()}getFile(){return{id:this.__value,url:this.getUrl(),name:this.getFilename()}}setUrl(F,U){this.setValue(nB.resolveFileId(F))}getUrl(){return nB.resolveURL(this.__value)}setValue(F){if(!F)throw new Error("Invalid value for setValue.");F!=this.__value&&(this.__value=F,this.emit("valueChanged",{}))}toJSON(F){return{value:this.__value}}fromJSON(F,U){F.value&&(this.__value=F.value)}clone(){const F=new hB(this.__name);return F.setValue(this.getValue()),F}}PU.register("FilePathParameter",hB);class WB extends XQ{constructor(F){super(F),this.width=0,this.height=0,this.format="RGB",this.type="UNSIGNED_BYTE",this.wrapS="REPEAT",this.wrapT="REPEAT",this.minFilter="LINEAR",this.magFilter="LINEAR",this.mipMapped=!0,this.on("parameterValueChanged",(F=>{this.emit("updated")})),this.loaded=!1}isLoaded(){return!0}getParams(){return{type:this.type,format:this.format,width:this.width,height:this.height,wrapS:this.wrapS,wrapT:this.wrapT,minFilter:this.minFilter,magFilter:this.magFilter,mipMapped:this.mipMapped}}}class mB extends pQ{constructor(F,U,Q,B){super(F,U,Q,B)}getImage(){return this.__image}setImage(F){const U=()=>{this.emit("textureDisconnected",{})};F?(null!=this.__image&&this.__image!==F&&U(),this.__image=F,this.emit("textureConnected",{}),this.emit("valueChanged",{mode:0})):null!=this.__image&&(U(),this.__image=void 0,this.emit("textureDisconnected",{}))}setValue(F){F instanceof WB?this.setImage(F):super.setValue(F)}readBinary(F,U){super.readBinary(F,U);const Q=F.loadStr();""!=Q&&(console.log("Load Texture"),this.setImage(U.materialLibrary.getImage(Q)))}clone(){return new mB(this.__name,this.__value,this.__range,this.__step)}}PU.register("MaterialFloatParam",mB);class JB extends AQ{constructor(F,U){super(F,U),this.listenerIDs={}}getImage(){return this.__image}__imageUpdated(){this.emit("valueChanged",{})}setImage(F){const U=()=>{this.__image.removeListenerById("updated",this.listenerIDs.updated),this.__image=null,this.emit("textureDisconnected",{})};F?(null!=this.__image&&this.__image!==F&&U(),this.__image=F,this.listenerIDs.updated=this.__image.on("updated",(F=>{this.__imageUpdated(F)})),this.emit("textureConnected",{}),this.emit("valueChanged")):null!=this.__image&&(U(),this.__image=void 0,this.emit("textureDisconnected"))}setValue(F){F instanceof WB?this.setImage(F):super.setValue(F)}readBinary(F,U){super.readBinary(F,U);const Q=F.loadStr();""!=Q&&this.setImage(U.materialLibrary.getImage(Q))}clone(){return new JB(this.__name,this.__value.clone())}}PU.register("MaterialColorParam",JB);const XB=(F,U,Q,B)=>"boolean"==typeof U||!1===U||!0===U?new rQ(F,U,"Boolean"):"string"==typeof U?new rQ(F,U,"String"):DU.isNumeric(U)?B?new mB(F,U,Q):new pQ(F,U,Q):U instanceof OU?new kQ(F,U):U instanceof qU?new HQ(F,U):U instanceof UQ?B?new JB(F,U):new AQ(F,U):new rQ(F,U);class EB extends XQ{constructor(F,U){super(F),this.__isTransparent=!1,this.__isTextured=!1,U&&this.setShaderName(U)}getShaderName(){return this.__shaderName}setShaderName(F){if(this.__shaderName==F)return;const U=PU.getBlueprint(F);if(!U)throw new Error("Error setting Shader. Shader not found:"+F);const Q=U.getParamDeclarations(),B={};for(const F of Q){let U=this.getParameter(F.name);U||(U=this.addParameter(XB(F.name,F.defaultValue,F.range,0!=F.texturable))),B[F.name]=!0}for(const F of this.__params)B[F.getName()]||this.removeParameter(F.getName());this.__shaderName=F,this.__checkTransparency({}),this.emit("shaderNameChanged",{shaderName:F})}removeAllTextures(){for(const F of this.__params)F.getImage&&F.getImage()&&F.setImage(void 0)}getParamTextures(){const F={};for(const U of this.__params)U.getImage&&U.getImage()&&(F[U.getName()]=U.getImage());return F}isTransparent(){return this.__isTransparent}__checkTransparency(F){let U=!1;try{PU.getBlueprint(this.__shaderName).isTransparent()&&(U=!0)}catch(F){}if(!U){const F=this.getParameter("Opacity");if(F&&(F.getValue()<.99||F.getImage&&F.getImage()))U=!0;else{const F=this.getParameter("BaseColor");F&&(F.getImage&&F.getImage()&&"RGBA"==F.getImage().format||F.getValue().a<1)&&(U=!0)}}U!=this.__isTransparent&&(this.__isTransparent=U,this.emit("transparencyChanged",{isTransparent:U}))}isTextured(){return this.__isTextured}__checkTextures(F){const{param:U}=F||{};let Q=!1;for(const F of this.__params)if(F.getImage&&F.getImage()){Q=!0;break}Q!=this.__isTextured&&(this.__isTextured=Q,this.emit("texturedChanged",{isTextured:Q,param:U}))}__parameterValueChanged(F){this.__checkTransparency(F),this.__checkTextures(F),super.__parameterValueChanged(F)}getShaderClass(){return PU.getBlueprint(this.getShaderName())}modifyParams(F,U){U&&this.setShaderName(U);for(const U in F){const Q=this.getParameter(U);Q&&(F[U]instanceof rQ?this.replaceParameter(F[U]):Q.setValue(F[U]))}}toJSON(F){const U=super.toJSON(F);return U.shader=this.__shaderName,U}fromJSON(F,U={}){F.shader?(this.setShaderName(F.shader),super.fromJSON(F,U)):console.warn("Invalid Material JSON")}readBinary(F,U){let Q=F.loadStr();if("StandardMaterial"==Q&&(Q="StandardSurfaceShader"),"TransparentMaterial"==Q&&(Q="TransparentSurfaceShader"),this.setShaderName(Q),U.versions["zea-engine"].compare([0,0,3])<0){this.setName(F.loadStr());const Q=F.loadUInt32();for(let l=0;l<Q;l++){const Q=(B=F.loadStr()).charAt(0).toUpperCase()+B.slice(1);let l;"MaterialColorParam"==F.loadStr()?(l=F.loadRGBAFloat32Color(),l.applyGamma(2.2)):l=F.loadFloat32();const V=F.loadStr();let d=this.getParameter(Q);d?d.setValue(l):d=this.addParameter(XB(Q,l)),""!=V&&d.setImage&&(U.materialLibrary.hasImage(V)?d.setImage(U.materialLibrary.getImage(V)):console.warn("Missing Texture:"+V))}}else super.readBinary(F,U);var B;this.__checkTransparency(),this.__checkTextures()}clone(F){const U=new EB;return U.copyFrom(this,F),U}copyFrom(F,U){this.setShaderName(F.getShaderName()),super.copyFrom(F,U)}}PU.register("Material",EB);class LB extends rQ{constructor(F,U){super(F,void 0,"Material"),this.listenerIDs={},this.setValue(U)}__valueParameterValueChanged(F){this.emit("valueParameterValueChanged",F)}setValue(F){this.__value!=F&&this.__value!==F&&(this.__value&&this.__value.removeListenerById("parameterValueChanged",this.listenerIDs.parameterValueChanged),this.__value=F,this.__value&&(this.listenerIDs.parameterValueChanged=this.__value.on("parameterValueChanged",(F=>{this.__valueParameterValueChanged(F)}))),this.emit("valueChanged",{}))}loadValue(F){this.__value=F,this.__value&&(this.listenerIDs.parameterValueChanged=this.__value.on("parameterValueChanged",(F=>{this.__valueParameterValueChanged(F)})))}loadValue(F){this.__value&&this.__value.removeListenerById("parameterValueChanged",this.listenerIDs.parameterValueChanged),this.__value=F,this.__value&&(this.listenerIDs.parameterValueChanged=this.__value.on("parameterValueChanged",(F=>{this.__valueParameterValueChanged(F)})))}toJSON(F){let U;return this.__value&&(U={value:F&&F.onlyPath?this.__value.getPath():this.__value.toJSON(F)}),U}fromJSON(F,U){if(null!=F.value)if(F.value instanceof Array||F.value instanceof String){if(U&&U.assetItem){const Q=U.assetItem.getMaterialLibrary().getMaterial(F.value instanceof array?F.value[1]:F.value);Q&&this.loadValue(Q)}}else{const Q=new EB;Q.fromJSON(F.value,U),this.loadValue(Q)}else console.warn("Invalid Parameter JSON")}clone(){return new LB(this.__name,this.__value)}destroy(){this.__value&&this.__value.removeListenerById("parameterValueChanged",this.listenerIDs.parameterValueChanged)}}PU.register("MaterialParameter",LB);class xB{constructor(F,U,Q){if(this.__dataType=F,this.normalized=!1,null!=F.numElements)this.__dimension=this.__dataType.numElements();else switch(F){case 6:case 4:case 5:this.__dimension=1;break;default:throw new Error("Invalid data type for attribute:"+F)}var B;this.__defaultElementValue=null!=Q?Q:Number.MAX_VALUE,(B=U)&&void 0!==B.byteLength?this.__data=U:(this.__data=new Float32Array(U*this.__dimension),this.initRange(0))}resize(F){const U=this.__data.length,Q=F*this.__dimension;if(Q>U){const F=new Float32Array(Q);F.set(this.__data),this.__data=F,this.initRange(U)}else Q<U&&(this.__data=this.__data.slice(0,Q))}initRange(F){for(let U=F;U<this.__data.length;U++)this.__data[U]=this.__defaultElementValue}getCount(){return this.__data.length/this.__dimension}get length(){return this.__data.length/this.__dimension}get dataType(){return this.__dataType}get data(){return this.__data}set data(F){this.__data=F}get numElements(){return this.__dimension}getFloat32Value(F){return this.__data[F]}setFloat32Value(F,U){this.__data[F]=U}getValueRef(F){const U=this.__dimension;if(F>=this.__data.length/U)throw new Error("Invalid vertex index:"+F+". Num Vertices:"+this.__data.length/3);return this.__dataType.createFromBuffer(this.__data.buffer,F*U*4)}setValue(F,U){const Q=this.__dimension;if(F>=this.__data.length/Q)throw new Error("Invalid vertex index:"+F+". Num Vertices:"+this.__data.length/3);this.__dataType.createFromBuffer(this.__data.buffer,F*Q*4).setFromOther(U)}toJSON(F){return{data:Array.from(this.__data),dataType:PU.getBlueprintName(this.__dataType),defaultValue:this.__defaultElementValue,length:this.__data.length/this.__dimension}}fromJSON(F){const U=F.data.map((F=>DU.isNumeric(F)?F:Number.POSITIVE_INFINITY));this.__data=Float32Array.from(U)}toString(){return JSON.stringify(this.toJSON(),null,2)}}class oB extends xB{constructor(F,U,Q,B){super(U,Q,B),this.__geom=F,this.__splits={},this.__splitValues=[]}resize(F){super.resize(F),this.__splits={},this.__splitValues=[]}getFaceVertexValueRef(F,U){const Q=this.__geom.getFaceVertexIndex(F,U);return Q in this.__splits&&F in this.__splits[Q]?this.__splitValues[this.__splits[Q][F]]:this.getValueRef(Q)}setFaceVertexValue(F,U,Q){const B=this.__geom.getFaceVertexIndex(F,U);this.setFaceVertexValue_ByVertexIndex(F,B,Q)}setFaceVertexValue_ByVertexIndex(F,U,Q){const B=this.getValueRef(U);if(B.isValid())if(B.approxEqual(Q));else{if(U in this.__splits){const B=this.__splits[U];for(const U in B){const l=B[U];if(this.__splitValues[l].approxEqual(Q))return void(B[F]=l)}if(F in this.__splits[U]){return void this.__splitValues[this.__splits[U][F]].setFromOther(Q)}}else this.__splits[U]={};this.__splits[U][F]=this.__splitValues.length,this.__splitValues.push(Q)}else B.setFromOther(Q)}setSplitVertexValue(F,U,Q){if(F in this.__splits||(this.__splits[F]={}),U in this.__splits[F]){if(this.__splitValues[this.__splits[F][U]].approxEqual(Q))return;console.warn("Face Vertex Already Split with different value")}this.__splits[F][U]=this.__splitValues.length,this.__splitValues.push(Q)}setSplitVertexValues(F,U,Q){F in this.__splits||(this.__splits[F]={});const B=this.__splitValues.length;this.__splitValues.push(Q);for(const Q of U)this.__splits[F][Q]=B}getSplits(){return this.__splits}getSplitCount(){let F=0;for(const U in this.__splits)F+=Object.keys(this.__splits[U]).length;return F}generateSplitValues(F,U){if(0==U)return this.__data;const Q=this.length,B=this.length+U,l=this.__dataType.numElements?this.__dataType.numElements():1,V=new Float32Array(B*l);for(let F=0;F<this.__data.length;F++)V[F]=this.__data[F];for(const U in F){const B=F[U];for(const F in B){const d=Q+B[F];if(U in this.__splits&&F in this.__splits[U]){const Q=this.__splits[U][F];6==this.__dataType?V[d*l]=this.__splitValues[Q]:this.__dataType.createFromBuffer(V.buffer,d*l*4).setFromOther(this.__splitValues[Q])}else{const F=parseInt(U);for(let U=0;U<l;U++)F*l+U>this.__data.length&&console.log("Error remapping src:"+F*l+U),d*l+U>V.length&&console.log("Error remapping tgt:"+d*l+U),V[d*l+U]=this.__data[F*l+U]}}}return V}toJSON(F){const U=super.toJSON(F);return U.splits=this.__splits,U.splitValues=this.__splitValues,U}fromJSON(F,U){if(super.fromJSON(F,U),this.__splits=F.splits||{},this.__splitValues=[],F.splitValues)for(const U of F.splitValues){const F=new this.__dataType;F.fromJSON(U),this.__splitValues.push(F)}}loadSplitValues(F){const U=F.loadUInt32Array();if(0==U.length)return;let Q=0,B=0;for(;;){const F=U[Q++],l=U[Q++],V={};for(let F=0;F<l;F++){const F=U[Q++],l=U[Q++];V[F]=l,l>=B&&(B=l+1)}if(this.__splits[F]=V,Q>=U.length)break}const l=this.__numFloat32Elements,V=F.loadFloat32Array(B*l);this.__splitValues=[];for(let F=0;F<B;F++){const U=this.__dataType.createFromFloat32Array(V.slice(F*l,F*l+l));this.__splitValues.push(U)}}}class yB extends WQ{constructor(){super(),this.__numVertices=0,this.__boundingBox=new iQ,this.__boundingBoxDirty=!0,this.__vertexAttributes=new Map,this.__metaData=new Map,this.addVertexAttribute("positions",qU,0)}clear(){this.setNumVertices(0)}setDebugName(F){this.__name=F}addVertexAttribute(F,U,Q){const B=this.getVertexAttribute("positions");let l;var V;return l=(V=Q)&&void 0!==V.byteLength?new xB(U,Q):new xB(U,null!=B?B.length:0,Q),this.__vertexAttributes.set(F,l),l}hasVertexAttribute(F){return this.__vertexAttributes.has(F)}getVertexAttribute(F){return this.__vertexAttributes.get(F)}getVertexAttributes(){const F={};for(const[U,Q]of this.__vertexAttributes.entries())F[U]=Q;return F}get vertices(){return console.warn("deprecated use #getVertexAttribute('positions')"),this.__vertexAttributes.get("positions")}numVertices(){return this.__numVertices}getNumVertices(){return this.__numVertices}setNumVertices(F){this.__numVertices=F,this.__vertexAttributes.forEach((F=>F.resize(this.__numVertices))),this.setBoundingBoxDirty()}getVertex(F){return console.warn("deprecated use #getVertexAttribute('positions').getValueRef()"),qU.createFromBuffer(this.vertices.data.buffer,3*F*4)}setVertex(F,U){return console.warn("deprecated use #getVertexAttribute('positions').getValueRef().setFromOther(value)"),qU.createFromBuffer(this.vertices.data.buffer,3*F*4).setFromOther(U)}moveVertices(F){console.warn("deprecated use #getVertexAttribute('positions').getValueRef()");const U=this.vertices;for(let Q=0;Q<U.length;Q++)U.getValueRef(Q).addInPlace(F);this.setBoundingBoxDirty()}transformVertices(F){console.warn("deprecated, please transform the vertices manually");const U=this.__vertexAttributes.get("positions");for(let Q=0;Q<U.length;Q++){const B=U.getValueRef(Q),l=F.transformVec3(B);B.set(l.x,l.y,l.z)}this.setBoundingBoxDirty()}get boundingBox(){return console.warn("deprecated, please use #getBoundingBox()"),this.__boundingBoxDirty&&this.updateBoundingBox(),this.__boundingBox}getBoundingBox(){return this.__boundingBoxDirty&&this.updateBoundingBox(),this.__boundingBox}setBoundingBoxDirty(){this.__boundingBoxDirty||(this.__boundingBoxDirty=!0,this.emit("boundingBoxChanged",{}))}updateBoundingBox(){const F=this.getVertexAttribute("positions"),U=new iQ,Q=F.length;for(let B=0;B<Q;B++)U.addPoint(F.getValueRef(B));this.__boundingBox=U,this.__boundingBoxDirty=!1}getMetadata(F){return this.__metaData.get(F)}hasMetadata(F){return this.__metaData.has(F)}setMetadata(F,U){this.__metaData.set(F,U)}deleteMetadata(F){this.__metaData.delete(F)}genBuffers(F){const U={};for(const[F,Q]of this.__vertexAttributes)U[F]={values:Q.data,count:Q.length,dataType:Q.dataType,normalized:Q.normalized};return{numVertices:this.numVertices(),attrBuffers:U}}loadBaseGeomBinary(F){this.name=F.loadStr();const U=F.loadUInt8();this.debugColor=F.loadRGBFloat32Color();const Q=F.loadUInt32();this.__boundingBox.set(F.loadFloat32Vec3(),F.loadFloat32Vec3()),this.setNumVertices(Q);const B=this.getVertexAttribute("positions");let l,V;2&U&&(l=this.getVertexAttribute("normals"),l||(l=this.addVertexAttribute("normals",qU,0))),4&U&&(V=this.getVertexAttribute("texCoords"),V||(V=this.addVertexAttribute("texCoords",OU,0)));const d=(F,U,Q,l)=>{for(let V=F[0];V<F[1];V++){const F=new qU(l[3*V+0]/255,l[3*V+1]/255,l[3*V+2]/255);F.multiplyInPlace(Q),F.addInPlace(U),B.setValue(V,F)}},R=(F,U,Q,B)=>{Q.isNull()&&Q.set(1,1,1);for(let V=F[0];V<F[1];V++){const F=new qU(B[3*V+0]/255,B[3*V+1]/255,B[3*V+2]/255);F.multiplyInPlace(Q),F.addInPlace(U),F.normalizeInPlace(),l.setValue(V,F)}},t=(F,U,Q,B)=>{for(let l=F[0];l<F[1];l++){const F=new OU(B[2*l+0]/255,B[2*l+1]/255);F.multiplyInPlace(Q),F.addInPlace(U),V.setValue(l,F)}},s=F.loadUInt32();if(1==s){{const U=this.__boundingBox,B=F.loadUInt8Array(3*Q);d([0,Q],U.p0,U.diagonal(),B)}if(l){const U=new iQ(F.loadFloat32Vec3(),F.loadFloat32Vec3()),B=F.loadUInt8Array(3*Q);R([0,Q],U.p0,U.diagonal(),B),l.loadSplitValues(F)}if(V){const U=new tQ(F.loadFloat32Vec2(),F.loadFloat32Vec2()),B=F.loadUInt8Array(2*Q);t([0,Q],U.p0,U.diagonal(),B),V.loadSplitValues(F)}}else{const U=[];let B=0;for(let Q=0;Q<s;Q++){const Q=F.loadUInt32(),d={range:[B,B+Q],bbox:new iQ(F.loadFloat32Vec3(),F.loadFloat32Vec3())};l&&(d.normalsRange=new iQ(F.loadFloat32Vec3(),F.loadFloat32Vec3())),V&&(d.texCoordsRange=new tQ(F.loadFloat32Vec2(),F.loadFloat32Vec2())),U.push(d),B+=Q}const i=F.loadUInt8Array(3*Q);let e,I;l&&(e=F.loadUInt8Array(3*Q)),V&&(I=F.loadUInt8Array(2*Q));for(let F=0;F<s;F++){{const Q=U[F].bbox;d(U[F].range,Q.p0,Q.diagonal(),i)}if(l){const Q=U[F].normalsRange;R(U[F].range,Q.p0,Q.diagonal(),e)}if(V){const Q=U[F].texCoordsRange;t(U[F].range,Q.p0,Q.diagonal(),I)}}l&&l.loadSplitValues(F),V&&V.loadSplitValues(F)}}toJSON(F){let U=super.toJSON(F);U||(U={}),U.type=PU.getBlueprintName(this),F&&F.skipTopology||(U.numVertices=this.__numVertices||0);const Q={};for(const[U,B]of this.__vertexAttributes.entries())F&&"skipAttributes"in F&&F.skipAttributes.includes(U)||(Q[U]=B.toJSON(F));return U.vertexAttributes=Q,U}fromJSON(F,U){if(this.clear(),super.fromJSON(F,U),F.numVertices&&this.setNumVertices(F.numVertices),F.vertexAttributes)for(const U in F.vertexAttributes){let Q=this.__vertexAttributes.get(U);const B=F.vertexAttributes[U];if(!Q){const F=PU.getBlueprint(B.dataType);Q=new oB(this,F,0,B.defaultScalarValue),this.__vertexAttributes.set(U,Q)}Q.fromJSON(B)}this.emit("geomDataTopologyChanged")}toString(){return JSON.stringify(this.toJSON(),null,2)}}class uB extends yB{constructor(){super()}clear(){this.setNumVertices(0),this.emit("geomDataTopologyChanged")}loadBin(F){this.name=F.loadStr();const U=F.loadUInt32();this.__boundingBox.set(F.loadFloat32Vec3(),F.loadFloat32Vec3()),this.setNumVertices(U);const Q=this.getVertexAttribute("positions");if(U<256){const B=this.__boundingBox.toMat4(),l=F.loadUInt8Array(3*U);for(let F=0;F<U;F++){const U=new Vec3(l[3*F+0]/255,l[3*F+1]/255,l[3*F+2]/255);Q.setValue(F,B.transformVec3(U))}}else{const B=F.loadUInt32(),l=[];for(let U=0;U<B;U++){const U=F.loadUInt32Vec2(),Q=F.loadFloat32Vec3(),B=F.loadFloat32Vec3();l.push({range:U,bbox:new Box3(Q,B)})}const V=F.loadUInt8Array(3*U);for(let F=0;F<B;F++){const U=l[F].bbox.toMat4();for(let B=l[F].range.x;B<l[F].range.y;B++){const F=new Vec3(V[3*B+0]/255,V[3*B+1]/255,V[3*B+2]/255);Q.setValue(B,U.transformVec3(F))}}}}readBinary(F,U){super.loadBaseGeomBinary(F),this.emit("geomDataChanged",{})}}PU.register("Points",uB);class NB extends yB{constructor(){super(),this.__indices=new Uint32Array}clear(){super.clear(),this.setNumSegments(0),this.emit("geomDataTopologyChanged")}getIndices(){return this.__indices}getNumSegments(){return this.__indices.length/2}setNumSegments(F){if(F>this.getNumSegments()){const U=new Uint32Array(2*F);U.set(this.__indices),this.__indices=U}else this.__indices=this.__indices.slice(0,2*F)}setSegmentVertexIndices(F,U,Q){if(F>=this.__indices.length/2)throw new Error("Invalid line index: "+F+". Num Segments: "+this.__indices.length/2);this.__indices[2*F+0]=U,this.__indices[2*F+1]=Q}setSegment(F,U,Q){console.warn("deprecated use #setSegmentVertexIndices"),this.setSegmentVertexIndices(F,U,Q)}getSegmentVertexIndex(F,U){if(F<this.getNumSegments())return this.__indices[2*F+U]}genBuffers(){const F=super.genBuffers();let U;return U=F.numVertices<Math.pow(2,8)?new Uint8Array(this.__indices):F.numVertices<Math.pow(2,16)?new Uint16Array(this.__indices):this.__indices,F.indices=U,F}readBinary(F,U){super.loadBaseGeomBinary(F),this.setNumSegments(F.loadUInt32());const Q=F.loadUInt8();1==Q?this.__indices=F.loadUInt8Array():2==Q?this.__indices=F.loadUInt16Array():4==Q&&(this.__indices=F.loadUInt32Array()),this.emit("geomDataChanged",{})}toJSON(F){const U=super.toJSON(F);return F&&F.skipTopology||(U.indices=Array.from(this.__indices)),U}fromJSON(F,U){super.fromJSON(F,U),F.indices&&(this.__indices=Uint32Array.from(F.indices))}}PU.register("Lines",NB);class rB extends yB{constructor(){super(),this.__faceCounts=[],this.__faceVertexIndices=new Uint32Array,this.__faceAttributes=new Map,this.__edgeAttributes=new Map,this.__logTopologyWarnings=!1,this.edgeVerts=void 0,this.vertexEdges=void 0,this.numEdges=0,this.edgeAngles=new Float32Array,this.edgeVecs=[]}init(){}clear(){super.clear(),this.edgeVerts=void 0,this.vertexEdges=void 0,this.numEdges=0,this.edgeAngles=new Float32Array,this.emit("geomDataTopologyChanged")}getFaceCounts(){return this.__faceCounts}getNumFaces(){return 0==this.__faceCounts.length?0:this.__faceCounts.reduce(((F,U)=>F+U))}setFaceCounts(F){let U=0,Q=0,B=3;for(const l of F)U+=l,Q+=l*B,B++;if(0==this.getNumFaces())this.__faceVertexIndices=new Uint32Array(Q);else{const U=new Uint32Array(Q);let l=0,V=0;Q=0,B=3,F.forEach(((F,Q)=>{const d=l+Math.min(F,this.__faceCounts[Q])*B;U.set(this.__faceVertexIndices.slice(l,d),V),l+=this.__faceCounts[Q]*B,V+=F*B,B++})),this.__faceVertexIndices=U}this.__faceCounts=F,this.__faceAttributes.forEach((F=>{F.resize(U)}))}getFaceVertexCount(F){let U=0,Q=0;return this.__faceCounts.some(((B,l)=>{if(U+=B,U>F)return Q=l+3,!0})),Q}getFaceVertexOffset(F){let U=0,Q=0;return this.__faceCounts.some(((B,l)=>{if(U+B>F)return Q+=(F-U)*(l+3),!0;U+=B,Q+=B*(l+3)})),Q}setFaceVertexIndices(F,U){2!=arguments.length&&(console.warn("deprecated interface. Please pass vertexIndices as an array"),U=Array.prototype.slice.call(arguments,1));const Q=this.getFaceVertexCount(F);if(U.length!=Q)throw new Error(`Invalid indices for face:${F} vertexIndices:${U}. Expected ${Q} indices`);const B=this.getFaceVertexOffset(F);this.__faceVertexIndices.set(U,B)}addFace(F){const U=[...this.__faceCounts];if(U.length<=F.length-3){for(let Q=U.length;Q<F.length-3;Q++)U[Q]=0;U[F.length-3]=1}else U[F.length-3]++;this.setFaceCounts(U);let Q=0,B=0;return this.__faceCounts.some(((U,l)=>{if(l+3==F.length)return Q+=U-1,B+=(U-1)*(l+3),!0;Q+=U,B+=U*(l+3)})),this.__faceVertexIndices.set(F,B),Q}getFaceVertexIndices(F){const U=[],Q=this.getFaceVertexOffset(F),B=this.getFaceVertexCount(F);for(let F=0;F<B;F++)U.push(this.__faceVertexIndices[Q+F]);return U}getFaceVertexIndex(F,U){const Q=this.getFaceVertexOffset(F);return this.__faceVertexIndices[Q+U]}addVertexAttribute(F,U,Q){const B=this.getVertexAttribute("positions"),l=new oB(this,U,null!=B?B.length:0,Q);return this.__vertexAttributes.set(F,l),l}addFaceAttribute(F,U,Q){const B=new xB(U,null!=Q?Q:this.getNumFaces());return this.__faceAttributes.set(F,B),B}hasFaceAttribute(F){return this.__faceAttributes.has(F)}getFaceAttribute(F){return this.__faceAttributes.get(F)}addEdgeAttribute(F,U,Q){const B=new xB(U,null!=Q?Q:this.getNumEdges());return this.__edgeAttributes.set(F,B),B}hasEdgeAttribute(F){return this.__edgeAttributes.has(F)}getEdgeAttribute(F){return this.__edgeAttributes.get(F)}genTopologyInfo(){const F={};this.vertexEdges=[],this.edgeFaces=[],this.edgeVerts=[],this.faceEdges=[],this.numEdges=0;const U=this.getVertexAttribute("positions"),Q=(Q,B)=>{let l=Q,V=B;if(V<l){const F=l;l=V,V=F}const d=l+">"+V;if(d in F)return F[d];const R=U.getValueRef(l),t=U.getValueRef(V).subtract(R),s={edgeIndex:this.edgeFaces.length/2,edgeVec:t};return F[d]=s,this.edgeFaces.push(-1),this.edgeFaces.push(-1),this.edgeVerts.push(l),this.edgeVerts.push(V),this.numEdges++,s},B=(F,U,B)=>{const l=Q(F,U).edgeIndex;if(U<F){const F=2*l+0;this.__logTopologyWarnings&&-1!=this.edgeFaces[F]&&console.warn("Edge poly 0 already set. Mesh is non-manifold."),this.edgeFaces[F]=B}else{const F=2*l+1;this.__logTopologyWarnings&&-1!=this.edgeFaces[F]&&console.warn("Edge poly 1 already set. Mesh is non-manifold."),this.edgeFaces[F]=B}B in this.faceEdges||(this.faceEdges[B]=[]),this.faceEdges[B].push(l),null==this.vertexEdges[F]&&(this.vertexEdges[F]=new Set),null==this.vertexEdges[U]&&(this.vertexEdges[U]=new Set),this.vertexEdges[F].add(l),this.vertexEdges[U].add(l)},l=this.getNumFaces();for(let F=0;F<l;F++){const U=this.getFaceVertexIndices(F);for(let Q=0;Q<U.length;Q++){B(U[Q],U[(Q+1)%U.length],F)}}}computeFaceNormals(){const F=this.getVertexAttribute("positions"),U=this.addFaceAttribute("normals",qU),Q=this.getNumFaces();for(let B=0;B<Q;B++){const Q=this.getFaceVertexIndices(B),l=F.getValueRef(Q[0]);let V=F.getValueRef(Q[1]);const d=new qU;for(let U=2;U<Q.length;U++){const B=F.getValueRef(Q[U]),R=V.subtract(l),t=B.subtract(l);d.addInPlace(t.cross(R).normalize()),V=B}d.lengthSquared()<Number.EPSILON||U.setValue(B,d.normalize())}}calculateEdgeAngles(){null==this.vertexEdges&&this.genTopologyInfo(),this.computeFaceNormals();const F=this.getVertexAttribute("positions"),U=this.getFaceAttribute("normals");this.edgeVecs=[],this.edgeAngles=new Float32Array(this.numEdges);for(let Q=0;Q<this.edgeFaces.length;Q+=2){const B=this.edgeVerts[Q],l=this.edgeVerts[Q+1],V=F.getValueRef(l).subtract(F.getValueRef(B));V.normalizeInPlace(),this.edgeVecs.push(V);const d=this.edgeFaces[Q],R=this.edgeFaces[Q+1];if(-1==d||-1==R){this.edgeAngles[Q/2]=2*Math.PI;continue}const t=U.getValueRef(d),s=U.getValueRef(R);this.edgeAngles[Q/2]=t.angleTo(s)}}computeVertexNormals(F=1){this.calculateEdgeAngles();const U=this.getFaceAttribute("normals"),Q=this.addVertexAttribute("normals",qU),B=U.data.buffer,l=F=>qU.createFromBuffer(B,3*F*4),V=Q.data,d=(F,U)=>{V[3*F+0]=U.x,V[3*F+1]=U.y,V[3*F+2]=U.z},R=(F,U)=>{let Q,B;const l=this.faceEdges[F];for(const F of l)(this.edgeVerts[2*F]==U||this.edgeVerts[2*F+1]==U)&&(Q?B=this.edgeVecs[F]:Q=this.edgeVecs[F]);return[Q,B]};for(let U=0;U<this.vertexEdges.length;U++){if(null==this.vertexEdges[U])continue;const B=this.vertexEdges[U],V=[],t=F=>{let U=!1;for(const Q of V)if(U=Q.includes(F),U)break;U||V.push([F])};for(const U of B){const Q=this.edgeFaces[2*U],B=this.edgeFaces[2*U+1];if(-1!=Q&&-1!=B&&this.edgeAngles[U]<F){let F=-1,U=-1;for(let l=0;l<V.length;l++)-1==F&&V[l].includes(Q)&&(F=l),-1==U&&V[l].includes(B)&&(U=l);-1==F&&-1==U?V.push([Q,B]):-1!=F&&-1!=U?F!=U&&(V[F]=V[F].concat(V[U]),V.splice(U,1)):(-1==F&&V[U].push(Q),-1==U&&V[F].push(B))}else-1!=Q&&t(Q),-1!=B&&t(B)}V.sort(((F,U)=>F.length<U.length?1:F.length>U.length?-1:0));let s=!0;for(const F of V){const B=new qU;for(const Q of F){const F=R(Q,U),V=F[0].angleTo(F[1]);B.addInPlace(l(Q).scale(V))}B.normalizeInPlace(),s?(d(U,B),s=!1):Q.setSplitVertexValues(U,F,B)}}return Q}computeHardEdgesIndices(F=1){this.edgeVerts||this.calculateEdgeAngles();const U=[],Q=F=>{U.push(this.edgeVerts[F]),U.push(this.edgeVerts[F+1])};for(let U=0;U<this.edgeAngles.length;U++)this.edgeAngles[U]>F&&Q(2*U);return Uint32Array.from(U)}getWireframeIndices(){return console.warn("@todo-review - This returns nothing"),indices}genBuffers(F){const U={};let Q=0;for(const[,F]of this.__vertexAttributes){const B=F.getSplits();for(const F in B){F in U||(U[F]={});const l=B[F];for(const B in l){const l=parseInt(B);l in U[F]||(U[F][l]=Q,Q++)}}}const B=this.getVertexAttribute("positions").length,l=B+Q;let V;F&&0==F.includeIndices||(V=this.generateTriangulatedIndices(l,B,U));const d={};for(const[F,B]of this.__vertexAttributes){let l;l=0==Q?B.data:B.generateSplitValues(U,Q);const V=B.numElements,R=l.length/V;d[F]={values:l,count:R,dimension:V,normalized:"normals"==F,dataType:B.dataType}}const R={numVertices:this.numVertices(),numRenderVerts:l,indices:V,attrBuffers:d};if(F&&F.includeVertexNeighbors){null==this.vertexEdges&&this.genTopologyInfo();let F=0;for(let U=0;U<this.vertexEdges.length;U++)this.vertexEdges[U]&&(F+=this.vertexEdges[U].size);const U=new Uint32Array(2*this.vertexEdges.length+F),Q=F=>{for(let U=0;U<F.length;U++){const Q=F[U];for(let B=0;B<U;B++){const l=F[B];if(-1!=Q[0]&&Q[0]==l[1]){U!=B+1&&(F.splice(U,1),F.splice(B+1,0,Q));break}if(-1!=Q[1]&&Q[1]==l[0]){F.splice(U,1),F.splice(B,0,Q);break}}}},B=F=>{if(!(-1!=F[0][0]&&-1!=F[F.length-1][1]||-1==F[0][0]&&-1==F[F.length-1][1]))throw new Error("If fan starts with -1, it must also end with -1");for(let U=0;U<F.length;U++){const Q=F[U];if((-1==Q[0]||-1==Q[1])&&0!=U&&U!=F.length-1)throw new Error("-1 only allowed at the beginning and end of a fan.");if(-1!=Q[0]){let B=U-1;if(B<0&&(B+=F.length),Q[0]!=F[B][1])throw new Error("Faces are not sequential")}if(-1!=Q[1]){const B=(U+1)%F.length;if(Q[1]!=F[B][0])throw new Error("Faces are not sequential")}}};let l=2*this.vertexEdges.length;for(let F=0;F<this.vertexEdges.length;F++){if(null==this.vertexEdges[F])continue;const V=this.vertexEdges[F],d=[];for(const U of V){const Q=this.edgeVerts[2*U],B=this.edgeVerts[2*U+1];let l,V=this.edgeFaces[2*U],R=this.edgeFaces[2*U+1];if(Q==F)l=B;else{if(B!=F)throw new Error("Invalid topology");{l=Q;const F=V;V=R,R=F}}d.push([V,R,l])}Q(d),B(d);let R=0;(-1!=d[0][0]||-1!=d[d.length-1][1])&&(R+=1),U[2*F]=l,U[2*F+1]=V.size+(R<<8);for(const F of d)U[l]=F[2],l++}R.vertexNeighbors=U}return R}computeNumTriangles(){let F=3,U=0;for(const Q of this.__faceCounts)U+=Q*(F-2),F++;return U}generateTriangulatedIndices(F,U,Q){const B=this.computeNumTriangles();let l;l=F<Math.pow(2,8)?new Uint8Array(3*B):F<Math.pow(2,16)?new Uint16Array(3*B):new Uint32Array(3*B);let V=0;const d=function(F,B){F in Q&&B in Q[F]&&(F=U+Q[F][B]),l[V]=F,V++},R=this.getNumFaces();for(let F=0;F<R;F++){const U=this.getFaceVertexIndices(F);for(let Q=0;Q<U.length;Q++)Q>=3&&(d(U[0],F),d(U[Q-1],F)),d(U[Q],F)}return l}readBinary(F,U){super.loadBaseGeomBinary(F),this.setFaceCounts(F.loadUInt32Array());const Q=this.getNumFaces(),B=F.loadUInt8Array(Q),l=F.loadSInt32Vec2(),V=F.loadUInt8();let d;1==V?d=F.loadUInt8Array():2==V?d=F.loadUInt16Array():4==V&&(d=F.loadUInt32Array());let R=3,t=0;const s=this.__faceCounts.map(((F,U)=>{const Q=t;return t+=F*R,R++,Q}));let i=0,e=0;const I=[];for(let F=0;F<Q;F++){const U=B[F],Q=s[U],V=U+3;I[F]=Q;for(let U=0;U<V;U++){const B=Q+U,V=d[i+U]+l.x;if(0==F)this.__faceVertexIndices[B]=V;else{let Q=I[F-1];Q+=U<e?U:e-1,this.__faceVertexIndices[B]=this.__faceVertexIndices[Q]+V}}i+=V,s[U]+=V,e=V}this.hasVertexAttribute("normals")||this.computeVertexNormals(),this.emit("geomDataChanged",{})}toJSON(F){const U=super.toJSON(F);return F&&F.skipTopology||(U.faceCounts=Array.from(this.__faceCounts),U.faceVertexIndices=Array.from(this.__faceVertexIndices)),U}fromJSON(F,U){super.fromJSON(F,U),F.faceCounts&&(this.__faceCounts=F.faceCounts),F.faceVertexIndices&&(this.__faceVertexIndices=Uint32Array.from(F.faceVertexIndices))}}PU.register("Mesh",rB);class pB extends nQ{constructor(F){if(super(),this.name=F.name,this.__buffers=F.geomBuffers,this.__buffers.attrBuffers)for(const F in this.__buffers.attrBuffers){const U=this.__buffers.attrBuffers[F],Q=PU.getBlueprint(U.dataType);U.dataType=Q}this.boundingBox=new iQ,this.boundingBox.p0.__data=F.bbox.p0.__data,this.boundingBox.p1.__data=F.bbox.p1.__data,this.__metaData=new Map}getNumVertices(){return this.__buffers.numVertices}getBoundingBox(){return this.boundingBox}genBuffers(){return this.__buffers}getMetadata(F){return this.__metaData.get(F)}hasMetadata(F){return this.__metaData.has(F)}setMetadata(F,U){this.__metaData.set(F,U)}deleteMetadata(F){this.__metaData.delete(F)}}class TB extends pB{constructor(F){super(F)}}class YB extends pB{constructor(F){super(F)}getNumLineSegments(){return this.__buffers.indices.length/2}}class kB extends pB{constructor(F){super(F)}getNumTriangles(){return this.__buffers.indices.length/3}}class HB extends uB{constructor(){super(),this.dirtyTopology=!0,this.dirtyVertices=!0,this.topologyParams=[]}clear(){this.dirtyTopology=!0,this.dirtyVertices=!0,super.clear()}rebuild(){}resize(){}__parameterValueChanged(F){this.setBoundingBoxDirty(),this.topologyParams.includes(F.param.getName())?(this.dirtyTopology=!0,this.emit("geomDataTopologyChanged")):(this.dirtyVertices=!0,this.setBoundingBoxDirty(),this.emit("geomDataChanged")),super.__parameterValueChanged(F)}update(){this.dirtyTopology?(this.dirtyTopology=!1,this.dirtyVertices=!1,this.rebuild()):this.dirtyVertices&&(this.dirtyVertices=!1,this.resize())}getBoundingBox(){return this.update(),super.getBoundingBox()}getNumVertices(){return this.update(),super.getNumVertices()}genBuffers(F){return this.update(),super.genBuffers(F)}toJSON(F){F||(F={}),F.skipTopology=!0,F.skipAttributes=["positions","normals","texCoords"];const U=super.toJSON(F);return F.skipTopology=!1,F.skipAttributes=[],U}}class MB extends NB{constructor(){super(),this.dirtyTopology=!0,this.dirtyVertices=!0,this.topologyParams=[]}clear(){this.dirtyTopology=!0,this.dirtyVertices=!0,super.clear()}rebuild(){}resize(){}__parameterValueChanged(F){this.setBoundingBoxDirty(),this.topologyParams.includes(F.param.getName())?(this.dirtyTopology=!0,this.emit("geomDataTopologyChanged")):(this.dirtyVertices=!0,this.setBoundingBoxDirty(),this.emit("geomDataChanged")),super.__parameterValueChanged(F)}update(){this.dirtyTopology?(this.dirtyTopology=!1,this.dirtyVertices=!1,this.rebuild()):this.dirtyVertices&&(this.dirtyVertices=!1,this.resize())}getBoundingBox(){return this.update(),super.getBoundingBox()}getNumVertices(){return this.update(),super.getNumVertices()}genBuffers(F){return this.update(),super.genBuffers(F)}toJSON(F){F||(F={}),F.skipTopology=!0,F.skipAttributes=["positions","normals","texCoords"];const U=super.toJSON(F);return F.skipTopology=!1,F.skipAttributes=[],U}fromJSON(F,U){super.fromJSON(F,U)}}class AB extends rB{constructor(){super(),this.dirtyTopology=!0,this.dirtyVertices=!0,this.topologyParams=[]}clear(){this.dirtyTopology=!0,this.dirtyVertices=!0,super.clear()}rebuild(){}resize(){}__parameterValueChanged(F){this.setBoundingBoxDirty(),this.topologyParams.includes(F.param.getName())?(this.dirtyTopology=!0,this.emit("geomDataTopologyChanged")):(this.dirtyVertices=!0,this.setBoundingBoxDirty(),this.emit("geomDataChanged")),super.__parameterValueChanged(F)}update(){this.dirtyTopology?(this.vertexEdges=void 0,this.dirtyTopology=!1,this.dirtyVertices=!1,this.rebuild()):this.dirtyVertices&&(this.dirtyVertices=!1,this.resize())}getBoundingBox(){return this.update(),super.getBoundingBox()}getNumVertices(){return this.update(),super.getNumVertices()}computeVertexNormals(F=1){return this.update(),super.computeVertexNormals(F)}computeHardEdgesIndices(F=1){return this.update(),super.computeHardEdgesIndices(F)}genBuffers(F){return this.update(),super.genBuffers(F)}toJSON(F){F||(F={}),F.skipTopology=!0,F.skipAttributes=["positions","normals","texCoords"];const U=super.toJSON(F);return F.skipTopology=!1,F.skipAttributes=[],U}}class vB extends HB{constructor(F=1,U=1,Q=1,B=1,l=!1){if(super(),isNaN(F)||isNaN(U)||isNaN(Q)||isNaN(B))throw new Error("Invalid geom args");this.__x=this.addParameter(new pQ("X",F)),this.__y=this.addParameter(new pQ("Y",U)),this.__xDivisions=this.addParameter(new pQ("XDivisions",Q)),this.__yDivisions=this.addParameter(new pQ("YDivisions",B)),l&&this.addVertexAttribute("texCoords",OU),this.topologyParams.push("XDivisions"),this.topologyParams.push("YDivisions")}rebuild(){const F=this.__xDivisions.getValue(),U=this.__yDivisions.getValue();this.setNumVertices(F*U);const Q=this.getVertexAttribute("texCoords");if(Q)for(let B=0;B<U;B++){const l=B/(U-1);for(let U=0;U<F;U++){const V=U/(F-1);Q.getValueRef(B*F+U).set(V,l)}}this.resize()}resize(){const F=this.__x.getValue(),U=this.__y.getValue(),Q=this.__xDivisions.getValue(),B=this.__yDivisions.getValue(),l=this.getVertexAttribute("positions");for(let V=0;V<B;V++){const d=(V/(B-1)-.5)*U;for(let U=0;U<Q;U++){const B=(U/(Q-1)-.5)*F;l.getValueRef(V*Q+U).set(B,d,0)}}}}PU.register("PointGrid",vB);class zB extends MB{constructor(F=1,U=1){if(super(),isNaN(F)||isNaN(U))throw new Error("Invalid geom args");this.__x=this.addParameter(new pQ("X",F)),this.__y=this.addParameter(new pQ("Y",U))}rebuild(){this.setNumVertices(4),this.setNumSegments(4),this.setSegmentVertexIndices(0,0,1),this.setSegmentVertexIndices(1,1,2),this.setSegmentVertexIndices(2,2,3),this.setSegmentVertexIndices(3,3,0),this.resize()}resize(){const F=this.__x.getValue(),U=this.__y.getValue(),Q=this.getVertexAttribute("positions");Q.getValueRef(0).set(-.5*F,-.5*U,0),Q.getValueRef(1).set(.5*F,-.5*U,0),Q.getValueRef(2).set(.5*F,.5*U,0),Q.getValueRef(3).set(-.5*F,.5*U,0)}}PU.register("Rect",zB);class DB extends MB{constructor(F=1,U=32,Q=2*Math.PI){if(super(),isNaN(F)||isNaN(U))throw new Error("Invalid geom args");this.__radius=this.addParameter(new pQ("Radius",F)),this.__angle=this.addParameter(new pQ("Angle",Q)),this.__sides=this.addParameter(new pQ("Sides",U>=3?U:3,[3,200],1)),this.topologyParams.push("Sides")}rebuild(){const F=this.__sides.getValue();this.setNumVertices(F);const U=this.__angle.getValue()<2*Math.PI;U?this.setNumSegments(F-1):this.setNumSegments(F);for(let Q=0;Q<(U?F-1:F);Q++)this.setSegmentVertexIndices(Q,Q,(Q+1)%F);this.resize()}resize(){const F=this.__radius.getValue(),U=this.__sides.getValue(),Q=this.__angle.getValue()/U,B=this.getVertexAttribute("positions");for(let l=0;l<U;l++)B.getValueRef(l).set(Math.cos(Q*l)*F,Math.sin(Q*l)*F,0)}}PU.register("Circle",DB);class KB extends MB{constructor(F=1){if(super(),isNaN(F))throw new Error("Invalid geom args");this.__sizeParam=this.addParameter(new pQ("Size",F))}rebuild(){this.setNumVertices(6),this.setNumSegments(3),this.setSegmentVertexIndices(0,0,1),this.setSegmentVertexIndices(1,2,3),this.setSegmentVertexIndices(2,4,5),this.resize()}resize(){const F=this.__sizeParam.getValue(),U=this.getVertexAttribute("positions");U.getValueRef(0).set(-.5*F,0,0),U.getValueRef(1).set(.5*F,0,0),U.getValueRef(2).set(0,.5*F,0),U.getValueRef(3).set(0,-.5*F,0),U.getValueRef(4).set(0,0,.5*F),U.getValueRef(5).set(0,0,-.5*F)}}PU.register("Cross",KB);class wB extends MB{constructor(F=1,U=1,Q=1,B=!1){super(),this.__x=this.addParameter(new pQ("X",F)),this.__y=this.addParameter(new pQ("Y",U)),this.__z=this.addParameter(new pQ("Z",Q)),this.__baseZAtZero=this.addParameter(new pQ("BaseZAtZero",B))}rebuild(){this.setNumVertices(8),this.setNumSegments(12),this.setSegmentVertexIndices(0,0,1),this.setSegmentVertexIndices(1,1,2),this.setSegmentVertexIndices(2,2,3),this.setSegmentVertexIndices(3,3,0),this.setSegmentVertexIndices(4,4,5),this.setSegmentVertexIndices(5,5,6),this.setSegmentVertexIndices(6,6,7),this.setSegmentVertexIndices(7,7,4),this.setSegmentVertexIndices(8,0,4),this.setSegmentVertexIndices(9,1,5),this.setSegmentVertexIndices(10,2,6),this.setSegmentVertexIndices(11,3,7),this.resize()}resize(){const F=this.__x.getValue(),U=this.__y.getValue(),Q=this.__z.getValue(),B=this.__baseZAtZero.getValue(),l=this.getVertexAttribute("positions");let V=.5;B&&(V=1),l.getValueRef(0).set(.5*F,-.5*U,V*Q),l.getValueRef(1).set(.5*F,.5*U,V*Q),l.getValueRef(2).set(-.5*F,.5*U,V*Q),l.getValueRef(3).set(-.5*F,-.5*U,V*Q),V=-.5,B&&(V=0),l.getValueRef(4).set(.5*F,-.5*U,V*Q),l.getValueRef(5).set(.5*F,.5*U,V*Q),l.getValueRef(6).set(-.5*F,.5*U,V*Q),l.getValueRef(7).set(-.5*F,-.5*U,V*Q)}}PU.register("LinesCuboid",wB);class fB extends MB{constructor(F=1,U=1,Q=10,B=10,l=!1){if(super(),isNaN(F)||isNaN(U)||isNaN(Q)||isNaN(B))throw new Error("Invalid geom args");this.__xParam=this.addParameter(new pQ("X",F)),this.__yParam=this.addParameter(new pQ("Y",U)),this.__xDivisionsParam=this.addParameter(new pQ("XDivisions",Q)),this.__yDivisionsParam=this.addParameter(new pQ("YDivisions",B)),this.__skipCenterLinesParam=this.addParameter(new YQ("SkipCenterLines",l)),this.topologyParams.push("XDivisions"),this.topologyParams.push("YDivisions"),this.topologyParams.push("SkipCenterLines")}rebuild(){const F=this.__xDivisionsParam.getValue(),U=this.__yDivisionsParam.getValue(),Q=this.__skipCenterLinesParam.getValue()&&F%2==0&&U%2==0;this.setNumVertices(2*(F+U+2-(Q?1:0))),this.setNumSegments(F+U+2-(Q?1:0));let B=0;for(let U=0;U<=F;U++){if(Q&&U==F/2)continue;const l=2*B,V=2*B+1;this.setSegmentVertexIndices(B,l,V),B++}for(let l=0;l<=U;l++){if(Q&&l==F/2)continue;const U=2*B,V=2*B+1;this.setSegmentVertexIndices(B,U,V),B++}this.resize()}resize(){const F=this.getVertexAttribute("positions"),U=this.__xDivisionsParam.getValue(),Q=this.__yDivisionsParam.getValue(),B=this.__xParam.getValue(),l=this.__yParam.getValue(),V=this.__skipCenterLinesParam.getValue()&&U%2==0&&Q%2==0;let d=0;for(let Q=0;Q<=U;Q++){if(V&&Q==U/2)continue;const R=2*d,t=2*d+1,s=(Q/U-.5)*B;F.getValueRef(R).set(s,-.5*l,0),F.getValueRef(t).set(s,.5*l,0),d++}for(let R=0;R<=Q;R++){if(V&&R==U/2)continue;const t=2*d,s=2*d+1,i=(R/Q-.5)*l;F.getValueRef(t).set(-.5*B,i,0),F.getValueRef(s).set(.5*B,i,0),d++}}}PU.register("Grid",fB);class PB extends AB{constructor(F=.5,U=1,Q=32,B=!0,l=!0,V=!0){if(super(),isNaN(F)||isNaN(U)||isNaN(Q))throw new Error("Invalid geom args");this.__radiusParam=this.addParameter(new pQ("Radius",F)),this.__heightParam=this.addParameter(new pQ("Height",U)),this.__detailParam=this.addParameter(new pQ("Detail",Q>=3?Q:3,[3,200],1)),this.__capParam=this.addParameter(new YQ("Cap",B)),l&&this.addVertexAttribute("normals",qU),V&&this.addVertexAttribute("texCoords",OU),this.topologyParams.push("Detail"),this.topologyParams.push("Cap")}rebuild(){const F=this.__detailParam.getValue(),U=this.__radiusParam.getValue(),Q=this.__heightParam.getValue(),B=this.__capParam.getValue();let l=F+1;B&&(l+=1),this.setNumVertices(l);const V=F,d=F+1,R=this.getVertexAttribute("positions");R.getValueRef(V).set(0,0,Q);for(let Q=0;Q<F;Q++){const B=-Q/F*2*Math.PI;R.getValueRef(Q).set(U*Math.cos(B),U*Math.sin(B),0)}B&&R.getValueRef(d).set(0,0,0),this.setFaceCounts([F+(B?F:0)]);for(let U=0;U<F;U++){const Q=(U+1)%F;this.setFaceVertexIndices(U,[Q,U,V])}if(B)for(let U=0;U<F;U++){const Q=(U+1)%F;this.setFaceVertexIndices(F+U,[U,Q,d])}const t=this.getVertexAttribute("texCoords");if(t){let U=0;for(let Q=0;Q<F;Q++)t.setFaceVertexValue(U,0,new OU((Q+1)/F,0)),t.setFaceVertexValue(U,1,new OU(Q/F,0)),t.setFaceVertexValue(U,2,new OU((Q+.5)/F,1));if(B)for(let Q=0;Q<F;Q++)t.setFaceVertexValue(U,0,new OU(Q/F,0)),t.setFaceVertexValue(U,1,new OU((Q+1)/F,0)),t.setFaceVertexValue(U,2,new OU((Q+.5)/F,1)),U++}this.resize()}resize(){const F=this.__detailParam.getValue(),U=this.__radiusParam.getValue(),Q=this.__heightParam.getValue(),B=(this.__capParam.getValue(),F),l=F+1,V=this.getVertexAttribute("positions");V.getValueRef(B).set(0,0,Q);for(let Q=0;Q<F;Q++){const B=-Q/F*2*Math.PI;V.getValueRef(Q).set(U*Math.cos(B),U*Math.sin(B),0)}this.__cap&&V.getValueRef(l).set(0,0,0);this.getVertexAttribute("normals")&&this.computeVertexNormals()}}PU.register("Cone",PB);class jB extends AB{constructor(F=1,U=1,Q=1,B=!1,l=!0,V=!0){if(super(),isNaN(F)||isNaN(U)||isNaN(Q))throw new Error("Invalid geom args");this.__xParam=this.addParameter(new pQ("X",F)),this.__yParam=this.addParameter(new pQ("Y",U)),this.__zParam=this.addParameter(new pQ("Z",Q)),this.__baseZAtZeroParam=this.addParameter(new YQ("BaseZAtZero",B)),this.setFaceCounts([0,6]),this.setFaceVertexIndices(0,[0,1,2,3]),this.setFaceVertexIndices(1,[7,6,5,4]),this.setFaceVertexIndices(2,[1,0,4,5]),this.setFaceVertexIndices(3,[3,2,6,7]),this.setFaceVertexIndices(4,[0,3,7,4]),this.setFaceVertexIndices(5,[2,1,5,6]),this.setNumVertices(8),l&&this.addVertexAttribute("texCoords",OU),V&&this.addVertexAttribute("normals",qU)}setSize(F,U,Q){this.__xParam.setValue(F),this.__yParam.setValue(U),this.__zParam.setValue(Q)}setBaseSize(F,U){this.__xParam.setValue(F),this.__yParam.setValue(U)}rebuild(){const F=this.getVertexAttribute("normals");if(F)for(let U=0;U<6;U++){let Q;switch(U){case 0:Q=new qU(0,0,1);break;case 1:Q=new qU(0,0,-1);break;case 2:Q=new qU(1,0,0);break;case 3:Q=new qU(-1,0,0);break;case 4:Q=new qU(0,-1,0);break;case 5:Q=new qU(0,1,0)}F.setFaceVertexValue(U,0,Q),F.setFaceVertexValue(U,1,Q),F.setFaceVertexValue(U,2,Q),F.setFaceVertexValue(U,3,Q)}const U=this.getVertexAttribute("texCoords");if(U)for(let F=0;F<6;F++)U.setFaceVertexValue(F,0,new OU(0,0)),U.setFaceVertexValue(F,1,new OU(1,0)),U.setFaceVertexValue(F,2,new OU(1,1)),U.setFaceVertexValue(F,3,new OU(0,1));this.resize()}resize(){const F=this.__xParam.getValue(),U=this.__yParam.getValue(),Q=this.__zParam.getValue(),B=this.__baseZAtZeroParam.getValue();let l=.5;const V=this.getVertexAttribute("positions");B&&(l=1),V.getValueRef(0).set(.5*F,-.5*U,l*Q),V.getValueRef(1).set(.5*F,.5*U,l*Q),V.getValueRef(2).set(-.5*F,.5*U,l*Q),V.getValueRef(3).set(-.5*F,-.5*U,l*Q),l=-.5,B&&(l=0),V.getValueRef(4).set(.5*F,-.5*U,l*Q),V.getValueRef(5).set(.5*F,.5*U,l*Q),V.getValueRef(6).set(-.5*F,.5*U,l*Q),V.getValueRef(7).set(-.5*F,-.5*U,l*Q)}}PU.register("Cuboid",jB);class _B extends AB{constructor(F=.5,U=1,Q=32,B=2,l=!0,V=!1){if(super(),isNaN(F)||isNaN(U)||isNaN(Q)||isNaN(B))throw new Error("Invalid geom args");this.__radiusParam=this.addParameter(new pQ("Radius",F)),this.__heightParam=this.addParameter(new pQ("Height",U)),this.__sidesParam=this.addParameter(new pQ("Sides",Q>=3?Q:3,[3,200],1)),this.__loopsParam=this.addParameter(new pQ("Loops",B>=2?B:2,[1,200],1)),this.__capsParam=this.addParameter(new YQ("Caps",l)),this.__baseZAtZeroParam=this.addParameter(new YQ("BaseZAtZero",V)),this.addVertexAttribute("texCoords",OU),this.addVertexAttribute("normals",qU),this.topologyParams.push("Sides"),this.topologyParams.push("Loops"),this.topologyParams.push("Caps")}rebuild(){const F=this.__sidesParam.getValue(),U=this.__loopsParam.getValue(),Q=this.__capsParam.getValue();let B=F*U;Q&&(B+=2),this.setNumVertices(B),Q?this.setFaceCounts([2*F,F]):this.setFaceCounts([0,F]);let l=0;if(Q){for(let U=0;U<F;U++){const Q=B-1,V=U,d=(U+1)%F;this.setFaceVertexIndices(l++,[Q,V,d])}for(let Q=0;Q<F;Q++){const V=F*(U-1)+Q,d=B-2,R=F*(U-1)+(Q+1)%F;this.setFaceVertexIndices(l++,[V,d,R])}}for(let Q=0;Q<U-1;Q++)for(let U=0;U<F;U++){const B=F*Q+(U+1)%F,V=F*Q+U,d=F*(Q+1)+U,R=F*(Q+1)+(U+1)%F;this.setFaceVertexIndices(l++,[B,V,d,R])}const V=this.getVertexAttribute("normals");if(l=0,Q){const U=new qU(0,0,-1);for(let Q=0;Q<F;Q++)V.setFaceVertexValue(l,0,U),V.setFaceVertexValue(l,1,U),V.setFaceVertexValue(l,2,U),l++;U.set(0,0,1);for(let Q=0;Q<F;Q++)V.setFaceVertexValue(l,0,U),V.setFaceVertexValue(l,1,U),V.setFaceVertexValue(l,2,U),l++}for(let Q=0;Q<U-1;Q++)for(let U=0;U<F;U++){let Q=U/F*2*Math.PI;const B=new qU(Math.sin(Q),Math.cos(Q),0);V.setFaceVertexValue(l,0,B),V.setFaceVertexValue(l,1,B),Q=(U+1)/F*2*Math.PI;const d=new qU(Math.sin(Q),Math.cos(Q),0);V.setFaceVertexValue(l,2,d),V.setFaceVertexValue(l,3,d),l++}const d=this.getVertexAttribute("texCoords");if(l=0,Q){for(let U=0;U<F;U++)d.setFaceVertexValue(l,0,new OU(U/F,0)),d.setFaceVertexValue(l,1,new OU((U+1)/F,0)),d.setFaceVertexValue(l,2,new OU((U+.5)/F,1)),l++;for(let U=0;U<F;U++)d.setFaceVertexValue(l,0,new OU(U/F,0)),d.setFaceVertexValue(l,1,new OU((U+1)/F,0)),d.setFaceVertexValue(l,2,new OU((U+.5)/F,1)),l++}for(let U=0;U<F;U++)d.setFaceVertexValue(l,0,new OU((U+1)/F,0)),d.setFaceVertexValue(l,2,new OU((U+1)/F,1)),d.setFaceVertexValue(l,1,new OU(U/F,0)),d.setFaceVertexValue(l,3,new OU(U/F,1)),l++;this.resize()}resize(){const F=this.__sidesParam.getValue(),U=this.__loopsParam.getValue(),Q=this.__radiusParam.getValue(),B=this.__heightParam.getValue(),l=this.__capsParam.getValue(),V=this.__baseZAtZeroParam.getValue();let d=F*U;l&&(d+=2);let R=0,t=.5;V&&(t=0);const s=this.getVertexAttribute("positions");for(let l=0;l<U;l++){const V=l/(U-1)*B-B*t;for(let U=0;U<F;U++){const B=U/F*2*Math.PI;s.getValueRef(R).set(Math.sin(B)*Q,Math.cos(B)*Q,V),R++}}l&&(s.getValueRef(d-1).set(0,0,B*(V?0:-.5)),s.getValueRef(d-2).set(0,0,B*(V?1:.5))),this.computeVertexNormals()}}PU.register("Cylinder",_B);class OB extends AB{constructor(F=.5,U=32){if(super(),isNaN(F)||isNaN(U))throw new Error("Invalid geom args");this.__radiusParam=this.addParameter(new pQ("Radius",F)),this.__sidesParam=this.addParameter(new pQ("Sides",U>=3?U:3,[3,200],1)),this.addVertexAttribute("texCoords",OU),this.addVertexAttribute("normals",qU),this.topologyParams.push("Sides")}rebuild(){const F=this.__sidesParam.getValue();this.setNumVertices(F+1),this.setFaceCounts([F]);this.getVertexAttribute("positions").getValueRef(0).set(0,0,0);for(let U=0;U<F;U++){const Q=U%F+1,B=(U+1)%F+1;this.setFaceVertexIndices(U,[0,Q,B])}const U=this.getVertexAttribute("normals"),Q=new qU(0,0,1);U.setValue(0,Q);for(let B=0;B<F;B++)U.setValue(B+1,Q);const B=this.getVertexAttribute("texCoords");B.getValueRef(0).set(.5,.5);for(let U=0;U<F;U++){const Q=U/F*-2*Math.PI;B.getValueRef(U+1).set(.5*Math.sin(Q)+.5,.5*Math.cos(Q)+.5)}this.resize()}resize(){const F=this.__sidesParam.getValue(),U=this.__radiusParam.getValue(),Q=this.getVertexAttribute("positions");for(let B=0;B<F;B++){const l=B/F*-2*Math.PI;Q.getValueRef(B+1).set(Math.sin(l)*U,Math.cos(l)*U,0)}}}PU.register("Disc",OB);class qB extends AB{constructor(F=1,U=1,Q=1,B=1,l=!0,V=!0){if(super(),isNaN(F)||isNaN(U)||isNaN(Q)||isNaN(B))throw new Error("Invalid geom args");this.__sizeXParam=this.addParameter(new pQ("SizeX",F)),this.__sizeYParam=this.addParameter(new pQ("SizeY",U)),this.__detailXParam=this.addParameter(new pQ("DetailX",Q)),this.__detailYParam=this.addParameter(new pQ("DetailY",B)),l&&this.addVertexAttribute("normals",qU),V&&this.addVertexAttribute("texCoords",OU),this.topologyParams.push("DetailX"),this.topologyParams.push("DetailY")}rebuild(){const F=this.__detailXParam.getValue(),U=this.__detailYParam.getValue();this.setNumVertices((F+1)*(U+1)),this.setFaceCounts([0,F*U]);let Q=0;for(let B=0;B<U;B++)for(let U=0;U<F;U++){const l=(F+1)*(B+1)+(U+1),V=(F+1)*(B+1)+U,d=(F+1)*B+U,R=(F+1)*B+(U+1);this.setFaceVertexIndices(Q,[l,V,d,R]),Q+=1}let B=0;const l=this.getVertexAttribute("normals");if(l)for(let Q=0;Q<=U;Q++)for(let U=0;U<=F;U++)l.getValueRef(B).set(0,0,1),B++;B=0;const V=this.getVertexAttribute("texCoords");if(V)for(let Q=0;Q<=U;Q++){const l=Q/U;for(let U=0;U<=F;U++){const Q=U/F;V.getValueRef(B).set(Q,l),B++}}this.resize()}resize(){const F=this.__sizeXParam.getValue(),U=this.__sizeYParam.getValue(),Q=this.__detailXParam.getValue(),B=this.__detailYParam.getValue(),l=this.getVertexAttribute("positions");let V=0;for(let d=0;d<=B;d++){const R=(d/B-.5)*U;for(let U=0;U<=Q;U++){const B=(U/Q-.5)*F;l.getValueRef(V).set(B,R,0),V++}}}}PU.register("Plane",qB);class $B extends AB{constructor(F=1,U=12,Q=12,B=!0,l=!0){if(super(),isNaN(F)||isNaN(U)||isNaN(Q))throw new Error("Invalid geom args");this.__radiusParam=this.addParameter(new pQ("Radius",F)),this.__sidesParam=this.addParameter(new pQ("Sides",U>=3?U:3,[3,200],1)),this.__loopsParam=this.addParameter(new pQ("Loops",Q>=3?Q:3,[3,200],1)),B&&this.addVertexAttribute("normals",qU),l&&this.addVertexAttribute("texCoords",OU),this.topologyParams.push("Sides"),this.topologyParams.push("Loops")}rebuild(){const F=this.__radiusParam.getValue(),U=this.__sidesParam.getValue(),Q=this.__loopsParam.getValue(),B=2+U*Q,l=2*U,V=U*Q;this.setNumVertices(B),this.setFaceCounts([l,V]);const d=this.getVertexAttribute("positions"),R=this.getVertexAttribute("normals"),t=new qU(0,0,1);let s=0;d.getValueRef(s).set(0,0,F),R&&R.getValueRef(s).set(0,0,1),s++;for(let B=0;B<Q;B++){const l=(B+1)/(Q+1)*Math.PI;for(let Q=0;Q<U;Q++){const B=-Q/U*2*Math.PI;t.set(Math.sin(l)*Math.cos(B),Math.sin(l)*Math.sin(B),Math.cos(l)),d.getValueRef(s).setFromOther(t.scale(F)),R&&R.getValueRef(s).setFromOther(t),s++}}d.getValueRef(s).set(0,0,-F),R&&R.getValueRef(s).set(0,0,-1),s++;const i=this.getVertexAttribute("texCoords");let e=0;for(let F=0;F<U;F++){const B=0,l=(F+1)%U+1,V=F+1;if(this.setFaceVertexIndices(e,[B,l,V]),i){const B=new OU(.5,0),l=new OU((F+1)/(U-1),1/(Q+1)),V=new OU(F/(U-1),1/(Q+1));i.setFaceVertexValue(e,0,B),i.setFaceVertexValue(e,1,l),i.setFaceVertexValue(e,2,V)}e++}for(let F=0;F<U;F++){const l=B-1,V=U*(Q-1)+(F+1)%U+1,d=U*(Q-1)+F+1;if(this.setFaceVertexIndices(e,[l,d,V]),i){const B=new OU(.5,1),l=new OU((F+1)/(U-1),1-1/(Q+1)),V=new OU(F/(U-1),1-1/(Q+1));i.setFaceVertexValue(e,0,B),i.setFaceVertexValue(e,1,l),i.setFaceVertexValue(e,2,V)}e++}for(let F=0;F<Q-1;F++)for(let B=0;B<U;B++){const l=U*F+B+1,V=U*F+(B+1)%U+1,d=U*(F+1)+(B+1)%U+1,R=U*(F+1)+B+1;this.setFaceVertexIndices(e,[l,V,d,R]),i&&(i.setFaceVertexValue(e,0,new OU(B/U,(F+1)/Q)),i.setFaceVertexValue(e,1,new OU((B+1)/U,(F+1)/Q)),i.setFaceVertexValue(e,2,new OU((B+1)/U,(F+2)/Q)),i.setFaceVertexValue(e,3,new OU(B/U,(F+2)/Q))),e++}}resize(){const F=this.__radiusParam.getValue(),U=this.__sidesParam.getValue(),Q=this.__loopsParam.getValue(),B=this.getVertexAttribute("positions"),l=this.getVertexAttribute("normals");let V=0;const d=new qU(0,0,1);B.getValueRef(V).set(0,0,F),l&&l.getValueRef(V).set(0,0,1),V++;for(let R=0;R<Q;R++){const t=(R+1)/(Q+1)*Math.PI;for(let Q=0;Q<U;Q++){const R=-Q/U*2*Math.PI;d.set(Math.sin(t)*Math.cos(R),Math.sin(t)*Math.sin(R),Math.cos(t)),B.getValueRef(V).setFromOther(d.scale(F)),l&&l.getValueRef(V).setFromOther(d),V++}}B.getValueRef(V).set(0,0,-F),l&&l.getValueRef(V).set(0,0,-1),V++}}PU.register("Sphere",$B);class Fl extends AB{constructor(F=.5,U=3,Q=32,B=2*Math.PI){if(super(),isNaN(F)||isNaN(U)||isNaN(Q))throw new Error("Invalid geom args");this.__innerRadiusParam=this.addParameter(new pQ("InnerRadius",F)),this.__outerRadiusParam=this.addParameter(new pQ("OuterRadius",U)),this.__detailParam=this.addParameter(new pQ("Detail",Q>=3?Q:3,[3,200],1)),this.__arcAngleParam=this.addParameter(new pQ("ArcAngle",B)),this.addVertexAttribute("texCoords",OU),this.addVertexAttribute("normals",qU),this.topologyParams.push("Detail"),this.topologyParams.push("ArcAngle")}rebuild(){const F=this.__arcAngleParam.getValue()<2*Math.PI,U=this.__detailParam.getValue(),Q=U,B=2*U+(F?1:0),l=Q*B;this.setNumVertices(l),this.setFaceCounts([0,Q*B]);const V=this.getVertexAttribute("texCoords");let d=0;for(let U=0;U<(F?B-1:B);U++)for(let F=0;F<Q;F++){const l=(U+1)%B,R=(F+1)%Q,t=Q*U+F,s=Q*U+R,i=Q*l+R,e=Q*l+F;this.setFaceVertexIndices(d,[t,s,i,e]),V.setFaceVertexValue(d,0,new OU(U/B,F/B)),V.setFaceVertexValue(d,1,new OU(U/B,(F+1)/B)),V.setFaceVertexValue(d,2,new OU((U+1)/B,(F+1)/B)),V.setFaceVertexValue(d,3,new OU((U+1)/B,F/B)),d++}this.resize()}resize(){const F=this.__innerRadiusParam.getValue(),U=this.__outerRadiusParam.getValue(),Q=this.__arcAngleParam.getValue(),B=this.__detailParam.getValue(),l=Q<2*Math.PI,V=B,d=2*B+(l?1:0),R=this.getVertexAttribute("positions"),t=this.getVertexAttribute("normals");let s=0;for(let B=0;B<d;B++){const i=-B/(l?d-1:d)*Q,e=Math.cos(i),I=Math.sin(i);for(let Q=0;Q<V;Q++){const B=Q/V*2*Math.PI,l=Math.sin(B),d=Math.cos(B),i=U+d*F;R.getValueRef(s).set(e*i,I*i,F*l),t.getValueRef(s).set(e*d,I*d,l),s++}}}}PU.register("Torus",Fl);class Ul extends WB{constructor(F){super(),null==F&&(F=this.constructor.name),this.__name=F,this.format="RGBA",this.type="UNSIGNED_BYTE",this.__loaded=!1,this.width=1,this.height=1}isLoaded(){return this.__loaded}getName(){return this.__name}isStream(){return!1}setData(F,U,Q){this.__data!=Q&&(this.width=F,this.height=U,this.__data=Q,this.__loaded?this.emit("updated",{}):(this.__loaded=!0,this.emit("loaded",{})))}getParams(){const F=super.getParams();return F.data=this.__data,F}}PU.register("DataImage2D",Ul),PU.register("DataImage",Ul);const Ql={};class Bl extends WB{constructor(F,U="",Q={}){U.constructor==Object&&(Q=U),null!=F&&F.includes(".")&&(console.warn("Deprecated signature. Please provide a name and filepath to the image constructor"),F=F.substring(F.lastIndexOf("/")+1,F.lastIndexOf("."))),super(F,Q),this.type="UNSIGNED_BYTE",this.__crossOrigin="anonymous",this.__loaded=!1;const B=this.addParameter(new hB("FilePath"));B.on("valueChanged",(()=>{if(this.loaded=!1,""==this.getName()){const F=B.getStem(),U=F.substring(F.length-1);isNaN(U)?this.setName(F):this.setName(F.substring(0,F.length-1))}if(B.getValue()){const F=B.getUrl();this.load(F)}})),U&&""!=U&&B.setFilepath(U)}static __imageDataLibrary(){return Ql}setCrossOrigin(F){this.__crossOrigin=F}load(F,U="RGB"){return new Promise(((Q,B)=>{if(!U){const Q=F.lastIndexOf(".");if(-1!=Q){".png"==F.substring(Q).toLowerCase()&&(U="RGBA")}}let l;this.format=U,this.__loaded=!1;const V=()=>{this.getDOMElement=()=>l,this.url=F,this.width=l.width,this.height=l.height,this.__data=l,this.__loaded=!0,this.emit("loaded",{}),Q()},d=Bl.__imageDataLibrary();F in d?(l=d[F],l.complete?V():l.addEventListener("load",V)):(l=new Image,l.crossOrigin=this.__crossOrigin,l.src=F,l.addEventListener("load",V),d[F]=l)}))}setImageURL(F,U="RGB"){this.load(F,U)}isLoaded(){return this.__loaded}getParams(){const F=super.getParams();return this.__loaded&&(F.data=this.__data),F}toJSON(F){}fromJSON(F,U){}readBinary(F,U){this.setName(F.loadStr());const Q=F.loadStr();if("string"==typeof Q&&""!=Q){const F=U.url.substring(0,U.url.lastIndexOf("/"));this.load(F+"/"+Q)}}}class ll extends Bl{constructor(F,U={}){console.warn("FileImage2D is becoming deprecated in favor of simple FileImage"),super(F,U)}}PU.register("FileImage2D",Bl),PU.register("FileImage",Bl);class Vl extends Bl{constructor(F,U,Q){super(F,U,Q)}}PU.register("LDRImage",Vl);class dl extends Bl{constructor(F,U,Q){super(F,U,Q),this.format="RGB",this.type="UNSIGNED_BYTE",this.addParameter(new YQ("Mute",!1)),this.addParameter(new YQ("Loop",!0)),this.addParameter(new pQ("Gain",2)).setRange([0,5]),this.addParameter(new YQ("SpatializeAudio",!0)),this.addParameter(new pQ("refDistance",2)),this.addParameter(new pQ("maxDistance",1e4)),this.addParameter(new pQ("rolloffFactor",1)),this.addParameter(new pQ("coneInnerAngle",360)),this.addParameter(new pQ("coneOuterAngle",0)),this.addParameter(new pQ("coneOuterGain",1))}load(F,U="RGB"){return new Promise(((U,Q)=>{nB.incrementWorkload(1);const B=document.createElement("video");B.style.display="none",B.preload="auto",B.crossOrigin="anonymous",this.getAudioSource=()=>B,document.body.appendChild(B),B.addEventListener("loadedmetadata",(()=>{const F=this.getParameter("Mute");B.muted=F.getValue(),F.on("valueChanged",(()=>{B.muted=F.getValue()}));const Q=this.getParameter("Loop");B.loop=Q.getValue(),Q.on("valueChanged",(()=>{B.loop=Q.getValue()})),this.width=B.videoHeight,this.height=B.videoWidth,this.__data=B,this.__loaded=!0,nB.incrementWorkDone(1),this.emit("loaded",{}),U();let l=0;const V=()=>{if(B.paused||B.ended)return;const F=Math.floor(29.97*B.currentTime);l!=F&&(this.emit("updated",{}),l=F),setTimeout(V,20)};V()}),!1),B.src=F;const l=B.play();void 0!==l&&l.then((F=>{console.log("Autoplay started!")})).catch((()=>{console.log("Autoplay was prevented.")}))}))}}function Rl(F){this.data=F,this.pos=0}function tl(F){this.stream=new Rl(F),this.output={}}PU.register("LDRVideo",dl),Rl.prototype.readByte=function(){return this.data[this.pos++]},Rl.prototype.peekByte=function(){return this.data[this.pos]},Rl.prototype.readBytes=function(F){for(var U=new Array(F),Q=0;Q<F;Q++)U[Q]=this.readByte();return U},Rl.prototype.peekBytes=function(F){for(var U=new Array(F),Q=0;Q<F;Q++)U[Q]=this.data[this.pos+Q];return U},Rl.prototype.readString=function(F){for(var U="",Q=0;Q<F;Q++)U+=String.fromCharCode(this.readByte());return U},Rl.prototype.readBitArray=function(){for(var F=[],U=this.readByte(),Q=7;Q>=0;Q--)F.push(!!(U&1<<Q));return F},Rl.prototype.readUnsigned=function(F){var U=this.readBytes(2);return F?(U[1]<<8)+U[0]:(U[0]<<8)+U[1]},tl.prototype.parse=function(F){return this.parseParts(this.output,F),this.output},tl.prototype.parseParts=function(F,U){for(var Q=0;Q<U.length;Q++){var B=U[Q];this.parsePart(F,B)}},tl.prototype.parsePart=function(F,U){var Q,B=U.label;if(!U.requires||U.requires(this.stream,this.output,F))if(U.loop){for(var l=[];U.loop(this.stream);){var V={};this.parseParts(V,U.parts),l.push(V)}F[B]=l}else U.parts?(Q={},this.parseParts(Q,U.parts),F[B]=Q):U.parser?(Q=U.parser(this.stream,this.output,F),U.skip||(F[B]=Q)):U.bits&&(F[B]=this.parseBits(U.bits))},tl.prototype.parseBits=function(F){var U={},Q=this.stream.readBitArray();for(var B in F){var l=F[B];l.length?U[B]=Q.slice(l.index,l.index+l.length).reduce((function(F,U){return 2*F+U}),0):U[B]=Q[l.index]}return U};var sl=function(){return function(F){return F.readByte()}},il=function(F){return function(U){return U.readBytes(F)}},el=function(F){return function(U){return U.readString(F)}},Il=function(F){return function(U){return U.readUnsigned(F)}},Zl=function(F,U){return function(Q,B,l){for(var V=U(Q,B,l),d=new Array(V),R=0;R<V;R++)d[R]=Q.readBytes(F);return d}},cl={label:"blocks",parser:function(F){for(var U=[],Q=F.readByte();0!==Q;Q=F.readByte())U=U.concat(F.readBytes(Q));return U}},nl={label:"gce",requires:function(F){var U=F.peekBytes(2);return 33===U[0]&&249===U[1]},parts:[{label:"codes",parser:il(2),skip:!0},{label:"byteSize",parser:sl()},{label:"extras",bits:{future:{index:0,length:3},disposal:{index:3,length:3},userInput:{index:6},transparentColorGiven:{index:7}}},{label:"delay",parser:Il(!0)},{label:"transparentColorIndex",parser:sl()},{label:"terminator",parser:sl(),skip:!0}]},al={label:"image",requires:function(F){return 44===F.peekByte()},parts:[{label:"code",parser:sl(),skip:!0},{label:"descriptor",parts:[{label:"left",parser:Il(!0)},{label:"top",parser:Il(!0)},{label:"width",parser:Il(!0)},{label:"height",parser:Il(!0)},{label:"lct",bits:{exists:{index:0},interlaced:{index:1},sort:{index:2},future:{index:3,length:2},size:{index:5,length:3}}}]},{label:"lct",requires:function(F,U,Q){return Q.descriptor.lct.exists},parser:Zl(3,(function(F,U,Q){return Math.pow(2,Q.descriptor.lct.size+1)}))},{label:"data",parts:[{label:"minCodeSize",parser:sl()},cl]}]},Sl={label:"text",requires:function(F){var U=F.peekBytes(2);return 33===U[0]&&1===U[1]},parts:[{label:"codes",parser:il(2),skip:!0},{label:"blockSize",parser:sl()},{label:"preData",parser:function(F,U,Q){return F.readBytes(Q.text.blockSize)}},cl]},bl={label:"frames",parts:[nl,{label:"application",requires:function(F,U,Q){var B=F.peekBytes(2);return 33===B[0]&&255===B[1]},parts:[{label:"codes",parser:il(2),skip:!0},{label:"blockSize",parser:sl()},{label:"id",parser:function(F,U,Q){return F.readString(Q.blockSize)}},cl]},{label:"comment",requires:function(F,U,Q){var B=F.peekBytes(2);return 33===B[0]&&254===B[1]},parts:[{label:"codes",parser:il(2),skip:!0},cl]},al,Sl],loop:function(F){var U=F.peekByte();return 33===U||44===U}},Gl=[{label:"header",parts:[{label:"signature",parser:el(3)},{label:"version",parser:el(3)}]},{label:"lsd",parts:[{label:"width",parser:Il(!0)},{label:"height",parser:Il(!0)},{label:"gct",bits:{exists:{index:0},resolution:{index:1,length:3},sort:{index:4},size:{index:5,length:3}}},{label:"backgroundColorIndex",parser:sl()},{label:"pixelAspectRatio",parser:sl()}]},{label:"gct",requires:function(F,U){return U.lsd.gct.exists},parser:Zl(3,(function(F,U){return Math.pow(2,U.lsd.gct.size+1)}))},bl];function Cl(F){var U=new tl(new Uint8Array(F));this.raw=U.parse(Gl),this.raw.hasImages=!1;for(var Q=0;Q<this.raw.frames.length;Q++)if(this.raw.frames[Q].image){this.raw.hasImages=!0;break}}Cl.prototype.decompressFrame=function(F,U){if(F>=this.raw.frames.length)return null;var Q=this.raw.frames[F];if(Q.image){var B=Q.image.descriptor.width*Q.image.descriptor.height,l=function(F,U,Q){var B,l,V,d,R,t,s,i,e,I,Z,c,n,a,S,g,b=4096,G=-1,C=Q,h=new Array(Q),W=new Array(b),m=new Array(b),J=new Array(b+1);for(R=(l=1<<(c=F))+1,B=l+2,s=G,V=(1<<(d=c+1))-1,e=0;e<l;e++)W[e]=0,m[e]=e;for(Z=i=n=a=g=S=0,I=0;I<C;){if(0===a){if(i<d){Z+=U[S]<<i,i+=8,S++;continue}if(e=Z&V,Z>>=d,i-=d,e>B||e==R)break;if(e==l){V=(1<<(d=c+1))-1,B=l+2,s=G;continue}if(s==G){J[a++]=m[e],s=e,n=e;continue}for(t=e,e==B&&(J[a++]=n,e=s);e>l;)J[a++]=m[e],e=W[e];n=255&m[e],J[a++]=n,B<b&&(W[B]=s,m[B]=n,0==(++B&V)&&B<b&&(d++,V+=B)),s=t}a--,h[g++]=J[a],I++}for(I=g;I<C;I++)h[I]=0;return h}(Q.image.data.minCodeSize,Q.image.data.blocks,B);Q.image.descriptor.lct.interlaced&&(l=function(F,U){for(var Q=new Array(F.length),B=F.length/U,l=function(B,l){var V=F.slice(l*U,(l+1)*U);Q.splice.apply(Q,[B*U,U].concat(V))},V=[0,4,2,1],d=[8,8,4,2],R=0,t=0;t<4;t++)for(var s=V[t];s<B;s+=d[t])l(s,R),R++;return Q}(l,Q.image.descriptor.width));var V={pixels:l,dims:{top:Q.image.descriptor.top,left:Q.image.descriptor.left,width:Q.image.descriptor.width,height:Q.image.descriptor.height}};return Q.image.descriptor.lct&&Q.image.descriptor.lct.exists?V.colorTable=Q.image.lct:V.colorTable=this.raw.gct,Q.gce&&(V.delay=10*(Q.gce.delay||10),V.disposalType=Q.gce.extras.disposal,Q.gce.extras.transparentColorGiven&&(V.transparentIndex=Q.gce.transparentColorIndex)),U&&(V.patch=function(F){for(var U=F.pixels.length,Q=new Uint8ClampedArray(4*U),B=0;B<U;B++){var l=4*B,V=F.pixels[B],d=F.colorTable[V];Q[l]=d[0],Q[l+1]=d[1],Q[l+2]=d[2],Q[l+3]=V!==F.transparentIndex?255:0}return Q}(V)),V}return null},Cl.prototype.decompressFrames=function(F){for(var U=[],Q=0;Q<this.raw.frames.length;Q++){this.raw.frames[Q].image&&U.push(this.decompressFrame(Q,F))}return U};class hl extends Bl{constructor(F,U="",Q={}){super(F,U,Q),this.format="RGBA",this.type="UNSIGNED_BYTE",this.__streamAtlas=!0,this.addParameter(new MQ("StreamAtlasDesc")),this.addParameter(new pQ("StreamAtlasIndex",0));const B=this.getParameter("StreamAtlasIndex");let l;B.setRange([0,1]);let V=0;const d=F=>{B.setValue(V),l&&setTimeout((()=>d(F)),this.getFrameDelay(V)),V=(V+1)%F};this.play=()=>{this.__resourcePromise.then((()=>{l=!0;const F=B.getRange()[1];d(F)}))},this.stop=()=>{l=!1}}getFrameDelay(F){return 10*this.__unpackedData.frameDelays[F]}load(F,U="RGB"){const Q=Bl.__imageDataLibrary();return F in Q?(this.__resourcePromise=Q[F],this.__resourcePromise):(this.__resourcePromise=new Promise(((U,Q)=>{nB.incrementWorkload(1),uQ(F,(Q=>{console.warn("Unpacking Gif client side:"+F);const B=performance.now(),l=new Cl(Q).decompressFrames(!0),V=Math.sqrt(l.length),d=[V,V];DU.fract(V)>0&&(d[0]=Math.floor(d[0]+1),DU.fract(V)>.5?d[1]=Math.floor(d[1]+1):d[1]=Math.floor(d[1]));const R=l[0].dims.width,t=l[0].dims.height,s=document.createElement("canvas"),i=s.getContext("2d"),e=document.createElement("canvas"),I=e.getContext("2d");e.width=R,e.height=t;const Z=document.createElement("canvas"),c=Z.getContext("2d");let n;Z.width=d[0]*R,Z.height=d[1]*t;const a=[],S=(F,U)=>{const Q=F.dims;a.push(F.delay/10),n&&Q.width==n.width&&Q.height==n.height||(s.width=Q.width,s.height=Q.height,n=i.createImageData(Q.width,Q.height)),n.data.set(F.patch),i.putImageData(n,0,0),2==F.disposalType&&I.clearRect(0,0,e.width,e.height),I.drawImage(s,Q.left,Q.top),c.drawImage(e,U%d[0]*R,Math.floor(U/d[0])*t)};for(let F=0;F<l.length;F++)S(l[F],F);nB.incrementWorkDone(1);const g=c.getImageData(0,0,Z.width,Z.height),b=performance.now()-B;console.log(`Decode GIF '${F}' time:`+b),U({width:Z.width,height:Z.height,atlasSize:d,frameRange:[0,l.length],frameDelays:a,imageData:g})}),(U=>{const B="Unable to Load URL:"+U+":"+F;console.warn(B),Q(B)}))})),Q[F]=this.__resourcePromise,this.__resourcePromise.then((F=>{this.width=F.width,this.height=F.height,this.getParameter("StreamAtlasDesc").setValue(new $U(F.atlasSize[0],F.atlasSize[1],0,0)),this.getParameter("StreamAtlasIndex").setRange(F.frameRange),this.__unpackedData=F,this.__data=F.imageData,this.__loaded=!0,this.emit("loaded",{})})),this.__resourcePromise)}}PU.register("GIFImage",hl);class Wl extends WB{constructor(F,U={}){let Q;null!=F&&F.includes(".")&&(Q=F,F=F.substring(F.lastIndexOf("/")+1,F.lastIndexOf("."))),super(F,U),this.__loaded=!1,this.__exposure=1,this.__ambientLightFactor=0,this.__hdrTint=new UQ(1,1,1,1),this.__stream="stream"in U&&U.stream,this.type="FLOAT";const B=this.addParameter(new hB("FilePath"));B.on("valueChanged",(()=>{this.loaded=!1;const F=B.getUrl();this.load(F)})),Q&&this.getParameter("FilePath").setFilepath(Q)}getDOMElement(){return this.__domElement}getResourcePath(){return this.getParameter("FilePath").getValue()}__decodeData(F){return new Promise(((U,Q)=>{const B=F.ldr,l=F.cdm,V=new Blob([B.buffer]),d=new Image;d.onload=()=>{this.width=d.width,this.height=d.height,this.__data={ldr:d,cdm:l},this.__loaded?this.emit("updated",{}):(this.__loaded=!0,this.emit("loaded",{})),U()},d.src=URL.createObjectURL(V)}))}load(F){return new Promise(((U,Q)=>{const B=F.lastIndexOf("/")>-1?F.substring(F.lastIndexOf("/")+1):"",l=B.substring(0,B.lastIndexOf("."));""==this.getName()&&this.setName(l),this.type="FLOAT",nB.loadFile("archive",F).then((F=>{if(!F.ldr||!F.cdm)for(const U in F)U.endsWith(".jpg")?(F.ldr=F[U],delete F[U]):U.endsWith(".bin")&&(F.cdm=F[U],delete F[U]);this.__decodeData(F).then((()=>{U()}))}),(F=>{this.emit("error",F),Q(F)}))}))}isStream(){return!1}isLoaded(){return this.__loaded}getParams(){const F=super.getParams();return this.__loaded&&(F.data=this.__data,F.exposure=this.__exposure),F}setHDRTint(F){this.__hdrTint=F}getHDRTint(){return this.__hdrTint}toJSON(F){}fromJSON(F,U){}readBinary(F,U){this.setName(F.loadStr());const Q=F.loadStr();if("string"==typeof Q&&""!=Q){if(U.lod>=0){const F=Q.lastIndexOf(".");if(-1!=F){const B=Q.substring(0,F)+U.lod+Q.substring(F);nB.resourceAvailable(B)&&(Q=B)}}this.getParameter("FilePath").setValue(Q)}}}PU.register("VLHImage",Wl);class ml extends Wl{constructor(F,U={}){super(F,U),this.addParameter(new YQ("HeadLightMode",!1)),this.utf8decoder=new TextDecoder,this.shCoeffs=[]}__decodeData(F){const U=F.samples;if(U&&(this.luminanceData=JSON.parse(this.utf8decoder.decode(U)),this.luminanceData.shCoeffs))for(let F=0;F<9;F++)this.shCoeffs[F]=new UQ(this.luminanceData.shCoeffs[3*F+0],this.luminanceData.shCoeffs[3*F+1],this.luminanceData.shCoeffs[3*F+2]);return super.__decodeData(F)}dirToLuminance(F){const U=F.x,Q=F.y,B=F.z,l=this.shCoeffs[0].scale(.886227);return l.addInPlace(this.shCoeffs[1].scale(1.023328*Q)),l.addInPlace(this.shCoeffs[2].scale(1.023328*B)),l.addInPlace(this.shCoeffs[3].scale(1.023328*U)),l.addInPlace(this.shCoeffs[4].scale(.858086*U*Q)),l.addInPlace(this.shCoeffs[5].scale(.858086*Q*B)),l.addInPlace(this.shCoeffs[6].scale(.743125*B*B-.247708)),l.addInPlace(this.shCoeffs[7].scale(.858086*U*B)),l.addInPlace(this.shCoeffs[8].scale(.429043*(U*U-Q*Q))),l.luminance()}}PU.register("EnvMap",ml);const Jl=new class extends nQ{constructor(){super(),this.__labelLibraries={},this.__language=function(){if(!globalThis.navigator)return"en";const F=new URLSearchParams(window.location.search);if(F.has("lang"))return F.get("lang");const U=globalThis.navigator,Q=["language","browserLanguage","systemLanguage","userLanguage"];let B,l;const V=F=>F.startsWith("en")?"En":F.startsWith("es")?"Es":F.startsWith("fr")?"Fr":F.startsWith("gb")||F.startsWith("de")?"Gb":F;if(Array.isArray(U.languages))for(B=0;B<U.languages.length;B++)if(l=U.languages[B],l&&l.length)return V(l);for(B=0;B<Q.length;B++)if(l=U[Q[B]],l&&l.length)return V(l);return null}(),this.__foundLabelLibraries={}}loadLibrary(F,U){const Q=F.substring(0,F.lastIndexOf("."));this.__foundLabelLibraries[Q]=U,F.endsWith(".labels")?xQ(U,(F=>{this.__labelLibraries[Q]=JSON.parse(F),this.emit("labelLibraryLoaded",{library:Q})})):F.endsWith(".xlsx")&&window.navigator&&window.XLSX&&uQ(U,(F=>{const U=new Uint8Array(F),B=XLSX.read(U,{type:"array"}),l={};B.SheetNames.forEach((function(F){XLSX.utils.sheet_to_row_object_array(B.Sheets[F]).forEach((function(F){const U=F.Identifier;delete F.Identifier,l[U]=F}))})),this.__labelLibraries[Q]=l,this.emit("labelLibraryLoaded",{library:Q})}))}isLibraryFound(F){return F in this.__foundLabelLibraries}isLibraryLoaded(F){return F in this.__labelLibraries}getLabelText(F,U){const Q=this.__labelLibraries[F];if(!Q)throw new Error("LabelLibrary: '"+F+"' not found in LabelManager. Found: ["+Object.keys(this.__labelLibraries)+"]");const B=Q[U];if(!B)throw new Error("Label: '"+U+"' not found in LabelLibrary: '"+F+"'. Found: ["+Object.keys(Q)+"]");const l=B[this.__language];if(!l){if(B.En)return B.En;throw new Error("labelText: '"+language+"' not found in Label. Found: ["+Object.keys(B)+"]")}return l}setLabelText(F,U,Q){let B=this.__labelLibraries[F];B||(B={},this.__labelLibraries[F]=B);let l=B[U];l||(l={},B[U]=l),l[this.__language]=Q}setLanguage(F){this.__language=F}};class Xl extends Ul{constructor(F,U){super(F),this.__canvasElem=document.createElement("canvas");const Q=this.addParameter(new PQ("Library"));this.addParameter(new PQ("Text","")),this.addParameter(new AQ("FontColor",new UQ(0,0,0))),this.addParameter(new pQ("Margin",11)),this.addParameter(new pQ("BorderWidth",2)),this.addParameter(new pQ("BorderRadius",11)),this.addParameter(new YQ("Outline",!1)),this.addParameter(new YQ("OutlineColor",new UQ(0,0,0))),this.addParameter(new YQ("Background",!0)),this.addParameter(new AQ("BackgroundColor",new UQ("#FBC02D"))),this.addParameter(new YQ("FillBackground",!0)),this.addParameter(new YQ("StrokeBackgroundOutline",!0)),this.addParameter(new pQ("FontSize",22)),this.addParameter(new PQ("Font","Helvetica"));this.on("nameChanged",(()=>{this.loadLabelData()})),U&&Q.setValue(U),this.__requestedReRender=!1,this.__needsRender=!1,this.loadLabelData()}__parameterValueChanged(F){super.__parameterValueChanged(F),this.__requestedReRender||(this.__requestedReRender=!0,this.loadLabelData())}loadLabelData(){Promise.all([(()=>new Promise((F=>{const U=this.getParameter("Library").getValue();if(""==U)return void F();if(!Jl.isLibraryFound(U))return console.warn("Label Library not found:",U),void F();const Q=()=>{try{const F=this.getName(),Q=Jl.getLabelText(U,F);this.getParameter("Text").setValue(Q)}catch(F){console.warn(F)}F()};Jl.isLibraryLoaded(U)?Q():Jl.on("labelLibraryLoaded",(F=>{F.library==U&&Q()}))})))(),(()=>new Promise((F=>{if(null!=document.fonts){const U=this.getParameter("Font").getValue(),Q=this.getParameter("FontSize").getValue();document.fonts.load(Q+'px "'+U+'"').then((()=>{F()}))}else F()})))()]).then((()=>{this.__requestedReRender=!1,this.__needsRender=!0,this.__loaded?this.emit("updated",{}):(this.__loaded=!0,this.emit("loaded",{}))}))}renderLabelToImage(){const F=this.__canvasElem.getContext("2d",{alpha:!0});let U=this.getParameter("Text").getValue();""==U&&(U=this.getName());const Q=this.getParameter("Font").getValue(),B=this.getParameter("FontColor").getValue(),l=this.getParameter("FontSize").getValue(),V=this.getParameter("Margin").getValue(),d=this.getParameter("BorderWidth").getValue(),R=this.getParameter("BorderRadius").getValue(),t=this.getParameter("Outline").getValue(),s=this.getParameter("OutlineColor").getValue(),i=this.getParameter("Background").getValue(),e=this.getParameter("BackgroundColor").getValue(),I=this.getParameter("FillBackground").getValue(),Z=this.getParameter("StrokeBackgroundOutline").getValue(),c=V+d,n=U.split("\n");F.font=l+'px "'+Q+'"';let a=0;n.forEach((U=>{a=Math.max(F.measureText(U).width,a)}));const S=l;this.width=Math.ceil(a+2*c),this.height=Math.ceil(S*n.length+2*c),F.canvas.width=this.width,F.canvas.height=this.height,this.__canvasElem.width=this.width,this.__canvasElem.height=this.height,F.fillStyle="rgba(0, 0, 0, 0.0)",F.fillRect(0,0,this.width,this.height),i&&(F.fillStyle=e.toHex(),F.strokeStyle=s.toHex(),function(F,U,Q,B,l,V,d,R,t){if(void 0===R&&(R=!0),void 0===V&&(V=5),"number"==typeof V)V={tl:V,tr:V,br:V,bl:V};else{const F={tl:0,tr:0,br:0,bl:0};for(const U in F)V[U]=V[U]||F[U]}F.beginPath(),F.moveTo(U+V.tl,Q),F.lineTo(U+B-V.tr,Q),F.quadraticCurveTo(U+B,Q,U+B,Q+V.tr),F.lineTo(U+B,Q+l-V.br),F.quadraticCurveTo(U+B,Q+l,U+B-V.br,Q+l),F.lineTo(U+V.bl,Q+l),F.quadraticCurveTo(U,Q+l,U,Q+l-V.bl),F.lineTo(U,Q+V.tl),F.quadraticCurveTo(U,Q,U+V.tl,Q),F.closePath(),d&&F.fill(),R&&(F.lineWidth=t,F.stroke())}(F,d,d,this.width-2*d,this.height-2*d,R,I,Z,d)),F.font=l+'px "'+Q+'"',F.textAlign="left",F.fillStyle=B.toHex(),F.textBaseline="hanging",n.forEach(((U,Q)=>{F.fillText(U,c,c+Q*S)})),t&&(F.strokeStyle=s.toHex(),F.lineWidth=1.5,F.strokeText(U,c,c)),this.__data=F.getImageData(0,0,this.width,this.height),this.__needsRender=!1,this.emit("labelRendered",{width:this.width,height:this.height,data:this.__data})}getParams(){return this.__needsRender&&this.renderLabelToImage(),super.getParams()}toJSON(F){return super.toJSON(F)}fromJSON(F,U){super.fromJSON(F,U),this.__getLabelText()}}PU.register("Label",Xl);class El extends WB{constructor(){super(),this.__loaded=!1}connectWebcam(F,U,Q=!1){const B={width:F,height:U,frameRate:{ideal:60,max:60}};B.facingMode=Q?{exact:"environment"}:{facingMode:"user"};const l=document.createElement("video");l.style.display="none",l.preload="auto",l.crossOrigin="anonymous",document.body.appendChild(l),navigator.mediaDevices.getUserMedia({audio:!1,video:B}).then((F=>{l.srcObject=F,l.onloadedmetadata=F=>{l.play(),this.width=l.videoWidth,this.height=l.videoHeight,console.log("Webcam:["+this.width+", "+this.height+"]"),this.__data=l,this.__loaded=!0,this.emit("loaded",{});let U=0;const Q=()=>{if(l.paused||l.ended)return;const F=Math.floor(60*l.currentTime);U!=F&&(this.emit("updated",{}),U=F),setTimeout(Q,20)};Q()}})).catch((function(F){}))}setVideoStream(F){this.__loaded=!1,this.width=F.videoWidth,this.height=F.videoHeight,this.start(),this.__data=F,this.__loaded=!0,this.emit("loaded",{})}stop(){clearInterval(this.__intervalId)}start(){this.__intervalId=setInterval((()=>{this.emit("updated",{})}),20)}isLoaded(){return this.__loaded}getParams(){return{type:this.type,format:this.format,width:this.width,height:this.height,data:this.__data,flipY:this.getParameter("FlipY").getValue()}}}PU.register("VideoStreamImage2D",El);class Ll extends dB{constructor(F){super(F)}setSrcTree(F,U){this.__srcTree=F;const Q=this.__srcTree.clone(U);Q.getParameter("LocalXfo").setValue(new RQ),this.addChild(Q,!1)}getSrcTree(){return this.__srcTree}readBinary(F,U={}){super.readBinary(F,U);const Q=F.loadStrArray();try{U.resolvePath(Q,(F=>{this.setSrcTree(F,U)}),(F=>{console.warn(`Error loading InstanceItem: ${this.getPath()}, unable to resolve: ${Q}. `+F.message)}))}catch(F){console.warn(`Error loading InstanceItem: ${this.getPath()}: `+F.message)}}toJSON(F={}){return super.toJSON(F)}fromJSON(F,U={},Q){}}PU.register("InstanceItem",Ll);class xl extends dB{constructor(F){super(F),this.overlay=!1,this.__cutAway=!1,this.__cutAwayVector=new qU(1,0,0),this.__cutAwayDist=0,this.__layers=[]}setOverlay(F){this.overlay=F}isOverlay(){return this.overlay}addLayer(F){this.__layers.push(F)}getLayers(){return this.__layers}isCutawayEnabled(){return this.__cutAway}setCutawayEnabled(F){this.__cutAway=F,this.emit("cutAwayChanged",{})}getCutVector(){return this.__cutAwayVector}setCutVector(F){this.__cutAwayVector=F,this.emit("cutAwayChanged",{})}getCutDist(){return this.__cutAwayDist}setCutDist(F){this.__cutAwayDist=F,this.emit("cutAwayChanged",{})}readBinary(F,U){if(super.readBinary(F,U),U.versions["zea-engine"].compare([0,0,4])>=0){const Q=F.loadStr();let B=U.assetItem.getMaterialLibrary().getMaterial(Q,!1);if(B||(B=new EB(Q,"SimpleSurfaceShader"),B.getParameter("BaseColor").loadValue(UQ.random(.25)),U.assetItem.getMaterialLibrary().addMaterial(B)),this.getParameter("Material").loadValue(B),this.__layers=F.loadStrArray(),this.__layers.length>0)for(const F of this.__layers)U.addGeomToLayer(this,F)}}}let ol=!1;class yl extends BB{constructor(F,U,Q){super("CalcGeomMatOperator"),this.addInput(new UB("GlobalXfo")).setParam(F),this.addInput(new UB("GeomOffsetXfo")).setParam(U),this.addOutput(new QB("GeomMat")).setParam(Q)}evaluate(){const F=this.getInput("GlobalXfo").getValue(),U=this.getInput("GeomOffsetXfo").getValue(),Q=this.getOutput("GeomMat"),B=F.toMat4(),l=U.toMat4();Q.setClean(B.multiply(l))}}class ul extends xl{constructor(F,U,Q,B){super(F),this.__geomParam=this.addParameter(new FB("Geometry")),this.listenerIDs={},this.listenerIDs.valueChanged=this.__geomParam.on("valueChanged",(F=>{this._setBoundingBoxDirty(F)})),this.listenerIDs.boundingBoxChanged=this.__geomParam.on("boundingBoxChanged",(F=>{this._setBoundingBoxDirty(F)})),this.__materialParam=this.addParameter(new LB("Material")),this.addParameterDeprecationMapping("material","Material"),this.__geomOffsetXfoParam=this.addParameter(new KQ("GeomOffsetXfo")),this.__geomMatParam=this.addParameter(new DQ("GeomMat")),this.geomIndex=-1,this.assetItem=null,this.calcGeomMatOperator=new yl(this.__globalXfoParam,this.__geomOffsetXfoParam,this.__geomMatParam),U&&this.getParameter("Geometry").loadValue(U),Q&&this.getParameter("Material").loadValue(Q),B&&this.getParameter("LocalXfo").setValue(B)}getGeometry(){return console.warn("deprecated. please use 'getParameter('Geometry').getValue"),this.__geomParam.getValue()}setGeometry(F){console.warn("deprecated. please use 'getParameter('Geometry').setValue"),this.__geomParam.setValue(F)}getGeom(){return console.warn("deprecated. please use 'getParameter('Geometry').getValue"),this.__geomParam.getValue()}setGeom(F){return console.warn("setGeom is deprecated. Please use 'getParameter('Geometry').setValue'"),this.__geomParam.setValue(F)}getMaterial(){return console.warn("deprecated. please use 'getParameter('Material').getValue"),this.__materialParam.getValue()}setMaterial(F){console.warn("deprecated. please use 'getParameter('Material').setValue"),this.__materialParam.setValue(F)}_cleanBoundingBox(F){if(this.disableBoundingBox)return F;if(F=super._cleanBoundingBox(F),this.geomBBox){const U=this.getGeomMat4();F.addPoint(U.transformVec3(this.geomBBox.p0)),F.addPoint(U.transformVec3(this.geomBBox.p1))}else{const U=this.__geomParam.getValue();if(U)if(ol){const Q=this.getGeomMat4();if(U instanceof pB){const B=U.__buffers.attrBuffers.positions.values,l=F=>{const U=3*F;return new qU(B.subarray(U,U+3))};for(let B=0;B<U.getNumVertices();B++)F.addPoint(Q.transformVec3(l(B)))}else{const B=U.getVertexAttribute("positions");for(let l=0;l<U.getNumVertices();l++)F.addPoint(Q.transformVec3(B.getValueRef(l)))}}else F.addBox3(U.getBoundingBox(),this.getGeomMat4())}return F}getGeomOffsetXfo(){return this.__geomOffsetXfoParam.getValue()}setGeomOffsetXfo(F){this.__geomOffsetXfoParam.setValue(F)}getGeomMat4(){return this.__geomMatParam.getValue()}toJSON(F){return super.toJSON(F)}fromJSON(F,U){super.fromJSON(F,U),U.numGeomItems++}readBinary(F,U){super.readBinary(F,U),U.numGeomItems++;const Q=F.loadUInt8(),B=F.loadUInt32(),l=U.assetItem.getGeometryLibrary();this.geomIndex=B,this.assetItem=U.assetItem;const V=l.getGeom(B);if(V)this.getParameter("Geometry").loadValue(V);else{const F=F=>{const{range:Q}=F;if(B>=Q[0]&&B<Q[1]){const F=l.getGeom(B);F?this.getParameter("Geometry").setValue(F):console.warn("Geom not loaded:",this.getName()),l.removeListenerById("rangeLoaded",U)}},U=l.on("rangeLoaded",F)}if(4&Q&&this.__geomOffsetXfoParam.setValue(new RQ(F.loadFloat32Vec3(),F.loadFloat32Quat(),F.loadFloat32Vec3())),U.versions["zea-engine"].compare([0,0,4])<0){if(Q&8){const Q=U.assetItem.getMaterialLibrary(),B=F.loadStr();let l=Q.getMaterial(B);l||(console.warn("Geom :'"+this.name+"' Material not found:"+B),l=Q.getMaterial("Default")),this.getParameter("Material").loadValue(l)}else this.getParameter("Material").loadValue(U.assetItem.getMaterialLibrary().getMaterial("Default"))}U.versions["zea-engine"].compare([3,0,0])<0?F.loadFloat32Vec2():this.geomBBox=new iQ(F.loadFloat32Vec3(),F.loadFloat32Vec3())}toString(){return JSON.stringify(this.toJSON(),null,2)}clone(F){const U=new ul;return U.copyFrom(this,F),U}copyFrom(F,U){if(super.copyFrom(F,U),!F.getParameter("Geometry").getValue()&&-1!=F.geomIndex){const U=F.assetItem.getGeometryLibrary();this.assetItem=F.assetItem,this.geomIndex=F.geomIndex,this.geomBBox=F.geomBBox;const Q=F=>{const{range:Q}=F;if(this.geomIndex>=Q[0]&&this.geomIndex<Q[1]){const F=U.getGeom(this.geomIndex);F?this.getParameter("Geometry").setValue(F):console.warn("Geom not loaded:",this.getName()),U.removeListenerById("rangeLoaded",this.listenerIDs.rangeLoaded)}};this.listenerIDs.rangeLoaded=U.on("rangeLoaded",Q)}this.__geomMatParam.setDirty(this.__cleanGeomMat)}static setCalculatePreciseBoundingBoxes(F){ol=F}}PU.register("GeomItem",ul);class Nl extends nQ{constructor(F){super(),this.units=F?F.units:"meters",this.assets=F?F.assets:{},this.resources=F?F.resources:{},this.versions={},this.url="",this.folder="",this.sdk="",this.assetItem=null,this.numTreeItems=0,this.numGeomItems=0,this.postLoadCallbacks=[],this.asyncCount=0}incrementAsync(){this.asyncCount++}decrementAsync(){this.asyncCount--,0==this.asyncCount&&this.emit("done")}resolvePath(F,U,Q){if(!F)throw new Error("Path not specified");try{const Q=this.assetItem.resolvePath(F);U(Q)}catch(B){this.postLoadCallbacks.push((()=>{try{const Q=this.assetItem.resolvePath(F);U(Q)}catch(F){if(!Q)throw new Error(F.message);Q()}}))}}addPLCB(F){this.postLoadCallbacks.push(F)}}class rl extends dB{constructor(F){super(F),this.searchRoot=null,this.__itemsParam=this.addParameter(new $Q("Items",(F=>F instanceof dB))),this.__itemsParam.on("itemAdded",(F=>{this.__bindItem(F.item,F.index)})),this.__itemsParam.on("itemRemoved",(F=>{this.__unbindItem(F.item,F.index)})),this.__itemsEventHandlers=[]}setSearchRoot(F){this.searchRoot=F}setOwner(F){this.searchRoot&&this.searchRoot!=this.getOwner()||(this.searchRoot=F),super.setOwner(F)}setPaths(F){this.clearItems(!1);this.getOwner();if(null==this.searchRoot)return void console.warn("BaseGroup does not have an owner and so cannot resolve paths:",this.getName());const U=[];F.forEach((F=>{const Q=this.searchRoot.resolvePath(F);Q?U.push(Q):console.warn("Path does not resolve to an Item:",F," group:",this.getName())})),this.setItems(U)}resolveItems(F){this.setPaths(F)}__bindItem(F,U){if(!(F instanceof dB))return;const Q={};Q.pointerDown=F.on("pointerDown",(F=>{this.onPointerDown(F)})),Q.pointerUp=F.on("pointerUp",(F=>{this.onPointerUp(F)})),Q.pointerMove=F.on("pointerMove",(F=>{this.onPointerMove(F)})),Q.pointerEnter=F.on("pointerEnter",(F=>{this.onPointerEnter(F)})),Q.pointerLeave=F.on("pointerLeave",(F=>{this.onPointerLeave(F)})),this.__itemsEventHandlers.splice(U,0,Q)}__unbindItem(F,U){if(!(F instanceof dB))return;const Q=this.__itemsEventHandlers[U];for(key in Q){const F=key.split(".");F.length>1?childItem.getParameter(F[0]).removeListenerById(F[1],Q[key]):childItem.removeListenerById(key,Q[key])}this.__itemsEventHandlers.splice(U,1)}addItem(F,U=!0){F?this.__itemsParam.addItem(F,U):console.warn("Error adding item to group. Item is null")}removeItem(F,U=!0){this.__itemsParam.removeItem(F,U)}clearItems(F=!0){const U=Array.from(this.__itemsParam.getValue());for(let F=U.length-1;F>=0;F--)this.__unbindItem(U[F],F);this.__itemsParam.clearItems(F)}getItems(){return this.__itemsParam.getValue()}setItems(F){this.clearItems(!1),this.__itemsParam.setItems(F)}onPointerDown(F){super.onPointerDown(F)}onPointerUp(F){super.onPointerUp(F)}onPointerMove(F){super.onPointerMove(F)}toJSON(F){const U=super.toJSON(F),Q=Array.from(this.__itemsParam.getValue()),B=[];return Q.forEach((U=>{const Q=U.getPath();B.push(F?F.makeRelative(Q):Q)})),U.treeItems=B,U}fromJSON(F,U){if(super.fromJSON(F,U),!F.treeItems)return void console.warn("Invalid Parameter JSON");if(!U)throw new Error("Unable to load JSON on a BaseGroup without a load context");let Q=F.treeItems.length;const B=F=>{U.resolvePath(F,(F=>{this.addItem(F),Q--,0==Q&&this.__loadDone()}),(U=>{console.warn("BaseGroup: '"+this.getName()+"'. Unable to load item:"+F)}))};for(const U of F.treeItems)B(U)}__loadDone(){}copyFrom(F,U){super.copyFrom(F,U)}}class pl extends rl{constructor(F){super(F),this.listenerIDs={},this.__highlightedParam=this.addParameter(new YQ("Highlighted",!1)),this.__highlightedParam.on("valueChanged",(()=>{this.__updateHighlight()}));const U=this.addParameter(new AQ("HighlightColor",new UQ(.5,.5,1)));this.listenerIDs.valueChanged=U.on("valueChanged",(F=>{this.__updateHighlight()}));this.addParameter(new pQ("HighlightFill",0,[0,1])).on("valueChanged",(()=>{this.__updateHighlight()}))}__updateVisibility(){if(super.__updateVisibility()){const F=this.isVisible();return Array.from(this.__itemsParam.getValue()).forEach((U=>{U instanceof dB&&U.propagateVisibility(F?1:-1)})),!0}return!1}__updateHighlight(){new Promise((F=>{let U,Q=!1;(this.getParameter("Highlighted").getValue()||this.isSelected())&&(Q=!0,U=this.getParameter("HighlightColor").getValue(),U.a=this.getParameter("HighlightFill").getValue());const B="groupItemHighlight"+this.getId();Array.from(this.__itemsParam.getValue()).forEach((F=>{F instanceof dB&&(Q?F.addHighlight(B,U,!0):F.removeHighlight(B,!0))})),F()}))}setSelected(F){super.setSelected(F),this.__updateHighlight()}__bindItem(F,U){super.__bindItem(F,U);const Q=this.__itemsEventHandlers[U];if(F instanceof dB){if(F instanceof dB&&this.getParameter("Highlighted").getValue()){const U=this.getParameter("HighlightColor").getValue();U.a=this.getParameter("HighlightFill").getValue(),F.addHighlight("groupItemHighlight"+this.getId(),U,!0)}this.isVisible()||F.propagateVisibility(-1),F instanceof dB&&(Q["BoundingBox.valueChanged"]=F.getParameter("BoundingBox").on("valueChanged",(F=>{this._setBoundingBoxDirty(F)})))}}__unbindItem(F,U){super.__unbindItem(F,U),F instanceof dB&&(this.getParameter("Highlighted").getValue()&&F.removeHighlight("groupItemHighlight"+this.getId(),!0),this.isVisible()||F.propagateVisibility(1),F.traverse((F=>{F instanceof xl&&F.setCutawayEnabled(!1)}),!0))}clone(F){const U=new pl;return U.copyFrom(this,F),U}}PU.register("SelectionSet",pl);var Tl=IB("Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwohZnVuY3Rpb24oKXsidXNlIHN0cmljdCI7Y2xhc3MgdHtzdGF0aWMgcmVwbGFjZUFsbCh0LGUscyl7cmV0dXJuIHQucmVwbGFjZShuZXcgUmVnRXhwKGUsImciKSxzKX1zdGF0aWMgc3RyaW5naWZ5SlNPTldpdGhGaXhlZFByZWNpc2lvbih0LGU9MCxzPTUpe3JldHVybiBKU09OLnN0cmluZ2lmeSh0LCgodCxlKT0+ZSYmZS50b0ZpeGVkP051bWJlcihlLnRvRml4ZWQocykpOmUpLGUpfXN0YXRpYyBoYXNoU3RyKHQpe2xldCBlLHMsYSxpPTA7aWYoMD09PXQubGVuZ3RoKXJldHVybiBpO2ZvcihlPTAsYT10Lmxlbmd0aDtlPGE7ZSsrKXM9dC5jaGFyQ29kZUF0KGUpLGk9KGk8PDUpLWkrcyxpfD0wO3JldHVybiBNYXRoLmFicyhpKX19Y2xhc3MgZXtpc1ZhbGlkKCl7Zm9yKGNvbnN0IHQgb2YgdGhpcy5fX2RhdGEpaWYodD09MS8wfHxpc05hTih0KSlyZXR1cm4hMTtyZXR1cm4hMH1zdGF0aWMgY3JlYXRlRnJvbUZsb2F0MzJCdWZmZXIodCxlKXt0aHJvdyBuZXcgRXJyb3IoIk5vdCB5ZXQgaW1wbGVtZW50ZWQgZm9yIHRoaXMgdHlwZToiK3RoaXMuY29uc3RydWN0b3IubmFtZSl9c3RhdGljIGNyZWF0ZUZyb21CdWZmZXIodCxlKXt0aHJvdyBuZXcgRXJyb3IoIk5vdCB5ZXQgaW1wbGVtZW50ZWQgZm9yIHRoaXMgdHlwZToiK3RoaXMuY29uc3RydWN0b3IubmFtZSl9c3RhdGljIG51bUVsZW1lbnRzKCl7dGhyb3cgbmV3IEVycm9yKCJOb3QgeWV0IGltcGxlbWVudGVkIGZvciB0aGlzIHR5cGU6Iit0aGlzLmNvbnN0cnVjdG9yLm5hbWUpfWFzQXJyYXkoKXtyZXR1cm4gdGhpcy5fX2RhdGF9dG9TdHJpbmcoKXtyZXR1cm4gdC5zdHJpbmdpZnlKU09OV2l0aEZpeGVkUHJlY2lzaW9uKHRoaXMudG9KU09OKCkpfXRvSlNPTigpe3Rocm93IG5ldyBFcnJvcigiTm90IHlldCBpbXBsZW1lbnRlZCBmb3IgdGhpcyB0eXBlOiIrdGhpcy5jb25zdHJ1Y3Rvci5uYW1lKX19Y2xhc3Mgc3tzdGF0aWMgcmFkVG9EZWcodCl7cmV0dXJuIHQvKE1hdGguUEkvMTgwKX1zdGF0aWMgZGVnVG9SYWQodCl7cmV0dXJuIHQqKE1hdGguUEkvMTgwKX1zdGF0aWMgaXNOdW1lcmljKHQpe3JldHVybiFpc05hTihwYXJzZUZsb2F0KHQpKSYmaXNGaW5pdGUodCl9c3RhdGljIHJhbmRvbUludCh0LGUpe3JldHVybiB0PU1hdGguY2VpbCh0KSxlPU1hdGguZmxvb3IoZSksTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKihlLXQpKSt0fXN0YXRpYyBsZXJwKHQsZSxzKXtyZXR1cm4gdCtzKihlLXQpfXN0YXRpYyBjbGFtcCh0LGUscyl7cmV0dXJuIE1hdGgubWluKE1hdGgubWF4KHQsZSkscyl9c3RhdGljIG5lYXJlc3RQb3cyKHQpe3JldHVybiBNYXRoLnBvdygyLE1hdGgucm91bmQoTWF0aC5sb2codCkvTWF0aC5sb2coMikpKX1zdGF0aWMgbmVhcmVzdFBvdzEwKHQpe3JldHVybiBNYXRoLnBvdygxMCxNYXRoLnJvdW5kKE1hdGgubG9nMTAodCkvTWF0aC5sb2cxMCgxMCkpKX1zdGF0aWMgbmV4dFBvdzIodCl7aWYoMD09dGhpcy5mcmFjdChNYXRoLmxvZzIodCkpKXJldHVybiB0O2xldCBlPTA7Zm9yKDt0PjA7KWUrKyx0Pj49MTtyZXR1cm4gMTw8ZX1zdGF0aWMgZnJhY3QodCl7cmV0dXJuIDA9PXQ/MDp0PDA/dD4tMT8tdDotdCVNYXRoLmZsb29yKC10KTp0PDE/dDp0JU1hdGguZmxvb3IodCl9c3RhdGljIHJlbWFwKHQsZSxzLGEsaSl7cmV0dXJuIGErKHQtZSkvKHMtZSkqKGktYSl9c3RhdGljIHNtb290aFN0ZXAodCxlLHMpe2NvbnN0IGE9dGhpcy5jbGFtcCgocy10KS8oZS10KSwwLDEpO3JldHVybiBhKmEqKDMtMiphKX1zdGF0aWMgbGluU3RlcCh0LGUscyl7cmV0dXJuIHRoaXMuY2xhbXAoKHMtdCkvKGUtdCksMCwxKX1zdGF0aWMgZGVjb2RlMTZCaXRGbG9hdEZyb20yeFVJbnQ4KHQpe2NvbnN0IGU9dFswXSxzPSgxMjAmZSk+PjM7bGV0IGE9MD09cz8wOjIwNDg7Y29uc3QgaT1hKygoNyZlKTw8OCkrdFsxXTthPTA9PXM/MTowO3JldHVybigxMjgmZT8xOi0xKSppKk1hdGgucG93KDIscythLTE2KX1zdGF0aWMgZW5jb2RlMTZCaXRGbG9hdEludG8yeFVJbnQ4KHQpe2NvbnN0IGU9bmV3IFVpbnQ4QXJyYXkoMikscz10Pj0wPzEyODowO3Q9TWF0aC5hYnModCk7bGV0IGEsaT0xNSxyPTEwMjQ7Zm9yKGxldCBlPTE1O2U+MDtlLS0pdDxyJiYoci89MixpLS0pO2E9MD09aT90L3IvMjoodC1yKS9yO2NvbnN0IG49TWF0aC5yb3VuZCgyMDQ4KmEpLGg9bi8yNTYsbz1uLTI1NipoO3JldHVybiBlWzBdPXMrOCppK2gsZVsxXT1vLHQ+PTIwNDgmJihlWzBdPTI1NSksZX1zdGF0aWMgZW5jb2RlMTZCaXRGbG9hdCh0KXtjb25zdCBlPW5ldyBGbG9hdDMyQXJyYXkoMSk7ZVswXT10O3JldHVybih0PT57bGV0IGU9dD4+MTYmMzI3Njgscz10Pj4xMiYyMDQ3O2NvbnN0IGE9dD4+MjMmMjU1O3JldHVybiBhPDEwMz9lOmE+MTQyPyhlfD0zMTc0NCxlfD0oMjU1PT1hPzA6MSkmJjgzODg2MDcmdCxlKTphPDExMz8oc3w9MjA0OCxlfD0ocz4+MTE0LWEpKyhzPj4xMTMtYSYxKSxlKTooZXw9YS0xMTI8PDEwfHM+PjEsZSs9MSZzLGUpfSkobmV3IEludDMyQXJyYXkoZS5idWZmZXIpWzBdKX1zdGF0aWMgZGVjb2RlMTZCaXRGbG9hdCh0KXtjb25zdCBlPSgzMjc2OCZ0KT4+MTUscz0oMzE3NDQmdCk+PjEwLGE9MTAyMyZ0O3JldHVybiAwPT1zPyhlPy0xOjEpKk1hdGgucG93KDIsLTE0KSooYS9NYXRoLnBvdygyLDEwKSk6MzE9PXM/YT9OYU46MS8wKihlPy0xOjEpOihlPy0xOjEpKk1hdGgucG93KDIscy0xNSkqKDErYS9NYXRoLnBvdygyLDEwKSl9c3RhdGljIGNvbnZlcnRGbG9hdDMyQXJyYXlUb1VJbnQxNkFycmF5KHQpe2NvbnN0IGU9bmV3IFVpbnQxNkFycmF5KHQubGVuZ3RoKSxzPW5ldyBJbnQzMkFycmF5KHQuYnVmZmVyKSxhPXQ9PntsZXQgZT10Pj4xNiYzMjc2OCxzPXQ+PjEyJjIwNDc7Y29uc3QgYT10Pj4yMyYyNTU7cmV0dXJuIGE8MTAzP2U6YT4xNDI/KGV8PTMxNzQ0LGV8PSgyNTU9PWE/MDoxKSYmODM4ODYwNyZ0LGUpOmE8MTEzPyhzfD0yMDQ4LGV8PShzPj4xMTQtYSkrKHM+PjExMy1hJjEpLGUpOihlfD1hLTExMjw8MTB8cz4+MSxlKz0xJnMsZSl9O2ZvcihsZXQgaT0wO2k8dC5sZW5ndGg7aSsrKWVbaV09YShzW2ldKTtyZXR1cm4gZX19bGV0IGE9e30saT17fSxyPVtdO2NvbnN0IG49KHQsZSk9PntpZihhW3RdKXJldHVybiB2b2lkIGNvbnNvbGUud2FybihgVGhlcmUncyBhIGNsYXNzIHJlZ2lzdGVyZWQgd2l0aCAnJHt0fScgbmFtZWApO2FbdF09e2JsdWVwcmludDplLGNhbGxiYWNrczpbXX07Y29uc3Qgcz1yLmxlbmd0aDtyLnB1c2goZSksaVtzXT10fSxoPXQ9PntpZihhW3RdKXJldHVybiBhW3RdLmJsdWVwcmludDt0aHJvdyBuZXcgRXJyb3IodCsiIGJsdWVwcmludCBpcyBub3QgcmVnaXN0ZXJlZCIpfSxvPXQ9PntsZXQgZT10LHM9dDsib2JqZWN0Ij09dHlwZW9mIHQmJihlPXQuY29uc3RydWN0b3Iscz1lLm5hbWUpO2NvbnN0IGE9ci5pbmRleE9mKGUpO2lmKGE+PTAmJmlbYV0pcmV0dXJuIGlbYV07dGhyb3cgbmV3IEVycm9yKHMrIiBibHVlcHJpbnQgaXMgbm90IHJlZ2lzdGVyZWQiKX0sXz0odCwuLi5lKT0+e2NvbnN0IHM9YVt0XTtpZighcyl0aHJvdyBuZXcgRXJyb3IodCsiIGJsdWVwcmludCBpcyBub3QgcmVnaXN0ZXJlZCIpO3JldHVybiBuZXcgcy5ibHVlcHJpbnQoLi4uZSl9O24oIlVJbnQ4IiwwKSxuKCJTSW50OCIsMSksbigiVUludDE2IiwyKSxuKCJTSW50MTYiLDMpLG4oIlVJbnQzMiIsNCksbigiU0ludDMyIiw1KSxuKCJGbG9hdDMyIiw2KTtjbGFzcyBkIGV4dGVuZHMgZXtjb25zdHJ1Y3Rvcih0PTAsZT0wKXtpZihzdXBlcigpLHQgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXl8fHQgaW5zdGFuY2VvZiBVaW50MzJBcnJheXx8dCBpbnN0YW5jZW9mIEludDMyQXJyYXkpdGhpcy5fX2RhdGE9dDtlbHNlIGlmKHQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcil7Y29uc29sZS53YXJuKCJkZXByZWNhdGVkLCBwbGVhc2UgdXNlIG5ldyBWZWM0KG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCA0KSkiKTtjb25zdCBzPXQsYT1lO3RoaXMuX19kYXRhPW5ldyBGbG9hdDMyQXJyYXkocyxhLDIpfWVsc2UgbnVsbCE9dCYmIm9iamVjdCI9PXR5cGVvZiB0Pyh0aGlzLl9fZGF0YT1uZXcgRmxvYXQzMkFycmF5KDIpLHRoaXMuZnJvbUpTT04odCkpOih0aGlzLl9fZGF0YT1uZXcgRmxvYXQzMkFycmF5KDIpLHRoaXMuX19kYXRhWzBdPXQsdGhpcy5fX2RhdGFbMV09ZSl9Z2V0IHgoKXtyZXR1cm4gdGhpcy5fX2RhdGFbMF19c2V0IHgodCl7dGhpcy5fX2RhdGFbMF09dH1nZXQgeSgpe3JldHVybiB0aGlzLl9fZGF0YVsxXX1zZXQgeSh0KXt0aGlzLl9fZGF0YVsxXT10fXNldCh0LGUpe3RoaXMuX19kYXRhWzBdPXQsdGhpcy5fX2RhdGFbMV09ZX1zZXRGcm9tT3RoZXIodCl7dGhpcy54PXQueCx0aGlzLnk9dC55fWVxdWFsKHQpe3JldHVybiBjb25zb2xlLndhcm4oIkRlcHJlY2F0ZWQuIFVzZSAjaXNFcXVhbCBpbnN0ZWFkLiIpLHRoaXMuaXNFcXVhbCh0KX1pc0VxdWFsKHQpe3JldHVybiB0aGlzLng9PXQueCYmdGhpcy55PT10Lnl9bm90RXF1YWxzKHQpe3JldHVybiBjb25zb2xlLndhcm4oIkRlcHJlY2F0ZWQuIFVzZSAjbm90RXF1YWwgaW5zdGVhZC4iKSx0aGlzLm5vdEVxdWFsKHQpfW5vdEVxdWFsKHQpe3JldHVybiB0aGlzLnghPXQueCYmdGhpcy55IT10Lnl9YXBwcm94RXF1YWwodCxlPU51bWJlci5FUFNJTE9OKXtyZXR1cm4gTWF0aC5hYnModGhpcy54LXQueCk8ZSYmTWF0aC5hYnModGhpcy55LXQueSk8ZX1hZGQodCl7cmV0dXJuIG5ldyBkKHRoaXMueCt0LngsdGhpcy55K3QueSl9YWRkSW5QbGFjZSh0KXt0aGlzLngrPXQueCx0aGlzLnkrPXQueX1zdWJ0cmFjdCh0KXtyZXR1cm4gbmV3IGQodGhpcy54LXQueCx0aGlzLnktdC55KX1zdWJ0cmFjdEluUGxhY2UodCl7cmV0dXJuIHRoaXMueC09dC54LHRoaXMueS09dC55LHRoaXN9c2NhbGUodCl7cmV0dXJuIG5ldyBkKHRoaXMueCp0LHRoaXMueSp0KX1zY2FsZUluUGxhY2UodCl7dGhpcy54Kj10LHRoaXMueSo9dH1pbnZlcnQoKXtyZXR1cm4gbmV3IGQoMS90aGlzLngsMS90aGlzLnkpfWludmVydEluUGxhY2UoKXtyZXR1cm4gdGhpcy54PTEvdGhpcy54LHRoaXMueT0xL3RoaXMueSx0aGlzfW11bHRpcGx5KHQpe3JldHVybiBuZXcgZCh0aGlzLngqdC54LHRoaXMueSp0LnkpfW11bHRpcGx5SW5QbGFjZSh0KXt0aGlzLngqPXQueCx0aGlzLnkqPXQueX1sZW5ndGhTcXVhcmVkKCl7Y29uc3QgdD10aGlzLl9fZGF0YVswXSxlPXRoaXMuX19kYXRhWzFdO3JldHVybiB0KnQrZSplfWxlbmd0aCgpe3JldHVybiBNYXRoLnNxcnQodGhpcy5sZW5ndGhTcXVhcmVkKCkpfWRpc3RhbmNlVG8odCl7Y29uc3QgZT10aGlzLl9fZGF0YVswXS10Lngscz10aGlzLl9fZGF0YVsxXS10Lnk7cmV0dXJuIE1hdGguc3FydChlKmUrcypzKX1ub3JtYWxpemUoKXtjb25zdCB0PXRoaXMuX19kYXRhWzBdLGU9dGhpcy5fX2RhdGFbMV07bGV0IHM9dCp0K2UqZTtyZXR1cm4gczxOdW1iZXIuRVBTSUxPTj9uZXcgZDoocz0xL01hdGguc3FydChzKSxuZXcgZCh0KnMsZSpzKSl9bm9ybWFsaXplSW5QbGFjZSgpe2NvbnN0IHQ9dGhpcy5fX2RhdGFbMF0sZT10aGlzLl9fZGF0YVsxXTtsZXQgcz10KnQrZSplO3M8TnVtYmVyLkVQU0lMT058fChzPTEvTWF0aC5zcXJ0KHMpLHRoaXMuc2V0KHQqcyxlKnMpKX1kb3QodCl7cmV0dXJuIHRoaXMueCp0LngrdGhpcy55KnQueX1jcm9zcyh0KXtyZXR1cm4gdGhpcy54KnQueS10aGlzLnkqdC54fWFuZ2xlVG8odCl7Y29uc3QgZT10aGlzLm5vcm1hbGl6ZSgpLmRvdCh0Lm5vcm1hbGl6ZSgpKTtyZXR1cm4gZT4xPzA6ZTwtMT9NYXRoLlBJOk1hdGguYWNvcyhlKX1zaWduZWRBbmdsZVRvKHQpe2NvbnN0IGU9dGhpcy5hbmdsZVRvKHQpO3JldHVybiB0aGlzLmNyb3NzKHQpPDA/LWU6ZX1yb3RhdGUodCl7Y29uc3QgZT1NYXRoLmNvcyh0KSxzPU1hdGguc2luKHQpO3JldHVybiBuZXcgZCh0aGlzLngqZS10aGlzLnkqcyx0aGlzLngqcyt0aGlzLnkqZSl9bGVycCh0LGUpe2NvbnN0IHM9dGhpcy54LGE9dGhpcy55O3JldHVybiBuZXcgZChzK2UqKHQueC1zKSxhK2UqKHQueS1hKSl9c2V0UmFuZG9tRGlyKHQ9MSl7Y29uc3QgZT0yKk1hdGgucmFuZG9tKCkqTWF0aC5QSTtyZXR1cm4gdGhpcy5fX2RhdGFbMF09TWF0aC5jb3MoZSkqelNjYWxlLHRoaXMuX19kYXRhWzFdPU1hdGguc2luKGUpKnpTY2FsZSx0aGlzfXNldFJhbmRvbSh0PTEpe3JldHVybiB0aGlzLl9fZGF0YVswXT1NYXRoLnJhbmRvbSgpKnQsdGhpcy5fX2RhdGFbMV09TWF0aC5yYW5kb20oKSp0LHRoaXN9Y2xvbmUoKXtyZXR1cm4gbmV3IGQodGhpcy5fX2RhdGFbMF0sdGhpcy5fX2RhdGFbMV0pfWFzQXJyYXkoKXtyZXR1cm4gdGhpcy5fX2RhdGF9c3RhdGljIGNyZWF0ZSguLi50KXtyZXR1cm4gbmV3IGQoLi4udCl9c3RhdGljIGNyZWF0ZUZyb21GbG9hdDMyQnVmZmVyKHQsZT0wKXtyZXR1cm4gY29uc29sZS53YXJuKCJEZXByZWNhdGVkLCB1c2UgI2NyZWF0ZUZyb21CdWZmZXIgaW5zdGVhZCIpLHRoaXMuY3JlYXRlRnJvbUJ1ZmZlcih0LDQqZSl9c3RhdGljIGNyZWF0ZUZyb21CdWZmZXIodCxlKXtyZXR1cm4gbmV3IGQobmV3IEZsb2F0MzJBcnJheSh0LGUsMikpfXN0YXRpYyBjcmVhdGVGcm9tRmxvYXQzMkFycmF5KHQpe3JldHVybiBuZXcgZCh0KX1zdGF0aWMgbnVtRWxlbWVudHMoKXtyZXR1cm4gMn10b0pTT04oKXtyZXR1cm57eDp0aGlzLngseTp0aGlzLnl9fWZyb21KU09OKHQpe3RoaXMueD10LngsdGhpcy55PXQueX1yZWFkQmluYXJ5KHQpe3RoaXMueD10LmxvYWRGbG9hdDMyKCksdGhpcy55PXQubG9hZEZsb2F0MzIoKX1zdGF0aWMgaW50ZXJzZWN0aW9uT2ZMaW5lcyh0LGUscyxhKXtjb25zdCBpPSh0LngtZS54KSoocy55LWEueSktKHQueS1lLnkpKihzLngtYS54KTtpZigwPT1pKXJldHVybiBudWxsO2NvbnN0IHI9dC54KmUueS10LnkqZS54LG49cy54KmEueS1zLnkqYS54LGg9cy54LWEueCxvPXQueC1lLngsXz1zLnktYS55LGw9dC55LWUueTtyZXR1cm4gbmV3IGQoKHIqaC1vKm4pL2ksKHIqXy1sKm4pL2kpfX1uKCJWZWMyIixkKTtjbGFzcyBsIGV4dGVuZHMgZXtjb25zdHJ1Y3Rvcih0PTAsZT0wLHM9MCl7aWYoc3VwZXIoKSx0IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5fHx0IGluc3RhbmNlb2YgVWludDMyQXJyYXkpdGhpcy5fX2RhdGE9dDtlbHNlIGlmKHQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcil7Y29uc29sZS53YXJuKCJkZXByZWNhdGVkLCBwbGVhc2UgdXNlIG5ldyBWZWMzKG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCAzKSkiKTtjb25zdCBzPXQsYT1lO3RoaXMuX19kYXRhPW5ldyBGbG9hdDMyQXJyYXkocyxhLDMpfWVsc2UgbnVsbCE9dCYmIm9iamVjdCI9PXR5cGVvZiB0Pyh0aGlzLl9fZGF0YT1uZXcgRmxvYXQzMkFycmF5KDMpLHRoaXMuZnJvbUpTT04odCkpOih0aGlzLl9fZGF0YT1uZXcgRmxvYXQzMkFycmF5KDMpLHRoaXMuX19kYXRhWzBdPXQsdGhpcy5fX2RhdGFbMV09ZSx0aGlzLl9fZGF0YVsyXT1zKX1nZXQgeCgpe3JldHVybiB0aGlzLl9fZGF0YVswXX1zZXQgeCh0KXt0aGlzLl9fZGF0YVswXT10fWdldCB5KCl7cmV0dXJuIHRoaXMuX19kYXRhWzFdfXNldCB5KHQpe3RoaXMuX19kYXRhWzFdPXR9Z2V0IHooKXtyZXR1cm4gdGhpcy5fX2RhdGFbMl19c2V0IHoodCl7dGhpcy5fX2RhdGFbMl09dH1nZXQgeHkoKXtyZXR1cm4gbmV3IGQodGhpcy5fX2RhdGFbMF0sdGhpcy5fX2RhdGFbMV0pfWdldCB5eigpe3JldHVybiBuZXcgZCh0aGlzLl9fZGF0YVsxXSx0aGlzLl9fZGF0YVsyXSl9c2V0KHQsZSxzKXt0aGlzLng9dCx0aGlzLnk9dm9pZCAwIT09ZT9lOnQsdGhpcy56PXZvaWQgMCE9PXM/czp0fXNldERhdGFBcnJheSh0KXt0aGlzLl9fZGF0YT10fXNldEZyb21PdGhlcih0KXt0aGlzLng9dC54LHRoaXMueT10LnksdGhpcy56PXQuen1pc051bGwoKXtyZXR1cm4gTWF0aC5hYnModGhpcy54KTxOdW1iZXIuRVBTSUxPTiYmTWF0aC5hYnModGhpcy55KTxOdW1iZXIuRVBTSUxPTiYmTWF0aC5hYnModGhpcy56KTxOdW1iZXIuRVBTSUxPTn1pczExMSgpe3JldHVybiBNYXRoLmFicygxLXRoaXMueCk8TnVtYmVyLkVQU0lMT04mJk1hdGguYWJzKDEtdGhpcy55KTxOdW1iZXIuRVBTSUxPTiYmTWF0aC5hYnMoMS10aGlzLnopPE51bWJlci5FUFNJTE9OfWVxdWFsKHQpe3JldHVybiBjb25zb2xlLndhcm4oIkRlcHJlY2F0ZWQuIFVzZSAjaXNFcXVhbCBpbnN0ZWFkLiIpLHRoaXMuaXNFcXVhbCh0KX1pc0VxdWFsKHQpe3JldHVybiB0aGlzLng9PXQueCYmdGhpcy55PT10LnkmJnRoaXMuej09dC56fW5vdEVxdWFscyh0KXtyZXR1cm4gY29uc29sZS53YXJuKCJEZXByZWNhdGVkLiBVc2UgI25vdEVxdWFsIGluc3RlYWQuIiksdGhpcy5ub3RFcXVhbCh0KX1ub3RFcXVhbCh0KXtyZXR1cm4gdGhpcy54IT10LngmJnRoaXMueSE9dC55JiZ0aGlzLnohPXQuen1hcHByb3hFcXVhbCh0LGU9TnVtYmVyLkVQU0lMT04pe3JldHVybiBNYXRoLmFicyh0aGlzLngtdC54KTxlJiZNYXRoLmFicyh0aGlzLnktdC55KTxlJiZNYXRoLmFicyh0aGlzLnotdC56KTxlfWFkZCh0KXtyZXR1cm4gbmV3IGwodGhpcy54K3QueCx0aGlzLnkrdC55LHRoaXMueit0LnopfWFkZEluUGxhY2UodCl7dGhpcy54Kz10LngsdGhpcy55Kz10LnksdGhpcy56Kz10Lnp9c3VidHJhY3QodCl7cmV0dXJuIG5ldyBsKHRoaXMueC10LngsdGhpcy55LXQueSx0aGlzLnotdC56KX1zdWJ0cmFjdEluUGxhY2UodCl7dGhpcy54LT10LngsdGhpcy55LT10LnksdGhpcy56LT10Lnp9bXVsdGlwbHkodCl7cmV0dXJuIG5ldyBsKHRoaXMueCp0LngsdGhpcy55KnQueSx0aGlzLnoqdC56KX1tdWx0aXBseUluUGxhY2UodCl7dGhpcy54Kj10LngsdGhpcy55Kj10LnksdGhpcy56Kj10Lnp9ZGl2aWRlKHQpe3JldHVybiBuZXcgbCh0aGlzLngvdC54LHRoaXMueS90LnksdGhpcy56L3Queil9ZGl2aWRlSW5QbGFjZSh0KXt0aGlzLngvPXQueCx0aGlzLnkvPXQueSx0aGlzLnovPXQuen1zY2FsZSh0KXtyZXR1cm4gbmV3IGwodGhpcy54KnQsdGhpcy55KnQsdGhpcy56KnQpfXNjYWxlSW5QbGFjZSh0KXt0aGlzLngqPXQsdGhpcy55Kj10LHRoaXMueio9dH1uZWdhdGUoKXtyZXR1cm4gbmV3IGwoLXRoaXMueCwtdGhpcy55LC10aGlzLnopfWludmVyc2UoKXtyZXR1cm4gbmV3IGwoMS90aGlzLngsMS90aGlzLnksMS90aGlzLnopfWxlbmd0aFNxdWFyZWQoKXtjb25zdCB0PXRoaXMuX19kYXRhWzBdLGU9dGhpcy5fX2RhdGFbMV0scz10aGlzLl9fZGF0YVsyXTtyZXR1cm4gdCp0K2UqZStzKnN9bGVuZ3RoKCl7cmV0dXJuIE1hdGguc3FydCh0aGlzLmxlbmd0aFNxdWFyZWQoKSl9ZGlzdGFuY2VUbyh0KXtjb25zdCBlPXRoaXMuX19kYXRhWzBdLXQueCxzPXRoaXMuX19kYXRhWzFdLXQueSxhPXRoaXMuX19kYXRhWzJdLXQuejtyZXR1cm4gTWF0aC5zcXJ0KGUqZStzKnMrYSphKX1ub3JtYWxpemUoKXtsZXQgdD10aGlzLl9fZGF0YVswXSp0aGlzLl9fZGF0YVswXSt0aGlzLl9fZGF0YVsxXSp0aGlzLl9fZGF0YVsxXSt0aGlzLl9fZGF0YVsyXSp0aGlzLl9fZGF0YVsyXTtyZXR1cm4gdDxOdW1iZXIuRVBTSUxPTj9uZXcgbDoodD0xL01hdGguc3FydCh0KSxuZXcgbCh0aGlzLl9fZGF0YVswXSp0LHRoaXMuX19kYXRhWzFdKnQsdGhpcy5fX2RhdGFbMl0qdCkpfW5vcm1hbGl6ZUluUGxhY2UoKXtsZXQgdD10aGlzLl9fZGF0YVswXSp0aGlzLl9fZGF0YVswXSt0aGlzLl9fZGF0YVsxXSp0aGlzLl9fZGF0YVsxXSt0aGlzLl9fZGF0YVsyXSp0aGlzLl9fZGF0YVsyXTtpZih0PE51bWJlci5FUFNJTE9OKXJldHVybjt0PU1hdGguc3FydCh0KTtjb25zdCBlPTEvdDtyZXR1cm4gdGhpcy5fX2RhdGFbMF0qPWUsdGhpcy5fX2RhdGFbMV0qPWUsdGhpcy5fX2RhdGFbMl0qPWUsdH1yZXNpemUodCl7Y29uc3QgZT10aGlzLl9fZGF0YVswXSp0aGlzLl9fZGF0YVswXSt0aGlzLl9fZGF0YVsxXSp0aGlzLl9fZGF0YVsxXSt0aGlzLl9fZGF0YVsyXSp0aGlzLl9fZGF0YVsyXTtpZihlPE51bWJlci5FUFNJTE9OKXJldHVybjtjb25zdCBzPXQvTWF0aC5zcXJ0KGUpO3JldHVybiBuZXcgbCh0aGlzLl9fZGF0YVswXSpzLHRoaXMuX19kYXRhWzFdKnMsdGhpcy5fX2RhdGFbMl0qcyl9cmVzaXplSW5QbGFjZSh0KXtjb25zdCBlPXRoaXMuX19kYXRhWzBdKnRoaXMuX19kYXRhWzBdK3RoaXMuX19kYXRhWzFdKnRoaXMuX19kYXRhWzFdK3RoaXMuX19kYXRhWzJdKnRoaXMuX19kYXRhWzJdO2lmKGU8TnVtYmVyLkVQU0lMT04pcmV0dXJuO2NvbnN0IHM9dC9NYXRoLnNxcnQoZSk7dGhpcy5fX2RhdGFbMF0qPXMsdGhpcy5fX2RhdGFbMV0qPXMsdGhpcy5fX2RhdGFbMl0qPXN9ZG90KHQpe3JldHVybiB0aGlzLngqdC54K3RoaXMueSp0LnkrdGhpcy56KnQuen1jcm9zcyh0KXtjb25zdCBlPXRoaXMueCxzPXRoaXMueSxhPXRoaXMueixpPXQueCxyPXQueSxuPXQuejtyZXR1cm4gbmV3IGwocypuLWEqcixhKmktZSpuLGUqci1zKmkpfWFuZ2xlVG8odCl7Y29uc3QgZT10aGlzLmRvdCh0KTtyZXR1cm4gZT4xPzA6TWF0aC5hY29zKGUpfWxlcnAodCxlKXtjb25zdCBzPXRoaXMueCxhPXRoaXMueSxpPXRoaXMuejtyZXR1cm4gbmV3IGwocytlKih0LngtcyksYStlKih0LnktYSksaStlKih0LnotaSkpfWFicygpe3JldHVybiBuZXcgbChNYXRoLmFicyh0aGlzLngpLE1hdGguYWJzKHRoaXMueSksTWF0aC5hYnModGhpcy56KSl9c2V0UmFuZG9tRGlyKHQ9MSl7Y29uc3QgZT0yKk1hdGgucmFuZG9tKCkqTWF0aC5QSSxzPTIqTWF0aC5yYW5kb20oKS0xLGE9TWF0aC5zcXJ0KDEtcypzKSp0O3JldHVybiB0aGlzLl9fZGF0YVswXT1NYXRoLmNvcyhlKSphLHRoaXMuX19kYXRhWzFdPU1hdGguc2luKGUpKmEsdGhpcy5fX2RhdGFbMl09cyp0LHRoaXN9c2V0UmFuZG9tKHQ9MSl7cmV0dXJuIHRoaXMuX19kYXRhWzBdPShNYXRoLnJhbmRvbSgpLS41KSp0LHRoaXMuX19kYXRhWzFdPShNYXRoLnJhbmRvbSgpLS41KSp0LHRoaXMuX19kYXRhWzJdPShNYXRoLnJhbmRvbSgpLS41KSp0LHRoaXN9Y2xvbmUoKXtyZXR1cm4gbmV3IGwodGhpcy5fX2RhdGFbMF0sdGhpcy5fX2RhdGFbMV0sdGhpcy5fX2RhdGFbMl0pfWFzQXJyYXkoKXtyZXR1cm4gdGhpcy5fX2RhdGF9c3RhdGljIGNyZWF0ZSguLi50KXtyZXR1cm4gbmV3IGwoLi4udCl9c3RhdGljIGNyZWF0ZUZyb21KU09OKHQpe2NvbnN0IGU9bmV3IGw7cmV0dXJuIGUuZnJvbUpTT04odCksZX1zdGF0aWMgY3JlYXRlRnJvbUZsb2F0MzJCdWZmZXIodCxlPTApe3JldHVybiBjb25zb2xlLndhcm4oIkRlcHJlY2F0ZWQsIHVzZSAjY3JlYXRlRnJvbUJ1ZmZlciBpbnN0ZWFkIiksdGhpcy5jcmVhdGVGcm9tQnVmZmVyKHQsNCplKX1zdGF0aWMgY3JlYXRlRnJvbUJ1ZmZlcih0LGUpe3JldHVybiBuZXcgbChuZXcgRmxvYXQzMkFycmF5KHQsZSwzKSl9c3RhdGljIGNyZWF0ZUZyb21GbG9hdDMyQXJyYXkodCl7cmV0dXJuIG5ldyBsKHQpfXN0YXRpYyBudW1FbGVtZW50cygpe3JldHVybiAzfXRvSlNPTigpe3JldHVybnt4OnRoaXMueCx5OnRoaXMueSx6OnRoaXMuen19ZnJvbUpTT04odCl7dGhpcy54PXQueCx0aGlzLnk9dC55LHRoaXMuej10Lnp9cmVhZEJpbmFyeSh0KXt0aGlzLng9dC5sb2FkRmxvYXQzMigpLHRoaXMueT10LmxvYWRGbG9hdDMyKCksdGhpcy56PXQubG9hZEZsb2F0MzIoKX19bigiVmVjMyIsbCk7Y2xhc3MgYyBleHRlbmRzIGV7Y29uc3RydWN0b3IodD0wLGU9MCxzPTAsYT0wKXtpZihzdXBlcigpLHQgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXl8fHQgaW5zdGFuY2VvZiBVaW50MzJBcnJheSl0aGlzLl9fZGF0YT10O2Vsc2UgaWYodCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXtjb25zb2xlLndhcm4oImRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgbmV3IFZlYzQobmV3IEZsb2F0MzJBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIDQpKSIpO2NvbnN0IHM9dCxhPWU7dGhpcy5fX2RhdGE9bmV3IEZsb2F0MzJBcnJheShzLGEsNCl9ZWxzZSBudWxsIT10JiYib2JqZWN0Ij09dHlwZW9mIHQ/KHRoaXMuX19kYXRhPW5ldyBGbG9hdDMyQXJyYXkoNCksdGhpcy5mcm9tSlNPTih0KSk6KHRoaXMuX19kYXRhPW5ldyBGbG9hdDMyQXJyYXkoNCksdGhpcy5fX2RhdGFbMF09dCx0aGlzLl9fZGF0YVsxXT1lLHRoaXMuX19kYXRhWzJdPXMsdGhpcy5fX2RhdGFbM109YSl9Z2V0IHgoKXtyZXR1cm4gdGhpcy5fX2RhdGFbMF19c2V0IHgodCl7dGhpcy5fX2RhdGFbMF09dH1nZXQgeSgpe3JldHVybiB0aGlzLl9fZGF0YVsxXX1zZXQgeSh0KXt0aGlzLl9fZGF0YVsxXT10fWdldCB6KCl7cmV0dXJuIHRoaXMuX19kYXRhWzJdfXNldCB6KHQpe3RoaXMuX19kYXRhWzJdPXR9Z2V0IHQoKXtyZXR1cm4gdGhpcy5fX2RhdGFbM119c2V0IHQodCl7dGhpcy5fX2RhdGFbM109dH1nZXQgdygpe3JldHVybiB0aGlzLl9fZGF0YVszXX1zZXQgdyh0KXt0aGlzLl9fZGF0YVszXT10fWdldCB4eXooKXtyZXR1cm4gbmV3IGwodGhpcy5fX2RhdGFbMF0sdGhpcy5fX2RhdGFbMV0sdGhpcy5fX2RhdGFbMl0pfXNldCh0LGUscyxhKXt0aGlzLng9dCx0aGlzLnk9ZSx0aGlzLno9cyx0aGlzLnQ9YX1zZXRGcm9tT3RoZXIodCl7dGhpcy54PXQueCx0aGlzLnk9dC55LHRoaXMuej10LnosdGhpcy50PXQudH1lcXVhbCh0KXtyZXR1cm4gY29uc29sZS53YXJuKCJEZXByZWNhdGVkLiBVc2UgI2lzRXF1YWwgaW5zdGVhZC4iKSx0aGlzLmlzRXF1YWwodCl9aXNFcXVhbCh0KXtyZXR1cm4gdGhpcy54PT10LngmJnRoaXMueT09dC55JiZ0aGlzLno9PXQueiYmdGhpcy50PT10LnR9bm90RXF1YWxzKHQpe3JldHVybiBjb25zb2xlLndhcm4oIkRlcHJlY2F0ZWQuIFVzZSAjbm90RXF1YWwgaW5zdGVhZC4iKSx0aGlzLm5vdEVxdWFsKHQpfW5vdEVxdWFsKHQpe3JldHVybiB0aGlzLnghPXQueCYmdGhpcy55IT10LnkmJnRoaXMueiE9dC56JiZ0aGlzLnQhPXQudH1hcHByb3hFcXVhbCh0LGU9TnVtYmVyLkVQU0lMT04pe3JldHVybiBNYXRoLmFicyh0aGlzLngtdC54KTxlJiZNYXRoLmFicyh0aGlzLnktdC55KTxlJiZNYXRoLmFicyh0aGlzLnotdC56KTxlJiZNYXRoLmFicyh0aGlzLnQtdC50KTxlfWFkZCh0KXtyZXR1cm4gbmV3IGModGhpcy54K3QueCx0aGlzLnkrdC55LHRoaXMueit0LnosdGhpcy50K3QudCl9YWRkSW5QbGFjZSh0KXt0aGlzLngrPXQueCx0aGlzLnkrPXQueSx0aGlzLnorPXQueix0aGlzLnQrPXQudH1zdWJ0cmFjdCh0KXtyZXR1cm4gbmV3IGModGhpcy54LXQueCx0aGlzLnktdC55LHRoaXMuei10LnosdGhpcy50LXQudCl9c3VidHJhY3RJblBsYWNlKHQpe3RoaXMueC09dC54LHRoaXMueS09dC55LHRoaXMuei09dC56LHRoaXMudC09dC50fW11bHRpcGx5KHQpe3JldHVybiBuZXcgYyh0aGlzLngqdC54LHRoaXMueSp0LnksdGhpcy56KnQueix0aGlzLnQqdC50KX1tdWx0aXBseUluUGxhY2UodCl7dGhpcy54Kj10LngsdGhpcy55Kj10LnksdGhpcy56Kj10LnosdGhpcy50Kj10LnR9ZGl2aWRlKHQpe3JldHVybiBuZXcgYyh0aGlzLngvdC54LHRoaXMueS90LnksdGhpcy56L3Queix0aGlzLnQvdC50KX1kaXZpZGVJblBsYWNlKHQpe3RoaXMueC89dC54LHRoaXMueS89dC55LHRoaXMuei89dC56LHRoaXMudC89dC50fXNjYWxlKHQpe3JldHVybiBuZXcgYyh0aGlzLngqdCx0aGlzLnkqdCx0aGlzLnoqdCx0aGlzLnQqdCl9c2NhbGVJblBsYWNlKHQpe3RoaXMuc2V0KHRoaXMueCp0LHRoaXMueSp0LHRoaXMueip0LHRoaXMudCp0KX1sZW5ndGgoKXtjb25zdCB0PXRoaXMuX19kYXRhWzBdLGU9dGhpcy5fX2RhdGFbMV0scz10aGlzLl9fZGF0YVsyXSxhPXRoaXMuX19kYXRhWzJdO3JldHVybiBNYXRoLnNxcnQodCp0K2UqZStzKnMrYSphKX1sZW5ndGhTcXVhcmVkKCl7Y29uc3QgdD10aGlzLl9fZGF0YVswXSxlPXRoaXMuX19kYXRhWzFdLHM9dGhpcy5fX2RhdGFbMl0sYT10aGlzLl9fZGF0YVszXTtyZXR1cm4gdCp0K2UqZStzKnMrYSphfW5vcm1hbGl6ZSgpe2NvbnN0IHQ9dGhpcy5fX2RhdGFbMF0sZT10aGlzLl9fZGF0YVsxXSxzPXRoaXMuX19kYXRhWzJdLGE9dGhpcy5fX2RhdGFbM107bGV0IGk9dCp0K2UqZStzKnMrYSphO3JldHVybiBpPE51bWJlci5FUFNJTE9OP25ldyBjOihpPTEvTWF0aC5zcXJ0KGkpLG5ldyBjKHQqaSxlKmkscyppKSl9bm9ybWFsaXplSW5QbGFjZSgpe2NvbnN0IHQ9dGhpcy5fX2RhdGFbMF0sZT10aGlzLl9fZGF0YVsxXSxzPXRoaXMuX19kYXRhWzJdLGE9dGhpcy5fX2RhdGFbM107bGV0IGk9dCp0K2UqZStzKnMrYSphO2k8TnVtYmVyLkVQU0lMT058fChpPTEvTWF0aC5zcXJ0KGkpLHRoaXMuc2V0KHQqaSxlKmkscyppLGEqaSkpfWRvdCh0KXtyZXR1cm4gdGhpcy54KnQueCt0aGlzLnkqdC55K3RoaXMueip0LnordGhpcy50KmIudH1jcm9zcyh0KXtjb25zdCBlPXRoaXMueCxzPXRoaXMueSxhPXRoaXMueixpPXRoaXMudCxyPXQueCxuPXQueSxoPXQueixvPXQudDtyZXR1cm4gbmV3IGMocypoLWEqbixhKm8taSpoLGkqci1lKm8sZSpuLXMqcil9YW5nbGVUbyh0KXtjb25zdCBlPXRoaXMubm9ybWFsaXplKCkscz10Lm5vcm1hbGl6ZSgpLGE9ZS5kb3Qocyk7cmV0dXJuIGE+MT8wOk1hdGguYWNvcyhhKX1sZXJwKHQsZSl7Y29uc3Qgcz10aGlzLngsYT10aGlzLnksaT10aGlzLno7cmV0dXJuIGF0PXRoaXMudCxuZXcgYyhzK2UqKHQueC1zKSxhK2UqKHQueS1hKSxpK2UqKHQuei1pKSxhdCtlKih0LnQtYXQpKX1yYW5kb20odD0xKXtjb25zdCBlPTIqZ2xNYXRyaXguUkFORE9NKCkqTWF0aC5QSSxzPTIqZ2xNYXRyaXguUkFORE9NKCktMSxhPU1hdGguc3FydCgxLXMqcykqdDtyZXR1cm4gb3V0WzBdPU1hdGguY29zKGUpKmEsb3V0WzFdPU1hdGguc2luKGUpKmEsb3V0WzJdPXMqdCxvdXR9Y2xvbmUoKXtyZXR1cm4gbmV3IGModGhpcy5fX2RhdGFbMF0sdGhpcy5fX2RhdGFbMV0sdGhpcy5fX2RhdGFbMl0sdGhpcy5fX2RhdGFbM10pfXRvVmVjMygpe3JldHVybiBuZXcgbCh0aGlzLl9fZGF0YVswXSx0aGlzLl9fZGF0YVsxXSx0aGlzLl9fZGF0YVsyXSl9YXNBcnJheSgpe3JldHVybiB0aGlzLl9fZGF0YX1zdGF0aWMgY3JlYXRlKC4uLnQpe3JldHVybiBuZXcgbCguLi50KX1zdGF0aWMgY3JlYXRlRnJvbUZsb2F0MzJCdWZmZXIodCxlPTApe3JldHVybiBjb25zb2xlLndhcm4oIkRlcHJlY2F0ZWQsIHVzZSAjY3JlYXRlRnJvbUJ1ZmZlciBpbnN0ZWFkIiksbmV3IGMobmV3IEZsb2F0MzJBcnJheSh0LDQqZSw0KSl9c3RhdGljIGNyZWF0ZUZyb21CdWZmZXIodCxlKXtyZXR1cm4gbmV3IGMobmV3IEZsb2F0MzJBcnJheSh0LGUsNCkpfXN0YXRpYyBudW1FbGVtZW50cygpe3JldHVybiA0fXRvSlNPTigpe3JldHVybnt4OnRoaXMueCx5OnRoaXMueSx6OnRoaXMueix0OnRoaXMudH19ZnJvbUpTT04odCl7dGhpcy54PXQueCx0aGlzLnk9dC55LHRoaXMuej10LnosdGhpcy50PXQudH1yZWFkQmluYXJ5KHQpe3RoaXMueD10LmxvYWRGbG9hdDMyKCksdGhpcy55PXQubG9hZEZsb2F0MzIoKSx0aGlzLno9dC5sb2FkRmxvYXQzMigpLHRoaXMudD10LmxvYWRGbG9hdDMyKCl9fW4oIlZlYzQiLGMpO2NsYXNzIHUgZXh0ZW5kcyBle2NvbnN0cnVjdG9yKHQ9MCxlPTAscz0wLGE9MjU1KXtzdXBlcigpLHQgaW5zdGFuY2VvZiBVaW50OEFycmF5P3RoaXMuX19kYXRhPXQ6KHRoaXMuX19kYXRhPW5ldyBVaW50OEFycmF5KDQpLCJzdHJpbmciPT10eXBlb2YgdD90LnN0YXJ0c1dpdGgoIiMiKT90aGlzLnNldEZyb21IZXgodCk6dGhpcy5zZXRGcm9tQ1NTQ29sb3JOYW1lKHQpOih0aGlzLl9fZGF0YVswXT10LHRoaXMuX19kYXRhWzFdPWUsdGhpcy5fX2RhdGFbMl09cyx0aGlzLl9fZGF0YVszXT1hKSl9Z2V0IHIoKXtyZXR1cm4gdGhpcy5fX2RhdGFbMF19c2V0IHIodCl7dGhpcy5fX2RhdGFbMF09dH1nZXQgZygpe3JldHVybiB0aGlzLl9fZGF0YVsxXX1zZXQgZyh0KXt0aGlzLl9fZGF0YVsxXT10fWdldCBiKCl7cmV0dXJuIHRoaXMuX19kYXRhWzJdfXNldCBiKHQpe3RoaXMuX19kYXRhWzJdPXR9Z2V0IGEoKXtyZXR1cm4gdGhpcy5fX2RhdGFbM119c2V0IGEodCl7dGhpcy5fX2RhdGFbM109dH1zZXQodCxlLHMsYT0yNTUpe3RoaXMucj10LHRoaXMuZz1lLHRoaXMuYj1zLHRoaXMuYT1hfXNldEZyb21PdGhlcih0KXt0aGlzLnI9dC5yLHRoaXMuZz10LmcsdGhpcy5iPXQuYix0aGlzLmE9dC5hfXNldEZyb21BcnJheSh0KXt0aGlzLnI9dFswXSx0aGlzLmc9dFsxXSx0aGlzLmI9dFsyXSx0aGlzLmE9ND09dC5sZW5ndGg/dFszXToxfXNldEZyb21IZXgodCl7Y29uc3QgZT1mdW5jdGlvbih0KXtjb25zdCBlPS9eIz8oW2EtZlxkXXsyfSkoW2EtZlxkXXsyfSkoW2EtZlxkXXsyfSkkL2kuZXhlYyh0KTtyZXR1cm4gZT97cjpwYXJzZUludChlWzFdLDE2KSxnOnBhcnNlSW50KGVbMl0sMTYpLGI6cGFyc2VJbnQoZVszXSwxNil9Om51bGx9KHQpO2U/dGhpcy5zZXQoZS5yLGUuZyxlLmIpOmNvbnNvbGUud2FybigiSW52YWxpZCBoZXggY29kZToiK3QpfXNldEZyb21DU1NDb2xvck5hbWUodCl7dC5zdGFydHNXaXRoKCIjIik/dGhpcy5zZXRGcm9tSGV4KHQpOnRoaXMuc2V0RnJvbUhleCgodD0+e2NvbnN0IGU9e2FsaWNlYmx1ZToiI2YwZjhmZiIsYW50aXF1ZXdoaXRlOiIjZmFlYmQ3IixhcXVhOiIjMDBmZmZmIixhcXVhbWFyaW5lOiIjN2ZmZmQ0IixhenVyZToiI2YwZmZmZiIsYmVpZ2U6IiNmNWY1ZGMiLGJpc3F1ZToiI2ZmZTRjNCIsYmxhY2s6IiMwMDAwMDAiLGJsYW5jaGVkYWxtb25kOiIjZmZlYmNkIixibHVlOiIjMDAwMGZmIixibHVldmlvbGV0OiIjOGEyYmUyIixicm93bjoiI2E1MmEyYSIsYnVybHl3b29kOiIjZGViODg3IixjYWRldGJsdWU6IiM1ZjllYTAiLGNoYXJ0cmV1c2U6IiM3ZmZmMDAiLGNob2NvbGF0ZToiI2QyNjkxZSIsY29yYWw6IiNmZjdmNTAiLGNvcm5mbG93ZXJibHVlOiIjNjQ5NWVkIixjb3Juc2lsazoiI2ZmZjhkYyIsY3JpbXNvbjoiI2RjMTQzYyIsY3lhbjoiIzAwZmZmZiIsZGFya2JsdWU6IiMwMDAwOGIiLGRhcmtjeWFuOiIjMDA4YjhiIixkYXJrZ29sZGVucm9kOiIjYjg4NjBiIixkYXJrZ3JheToiI2E5YTlhOSIsZGFya2dyZWVuOiIjMDA2NDAwIixkYXJra2hha2k6IiNiZGI3NmIiLGRhcmttYWdlbnRhOiIjOGIwMDhiIixkYXJrb2xpdmVncmVlbjoiIzU1NmIyZiIsZGFya29yYW5nZToiI2ZmOGMwMCIsZGFya29yY2hpZDoiIzk5MzJjYyIsZGFya3JlZDoiIzhiMDAwMCIsZGFya3NhbG1vbjoiI2U5OTY3YSIsZGFya3NlYWdyZWVuOiIjOGZiYzhmIixkYXJrc2xhdGVibHVlOiIjNDgzZDhiIixkYXJrc2xhdGVncmF5OiIjMmY0ZjRmIixkYXJrdHVycXVvaXNlOiIjMDBjZWQxIixkYXJrdmlvbGV0OiIjOTQwMGQzIixkZWVwcGluazoiI2ZmMTQ5MyIsZGVlcHNreWJsdWU6IiMwMGJmZmYiLGRpbWdyYXk6IiM2OTY5NjkiLGRvZGdlcmJsdWU6IiMxZTkwZmYiLGZpcmVicmljazoiI2IyMjIyMiIsZmxvcmFsd2hpdGU6IiNmZmZhZjAiLGZvcmVzdGdyZWVuOiIjMjI4YjIyIixmdWNoc2lhOiIjZmYwMGZmIixnYWluc2Jvcm86IiNkY2RjZGMiLGdob3N0d2hpdGU6IiNmOGY4ZmYiLGdvbGQ6IiNmZmQ3MDAiLGdvbGRlbnJvZDoiI2RhYTUyMCIsZ3JheToiIzgwODA4MCIsZ3JlZW46IiMwMDgwMDAiLGdyZWVueWVsbG93OiIjYWRmZjJmIixob25leWRldzoiI2YwZmZmMCIsaG90cGluazoiI2ZmNjliNCIsImluZGlhbnJlZCAiOiIjY2Q1YzVjIixpbmRpZ286IiM0YjAwODIiLGl2b3J5OiIjZmZmZmYwIixraGFraToiI2YwZTY4YyIsbGF2ZW5kZXI6IiNlNmU2ZmEiLGxhdmVuZGVyYmx1c2g6IiNmZmYwZjUiLGxhd25ncmVlbjoiIzdjZmMwMCIsbGVtb25jaGlmZm9uOiIjZmZmYWNkIixsaWdodGJsdWU6IiNhZGQ4ZTYiLGxpZ2h0Y29yYWw6IiNmMDgwODAiLGxpZ2h0Y3lhbjoiI2UwZmZmZiIsbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IiNmYWZhZDIiLGxpZ2h0Z3JleToiI2QzZDNkMyIsbGlnaHRncmVlbjoiIzkwZWU5MCIsbGlnaHRwaW5rOiIjZmZiNmMxIixsaWdodHNhbG1vbjoiI2ZmYTA3YSIsbGlnaHRzZWFncmVlbjoiIzIwYjJhYSIsbGlnaHRza3libHVlOiIjODdjZWZhIixsaWdodHNsYXRlZ3JheToiIzc3ODg5OSIsbGlnaHRzdGVlbGJsdWU6IiNiMGM0ZGUiLGxpZ2h0eWVsbG93OiIjZmZmZmUwIixsaW1lOiIjMDBmZjAwIixsaW1lZ3JlZW46IiMzMmNkMzIiLGxpbmVuOiIjZmFmMGU2IixtYWdlbnRhOiIjZmYwMGZmIixtYXJvb246IiM4MDAwMDAiLG1lZGl1bWFxdWFtYXJpbmU6IiM2NmNkYWEiLG1lZGl1bWJsdWU6IiMwMDAwY2QiLG1lZGl1bW9yY2hpZDoiI2JhNTVkMyIsbWVkaXVtcHVycGxlOiIjOTM3MGQ4IixtZWRpdW1zZWFncmVlbjoiIzNjYjM3MSIsbWVkaXVtc2xhdGVibHVlOiIjN2I2OGVlIixtZWRpdW1zcHJpbmdncmVlbjoiIzAwZmE5YSIsbWVkaXVtdHVycXVvaXNlOiIjNDhkMWNjIixtZWRpdW12aW9sZXRyZWQ6IiNjNzE1ODUiLG1pZG5pZ2h0Ymx1ZToiIzE5MTk3MCIsbWludGNyZWFtOiIjZjVmZmZhIixtaXN0eXJvc2U6IiNmZmU0ZTEiLG1vY2Nhc2luOiIjZmZlNGI1IixuYXZham93aGl0ZToiI2ZmZGVhZCIsbmF2eToiIzAwMDA4MCIsb2xkbGFjZToiI2ZkZjVlNiIsb2xpdmU6IiM4MDgwMDAiLG9saXZlZHJhYjoiIzZiOGUyMyIsb3JhbmdlOiIjZmZhNTAwIixvcmFuZ2VyZWQ6IiNmZjQ1MDAiLG9yY2hpZDoiI2RhNzBkNiIscGFsZWdvbGRlbnJvZDoiI2VlZThhYSIscGFsZWdyZWVuOiIjOThmYjk4IixwYWxldHVycXVvaXNlOiIjYWZlZWVlIixwYWxldmlvbGV0cmVkOiIjZDg3MDkzIixwYXBheWF3aGlwOiIjZmZlZmQ1IixwZWFjaHB1ZmY6IiNmZmRhYjkiLHBlcnU6IiNjZDg1M2YiLHBpbms6IiNmZmMwY2IiLHBsdW06IiNkZGEwZGQiLHBvd2RlcmJsdWU6IiNiMGUwZTYiLHB1cnBsZToiIzgwMDA4MCIscmViZWNjYXB1cnBsZToiIzY2MzM5OSIscmVkOiIjZmYwMDAwIixyb3N5YnJvd246IiNiYzhmOGYiLHJveWFsYmx1ZToiIzQxNjllMSIsc2FkZGxlYnJvd246IiM4YjQ1MTMiLHNhbG1vbjoiI2ZhODA3MiIsc2FuZHlicm93bjoiI2Y0YTQ2MCIsc2VhZ3JlZW46IiMyZThiNTciLHNlYXNoZWxsOiIjZmZmNWVlIixzaWVubmE6IiNhMDUyMmQiLHNpbHZlcjoiI2MwYzBjMCIsc2t5Ymx1ZToiIzg3Y2VlYiIsc2xhdGVibHVlOiIjNmE1YWNkIixzbGF0ZWdyYXk6IiM3MDgwOTAiLHNub3c6IiNmZmZhZmEiLHNwcmluZ2dyZWVuOiIjMDBmZjdmIixzdGVlbGJsdWU6IiM0NjgyYjQiLHRhbjoiI2QyYjQ4YyIsdGVhbDoiIzAwODA4MCIsdGhpc3RsZToiI2Q4YmZkOCIsdG9tYXRvOiIjZmY2MzQ3Iix0dXJxdW9pc2U6IiM0MGUwZDAiLHZpb2xldDoiI2VlODJlZSIsd2hlYXQ6IiNmNWRlYjMiLHdoaXRlOiIjZmZmZmZmIix3aGl0ZXNtb2tlOiIjZjVmNWY1Iix5ZWxsb3c6IiNmZmZmMDAiLHllbGxvd2dyZWVuOiIjOWFjZDMyIn07cmV0dXJuIHZvaWQgMCE9PWVbdC50b0xvd2VyQ2FzZSgpXSYmZVt0LnRvTG93ZXJDYXNlKCldfSkodCkpfXRvSGV4KCl7ZnVuY3Rpb24gdCh0KXtjb25zdCBlPXQudG9TdHJpbmcoMTYpO3JldHVybiAxPT1lLmxlbmd0aD8iMCIrZTplfXJldHVybiIjIit0KHRoaXMucikrdCh0aGlzLmcpK3QodGhpcy5iKX1lcXVhbCh0KXtyZXR1cm4gY29uc29sZS53YXJuKCJEZXByZWNhdGVkLiBVc2UgI2lzRXF1YWwgaW5zdGVhZC4iKSx0aGlzLmlzRXF1YWwodCl9aXNFcXVhbCh0KXtyZXR1cm4gdGhpcy5yPT10LnImJnRoaXMuZz09dC5nJiZ0aGlzLmI9PXQuYiYmdGhpcy5hPT10LmF9bm90RXF1YWxzKHQpe3JldHVybiB0aGlzLnIhPXQuciYmdGhpcy5nIT10LmcmJnRoaXMuYiE9dC5iJiZ0aGlzLmEhPXQuYX1hcHByb3hFcXVhbCh0LGU9TnVtYmVyLkVQU0lMT04pe3JldHVybiBNYXRoLmFicyh0aGlzLnItdC5yKTxlJiZNYXRoLmFicyh0aGlzLmctdC5nKTxlJiZNYXRoLmFicyh0aGlzLmItdC5iKTxlJiZNYXRoLmFicyh0aGlzLmEtdC5hKTxlfWFkZCh0KXtyZXR1cm4gbmV3IHUodGhpcy5yK3Qucix0aGlzLmcrdC5nLHRoaXMuYit0LmIsdGhpcy5hK3QuYSl9c3VidHJhY3QodCl7cmV0dXJuIG5ldyB1KHRoaXMuci10LnIsdGhpcy5nLXQuZyx0aGlzLmItdC5iLHRoaXMuYS10LmEpfXNjYWxlKHQpe3JldHVybiBuZXcgdSh0aGlzLnIqdCx0aGlzLmcqdCx0aGlzLmIqdCx0aGlzLmEqdCl9c2NhbGVJblBsYWNlKHQpe3RoaXMucio9dCx0aGlzLmcqPXQsdGhpcy5iKj10LHRoaXMuYSo9dH1hcHBseUdhbW1hKHQpe3RoaXMuc2V0KE1hdGgucG93KHRoaXMucix0KSxNYXRoLnBvdyh0aGlzLmcsdCksTWF0aC5wb3codGhpcy5iLHQpLHRoaXMuYSl9dG9MaW5lYXIodD0yLjIpe3JldHVybiBuZXcgdShNYXRoLnBvdyh0aGlzLnIsdCksTWF0aC5wb3codGhpcy5nLHQpLE1hdGgucG93KHRoaXMuYix0KSx0aGlzLmEpfXRvR2FtbWEodD0yLjIpe3JldHVybiBuZXcgdShNYXRoLnBvdyh0aGlzLnIsMS90KSxNYXRoLnBvdyh0aGlzLmcsMS90KSxNYXRoLnBvdyh0aGlzLmIsMS90KSx0aGlzLmEpfWx1bWluYW5jZSgpe3JldHVybi4yMTI2KnRoaXMucisuNzE1Mip0aGlzLmcrLjA3MjIqdGhpcy5ifWxlcnAodCxlKXtjb25zdCBzPXRoaXMucixhPXRoaXMuZyxpPXRoaXMuYixyPXRoaXMuYTtyZXR1cm4gbmV3IHUocytlKih0LnItcyksYStlKih0LmctYSksaStlKih0LmItaSkscitlKih0LmEtcikpfXN0YXRpYyByYW5kb20odD0wLGU9ITEpe3JldHVybiB0PjA/bmV3IHUodCtNYXRoLnJhbmRvbSgpKigxLXQpLHQrTWF0aC5yYW5kb20oKSooMS10KSx0K01hdGgucmFuZG9tKCkqKDEtdCksZT90K01hdGgucmFuZG9tKCkqKDEtdCk6MSk6dDwwP25ldyB1KE1hdGgucmFuZG9tKCkqKDErdCksTWF0aC5yYW5kb20oKSooMSt0KSxNYXRoLnJhbmRvbSgpKigxK3QpLGU/TWF0aC5yYW5kb20oKSooMSt0KToxKTpuZXcgdShNYXRoLnJhbmRvbSgpLE1hdGgucmFuZG9tKCksTWF0aC5yYW5kb20oKSxlP01hdGgucmFuZG9tKCk6MSl9Y2xvbmUoKXtyZXR1cm4gbmV3IHUodGhpcy5fX2RhdGFbMF0sdGhpcy5fX2RhdGFbMV0sdGhpcy5fX2RhdGFbMl0sdGhpcy5fX2RhdGFbM10pfWFzQXJyYXkoKXtyZXR1cm4gdGhpcy5fX2RhdGF9YXMzQ29tcG9uZW50QXJyYXkoKXtyZXR1cm5bdGhpcy5fX2RhdGFbMF0sdGhpcy5fX2RhdGFbMV0sdGhpcy5fX2RhdGFbMl1dfXN0YXRpYyBjcmVhdGUoLi4udCl7cmV0dXJuIG5ldyB1KC4uLnQpfXN0YXRpYyBjcmVhdGVGcm9tRmxvYXQzMkJ1ZmZlcih0LGU9MCl7cmV0dXJuIGNvbnNvbGUud2FybigiRGVwcmVjYXRlZCwgdXNlICNjcmVhdGVGcm9tQnVmZmVyIGluc3RlYWQiKSx0aGlzLmNyZWF0ZUZyb21CdWZmZXIodCw0KmUpfXN0YXRpYyBjcmVhdGVGcm9tQnVmZmVyKHQsZSl7cmV0dXJuIG5ldyB1KG5ldyBVaW50OEFycmF5KHQsZSw0KSl9c3RhdGljIG51bUVsZW1lbnRzKCl7cmV0dXJuIDR9dG9KU09OKCl7cmV0dXJue3I6dGhpcy5yLGc6dGhpcy5nLGI6dGhpcy5iLGE6dGhpcy5hfX1mcm9tSlNPTih0KXt0aGlzLnI9dC5yLHRoaXMuZz10LmcsdGhpcy5iPXQuYix0aGlzLmE9dC5hfXRvQ1NTU3RyaW5nKCl7cmV0dXJuInJnYmEoIitNYXRoLnJvdW5kKDI1NSp0aGlzLnIpKyIsICIrTWF0aC5yb3VuZCgyNTUqdGhpcy5nKSsiLCAiK01hdGgucm91bmQoMjU1KnRoaXMuYikrIiwgIit0aGlzLmErIikifX1uKCJSR0JBIix1KTtjbGFzcyBmIGV4dGVuZHMgZXtjb25zdHJ1Y3Rvcih0PTAsZT0wLHM9MCxhPTEpe2lmKHN1cGVyKCksdCBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSl0aGlzLl9fZGF0YT10O2Vsc2UgaWYodCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXtjb25zb2xlLndhcm4oImRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgbmV3IFZlYzQobmV3IEZsb2F0MzJBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIDQpKSIpO2NvbnN0IHM9dCxhPWU7dGhpcy5fX2RhdGE9bmV3IEZsb2F0MzJBcnJheShzLGEsNCl9ZWxzZSB0aGlzLl9fZGF0YT1uZXcgRmxvYXQzMkFycmF5KDQpLCJzdHJpbmciPT10eXBlb2YgdD90LnN0YXJ0c1dpdGgoIiMiKT90aGlzLnNldEZyb21IZXgodCk6dGhpcy5zZXRGcm9tQ1NTQ29sb3JOYW1lKHQpOih0aGlzLl9fZGF0YVswXT10LHRoaXMuX19kYXRhWzFdPWUsdGhpcy5fX2RhdGFbMl09cyx0aGlzLl9fZGF0YVszXT1hKX1nZXQgcigpe3JldHVybiB0aGlzLl9fZGF0YVswXX1zZXQgcih0KXt0aGlzLl9fZGF0YVswXT10fWdldCBnKCl7cmV0dXJuIHRoaXMuX19kYXRhWzFdfXNldCBnKHQpe3RoaXMuX19kYXRhWzFdPXR9Z2V0IGIoKXtyZXR1cm4gdGhpcy5fX2RhdGFbMl19c2V0IGIodCl7dGhpcy5fX2RhdGFbMl09dH1nZXQgYSgpe3JldHVybiB0aGlzLl9fZGF0YVszXX1zZXQgYSh0KXt0aGlzLl9fZGF0YVszXT10fXNldCh0LGUscyxhPTEpe3RoaXMucj10LHRoaXMuZz1lLHRoaXMuYj1zLHRoaXMuYT1hfXNldEZyb21PdGhlcih0KXt0aGlzLnI9dC5yLHRoaXMuZz10LmcsdGhpcy5iPXQuYix0aGlzLmE9dC5hfXNldEZyb21IZXgodCl7Y29uc3QgZT1mdW5jdGlvbih0KXtjb25zdCBlPS9eIz8oW2EtZlxkXXsyfSkoW2EtZlxkXXsyfSkoW2EtZlxkXXsyfSkkL2kuZXhlYyh0KTtyZXR1cm4gZT97cjpwYXJzZUludChlWzFdLDE2KSxnOnBhcnNlSW50KGVbMl0sMTYpLGI6cGFyc2VJbnQoZVszXSwxNil9Om51bGx9KHQpO2U/dGhpcy5zZXQoZS5yLzI1NSxlLmcvMjU1LGUuYi8yNTUpOmNvbnNvbGUud2FybigiSW52YWxpZCBoZXggY29kZToiK3QpfXNldEZyb21DU1NDb2xvck5hbWUodCl7dC5zdGFydHNXaXRoKCIjIik/dGhpcy5zZXRGcm9tSGV4KHQpOnRoaXMuc2V0RnJvbUhleCgodD0+e2NvbnN0IGU9e2FsaWNlYmx1ZToiI2YwZjhmZiIsYW50aXF1ZXdoaXRlOiIjZmFlYmQ3IixhcXVhOiIjMDBmZmZmIixhcXVhbWFyaW5lOiIjN2ZmZmQ0IixhenVyZToiI2YwZmZmZiIsYmVpZ2U6IiNmNWY1ZGMiLGJpc3F1ZToiI2ZmZTRjNCIsYmxhY2s6IiMwMDAwMDAiLGJsYW5jaGVkYWxtb25kOiIjZmZlYmNkIixibHVlOiIjMDAwMGZmIixibHVldmlvbGV0OiIjOGEyYmUyIixicm93bjoiI2E1MmEyYSIsYnVybHl3b29kOiIjZGViODg3IixjYWRldGJsdWU6IiM1ZjllYTAiLGNoYXJ0cmV1c2U6IiM3ZmZmMDAiLGNob2NvbGF0ZToiI2QyNjkxZSIsY29yYWw6IiNmZjdmNTAiLGNvcm5mbG93ZXJibHVlOiIjNjQ5NWVkIixjb3Juc2lsazoiI2ZmZjhkYyIsY3JpbXNvbjoiI2RjMTQzYyIsY3lhbjoiIzAwZmZmZiIsZGFya2JsdWU6IiMwMDAwOGIiLGRhcmtjeWFuOiIjMDA4YjhiIixkYXJrZ29sZGVucm9kOiIjYjg4NjBiIixkYXJrZ3JheToiI2E5YTlhOSIsZGFya2dyZWVuOiIjMDA2NDAwIixkYXJra2hha2k6IiNiZGI3NmIiLGRhcmttYWdlbnRhOiIjOGIwMDhiIixkYXJrb2xpdmVncmVlbjoiIzU1NmIyZiIsZGFya29yYW5nZToiI2ZmOGMwMCIsZGFya29yY2hpZDoiIzk5MzJjYyIsZGFya3JlZDoiIzhiMDAwMCIsZGFya3NhbG1vbjoiI2U5OTY3YSIsZGFya3NlYWdyZWVuOiIjOGZiYzhmIixkYXJrc2xhdGVibHVlOiIjNDgzZDhiIixkYXJrc2xhdGVncmF5OiIjMmY0ZjRmIixkYXJrdHVycXVvaXNlOiIjMDBjZWQxIixkYXJrdmlvbGV0OiIjOTQwMGQzIixkZWVwcGluazoiI2ZmMTQ5MyIsZGVlcHNreWJsdWU6IiMwMGJmZmYiLGRpbWdyYXk6IiM2OTY5NjkiLGRvZGdlcmJsdWU6IiMxZTkwZmYiLGZpcmVicmljazoiI2IyMjIyMiIsZmxvcmFsd2hpdGU6IiNmZmZhZjAiLGZvcmVzdGdyZWVuOiIjMjI4YjIyIixmdWNoc2lhOiIjZmYwMGZmIixnYWluc2Jvcm86IiNkY2RjZGMiLGdob3N0d2hpdGU6IiNmOGY4ZmYiLGdvbGQ6IiNmZmQ3MDAiLGdvbGRlbnJvZDoiI2RhYTUyMCIsZ3JheToiIzgwODA4MCIsZ3JlZW46IiMwMDgwMDAiLGdyZWVueWVsbG93OiIjYWRmZjJmIixob25leWRldzoiI2YwZmZmMCIsaG90cGluazoiI2ZmNjliNCIsImluZGlhbnJlZCAiOiIjY2Q1YzVjIixpbmRpZ286IiM0YjAwODIiLGl2b3J5OiIjZmZmZmYwIixraGFraToiI2YwZTY4YyIsbGF2ZW5kZXI6IiNlNmU2ZmEiLGxhdmVuZGVyYmx1c2g6IiNmZmYwZjUiLGxhd25ncmVlbjoiIzdjZmMwMCIsbGVtb25jaGlmZm9uOiIjZmZmYWNkIixsaWdodGJsdWU6IiNhZGQ4ZTYiLGxpZ2h0Y29yYWw6IiNmMDgwODAiLGxpZ2h0Y3lhbjoiI2UwZmZmZiIsbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IiNmYWZhZDIiLGxpZ2h0Z3JleToiI2QzZDNkMyIsbGlnaHRncmVlbjoiIzkwZWU5MCIsbGlnaHRwaW5rOiIjZmZiNmMxIixsaWdodHNhbG1vbjoiI2ZmYTA3YSIsbGlnaHRzZWFncmVlbjoiIzIwYjJhYSIsbGlnaHRza3libHVlOiIjODdjZWZhIixsaWdodHNsYXRlZ3JheToiIzc3ODg5OSIsbGlnaHRzdGVlbGJsdWU6IiNiMGM0ZGUiLGxpZ2h0eWVsbG93OiIjZmZmZmUwIixsaW1lOiIjMDBmZjAwIixsaW1lZ3JlZW46IiMzMmNkMzIiLGxpbmVuOiIjZmFmMGU2IixtYWdlbnRhOiIjZmYwMGZmIixtYXJvb246IiM4MDAwMDAiLG1lZGl1bWFxdWFtYXJpbmU6IiM2NmNkYWEiLG1lZGl1bWJsdWU6IiMwMDAwY2QiLG1lZGl1bW9yY2hpZDoiI2JhNTVkMyIsbWVkaXVtcHVycGxlOiIjOTM3MGQ4IixtZWRpdW1zZWFncmVlbjoiIzNjYjM3MSIsbWVkaXVtc2xhdGVibHVlOiIjN2I2OGVlIixtZWRpdW1zcHJpbmdncmVlbjoiIzAwZmE5YSIsbWVkaXVtdHVycXVvaXNlOiIjNDhkMWNjIixtZWRpdW12aW9sZXRyZWQ6IiNjNzE1ODUiLG1pZG5pZ2h0Ymx1ZToiIzE5MTk3MCIsbWludGNyZWFtOiIjZjVmZmZhIixtaXN0eXJvc2U6IiNmZmU0ZTEiLG1vY2Nhc2luOiIjZmZlNGI1IixuYXZham93aGl0ZToiI2ZmZGVhZCIsbmF2eToiIzAwMDA4MCIsb2xkbGFjZToiI2ZkZjVlNiIsb2xpdmU6IiM4MDgwMDAiLG9saXZlZHJhYjoiIzZiOGUyMyIsb3JhbmdlOiIjZmZhNTAwIixvcmFuZ2VyZWQ6IiNmZjQ1MDAiLG9yY2hpZDoiI2RhNzBkNiIscGFsZWdvbGRlbnJvZDoiI2VlZThhYSIscGFsZWdyZWVuOiIjOThmYjk4IixwYWxldHVycXVvaXNlOiIjYWZlZWVlIixwYWxldmlvbGV0cmVkOiIjZDg3MDkzIixwYXBheWF3aGlwOiIjZmZlZmQ1IixwZWFjaHB1ZmY6IiNmZmRhYjkiLHBlcnU6IiNjZDg1M2YiLHBpbms6IiNmZmMwY2IiLHBsdW06IiNkZGEwZGQiLHBvd2RlcmJsdWU6IiNiMGUwZTYiLHB1cnBsZToiIzgwMDA4MCIscmViZWNjYXB1cnBsZToiIzY2MzM5OSIscmVkOiIjZmYwMDAwIixyb3N5YnJvd246IiNiYzhmOGYiLHJveWFsYmx1ZToiIzQxNjllMSIsc2FkZGxlYnJvd246IiM4YjQ1MTMiLHNhbG1vbjoiI2ZhODA3MiIsc2FuZHlicm93bjoiI2Y0YTQ2MCIsc2VhZ3JlZW46IiMyZThiNTciLHNlYXNoZWxsOiIjZmZmNWVlIixzaWVubmE6IiNhMDUyMmQiLHNpbHZlcjoiI2MwYzBjMCIsc2t5Ymx1ZToiIzg3Y2VlYiIsc2xhdGVibHVlOiIjNmE1YWNkIixzbGF0ZWdyYXk6IiM3MDgwOTAiLHNub3c6IiNmZmZhZmEiLHNwcmluZ2dyZWVuOiIjMDBmZjdmIixzdGVlbGJsdWU6IiM0NjgyYjQiLHRhbjoiI2QyYjQ4YyIsdGVhbDoiIzAwODA4MCIsdGhpc3RsZToiI2Q4YmZkOCIsdG9tYXRvOiIjZmY2MzQ3Iix0dXJxdW9pc2U6IiM0MGUwZDAiLHZpb2xldDoiI2VlODJlZSIsd2hlYXQ6IiNmNWRlYjMiLHdoaXRlOiIjZmZmZmZmIix3aGl0ZXNtb2tlOiIjZjVmNWY1Iix5ZWxsb3c6IiNmZmZmMDAiLHllbGxvd2dyZWVuOiIjOWFjZDMyIn07cmV0dXJuIHZvaWQgMCE9PWVbdC50b0xvd2VyQ2FzZSgpXSYmZVt0LnRvTG93ZXJDYXNlKCldfSkodCkpfXRvSGV4KCl7Y29uc3QgdD10PT57Y29uc3QgZT1NYXRoLnJvdW5kKDI1NSp0KS50b1N0cmluZygxNik7cmV0dXJuIDE9PWUubGVuZ3RoPyIwIitlOmV9O3JldHVybmAjJHt0KHRoaXMucil9JHt0KHRoaXMuZyl9JHt0KHRoaXMuYil9YH1lcXVhbCh0KXtyZXR1cm4gY29uc29sZS53YXJuKCJEZXByZWNhdGVkLiBVc2UgI2lzRXF1YWwgaW5zdGVhZC4iKSx0aGlzLmlzRXF1YWwodCl9aXNFcXVhbCh0KXtyZXR1cm4gdGhpcy5yPT10LnImJnRoaXMuZz09dC5nJiZ0aGlzLmI9PXQuYiYmdGhpcy5hPT10LmF9bm90RXF1YWxzKHQpe3JldHVybiB0aGlzLnIhPXQuciYmdGhpcy5nIT10LmcmJnRoaXMuYiE9dC5iJiZ0aGlzLmEhPXQuYX1hcHByb3hFcXVhbCh0LGU9TnVtYmVyLkVQU0lMT04pe3JldHVybiBNYXRoLmFicyh0aGlzLnItdC5yKTxlJiZNYXRoLmFicyh0aGlzLmctdC5nKTxlJiZNYXRoLmFicyh0aGlzLmItdC5iKTxlJiZNYXRoLmFicyh0aGlzLmEtdC5hKTxlfWFkZCh0KXtyZXR1cm4gbmV3IGYodGhpcy5yK3Qucix0aGlzLmcrdC5nLHRoaXMuYit0LmIsdGhpcy5hK3QuYSl9YWRkSW5QbGFjZSh0KXt0aGlzLnIrPXQucix0aGlzLmcrPXQuZyx0aGlzLmIrPXQuYix0aGlzLmErPXQuYX1zdWJ0cmFjdCh0KXtyZXR1cm4gbmV3IGYodGhpcy5yLXQucix0aGlzLmctdC5nLHRoaXMuYi10LmIsdGhpcy5hLXQuYSl9c2NhbGUodCl7cmV0dXJuIG5ldyBmKHRoaXMucip0LHRoaXMuZyp0LHRoaXMuYip0LHRoaXMuYSp0KX1zY2FsZUluUGxhY2UodCl7dGhpcy5yKj10LHRoaXMuZyo9dCx0aGlzLmIqPXQsdGhpcy5hKj10fWFwcGx5R2FtbWEodCl7dGhpcy5zZXQoTWF0aC5wb3codGhpcy5yLHQpLE1hdGgucG93KHRoaXMuZyx0KSxNYXRoLnBvdyh0aGlzLmIsdCksdGhpcy5hKX10b0xpbmVhcih0PTIuMil7cmV0dXJuIG5ldyBmKE1hdGgucG93KHRoaXMucix0KSxNYXRoLnBvdyh0aGlzLmcsdCksTWF0aC5wb3codGhpcy5iLHQpLHRoaXMuYSl9dG9HYW1tYSh0PTIuMil7cmV0dXJuIG5ldyBmKE1hdGgucG93KHRoaXMuciwxL3QpLE1hdGgucG93KHRoaXMuZywxL3QpLE1hdGgucG93KHRoaXMuYiwxL3QpLHRoaXMuYSl9bHVtaW5hbmNlKCl7cmV0dXJuLjIxMjYqdGhpcy5yKy43MTUyKnRoaXMuZysuMDcyMip0aGlzLmJ9bGVycCh0LGUpe2NvbnN0IHM9dGhpcy5yLGE9dGhpcy5nLGk9dGhpcy5iLHI9dGhpcy5hO3JldHVybiBuZXcgZihzK2UqKHQuci1zKSxhK2UqKHQuZy1hKSxpK2UqKHQuYi1pKSxyK2UqKHQuYS1yKSl9c3RhdGljIHJhbmRvbSh0PTAsZT0hMSl7cmV0dXJuIHQ+MD9uZXcgZih0K01hdGgucmFuZG9tKCkqKDEtdCksdCtNYXRoLnJhbmRvbSgpKigxLXQpLHQrTWF0aC5yYW5kb20oKSooMS10KSxlP3QrTWF0aC5yYW5kb20oKSooMS10KToxKTp0PDA/bmV3IGYoTWF0aC5yYW5kb20oKSooMSt0KSxNYXRoLnJhbmRvbSgpKigxK3QpLE1hdGgucmFuZG9tKCkqKDErdCksZT9NYXRoLnJhbmRvbSgpKigxK3QpOjEpOm5ldyBmKE1hdGgucmFuZG9tKCksTWF0aC5yYW5kb20oKSxNYXRoLnJhbmRvbSgpLGU/TWF0aC5yYW5kb20oKToxKX1jbG9uZSgpe3JldHVybiBuZXcgZih0aGlzLl9fZGF0YVswXSx0aGlzLl9fZGF0YVsxXSx0aGlzLl9fZGF0YVsyXSx0aGlzLl9fZGF0YVszXSl9YXNBcnJheSgpe3JldHVybiB0aGlzLl9fZGF0YX1zdGF0aWMgY3JlYXRlKC4uLnQpe3JldHVybiBuZXcgZiguLi50KX1zdGF0aWMgY3JlYXRlRnJvbUZsb2F0MzJCdWZmZXIodCxlPTApe3JldHVybiBjb25zb2xlLndhcm4oIkRlcHJlY2F0ZWQsIHVzZSAjY3JlYXRlRnJvbUJ1ZmZlciBpbnN0ZWFkIiksdGhpcy5jcmVhdGVGcm9tQnVmZmVyKHQsNCplKX1zdGF0aWMgY3JlYXRlRnJvbUJ1ZmZlcih0LGUpe3JldHVybiBuZXcgZihuZXcgRmxvYXQzMkFycmF5KHQsZSw0KSl9c3RhdGljIG51bUVsZW1lbnRzKCl7cmV0dXJuIDR9dG9KU09OKCl7cmV0dXJue3I6dGhpcy5yLGc6dGhpcy5nLGI6dGhpcy5iLGE6dGhpcy5hfX1mcm9tSlNPTih0KXt0aGlzLnI9dC5yLHRoaXMuZz10LmcsdGhpcy5iPXQuYix0aGlzLmE9dC5hfXJlYWRCaW5hcnkodCl7dGhpcy5yPXQubG9hZEZsb2F0MzIoKSx0aGlzLmc9dC5sb2FkRmxvYXQzMigpLHRoaXMuYj10LmxvYWRGbG9hdDMyKCksdGhpcy5hPXQubG9hZEZsb2F0MzIoKX19bigiQ29sb3IiLGYpO2NsYXNzIG0gZXh0ZW5kcyBle2NvbnN0cnVjdG9yKHQ9MCxlPTAscz0wLGE9MCl7aWYoc3VwZXIoKSxpc05hTihhKSlzd2l0Y2goYSl7Y2FzZSJYWVoiOnRoaXMub3JkZXI9MDticmVhaztjYXNlIllaWCI6dGhpcy5vcmRlcj0xO2JyZWFrO2Nhc2UiWlhZIjp0aGlzLm9yZGVyPTI7YnJlYWs7Y2FzZSJYWlkiOnRoaXMub3JkZXI9MzticmVhaztjYXNlIlpZWCI6dGhpcy5vcmRlcj00O2JyZWFrO2Nhc2UiWVhaIjp0aGlzLm9yZGVyPTU7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoIkludmFsaWQgRXVsZXIgQW5nbGVzIE9yZGVyOiIrYSl9ZWxzZSB0aGlzLm9yZGVyPWE7aWYodCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXtjb25zdCBzPXQsYT1lO3RoaXMuX19kYXRhPW5ldyBGbG9hdDMyQXJyYXkocyxhLDQpfWVsc2UgdGhpcy5fX2RhdGE9bmV3IEZsb2F0MzJBcnJheSgzKSx0aGlzLl9fZGF0YVswXT10LHRoaXMuX19kYXRhWzFdPWUsdGhpcy5fX2RhdGFbMl09c31nZXQgeCgpe3JldHVybiB0aGlzLl9fZGF0YVswXX1zZXQgeCh0KXt0aGlzLl9fZGF0YVswXT10fWdldCB5KCl7cmV0dXJuIHRoaXMuX19kYXRhWzFdfXNldCB5KHQpe3RoaXMuX19kYXRhWzFdPXR9Z2V0IHooKXtyZXR1cm4gdGhpcy5fX2RhdGFbMl19c2V0IHoodCl7dGhpcy5fX2RhdGFbMl09dH1zZXQodCxlLHMpe3RoaXMuX19kYXRhWzBdPXQsdGhpcy5fX2RhdGFbMV09ZSx0aGlzLl9fZGF0YVsyXT1zfX1uKCJFdWxlckFuZ2xlcyIsbSk7Y2xhc3MgZyBleHRlbmRzIGV7Y29uc3RydWN0b3IodD0xLGU9MCxzPTAsYT0wLGk9MSxyPTAsbj0wLGg9MCxvPTEpe2lmKHN1cGVyKCksdCBpbnN0YW5jZW9mIGwmJmUgaW5zdGFuY2VvZiBsJiZzIGluc3RhbmNlb2YgbCl0aGlzLl9fZGF0YT1uZXcgRmxvYXQzMkFycmF5KDkpLHRoaXMuc2V0KHQueCx0LnksdC56LGUueCxlLnksZS56LHMueCxzLnkscy56KTtlbHNlIGlmKHQgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXl8fHQgaW5zdGFuY2VvZiBVaW50MzJBcnJheSl0aGlzLl9fZGF0YT10O2Vsc2UgaWYodCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXtjb25zb2xlLndhcm4oIkRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgbmV3IFZlYzMobmV3IEZsb2F0MzJBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIDkpKSIpO2NvbnN0IHM9dCxhPWU7dGhpcy5fX2RhdGE9bmV3IEZsb2F0MzJBcnJheShzLGEsOSl9ZWxzZSB0aGlzLl9fZGF0YT1uZXcgRmxvYXQzMkFycmF5KDkpLHRoaXMuc2V0KHQsZSxzLGEsaSxyLG4saCxvKX1nZXQgbTAwKCl7cmV0dXJuIHRoaXMuX19kYXRhWzBdfXNldCBtMDAodCl7dGhpcy5fX2RhdGFbMF09dH1nZXQgbTAxKCl7cmV0dXJuIHRoaXMuX19kYXRhWzFdfXNldCBtMDEodCl7dGhpcy5fX2RhdGFbMV09dH1nZXQgbTAyKCl7cmV0dXJuIHRoaXMuX19kYXRhWzJdfXNldCBtMDIodCl7dGhpcy5fX2RhdGFbMl09dH1nZXQgbTEwKCl7cmV0dXJuIHRoaXMuX19kYXRhWzNdfXNldCBtMTAodCl7dGhpcy5fX2RhdGFbM109dH1nZXQgbTExKCl7cmV0dXJuIHRoaXMuX19kYXRhWzRdfXNldCBtMTEodCl7dGhpcy5fX2RhdGFbNF09dH1nZXQgbTEyKCl7cmV0dXJuIHRoaXMuX19kYXRhWzVdfXNldCBtMTIodCl7dGhpcy5fX2RhdGFbNV09dH1nZXQgbTIwKCl7cmV0dXJuIHRoaXMuX19kYXRhWzZdfXNldCBtMjAodCl7dGhpcy5fX2RhdGFbNl09dH1nZXQgbTIxKCl7cmV0dXJuIHRoaXMuX19kYXRhWzddfXNldCBtMjEodCl7dGhpcy5fX2RhdGFbN109dH1nZXQgbTIyKCl7cmV0dXJuIHRoaXMuX19kYXRhWzhdfXNldCBtMjIodCl7dGhpcy5fX2RhdGFbOF09dH1nZXQgeEF4aXMoKXtyZXR1cm4gbC5jcmVhdGVGcm9tQnVmZmVyKHRoaXMuX19kYXRhLmJ1ZmZlciwwKX1zZXQgeEF4aXModCl7dGhpcy54QXhpcy5zZXQodC54LHQueSx0LnopfWdldCB5QXhpcygpe3JldHVybiBsLmNyZWF0ZUZyb21CdWZmZXIodGhpcy5fX2RhdGEuYnVmZmVyLDEyKX1zZXQgeUF4aXModCl7dGhpcy55QXhpcy5zZXQodC54LHQueSx0LnopfWdldCB6QXhpcygpe3JldHVybiBsLmNyZWF0ZUZyb21CdWZmZXIodGhpcy5fX2RhdGEuYnVmZmVyLDI0KX1zZXQgekF4aXModCl7dGhpcy56QXhpcy5zZXQodC54LHQueSx0LnopfXNldCh0PTEsZT0wLHM9MCxhPTAsaT0xLHI9MCxuPTAsaD0wLG89MSl7dGhpcy5fX2RhdGFbMF09dCx0aGlzLl9fZGF0YVsxXT1lLHRoaXMuX19kYXRhWzJdPXMsdGhpcy5fX2RhdGFbM109YSx0aGlzLl9fZGF0YVs0XT1pLHRoaXMuX19kYXRhWzVdPXIsdGhpcy5fX2RhdGFbNl09bix0aGlzLl9fZGF0YVs3XT1oLHRoaXMuX19kYXRhWzhdPW99c2V0SWRlbnRpdHkoKXt0aGlzLnNldCgpfXNldEZyb21NYXQodCl7dGhpcy5fX2RhdGFbMF09dC5tMDAsdGhpcy5fX2RhdGFbMV09dC5tMDEsdGhpcy5fX2RhdGFbMl09dC5tMDIsdGhpcy5fX2RhdGFbM109dC5tMTAsdGhpcy5fX2RhdGFbNF09dC5tMTEsdGhpcy5fX2RhdGFbNV09dC5tMTIsdGhpcy5fX2RhdGFbNl09dC5tMjAsdGhpcy5fX2RhdGFbN109dC5tMjEsdGhpcy5fX2RhdGFbOF09dC5tMjJ9c2V0RnJvbURpcmVjdGlvbkFuZFVwdmVjdG9yKHQsZSl7Y29uc3Qgcz10LGE9cy5sZW5ndGgoKTtpZihhPE51bWJlci5FUFNJTE9OKXJldHVybiB2b2lkIHRoaXMuc2V0SWRlbnRpdHkoKTtzLnNjYWxlSW5QbGFjZSgxL2EpO2NvbnN0IGk9ZS5jcm9zcyhzKSxyPWkubGVuZ3RoKCk7cj5OdW1iZXIuRVBTSUxPTiYmaS5zY2FsZUluUGxhY2UoMS9yKTtjb25zdCBuPXMuY3Jvc3MoaSksaD1uLmxlbmd0aCgpO2g+TnVtYmVyLkVQU0lMT04mJm4uc2NhbGVJblBsYWNlKDEvaCksdGhpcy5zZXQoaS54LGkueSxpLnosbi54LG4ueSxuLnoscy54LHMueSxzLnopfWludmVyc2UoKXtjb25zdCB0PXRoaXMuX19kYXRhWzBdLGU9dGhpcy5fX2RhdGFbMV0scz10aGlzLl9fZGF0YVsyXSxhPXRoaXMuX19kYXRhWzNdLGk9dGhpcy5fX2RhdGFbNF0scj10aGlzLl9fZGF0YVs1XSxuPXRoaXMuX19kYXRhWzZdLGg9dGhpcy5fX2RhdGFbN10sbz10aGlzLl9fZGF0YVs4XSxfPW8qaS1yKmgsZD0tbyphK3IqbixsPWgqYS1pKm4sYz10Kl8rZSpkK3MqbDtyZXR1cm4gYz8oYz0xL2MsbmV3IGcoXypjLCgtbyplK3MqaCkqYywociplLXMqaSkqYyxkKmMsKG8qdC1zKm4pKmMsKC1yKnQrcyphKSpjLGwqYywoLWgqdCtlKm4pKmMsKGkqdC1lKmEpKmMpKTooY29uc29sZS53YXJuKCJVbmFibGUgdG8gaW52ZXJ0IE1hdDMiKSxudWxsKX1pbnZlcnRJblBsYWNlKCl7Y29uc3QgdD10aGlzLl9fZGF0YVswXSxlPXRoaXMuX19kYXRhWzFdLHM9dGhpcy5fX2RhdGFbMl0sYT10aGlzLl9fZGF0YVszXSxpPXRoaXMuX19kYXRhWzRdLHI9dGhpcy5fX2RhdGFbNV0sbj10aGlzLl9fZGF0YVs2XSxoPXRoaXMuX19kYXRhWzddLG89dGhpcy5fX2RhdGFbOF0sXz1vKmktcipoLGQ9LW8qYStyKm4sbD1oKmEtaSpuLGM9dCpfK2UqZCtzKmw7cmV0dXJuIGM/KGM9MS9jLHRoaXMuc2V0KF8qYywoLW8qZStzKmgpKmMsKHIqZS1zKmkpKmMsZCpjLChvKnQtcypuKSpjLCgtcip0K3MqYSkqYyxsKmMsKC1oKnQrZSpuKSpjLChpKnQtZSphKSpjKSwhMCk6KGNvbnNvbGUud2FybigiVW5hYmxlIHRvIGludmVydCBNYXQzIiksITEpfXRyYW5zcG9zZSgpe3JldHVybiBnKHRoaXMuX19kYXRhWzBdLHRoaXMuX19kYXRhWzNdLHRoaXMuX19kYXRhWzZdLHRoaXMuX19kYXRhWzFdLHRoaXMuX19kYXRhWzRdLHRoaXMuX19kYXRhWzddLHRoaXMuX19kYXRhWzJdLHRoaXMuX19kYXRhWzVdLHRoaXMuX19kYXRhWzhdKX10cmFuc3Bvc2VJblBsYWNlKCl7Y29uc3QgdD10aGlzLl9fZGF0YVsxXSxlPXRoaXMuX19kYXRhWzJdLHM9dGhpcy5fX2RhdGFbNV07dGhpcy5fX2RhdGFbMV09dGhpcy5fX2RhdGFbM10sdGhpcy5fX2RhdGFbMl09dGhpcy5fX2RhdGFbNl0sdGhpcy5fX2RhdGFbM109dCx0aGlzLl9fZGF0YVs1XT10aGlzLl9fZGF0YVs3XSx0aGlzLl9fZGF0YVs2XT1lLHRoaXMuX19kYXRhWzddPXN9dHJhbnNmb3JtVmVjMyh0KXtyZXR1cm4gbmV3IGwodGhpcy5fX2RhdGFbMF0qdC54K3RoaXMuX19kYXRhWzFdKnQueSt0aGlzLl9fZGF0YVsyXSp0LnosdGhpcy5fX2RhdGFbM10qdC54K3RoaXMuX19kYXRhWzRdKnQueSt0aGlzLl9fZGF0YVs1XSp0LnosdGhpcy5fX2RhdGFbNl0qdC54K3RoaXMuX19kYXRhWzddKnQueSt0aGlzLl9fZGF0YVs4XSp0LnopfWNsb25lKCl7cmV0dXJuIG5ldyBnKHRoaXMuX19kYXRhWzBdLHRoaXMuX19kYXRhWzFdLHRoaXMuX19kYXRhWzJdLHRoaXMuX19kYXRhWzNdLHRoaXMuX19kYXRhWzRdLHRoaXMuX19kYXRhWzVdLHRoaXMuX19kYXRhWzZdLHRoaXMuX19kYXRhWzddLHRoaXMuX19kYXRhWzhdLHRoaXMuX19kYXRhWzldKX1zdGF0aWMgY3JlYXRlKC4uLnQpe3JldHVybiBuZXcgZyguLi50KX1zdGF0aWMgY3JlYXRlRnJvbUZsb2F0MzJCdWZmZXIodCxlPTApe3JldHVybiBjb25zb2xlLndhcm4oIkRlcHJlY2F0ZWQsIHVzZSAjY3JlYXRlRnJvbUJ1ZmZlciBpbnN0ZWFkIiksdGhpcy5jcmVhdGVGcm9tQnVmZmVyKHQsNCplKX1zdGF0aWMgY3JlYXRlRnJvbUJ1ZmZlcih0LGUpe3JldHVybiBuZXcgZyhuZXcgRmxvYXQzMkFycmF5KHQsZSw5KSl9cmVhZEJpbmFyeSh0KXt0aGlzLl9fZGF0YT10LmxvYWRGbG9hdDMyQXJyYXkoOSl9dG9KU09OKCl7cmV0dXJuIHRoaXMuX19kYXRhfWZyb21KU09OKHQpe3RoaXMuX19kYXRhPW5ldyBGbG9hdDMyQXJyYXkodCl9dG9TdHJpbmcoKXtyZXR1cm4gdGhpcy50b0pTT04oKS50b1N0cmluZygpfX1uKCJNYXQzIixnKTtjbGFzcyB5IGV4dGVuZHMgZXtjb25zdHJ1Y3Rvcih0PTEsZT0wLHM9MCxhPTAsaT0wLHI9MSxuPTAsaD0wLG89MCxfPTAsZD0xLGw9MCxjPTAsdT0wLGY9MCxtPTEpe2lmKHN1cGVyKCksdCBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSl0aGlzLl9fZGF0YT10O2Vsc2UgaWYodCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXtjb25zdCBzPXQsYT1lO3RoaXMuX19kYXRhPW5ldyBGbG9hdDMyQXJyYXkocyxhLDE2KX1lbHNlIHRoaXMuX19kYXRhPW5ldyBGbG9hdDMyQXJyYXkoMTYpLHRoaXMuc2V0KHQsZSxzLGEsaSxyLG4saCxvLF8sZCxsLGMsdSxmLG0pfWdldCBtMDAoKXtyZXR1cm4gdGhpcy5fX2RhdGFbMF19c2V0IG0wMCh0KXt0aGlzLl9fZGF0YVswXT10fWdldCBtMDEoKXtyZXR1cm4gdGhpcy5fX2RhdGFbMV19c2V0IG0wMSh0KXt0aGlzLl9fZGF0YVsxXT10fWdldCBtMDIoKXtyZXR1cm4gdGhpcy5fX2RhdGFbMl19c2V0IG0wMih0KXt0aGlzLl9fZGF0YVsyXT10fWdldCBtMDMoKXtyZXR1cm4gdGhpcy5fX2RhdGFbM119c2V0IG0wMyh0KXt0aGlzLl9fZGF0YVszXT10fWdldCBtMTAoKXtyZXR1cm4gdGhpcy5fX2RhdGFbNF19c2V0IG0xMCh0KXt0aGlzLl9fZGF0YVs0XT10fWdldCBtMTEoKXtyZXR1cm4gdGhpcy5fX2RhdGFbNV19c2V0IG0xMSh0KXt0aGlzLl9fZGF0YVs1XT10fWdldCBtMTIoKXtyZXR1cm4gdGhpcy5fX2RhdGFbNl19c2V0IG0xMih0KXt0aGlzLl9fZGF0YVs2XT10fWdldCBtMTMoKXtyZXR1cm4gdGhpcy5fX2RhdGFbN119c2V0IG0xMyh0KXt0aGlzLl9fZGF0YVs3XT10fWdldCBtMjAoKXtyZXR1cm4gdGhpcy5fX2RhdGFbOF19c2V0IG0yMCh0KXt0aGlzLl9fZGF0YVs4XT10fWdldCBtMjEoKXtyZXR1cm4gdGhpcy5fX2RhdGFbOV19c2V0IG0yMSh0KXt0aGlzLl9fZGF0YVs5XT10fWdldCBtMjIoKXtyZXR1cm4gdGhpcy5fX2RhdGFbMTBdfXNldCBtMjIodCl7dGhpcy5fX2RhdGFbMTBdPXR9Z2V0IG0yMygpe3JldHVybiB0aGlzLl9fZGF0YVsxMV19c2V0IG0yMyh0KXt0aGlzLl9fZGF0YVsxMV09dH1nZXQgbTMwKCl7cmV0dXJuIHRoaXMuX19kYXRhWzEyXX1zZXQgbTMwKHQpe3RoaXMuX19kYXRhWzEyXT10fWdldCBtMzEoKXtyZXR1cm4gdGhpcy5fX2RhdGFbMTNdfXNldCBtMzEodCl7dGhpcy5fX2RhdGFbMTNdPXR9Z2V0IG0zMigpe3JldHVybiB0aGlzLl9fZGF0YVsxNF19c2V0IG0zMih0KXt0aGlzLl9fZGF0YVsxNF09dH1nZXQgbTMzKCl7cmV0dXJuIHRoaXMuX19kYXRhWzE1XX1zZXQgbTMzKHQpe3RoaXMuX19kYXRhWzE1XT10fWdldCB4QXhpcygpe3JldHVybiBsLmNyZWF0ZUZyb21CdWZmZXIodGhpcy5fX2RhdGEuYnVmZmVyLDApfXNldCB4QXhpcyh0KXt0aGlzLnhBeGlzLnNldCh0LngsdC55LHQueil9Z2V0IHlBeGlzKCl7cmV0dXJuIGwuY3JlYXRlRnJvbUJ1ZmZlcih0aGlzLl9fZGF0YS5idWZmZXIsMTYpfXNldCB5QXhpcyh0KXt0aGlzLnlBeGlzLnNldCh0LngsdC55LHQueil9Z2V0IHpBeGlzKCl7cmV0dXJuIGwuY3JlYXRlRnJvbUJ1ZmZlcih0aGlzLl9fZGF0YS5idWZmZXIsMzIpfXNldCB6QXhpcyh0KXt0aGlzLnpBeGlzLnNldCh0LngsdC55LHQueil9Z2V0IHRyYW5zbGF0aW9uKCl7cmV0dXJuIGwuY3JlYXRlRnJvbUJ1ZmZlcih0aGlzLl9fZGF0YS5idWZmZXIsNDgpfXNldCB0cmFuc2xhdGlvbih0KXt0aGlzLnRyYW5zbGF0aW9uLnNldCh0LngsdC55LHQueil9c2V0KHQ9MSxlPTAscz0wLGE9MCxpPTAscj0xLG49MCxoPTAsbz0wLF89MCxkPTEsbD0wLGM9MCx1PTAsZj0wLG09MSl7dGhpcy5fX2RhdGFbMF09dCx0aGlzLl9fZGF0YVsxXT1lLHRoaXMuX19kYXRhWzJdPXMsdGhpcy5fX2RhdGFbM109YSx0aGlzLl9fZGF0YVs0XT1pLHRoaXMuX19kYXRhWzVdPXIsdGhpcy5fX2RhdGFbNl09bix0aGlzLl9fZGF0YVs3XT1oLHRoaXMuX19kYXRhWzhdPW8sdGhpcy5fX2RhdGFbOV09Xyx0aGlzLl9fZGF0YVsxMF09ZCx0aGlzLl9fZGF0YVsxMV09bCx0aGlzLl9fZGF0YVsxMl09Yyx0aGlzLl9fZGF0YVsxM109dSx0aGlzLl9fZGF0YVsxNF09Zix0aGlzLl9fZGF0YVsxNV09bX1zZXRJZGVudGl0eSgpe3RoaXMuc2V0KCl9c2V0RGF0YUFycmF5KHQpe3RoaXMuX19kYXRhPXR9c2V0RnJvbU1hdDQodCl7dGhpcy5fX2RhdGFbMF09dC5tMDAsdGhpcy5fX2RhdGFbMV09dC5tMDEsdGhpcy5fX2RhdGFbMl09dC5tMDIsdGhpcy5fX2RhdGFbM109dC5tMDMsdGhpcy5fX2RhdGFbNF09dC5tMTAsdGhpcy5fX2RhdGFbNV09dC5tMTEsdGhpcy5fX2RhdGFbNl09dC5tMTIsdGhpcy5fX2RhdGFbN109dC5tMTMsdGhpcy5fX2RhdGFbOF09dC5tMjAsdGhpcy5fX2RhdGFbOV09dC5tMjEsdGhpcy5fX2RhdGFbMTBdPXQubTIyLHRoaXMuX19kYXRhWzExXT10Lm0yMyx0aGlzLl9fZGF0YVsxMl09dC5tMzAsdGhpcy5fX2RhdGFbMTNdPXQubTMxLHRoaXMuX19kYXRhWzE0XT10Lm0zMix0aGlzLl9fZGF0YVsxNV09dC5tMzN9dG9NYXQzKCl7cmV0dXJuIG5ldyBnKHRoaXMuX19kYXRhWzBdLHRoaXMuX19kYXRhWzFdLHRoaXMuX19kYXRhWzJdLHRoaXMuX19kYXRhWzRdLHRoaXMuX19kYXRhWzVdLHRoaXMuX19kYXRhWzZdLHRoaXMuX19kYXRhWzhdLHRoaXMuX19kYXRhWzldLHRoaXMuX19kYXRhWzEwXSl9dHJhbnNwb3NlSW5QbGFjZSgpe2NvbnN0IHQ9dGhpcy5fX2RhdGFbMV0sZT10aGlzLl9fZGF0YVsyXSxzPXRoaXMuX19kYXRhWzNdLGE9dGhpcy5fX2RhdGFbNl0saT10aGlzLl9fZGF0YVs3XSxyPXRoaXMuX19kYXRhWzExXTt0aGlzLl9fZGF0YVsxXT10aGlzLl9fZGF0YVs0XSx0aGlzLl9fZGF0YVsyXT10aGlzLl9fZGF0YVs4XSx0aGlzLl9fZGF0YVszXT10aGlzLl9fZGF0YVsxMl0sdGhpcy5fX2RhdGFbNF09dCx0aGlzLl9fZGF0YVs2XT10aGlzLl9fZGF0YVs5XSx0aGlzLl9fZGF0YVs3XT10aGlzLl9fZGF0YVsxM10sdGhpcy5fX2RhdGFbOF09ZSx0aGlzLl9fZGF0YVs5XT1hLHRoaXMuX19kYXRhWzExXT10aGlzLl9fZGF0YVsxNF0sdGhpcy5fX2RhdGFbMTJdPXMsdGhpcy5fX2RhdGFbMTNdPWksdGhpcy5fX2RhdGFbMTRdPXJ9dHJhbnNwb3NlKCl7cmV0dXJuIG5ldyB5KHRoaXMuX19kYXRhWzBdLHRoaXMuX19kYXRhWzRdLHRoaXMuX19kYXRhWzhdLHRoaXMuX19kYXRhWzEyXSx0aGlzLl9fZGF0YVsxXSx0aGlzLl9fZGF0YVs1XSx0aGlzLl9fZGF0YVs5XSx0aGlzLl9fZGF0YVsxM10sdGhpcy5fX2RhdGFbMl0sdGhpcy5fX2RhdGFbNl0sdGhpcy5fX2RhdGFbMTBdLHRoaXMuX19kYXRhWzE0XSx0aGlzLl9fZGF0YVszXSx0aGlzLl9fZGF0YVs3XSx0aGlzLl9fZGF0YVsxMV0sdGhpcy5fX2RhdGFbMTVdKX1pbnZlcnNlKCl7Y29uc3QgdD10aGlzLl9fZGF0YVswXSxlPXRoaXMuX19kYXRhWzFdLHM9dGhpcy5fX2RhdGFbMl0sYT10aGlzLl9fZGF0YVszXSxpPXRoaXMuX19kYXRhWzRdLHI9dGhpcy5fX2RhdGFbNV0sbj10aGlzLl9fZGF0YVs2XSxoPXRoaXMuX19kYXRhWzddLG89dGhpcy5fX2RhdGFbOF0sXz10aGlzLl9fZGF0YVs5XSxkPXRoaXMuX19kYXRhWzEwXSxsPXRoaXMuX19kYXRhWzExXSxjPXRoaXMuX19kYXRhWzEyXSx1PXRoaXMuX19kYXRhWzEzXSxmPXRoaXMuX19kYXRhWzE0XSxtPXRoaXMuX19kYXRhWzE1XSxnPXQqci1lKmkscD10Km4tcyppLHg9dCpoLWEqaSxiPWUqbi1zKnIsdz1lKmgtYSpyLEk9cypoLWEqbixOPW8qdS1fKmMsRj1vKmYtZCpjLFY9byptLWwqYyx6PV8qZi1kKnUsQT1fKm0tbCp1LE09ZCptLWwqZjtsZXQgRT1nKk0tcCpBK3gqeitiKlYtdypGK0kqTjtyZXR1cm4gRT8oRT0xL0UsbmV3IHkoKHIqTS1uKkEraCp6KSpFLChzKkEtZSpNLWEqeikqRSwodSpJLWYqdyttKmIpKkUsKGQqdy1fKkktbCpiKSpFLChuKlYtaSpNLWgqRikqRSwodCpNLXMqVithKkYpKkUsKGYqeC1jKkktbSpwKSpFLChvKkktZCp4K2wqcCkqRSwoaSpBLXIqVitoKk4pKkUsKGUqVi10KkEtYSpOKSpFLChjKnctdSp4K20qZykqRSwoXyp4LW8qdy1sKmcpKkUsKHIqRi1pKnotbipOKSpFLCh0KnotZSpGK3MqTikqRSwodSpwLWMqYi1mKmcpKkUsKG8qYi1fKnArZCpnKSpFKSk6KGNvbnNvbGUud2FybigiVW5hYmxlIHRvIGludmVydCBNYXQ0IiksbnVsbCl9aW52ZXJ0SW5QbGFjZSgpe2NvbnN0IHQ9dGhpcy5fX2RhdGFbMF0sZT10aGlzLl9fZGF0YVsxXSxzPXRoaXMuX19kYXRhWzJdLGE9dGhpcy5fX2RhdGFbM10saT10aGlzLl9fZGF0YVs0XSxyPXRoaXMuX19kYXRhWzVdLG49dGhpcy5fX2RhdGFbNl0saD10aGlzLl9fZGF0YVs3XSxvPXRoaXMuX19kYXRhWzhdLF89dGhpcy5fX2RhdGFbOV0sZD10aGlzLl9fZGF0YVsxMF0sbD10aGlzLl9fZGF0YVsxMV0sYz10aGlzLl9fZGF0YVsxMl0sdT10aGlzLl9fZGF0YVsxM10sZj10aGlzLl9fZGF0YVsxNF0sbT10aGlzLl9fZGF0YVsxNV0sZz10KnItZSppLHk9dCpuLXMqaSxwPXQqaC1hKmkseD1lKm4tcypyLGI9ZSpoLWEqcix3PXMqaC1hKm4sST1vKnUtXypjLE49bypmLWQqYyxGPW8qbS1sKmMsVj1fKmYtZCp1LHo9XyptLWwqdSxBPWQqbS1sKmY7bGV0IE09ZypBLXkqeitwKlYreCpGLWIqTit3Kkk7cmV0dXJuIE0/KE09MS9NLHRoaXMuc2V0KChyKkEtbip6K2gqVikqTSwocyp6LWUqQS1hKlYpKk0sKHUqdy1mKmIrbSp4KSpNLChkKmItXyp3LWwqeCkqTSwobipGLWkqQS1oKk4pKk0sKHQqQS1zKkYrYSpOKSpNLChmKnAtYyp3LW0qeSkqTSwobyp3LWQqcCtsKnkpKk0sKGkqei1yKkYraCpJKSpNLChlKkYtdCp6LWEqSSkqTSwoYypiLXUqcCttKmcpKk0sKF8qcC1vKmItbCpnKSpNLChyKk4taSpWLW4qSSkqTSwodCpWLWUqTitzKkkpKk0sKHUqeS1jKngtZipnKSpNLChvKngtXyp5K2QqZykqTSksITApOihjb25zb2xlLndhcm4oIlVuYWJsZSB0byBpbnZlcnQgTWF0NCIpLCExKX1tdWx0aXBseSh0KXtjb25zdCBlPXRoaXMuX19kYXRhWzBdLHM9dGhpcy5fX2RhdGFbMV0sYT10aGlzLl9fZGF0YVsyXSxpPXRoaXMuX19kYXRhWzNdLHI9dGhpcy5fX2RhdGFbNF0sbj10aGlzLl9fZGF0YVs1XSxoPXRoaXMuX19kYXRhWzZdLG89dGhpcy5fX2RhdGFbN10sXz10aGlzLl9fZGF0YVs4XSxkPXRoaXMuX19kYXRhWzldLGw9dGhpcy5fX2RhdGFbMTBdLGM9dGhpcy5fX2RhdGFbMTFdLHU9dGhpcy5fX2RhdGFbMTJdLGY9dGhpcy5fX2RhdGFbMTNdLG09dGhpcy5fX2RhdGFbMTRdLGc9dGhpcy5fX2RhdGFbMTVdLHA9dC5hc0FycmF5KCk7bGV0IHg9cFswXSxiPXBbMV0sdz1wWzJdLEk9cFszXTtjb25zdCBOPW5ldyB5O3JldHVybiBOLm0wMD14KmUrYipyK3cqXytJKnUsTi5tMDE9eCpzK2Iqbit3KmQrSSpmLE4ubTAyPXgqYStiKmgrdypsK0kqbSxOLm0wMz14KmkrYipvK3cqYytJKmcseD1wWzRdLGI9cFs1XSx3PXBbNl0sST1wWzddLE4ubTEwPXgqZStiKnIrdypfK0kqdSxOLm0xMT14KnMrYipuK3cqZCtJKmYsTi5tMTI9eCphK2IqaCt3KmwrSSptLE4ubTEzPXgqaStiKm8rdypjK0kqZyx4PXBbOF0sYj1wWzldLHc9cFsxMF0sST1wWzExXSxOLm0yMD14KmUrYipyK3cqXytJKnUsTi5tMjE9eCpzK2Iqbit3KmQrSSpmLE4ubTIyPXgqYStiKmgrdypsK0kqbSxOLm0yMz14KmkrYipvK3cqYytJKmcseD1wWzEyXSxiPXBbMTNdLHc9cFsxNF0sST1wWzE1XSxOLm0zMD14KmUrYipyK3cqXytJKnUsTi5tMzE9eCpzK2Iqbit3KmQrSSpmLE4ubTMyPXgqYStiKmgrdypsK0kqbSxOLm0zMz14KmkrYipvK3cqYytJKmcsTn1tdWx0aXBseUluUGxhY2UodCl7Y29uc3QgZT10aGlzLmFzQXJyYXkoKSxzPWVbMF0sYT1lWzFdLGk9ZVsyXSxyPWVbM10sbj1lWzRdLGg9ZVs1XSxvPWVbNl0sXz1lWzddLGQ9ZVs4XSxsPWVbOV0sYz1lWzEwXSx1PWVbMTFdLGY9ZVsxMl0sbT1lWzEzXSxnPWVbMTRdLHk9ZVsxNV0scD10LmFzQXJyYXkoKTtsZXQgeD1wWzBdLGI9cFsxXSx3PXBbMl0sST1wWzNdO3JldHVybiB0aGlzLm0wMD14KnMrYipuK3cqZCtJKmYsdGhpcy5tMDE9eCphK2IqaCt3KmwrSSptLHRoaXMubTAyPXgqaStiKm8rdypjK0kqZyx0aGlzLm0wMz14KnIrYipfK3cqdStJKnkseD1wWzRdLGI9cFs1XSx3PXBbNl0sST1wWzddLHRoaXMubTEwPXgqcytiKm4rdypkK0kqZix0aGlzLm0xMT14KmErYipoK3cqbCtJKm0sdGhpcy5tMTI9eCppK2Iqbyt3KmMrSSpnLHRoaXMubTEzPXgqcitiKl8rdyp1K0kqeSx4PXBbOF0sYj1wWzldLHc9cFsxMF0sST1wWzExXSx0aGlzLm0yMD14KnMrYipuK3cqZCtJKmYsdGhpcy5tMjE9eCphK2IqaCt3KmwrSSptLHRoaXMubTIyPXgqaStiKm8rdypjK0kqZyx0aGlzLm0yMz14KnIrYipfK3cqdStJKnkseD1wWzEyXSxiPXBbMTNdLHc9cFsxNF0sST1wWzE1XSx0aGlzLm0zMD14KnMrYipuK3cqZCtJKmYsdGhpcy5tMzE9eCphK2IqaCt3KmwrSSptLHRoaXMubTMyPXgqaStiKm8rdypjK0kqZyx0aGlzLm0zMz14KnIrYipfK3cqdStJKnksdGhpc31wb3N0TXVsdGlwbHlJblBsYWNlKHQpe2NvbnN0IGU9dC5hc0FycmF5KCkscz1lWzBdLGE9ZVsxXSxpPWVbMl0scj1lWzNdLG49ZVs0XSxoPWVbNV0sbz1lWzZdLF89ZVs3XSxkPWVbOF0sbD1lWzldLGM9ZVsxMF0sdT1lWzExXSxmPWVbMTJdLG09ZVsxM10sZz1lWzE0XSx5PWVbMTVdLHA9dGhpcy5hc0FycmF5KCk7bGV0IHg9cFswXSxiPXBbMV0sdz1wWzJdLEk9cFszXTtyZXR1cm4gdGhpcy5tMDA9eCpzK2Iqbit3KmQrSSpmLHRoaXMubTAxPXgqYStiKmgrdypsK0kqbSx0aGlzLm0wMj14KmkrYipvK3cqYytJKmcsdGhpcy5tMDM9eCpyK2IqXyt3KnUrSSp5LHg9cFs0XSxiPXBbNV0sdz1wWzZdLEk9cFs3XSx0aGlzLm0xMD14KnMrYipuK3cqZCtJKmYsdGhpcy5tMTE9eCphK2IqaCt3KmwrSSptLHRoaXMubTEyPXgqaStiKm8rdypjK0kqZyx0aGlzLm0xMz14KnIrYipfK3cqdStJKnkseD1wWzhdLGI9cFs5XSx3PXBbMTBdLEk9cFsxMV0sdGhpcy5tMjA9eCpzK2Iqbit3KmQrSSpmLHRoaXMubTIxPXgqYStiKmgrdypsK0kqbSx0aGlzLm0yMj14KmkrYipvK3cqYytJKmcsdGhpcy5tMjM9eCpyK2IqXyt3KnUrSSp5LHg9cFsxMl0sYj1wWzEzXSx3PXBbMTRdLEk9cFsxNV0sdGhpcy5tMzA9eCpzK2Iqbit3KmQrSSpmLHRoaXMubTMxPXgqYStiKmgrdypsK0kqbSx0aGlzLm0zMj14KmkrYipvK3cqYytJKmcsdGhpcy5tMzM9eCpyK2IqXyt3KnUrSSp5LHRoaXN9dHJhbnNsYXRlSW5QbGFjZSh0KXtjb25zdCBlPXRoaXMuX19kYXRhLHM9dC54LGE9dC55LGk9dC56O3JldHVybiBlWzEyXT1lWzBdKnMrZVs0XSphK2VbOF0qaStlWzEyXSxlWzEzXT1lWzFdKnMrZVs1XSphK2VbOV0qaStlWzEzXSxlWzE0XT1lWzJdKnMrZVs2XSphK2VbMTBdKmkrZVsxNF0sZVsxNV09ZVszXSpzK2VbN10qYStlWzExXSppK2VbMTVdLHRoaXN9c2V0TG9va0F0KHQsZSxzKXtjb25zdCBhPXQuc3VidHJhY3QoZSksaT1hLmxlbmd0aCgpO2lmKGk8TnVtYmVyLkVQU0lMT04pcmV0dXJuIHZvaWQgdGhpcy5zZXRJZGVudGl0eSgpO2Euc2NhbGVJblBsYWNlKDEvaSk7Y29uc3Qgcj1zLmNyb3NzKGEpLG49ci5sZW5ndGgoKTtuPk51bWJlci5FUFNJTE9OJiZyLnNjYWxlSW5QbGFjZSgxL24pO2NvbnN0IGg9YS5jcm9zcyhyKSxvPWgubGVuZ3RoKCk7bz5OdW1iZXIuRVBTSUxPTiYmaC5zY2FsZUluUGxhY2UoMS9vKSx0aGlzLnNldChyLngsci55LHIueiwwLGgueCxoLnksaC56LDAsYS54LGEueSxhLnosMCx0LngsdC55LHQueiwxKX1zZXRSb3RhdGlvbih0LGUpe2NvbnN0IHM9dC5sZW5ndGgoKTtpZihNYXRoLmFicyhzKTxOdW1iZXIuRVBTSUxPTilyZXR1cm4gbnVsbDtjb25zdCBhPXQueC9zLGk9dC55L3Mscj10LnovcyxuPU1hdGguc2luKGUpLGg9TWF0aC5jb3MoZSksbz0xLWgsXz10aGlzLl9fZGF0YTtyZXR1cm4gX1swXT1hKmEqbytoLF9bMV09aSphKm8rcipuLF9bMl09ciphKm8taSpuLF9bM109MCxfWzRdPWEqaSpvLXIqbixfWzVdPWkqaSpvK2gsX1s2XT1yKmkqbythKm4sX1s3XT0wLF9bOF09YSpyKm8raSpuLF9bOV09aSpyKm8tYSpuLF9bMTBdPXIqcipvK2gsX1sxMV09MCxfWzEyXT0wLF9bMTNdPTAsX1sxNF09MCxfWzE1XT0xLHRoaXN9c2V0WFJvdGF0aW9uKHQpe2NvbnN0IGU9TWF0aC5zaW4odCkscz1NYXRoLmNvcyh0KSxhPXRoaXMuX19kYXRhO3JldHVybiBhWzBdPTEsYVsxXT0wLGFbMl09MCxhWzNdPTAsYVs0XT0wLGFbNV09cyxhWzZdPWUsYVs3XT0wLGFbOF09MCxhWzldPS1lLGFbMTBdPXMsYVsxMV09MCxhWzEyXT0wLGFbMTNdPTAsYVsxNF09MCxhWzE1XT0xLHRoaXN9c2V0WVJvdGF0aW9uKHQpe2NvbnN0IGU9TWF0aC5zaW4odCkscz1NYXRoLmNvcyh0KSxhPXRoaXMuX19kYXRhO3JldHVybiBhWzBdPXMsYVsxXT0wLGFbMl09LWUsYVszXT0wLGFbNF09MCxhWzVdPTEsYVs2XT0wLGFbN109MCxhWzhdPWUsYVs5XT0wLGFbMTBdPXMsYVsxMV09MCxhWzEyXT0wLGFbMTNdPTAsYVsxNF09MCxhWzE1XT0xLHRoaXN9c2V0WlJvdGF0aW9uKHQpe2NvbnN0IGU9TWF0aC5zaW4odCkscz1NYXRoLmNvcyh0KSxhPXRoaXMuX19kYXRhO3JldHVybiBhWzBdPXMsYVsxXT1lLGFbMl09MCxhWzNdPTAsYVs0XT0tZSxhWzVdPXMsYVs2XT0wLGFbN109MCxhWzhdPTAsYVs5XT0wLGFbMTBdPTEsYVsxMV09MCxhWzEyXT0wLGFbMTNdPTAsYVsxNF09MCxhWzE1XT0xLHRoaXN9dHJhbnNmb3JtVmVjNCh0KXtjb25zdCBlPXRoaXMuX19kYXRhLHM9dC54LGE9dC55LGk9dC56LHI9dC50O3JldHVybiBuZXcgVmVjNChlWzBdKnMrZVs0XSphK2VbOF0qaStlWzEyXSpyLGVbMV0qcytlWzVdKmErZVs5XSppK2VbMTNdKnIsZVsyXSpzK2VbNl0qYStlWzEwXSppK2VbMTRdKnIsZVszXSpzK2VbN10qYStlWzExXSppK2VbMTVdKnIpfXRyYW5zZm9ybVZlYzModCl7Y29uc3QgZT10aGlzLl9fZGF0YSxzPXQueCxhPXQueSxpPXQuejtyZXR1cm4gbmV3IGwoZVswXSpzK2VbNF0qYStlWzhdKmkrZVsxMl0sZVsxXSpzK2VbNV0qYStlWzldKmkrZVsxM10sZVsyXSpzK2VbNl0qYStlWzEwXSppK2VbMTRdKX1yb3RhdGVWZWMzKHQpe2NvbnN0IGU9dGhpcy5fX2RhdGEscz10LngsYT10LnksaT10Lno7cmV0dXJuIG5ldyBsKGVbMF0qcytlWzRdKmErZVs4XSppLGVbMV0qcytlWzVdKmErZVs5XSppLGVbMl0qcytlWzZdKmErZVsxMF0qaSl9c2V0UGVyc3BlY3RpdmVNYXRyaXgodCxlLHMsYSl7Y29uc3QgaT1NYXRoLnRhbiguNSpNYXRoLlBJLS41KnQpLHI9MS8ocy1hKTt0aGlzLnNldChpL2UsMCwwLDAsMCxpLDAsMCwwLDAsKHMrYSkqciwtMSwwLDAscyphKnIqMiwwKX1zZXRPcnRob2dyYXBoaWNNYXRyaXgodCxlLHMsYSxpLHIpe2NvbnN0IG49MS8odC1lKSxoPTEvKHMtYSksbz0xLyhpLXIpO3RoaXMuc2V0KC0yKm4sMCwwLDAsMCwtMipoLDAsMCwwLDAsMipvLDAsKHQrZSkqbiwoYStzKSpoLChyK2kpKm8sMSl9c2V0U2NhbGUodCxlLHMpe3QgaW5zdGFuY2VvZiBsP3RoaXMuc2V0KHQueCwwLDAsMCwwLHQueSwwLDAsMCwwLHQueiwwLDAsMCwwLDEpOnRoaXMuc2V0KHQsMCwwLDAsMCxlLDAsMCwwLDAscywwLDAsMCwwLDEpfXNldEZyb21NYXQzeDRBcnJheSh0KXt0aGlzLnNldCh0WzBdLHRbMV0sdFsyXSwwLHRbM10sdFs0XSx0WzVdLDAsdFs2XSx0WzddLHRbOF0sMCx0WzldLHRbMTBdLHRbMTFdLDEpfXN0YXRpYyBjcmVhdGVGcm9tRmxvYXQzMkJ1ZmZlcih0LGU9MCl7cmV0dXJuIGNvbnNvbGUud2FybigiRGVwcmVjYXRlZCwgdXNlICNjcmVhdGVGcm9tQnVmZmVyIGluc3RlYWQiKSx0aGlzLmNyZWF0ZUZyb21CdWZmZXIodCw0KmUpfXN0YXRpYyBjcmVhdGVGcm9tQnVmZmVyKHQsZSl7cmV0dXJuIG5ldyB5KG5ldyBGbG9hdDMyQXJyYXkodCxlLDE2KSl9Y2xvbmUoKXtyZXR1cm4gbmV3IHkodGhpcy5fX2RhdGFbMF0sdGhpcy5fX2RhdGFbMV0sdGhpcy5fX2RhdGFbMl0sdGhpcy5fX2RhdGFbM10sdGhpcy5fX2RhdGFbNF0sdGhpcy5fX2RhdGFbNV0sdGhpcy5fX2RhdGFbNl0sdGhpcy5fX2RhdGFbN10sdGhpcy5fX2RhdGFbOF0sdGhpcy5fX2RhdGFbOV0sdGhpcy5fX2RhdGFbMTBdLHRoaXMuX19kYXRhWzExXSx0aGlzLl9fZGF0YVsxMl0sdGhpcy5fX2RhdGFbMTNdLHRoaXMuX19kYXRhWzE0XSx0aGlzLl9fZGF0YVsxNV0pfXN0YXRpYyBjcmVhdGUoLi4udCl7cmV0dXJuIG5ldyB5KC4uLnQpfXRvSlNPTigpe3JldHVybiB0aGlzLl9fZGF0YX1mcm9tSlNPTih0KXt0IGluc3RhbmNlb2YgQXJyYXk/dGhpcy5fX2RhdGE9bmV3IEZsb2F0MzJBcnJheSh0KTp0IGluc3RhbmNlb2YgT2JqZWN0JiYodGhpcy5fX2RhdGE9bmV3IEZsb2F0MzJBcnJheShPYmplY3QudmFsdWVzKHQpKSl9cmVhZEJpbmFyeSh0KXt0aGlzLl9fZGF0YT10LmxvYWRGbG9hdDMyQXJyYXkoMTYpfX1uKCJNYXQ0Iix5KTtjbGFzcyBwIGV4dGVuZHMgZXtjb25zdHJ1Y3Rvcih0PTAsZT0wLHM9MCxhPTEpe2lmKHN1cGVyKCksdCBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSl0aGlzLl9fZGF0YT10O2Vsc2UgaWYodCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXtjb25zb2xlLndhcm4oImRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgbmV3IFZlYzQobmV3IEZsb2F0MzJBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIDQpKSIpO2NvbnN0IHM9dCxhPWU7dGhpcy5fX2RhdGE9bmV3IEZsb2F0MzJBcnJheShzLGEsNCl9ZWxzZSBpZih0aGlzLl9fZGF0YT1uZXcgRmxvYXQzMkFycmF5KDQpLCJvYmplY3QiPT10eXBlb2YgdCl7dGhpcy5fX2RhdGFbMF09MCx0aGlzLl9fZGF0YVsxXT0wLHRoaXMuX19kYXRhWzJdPTAsdGhpcy5fX2RhdGFbM109MTtmb3IoY29uc3QgZSBpbiB0KUFycmF5LmlzQXJyYXkodFtlXSk/dGhpc1tlXS5jYWxsKHRoaXMsLi4udFtlXSk6dGhpc1tlXS5jYWxsKHRoaXMsdFtlXSl9ZWxzZSB0aGlzLl9fZGF0YVswXT10LHRoaXMuX19kYXRhWzFdPWUsdGhpcy5fX2RhdGFbMl09cyx0aGlzLl9fZGF0YVszXT1hfWdldCB4KCl7cmV0dXJuIHRoaXMuX19kYXRhWzBdfXNldCB4KHQpe3RoaXMuX19kYXRhWzBdPXR9Z2V0IHkoKXtyZXR1cm4gdGhpcy5fX2RhdGFbMV19c2V0IHkodCl7dGhpcy5fX2RhdGFbMV09dH1nZXQgeigpe3JldHVybiB0aGlzLl9fZGF0YVsyXX1zZXQgeih0KXt0aGlzLl9fZGF0YVsyXT10fWdldCB3KCl7cmV0dXJuIHRoaXMuX19kYXRhWzNdfXNldCB3KHQpe3RoaXMuX19kYXRhWzNdPXR9c2V0KHQsZSxzLGEpe3RoaXMuX19kYXRhWzBdPXQsdGhpcy5fX2RhdGFbMV09ZSx0aGlzLl9fZGF0YVsyXT1zLHRoaXMuX19kYXRhWzNdPWF9c2V0RGF0YUFycmF5KHQpe3RoaXMuX19kYXRhPXR9c2V0RnJvbU90aGVyKHQpe3RoaXMuX19kYXRhWzBdPXQueCx0aGlzLl9fZGF0YVsxXT10LnksdGhpcy5fX2RhdGFbMl09dC56LHRoaXMuX19kYXRhWzNdPXQud31zZXRGcm9tRXVsZXJBbmdsZXModCl7Y29uc3QgZT1uZXcgbDtzd2l0Y2godC5vcmRlcil7Y2FzZSAwOmUuc2V0KHQueCwtdC55LHQueik7YnJlYWs7Y2FzZSAxOmUuc2V0KHQueSwtdC56LHQueCk7YnJlYWs7Y2FzZSAyOmUuc2V0KHQueiwtdC54LHQueSk7YnJlYWs7Y2FzZSAzOmUuc2V0KHQueCx0LnosdC55KTticmVhaztjYXNlIDQ6ZS5zZXQodC56LHQueSx0LngpO2JyZWFrO2Nhc2UgNTplLnNldCh0LnksdC54LHQueik7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoIkludmFsaWQgRXVsZXJBbmdsZXMgb3JkZXI6Iix0Lm9yZGVyKX1jb25zdCBzPS41KmUueCxhPS41KmUueSxpPS41KmUueixyPU1hdGguY29zKHMpLG49TWF0aC5jb3MoYSksaD1NYXRoLmNvcyhpKSxvPU1hdGguc2luKHMpLF89TWF0aC5zaW4oYSksZD1NYXRoLnNpbihpKSxjPXIqaCx1PXIqZCxmPW8qaCxtPW8qZCxnPW4qZi1fKnUseT1uKm0rXypjLHA9bip1LV8qZjtzd2l0Y2godGhpcy53PW4qYytfKm0sdC5vcmRlcil7Y2FzZSAwOnRoaXMueD1nLHRoaXMueT0teSx0aGlzLno9cDticmVhaztjYXNlIDE6dGhpcy54PXAsdGhpcy55PWcsdGhpcy56PS15O2JyZWFrO2Nhc2UgMjp0aGlzLng9LXksdGhpcy55PXAsdGhpcy56PWc7YnJlYWs7Y2FzZSAzOnRoaXMueD1nLHRoaXMueT1wLHRoaXMuej15O2JyZWFrO2Nhc2UgNDp0aGlzLng9cCx0aGlzLnk9eSx0aGlzLno9ZzticmVhaztjYXNlIDU6dGhpcy54PXksdGhpcy55PWcsdGhpcy56PXA7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoIkludmFsaWQgRXVsZXJBbmdsZXMgb3JkZXI6Iix0Lm9yZGVyKX19dG9FdWxlckFuZ2xlcyh0KXtjb25zdCBlPW5ldyBsO3N3aXRjaCh0KXtjYXNlIDA6ZS5zZXQodGhpcy56LHRoaXMueCx0aGlzLnkpO2JyZWFrO2Nhc2UgMTplLnNldCh0aGlzLngsdGhpcy55LHRoaXMueik7YnJlYWs7Y2FzZSAyOmUuc2V0KHRoaXMueSx0aGlzLnosdGhpcy54KTticmVhaztjYXNlIDM6ZS5zZXQodGhpcy55LC10aGlzLngsdGhpcy56KTticmVhaztjYXNlIDQ6ZS5zZXQodGhpcy54LC10aGlzLnosdGhpcy55KTticmVhaztjYXNlIDU6ZS5zZXQodGhpcy56LC10aGlzLnksdGhpcy54KTticmVhaztkZWZhdWx0OnRocm93IG5ldyBFcnJvcigiSW52YWxpZCByb3RhdGlvbiBvcmRlcjoiK3QpfWNvbnN0IHM9bmV3IGwsYT1lLngqZS55K2Uueip0aGlzLnc7aWYoYT4uNDk5OTkpcy55PTIqTWF0aC5hdGFuMihlLngsdGhpcy53KSxzLno9LjUqTWF0aC5QSSxzLng9MDtlbHNlIGlmKGE8LS40OTk5OSlzLnk9LTIqTWF0aC5hdGFuMihlLngsdGhpcy53KSxzLno9LS41Kk1hdGguUEkscy54PTA7ZWxzZXtjb25zdCB0PWUueCplLngsaT1lLnkqZS55LHI9ZS56KmUuejtzLnk9TWF0aC5hdGFuMigyKmUueSp0aGlzLnctMiplLngqZS56LDEtMippLTIqcikscy56PU1hdGguYXNpbigyKmEpLHMueD1NYXRoLmF0YW4yKDIqZS54KnRoaXMudy0yKmUueSplLnosMS0yKnQtMipyKX1zd2l0Y2godCl7Y2FzZSAwOnJldHVybiBuZXcgbShzLnkscy56LHMueCx0KTtjYXNlIDE6cmV0dXJuIG5ldyBtKHMueCxzLnkscy56LHQpO2Nhc2UgMjpyZXR1cm4gbmV3IG0ocy56LHMueCxzLnksdCk7Y2FzZSAzOnJldHVybiBuZXcgbSgtcy55LHMueCxzLnosdCk7Y2FzZSA0OnJldHVybiBuZXcgbShzLngscy56LC1zLnksdCk7Y2FzZSA1OnJldHVybiBuZXcgbShzLnosLXMueSxzLngsdCl9fXNldEZyb21BeGlzQW5kQW5nbGUodCxlKXtjb25zdCBzPWUvMixhPXQubm9ybWFsaXplKCkuc2NhbGUoTWF0aC5zaW4ocykpO3RoaXMuc2V0KGEueCxhLnksYS56LE1hdGguY29zKHMpKX1zZXRGcm9tRGlyZWN0aW9uQW5kVXB2ZWN0b3IodCxlKXtjb25zdCBzPW5ldyBnO3Muc2V0RnJvbURpcmVjdGlvbkFuZFVwdmVjdG9yKHQsZSksdGhpcy5zZXRGcm9tTWF0MyhzKX1zZXRGcm9tMlZlY3RvcnModCxlKXtjb25zdCBzPXQuY3Jvc3MoZSksYT10LmRvdChlKSxpPU1hdGguc3FydCgyKigxK2EpKTt0aGlzLnNldChzLngvaSxzLnkvaSxzLnovaSxpLzIpLHRoaXMubm9ybWFsaXplSW5QbGFjZSgpfXNldEZyb21NYXQzKHQpe2NvbnN0IGU9dC5fX2RhdGFbMF0rdC5fX2RhdGFbNF0rdC5fX2RhdGFbOF07bGV0IHM7aWYoZT4wKXM9TWF0aC5zcXJ0KGUrMSksdGhpcy5fX2RhdGFbM109LjUqcyxzPS41L3MsdGhpcy5fX2RhdGFbMF09KHQuX19kYXRhWzVdLXQuX19kYXRhWzddKSpzLHRoaXMuX19kYXRhWzFdPSh0Ll9fZGF0YVs2XS10Ll9fZGF0YVsyXSkqcyx0aGlzLl9fZGF0YVsyXT0odC5fX2RhdGFbMV0tdC5fX2RhdGFbM10pKnM7ZWxzZXtsZXQgZT0wO3QuX19kYXRhWzRdPnQuX19kYXRhWzBdJiYoZT0xKSx0Ll9fZGF0YVs4XT50Ll9fZGF0YVszKmUrZV0mJihlPTIpO2NvbnN0IGE9KGUrMSklMyxpPShlKzIpJTM7cz1NYXRoLnNxcnQodC5fX2RhdGFbMyplK2VdLXQuX19kYXRhWzMqYSthXS10Ll9fZGF0YVszKmkraV0rMSksdGhpcy5fX2RhdGFbZV09LjUqcyxzPS41L3MsdGhpcy5fX2RhdGFbM109KHQuX19kYXRhWzMqYStpXS10Ll9fZGF0YVszKmkrYV0pKnMsdGhpcy5fX2RhdGFbYV09KHQuX19kYXRhWzMqYStlXSt0Ll9fZGF0YVszKmUrYV0pKnMsdGhpcy5fX2RhdGFbaV09KHQuX19kYXRhWzMqaStlXSt0Ll9fZGF0YVszKmUraV0pKnN9dGhpcy5ub3JtYWxpemVJblBsYWNlKCl9c2V0RnJvbU1hdDQodCl7Y29uc3QgZT10Ll9fZGF0YVswXSt0Ll9fZGF0YVs1XSt0Ll9fZGF0YVsxMF07bGV0IHM7aWYoZT4wKXM9TWF0aC5zcXJ0KGUrMSksdGhpcy5fX2RhdGFbM109LjUqcyxzPS41L3MsdGhpcy5fX2RhdGFbMF09KHQuX19kYXRhWzZdLXQuX19kYXRhWzldKSpzLHRoaXMuX19kYXRhWzFdPSh0Ll9fZGF0YVs4XS10Ll9fZGF0YVsyXSkqcyx0aGlzLl9fZGF0YVsyXT0odC5fX2RhdGFbMV0tdC5fX2RhdGFbNF0pKnM7ZWxzZXtsZXQgZT0wO3QuX19kYXRhWzVdPnQuX19kYXRhWzBdJiYoZT0xKSx0Ll9fZGF0YVsxMF0+dC5fX2RhdGFbNCplK2VdJiYoZT0yKTtjb25zdCBhPShlKzEpJTMsaT0oZSsyKSUzO3M9TWF0aC5zcXJ0KHQuX19kYXRhWzQqZStlXS10Ll9fZGF0YVs0KmErYV0tdC5fX2RhdGFbNCppK2ldKzEpLHRoaXMuX19kYXRhW2VdPS41KnMscz0uNS9zLHRoaXMuX19kYXRhWzNdPSh0Ll9fZGF0YVs0KmEraV0tdC5fX2RhdGFbNCppK2FdKSpzLHRoaXMuX19kYXRhW2FdPSh0Ll9fZGF0YVs0KmErZV0rdC5fX2RhdGFbNCplK2FdKSpzLHRoaXMuX19kYXRhW2ldPSh0Ll9fZGF0YVs0KmkrZV0rdC5fX2RhdGFbNCplK2ldKSpzfXRoaXMubm9ybWFsaXplSW5QbGFjZSgpfWlzSWRlbnRpdHkoKXtyZXR1cm4gdGhpcy5nZXRBbmdsZSgpPE51bWJlci5FUFNJTE9OfWdldEFuZ2xlKCl7cmV0dXJuIDIqTWF0aC5hY29zKHRoaXMudyl9ZXF1YWwodCl7cmV0dXJuIGNvbnNvbGUud2FybigiRGVwcmVjYXRlZC4gVXNlICNpc0VxdWFsIGluc3RlYWQuIiksdGhpcy5pc0VxdWFsKHQpfWlzRXF1YWwodCl7cmV0dXJuIHRoaXMueD09dC54JiZ0aGlzLnk9PXQueSYmdGhpcy56PT10LnomJnRoaXMudz09dC53fW5vdEVxdWFscyh0KXtyZXR1cm4gdGhpcy54IT10LngmJnRoaXMueSE9dC55JiZ0aGlzLnohPXQueiYmdGhpcy53IT10Lnd9YXBwcm94RXF1YWwodCxlPU51bWJlci5FUFNJTE9OKXtyZXR1cm4gTWF0aC5hYnModGhpcy54LXQueCk8ZSYmTWF0aC5hYnModGhpcy55LXQueSk8ZSYmTWF0aC5hYnModGhpcy56LXQueik8ZSYmTWF0aC5hYnModGhpcy53LXQudyk8ZX1hZGQodCl7cmV0dXJuIG5ldyBwKHRoaXMueCt0LngsdGhpcy55K3QueSx0aGlzLnordC56LHRoaXMudyt0LncpfWFkZEluUGxhY2UodCl7dGhpcy54Kz10LngsdGhpcy55Kz10LnksdGhpcy56Kz10LnosdGhpcy53Kz10Lnd9c3VidHJhY3QodCl7cmV0dXJuIG5ldyBwKHRoaXMueC10LngsdGhpcy55LXQueSx0aGlzLnotdC56LHRoaXMudy10LncpfXNjYWxlKHQpe3JldHVybiBuZXcgcCh0aGlzLngqdCx0aGlzLnkqdCx0aGlzLnoqdCx0aGlzLncqdCl9c2NhbGVJblBsYWNlKHQpe3RoaXMueCo9dCx0aGlzLnkqPXQsdGhpcy56Kj10LHRoaXMudyo9dH1sZW5ndGgoKXtjb25zdCB0PXRoaXMuX19kYXRhWzBdLGU9dGhpcy5fX2RhdGFbMV0scz10aGlzLl9fZGF0YVsyXSxhPXRoaXMuX19kYXRhWzNdO3JldHVybiBNYXRoLnNxcnQodCp0K2UqZStzKnMrYSphKX1sZW5ndGhTcXVhcmVkKCl7Y29uc3QgdD10aGlzLl9fZGF0YVswXSxlPXRoaXMuX19kYXRhWzFdLHM9dGhpcy5fX2RhdGFbMl0sYT10aGlzLl9fZGF0YVszXTtyZXR1cm4gdCp0K2UqZStzKnMrYSphfW5vcm1hbGl6ZSgpe2NvbnN0IHQ9dGhpcy5fX2RhdGFbMF0sZT10aGlzLl9fZGF0YVsxXSxzPXRoaXMuX19kYXRhWzJdLGE9dGhpcy5fX2RhdGFbM107bGV0IGk9dCp0K2UqZStzKnMrYSphO3JldHVybiBpPE51bWJlci5FUFNJTE9OP25ldyBwOihpPTEvTWF0aC5zcXJ0KGkpLG5ldyBwKHQqaSxlKmkscyppLGEqaSkpfW5vcm1hbGl6ZUluUGxhY2UoKXtjb25zdCB0PXRoaXMuX19kYXRhWzBdLGU9dGhpcy5fX2RhdGFbMV0scz10aGlzLl9fZGF0YVsyXSxhPXRoaXMuX19kYXRhWzNdO2xldCBpPXQqdCtlKmUrcypzK2EqYTtpPE51bWJlci5FUFNJTE9OfHwoaT0xL01hdGguc3FydChpKSx0aGlzLnNldCh0KmksZSppLHMqaSxhKmkpKX1kb3QodCl7cmV0dXJuIHRoaXMueCp0LngrdGhpcy55KnQueSt0aGlzLnoqdC56K3RoaXMudyp0Lnd9Y3Jvc3ModCl7Y29uc3QgZT10aGlzLngscz10aGlzLnksYT10aGlzLnosaT10aGlzLncscj10Lngsbj10LnksaD10Lnosbz10Lnc7cmV0dXJuIG5ldyBwKHMqaC1hKm4sYSpvLWkqaCxpKnItZSpvLGUqbi1zKnIpfWNvbmp1Z2F0ZSgpe3JldHVybiBuZXcgcCgtdGhpcy54LC10aGlzLnksLXRoaXMueix0aGlzLncpfWludmVyc2UoKXtyZXR1cm4gdGhpcy5jb25qdWdhdGUoKX1hbGlnbldpdGgodCl7dGhpcy5kb3QodCk8MCYmdGhpcy5zZXQoLXRoaXMueCwtdGhpcy55LC10aGlzLnosLXRoaXMudyl9bXVsdGlwbHkodCl7Y29uc3QgZT10aGlzLl9fZGF0YVswXSxzPXRoaXMuX19kYXRhWzFdLGE9dGhpcy5fX2RhdGFbMl0saT10aGlzLl9fZGF0YVszXSxyPXQuX19kYXRhWzBdLG49dC5fX2RhdGFbMV0saD10Ll9fZGF0YVsyXSxvPXQuX19kYXRhWzNdO3JldHVybiBuZXcgcChlKm8raSpyK3MqaC1hKm4scypvK2kqbithKnItZSpoLGEqbytpKmgrZSpuLXMqcixpKm8tZSpyLXMqbi1hKmgpfW11bHRpcGx5SW5QbGFjZSh0KXtjb25zdCBlPXRoaXMuX19kYXRhWzBdLHM9dGhpcy5fX2RhdGFbMV0sYT10aGlzLl9fZGF0YVsyXSxpPXRoaXMuX19kYXRhWzNdLHI9dC5fX2RhdGFbMF0sbj10Ll9fZGF0YVsxXSxoPXQuX19kYXRhWzJdLG89dC5fX2RhdGFbM107dGhpcy5zZXQoZSpvK2kqcitzKmgtYSpuLHMqbytpKm4rYSpyLWUqaCxhKm8raSpoK2Uqbi1zKnIsaSpvLWUqci1zKm4tYSpoKX1yb3RhdGVWZWMzKHQpe2NvbnN0IGU9bmV3IHAodC54LHQueSx0LnosMCkscz10aGlzLm11bHRpcGx5KGUpLm11bHRpcGx5KHRoaXMuY29uanVnYXRlKCkpO3JldHVybiBuZXcgbChzLngscy55LHMueil9cm90YXRlWCh0KXt0Kj0uNTtjb25zdCBlPXRoaXMueCxzPXRoaXMueSxhPXRoaXMueixpPXRoaXMudyxyPU1hdGguc2luKHQpLG49TWF0aC5jb3ModCk7dGhpcy54PWUqbitpKnIsdGhpcy55PXMqbithKnIsdGhpcy56PWEqbi1zKnIsdGhpcy53PWkqbi1lKnJ9cm90YXRlWSh0KXt0Kj0uNTtjb25zdCBlPXRoaXMueCxzPXRoaXMueSxhPXRoaXMueixpPXRoaXMudyxyPU1hdGguc2luKHQpLG49TWF0aC5jb3ModCk7dGhpcy54PWUqbi1hKnIsdGhpcy55PXMqbitpKnIsdGhpcy56PWEqbitlKnIsdGhpcy53PWkqbi1zKnJ9cm90YXRlWih0KXt0Kj0uNTtjb25zdCBlPXRoaXMueCxzPXRoaXMueSxhPXRoaXMueixpPXRoaXMudyxyPU1hdGguc2luKHQpLG49TWF0aC5jb3ModCk7dGhpcy54PWUqbitzKnIsdGhpcy55PXMqbi1lKnIsdGhpcy56PWEqbitpKnIsdGhpcy53PWkqbi1hKnJ9dG9NYXQzKCl7Y29uc3QgdD10aGlzLngsZT10aGlzLnkscz10aGlzLnosYT10aGlzLncsaT10K3Qscj1lK2Usbj1zK3MsaD10Kmksbz1lKmksXz1lKnIsZD1zKmksbD1zKnIsYz1zKm4sdT1hKmksZj1hKnIsbT1hKm4seT1uZXcgZztyZXR1cm4geS5fX2RhdGFbMF09MS1fLWMseS5fX2RhdGFbM109by1tLHkuX19kYXRhWzZdPWQrZix5Ll9fZGF0YVsxXT1vK20seS5fX2RhdGFbNF09MS1oLWMseS5fX2RhdGFbN109bC11LHkuX19kYXRhWzJdPWQtZix5Ll9fZGF0YVs1XT1sK3UseS5fX2RhdGFbOF09MS1oLV8seX1nZXRYYXhpcygpe2NvbnN0IHQ9dGhpcy54KnRoaXMueSxlPXRoaXMueCp0aGlzLnoscz10aGlzLnkqdGhpcy55LGE9dGhpcy55KnRoaXMudyxpPXRoaXMueip0aGlzLnoscj10aGlzLnoqdGhpcy53O3JldHVybiBuZXcgbCgxLTIqKGkrcyksMioodCtyKSwyKihlLWEpKX1nZXRZYXhpcygpe2NvbnN0IHQ9dGhpcy54KnRoaXMueCxlPXRoaXMueCp0aGlzLnkscz10aGlzLngqdGhpcy53LGE9dGhpcy55KnRoaXMueixpPXRoaXMueip0aGlzLnoscj10aGlzLnoqdGhpcy53O3JldHVybiBuZXcgbCgyKihlLXIpLDEtMiooaSt0KSwyKihhK3MpKX1nZXRaYXhpcygpe2NvbnN0IHQ9dGhpcy54KnRoaXMueCxlPXRoaXMueCp0aGlzLnoscz10aGlzLngqdGhpcy53LGE9dGhpcy55KnRoaXMueSxpPXRoaXMueSp0aGlzLnoscj10aGlzLnkqdGhpcy53O25ldyBsO3JldHVybiBuZXcgbCgyKihyK2UpLDIqKGktcyksMS0yKihhK3QpKX1taXJyb3IodCl7c3dpdGNoKHQpe2Nhc2UgMDpyZXR1cm4gbmV3IHAodGhpcy56LHRoaXMudyx0aGlzLngsdGhpcy55KTtjYXNlIDE6cmV0dXJuIG5ldyBwKC10aGlzLncsdGhpcy56LHRoaXMueSwtdGhpcy54KTtjYXNlIDI6cmV0dXJuIG5ldyBwKHRoaXMueCx0aGlzLnksdGhpcy56LC10aGlzLncpfX10b01hdDQoKXtjb25zdCB0PXRoaXMueCxlPXRoaXMueSxzPXRoaXMueixhPXRoaXMudyxpPXQrdCxyPWUrZSxuPXMrcyxoPXQqaSxvPWUqaSxfPWUqcixkPXMqaSxsPXMqcixjPXMqbix1PWEqaSxmPWEqcixtPWEqbixnPW5ldyB5O3JldHVybiBnLl9fZGF0YVswXT0xLV8tYyxnLl9fZGF0YVs0XT1vLW0sZy5fX2RhdGFbOF09ZCtmLGcuX19kYXRhWzFdPW8rbSxnLl9fZGF0YVs1XT0xLWgtYyxnLl9fZGF0YVs5XT1sLXUsZy5fX2RhdGFbMl09ZC1mLGcuX19kYXRhWzZdPWwrdSxnLl9fZGF0YVsxMF09MS1oLV8sZ31sZXJwKHQsZSl7Y29uc3Qgcz1uZXcgcCh0aGlzLngrZSoodC54LXRoaXMueCksdGhpcy55K2UqKHQueS10aGlzLnkpLHRoaXMueitlKih0LnotdGhpcy56KSx0aGlzLncrZSoodC53LXRoaXMudykpO3JldHVybiBzLm5vcm1hbGl6ZUluUGxhY2UoKSxzfXNsZXJwKHQsZSl7Y29uc3Qgcz10aGlzLmRvdCh0KSxhPWUvMixpPU1hdGguYWNvcyhzKTtpPDAmJihpPS1pKTtjb25zdCByPU1hdGguc2luKGkpLG49TWF0aC5zaW4oYSppKSxoPU1hdGguc2luKCgxLWEpKmkpL3Isbz1uL3IsXz1uZXcgcChoKnRoaXMueCtvKnQueCxoKnRoaXMueStvKnQueSxoKnRoaXMueitvKnQueixoKnRoaXMudytvKnQudyk7cmV0dXJuIF8ubm9ybWFsaXplSW5QbGFjZSgpLF99c3RhdGljIGNyZWF0ZSguLi50KXtyZXR1cm4gbmV3IHAoLi4udCl9c3RhdGljIGNyZWF0ZUZyb21GbG9hdDMyQnVmZmVyKHQsZT0wKXtyZXR1cm4gY29uc29sZS53YXJuKCJEZXByZWNhdGVkLCB1c2UgI2NyZWF0ZUZyb21CdWZmZXIgaW5zdGVhZCIpLHRoaXMuY3JlYXRlRnJvbUJ1ZmZlcih0LDQqZSl9c3RhdGljIGNyZWF0ZUZyb21CdWZmZXIodCxlKXtyZXR1cm4gbmV3IHAobmV3IEZsb2F0MzJBcnJheSh0LGUsNCkpfXN0YXRpYyBudW1FbGVtZW50cygpe3JldHVybiA0fWNsb25lKCl7cmV0dXJuIG5ldyBwKHRoaXMuX19kYXRhWzBdLHRoaXMuX19kYXRhWzFdLHRoaXMuX19kYXRhWzJdLHRoaXMuX19kYXRhWzNdKX10b0pTT04oKXtyZXR1cm57eDp0aGlzLngseTp0aGlzLnksejp0aGlzLnosdzp0aGlzLnd9fWZyb21KU09OKHQpe3RoaXMuX19kYXRhWzBdPXQueCx0aGlzLl9fZGF0YVsxXT10LnksdGhpcy5fX2RhdGFbMl09dC56LHRoaXMuX19kYXRhWzNdPXQudyx0aGlzLm5vcm1hbGl6ZUluUGxhY2UoKX1yZWFkQmluYXJ5KHQpe3RoaXMueD10LmxvYWRGbG9hdDMyKCksdGhpcy55PXQubG9hZEZsb2F0MzIoKSx0aGlzLno9dC5sb2FkRmxvYXQzMigpLHRoaXMudz10LmxvYWRGbG9hdDMyKCl9fW4oIlF1YXQiLHApO2NsYXNzIHh7Y29uc3RydWN0b3IodCxlKXt0aGlzLnN0YXJ0PXQgaW5zdGFuY2VvZiBsP3Q6bmV3IGwsdGhpcy5kaXI9ZSBpbnN0YW5jZW9mIGw/ZTpuZXcgbH1jbG9zZXN0UG9pbnQodCl7Y29uc3QgZT10LnN1YnRyYWN0KHRoaXMuc3RhcnQpLmRvdCh0aGlzLmRpcik7aWYoZTxOdW1iZXIuRVBTSUxPTilyZXR1cm4gMDtjb25zdCBzPXRoaXMuZGlyLmRvdCh0aGlzLmRpcik7cmV0dXJuIHM8TnVtYmVyLkVQU0lMT04/MDplL3N9Y2xvc2VzdFBvaW50T25MaW5lU2VnbWVudCh0LGUpe2NvbnN0IGE9dGhpcy5kaXIsaT1lLnN1YnRyYWN0KHQpLHI9aS5sZW5ndGgoKTtpLm5vcm1hbGl6ZUluUGxhY2UoKTtjb25zdCBuPXRoaXMuc3RhcnQuc3VidHJhY3QodCksaD1hLmRvdChhKSxvPWEuZG90KGkpLF89aS5kb3QoaSksZD1hLmRvdChuKSxsPWkuZG90KG4pO2lmKDA9PWgmJjA9PV8pcmV0dXJuW3RoaXMuc3RhcnQuZGlzdGFuY2VUbyh0KSwwXTtpZigwPT1oKXJldHVyblswLDBdO2lmKDA9PV8pcmV0dXJuW3RoaXMuY2xvc2VzdFBvaW50KHQpLDBdO2NvbnN0IGM9aCpfLW8qbztsZXQgdSxmO3JldHVybiBjPC4wMDE/KHU9MCxmPW8+Xz9kL286bC9fKToodT0obypsLV8qZCkvYyxmPShoKmwtbypkKS9jKSxbdSxzLmNsYW1wKGYvciwwLDEpXX1wb2ludEF0RGlzdCh0KXtyZXR1cm4gdGhpcy5zdGFydC5hZGQodGhpcy5kaXIuc2NhbGUodCkpfWludGVyc2VjdFJheVZlY3Rvcih0KXtjb25zdCBlPXRoaXMuZGlyLHM9dC5kaXIsYT10aGlzLnN0YXJ0LnN1YnRyYWN0KHQuc3RhcnQpLGk9ZS5kb3QoZSkscj1lLmRvdChzKSxuPXMuZG90KHMpLGg9ZS5kb3QoYSksbz1zLmRvdChhKTtpZigwPT1pJiYwPT1uKXJldHVyblswLHRoaXMuc3RhcnQuZGlzdGFuY2VUbyh0LnN0YXJ0KV07aWYoMD09aSlyZXR1cm5bdC5jbG9zZXN0UG9pbnQodGhpcy5zdGFydCksMF07aWYoMD09bilyZXR1cm5bMSx0aGlzLmNsb3Nlc3RQb2ludCh0LnN0YXJ0KV07Y29uc3QgXz1pKm4tcipyO2xldCBkLGw7cmV0dXJuIF88LjAwMT8oZD0wLGw9cj5uP2gvcjpvL24pOihkPShyKm8tbipoKS9fLGw9KGkqby1yKmgpL18pLFtkLGxdfWludGVyc2VjdFJheVBsYW5lKHQpe2NvbnN0IGU9dGhpcy5zdGFydC5zdWJ0cmFjdCh0LnN0YXJ0KSxzPXQuZGlyLmRvdCh0aGlzLmRpciksYT0tdC5kaXIuZG90KGUpO2lmKE1hdGguYWJzKHMpPE51bWJlci5QUkVDSVNJT04pcmV0dXJuLTE7Y29uc3QgaT1hL3M7cmV0dXJuIGk8LU51bWJlci5QUkVDSVNJT04/LTE6aX1pbnRlcnNlY3RSYXlCb3gzKHQsZT0wKXtjb25zdCBzPW5ldyBsKDEvdGhpcy5kaXIueCwxL3RoaXMuZGlyLnksMS90aGlzLmRpci56KSxhPVtdO2FbMF09cy54PDAsYVsxXT1zLnk8MCxhWzJdPXMuejwwO2NvbnN0IGk9W107aWYoZT4wKXtjb25zdCBzPXQuZGlhZ29uYWwoKTtzLm5vcm1hbGl6ZUluUGxhY2UoKSxzLnNjYWxlSW5QbGFjZShlKSxpWzBdPXQucDAuc3VidHJhY3QocyksaVsxXT10LnAxLmFkZChzKX1lbHNlIGlbMF09dC5wMCxpWzFdPXQucDE7bGV0IHI9KGlbYVswXV0ueC10aGlzLnN0YXJ0LngpKnMueCxuPShpWzEtYVswXV0ueC10aGlzLnN0YXJ0LngpKnMueDtjb25zdCBoPShpW2FbMV1dLnktdGhpcy5zdGFydC55KSpzLnksbz0oaVsxLWFbMV1dLnktdGhpcy5zdGFydC55KSpzLnk7aWYocj5vfHxoPm4pcmV0dXJuITE7aD5yJiYocj1oKSxvPG4mJihuPW8pO2NvbnN0IF89KGlbYVsyXV0uei10aGlzLnN0YXJ0LnopKnMueixkPShpWzEtYVsyXV0uei10aGlzLnN0YXJ0LnopKnMuejtyZXR1cm4hKHI+ZHx8Xz5uKSYmKF8+ciYmKHI9XyksZDxuJiYobj1kKSwhMCl9Y2xvbmUoKXtyZXR1cm4gbmV3IHgodGhpcy5zdGFydC5jbG9uZSgpLHRoaXMuZGlyLmNsb25lKCkpfXN0YXRpYyBjcmVhdGUoLi4udCl7cmV0dXJuIG5ldyB4KC4uLnQpfXRvSlNPTigpe3JldHVybntzdGFydDp0aGlzLnN0YXJ0LGRpcjp0aGlzLmRpcn19ZnJvbUpTT04odCl7dGhpcy5zdGFydC5mcm9tSlNPTih0LnN0YXJ0KSx0aGlzLmRpci5mcm9tSlNPTih0LmRpcil9dG9TdHJpbmcoKXtyZXR1cm4gdC5zdHJpbmdpZnlKU09OV2l0aEZpeGVkUHJlY2lzaW9uKHRoaXMudG9KU09OKCkpfX1uKCJSYXkiLHgpO25ldyBsKDEsMSwxKTtjbGFzcyB3e2NvbnN0cnVjdG9yKHQsZSxzKXtpZih0IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5KXRoaXMuc2V0RnJvbUZsb2F0MzJBcnJheSh0KTtlbHNle2lmKHQgaW5zdGFuY2VvZiBsKXRoaXMudHI9dDtlbHNle2lmKHQgaW5zdGFuY2VvZiBwJiZudWxsPT1lJiZudWxsPT1zKXJldHVybiB0aGlzLnRyPW5ldyBsLHRoaXMub3JpPXQsdm9pZCh0aGlzLnNjPW5ldyBsKDEsMSwxKSk7dGhpcy50cj1uZXcgbH10aGlzLm9yaT1lIGluc3RhbmNlb2YgcD9lOm5ldyBwLHRoaXMuc2M9cyBpbnN0YW5jZW9mIGw/czpuZXcgbCgxLDEsMSl9fXNldCh0LGUscyl7dGhpcy50cj10LHRoaXMub3JpPWUscyBpbnN0YW5jZW9mIGwmJih0aGlzLnNjPXMpfXNldEZyb21PdGhlcih0KXt0aGlzLnRyPXQudHIsdGhpcy5vcmk9dC5vcmksdGhpcy5zYz10LnNjfWlzSWRlbnRpdHkoKXtyZXR1cm4gdGhpcy50ci5pc051bGwoKSYmdGhpcy5vcmkuaXNJZGVudGl0eSgpJiZ0aGlzLnNjLmlzMTExKCl9aXNFcXVhbCh0KXtyZXR1cm4gdGhpcy50ci5pc0VxdWFsKHQudHIpJiZ0aGlzLm9yaS5pc0VxdWFsKHQub3JpKSYmdGhpcy5zYy5pc0VxdWFsKHQuc2MpfWFwcHJveEVxdWFsKHQsZT1OdW1iZXIuRVBTSUxPTil7cmV0dXJuKCF0LnRyfHx0aGlzLnRyLmFwcHJveEVxdWFsKHQudHIsZSkpJiYoIXQub3JpfHx0aGlzLm9yaS5hcHByb3hFcXVhbCh0Lm9yaSxlKSkmJighdC5zY3x8dGhpcy5zYy5hcHByb3hFcXVhbCh0LnNjLGUpKX1zZXRMb29rQXQodCxlLHMpe2NvbnN0IGE9dC5zdWJ0cmFjdChlKTtpZihhLmxlbmd0aCgpPE51bWJlci5FUFNJTE9OKXRocm93IG5ldyBFcnJvcigiSW52YWxpZCBkaXIiKTt0aGlzLm9yaS5zZXRGcm9tRGlyZWN0aW9uQW5kVXB2ZWN0b3IoYSxzKSx0aGlzLnRyPXR9bXVsdGlwbHkodCl7bGV0IGU9dGhpcy5zYzt0aGlzLnNjLng9PXRoaXMuc2MueSYmdGhpcy5zYy54PT10aGlzLnNjLnp8fChlPXQub3JpLnJvdGF0ZVZlYzModGhpcy5zYyksTWF0aC5zaWduKGUueCkhPU1hdGguc2lnbih0aGlzLnNjLngpJiYoZS54PS1lLngpLE1hdGguc2lnbihlLnkpIT1NYXRoLnNpZ24odGhpcy5zYy55KSYmKGUueT0tZS55KSxNYXRoLnNpZ24oZS56KSE9TWF0aC5zaWduKHRoaXMuc2MueikmJihlLno9LWUueikpO3JldHVybiBuZXcgdyh0aGlzLnRyLmFkZCh0aGlzLm9yaS5yb3RhdGVWZWMzKGUubXVsdGlwbHkodC50cikpKSx0aGlzLm9yaS5tdWx0aXBseSh0Lm9yaSksZS5tdWx0aXBseSh0LnNjKSl9aW52ZXJzZSgpe2NvbnN0IHQ9bmV3IHc7cmV0dXJuIHQub3JpPXRoaXMub3JpLmludmVyc2UoKSx0aGlzLnNjLnghPXRoaXMuc2MueXx8dGhpcy5zYy54IT10aGlzLnNjLno/KHQuc2M9dC5vcmkucm90YXRlVmVjMyh0aGlzLnNjKSxNYXRoLnNpZ24odC5zYy54KSE9TWF0aC5zaWduKHRoaXMuc2MueCkmJih0LnNjLng9LXQuc2MueCksTWF0aC5zaWduKHQuc2MueSkhPU1hdGguc2lnbih0aGlzLnNjLnkpJiYodC5zYy55PS10LnNjLnkpLE1hdGguc2lnbih0LnNjLnopIT1NYXRoLnNpZ24odGhpcy5zYy56KSYmKHQuc2Muej0tdC5zYy56KSk6dC5zYz10aGlzLnNjLmludmVyc2UoKSx0LnRyPXQub3JpLnJvdGF0ZVZlYzModGhpcy50ci5uZWdhdGUoKS5tdWx0aXBseSh0LnNjKSksdH10cmFuc2Zvcm1WZWMzKHQpe3JldHVybiB0aGlzLnRyLmFkZCh0aGlzLm9yaS5yb3RhdGVWZWMzKHRoaXMuc2MubXVsdGlwbHkodCkpKX10b01hdDQoKXtjb25zdCB0PW5ldyB5KHRoaXMuc2MueCwwLDAsMCwwLHRoaXMuc2MueSwwLDAsMCwwLHRoaXMuc2MueiwwLDAsMCwwLDEpLGU9dGhpcy5vcmkudG9NYXQ0KCkscz1uZXcgeTtyZXR1cm4gcy50cmFuc2xhdGlvbj10aGlzLnRyLHMubXVsdGlwbHkoZSkubXVsdGlwbHkodCl9ZnJvbU1hdDQodCl7dGhpcy5zZXRGcm9tTWF0NCh0KX1zZXRGcm9tTWF0NCh0KXt0aGlzLnRyPXQudHJhbnNsYXRpb24sdGhpcy5vcmkuc2V0RnJvbU1hdDQodCl9c2V0RnJvbUZsb2F0MzJBcnJheSh0KXtpZig3PT10Lmxlbmd0aClyZXR1cm4gdGhpcy50cj1uZXcgbCh0LmJ1ZmZlcix0LmJ5dGVPZmZzZXQpLHRoaXMub3JpPW5ldyBwKHQuYnVmZmVyLHQuYnl0ZU9mZnNldCsxMiksdm9pZCh0aGlzLnNjPW5ldyBsKDEsMSwxKSk7aWYoOCE9dC5sZW5ndGgpcmV0dXJuIDEwPT10Lmxlbmd0aD8odGhpcy50cj1uZXcgbCh0LmJ1ZmZlcix0LmJ5dGVPZmZzZXQpLHRoaXMub3JpPW5ldyBwKHQuYnVmZmVyLHQuYnl0ZU9mZnNldCsxMiksdm9pZCh0aGlzLnNjPW5ldyBsKHQuYnVmZmVyLHQuYnl0ZU9mZnNldCsyMSkpKTp2b2lkIDA7e3RoaXMudHI9bmV3IGwodC5idWZmZXIsdC5ieXRlT2Zmc2V0KSx0aGlzLm9yaT1uZXcgcCh0LmJ1ZmZlcix0LmJ5dGVPZmZzZXQrMTIpO2NvbnN0IGU9dFs3XTt0aGlzLnNjPW5ldyBsKGUsZSxlKX19Y2xvbmUoKXtyZXR1cm4gbmV3IHcodGhpcy50ci5jbG9uZSgpLHRoaXMub3JpLmNsb25lKCksdGhpcy5zYy5jbG9uZSgpKX1zdGF0aWMgY3JlYXRlKC4uLnQpe3JldHVybiBuZXcgdyguLi50KX10b0pTT04oKXtjb25zdCB0PXt0cjp0aGlzLnRyLnRvSlNPTigpLG9yaTp0aGlzLm9yaS50b0pTT04oKX07cmV0dXJuIHRoaXMuc2MuaXMxMTEoKXx8KHQuc2M9dGhpcy5zYy50b0pTT04oKSksdH1mcm9tSlNPTih0KXt0aGlzLnRyLmZyb21KU09OKHQudHIpLHRoaXMub3JpLmZyb21KU09OKHQub3JpKSx0LnNjJiZ0aGlzLnNjLmZyb21KU09OKHQuc2MpfXJlYWRCaW5hcnkodCl7dGhpcy50ci5yZWFkQmluYXJ5KHQpLHRoaXMub3JpLnJlYWRCaW5hcnkodCksdGhpcy5zYy5yZWFkQmluYXJ5KHQpfXRvU3RyaW5nKCl7cmV0dXJuIHQuc3RyaW5naWZ5SlNPTldpdGhGaXhlZFByZWNpc2lvbih0aGlzLnRvSlNPTigpKX19bigiWGZvIix3KTtjbGFzcyBJe2NvbnN0cnVjdG9yKHQsZSl7dGhpcy5wMD10IGluc3RhbmNlb2YgZD90Om5ldyBkKE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpLHRoaXMucDE9ZSBpbnN0YW5jZW9mIGQ/ZTpuZXcgZChOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZKX1zZXQodCxlKXt0aGlzLnAwPXQsdGhpcy5wMT1lfXJlc2V0KCl7dGhpcy5wMC54PU51bWJlci5QT1NJVElWRV9JTkZJTklUWSx0aGlzLnAxLng9TnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLHRoaXMucDAueT1OdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksdGhpcy5wMS55PU51bWJlci5ORUdBVElWRV9JTkZJTklUWX1pc1ZhbGlkKCl7cmV0dXJuIHRoaXMucDAueCE9TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZJiZ0aGlzLnAxLnghPU51bWJlci5ORUdBVElWRV9JTkZJTklUWSYmdGhpcy5wMC55IT1OdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkmJnRoaXMucDEueSE9TnVtYmVyLk5FR0FUSVZFX0lORklOSVRZfWFkZFBvaW50KHQpeyh0aGlzLnAwLng9PU51bWJlci5QT1NJVElWRV9JTkZJTklUWXx8dC54PHRoaXMucDAueCkmJih0aGlzLnAwLng9dC54KSwodGhpcy5wMC55PT1OdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFl8fHQueTx0aGlzLnAwLnkpJiYodGhpcy5wMC55PXQueSksKHRoaXMucDEueT09TnVtYmVyLk5FR0FUSVZFX0lORklOSVRZfHx0Lng+dGhpcy5wMS54KSYmKHRoaXMucDEueD10LngpLCh0aGlzLnAxLnk9PU51bWJlci5ORUdBVElWRV9JTkZJTklUWXx8dC55PnRoaXMucDEueSkmJih0aGlzLnAxLnk9dC55KX1zaXplKCl7cmV0dXJuIHRoaXMucDEuZGlzdGFuY2VUbyh0aGlzLnAwKX1kaWFnb25hbCgpe3JldHVybiB0aGlzLnAxLnN1YnRyYWN0KHRoaXMucDApfWNlbnRlcigpe2NvbnN0IHQ9dGhpcy5wMS5zdWJ0cmFjdCh0aGlzLnAwKTtyZXR1cm4gdC5zY2FsZUluUGxhY2UoLjUpLHQuYWRkSW5QbGFjZSh0aGlzLnAwKSx0fXN0YXRpYyBjcmVhdGUoLi4udCl7cmV0dXJuIG5ldyBJKC4uLnQpfXRvSlNPTigpe3JldHVybntwMDp0aGlzLnAwLnRvSlNPTigpLHAxOnRoaXMucDEudG9KU09OKCl9fXRvU3RyaW5nKCl7cmV0dXJuIHQuc3RyaW5naWZ5SlNPTldpdGhGaXhlZFByZWNpc2lvbih0aGlzLnRvSlNPTigpKX19bigiQm94MiIsSSk7Y2xhc3MgTiBleHRlbmRzIGV7Y29uc3RydWN0b3IodCxlPTApe3N1cGVyKCksdGhpcy5wb3M9dCBpbnN0YW5jZW9mIGw/dDpuZXcgbCx0aGlzLnJhZGl1cz1lfWNsb25lKCl7cmV0dXJuIG5ldyBTcGhlcmUodGhpcy5wb3MuY2xvbmUoKSx0aGlzLnJhZGl1cyl9aW50ZXJzZWN0c0JveCh0KXtyZXR1cm4gdC5pbnRlcnNlY3RzU3BoZXJlKHRoaXMpfXRvSlNPTigpe3JldHVybntwb3M6dGhpcy5wb3MudG9KU09OKCkscmFkaXVzOnRoaXMucmFkaXVzfX10b1N0cmluZygpe3JldHVybiB0LnN0cmluZ2lmeUpTT05XaXRoRml4ZWRQcmVjaXNpb24odGhpcy50b0pTT04oKSl9c3RhdGljIGNyZWF0ZSguLi50KXtyZXR1cm4gbmV3IFNwaGVyZSguLi50KX19bigiU3BoZXJlVHlwZSIsTik7Y2xhc3MgRntjb25zdHJ1Y3Rvcih0LGUpe3QgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXk/dGhpcy5zZXRGcm9tRmxvYXQzMkFycmF5KHQpOih0aGlzLnAwPXQgaW5zdGFuY2VvZiBsP3Q6bmV3IGwoTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpLHRoaXMucDE9ZSBpbnN0YW5jZW9mIGw/ZTpuZXcgbChOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLE51bWJlci5ORUdBVElWRV9JTkZJTklUWSkpfWdldCBtaW4oKXtyZXR1cm4gdGhpcy5wMH1nZXQgbWF4KCl7cmV0dXJuIHRoaXMucDF9c2V0KHQsZSl7dGhpcy5wMD10LHRoaXMucDE9ZX1yZXNldCgpe3RoaXMucDAueD1OdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksdGhpcy5wMC55PU51bWJlci5QT1NJVElWRV9JTkZJTklUWSx0aGlzLnAwLno9TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLHRoaXMucDEueD1OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksdGhpcy5wMS55PU51bWJlci5ORUdBVElWRV9JTkZJTklUWSx0aGlzLnAxLno9TnVtYmVyLk5FR0FUSVZFX0lORklOSVRZfWlzVmFsaWQoKXtyZXR1cm4gdGhpcy5wMC54IT1OdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkmJnRoaXMucDEueCE9TnVtYmVyLk5FR0FUSVZFX0lORklOSVRZJiZ0aGlzLnAwLnkhPU51bWJlci5QT1NJVElWRV9JTkZJTklUWSYmdGhpcy5wMS55IT1OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkmJnRoaXMucDAueiE9TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZJiZ0aGlzLnAxLnohPU51bWJlci5ORUdBVElWRV9JTkZJTklUWX1hZGRQb2ludCh0KXt0LnghPU51bWJlci5QT1NJVElWRV9JTkZJTklUWSYmdC54IT1OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkmJih0Lng8dGhpcy5wMC54JiYodGhpcy5wMC54PXQueCksdC54PnRoaXMucDEueCYmKHRoaXMucDEueD10LngpKSx0LnkhPU51bWJlci5QT1NJVElWRV9JTkZJTklUWSYmdC55IT1OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkmJih0Lnk8dGhpcy5wMC55JiYodGhpcy5wMC55PXQueSksdC55PnRoaXMucDEueSYmKHRoaXMucDEueT10LnkpKSx0LnohPU51bWJlci5QT1NJVElWRV9JTkZJTklUWSYmdC56IT1OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkmJih0Lno8dGhpcy5wMC56JiYodGhpcy5wMC56PXQueiksdC56PnRoaXMucDEueiYmKHRoaXMucDEuej10LnopKX1hZGRCb3gzKHQsZSl7ZT8odGhpcy5hZGRQb2ludChlLnRyYW5zZm9ybVZlYzModC5wMCkpLHRoaXMuYWRkUG9pbnQoZS50cmFuc2Zvcm1WZWMzKG5ldyBsKHQucDAueCx0LnAwLnksdC5wMS56KSkpLHRoaXMuYWRkUG9pbnQoZS50cmFuc2Zvcm1WZWMzKG5ldyBsKHQucDAueCx0LnAxLnksdC5wMC56KSkpLHRoaXMuYWRkUG9pbnQoZS50cmFuc2Zvcm1WZWMzKG5ldyBsKHQucDEueCx0LnAwLnksdC5wMC56KSkpLHRoaXMuYWRkUG9pbnQoZS50cmFuc2Zvcm1WZWMzKG5ldyBsKHQucDAueCx0LnAxLnksdC5wMS56KSkpLHRoaXMuYWRkUG9pbnQoZS50cmFuc2Zvcm1WZWMzKG5ldyBsKHQucDEueCx0LnAwLnksdC5wMS56KSkpLHRoaXMuYWRkUG9pbnQoZS50cmFuc2Zvcm1WZWMzKG5ldyBsKHQucDEueCx0LnAxLnksdC5wMC56KSkpLHRoaXMuYWRkUG9pbnQoZS50cmFuc2Zvcm1WZWMzKHQucDEpKSk6KHRoaXMuYWRkUG9pbnQodC5wMCksdGhpcy5hZGRQb2ludCh0LnAxKSl9c2l6ZSgpe3JldHVybiB0aGlzLnAxLmRpc3RhbmNlVG8odGhpcy5wMCl9ZGlhZ29uYWwoKXtyZXR1cm4gdGhpcy5wMS5zdWJ0cmFjdCh0aGlzLnAwKX1jZW50ZXIoKXtjb25zdCB0PXRoaXMucDEuc3VidHJhY3QodGhpcy5wMCk7cmV0dXJuIHQuc2NhbGVJblBsYWNlKC41KSx0LmFkZEluUGxhY2UodGhpcy5wMCksdH10b01hdDQoKXtjb25zdCB0PXRoaXMucDEueC10aGlzLnAwLngsZT10aGlzLnAxLnktdGhpcy5wMC55LHM9dGhpcy5wMS56LXRoaXMucDAuejtyZXR1cm4gbmV3IHkodCwwLDAsMCwwLGUsMCwwLDAsMCxzLDAsdGhpcy5wMC54LHRoaXMucDAueSx0aGlzLnAwLnosMSl9Z2V0Qm91bmRpbmdTcGhlcmUoKXtyZXR1cm4gbmV3IE4odGhpcy5jZW50ZXIoKSwuNSp0aGlzLmRpYWdvbmFsKCkubGVuZ3RoKCkpfWludGVyc2VjdHNCb3godCl7cmV0dXJuISh0Lm1heC54PHRoaXMubWluLnh8fHQubWluLng+dGhpcy5tYXgueHx8dC5tYXgueTx0aGlzLm1pbi55fHx0Lm1pbi55PnRoaXMubWF4Lnl8fHQubWF4Lno8dGhpcy5taW4uenx8dC5taW4uej50aGlzLm1heC56KX1pbnRlcnNlY3RzU3BoZXJlKHQpe3JldHVybiBjbG9zZXN0UG9pbnQuZGlzdGFuY2VUb1NxdWFyZWQodC5jZW50ZXIpPD10LnJhZGl1cyp0LnJhZGl1c31pbnRlcnNlY3RzUGxhbmUodCl7bGV0IGUscztyZXR1cm4gdC5ub3JtYWwueD4wPyhlPXQubm9ybWFsLngqdGhpcy5taW4ueCxzPXQubm9ybWFsLngqdGhpcy5tYXgueCk6KGU9dC5ub3JtYWwueCp0aGlzLm1heC54LHM9dC5ub3JtYWwueCp0aGlzLm1pbi54KSx0Lm5vcm1hbC55PjA/KGUrPXQubm9ybWFsLnkqdGhpcy5taW4ueSxzKz10Lm5vcm1hbC55KnRoaXMubWF4LnkpOihlKz10Lm5vcm1hbC55KnRoaXMubWF4Lnkscys9dC5ub3JtYWwueSp0aGlzLm1pbi55KSx0Lm5vcm1hbC56PjA/KGUrPXQubm9ybWFsLnoqdGhpcy5taW4ueixzKz10Lm5vcm1hbC56KnRoaXMubWF4LnopOihlKz10Lm5vcm1hbC56KnRoaXMubWF4Lnoscys9dC5ub3JtYWwueip0aGlzLm1pbi56KSxlPD0tdC5jb25zdGFudCYmcz49LXQuY29uc3RhbnR9Y2xvbmUoKXtyZXR1cm4gbmV3IEYodGhpcy5wMC5jbG9uZSgpLHRoaXMucDEuY2xvbmUoKSl9c3RhdGljIGNyZWF0ZSguLi50KXtyZXR1cm4gbmV3IEYoLi4udCl9c3RhdGljIHNpemVJbkJ5dGVzKCl7cmV0dXJuIDI0fXRvSlNPTigpe3JldHVybntwMDp0aGlzLnAwLnRvSlNPTigpLHAxOnRoaXMucDEudG9KU09OKCl9fWZyb21KU09OKHQpe2NvbnN0IGU9e3g6cy5pc051bWVyaWModC5wMC54KT90LnAwLng6TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLHk6cy5pc051bWVyaWModC5wMC55KT90LnAwLnk6TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLHo6cy5pc051bWVyaWModC5wMC56KT90LnAwLno6TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZfSxhPXt4OnMuaXNOdW1lcmljKHQucDEueCk/dC5wMS54Ok51bWJlci5ORUdBVElWRV9JTkZJTklUWSx5OnMuaXNOdW1lcmljKHQucDEueSk/dC5wMS55Ok51bWJlci5ORUdBVElWRV9JTkZJTklUWSx6OnMuaXNOdW1lcmljKHQucDEueik/dC5wMS56Ok51bWJlci5ORUdBVElWRV9JTkZJTklUWX07dGhpcy5wMC5mcm9tSlNPTihlKSx0aGlzLnAxLmZyb21KU09OKGEpfXNldEZyb21GbG9hdDMyQXJyYXkodCl7dGhpcy5wMD1uZXcgbCh0LmJ1ZmZlcix0LmJ5dGVPZmZzZXQpLHRoaXMucDE9bmV3IGwodC5idWZmZXIsdC5ieXRlT2Zmc2V0KzEyKX10b1N0cmluZygpe3JldHVybiB0LnN0cmluZ2lmeUpTT05XaXRoRml4ZWRQcmVjaXNpb24odGhpcy50b0pTT04oKSl9fW4oIkJveDMiLEYpO2NsYXNzIFYgZXh0ZW5kcyBle2NvbnN0cnVjdG9yKHQsZT0wKXtzdXBlcigpLHRoaXMubm9ybWFsPXQgaW5zdGFuY2VvZiBsP3Q6bmV3IGwsdGhpcy53PWV9c2V0KHQsZSxzLGEpe3RoaXMubm9ybWFsLnNldCh0LGUscyksdGhpcy53PWF9ZGl2aWRlU2NhbGFyKHQpe3RoaXMubm9ybWFsLnNjYWxlSW5QbGFjZSgxL3QpLHRoaXMudy89dH1kaXN0YW5jZVRvUG9pbnQodCl7cmV0dXJuIHQuZG90KHRoaXMubm9ybWFsKSt0aGlzLnd9bm9ybWFsaXplSW5QbGFjZSgpe2NvbnN0IHQ9MS90aGlzLm5vcm1hbC5sZW5ndGgoKTt0aGlzLm5vcm1hbC5zY2FsZUluUGxhY2UodCksdGhpcy53Kj10fWNsb25lKCl7cmV0dXJuIG5ldyBQbGFuZSh0aGlzLm5vcm1hbC5jbG9uZSgpLHRoaXMudyl9c3RhdGljIGNyZWF0ZSguLi50KXtyZXR1cm4gbmV3IFBsYW5lKC4uLnQpfXRvSlNPTigpe3JldHVybntub3JtYWw6dGhpcy5ub3JtYWwudG9KU09OKCksdzp0aGlzLnd9fXRvU3RyaW5nKCl7cmV0dXJuIHQuc3RyaW5naWZ5SlNPTldpdGhGaXhlZFByZWNpc2lvbih0aGlzLnRvSlNPTigpKX19bigiUGxhbmVUeXBlIixWKTtuKCJGcnVzdHVtIixjbGFzc3tjb25zdHJ1Y3Rvcih0LGUscyxhLGkscil7dGhpcy5wbGFuZXM9W3R8fG5ldyBWLGV8fG5ldyBWLHN8fG5ldyBWLGF8fG5ldyBWLGl8fG5ldyBWLHJ8fG5ldyBWXX1zZXRGcm9tTWF0cml4KHQpe2NvbnN0IGU9dCxzPXRoaXMucGxhbmVzO3NbMF0uc2V0KGUubTAzLWUubTAwLGUubTEzLWUubTEwLGUubTIzLWUubTIwLGUubTMzLWUubTMwKSxzWzFdLnNldChlLm0wMytlLm0wMCxlLm0xMytlLm0xMCxlLm0yMytlLm0yMCxlLm0zMytlLm0zMCksc1syXS5zZXQoZS5tMDMrZS5tMDEsZS5tMTMrZS5tMTEsZS5tMjMrZS5tMjEsZS5tMzMrZS5tMzEpLHNbM10uc2V0KGUubTAzLWUubTAxLGUubTEzLWUubTExLGUubTIzLWUubTIxLGUubTMzLWUubTMxKSxzWzRdLnNldChlLm0wMy1lLm0wMixlLm0xMy1lLm0xMixlLm0yMy1lLm0yMixlLm0zMy1lLm0zMiksc1s1XS5zZXQoZS5tMDMrZS5tMDIsZS5tMTMrZS5tMTIsZS5tMjMrZS5tMjIsZS5tMzMrZS5tMzIpLHMuZm9yRWFjaCgodD0+dC5ub3JtYWxpemVJblBsYWNlKCkpKX1pbnRlcnNlY3RzQm94KHQpe2NvbnN0IGU9bmV3IGwscz10aGlzLnBsYW5lcyx7bWluOmEsbWF4Oml9PXQ7Zm9yKGxldCB0PTA7dDw2O3QrKyl7Y29uc3Qgcj1zW3RdO2lmKGUueD1yLm5vcm1hbC54PjA/aS54OmEueCxlLnk9ci5ub3JtYWwueT4wP2kueTphLnksZS56PXIubm9ybWFsLno+MD9pLno6YS56LHIuZGlzdGFuY2VUb1BvaW50KGUpPDApcmV0dXJuITF9cmV0dXJuITB9dG9KU09OKCl7cmV0dXJue3AwOnRoaXMucDAudG9KU09OKCkscDE6dGhpcy5wMS50b0pTT04oKSxwMjp0aGlzLnAyLnRvSlNPTigpLHAzOnRoaXMucDMudG9KU09OKCkscDQ6dGhpcy5wNC50b0pTT04oKSxwNTp0aGlzLnA1LnRvSlNPTigpfX1mcm9tSlNPTih0KXt0aGlzLnAwLmZyb21KU09OKHQucDApLHRoaXMucDEuZnJvbUpTT04odC5wMSksdGhpcy5wMi5mcm9tSlNPTih0LnAyKSx0aGlzLnAzLmZyb21KU09OKHQucDMpLHRoaXMucDQuZnJvbUpTT04odC5wNCksdGhpcy5wNS5mcm9tSlNPTih0LnA1KX10b1N0cmluZygpe3JldHVybiB0LnN0cmluZ2lmeUpTT05XaXRoRml4ZWRQcmVjaXNpb24odGhpcy50b0pTT04oKSl9fSk7bGV0IHo9MDtjbGFzcyBBe2NvbnN0cnVjdG9yKHQsZSxzKXtpZih0aGlzLl9fZGF0YVR5cGU9dCx0aGlzLm5vcm1hbGl6ZWQ9ITEsbnVsbCE9dC5udW1FbGVtZW50cyl0aGlzLl9fZGltZW5zaW9uPXRoaXMuX19kYXRhVHlwZS5udW1FbGVtZW50cygpO2Vsc2Ugc3dpdGNoKHQpe2Nhc2UgNjpjYXNlIDQ6Y2FzZSA1OnRoaXMuX19kaW1lbnNpb249MTticmVhaztkZWZhdWx0OnRocm93IG5ldyBFcnJvcigiSW52YWxpZCBkYXRhIHR5cGUgZm9yIGF0dHJpYnV0ZToiK3QpfXZhciBhO3RoaXMuX19kZWZhdWx0RWxlbWVudFZhbHVlPW51bGwhPXM/czpOdW1iZXIuTUFYX1ZBTFVFLChhPWUpJiZ2b2lkIDAhPT1hLmJ5dGVMZW5ndGg/dGhpcy5fX2RhdGE9ZToodGhpcy5fX2RhdGE9bmV3IEZsb2F0MzJBcnJheShlKnRoaXMuX19kaW1lbnNpb24pLHRoaXMuaW5pdFJhbmdlKDApKX1yZXNpemUodCl7Y29uc3QgZT10aGlzLl9fZGF0YS5sZW5ndGgscz10KnRoaXMuX19kaW1lbnNpb247aWYocz5lKXtjb25zdCB0PW5ldyBGbG9hdDMyQXJyYXkocyk7dC5zZXQodGhpcy5fX2RhdGEpLHRoaXMuX19kYXRhPXQsdGhpcy5pbml0UmFuZ2UoZSl9ZWxzZSBzPGUmJih0aGlzLl9fZGF0YT10aGlzLl9fZGF0YS5zbGljZSgwLHMpKX1pbml0UmFuZ2UodCl7Zm9yKGxldCBlPXQ7ZTx0aGlzLl9fZGF0YS5sZW5ndGg7ZSsrKXRoaXMuX19kYXRhW2VdPXRoaXMuX19kZWZhdWx0RWxlbWVudFZhbHVlfWdldENvdW50KCl7cmV0dXJuIHRoaXMuX19kYXRhLmxlbmd0aC90aGlzLl9fZGltZW5zaW9ufWdldCBsZW5ndGgoKXtyZXR1cm4gdGhpcy5fX2RhdGEubGVuZ3RoL3RoaXMuX19kaW1lbnNpb259Z2V0IGRhdGFUeXBlKCl7cmV0dXJuIHRoaXMuX19kYXRhVHlwZX1nZXQgZGF0YSgpe3JldHVybiB0aGlzLl9fZGF0YX1zZXQgZGF0YSh0KXt0aGlzLl9fZGF0YT10fWdldCBudW1FbGVtZW50cygpe3JldHVybiB0aGlzLl9fZGltZW5zaW9ufWdldEZsb2F0MzJWYWx1ZSh0KXtyZXR1cm4gdGhpcy5fX2RhdGFbdF19c2V0RmxvYXQzMlZhbHVlKHQsZSl7dGhpcy5fX2RhdGFbdF09ZX1nZXRWYWx1ZVJlZih0KXtjb25zdCBlPXRoaXMuX19kaW1lbnNpb247aWYodD49dGhpcy5fX2RhdGEubGVuZ3RoL2UpdGhyb3cgbmV3IEVycm9yKCJJbnZhbGlkIHZlcnRleCBpbmRleDoiK3QrIi4gTnVtIFZlcnRpY2VzOiIrdGhpcy5fX2RhdGEubGVuZ3RoLzMpO3JldHVybiB0aGlzLl9fZGF0YVR5cGUuY3JlYXRlRnJvbUJ1ZmZlcih0aGlzLl9fZGF0YS5idWZmZXIsdCplKjQpfXNldFZhbHVlKHQsZSl7Y29uc3Qgcz10aGlzLl9fZGltZW5zaW9uO2lmKHQ+PXRoaXMuX19kYXRhLmxlbmd0aC9zKXRocm93IG5ldyBFcnJvcigiSW52YWxpZCB2ZXJ0ZXggaW5kZXg6Iit0KyIuIE51bSBWZXJ0aWNlczoiK3RoaXMuX19kYXRhLmxlbmd0aC8zKTt0aGlzLl9fZGF0YVR5cGUuY3JlYXRlRnJvbUJ1ZmZlcih0aGlzLl9fZGF0YS5idWZmZXIsdCpzKjQpLnNldEZyb21PdGhlcihlKX10b0pTT04odCl7cmV0dXJue2RhdGE6QXJyYXkuZnJvbSh0aGlzLl9fZGF0YSksZGF0YVR5cGU6byh0aGlzLl9fZGF0YVR5cGUpLGRlZmF1bHRWYWx1ZTp0aGlzLl9fZGVmYXVsdEVsZW1lbnRWYWx1ZSxsZW5ndGg6dGhpcy5fX2RhdGEubGVuZ3RoL3RoaXMuX19kaW1lbnNpb259fWZyb21KU09OKHQpe2NvbnN0IGU9dC5kYXRhLm1hcCgodD0+cy5pc051bWVyaWModCk/dDpOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpKTt0aGlzLl9fZGF0YT1GbG9hdDMyQXJyYXkuZnJvbShlKX10b1N0cmluZygpe3JldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvSlNPTigpLG51bGwsMil9fWNsYXNzIE0gZXh0ZW5kcyBBe2NvbnN0cnVjdG9yKHQsZSxzLGEpe3N1cGVyKGUscyxhKSx0aGlzLl9fZ2VvbT10LHRoaXMuX19zcGxpdHM9e30sdGhpcy5fX3NwbGl0VmFsdWVzPVtdfXJlc2l6ZSh0KXtzdXBlci5yZXNpemUodCksdGhpcy5fX3NwbGl0cz17fSx0aGlzLl9fc3BsaXRWYWx1ZXM9W119Z2V0RmFjZVZlcnRleFZhbHVlUmVmKHQsZSl7Y29uc3Qgcz10aGlzLl9fZ2VvbS5nZXRGYWNlVmVydGV4SW5kZXgodCxlKTtyZXR1cm4gcyBpbiB0aGlzLl9fc3BsaXRzJiZ0IGluIHRoaXMuX19zcGxpdHNbc10/dGhpcy5fX3NwbGl0VmFsdWVzW3RoaXMuX19zcGxpdHNbc11bdF1dOnRoaXMuZ2V0VmFsdWVSZWYocyl9c2V0RmFjZVZlcnRleFZhbHVlKHQsZSxzKXtjb25zdCBhPXRoaXMuX19nZW9tLmdldEZhY2VWZXJ0ZXhJbmRleCh0LGUpO3RoaXMuc2V0RmFjZVZlcnRleFZhbHVlX0J5VmVydGV4SW5kZXgodCxhLHMpfXNldEZhY2VWZXJ0ZXhWYWx1ZV9CeVZlcnRleEluZGV4KHQsZSxzKXtjb25zdCBhPXRoaXMuZ2V0VmFsdWVSZWYoZSk7aWYoYS5pc1ZhbGlkKCkpaWYoYS5hcHByb3hFcXVhbChzKSk7ZWxzZXtpZihlIGluIHRoaXMuX19zcGxpdHMpe2NvbnN0IGE9dGhpcy5fX3NwbGl0c1tlXTtmb3IoY29uc3QgZSBpbiBhKXtjb25zdCBpPWFbZV07aWYodGhpcy5fX3NwbGl0VmFsdWVzW2ldLmFwcHJveEVxdWFsKHMpKXJldHVybiB2b2lkKGFbdF09aSl9aWYodCBpbiB0aGlzLl9fc3BsaXRzW2VdKXtyZXR1cm4gdm9pZCB0aGlzLl9fc3BsaXRWYWx1ZXNbdGhpcy5fX3NwbGl0c1tlXVt0XV0uc2V0RnJvbU90aGVyKHMpfX1lbHNlIHRoaXMuX19zcGxpdHNbZV09e307dGhpcy5fX3NwbGl0c1tlXVt0XT10aGlzLl9fc3BsaXRWYWx1ZXMubGVuZ3RoLHRoaXMuX19zcGxpdFZhbHVlcy5wdXNoKHMpfWVsc2UgYS5zZXRGcm9tT3RoZXIocyl9c2V0U3BsaXRWZXJ0ZXhWYWx1ZSh0LGUscyl7aWYodCBpbiB0aGlzLl9fc3BsaXRzfHwodGhpcy5fX3NwbGl0c1t0XT17fSksZSBpbiB0aGlzLl9fc3BsaXRzW3RdKXtpZih0aGlzLl9fc3BsaXRWYWx1ZXNbdGhpcy5fX3NwbGl0c1t0XVtlXV0uYXBwcm94RXF1YWwocykpcmV0dXJuO2NvbnNvbGUud2FybigiRmFjZSBWZXJ0ZXggQWxyZWFkeSBTcGxpdCB3aXRoIGRpZmZlcmVudCB2YWx1ZSIpfXRoaXMuX19zcGxpdHNbdF1bZV09dGhpcy5fX3NwbGl0VmFsdWVzLmxlbmd0aCx0aGlzLl9fc3BsaXRWYWx1ZXMucHVzaChzKX1zZXRTcGxpdFZlcnRleFZhbHVlcyh0LGUscyl7dCBpbiB0aGlzLl9fc3BsaXRzfHwodGhpcy5fX3NwbGl0c1t0XT17fSk7Y29uc3QgYT10aGlzLl9fc3BsaXRWYWx1ZXMubGVuZ3RoO3RoaXMuX19zcGxpdFZhbHVlcy5wdXNoKHMpO2Zvcihjb25zdCBzIG9mIGUpdGhpcy5fX3NwbGl0c1t0XVtzXT1hfWdldFNwbGl0cygpe3JldHVybiB0aGlzLl9fc3BsaXRzfWdldFNwbGl0Q291bnQoKXtsZXQgdD0wO2Zvcihjb25zdCBlIGluIHRoaXMuX19zcGxpdHMpdCs9T2JqZWN0LmtleXModGhpcy5fX3NwbGl0c1tlXSkubGVuZ3RoO3JldHVybiB0fWdlbmVyYXRlU3BsaXRWYWx1ZXModCxlKXtpZigwPT1lKXJldHVybiB0aGlzLl9fZGF0YTtjb25zdCBzPXRoaXMubGVuZ3RoLGE9dGhpcy5sZW5ndGgrZSxpPXRoaXMuX19kYXRhVHlwZS5udW1FbGVtZW50cz90aGlzLl9fZGF0YVR5cGUubnVtRWxlbWVudHMoKToxLHI9bmV3IEZsb2F0MzJBcnJheShhKmkpO2ZvcihsZXQgdD0wO3Q8dGhpcy5fX2RhdGEubGVuZ3RoO3QrKylyW3RdPXRoaXMuX19kYXRhW3RdO2Zvcihjb25zdCBlIGluIHQpe2NvbnN0IGE9dFtlXTtmb3IoY29uc3QgdCBpbiBhKXtjb25zdCBuPXMrYVt0XTtpZihlIGluIHRoaXMuX19zcGxpdHMmJnQgaW4gdGhpcy5fX3NwbGl0c1tlXSl7Y29uc3Qgcz10aGlzLl9fc3BsaXRzW2VdW3RdOzY9PXRoaXMuX19kYXRhVHlwZT9yW24qaV09dGhpcy5fX3NwbGl0VmFsdWVzW3NdOnRoaXMuX19kYXRhVHlwZS5jcmVhdGVGcm9tQnVmZmVyKHIuYnVmZmVyLG4qaSo0KS5zZXRGcm9tT3RoZXIodGhpcy5fX3NwbGl0VmFsdWVzW3NdKX1lbHNle2NvbnN0IHQ9cGFyc2VJbnQoZSk7Zm9yKGxldCBlPTA7ZTxpO2UrKyl0KmkrZT50aGlzLl9fZGF0YS5sZW5ndGgmJmNvbnNvbGUubG9nKCJFcnJvciByZW1hcHBpbmcgc3JjOiIrdCppK2UpLG4qaStlPnIubGVuZ3RoJiZjb25zb2xlLmxvZygiRXJyb3IgcmVtYXBwaW5nIHRndDoiK24qaStlKSxyW24qaStlXT10aGlzLl9fZGF0YVt0KmkrZV19fX1yZXR1cm4gcn10b0pTT04odCl7Y29uc3QgZT1zdXBlci50b0pTT04odCk7cmV0dXJuIGUuc3BsaXRzPXRoaXMuX19zcGxpdHMsZS5zcGxpdFZhbHVlcz10aGlzLl9fc3BsaXRWYWx1ZXMsZX1mcm9tSlNPTih0LGUpe2lmKHN1cGVyLmZyb21KU09OKHQsZSksdGhpcy5fX3NwbGl0cz10LnNwbGl0c3x8e30sdGhpcy5fX3NwbGl0VmFsdWVzPVtdLHQuc3BsaXRWYWx1ZXMpZm9yKGNvbnN0IGUgb2YgdC5zcGxpdFZhbHVlcyl7Y29uc3QgdD1uZXcgdGhpcy5fX2RhdGFUeXBlO3QuZnJvbUpTT04oZSksdGhpcy5fX3NwbGl0VmFsdWVzLnB1c2godCl9fWxvYWRTcGxpdFZhbHVlcyh0KXtjb25zdCBlPXQubG9hZFVJbnQzMkFycmF5KCk7aWYoMD09ZS5sZW5ndGgpcmV0dXJuO2xldCBzPTAsYT0wO2Zvcig7Oyl7Y29uc3QgdD1lW3MrK10saT1lW3MrK10scj17fTtmb3IobGV0IHQ9MDt0PGk7dCsrKXtjb25zdCB0PWVbcysrXSxpPWVbcysrXTtyW3RdPWksaT49YSYmKGE9aSsxKX1pZih0aGlzLl9fc3BsaXRzW3RdPXIscz49ZS5sZW5ndGgpYnJlYWt9Y29uc3QgaT10aGlzLl9fbnVtRmxvYXQzMkVsZW1lbnRzLHI9dC5sb2FkRmxvYXQzMkFycmF5KGEqaSk7dGhpcy5fX3NwbGl0VmFsdWVzPVtdO2ZvcihsZXQgdD0wO3Q8YTt0Kyspe2NvbnN0IGU9dGhpcy5fX2RhdGFUeXBlLmNyZWF0ZUZyb21GbG9hdDMyQXJyYXkoci5zbGljZSh0KmksdCppK2kpKTt0aGlzLl9fc3BsaXRWYWx1ZXMucHVzaChlKX19fWNsYXNzIEUgZXh0ZW5kcyBjbGFzcyBleHRlbmRzIGNsYXNze2NvbnN0cnVjdG9yKCl7dGhpcy5saXN0ZW5lcnM9e30sdGhpcy5fX2lkPSsren1nZXRJZCgpe3JldHVybiB0aGlzLl9faWR9b24odCxlKXtpZighZSl0aHJvdyBuZXcgRXJyb3IoIk1pc3NpbmcgbGlzdGVuZXIuIik7dGhpcy5saXN0ZW5lcnNbdF18fCh0aGlzLmxpc3RlbmVyc1t0XT1bXSk7Y29uc3Qgcz10aGlzLmxpc3RlbmVyc1t0XTtpZihzLmluY2x1ZGVzKGUpKXRocm93IG5ldyBFcnJvcihgTGlzdGVuZXIgIiR7ZS5uYW1lfSIgYWxyZWFkeSBjb25uZWN0ZWQgdG8gZXZlbnQgIiR7dH0iLmApO2NvbnN0IGE9cy5sZW5ndGg7cmV0dXJuIHNbYV09ZSxhfW9uY2UodCxlKXtjb25zdCBzPWE9PntlKGEpLHRoaXMub2ZmKHQscyl9O3JldHVybiB0aGlzLm9uKHQscyl9b2ZmKHQsZSl7aWYoIWUpdGhyb3cgbmV3IEVycm9yKCJNaXNzaW5nIGNhbGxiYWNrIGZ1bmN0aW9uIChsaXN0ZW5lcikuIik7aWYoIm51bWJlciI9PXR5cGVvZiBlKXJldHVybiBjb25zb2xlLndhcm4oIkRlcHJlY2F0ZWQuIFVuLXJlZ2lzdGVyIHVzaW5nIHRoZSBvcmlnaW5hbCBsaXN0ZW5lciBpbnN0ZWFkLiIpLHZvaWQgdGhpcy5yZW1vdmVMaXN0ZW5lckJ5SWQodCxlKTtjb25zdCBzPXRoaXMubGlzdGVuZXJzW3RdfHxbXSxhPVtdO2lmKHMuZm9yRWFjaCgoKHQscyk9Pnt0PT09ZSYmYS5wdXNoKHMpfSkpLDA9PWEubGVuZ3RoKXRocm93IG5ldyBFcnJvcihgTGlzdGVuZXIgIiR7ZS5uYW1lfSIgaXMgbm90IGNvbm5lY3RlZCB0byAiJHt0fSIgZXZlbnRgKTtmb3IoY29uc3QgdCBvZiBhKXNbdF09dm9pZCAwfWFkZExpc3RlbmVyKHQsZSl7cmV0dXJuIGNvbnNvbGUud2FybigiRGVwcmVjYXRlZC4gVXNlICNvbiBpbnN0ZWFkLiIpLHRoaXMub24odCxlKX1yZW1vdmVMaXN0ZW5lcih0LGUpe2NvbnNvbGUud2FybigiRGVwcmVjYXRlZC4gVXNlICNvZmYgaW5zdGVhZC4iKSx0aGlzLm9mZih0LGUpfXJlbW92ZUxpc3RlbmVyQnlJZCh0LGUpe2NvbnN0IHM9dGhpcy5saXN0ZW5lcnNbdF07aWYocyl7aWYoIXNbZV0pdGhyb3cgbmV3IEVycm9yKCJJbnZhbGlkIElEIik7c1tlXT12b2lkIDB9ZWxzZSBjb25zb2xlLndhcm4oImNhbGxiYWNrIDoiK2UrIiB3YXMgbm90IGNvbm5lY3RlZCB0byB0aGlzIHNpZ25hbDoiK3QpfWVtaXQodCxlKXsodGhpcy5saXN0ZW5lcnNbdF18fFtdKS5mb3JFYWNoKCh0PT57dCYmdChlKX0pKX19e2NvbnN0cnVjdG9yKCl7c3VwZXIoKSx0aGlzLl9fcGFyYW1zPVtdLHRoaXMuX19wYXJhbU1hcHBpbmc9e30sdGhpcy5kZXByZWNhdGVkUGFyYW1NYXBwaW5nPXt9LHRoaXMuX19wYXJhbUV2ZW50TGlzdGVuZXJJRHM9e319bnVtUGFyYW1ldGVycygpe3JldHVybiBjb25zb2xlLndhcm4oIkRlcHJlY2F0ZWQuIFVzZSAjZ2V0TnVtUGFyYW1ldGVycyBpbnN0ZWFkLiIpLHRoaXMuZ2V0TnVtUGFyYW1ldGVycygpfWdldE51bVBhcmFtZXRlcnMoKXtyZXR1cm4gdGhpcy5fX3BhcmFtcy5sZW5ndGh9Z2V0UGFyYW1ldGVycygpe3JldHVybiB0aGlzLl9fcGFyYW1zfWdldFBhcmFtZXRlckluZGV4KHQpe3JldHVybiB0aGlzLl9fcGFyYW1NYXBwaW5nW3RdfWdldFBhcmFtZXRlckJ5SW5kZXgodCl7cmV0dXJuIHRoaXMuX19wYXJhbXNbdF19aGFzUGFyYW1ldGVyKHQpe3JldHVybiB0IGluIHRoaXMuX19wYXJhbU1hcHBpbmd9YWRkUGFyYW1ldGVyRGVwcmVjYXRpb25NYXBwaW5nKHQsZSl7dGhpcy5kZXByZWNhdGVkUGFyYW1NYXBwaW5nW3RdPWV9Z2V0UGFyYW1ldGVyKHQpe2xldCBlPXRoaXMuX19wYXJhbU1hcHBpbmdbdF07aWYobnVsbD09ZSl7Y29uc3Qgcz10aGlzLmRlcHJlY2F0ZWRQYXJhbU1hcHBpbmdbdF07aWYoIXMpcmV0dXJuIG51bGw7Y29uc29sZS53YXJuKGBQYXJhbWV0ZXIgbmFtZSAke3R9IGlzIG5vdyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlICR7c30gaW5zdGVhZC5gKSxlPXRoaXMuX19wYXJhbU1hcHBpbmdbc119cmV0dXJuIHRoaXMuX19wYXJhbXNbZV19X19wYXJhbWV0ZXJWYWx1ZUNoYW5nZWQodCl7dGhpcy5lbWl0KCJwYXJhbWV0ZXJWYWx1ZUNoYW5nZWQiLHQpfWFkZFBhcmFtZXRlcih0KXtyZXR1cm4gdGhpcy5pbnNlcnRQYXJhbWV0ZXIodCx0aGlzLl9fcGFyYW1zLmxlbmd0aCl9aW5zZXJ0UGFyYW1ldGVyKHQsZSl7Y29uc3Qgcz10LmdldE5hbWUoKTtudWxsIT10aGlzLl9fcGFyYW1NYXBwaW5nW3NdJiYoY29uc29sZS53YXJuKCJSZXBsYWNpbmcgUGFyYW1ldGVyOiIrcyksdGhpcy5yZW1vdmVQYXJhbWV0ZXIocykpLHQuc2V0T3duZXIodGhpcyksdGhpcy5fX3BhcmFtRXZlbnRMaXN0ZW5lcklEc1tzXT10Lm9uKCJ2YWx1ZUNoYW5nZWQiLChlPT57Y29uc3Qgcz17cGFyYW06dH07Zm9yKGNvbnN0IHQgaW4gZSlzW3RdPWVbdF07dGhpcy5fX3BhcmFtZXRlclZhbHVlQ2hhbmdlZChzKX0pKSx0aGlzLl9fcGFyYW1zLnNwbGljZShlLDAsdCk7Zm9yKGxldCB0PWU7dDx0aGlzLl9fcGFyYW1zLmxlbmd0aDt0KyspdGhpcy5fX3BhcmFtTWFwcGluZ1t0aGlzLl9fcGFyYW1zW3RdLmdldE5hbWUoKV09dDtyZXR1cm4gdGhpcy5lbWl0KCJwYXJhbWV0ZXJBZGRlZCIse25hbWU6c30pLHR9cmVtb3ZlUGFyYW1ldGVyKHQpe2lmKG51bGw9PXRoaXMuX19wYXJhbU1hcHBpbmdbdF0pdGhyb3cgbmV3IEVycm9yKCJVbmFibGUgdG8gcmVtb3ZlIFBhcmFtZXRlcjoiK3QpO2NvbnN0IGU9dGhpcy5fX3BhcmFtTWFwcGluZ1t0XTt0aGlzLl9fcGFyYW1zW3RoaXMuX19wYXJhbU1hcHBpbmdbdF1dLnJlbW92ZUxpc3RlbmVyQnlJZCgidmFsdWVDaGFuZ2VkIix0aGlzLl9fcGFyYW1FdmVudExpc3RlbmVySURzW3RdKSx0aGlzLl9fcGFyYW1zLnNwbGljZShlLDEpLGRlbGV0ZSB0aGlzLl9fcGFyYW1NYXBwaW5nW3RdO2ZvcihsZXQgdD1lO3Q8dGhpcy5fX3BhcmFtcy5sZW5ndGg7dCsrKXRoaXMuX19wYXJhbU1hcHBpbmdbdGhpcy5fX3BhcmFtc1t0XS5nZXROYW1lKCldPXQ7dGhpcy5lbWl0KCJwYXJhbWV0ZXJSZW1vdmVkIix7bmFtZTp0fSl9cmVwbGFjZVBhcmFtZXRlcih0KXtjb25zdCBlPXQuZ2V0TmFtZSgpO2lmKG51bGw9PXRoaXMuX19wYXJhbU1hcHBpbmdbZV0pdGhyb3cgbmV3IEVycm9yKCJVbmFibGUgdG8gcmVwbGFjZSBQYXJhbWV0ZXI6IitwYXJhbU5hbWUpO2NvbnN0IHM9dGhpcy5fX3BhcmFtTWFwcGluZ1tlXTtyZXR1cm4gdGhpcy5yZW1vdmVQYXJhbWV0ZXIoZSksdGhpcy5pbnNlcnRQYXJhbWV0ZXIodCxzKSx0fXRvSlNPTih0KXtjb25zdCBlPXt9LHM9e307bGV0IGE9MDtmb3IoY29uc3QgZSBvZiB0aGlzLl9fcGFyYW1zKXtjb25zdCBpPWUudG9KU09OKHQpO2kmJihzW2UuZ2V0TmFtZSgpXT1pLGErKyl9cmV0dXJuIGE+MCYmKGUucGFyYW1zPXMpLGV9ZnJvbUpTT04odCxlKXtpZih0LnBhcmFtcylmb3IoY29uc3QgcyBpbiB0LnBhcmFtcyl7Y29uc3QgYT10LnBhcmFtc1tzXSxpPXRoaXMuZ2V0UGFyYW1ldGVyKHMpO2k/YS5wYXJhbVBhdGg/ZS5yZXNvbHZlUGF0aChhLnBhcmFtUGF0aCwodD0+e3RoaXMucmVwbGFjZVBhcmFtZXRlcih0KX0pLCh0PT57Y29uc29sZS53YXJuKCJVbmFibGUgdG8gcmVzb2x2ZSBzaGFyZWQgcGFyYW1ldGVyOiIrYS5wYXJhbVBhdGgpfSkpOmkuZnJvbUpTT04oYSxlKTpjb25zb2xlLndhcm4oIlBhcmFtIG5vdCBmb3VuZDoiK3MpfX1yZWFkQmluYXJ5KHQsZSl7aWYoZS52ZXJzaW9uc1siemVhLWVuZ2luZSJdLmNvbXBhcmUoWzAsMCwzXSk+PTApe2NvbnN0IHM9dC5sb2FkVUludDMyKCk7Zm9yKGxldCBhPTA7YTxzO2ErKyl7Y29uc3Qgcz10LmxvYWRTdHIoKSxhPXQubG9hZFN0cigpO2xldCBpPXRoaXMuZ2V0UGFyYW1ldGVyKGEpO2lmKCFpKXtpZihpPV8ocyxhKSwhaSl7Y29uc29sZS5lcnJvcigiVW5hYmxlIHRvIGNvbnN0cnVjdCBwcm9wOiIrYSsiIG9mIHR5cGU6IitzKTtjb250aW51ZX10aGlzLmFkZFBhcmFtZXRlcihpKX1pLnJlYWRCaW5hcnkodCxlKX19fXRvU3RyaW5nKCl7cmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudG9KU09OKCksbnVsbCwyKX1jb3B5RnJvbSh0LGUpe2xldCBzPXQuZ2V0TnVtUGFyYW1ldGVycygpO2Zvcig7cy0tOyl7Y29uc3QgYT10LmdldFBhcmFtZXRlckJ5SW5kZXgocyksaT10aGlzLmdldFBhcmFtZXRlcihhLmdldE5hbWUoKSk7aT9pLmxvYWRWYWx1ZShhLmdldFZhbHVlKCkpOnRoaXMuYWRkUGFyYW1ldGVyKGEuY2xvbmUoZSkpfX19e2NvbnN0cnVjdG9yKCl7c3VwZXIoKSx0aGlzLl9fbnVtVmVydGljZXM9MCx0aGlzLl9fYm91bmRpbmdCb3g9bmV3IEYsdGhpcy5fX2JvdW5kaW5nQm94RGlydHk9ITAsdGhpcy5fX3ZlcnRleEF0dHJpYnV0ZXM9bmV3IE1hcCx0aGlzLl9fbWV0YURhdGE9bmV3IE1hcCx0aGlzLmFkZFZlcnRleEF0dHJpYnV0ZSgicG9zaXRpb25zIixsLDApfWNsZWFyKCl7dGhpcy5zZXROdW1WZXJ0aWNlcygwKX1zZXREZWJ1Z05hbWUodCl7dGhpcy5fX25hbWU9dH1hZGRWZXJ0ZXhBdHRyaWJ1dGUodCxlLHMpe2NvbnN0IGE9dGhpcy5nZXRWZXJ0ZXhBdHRyaWJ1dGUoInBvc2l0aW9ucyIpO2xldCBpO3ZhciByO3JldHVybiBpPShyPXMpJiZ2b2lkIDAhPT1yLmJ5dGVMZW5ndGg/bmV3IEEoZSxzKTpuZXcgQShlLG51bGwhPWE/YS5sZW5ndGg6MCxzKSx0aGlzLl9fdmVydGV4QXR0cmlidXRlcy5zZXQodCxpKSxpfWhhc1ZlcnRleEF0dHJpYnV0ZSh0KXtyZXR1cm4gdGhpcy5fX3ZlcnRleEF0dHJpYnV0ZXMuaGFzKHQpfWdldFZlcnRleEF0dHJpYnV0ZSh0KXtyZXR1cm4gdGhpcy5fX3ZlcnRleEF0dHJpYnV0ZXMuZ2V0KHQpfWdldFZlcnRleEF0dHJpYnV0ZXMoKXtjb25zdCB0PXt9O2Zvcihjb25zdFtlLHNdb2YgdGhpcy5fX3ZlcnRleEF0dHJpYnV0ZXMuZW50cmllcygpKXRbZV09cztyZXR1cm4gdH1nZXQgdmVydGljZXMoKXtyZXR1cm4gY29uc29sZS53YXJuKCJkZXByZWNhdGVkIHVzZSAjZ2V0VmVydGV4QXR0cmlidXRlKCdwb3NpdGlvbnMnKSIpLHRoaXMuX192ZXJ0ZXhBdHRyaWJ1dGVzLmdldCgicG9zaXRpb25zIil9bnVtVmVydGljZXMoKXtyZXR1cm4gdGhpcy5fX251bVZlcnRpY2VzfWdldE51bVZlcnRpY2VzKCl7cmV0dXJuIHRoaXMuX19udW1WZXJ0aWNlc31zZXROdW1WZXJ0aWNlcyh0KXt0aGlzLl9fbnVtVmVydGljZXM9dCx0aGlzLl9fdmVydGV4QXR0cmlidXRlcy5mb3JFYWNoKCh0PT50LnJlc2l6ZSh0aGlzLl9fbnVtVmVydGljZXMpKSksdGhpcy5zZXRCb3VuZGluZ0JveERpcnR5KCl9Z2V0VmVydGV4KHQpe3JldHVybiBjb25zb2xlLndhcm4oImRlcHJlY2F0ZWQgdXNlICNnZXRWZXJ0ZXhBdHRyaWJ1dGUoJ3Bvc2l0aW9ucycpLmdldFZhbHVlUmVmKCkiKSxsLmNyZWF0ZUZyb21CdWZmZXIodGhpcy52ZXJ0aWNlcy5kYXRhLmJ1ZmZlciwzKnQqNCl9c2V0VmVydGV4KHQsZSl7cmV0dXJuIGNvbnNvbGUud2FybigiZGVwcmVjYXRlZCB1c2UgI2dldFZlcnRleEF0dHJpYnV0ZSgncG9zaXRpb25zJykuZ2V0VmFsdWVSZWYoKS5zZXRGcm9tT3RoZXIodmFsdWUpIiksbC5jcmVhdGVGcm9tQnVmZmVyKHRoaXMudmVydGljZXMuZGF0YS5idWZmZXIsMyp0KjQpLnNldEZyb21PdGhlcihlKX1tb3ZlVmVydGljZXModCl7Y29uc29sZS53YXJuKCJkZXByZWNhdGVkIHVzZSAjZ2V0VmVydGV4QXR0cmlidXRlKCdwb3NpdGlvbnMnKS5nZXRWYWx1ZVJlZigpIik7Y29uc3QgZT10aGlzLnZlcnRpY2VzO2ZvcihsZXQgcz0wO3M8ZS5sZW5ndGg7cysrKWUuZ2V0VmFsdWVSZWYocykuYWRkSW5QbGFjZSh0KTt0aGlzLnNldEJvdW5kaW5nQm94RGlydHkoKX10cmFuc2Zvcm1WZXJ0aWNlcyh0KXtjb25zb2xlLndhcm4oImRlcHJlY2F0ZWQsIHBsZWFzZSB0cmFuc2Zvcm0gdGhlIHZlcnRpY2VzIG1hbnVhbGx5Iik7Y29uc3QgZT10aGlzLl9fdmVydGV4QXR0cmlidXRlcy5nZXQoInBvc2l0aW9ucyIpO2ZvcihsZXQgcz0wO3M8ZS5sZW5ndGg7cysrKXtjb25zdCBhPWUuZ2V0VmFsdWVSZWYocyksaT10LnRyYW5zZm9ybVZlYzMoYSk7YS5zZXQoaS54LGkueSxpLnopfXRoaXMuc2V0Qm91bmRpbmdCb3hEaXJ0eSgpfWdldCBib3VuZGluZ0JveCgpe3JldHVybiBjb25zb2xlLndhcm4oImRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgI2dldEJvdW5kaW5nQm94KCkiKSx0aGlzLl9fYm91bmRpbmdCb3hEaXJ0eSYmdGhpcy51cGRhdGVCb3VuZGluZ0JveCgpLHRoaXMuX19ib3VuZGluZ0JveH1nZXRCb3VuZGluZ0JveCgpe3JldHVybiB0aGlzLl9fYm91bmRpbmdCb3hEaXJ0eSYmdGhpcy51cGRhdGVCb3VuZGluZ0JveCgpLHRoaXMuX19ib3VuZGluZ0JveH1zZXRCb3VuZGluZ0JveERpcnR5KCl7dGhpcy5fX2JvdW5kaW5nQm94RGlydHl8fCh0aGlzLl9fYm91bmRpbmdCb3hEaXJ0eT0hMCx0aGlzLmVtaXQoImJvdW5kaW5nQm94Q2hhbmdlZCIse30pKX11cGRhdGVCb3VuZGluZ0JveCgpe2NvbnN0IHQ9dGhpcy5nZXRWZXJ0ZXhBdHRyaWJ1dGUoInBvc2l0aW9ucyIpLGU9bmV3IEYscz10Lmxlbmd0aDtmb3IobGV0IGE9MDthPHM7YSsrKWUuYWRkUG9pbnQodC5nZXRWYWx1ZVJlZihhKSk7dGhpcy5fX2JvdW5kaW5nQm94PWUsdGhpcy5fX2JvdW5kaW5nQm94RGlydHk9ITF9Z2V0TWV0YWRhdGEodCl7cmV0dXJuIHRoaXMuX19tZXRhRGF0YS5nZXQodCl9aGFzTWV0YWRhdGEodCl7cmV0dXJuIHRoaXMuX19tZXRhRGF0YS5oYXModCl9c2V0TWV0YWRhdGEodCxlKXt0aGlzLl9fbWV0YURhdGEuc2V0KHQsZSl9ZGVsZXRlTWV0YWRhdGEodCl7dGhpcy5fX21ldGFEYXRhLmRlbGV0ZSh0KX1nZW5CdWZmZXJzKHQpe2NvbnN0IGU9e307Zm9yKGNvbnN0W3Qsc11vZiB0aGlzLl9fdmVydGV4QXR0cmlidXRlcyllW3RdPXt2YWx1ZXM6cy5kYXRhLGNvdW50OnMubGVuZ3RoLGRhdGFUeXBlOnMuZGF0YVR5cGUsbm9ybWFsaXplZDpzLm5vcm1hbGl6ZWR9O3JldHVybntudW1WZXJ0aWNlczp0aGlzLm51bVZlcnRpY2VzKCksYXR0ckJ1ZmZlcnM6ZX19bG9hZEJhc2VHZW9tQmluYXJ5KHQpe3RoaXMubmFtZT10LmxvYWRTdHIoKTtjb25zdCBlPXQubG9hZFVJbnQ4KCk7dGhpcy5kZWJ1Z0NvbG9yPXQubG9hZFJHQkZsb2F0MzJDb2xvcigpO2NvbnN0IHM9dC5sb2FkVUludDMyKCk7dGhpcy5fX2JvdW5kaW5nQm94LnNldCh0LmxvYWRGbG9hdDMyVmVjMygpLHQubG9hZEZsb2F0MzJWZWMzKCkpLHRoaXMuc2V0TnVtVmVydGljZXMocyk7Y29uc3QgYT10aGlzLmdldFZlcnRleEF0dHJpYnV0ZSgicG9zaXRpb25zIik7bGV0IGkscjsyJmUmJihpPXRoaXMuZ2V0VmVydGV4QXR0cmlidXRlKCJub3JtYWxzIiksaXx8KGk9dGhpcy5hZGRWZXJ0ZXhBdHRyaWJ1dGUoIm5vcm1hbHMiLGwsMCkpKSw0JmUmJihyPXRoaXMuZ2V0VmVydGV4QXR0cmlidXRlKCJ0ZXhDb29yZHMiKSxyfHwocj10aGlzLmFkZFZlcnRleEF0dHJpYnV0ZSgidGV4Q29vcmRzIixkLDApKSk7Y29uc3Qgbj0odCxlLHMsaSk9Pntmb3IobGV0IHI9dFswXTtyPHRbMV07cisrKXtjb25zdCB0PW5ldyBsKGlbMypyKzBdLzI1NSxpWzMqcisxXS8yNTUsaVszKnIrMl0vMjU1KTt0Lm11bHRpcGx5SW5QbGFjZShzKSx0LmFkZEluUGxhY2UoZSksYS5zZXRWYWx1ZShyLHQpfX0saD0odCxlLHMsYSk9PntzLmlzTnVsbCgpJiZzLnNldCgxLDEsMSk7Zm9yKGxldCByPXRbMF07cjx0WzFdO3IrKyl7Y29uc3QgdD1uZXcgbChhWzMqciswXS8yNTUsYVszKnIrMV0vMjU1LGFbMypyKzJdLzI1NSk7dC5tdWx0aXBseUluUGxhY2UocyksdC5hZGRJblBsYWNlKGUpLHQubm9ybWFsaXplSW5QbGFjZSgpLGkuc2V0VmFsdWUocix0KX19LG89KHQsZSxzLGEpPT57Zm9yKGxldCBpPXRbMF07aTx0WzFdO2krKyl7Y29uc3QgdD1uZXcgZChhWzIqaSswXS8yNTUsYVsyKmkrMV0vMjU1KTt0Lm11bHRpcGx5SW5QbGFjZShzKSx0LmFkZEluUGxhY2UoZSksci5zZXRWYWx1ZShpLHQpfX0sXz10LmxvYWRVSW50MzIoKTtpZigxPT1fKXt7Y29uc3QgZT10aGlzLl9fYm91bmRpbmdCb3gsYT10LmxvYWRVSW50OEFycmF5KDMqcyk7bihbMCxzXSxlLnAwLGUuZGlhZ29uYWwoKSxhKX1pZihpKXtjb25zdCBlPW5ldyBGKHQubG9hZEZsb2F0MzJWZWMzKCksdC5sb2FkRmxvYXQzMlZlYzMoKSksYT10LmxvYWRVSW50OEFycmF5KDMqcyk7aChbMCxzXSxlLnAwLGUuZGlhZ29uYWwoKSxhKSxpLmxvYWRTcGxpdFZhbHVlcyh0KX1pZihyKXtjb25zdCBlPW5ldyBJKHQubG9hZEZsb2F0MzJWZWMyKCksdC5sb2FkRmxvYXQzMlZlYzIoKSksYT10LmxvYWRVSW50OEFycmF5KDIqcyk7byhbMCxzXSxlLnAwLGUuZGlhZ29uYWwoKSxhKSxyLmxvYWRTcGxpdFZhbHVlcyh0KX19ZWxzZXtjb25zdCBlPVtdO2xldCBhPTA7Zm9yKGxldCBzPTA7czxfO3MrKyl7Y29uc3Qgcz10LmxvYWRVSW50MzIoKSxuPXtyYW5nZTpbYSxhK3NdLGJib3g6bmV3IEYodC5sb2FkRmxvYXQzMlZlYzMoKSx0LmxvYWRGbG9hdDMyVmVjMygpKX07aSYmKG4ubm9ybWFsc1JhbmdlPW5ldyBGKHQubG9hZEZsb2F0MzJWZWMzKCksdC5sb2FkRmxvYXQzMlZlYzMoKSkpLHImJihuLnRleENvb3Jkc1JhbmdlPW5ldyBJKHQubG9hZEZsb2F0MzJWZWMyKCksdC5sb2FkRmxvYXQzMlZlYzIoKSkpLGUucHVzaChuKSxhKz1zfWNvbnN0IGQ9dC5sb2FkVUludDhBcnJheSgzKnMpO2xldCBsLGM7aSYmKGw9dC5sb2FkVUludDhBcnJheSgzKnMpKSxyJiYoYz10LmxvYWRVSW50OEFycmF5KDIqcykpO2ZvcihsZXQgdD0wO3Q8Xzt0Kyspe3tjb25zdCBzPWVbdF0uYmJveDtuKGVbdF0ucmFuZ2Uscy5wMCxzLmRpYWdvbmFsKCksZCl9aWYoaSl7Y29uc3Qgcz1lW3RdLm5vcm1hbHNSYW5nZTtoKGVbdF0ucmFuZ2Uscy5wMCxzLmRpYWdvbmFsKCksbCl9aWYocil7Y29uc3Qgcz1lW3RdLnRleENvb3Jkc1JhbmdlO28oZVt0XS5yYW5nZSxzLnAwLHMuZGlhZ29uYWwoKSxjKX19aSYmaS5sb2FkU3BsaXRWYWx1ZXModCksciYmci5sb2FkU3BsaXRWYWx1ZXModCl9fXRvSlNPTih0KXtsZXQgZT1zdXBlci50b0pTT04odCk7ZXx8KGU9e30pLGUudHlwZT1vKHRoaXMpLHQmJnQuc2tpcFRvcG9sb2d5fHwoZS5udW1WZXJ0aWNlcz10aGlzLl9fbnVtVmVydGljZXN8fDApO2NvbnN0IHM9e307Zm9yKGNvbnN0W2UsYV1vZiB0aGlzLl9fdmVydGV4QXR0cmlidXRlcy5lbnRyaWVzKCkpdCYmInNraXBBdHRyaWJ1dGVzImluIHQmJnQuc2tpcEF0dHJpYnV0ZXMuaW5jbHVkZXMoZSl8fChzW2VdPWEudG9KU09OKHQpKTtyZXR1cm4gZS52ZXJ0ZXhBdHRyaWJ1dGVzPXMsZX1mcm9tSlNPTih0LGUpe2lmKHRoaXMuY2xlYXIoKSxzdXBlci5mcm9tSlNPTih0LGUpLHQubnVtVmVydGljZXMmJnRoaXMuc2V0TnVtVmVydGljZXModC5udW1WZXJ0aWNlcyksdC52ZXJ0ZXhBdHRyaWJ1dGVzKWZvcihjb25zdCBlIGluIHQudmVydGV4QXR0cmlidXRlcyl7bGV0IHM9dGhpcy5fX3ZlcnRleEF0dHJpYnV0ZXMuZ2V0KGUpO2NvbnN0IGE9dC52ZXJ0ZXhBdHRyaWJ1dGVzW2VdO2lmKCFzKXtjb25zdCB0PWgoYS5kYXRhVHlwZSk7cz1uZXcgTSh0aGlzLHQsMCxhLmRlZmF1bHRTY2FsYXJWYWx1ZSksdGhpcy5fX3ZlcnRleEF0dHJpYnV0ZXMuc2V0KGUscyl9cy5mcm9tSlNPTihhKX10aGlzLmVtaXQoImdlb21EYXRhVG9wb2xvZ3lDaGFuZ2VkIil9dG9TdHJpbmcoKXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy50b0pTT04oKSxudWxsLDIpfX1jbGFzcyBTIGV4dGVuZHMgRXtjb25zdHJ1Y3Rvcigpe3N1cGVyKCl9Y2xlYXIoKXt0aGlzLnNldE51bVZlcnRpY2VzKDApLHRoaXMuZW1pdCgiZ2VvbURhdGFUb3BvbG9neUNoYW5nZWQiKX1sb2FkQmluKHQpe3RoaXMubmFtZT10LmxvYWRTdHIoKTtjb25zdCBlPXQubG9hZFVJbnQzMigpO3RoaXMuX19ib3VuZGluZ0JveC5zZXQodC5sb2FkRmxvYXQzMlZlYzMoKSx0LmxvYWRGbG9hdDMyVmVjMygpKSx0aGlzLnNldE51bVZlcnRpY2VzKGUpO2NvbnN0IHM9dGhpcy5nZXRWZXJ0ZXhBdHRyaWJ1dGUoInBvc2l0aW9ucyIpO2lmKGU8MjU2KXtjb25zdCBhPXRoaXMuX19ib3VuZGluZ0JveC50b01hdDQoKSxpPXQubG9hZFVJbnQ4QXJyYXkoMyplKTtmb3IobGV0IHQ9MDt0PGU7dCsrKXtjb25zdCBlPW5ldyBWZWMzKGlbMyp0KzBdLzI1NSxpWzMqdCsxXS8yNTUsaVszKnQrMl0vMjU1KTtzLnNldFZhbHVlKHQsYS50cmFuc2Zvcm1WZWMzKGUpKX19ZWxzZXtjb25zdCBhPXQubG9hZFVJbnQzMigpLGk9W107Zm9yKGxldCBlPTA7ZTxhO2UrKyl7Y29uc3QgZT10LmxvYWRVSW50MzJWZWMyKCkscz10LmxvYWRGbG9hdDMyVmVjMygpLGE9dC5sb2FkRmxvYXQzMlZlYzMoKTtpLnB1c2goe3JhbmdlOmUsYmJveDpuZXcgQm94MyhzLGEpfSl9Y29uc3Qgcj10LmxvYWRVSW50OEFycmF5KDMqZSk7Zm9yKGxldCB0PTA7dDxhO3QrKyl7Y29uc3QgZT1pW3RdLmJib3gudG9NYXQ0KCk7Zm9yKGxldCBhPWlbdF0ucmFuZ2UueDthPGlbdF0ucmFuZ2UueTthKyspe2NvbnN0IHQ9bmV3IFZlYzMoclszKmErMF0vMjU1LHJbMyphKzFdLzI1NSxyWzMqYSsyXS8yNTUpO3Muc2V0VmFsdWUoYSxlLnRyYW5zZm9ybVZlYzModCkpfX19fXJlYWRCaW5hcnkodCxlKXtzdXBlci5sb2FkQmFzZUdlb21CaW5hcnkodCksdGhpcy5lbWl0KCJnZW9tRGF0YUNoYW5nZWQiLHt9KX19bigiUG9pbnRzIixTKTtjbGFzcyBPIGV4dGVuZHMgRXtjb25zdHJ1Y3Rvcigpe3N1cGVyKCksdGhpcy5fX2luZGljZXM9bmV3IFVpbnQzMkFycmF5fWNsZWFyKCl7c3VwZXIuY2xlYXIoKSx0aGlzLnNldE51bVNlZ21lbnRzKDApLHRoaXMuZW1pdCgiZ2VvbURhdGFUb3BvbG9neUNoYW5nZWQiKX1nZXRJbmRpY2VzKCl7cmV0dXJuIHRoaXMuX19pbmRpY2VzfWdldE51bVNlZ21lbnRzKCl7cmV0dXJuIHRoaXMuX19pbmRpY2VzLmxlbmd0aC8yfXNldE51bVNlZ21lbnRzKHQpe2lmKHQ+dGhpcy5nZXROdW1TZWdtZW50cygpKXtjb25zdCBlPW5ldyBVaW50MzJBcnJheSgyKnQpO2Uuc2V0KHRoaXMuX19pbmRpY2VzKSx0aGlzLl9faW5kaWNlcz1lfWVsc2UgdGhpcy5fX2luZGljZXM9dGhpcy5fX2luZGljZXMuc2xpY2UoMCwyKnQpfXNldFNlZ21lbnRWZXJ0ZXhJbmRpY2VzKHQsZSxzKXtpZih0Pj10aGlzLl9faW5kaWNlcy5sZW5ndGgvMil0aHJvdyBuZXcgRXJyb3IoIkludmFsaWQgbGluZSBpbmRleDogIit0KyIuIE51bSBTZWdtZW50czogIit0aGlzLl9faW5kaWNlcy5sZW5ndGgvMik7dGhpcy5fX2luZGljZXNbMip0KzBdPWUsdGhpcy5fX2luZGljZXNbMip0KzFdPXN9c2V0U2VnbWVudCh0LGUscyl7Y29uc29sZS53YXJuKCJkZXByZWNhdGVkIHVzZSAjc2V0U2VnbWVudFZlcnRleEluZGljZXMiKSx0aGlzLnNldFNlZ21lbnRWZXJ0ZXhJbmRpY2VzKHQsZSxzKX1nZXRTZWdtZW50VmVydGV4SW5kZXgodCxlKXtpZih0PHRoaXMuZ2V0TnVtU2VnbWVudHMoKSlyZXR1cm4gdGhpcy5fX2luZGljZXNbMip0K2VdfWdlbkJ1ZmZlcnMoKXtjb25zdCB0PXN1cGVyLmdlbkJ1ZmZlcnMoKTtsZXQgZTtyZXR1cm4gZT10Lm51bVZlcnRpY2VzPE1hdGgucG93KDIsOCk/bmV3IFVpbnQ4QXJyYXkodGhpcy5fX2luZGljZXMpOnQubnVtVmVydGljZXM8TWF0aC5wb3coMiwxNik/bmV3IFVpbnQxNkFycmF5KHRoaXMuX19pbmRpY2VzKTp0aGlzLl9faW5kaWNlcyx0LmluZGljZXM9ZSx0fXJlYWRCaW5hcnkodCxlKXtzdXBlci5sb2FkQmFzZUdlb21CaW5hcnkodCksdGhpcy5zZXROdW1TZWdtZW50cyh0LmxvYWRVSW50MzIoKSk7Y29uc3Qgcz10LmxvYWRVSW50OCgpOzE9PXM/dGhpcy5fX2luZGljZXM9dC5sb2FkVUludDhBcnJheSgpOjI9PXM/dGhpcy5fX2luZGljZXM9dC5sb2FkVUludDE2QXJyYXkoKTo0PT1zJiYodGhpcy5fX2luZGljZXM9dC5sb2FkVUludDMyQXJyYXkoKSksdGhpcy5lbWl0KCJnZW9tRGF0YUNoYW5nZWQiLHt9KX10b0pTT04odCl7Y29uc3QgZT1zdXBlci50b0pTT04odCk7cmV0dXJuIHQmJnQuc2tpcFRvcG9sb2d5fHwoZS5pbmRpY2VzPUFycmF5LmZyb20odGhpcy5fX2luZGljZXMpKSxlfWZyb21KU09OKHQsZSl7c3VwZXIuZnJvbUpTT04odCxlKSx0LmluZGljZXMmJih0aGlzLl9faW5kaWNlcz1VaW50MzJBcnJheS5mcm9tKHQuaW5kaWNlcykpfX1uKCJMaW5lcyIsTyk7Y2xhc3MgUCBleHRlbmRzIEV7Y29uc3RydWN0b3IoKXtzdXBlcigpLHRoaXMuX19mYWNlQ291bnRzPVtdLHRoaXMuX19mYWNlVmVydGV4SW5kaWNlcz1uZXcgVWludDMyQXJyYXksdGhpcy5fX2ZhY2VBdHRyaWJ1dGVzPW5ldyBNYXAsdGhpcy5fX2VkZ2VBdHRyaWJ1dGVzPW5ldyBNYXAsdGhpcy5fX2xvZ1RvcG9sb2d5V2FybmluZ3M9ITEsdGhpcy5lZGdlVmVydHM9dm9pZCAwLHRoaXMudmVydGV4RWRnZXM9dm9pZCAwLHRoaXMubnVtRWRnZXM9MCx0aGlzLmVkZ2VBbmdsZXM9bmV3IEZsb2F0MzJBcnJheSx0aGlzLmVkZ2VWZWNzPVtdfWluaXQoKXt9Y2xlYXIoKXtzdXBlci5jbGVhcigpLHRoaXMuZWRnZVZlcnRzPXZvaWQgMCx0aGlzLnZlcnRleEVkZ2VzPXZvaWQgMCx0aGlzLm51bUVkZ2VzPTAsdGhpcy5lZGdlQW5nbGVzPW5ldyBGbG9hdDMyQXJyYXksdGhpcy5lbWl0KCJnZW9tRGF0YVRvcG9sb2d5Q2hhbmdlZCIpfWdldEZhY2VDb3VudHMoKXtyZXR1cm4gdGhpcy5fX2ZhY2VDb3VudHN9Z2V0TnVtRmFjZXMoKXtyZXR1cm4gMD09dGhpcy5fX2ZhY2VDb3VudHMubGVuZ3RoPzA6dGhpcy5fX2ZhY2VDb3VudHMucmVkdWNlKCgodCxlKT0+dCtlKSl9c2V0RmFjZUNvdW50cyh0KXtsZXQgZT0wLHM9MCxhPTM7Zm9yKGNvbnN0IGkgb2YgdCllKz1pLHMrPWkqYSxhKys7aWYoMD09dGhpcy5nZXROdW1GYWNlcygpKXRoaXMuX19mYWNlVmVydGV4SW5kaWNlcz1uZXcgVWludDMyQXJyYXkocyk7ZWxzZXtjb25zdCBlPW5ldyBVaW50MzJBcnJheShzKTtsZXQgaT0wLHI9MDtzPTAsYT0zLHQuZm9yRWFjaCgoKHQscyk9Pntjb25zdCBuPWkrTWF0aC5taW4odCx0aGlzLl9fZmFjZUNvdW50c1tzXSkqYTtlLnNldCh0aGlzLl9fZmFjZVZlcnRleEluZGljZXMuc2xpY2UoaSxuKSxyKSxpKz10aGlzLl9fZmFjZUNvdW50c1tzXSphLHIrPXQqYSxhKyt9KSksdGhpcy5fX2ZhY2VWZXJ0ZXhJbmRpY2VzPWV9dGhpcy5fX2ZhY2VDb3VudHM9dCx0aGlzLl9fZmFjZUF0dHJpYnV0ZXMuZm9yRWFjaCgodD0+e3QucmVzaXplKGUpfSkpfWdldEZhY2VWZXJ0ZXhDb3VudCh0KXtsZXQgZT0wLHM9MDtyZXR1cm4gdGhpcy5fX2ZhY2VDb3VudHMuc29tZSgoKGEsaSk9PntpZihlKz1hLGU+dClyZXR1cm4gcz1pKzMsITB9KSksc31nZXRGYWNlVmVydGV4T2Zmc2V0KHQpe2xldCBlPTAscz0wO3JldHVybiB0aGlzLl9fZmFjZUNvdW50cy5zb21lKCgoYSxpKT0+e2lmKGUrYT50KXJldHVybiBzKz0odC1lKSooaSszKSwhMDtlKz1hLHMrPWEqKGkrMyl9KSksc31zZXRGYWNlVmVydGV4SW5kaWNlcyh0LGUpezIhPWFyZ3VtZW50cy5sZW5ndGgmJihjb25zb2xlLndhcm4oImRlcHJlY2F0ZWQgaW50ZXJmYWNlLiBQbGVhc2UgcGFzcyB2ZXJ0ZXhJbmRpY2VzIGFzIGFuIGFycmF5IiksZT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSkpO2NvbnN0IHM9dGhpcy5nZXRGYWNlVmVydGV4Q291bnQodCk7aWYoZS5sZW5ndGghPXMpdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGluZGljZXMgZm9yIGZhY2U6JHt0fSB2ZXJ0ZXhJbmRpY2VzOiR7ZX0uIEV4cGVjdGVkICR7c30gaW5kaWNlc2ApO2NvbnN0IGE9dGhpcy5nZXRGYWNlVmVydGV4T2Zmc2V0KHQpO3RoaXMuX19mYWNlVmVydGV4SW5kaWNlcy5zZXQoZSxhKX1hZGRGYWNlKHQpe2NvbnN0IGU9Wy4uLnRoaXMuX19mYWNlQ291bnRzXTtpZihlLmxlbmd0aDw9dC5sZW5ndGgtMyl7Zm9yKGxldCBzPWUubGVuZ3RoO3M8dC5sZW5ndGgtMztzKyspZVtzXT0wO2VbdC5sZW5ndGgtM109MX1lbHNlIGVbdC5sZW5ndGgtM10rKzt0aGlzLnNldEZhY2VDb3VudHMoZSk7bGV0IHM9MCxhPTA7cmV0dXJuIHRoaXMuX19mYWNlQ291bnRzLnNvbWUoKChlLGkpPT57aWYoaSszPT10Lmxlbmd0aClyZXR1cm4gcys9ZS0xLGErPShlLTEpKihpKzMpLCEwO3MrPWUsYSs9ZSooaSszKX0pKSx0aGlzLl9fZmFjZVZlcnRleEluZGljZXMuc2V0KHQsYSksc31nZXRGYWNlVmVydGV4SW5kaWNlcyh0KXtjb25zdCBlPVtdLHM9dGhpcy5nZXRGYWNlVmVydGV4T2Zmc2V0KHQpLGE9dGhpcy5nZXRGYWNlVmVydGV4Q291bnQodCk7Zm9yKGxldCB0PTA7dDxhO3QrKyllLnB1c2godGhpcy5fX2ZhY2VWZXJ0ZXhJbmRpY2VzW3MrdF0pO3JldHVybiBlfWdldEZhY2VWZXJ0ZXhJbmRleCh0LGUpe2NvbnN0IHM9dGhpcy5nZXRGYWNlVmVydGV4T2Zmc2V0KHQpO3JldHVybiB0aGlzLl9fZmFjZVZlcnRleEluZGljZXNbcytlXX1hZGRWZXJ0ZXhBdHRyaWJ1dGUodCxlLHMpe2NvbnN0IGE9dGhpcy5nZXRWZXJ0ZXhBdHRyaWJ1dGUoInBvc2l0aW9ucyIpLGk9bmV3IE0odGhpcyxlLG51bGwhPWE/YS5sZW5ndGg6MCxzKTtyZXR1cm4gdGhpcy5fX3ZlcnRleEF0dHJpYnV0ZXMuc2V0KHQsaSksaX1hZGRGYWNlQXR0cmlidXRlKHQsZSxzKXtjb25zdCBhPW5ldyBBKGUsbnVsbCE9cz9zOnRoaXMuZ2V0TnVtRmFjZXMoKSk7cmV0dXJuIHRoaXMuX19mYWNlQXR0cmlidXRlcy5zZXQodCxhKSxhfWhhc0ZhY2VBdHRyaWJ1dGUodCl7cmV0dXJuIHRoaXMuX19mYWNlQXR0cmlidXRlcy5oYXModCl9Z2V0RmFjZUF0dHJpYnV0ZSh0KXtyZXR1cm4gdGhpcy5fX2ZhY2VBdHRyaWJ1dGVzLmdldCh0KX1hZGRFZGdlQXR0cmlidXRlKHQsZSxzKXtjb25zdCBhPW5ldyBBKGUsbnVsbCE9cz9zOnRoaXMuZ2V0TnVtRWRnZXMoKSk7cmV0dXJuIHRoaXMuX19lZGdlQXR0cmlidXRlcy5zZXQodCxhKSxhfWhhc0VkZ2VBdHRyaWJ1dGUodCl7cmV0dXJuIHRoaXMuX19lZGdlQXR0cmlidXRlcy5oYXModCl9Z2V0RWRnZUF0dHJpYnV0ZSh0KXtyZXR1cm4gdGhpcy5fX2VkZ2VBdHRyaWJ1dGVzLmdldCh0KX1nZW5Ub3BvbG9neUluZm8oKXtjb25zdCB0PXt9O3RoaXMudmVydGV4RWRnZXM9W10sdGhpcy5lZGdlRmFjZXM9W10sdGhpcy5lZGdlVmVydHM9W10sdGhpcy5mYWNlRWRnZXM9W10sdGhpcy5udW1FZGdlcz0wO2NvbnN0IGU9dGhpcy5nZXRWZXJ0ZXhBdHRyaWJ1dGUoInBvc2l0aW9ucyIpLHM9KHMsYSk9PntsZXQgaT1zLHI9YTtpZihyPGkpe2NvbnN0IHQ9aTtpPXIscj10fWNvbnN0IG49aSsiPiIrcjtpZihuIGluIHQpcmV0dXJuIHRbbl07Y29uc3QgaD1lLmdldFZhbHVlUmVmKGkpLG89ZS5nZXRWYWx1ZVJlZihyKS5zdWJ0cmFjdChoKSxfPXtlZGdlSW5kZXg6dGhpcy5lZGdlRmFjZXMubGVuZ3RoLzIsZWRnZVZlYzpvfTtyZXR1cm4gdFtuXT1fLHRoaXMuZWRnZUZhY2VzLnB1c2goLTEpLHRoaXMuZWRnZUZhY2VzLnB1c2goLTEpLHRoaXMuZWRnZVZlcnRzLnB1c2goaSksdGhpcy5lZGdlVmVydHMucHVzaChyKSx0aGlzLm51bUVkZ2VzKyssX30sYT0odCxlLGEpPT57Y29uc3QgaT1zKHQsZSkuZWRnZUluZGV4O2lmKGU8dCl7Y29uc3QgdD0yKmkrMDt0aGlzLl9fbG9nVG9wb2xvZ3lXYXJuaW5ncyYmLTEhPXRoaXMuZWRnZUZhY2VzW3RdJiZjb25zb2xlLndhcm4oIkVkZ2UgcG9seSAwIGFscmVhZHkgc2V0LiBNZXNoIGlzIG5vbi1tYW5pZm9sZC4iKSx0aGlzLmVkZ2VGYWNlc1t0XT1hfWVsc2V7Y29uc3QgdD0yKmkrMTt0aGlzLl9fbG9nVG9wb2xvZ3lXYXJuaW5ncyYmLTEhPXRoaXMuZWRnZUZhY2VzW3RdJiZjb25zb2xlLndhcm4oIkVkZ2UgcG9seSAxIGFscmVhZHkgc2V0LiBNZXNoIGlzIG5vbi1tYW5pZm9sZC4iKSx0aGlzLmVkZ2VGYWNlc1t0XT1hfWEgaW4gdGhpcy5mYWNlRWRnZXN8fCh0aGlzLmZhY2VFZGdlc1thXT1bXSksdGhpcy5mYWNlRWRnZXNbYV0ucHVzaChpKSxudWxsPT10aGlzLnZlcnRleEVkZ2VzW3RdJiYodGhpcy52ZXJ0ZXhFZGdlc1t0XT1uZXcgU2V0KSxudWxsPT10aGlzLnZlcnRleEVkZ2VzW2VdJiYodGhpcy52ZXJ0ZXhFZGdlc1tlXT1uZXcgU2V0KSx0aGlzLnZlcnRleEVkZ2VzW3RdLmFkZChpKSx0aGlzLnZlcnRleEVkZ2VzW2VdLmFkZChpKX0saT10aGlzLmdldE51bUZhY2VzKCk7Zm9yKGxldCB0PTA7dDxpO3QrKyl7Y29uc3QgZT10aGlzLmdldEZhY2VWZXJ0ZXhJbmRpY2VzKHQpO2ZvcihsZXQgcz0wO3M8ZS5sZW5ndGg7cysrKXthKGVbc10sZVsocysxKSVlLmxlbmd0aF0sdCl9fX1jb21wdXRlRmFjZU5vcm1hbHMoKXtjb25zdCB0PXRoaXMuZ2V0VmVydGV4QXR0cmlidXRlKCJwb3NpdGlvbnMiKSxlPXRoaXMuYWRkRmFjZUF0dHJpYnV0ZSgibm9ybWFscyIsbCkscz10aGlzLmdldE51bUZhY2VzKCk7Zm9yKGxldCBhPTA7YTxzO2ErKyl7Y29uc3Qgcz10aGlzLmdldEZhY2VWZXJ0ZXhJbmRpY2VzKGEpLGk9dC5nZXRWYWx1ZVJlZihzWzBdKTtsZXQgcj10LmdldFZhbHVlUmVmKHNbMV0pO2NvbnN0IG49bmV3IGw7Zm9yKGxldCBlPTI7ZTxzLmxlbmd0aDtlKyspe2NvbnN0IGE9dC5nZXRWYWx1ZVJlZihzW2VdKSxoPXIuc3VidHJhY3QoaSksbz1hLnN1YnRyYWN0KGkpO24uYWRkSW5QbGFjZShvLmNyb3NzKGgpLm5vcm1hbGl6ZSgpKSxyPWF9bi5sZW5ndGhTcXVhcmVkKCk8TnVtYmVyLkVQU0lMT058fGUuc2V0VmFsdWUoYSxuLm5vcm1hbGl6ZSgpKX19Y2FsY3VsYXRlRWRnZUFuZ2xlcygpe251bGw9PXRoaXMudmVydGV4RWRnZXMmJnRoaXMuZ2VuVG9wb2xvZ3lJbmZvKCksdGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKTtjb25zdCB0PXRoaXMuZ2V0VmVydGV4QXR0cmlidXRlKCJwb3NpdGlvbnMiKSxlPXRoaXMuZ2V0RmFjZUF0dHJpYnV0ZSgibm9ybWFscyIpO3RoaXMuZWRnZVZlY3M9W10sdGhpcy5lZGdlQW5nbGVzPW5ldyBGbG9hdDMyQXJyYXkodGhpcy5udW1FZGdlcyk7Zm9yKGxldCBzPTA7czx0aGlzLmVkZ2VGYWNlcy5sZW5ndGg7cys9Mil7Y29uc3QgYT10aGlzLmVkZ2VWZXJ0c1tzXSxpPXRoaXMuZWRnZVZlcnRzW3MrMV0scj10LmdldFZhbHVlUmVmKGkpLnN1YnRyYWN0KHQuZ2V0VmFsdWVSZWYoYSkpO3Iubm9ybWFsaXplSW5QbGFjZSgpLHRoaXMuZWRnZVZlY3MucHVzaChyKTtjb25zdCBuPXRoaXMuZWRnZUZhY2VzW3NdLGg9dGhpcy5lZGdlRmFjZXNbcysxXTtpZigtMT09bnx8LTE9PWgpe3RoaXMuZWRnZUFuZ2xlc1tzLzJdPTIqTWF0aC5QSTtjb250aW51ZX1jb25zdCBvPWUuZ2V0VmFsdWVSZWYobiksXz1lLmdldFZhbHVlUmVmKGgpO3RoaXMuZWRnZUFuZ2xlc1tzLzJdPW8uYW5nbGVUbyhfKX19Y29tcHV0ZVZlcnRleE5vcm1hbHModD0xKXt0aGlzLmNhbGN1bGF0ZUVkZ2VBbmdsZXMoKTtjb25zdCBlPXRoaXMuZ2V0RmFjZUF0dHJpYnV0ZSgibm9ybWFscyIpLHM9dGhpcy5hZGRWZXJ0ZXhBdHRyaWJ1dGUoIm5vcm1hbHMiLGwpLGE9ZS5kYXRhLmJ1ZmZlcixpPXMuZGF0YSxyPSh0LGUpPT57aVszKnQrMF09ZS54LGlbMyp0KzFdPWUueSxpWzMqdCsyXT1lLnp9LG49KHQsZSk9PntsZXQgcyxhO2NvbnN0IGk9dGhpcy5mYWNlRWRnZXNbdF07Zm9yKGNvbnN0IHQgb2YgaSkodGhpcy5lZGdlVmVydHNbMip0XT09ZXx8dGhpcy5lZGdlVmVydHNbMip0KzFdPT1lKSYmKHM/YT10aGlzLmVkZ2VWZWNzW3RdOnM9dGhpcy5lZGdlVmVjc1t0XSk7cmV0dXJuW3MsYV19O2ZvcihsZXQgZT0wO2U8dGhpcy52ZXJ0ZXhFZGdlcy5sZW5ndGg7ZSsrKXtpZihudWxsPT10aGlzLnZlcnRleEVkZ2VzW2VdKWNvbnRpbnVlO2NvbnN0IGk9dGhpcy52ZXJ0ZXhFZGdlc1tlXSxvPVtdLF89dD0+e2xldCBlPSExO2Zvcihjb25zdCBzIG9mIG8paWYoZT1zLmluY2x1ZGVzKHQpLGUpYnJlYWs7ZXx8by5wdXNoKFt0XSl9O2Zvcihjb25zdCBlIG9mIGkpe2NvbnN0IHM9dGhpcy5lZGdlRmFjZXNbMiplXSxhPXRoaXMuZWRnZUZhY2VzWzIqZSsxXTtpZigtMSE9cyYmLTEhPWEmJnRoaXMuZWRnZUFuZ2xlc1tlXTx0KXtsZXQgdD0tMSxlPS0xO2ZvcihsZXQgaT0wO2k8by5sZW5ndGg7aSsrKS0xPT10JiZvW2ldLmluY2x1ZGVzKHMpJiYodD1pKSwtMT09ZSYmb1tpXS5pbmNsdWRlcyhhKSYmKGU9aSk7LTE9PXQmJi0xPT1lP28ucHVzaChbcyxhXSk6LTEhPXQmJi0xIT1lP3QhPWUmJihvW3RdPW9bdF0uY29uY2F0KG9bZV0pLG8uc3BsaWNlKGUsMSkpOigtMT09dCYmb1tlXS5wdXNoKHMpLC0xPT1lJiZvW3RdLnB1c2goYSkpfWVsc2UtMSE9cyYmXyhzKSwtMSE9YSYmXyhhKX1vLnNvcnQoKCh0LGUpPT50Lmxlbmd0aDxlLmxlbmd0aD8xOnQubGVuZ3RoPmUubGVuZ3RoPy0xOjApKTtsZXQgZD0hMDtmb3IoY29uc3QgdCBvZiBvKXtjb25zdCBpPW5ldyBsO2Zvcihjb25zdCBzIG9mIHQpe2NvbnN0IHQ9bihzLGUpLHI9dFswXS5hbmdsZVRvKHRbMV0pO2kuYWRkSW5QbGFjZSgoaD1zLGwuY3JlYXRlRnJvbUJ1ZmZlcihhLDMqaCo0KSkuc2NhbGUocikpfWkubm9ybWFsaXplSW5QbGFjZSgpLGQ/KHIoZSxpKSxkPSExKTpzLnNldFNwbGl0VmVydGV4VmFsdWVzKGUsdCxpKX19dmFyIGg7cmV0dXJuIHN9Y29tcHV0ZUhhcmRFZGdlc0luZGljZXModD0xKXt0aGlzLmVkZ2VWZXJ0c3x8dGhpcy5jYWxjdWxhdGVFZGdlQW5nbGVzKCk7Y29uc3QgZT1bXSxzPXQ9PntlLnB1c2godGhpcy5lZGdlVmVydHNbdF0pLGUucHVzaCh0aGlzLmVkZ2VWZXJ0c1t0KzFdKX07Zm9yKGxldCBlPTA7ZTx0aGlzLmVkZ2VBbmdsZXMubGVuZ3RoO2UrKyl0aGlzLmVkZ2VBbmdsZXNbZV0+dCYmcygyKmUpO3JldHVybiBVaW50MzJBcnJheS5mcm9tKGUpfWdldFdpcmVmcmFtZUluZGljZXMoKXtyZXR1cm4gY29uc29sZS53YXJuKCJAdG9kby1yZXZpZXcgLSBUaGlzIHJldHVybnMgbm90aGluZyIpLGluZGljZXN9Z2VuQnVmZmVycyh0KXtjb25zdCBlPXt9O2xldCBzPTA7Zm9yKGNvbnN0Wyx0XW9mIHRoaXMuX192ZXJ0ZXhBdHRyaWJ1dGVzKXtjb25zdCBhPXQuZ2V0U3BsaXRzKCk7Zm9yKGNvbnN0IHQgaW4gYSl7dCBpbiBlfHwoZVt0XT17fSk7Y29uc3QgaT1hW3RdO2Zvcihjb25zdCBhIGluIGkpe2NvbnN0IGk9cGFyc2VJbnQoYSk7aSBpbiBlW3RdfHwoZVt0XVtpXT1zLHMrKyl9fX1jb25zdCBhPXRoaXMuZ2V0VmVydGV4QXR0cmlidXRlKCJwb3NpdGlvbnMiKS5sZW5ndGgsaT1hK3M7bGV0IHI7dCYmMD09dC5pbmNsdWRlSW5kaWNlc3x8KHI9dGhpcy5nZW5lcmF0ZVRyaWFuZ3VsYXRlZEluZGljZXMoaSxhLGUpKTtjb25zdCBuPXt9O2Zvcihjb25zdFt0LGFdb2YgdGhpcy5fX3ZlcnRleEF0dHJpYnV0ZXMpe2xldCBpO2k9MD09cz9hLmRhdGE6YS5nZW5lcmF0ZVNwbGl0VmFsdWVzKGUscyk7Y29uc3Qgcj1hLm51bUVsZW1lbnRzLGg9aS5sZW5ndGgvcjtuW3RdPXt2YWx1ZXM6aSxjb3VudDpoLGRpbWVuc2lvbjpyLG5vcm1hbGl6ZWQ6Im5vcm1hbHMiPT10LGRhdGFUeXBlOmEuZGF0YVR5cGV9fWNvbnN0IGg9e251bVZlcnRpY2VzOnRoaXMubnVtVmVydGljZXMoKSxudW1SZW5kZXJWZXJ0czppLGluZGljZXM6cixhdHRyQnVmZmVyczpufTtpZih0JiZ0LmluY2x1ZGVWZXJ0ZXhOZWlnaGJvcnMpe251bGw9PXRoaXMudmVydGV4RWRnZXMmJnRoaXMuZ2VuVG9wb2xvZ3lJbmZvKCk7bGV0IHQ9MDtmb3IobGV0IGU9MDtlPHRoaXMudmVydGV4RWRnZXMubGVuZ3RoO2UrKyl0aGlzLnZlcnRleEVkZ2VzW2VdJiYodCs9dGhpcy52ZXJ0ZXhFZGdlc1tlXS5zaXplKTtjb25zdCBlPW5ldyBVaW50MzJBcnJheSgyKnRoaXMudmVydGV4RWRnZXMubGVuZ3RoK3QpLHM9dD0+e2ZvcihsZXQgZT0wO2U8dC5sZW5ndGg7ZSsrKXtjb25zdCBzPXRbZV07Zm9yKGxldCBhPTA7YTxlO2ErKyl7Y29uc3QgaT10W2FdO2lmKC0xIT1zWzBdJiZzWzBdPT1pWzFdKXtlIT1hKzEmJih0LnNwbGljZShlLDEpLHQuc3BsaWNlKGErMSwwLHMpKTticmVha31pZigtMSE9c1sxXSYmc1sxXT09aVswXSl7dC5zcGxpY2UoZSwxKSx0LnNwbGljZShhLDAscyk7YnJlYWt9fX19LGE9dD0+e2lmKCEoLTEhPXRbMF1bMF0mJi0xIT10W3QubGVuZ3RoLTFdWzFdfHwtMT09dFswXVswXSYmLTE9PXRbdC5sZW5ndGgtMV1bMV0pKXRocm93IG5ldyBFcnJvcigiSWYgZmFuIHN0YXJ0cyB3aXRoIC0xLCBpdCBtdXN0IGFsc28gZW5kIHdpdGggLTEiKTtmb3IobGV0IGU9MDtlPHQubGVuZ3RoO2UrKyl7Y29uc3Qgcz10W2VdO2lmKCgtMT09c1swXXx8LTE9PXNbMV0pJiYwIT1lJiZlIT10Lmxlbmd0aC0xKXRocm93IG5ldyBFcnJvcigiLTEgb25seSBhbGxvd2VkIGF0IHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIGZhbi4iKTtpZigtMSE9c1swXSl7bGV0IGE9ZS0xO2lmKGE8MCYmKGErPXQubGVuZ3RoKSxzWzBdIT10W2FdWzFdKXRocm93IG5ldyBFcnJvcigiRmFjZXMgYXJlIG5vdCBzZXF1ZW50aWFsIil9aWYoLTEhPXNbMV0pe2NvbnN0IGE9KGUrMSkldC5sZW5ndGg7aWYoc1sxXSE9dFthXVswXSl0aHJvdyBuZXcgRXJyb3IoIkZhY2VzIGFyZSBub3Qgc2VxdWVudGlhbCIpfX19O2xldCBpPTIqdGhpcy52ZXJ0ZXhFZGdlcy5sZW5ndGg7Zm9yKGxldCB0PTA7dDx0aGlzLnZlcnRleEVkZ2VzLmxlbmd0aDt0Kyspe2lmKG51bGw9PXRoaXMudmVydGV4RWRnZXNbdF0pY29udGludWU7Y29uc3Qgcj10aGlzLnZlcnRleEVkZ2VzW3RdLG49W107Zm9yKGNvbnN0IGUgb2Ygcil7Y29uc3Qgcz10aGlzLmVkZ2VWZXJ0c1syKmVdLGE9dGhpcy5lZGdlVmVydHNbMiplKzFdO2xldCBpLHI9dGhpcy5lZGdlRmFjZXNbMiplXSxoPXRoaXMuZWRnZUZhY2VzWzIqZSsxXTtpZihzPT10KWk9YTtlbHNle2lmKGEhPXQpdGhyb3cgbmV3IEVycm9yKCJJbnZhbGlkIHRvcG9sb2d5Iik7e2k9cztjb25zdCB0PXI7cj1oLGg9dH19bi5wdXNoKFtyLGgsaV0pfXMobiksYShuKTtsZXQgaD0wOygtMSE9blswXVswXXx8LTEhPW5bbi5sZW5ndGgtMV1bMV0pJiYoaCs9MSksZVsyKnRdPWksZVsyKnQrMV09ci5zaXplKyhoPDw4KTtmb3IoY29uc3QgdCBvZiBuKWVbaV09dFsyXSxpKyt9aC52ZXJ0ZXhOZWlnaGJvcnM9ZX1yZXR1cm4gaH1jb21wdXRlTnVtVHJpYW5nbGVzKCl7bGV0IHQ9MyxlPTA7Zm9yKGNvbnN0IHMgb2YgdGhpcy5fX2ZhY2VDb3VudHMpZSs9cyoodC0yKSx0Kys7cmV0dXJuIGV9Z2VuZXJhdGVUcmlhbmd1bGF0ZWRJbmRpY2VzKHQsZSxzKXtjb25zdCBhPXRoaXMuY29tcHV0ZU51bVRyaWFuZ2xlcygpO2xldCBpO2k9dDxNYXRoLnBvdygyLDgpP25ldyBVaW50OEFycmF5KDMqYSk6dDxNYXRoLnBvdygyLDE2KT9uZXcgVWludDE2QXJyYXkoMyphKTpuZXcgVWludDMyQXJyYXkoMyphKTtsZXQgcj0wO2NvbnN0IG49ZnVuY3Rpb24odCxhKXt0IGluIHMmJmEgaW4gc1t0XSYmKHQ9ZStzW3RdW2FdKSxpW3JdPXQscisrfSxoPXRoaXMuZ2V0TnVtRmFjZXMoKTtmb3IobGV0IHQ9MDt0PGg7dCsrKXtjb25zdCBlPXRoaXMuZ2V0RmFjZVZlcnRleEluZGljZXModCk7Zm9yKGxldCBzPTA7czxlLmxlbmd0aDtzKyspcz49MyYmKG4oZVswXSx0KSxuKGVbcy0xXSx0KSksbihlW3NdLHQpfXJldHVybiBpfXJlYWRCaW5hcnkodCxlKXtzdXBlci5sb2FkQmFzZUdlb21CaW5hcnkodCksdGhpcy5zZXRGYWNlQ291bnRzKHQubG9hZFVJbnQzMkFycmF5KCkpO2NvbnN0IHM9dGhpcy5nZXROdW1GYWNlcygpLGE9dC5sb2FkVUludDhBcnJheShzKSxpPXQubG9hZFNJbnQzMlZlYzIoKSxyPXQubG9hZFVJbnQ4KCk7bGV0IG47MT09cj9uPXQubG9hZFVJbnQ4QXJyYXkoKToyPT1yP249dC5sb2FkVUludDE2QXJyYXkoKTo0PT1yJiYobj10LmxvYWRVSW50MzJBcnJheSgpKTtsZXQgaD0zLG89MDtjb25zdCBfPXRoaXMuX19mYWNlQ291bnRzLm1hcCgoKHQsZSk9Pntjb25zdCBzPW87cmV0dXJuIG8rPXQqaCxoKyssc30pKTtsZXQgZD0wLGw9MDtjb25zdCBjPVtdO2ZvcihsZXQgdD0wO3Q8czt0Kyspe2NvbnN0IGU9YVt0XSxzPV9bZV0scj1lKzM7Y1t0XT1zO2ZvcihsZXQgZT0wO2U8cjtlKyspe2NvbnN0IGE9cytlLHI9bltkK2VdK2kueDtpZigwPT10KXRoaXMuX19mYWNlVmVydGV4SW5kaWNlc1thXT1yO2Vsc2V7bGV0IHM9Y1t0LTFdO3MrPWU8bD9lOmwtMSx0aGlzLl9fZmFjZVZlcnRleEluZGljZXNbYV09dGhpcy5fX2ZhY2VWZXJ0ZXhJbmRpY2VzW3NdK3J9fWQrPXIsX1tlXSs9cixsPXJ9dGhpcy5oYXNWZXJ0ZXhBdHRyaWJ1dGUoIm5vcm1hbHMiKXx8dGhpcy5jb21wdXRlVmVydGV4Tm9ybWFscygpLHRoaXMuZW1pdCgiZ2VvbURhdGFDaGFuZ2VkIix7fSl9dG9KU09OKHQpe2NvbnN0IGU9c3VwZXIudG9KU09OKHQpO3JldHVybiB0JiZ0LnNraXBUb3BvbG9neXx8KGUuZmFjZUNvdW50cz1BcnJheS5mcm9tKHRoaXMuX19mYWNlQ291bnRzKSxlLmZhY2VWZXJ0ZXhJbmRpY2VzPUFycmF5LmZyb20odGhpcy5fX2ZhY2VWZXJ0ZXhJbmRpY2VzKSksZX1mcm9tSlNPTih0LGUpe3N1cGVyLmZyb21KU09OKHQsZSksdC5mYWNlQ291bnRzJiYodGhpcy5fX2ZhY2VDb3VudHM9dC5mYWNlQ291bnRzKSx0LmZhY2VWZXJ0ZXhJbmRpY2VzJiYodGhpcy5fX2ZhY2VWZXJ0ZXhJbmRpY2VzPVVpbnQzMkFycmF5LmZyb20odC5mYWNlVmVydGV4SW5kaWNlcykpfX1uKCJNZXNoIixQKTtjbGFzcyB2e2NvbnN0cnVjdG9yKHQsZT0wLHM9ITApe3RoaXMuX19kYXRhPXQsdGhpcy5fX2J5dGVPZmZzZXQ9ZSx0aGlzLl9fZGF0YVZpZXc9bmV3IERhdGFWaWV3KHRoaXMuX19kYXRhKSx0aGlzLl9faXNNb2JpbGVEZXZpY2U9cyx0aGlzLnV0ZjhkZWNvZGVyPW5ldyBUZXh0RGVjb2Rlcn1nZXQgaXNNb2JpbGVEZXZpY2UoKXtyZXR1cm4gdGhpcy5fX2lzTW9iaWxlRGV2aWNlfWdldCBkYXRhKCl7cmV0dXJuIHRoaXMuX19kYXRhfWdldCBieXRlTGVuZ3RoKCl7cmV0dXJuIHRoaXMuX19kYXRhVmlldy5ieXRlTGVuZ3RofWdldCByZW1haW5pbmdCeXRlTGVuZ3RoKCl7cmV0dXJuIHRoaXMuX19kYXRhVmlldy5ieXRlTGVuZ3RoLXRoaXMuX19ieXRlT2Zmc2V0fXBvcygpe3JldHVybiB0aGlzLl9fYnl0ZU9mZnNldH1zZWVrKHQpe3RoaXMuX19ieXRlT2Zmc2V0PXR9YWR2YW5jZSh0KXt0aGlzLl9fYnl0ZU9mZnNldCs9dH1sb2FkVUludDgoKXtjb25zdCB0PXRoaXMuX19kYXRhVmlldy5nZXRVaW50OCh0aGlzLl9fYnl0ZU9mZnNldCk7cmV0dXJuIHRoaXMuX19ieXRlT2Zmc2V0Kz0xLHR9bG9hZFVJbnQxNigpe2NvbnN0IHQ9dGhpcy5fX2RhdGFWaWV3LmdldFVpbnQxNih0aGlzLl9fYnl0ZU9mZnNldCwhMCk7cmV0dXJuIHRoaXMuX19ieXRlT2Zmc2V0Kz0yLHR9bG9hZFVJbnQzMigpe2NvbnN0IHQ9dGhpcy5fX2RhdGFWaWV3LmdldFVpbnQzMih0aGlzLl9fYnl0ZU9mZnNldCwhMCk7cmV0dXJuIHRoaXMuX19ieXRlT2Zmc2V0Kz00LHR9bG9hZFNJbnQzMigpe2NvbnN0IHQ9dGhpcy5fX2RhdGFWaWV3LmdldEludDMyKHRoaXMuX19ieXRlT2Zmc2V0LCEwKTtyZXR1cm4gdGhpcy5fX2J5dGVPZmZzZXQrPTQsdH1sb2FkRmxvYXQxNigpe2NvbnN0IHQ9dGhpcy5sb2FkVUludDE2KCk7cmV0dXJuIHMuZGVjb2RlMTZCaXRGbG9hdCh0KX1sb2FkVUZsb2F0MTYoKXtjb25zdCB0PXRoaXMubG9hZEZsb2F0MTYoKTtyZXR1cm4gdDwwPzIwNDgtdDp0fWxvYWRGbG9hdDE2RnJvbTJ4VUludDgoKXtjb25zdCB0PXRoaXMuX19kYXRhVmlldy5nZXRGbG9hdDE2KHRoaXMuX19ieXRlT2Zmc2V0LCEwKTtyZXR1cm4gdGhpcy5fX2J5dGVPZmZzZXQrPTIsdH1sb2FkVUludDMyRnJvbTJ4VUZsb2F0MTYoKXtyZXR1cm4gdGhpcy5sb2FkVUZsb2F0MTYoKSs0MDk2KnRoaXMubG9hZFVGbG9hdDE2KCl9bG9hZFNJbnQzMkZyb20yeEZsb2F0MTYoKXtyZXR1cm4gdGhpcy5sb2FkRmxvYXQxNigpKzIwNDgqdGhpcy5sb2FkRmxvYXQxNigpfWxvYWRGbG9hdDMyKCl7Y29uc3QgdD10aGlzLl9fZGF0YVZpZXcuZ2V0RmxvYXQzMih0aGlzLl9fYnl0ZU9mZnNldCwhMCk7cmV0dXJuIHRoaXMuX19ieXRlT2Zmc2V0Kz00LHR9bG9hZFVJbnQ4QXJyYXkodCxlPSExKXtudWxsPT10JiYodD10aGlzLmxvYWRVSW50MzIoKSk7Y29uc3Qgcz1uZXcgVWludDhBcnJheSh0aGlzLl9fZGF0YSx0aGlzLl9fYnl0ZU9mZnNldCx0KTt0aGlzLl9fYnl0ZU9mZnNldCs9dDt0aGlzLl9fYnl0ZU9mZnNldDtyZXR1cm4gc31sb2FkVUludDE2QXJyYXkodCxlPSExKXtpZihudWxsPT10JiYodD10aGlzLmxvYWRVSW50MzIoKSksMD09dClyZXR1cm4gbmV3IFVpbnQxNkFycmF5O2xldCBzO2lmKHRoaXMucmVhZFBhZCgyKSx0aGlzLl9faXNNb2JpbGVEZXZpY2Upe3M9bmV3IFVpbnQxNkFycmF5KHQpO2ZvcihsZXQgZT0wO2U8dDtlKyspc1tlXT10aGlzLl9fZGF0YVZpZXcuZ2V0VWludDE2KHRoaXMuX19ieXRlT2Zmc2V0LCEwKSx0aGlzLl9fYnl0ZU9mZnNldCs9Mn1lbHNlIHM9bmV3IFVpbnQxNkFycmF5KHRoaXMuX19kYXRhLHRoaXMuX19ieXRlT2Zmc2V0LHQpLHRoaXMuX19ieXRlT2Zmc2V0Kz0yKnQ7cmV0dXJuIHN9bG9hZFVJbnQzMkFycmF5KHQsZT0hMSl7aWYobnVsbD09dCYmKHQ9dGhpcy5sb2FkVUludDMyKCkpLDA9PXQpcmV0dXJuIG5ldyBVaW50MzJBcnJheTtsZXQgcztpZih0aGlzLnJlYWRQYWQoNCksdGhpcy5fX2lzTW9iaWxlRGV2aWNlKXtzPW5ldyBVaW50MzJBcnJheSh0KTtmb3IobGV0IGU9MDtlPHQ7ZSsrKXNbZV09dGhpcy5fX2RhdGFWaWV3LmdldFVpbnQzMih0aGlzLl9fYnl0ZU9mZnNldCwhMCksdGhpcy5fX2J5dGVPZmZzZXQrPTR9ZWxzZSBzPW5ldyBVaW50MzJBcnJheSh0aGlzLl9fZGF0YSx0aGlzLl9fYnl0ZU9mZnNldCx0KSx0aGlzLl9fYnl0ZU9mZnNldCs9NCp0O3JldHVybiBzfWxvYWRGbG9hdDMyQXJyYXkodCxlPSExKXtpZihudWxsPT10JiYodD10aGlzLmxvYWRVSW50MzIoKSksMD09dClyZXR1cm4gbmV3IEZsb2F0MzJBcnJheTtsZXQgcztpZih0aGlzLnJlYWRQYWQoNCksdGhpcy5fX2lzTW9iaWxlRGV2aWNlKXtzPW5ldyBGbG9hdDMyQXJyYXkodCk7Zm9yKGxldCBlPTA7ZTx0O2UrKylzW2VdPXRoaXMuX19kYXRhVmlldy5nZXRGbG9hdDMyKHRoaXMuX19ieXRlT2Zmc2V0LCEwKSx0aGlzLl9fYnl0ZU9mZnNldCs9NH1lbHNlIHM9bmV3IEZsb2F0MzJBcnJheSh0aGlzLl9fZGF0YSx0aGlzLl9fYnl0ZU9mZnNldCx0KSx0aGlzLl9fYnl0ZU9mZnNldCs9NCp0O3JldHVybiBzfWxvYWRTdHIoKXtjb25zdCB0PXRoaXMubG9hZFVJbnQzMigpLGU9bmV3IFVpbnQ4QXJyYXkodGhpcy5fX2RhdGEsdGhpcy5fX2J5dGVPZmZzZXQsdCk7cmV0dXJuIHRoaXMuX19ieXRlT2Zmc2V0Kz10LHRoaXMudXRmOGRlY29kZXIuZGVjb2RlKGUpfWxvYWRTdHJBcnJheSgpe2NvbnN0IHQ9dGhpcy5sb2FkVUludDMyKCksZT1bXTtmb3IobGV0IHM9MDtzPHQ7cysrKWVbc109dGhpcy5sb2FkU3RyKCk7cmV0dXJuIGV9bG9hZFNJbnQzMlZlYzIoKXtjb25zdCB0PXRoaXMubG9hZFNJbnQzMigpLGU9dGhpcy5sb2FkU0ludDMyKCk7cmV0dXJuIG5ldyBkKHQsZSl9bG9hZFVJbnQzMlZlYzIoKXtjb25zdCB0PXRoaXMubG9hZFVJbnQzMigpLGU9dGhpcy5sb2FkVUludDMyKCk7cmV0dXJuIG5ldyBkKHQsZSl9bG9hZEZsb2F0MTZWZWMyKCl7Y29uc3QgdD10aGlzLmxvYWRGbG9hdDE2KCksZT10aGlzLmxvYWRGbG9hdDE2KCk7cmV0dXJuIG5ldyBkKHQsZSl9bG9hZEZsb2F0MzJWZWMyKCl7Y29uc3QgdD10aGlzLmxvYWRGbG9hdDMyKCksZT10aGlzLmxvYWRGbG9hdDMyKCk7cmV0dXJuIG5ldyBkKHQsZSl9bG9hZEZsb2F0MTZWZWMzKCl7Y29uc3QgdD10aGlzLmxvYWRGbG9hdDE2KCksZT10aGlzLmxvYWRGbG9hdDE2KCkscz10aGlzLmxvYWRGbG9hdDE2KCk7cmV0dXJuIG5ldyBsKHQsZSxzKX1sb2FkRmxvYXQzMlZlYzMoKXtjb25zdCB0PXRoaXMubG9hZEZsb2F0MzIoKSxlPXRoaXMubG9hZEZsb2F0MzIoKSxzPXRoaXMubG9hZEZsb2F0MzIoKTtyZXR1cm4gbmV3IGwodCxlLHMpfWxvYWRGbG9hdDE2UXVhdCgpe2NvbnN0IHQ9dGhpcy5sb2FkRmxvYXQxNigpLGU9dGhpcy5sb2FkRmxvYXQxNigpLHM9dGhpcy5sb2FkRmxvYXQxNigpLGE9dGhpcy5sb2FkRmxvYXQxNigpO3JldHVybiBuZXcgcCh0LGUscyxhKX1sb2FkRmxvYXQzMlF1YXQoKXtjb25zdCB0PXRoaXMubG9hZEZsb2F0MzIoKSxlPXRoaXMubG9hZEZsb2F0MzIoKSxzPXRoaXMubG9hZEZsb2F0MzIoKSxhPXRoaXMubG9hZEZsb2F0MzIoKTtyZXR1cm4gbmV3IHAodCxlLHMsYSl9bG9hZFJHQkZsb2F0MzJDb2xvcigpe2NvbnN0IHQ9dGhpcy5sb2FkRmxvYXQzMigpLGU9dGhpcy5sb2FkRmxvYXQzMigpLHM9dGhpcy5sb2FkRmxvYXQzMigpO3JldHVybiBuZXcgZih0LGUscyl9bG9hZFJHQkFGbG9hdDMyQ29sb3IoKXtjb25zdCB0PXRoaXMubG9hZEZsb2F0MzIoKSxlPXRoaXMubG9hZEZsb2F0MzIoKSxzPXRoaXMubG9hZEZsb2F0MzIoKSxhPXRoaXMubG9hZEZsb2F0MzIoKTtyZXR1cm4gbmV3IGYodCxlLHMsYSl9bG9hZFJHQlVJbnQ4Q29sb3IoKXtjb25zdCB0PXRoaXMubG9hZFVJbnQ4KCksZT10aGlzLmxvYWRVSW50OCgpLHM9dGhpcy5sb2FkVUludDgoKTtyZXR1cm4gbmV3IGYodC8yNTUsZS8yNTUscy8yNTUpfWxvYWRSR0JBVUludDhDb2xvcigpe2NvbnN0IHQ9dGhpcy5sb2FkVUludDgoKSxlPXRoaXMubG9hZFVJbnQ4KCkscz10aGlzLmxvYWRVSW50OCgpLGE9dGhpcy5sb2FkVUludDgoKTtyZXR1cm4gbmV3IGYodC8yNTUsZS8yNTUscy8yNTUsYS8yNTUpfWxvYWRCb3gyKCl7cmV0dXJuIG5ldyBJKHRoaXMubG9hZEZsb2F0MzJWZWMyKCksdGhpcy5sb2FkRmxvYXQzMlZlYzIoKSl9bG9hZEJveDMoKXtyZXR1cm4gbmV3IEYodGhpcy5sb2FkRmxvYXQzMlZlYzMoKSx0aGlzLmxvYWRGbG9hdDMyVmVjMygpKX1yZWFkUGFkKHQpe2NvbnN0IGU9dGhpcy5fX2J5dGVPZmZzZXQldDswIT1lJiYodGhpcy5fX2J5dGVPZmZzZXQrPXQtZSl9fWNsYXNzIFR7Y29uc3RydWN0b3IodCl7aWYodCl7Y29uc3QgZT10LnNwbGl0KCItIikscz1lWzBdLnNwbGl0KCIuIik7dGhpcy5tYWpvcj1wYXJzZUludChzWzBdKSx0aGlzLm1pbm9yPXBhcnNlSW50KHNbMV0pLHRoaXMucGF0Y2g9cGFyc2VJbnQoc1syXSksMj09ZS5sZW5ndGgmJih0aGlzLmJyYW5jaD1lWzFdKX1lbHNlIHRoaXMubWFqb3I9MCx0aGlzLm1pbm9yPTAsdGhpcy5wYXRjaD0wfWNvbXBhcmUodCl7Y29uc3QgZT1bdGhpcy5tYWpvcix0aGlzLm1pbm9yLHRoaXMucGF0Y2hdO2ZvcihsZXQgcz0wO3M8MztzKyspaWYoZVtzXSE9PXRbc10pcmV0dXJuIGVbc10tdFtzXTtyZXR1cm4gMH1lcXVhbHModCl7cmV0dXJuIGNvbnNvbGUubG9nKCJWZXJzaW9uI2VxdWFscyBtZXRob2QgaXMgZGVwcmVjYXRlZCwgdXNlICdjb21wYXJlJyBpbnN0ZWFkICIpLCEodGhpcy5wYXRjaD09dFsyXSYmdGhpcy5taW5vcj09dFsxXSYmdGhpcy5tYWpvcj09dFswXSl9bGVzc1RoYW4odCl7cmV0dXJuIGNvbnNvbGUubG9nKCJWZXJzaW9uI2xlc3NUaGFuIG1ldGhvZCBpcyBkZXByZWNhdGVkLCB1c2UgJ2NvbXBhcmUnIGluc3RlYWQgIiksISh0aGlzLm1ham9yPj10WzBdfHx0aGlzLm1pbm9yPj10WzFdfHx0aGlzLnBhdGNoPj10WzJdKX1ncmVhdGVyVGhhbih0KXtyZXR1cm4gY29uc29sZS5sb2coIlZlcnNpb24jZ3JlYXRlclRoYW4gbWV0aG9kIGlzIGRlcHJlY2F0ZWQsIHVzZSAnY29tcGFyZScgaW5zdGVhZCAiKSx0aGlzLm1ham9yPnRbMF18fHRoaXMubWlub3I+dFsxXXx8dGhpcy5wYXRjaD50WzJdfWdyZWF0ZXJPckVxdWFsVGhhbih0KXtyZXR1cm4gY29uc29sZS5sb2coIlZlcnNpb24jZ3JlYXRlck9yRXF1YWxUaGFuIG1ldGhvZCBpcyBkZXByZWNhdGVkLCB1c2UgJ2NvbXBhcmUnIGluc3RlYWQgIiksISh0aGlzLm1ham9yPHRbMF0pJiYodGhpcy5tYWpvcj50WzBdfHwhKHRoaXMubWlub3I8dFsxXSkmJih0aGlzLm1pbm9yPnRbMV18fCEodGhpcy5wYXRjaDx0WzJdKSkpfX1zZWxmLm9ubWVzc2FnZT1mdW5jdGlvbih0KXsoKHQsZSk9Pntmb3IoY29uc3QgZSBpbiB0LmNvbnRleHQudmVyc2lvbnMpe2NvbnN0IHM9dC5jb250ZXh0LnZlcnNpb25zW2VdLGE9bmV3IFQ7YS5tYWpvcj1zLm1ham9yLGEubWlub3I9cy5taW5vcixhLnBhdGNoPXMucGF0Y2gsYS5icmFuY2g9cy5icmFuY2gsdC5jb250ZXh0LnZlcnNpb25zW2VdPWF9Y29uc3Qgcz1bXSxhPXQudG9jW3QuZ2VvbXNSYW5nZVswXV0saT1bXTtmb3IobGV0IGU9dC5nZW9tc1JhbmdlWzBdO2U8dC5nZW9tc1JhbmdlWzFdO2UrKyl7Y29uc3Qgcj1uZXcgdih0LmJ1ZmZlclNsaWNlLHQudG9jW2VdLWEsdC5pc01vYmlsZURldmljZSksbj1yLmxvYWRTdHIoKSxoPXIucG9zKCk7bGV0IF87c3dpdGNoKG4pe2Nhc2UiUG9pbnRzIjpfPW5ldyBTO2JyZWFrO2Nhc2UiTGluZXMiOl89bmV3IE87YnJlYWs7Y2FzZSJNZXNoIjpfPW5ldyBQO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKCJVbnN1cHBvcnRlZCBHZW9tIHR5cGU6IituKX10cnl7ci5zZWVrKGgpLF8ucmVhZEJpbmFyeShyLHQuY29udGV4dCl9Y2F0Y2godCl7Y29uc29sZS53YXJuKCJFcnJvciBsb2FkaW5nOiIrXy5uYW1lKyJcbjoiK3QpLHMucHVzaCh7fSk7Y29udGludWV9Y29uc3QgZD1fLmdlbkJ1ZmZlcnModC5nZW5CdWZmZXJzT3B0cyk7ZC5pbmRpY2VzJiZpLnB1c2goZC5pbmRpY2VzLmJ1ZmZlcik7Zm9yKGNvbnN0IHQgaW4gZC5hdHRyQnVmZmVycyl7Y29uc3QgZT1kLmF0dHJCdWZmZXJzW3RdLHM9byhlLmRhdGFUeXBlKTtlLmRhdGFUeXBlPXMsaS5wdXNoKGUudmFsdWVzLmJ1ZmZlcil9ZC52ZXJ0ZXhOZWlnaGJvcnMmJmkucHVzaChkLnZlcnRleE5laWdoYm9ycy5idWZmZXIpO2NvbnN0IGw9Xy5nZXRCb3VuZGluZ0JveCgpO2kucHVzaChsLnAwLl9fZGF0YS5idWZmZXIpLGkucHVzaChsLnAxLl9fZGF0YS5idWZmZXIpLHMucHVzaCh7bmFtZTpfLm5hbWUsdHlwZTpuLGdlb21CdWZmZXJzOmQsYmJveDpsfSl9ZSh7Z2VvbUxpYnJhcnlJZDp0Lmdlb21MaWJyYXJ5SWQsZ2VvbUZpbGVJRDp0Lmdlb21GaWxlSUQsZ2VvbUluZGV4T2Zmc2V0OnQuZ2VvbUluZGV4T2Zmc2V0LGdlb21zUmFuZ2U6dC5nZW9tc1JhbmdlLGdlb21EYXRhczpzfSxpKX0pKHQuZGF0YSwoKHQsZSk9PntzZWxmLnBvc3RNZXNzYWdlKHQsZSl9KSl9fSgpOwoK","data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2VvbVBhcnNlcldvcmtlci5qcyIsInNvdXJjZXMiOlsic3JjL1V0aWxpdGllcy9TdHJpbmdGdW5jdGlvbnMuanMiLCJzcmMvTWF0aC9BdHRyVmFsdWUuanMiLCJzcmMvVXRpbGl0aWVzL01hdGhGdW5jdGlvbnMuanMiLCJzcmMvUmVnaXN0cnkuanMiLCJzcmMvTWF0aC9WZWMyLmpzIiwic3JjL01hdGgvVmVjMy5qcyIsInNyYy9NYXRoL1ZlYzQuanMiLCJzcmMvTWF0aC9SR0JBLmpzIiwic3JjL01hdGgvQ29sb3IuanMiLCJzcmMvTWF0aC9FdWxlckFuZ2xlcy5qcyIsInNyYy9NYXRoL01hdDMuanMiLCJzcmMvTWF0aC9NYXQ0LmpzIiwic3JjL01hdGgvUXVhdC5qcyIsInNyYy9NYXRoL1JheS5qcyIsInNyYy9NYXRoL1hmby5qcyIsInNyYy9NYXRoL0JveDIuanMiLCJzcmMvTWF0aC9TcGhlcmVUeXBlLmpzIiwic3JjL01hdGgvQm94My5qcyIsInNyYy9NYXRoL1BsYW5lVHlwZS5qcyIsInNyYy9NYXRoL0ZydXN0dW0uanMiLCJzcmMvVXRpbGl0aWVzL0V2ZW50RW1pdHRlci5qcyIsInNyYy9TY2VuZVRyZWUvR2VvbWV0cnkvQXR0cmlidXRlLmpzIiwic3JjL1NjZW5lVHJlZS9HZW9tZXRyeS9WZXJ0ZXhBdHRyaWJ1dGUuanMiLCJzcmMvU2NlbmVUcmVlL0dlb21ldHJ5L0Jhc2VHZW9tLmpzIiwic3JjL1NjZW5lVHJlZS9QYXJhbWV0ZXJPd25lci5qcyIsInNyYy9TY2VuZVRyZWUvR2VvbWV0cnkvUG9pbnRzLmpzIiwic3JjL1NjZW5lVHJlZS9HZW9tZXRyeS9MaW5lcy5qcyIsInNyYy9TY2VuZVRyZWUvR2VvbWV0cnkvTWVzaC5qcyIsInNyYy9TY2VuZVRyZWUvQmluUmVhZGVyLmpzIiwic3JjL1NjZW5lVHJlZS9WZXJzaW9uLmpzIiwic3JjL1NjZW5lVHJlZS9HZW9tZXRyeS9HZW9tUGFyc2VyV29ya2VyLmpzIiwic3JjL1NjZW5lVHJlZS9HZW9tZXRyeS9wYXJzZUdlb21zQmluYXJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU3RyaW5nIGZ1bmN0aW9uc1xuICpcbiAqL1xuY2xhc3MgU3RyaW5nRnVuY3Rpb25zIHtcbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBtYXRjaGVzIGluIGEgc3RyaW5nLlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLVxuICAgKiBAcGFyYW0ge3N0cmluZ3xSZWdFeHB9IHBhdHRlcm4gLVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVwbGFjZW1lbnQgLVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IC1cbiAgICovXG4gIHN0YXRpYyByZXBsYWNlQWxsKHN0ciwgcGF0dGVybiwgcmVwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UobmV3IFJlZ0V4cChwYXR0ZXJuLCAnZycpLCByZXBsYWNlbWVudClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIEpTT04gb2JqZWN0IGFzIGEgZm9ybWF0dGVkIHN0cmluZywgYnV0IHRoZSBudW1lcmljIHZhbHVlcyBhcmUgZml4ZWQgdG8gdGhlIHNwZWNpZmllZCBwcmVjaXNpb24uXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtvYmplY3R9IHZhbCAtXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbc3BhY2U9MF0gLVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj01XSAtXG4gICAqIEByZXR1cm4ge3N0cmluZ30gLVxuICAgKi9cbiAgc3RhdGljIHN0cmluZ2lmeUpTT05XaXRoRml4ZWRQcmVjaXNpb24odmFsLCBzcGFjZSA9IDAsIHByZWNpc2lvbiA9IDUpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoXG4gICAgICB2YWwsXG4gICAgICAoa2V5LCB2YWwpID0+IHtcbiAgICAgICAgcmV0dXJuIHZhbCA/ICh2YWwudG9GaXhlZCA/IE51bWJlcih2YWwudG9GaXhlZChwcmVjaXNpb24pKSA6IHZhbCkgOiB2YWxcbiAgICAgIH0sXG4gICAgICBzcGFjZVxuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm1zIHRoZSBnaXZlbiBzdHJpbmcgaW50byBhIG51bWVyaWMgdmFsdWUuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHsqfSBzdHIgLVxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC1cbiAgICovXG4gIHN0YXRpYyBoYXNoU3RyKHN0cikge1xuICAgIGxldCBoYXNoID0gMFxuICAgIGxldCBpXG4gICAgbGV0IGNoclxuICAgIGxldCBsZW5cbiAgICBpZiAoc3RyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGhhc2hcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBzdHIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNociA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgICBoYXNoID0gKGhhc2ggPDwgNSkgLSBoYXNoICsgY2hyXG4gICAgICBoYXNoIHw9IDAgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gICAgfVxuICAgIHJldHVybiBNYXRoLmFicyhoYXNoKVxuICB9XG59XG5cbmV4cG9ydCB7IFN0cmluZ0Z1bmN0aW9ucyB9XG4iLCJpbXBvcnQgeyBTdHJpbmdGdW5jdGlvbnMgfSBmcm9tICcuLi9VdGlsaXRpZXMvU3RyaW5nRnVuY3Rpb25zJ1xuXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIE1hdGggdHlwZXMgdGhhdCBjYW4gYmUgc3RvcmVkIGluIHZlcnRleCBhdHRyaWJ1dGVzLlxuICogPGJyPlxuICogKipOb3RlOioqIFRoZXNlIHZhbHVlcyB1c2Uge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0Zsb2F0MzJBcnJheXxGbG9hdDMyQXJyYXl9IHZhbHVlcyB0byBzdG9yZSB0aGVpciBkYXRhLlxuICovXG5jbGFzcyBBdHRyVmFsdWUge1xuICAvKipcbiAgICogVmVyaWZpZXMgaWYgdGhlIHZhbHVlcyBzdG9yZWQgaW4gdGhpcyBNYXRoIHR5cGUgYXJlIHZhbGlkIG51bWVyaWMgdmFsdWVzLlxuICAgKiBSZXR1cm5zIGBmYWxzZWAgSWYgYXQgbGVhc3Qgb25lIG9mIHRoZSB2YWx1ZXMgaXMgZWl0aGVyIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jaWEvT2JqZXRvc19nbG9iYWxlcy9JbmZpbml0eXxJbmZpbml0eX0gb3JcbiAgICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNpYS9PYmpldG9zX2dsb2JhbGVzL05hTnxOYU59LlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSAtIFJldHVybnMgdGhlIHJlc3VsdCBhcyBhIGJvb2xlYW4uXG4gICAqL1xuICBpc1ZhbGlkKCkge1xuICAgIGZvciAoY29uc3QgdiBvZiB0aGlzLl9fZGF0YSkge1xuICAgICAgaWYgKHYgPT0gSW5maW5pdHkgfHwgaXNOYU4odikpIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgaXMgYSBmYWN0b3J5IGZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzIG9mIG1hdGggdHlwZXMsIGdpdmVuIGFuIGV4aXN0aW5nIEZsb2F0MzJBcnJheSBidWZmZXIuXG4gICAqIEVhY2ggTWF0aCB0eXBlIGltcGxlbWVudHMgdGhpcyBmdW5jdGlvbiB0byByZXR1cm4gYW4gY29uc3RydWN0ZWQgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGJ1ZmZlciAtIHRoZSBidWZmZXIgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgLSB0aGUgb2Zmc2V0IHZhbHVlLlxuICAgKiBAcmV0dXJuIHtBdHRyVmFsdWV9IC0gUmV0dXJucyB0aGUgY29uc3RydWN0ZWQgdmFsdWUuXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlRnJvbUZsb2F0MzJCdWZmZXIoYnVmZmVyLCBvZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCB5ZXQgaW1wbGVtZW50ZWQgZm9yIHRoaXMgdHlwZTonICsgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lKVxuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGlzIGEgZmFjdG9yeSBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlcyBvZiBtYXRoIHR5cGVzLCBnaXZlbiBhbiBleGlzdGluZyBBcnJheUJ1ZmZlci5cbiAgICogRWFjaCBNYXRoIHR5cGUgaW1wbGVtZW50cyB0aGlzIGZ1bmN0aW9uIHRvIHJldHVybiBhbiBjb25zdHJ1Y3RlZCB2YWx1ZS5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBidWZmZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGJ5dGVPZmZzZXRcbiAgICogQHJldHVybiB7QXR0clZhbHVlfSAtIFJldHVybnMgdGhlIGNvbnN0cnVjdGVkIHZhbHVlLlxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZUZyb21CdWZmZXIoYnVmZmVyLCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgeWV0IGltcGxlbWVudGVkIGZvciB0aGlzIHR5cGU6JyArIHRoaXMuY29uc3RydWN0b3IubmFtZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgRmxvYXQzMiBlbGVtZW50cyB1c2VkIGJ5IHRoaXMgdHlwZS4gVXNlZCB0byBjYWxjdWxhdGUgc3RvcmFnZSByZXF1aXJlbWVudHMgZm9yIGxhcmdlIGFycmF5cyBvZiB0aGlzIHR5cGUuXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZmxvYXQgdmFsdWVzIHN0b3JlZCBpbiB0aGlzIG1hdGggdHlwZS5cbiAgICovXG4gIHN0YXRpYyBudW1FbGVtZW50cygpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCB5ZXQgaW1wbGVtZW50ZWQgZm9yIHRoaXMgdHlwZTonICsgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgY3VycmVudCBNYXRoIHR5cGUgZGF0YSBhcyBhcnJheS4gT2Z0ZW4gdXNlZCB0byBwYXNzIHR5cGVzIHRvIHRoZSBHUFUuXG4gICAqXG4gICAqIEByZXR1cm4ge2FycmF5fSAtIFJldHVybnMgdGhlIHJlc3VsdCBhcyBhbiBhcnJheS5cbiAgICovXG4gIGFzQXJyYXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19kYXRhXG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgdGhpcyBNYXRoIHR5cGUgdG8gYSBzdHJpbmcgaW4gSlNPTiBmb3JtYXQuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgdG9TdHJpbmcoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5ldy1jYXBcbiAgICByZXR1cm4gU3RyaW5nRnVuY3Rpb25zLnN0cmluZ2lmeUpTT05XaXRoRml4ZWRQcmVjaXNpb24odGhpcy50b0pTT04oKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGlzIE1hdGggdHlwZSB0byBhIEpTT04gb2JqZWN0LlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IC0gVGhlIGpzb24gb2JqZWN0LlxuICAgKi9cbiAgdG9KU09OKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm90IHlldCBpbXBsZW1lbnRlZCBmb3IgdGhpcyB0eXBlOicgKyB0aGlzLmNvbnN0cnVjdG9yLm5hbWUpXG4gIH1cbn1cblxuZXhwb3J0IHsgQXR0clZhbHVlIH1cbiIsImNvbnN0IFVJbnQ4ID0gMFxuY29uc3QgU0ludDggPSAxXG5jb25zdCBVSW50MTYgPSAyXG5jb25zdCBTSW50MTYgPSAzXG5jb25zdCBVSW50MzIgPSA0XG5jb25zdCBTSW50MzIgPSA1XG5jb25zdCBGbG9hdDMyID0gNlxuXG4vKipcbiAqIE1hdGggRnVuY3Rpb25zXG4gKi9cbmNsYXNzIE1hdGhGdW5jdGlvbnMge1xuICAvKipcbiAgICogQ29udmVydHMgUmFkaWFucyB0byBEZWdyZWVzXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJhZCAtIFJhZGlhbnMgdmFsdWVcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIERlZ3JlZXMgZXF1aXZhbGVudFxuICAgKi9cbiAgc3RhdGljIHJhZFRvRGVnKHJhZCkge1xuICAgIHJldHVybiByYWQgLyAoTWF0aC5QSSAvIDE4MClcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBEZWdyZWVzIHRvIFJhZGlhbnRzXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtudW1iZXJ9IGRlZyAtIERlZ3JlZXMgdmFsdWVcbiAgICogQHJldHVybiB7bnVtYmVyfSAtICBSYWRpYW5zIGVxdWl2YWxlbnRcbiAgICovXG4gIHN0YXRpYyBkZWdUb1JhZChkZWcpIHtcbiAgICByZXR1cm4gZGVnICogKE1hdGguUEkgLyAxODApXG4gIH1cblxuICAvKipcbiAgICogVmVyaWZpZXMgaWYgdGhlIHNwZWNpZmllZCBwYXJhbWV0ZXIgaXMgbnVtZXJpYy5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge251bWJlcnxhbnl9IG51bWJlciAtIE51bWJlciB0byB0ZXN0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gYHRydWVgIHdoZW4gaXMgYSB2YWxpZCBudW1iZXJcbiAgICovXG4gIHN0YXRpYyBpc051bWVyaWMobnVtYmVyKSB7XG4gICAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KG51bWJlcikpICYmIGlzRmluaXRlKG51bWJlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYW5kIHJldHVybnMgYSByYW5kb20gaW50ZWdlciB3aXRoaW4gdGhlIHNwZWNpZmllZCByYW5nZS5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge251bWJlcn0gbWluIC0gTG93ZXIgdmFsdWUgcmFuZG9tIGludCBjYW4gYmUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtYXggLSBIaWdoZXN0IHZhbHVlIHJhbmRvbSBpbnQgY2FuIGJlLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gUmFuZG9tIG51bWJlciBpbnNpZGUgcmFuZ2UuXG4gICAqL1xuICBzdGF0aWMgcmFuZG9tSW50KG1pbiwgbWF4KSB7XG4gICAgbWluID0gTWF0aC5jZWlsKG1pbilcbiAgICBtYXggPSBNYXRoLmZsb29yKG1heClcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikpICsgbWluXG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyBhIGxpbmVhbCBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIGlucHV0cyBmb3IgdGhlIHNwZWNpZmllZCBwYXJhbWV0ZXIodCkuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtudW1iZXJ9IHYwIC1cbiAgICogQHBhcmFtIHtudW1iZXJ9IHYxIC1cbiAgICogQHBhcmFtIHtudW1iZXJ9IHQgLVxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC1cbiAgICovXG4gIHN0YXRpYyBsZXJwKHYwLCB2MSwgdCkge1xuICAgIHJldHVybiB2MCArIHQgKiAodjEgLSB2MClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXN0cmljdHMgdGhlIHNwZWNpZmllZCB2YWx1ZSBiZXR3ZWVuIHR3byBudW1iZXJzXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtaW5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG1heFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBzdGF0aWMgY2xhbXAodmFsdWUsIG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KHZhbHVlLCBtaW4pLCBtYXgpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbmVhcmVzdCBwb3cgb2YgdHdvIHZhbHVlIG9mIHRoZSBzcGVjaWZpZWQgbnVtYmVyLlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtXG4gICAqIEByZXR1cm4ge251bWJlcn0gLVxuICAgKi9cbiAgc3RhdGljIG5lYXJlc3RQb3cyKHZhbHVlKSB7XG4gICAgcmV0dXJuIE1hdGgucG93KDIsIE1hdGgucm91bmQoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5sb2coMikpKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG5lYXJlc3QgcG93IG9mIHRlbiB2YWx1ZSBvZiB0aGUgc3BlY2lmaWVkIG51bWJlci5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLVxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC1cbiAgICovXG4gIHN0YXRpYyBuZWFyZXN0UG93MTAodmFsdWUpIHtcbiAgICByZXR1cm4gTWF0aC5wb3coMTAsIE1hdGgucm91bmQoTWF0aC5sb2cxMCh2YWx1ZSkgLyBNYXRoLmxvZzEwKDEwKSkpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbmV4dCBwb3cgb2YgdHdvIHZhbHVlIG9mIHRoZSBzcGVjaWZpZWQgbnVtYmVyLlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtXG4gICAqIEByZXR1cm4ge251bWJlcn0gLVxuICAgKi9cbiAgc3RhdGljIG5leHRQb3cyKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuZnJhY3QoTWF0aC5sb2cyKHZhbHVlKSkgPT0gMCkge1xuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxuICAgIGxldCBleHAgPSAwXG5cbiAgICB3aGlsZSAodmFsdWUgPiAwKSB7XG4gICAgICBleHArK1xuICAgICAgdmFsdWUgPSB2YWx1ZSA+PiAxXG4gICAgfVxuXG4gICAgcmV0dXJuIDEgPDwgZXhwXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZnJhY3Rpb25hbCBjb21wb25lbnQgb2YgYSBudW1iZXJcbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLVxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC1cbiAgICovXG4gIHN0YXRpYyBmcmFjdCh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PSAwKSByZXR1cm4gMFxuICAgIGlmICh2YWx1ZSA8IDApIHtcbiAgICAgIGlmICh2YWx1ZSA+IC0xLjApIHJldHVybiAtdmFsdWVcbiAgICAgIHJldHVybiAtdmFsdWUgJSBNYXRoLmZsb29yKC12YWx1ZSlcbiAgICB9XG4gICAgaWYgKHZhbHVlIDwgMS4wKSByZXR1cm4gdmFsdWVcbiAgICByZXR1cm4gdmFsdWUgJSBNYXRoLmZsb29yKHZhbHVlKVxuICB9XG5cbiAgLyoqXG4gICAqIE1vdmVzIHRoZSBzcGVjaWZpZWQgdmFsdWUgZnJvbSBvbmUgbnVtZXJpYyBkb21haW4ocmFuZ2UpIHRvIGFub3RoZXIuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC1cbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0MSAtXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQxIC1cbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0MiAtXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQyIC1cbiAgICogQHJldHVybiB7bnVtYmVyfSAtXG4gICAqL1xuICBzdGF0aWMgcmVtYXAodmFsdWUsIHN0YXJ0MSwgZW5kMSwgc3RhcnQyLCBlbmQyKSB7XG4gICAgcmV0dXJuIHN0YXJ0MiArIChlbmQyIC0gc3RhcnQyKSAqICgodmFsdWUgLSBzdGFydDEpIC8gKGVuZDEgLSBzdGFydDEpKVxuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gSGVybWl0ZSBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHZhbHVlc1xuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBlZGdlMCAtXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBlZGdlMSAtXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IC1cbiAgICogQHJldHVybiB7bnVtYmVyfSAtXG4gICAqL1xuICBzdGF0aWMgc21vb3RoU3RlcChlZGdlMCwgZWRnZTEsIHgpIHtcbiAgICBjb25zdCB0ID0gdGhpcy5jbGFtcCgoeCAtIGVkZ2UwKSAvIChlZGdlMSAtIGVkZ2UwKSwgMC4wLCAxLjApXG4gICAgcmV0dXJuIHQgKiB0ICogKDMuMCAtIDIuMCAqIHQpXG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgLSBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHZhbHVlc1xuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBlZGdlMCAtXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBlZGdlMSAtXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IC1cbiAgICogQHJldHVybiB7bnVtYmVyfSAtXG4gICAqL1xuICBzdGF0aWMgbGluU3RlcChlZGdlMCwgZWRnZTEsIHgpIHtcbiAgICByZXR1cm4gdGhpcy5jbGFtcCgoeCAtIGVkZ2UwKSAvIChlZGdlMSAtIGVkZ2UwKSwgMC4wLCAxLjApXG4gIH1cblxuICAvKipcbiAgICogRGVjb2RlcyBhIEZsb2F0MTYgZnJvbSB0d28gdW5zaWduZWQgSW50OFxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7VWludDhBcnJheX0gYyAtIEFycmF5IHdpdGggdGhlIHR3byBVSW50OFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gRGVjb2RlZCBGbG9hdDE2XG4gICAqL1xuICBzdGF0aWMgZGVjb2RlMTZCaXRGbG9hdEZyb20yeFVJbnQ4KGMpIHtcbiAgICBjb25zdCBpeCA9IGNbMF0gLy8gMXN0IGJ5dGU6IDEgYml0IHNpZ25lZCBudW0sIDQgYml0cyBleHBvbmVudCwgMyBiaXRzIG1hbnRpc3NhIChNU0IpXG4gICAgY29uc3QgaXkgPSBjWzFdIC8vIDJuZCBieXRlOiA4IGJpdCBtYW50aXNzYSAoTFNCKVxuXG4gICAgY29uc3QgcyA9IGl4ICYgMHg4MCA/IDEgOiAtMSAvLyBnZXQgYml0IDhcbiAgICBjb25zdCBpZXhwID0gKGl4ICYgMHg3OCkgPj4gMyAvLyBtYXNrIGJpdHMgNy00XG4gICAgY29uc3QgbXNiID0gaXggJiAweDcgLy8gbWFzayBiaXRzIDMtMVxuXG4gICAgbGV0IG5vcm0gPSBpZXhwID09IDAgPyAwIDogMjA0OCAvLyBkaXN0aW5ndWlzaCBiZXR3ZWVuIG5vcm1hbGl6ZWQgYW5kIHN1Yi1ub3JtYWxpemVkIG51bWJlcnNcbiAgICBjb25zdCBtYW50aXNzYSA9IG5vcm0gKyAobXNiIDw8IDgpICsgaXkgLy8gaW1wbGljaXQgcHJlY2VkaW5nIDEgb3IgMCBhZGRlZCBoZXJlXG4gICAgbm9ybSA9IGlleHAgPT0gMCA/IDEgOiAwIC8vIG5vcm1hbGl6YXRpb24gdG9nZ2xlXG4gICAgY29uc3QgZXhwb25lbnQgPSBNYXRoLnBvdygyLCBpZXhwICsgbm9ybSAtIDE2KSAvLyAtNSBmb3IgdGhlIHRoZSBleHBvbmVudCBiaWFzIGZyb20gMl4tNSB0byAyXjEwIHBsdXMgYW5vdGhlciAtMTEgZm9yIHRoZSBub3JtYWxpemVkIDEyIGJpdCBtYW50aXNzYVxuICAgIGNvbnN0IHYgPSBzICogbWFudGlzc2EgKiBleHBvbmVudFxuXG4gICAgcmV0dXJuIHZcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmNvZGVzIGFuIGFycmF5IG9mIHR3byB1bnNpZ25lZCBJbnQ4IHRvIGEgRmxvYXQxNlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2IC0gRmxvYXQxNiBudW1iZXJcbiAgICogQHJldHVybiB7VWludDhBcnJheX0gLSBFbmNvZGVkIFVuc2lnbmVkIEludDggYXJyYXlcbiAgICovXG4gIHN0YXRpYyBlbmNvZGUxNkJpdEZsb2F0SW50bzJ4VUludDgodikge1xuICAgIGNvbnN0IGMgPSBuZXcgVWludDhBcnJheSgyKVxuICAgIC8vIGNvbnN0IGMgPSBbMCwgMF07XG4gICAgY29uc3Qgc2lnbnVtID0gdiA+PSAwID8gMTI4IDogMFxuICAgIHYgPSBNYXRoLmFicyh2KVxuICAgIGxldCBleHBvbmVudCA9IDE1XG4gICAgbGV0IGxpbWl0ID0gMTAyNCAvLyBjb25zaWRlcmluZyB0aGUgYmlhcyBmcm9tIDJeLTUgdG8gMl4xMCAoPT0xMDI0KVxuICAgIGZvciAobGV0IGV4cCA9IDE1OyBleHAgPiAwOyBleHAtLSkge1xuICAgICAgaWYgKHYgPCBsaW1pdCkge1xuICAgICAgICBsaW1pdCAvPSAyXG4gICAgICAgIGV4cG9uZW50LS1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcmVzdFxuICAgIGlmIChleHBvbmVudCA9PSAwKSB7XG4gICAgICByZXN0ID0gdiAvIGxpbWl0IC8gMiAvLyBcInN1Yi1ub3JtYWxpemVcIiBpbXBsaWNpdCBwcmVjZWRpbmcgMC5cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdCA9ICh2IC0gbGltaXQpIC8gbGltaXQgLy8gbm9ybWFsaXplIGFjY29yZGluZ2x5IHRvIGltcGxpY2l0IHByZWNlZGluZyAxLlxuICAgIH1cblxuICAgIGNvbnN0IG1hbnRpc3NhID0gTWF0aC5yb3VuZChyZXN0ICogMjA0OCkgLy8gMjA0OCA9IDJeMTEgZm9yIHRoZSAoc3BsaXQpIDExIGJpdCBtYW50aXNzYVxuICAgIGNvbnN0IG1zYiA9IG1hbnRpc3NhIC8gMjU2IC8vIHRoZSBtb3N0IHNpZ25pZmljYW50IDMgYml0cyBnbyBpbnRvIHRoZSBsb3dlciBwYXJ0IG9mIHRoZSBmaXJzdCBieXRlXG4gICAgY29uc3QgbHNiID0gbWFudGlzc2EgLSBtc2IgKiAyNTYgLy8gdGhlcmUgZ28gdGhlIG90aGVyIDggYml0IG9mIHRoZSBsb3dlciBzaWduaWZpY2FuY2VcblxuICAgIGNbMF0gPSBzaWdudW0gKyBleHBvbmVudCAqIDggKyBtc2IgLy8gY29sb3Igbm9ybWFsaXphdGlvbiBmb3IgdGV4dHVyZTJEXG4gICAgY1sxXSA9IGxzYlxuXG4gICAgaWYgKHYgPj0gMjA0OCkge1xuICAgICAgY1swXSA9IDI1NVxuICAgIH1cblxuICAgIHJldHVybiBjXG4gIH1cblxuICAvKipcbiAgICogVHJhbnNmb3JtcyBhIDE2IGJpdCBmbG9hdCB0byBhbiBlbmNvZGVkIGludGVnZXIuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtudW1iZXJ9IHYgLSBGbG9hdDE2IG51bWJlciB0byBlbmNvZGVcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIEVuY29kZWQgbnVtYmVyXG4gICAqL1xuICBzdGF0aWMgZW5jb2RlMTZCaXRGbG9hdCh2KSB7XG4gICAgY29uc3QgZmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSgxKVxuICAgIGZsb2F0MzJBcnJheVswXSA9IHZcbiAgICBjb25zdCBpbnQzMlZpZXcgPSBuZXcgSW50MzJBcnJheShmbG9hdDMyQXJyYXkuYnVmZmVyKVxuXG4gICAgY29uc3QgdG9VSW50MTYgPSAoeCkgPT4ge1xuICAgICAgbGV0IGJpdHMgPSAoeCA+PiAxNikgJiAweDgwMDAgLyogR2V0IHRoZSBzaWduICovXG4gICAgICBsZXQgbSA9ICh4ID4+IDEyKSAmIDB4MDdmZiAvKiBLZWVwIG9uZSBleHRyYSBiaXQgZm9yIHJvdW5kaW5nICovXG4gICAgICBjb25zdCBlID0gKHggPj4gMjMpICYgMHhmZiAvKiBVc2luZyBpbnQgaXMgZmFzdGVyIGhlcmUgKi9cblxuICAgICAgLyogSWYgemVybywgb3IgZGUtbm9ybWFsLCBvciBleHBvbmVudCB1bmRlcmZsb3dzIHRvbyBtdWNoIGZvciBhIGRlLW5vcm1hbFxuICAgICAgICogaGFsZiwgcmV0dXJuIHNpZ25lZCB6ZXJvLiAqL1xuICAgICAgaWYgKGUgPCAxMDMpIHtcbiAgICAgICAgcmV0dXJuIGJpdHNcbiAgICAgIH1cblxuICAgICAgLyogSWYgTmFOLCByZXR1cm4gTmFOLiBJZiBJbmYgb3IgZXhwb25lbnQgb3ZlcmZsb3csIHJldHVybiBJbmYuICovXG4gICAgICBpZiAoZSA+IDE0Mikge1xuICAgICAgICBiaXRzIHw9IDB4N2MwMFxuICAgICAgICAvKiBJZiBleHBvbmVudCB3YXMgMHhmZiBhbmQgb25lIG1hbnRpc3NhIGJpdCB3YXMgc2V0LCBpdCBtZWFucyBOYU4sXG4gICAgICAgICAqIG5vdCBJbmYsIHNvIG1ha2Ugc3VyZSB3ZSBzZXQgb25lIG1hbnRpc3NhIGJpdCB0b28uICovXG4gICAgICAgIGJpdHMgfD0gKGUgPT0gMjU1ID8gMCA6IDEpICYmIHggJiAweDAwN2ZmZmZmXG4gICAgICAgIHJldHVybiBiaXRzXG4gICAgICB9XG5cbiAgICAgIC8qIElmIGV4cG9uZW50IHVuZGVyZmxvd3MgYnV0IG5vdCB0b28gbXVjaCwgcmV0dXJuIGEgZGUtbm9ybWFsICovXG4gICAgICBpZiAoZSA8IDExMykge1xuICAgICAgICBtIHw9IDB4MDgwMFxuICAgICAgICAvKiBFeHRyYSByb3VuZGluZyBtYXkgb3ZlcmZsb3cgYW5kIHNldCBtYW50aXNzYSB0byAwIGFuZCBleHBvbmVudFxuICAgICAgICAgKiB0byAxLCB3aGljaCBpcyBPSy4gKi9cbiAgICAgICAgYml0cyB8PSAobSA+PiAoMTE0IC0gZSkpICsgKChtID4+ICgxMTMgLSBlKSkgJiAxKVxuICAgICAgICByZXR1cm4gYml0c1xuICAgICAgfVxuXG4gICAgICBiaXRzIHw9ICgoZSAtIDExMikgPDwgMTApIHwgKG0gPj4gMSlcbiAgICAgIC8qIEV4dHJhIHJvdW5kaW5nLiBBbiBvdmVyZmxvdyB3aWxsIHNldCBtYW50aXNzYSB0byAwIGFuZCBpbmNyZW1lbnRcbiAgICAgICAqIHRoZSBleHBvbmVudCwgd2hpY2ggaXMgT0suICovXG4gICAgICBiaXRzICs9IG0gJiAxXG5cbiAgICAgIHJldHVybiBiaXRzXG4gICAgfVxuXG4gICAgcmV0dXJuIHRvVUludDE2KGludDMyVmlld1swXSlcbiAgfVxuXG4gIC8qKlxuICAgKiBBcyBvcHBvc2l0ZSBvZiB0aGUgYGVuY29kZTE2Qml0RmxvYXRgIG1ldGhvZCwgdGhpcyB0YWtlcyBhbiBlbmNvZGVkIGludGVnZXIgdmFsdWUsXG4gICAqIGFuZCByZXR1cm5zIHRoZSAxNiBiaXQgZmxvYXQuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtudW1iZXJ9IGggLSBFbmNvZGVkIGludGVnZXJcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIERlY29kZWQgMTYgYml0IGZsb2F0LlxuICAgKi9cbiAgc3RhdGljIGRlY29kZTE2Qml0RmxvYXQoaCkge1xuICAgIGNvbnN0IHMgPSAoaCAmIDB4ODAwMCkgPj4gMTVcbiAgICBjb25zdCBlID0gKGggJiAweDdjMDApID4+IDEwXG4gICAgY29uc3QgZiA9IGggJiAweDAzZmZcblxuICAgIGlmIChlID09IDApIHtcbiAgICAgIHJldHVybiAocyA/IC0xIDogMSkgKiBNYXRoLnBvdygyLCAtMTQpICogKGYgLyBNYXRoLnBvdygyLCAxMCkpXG4gICAgfSBlbHNlIGlmIChlID09IDB4MWYpIHtcbiAgICAgIHJldHVybiBmID8gTmFOIDogKHMgPyAtMSA6IDEpICogSW5maW5pdHlcbiAgICB9XG5cbiAgICByZXR1cm4gKHMgPyAtMSA6IDEpICogTWF0aC5wb3coMiwgZSAtIDE1KSAqICgxICsgZiAvIE1hdGgucG93KDIsIDEwKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm1zIGFuIGFycmF5IG9mIEZsb2F0IDMyIHRvIGFuIGFycmF5IG9mIHVuc2lnbmVkIEludDE2LlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7RmxvYXQzMkFycmF5fSBmbG9hdDMyQXJyYXkgLVxuICAgKiBAcmV0dXJuIHtVaW50MTZBcnJheX0gLSBVbnNpZ25lZCBJbnQxNiBhcnJheSByZXByZXNlbnRhdGl2ZSBvZiB0aGUgRmxvYXQzMkFycmF5XG4gICAqL1xuICBzdGF0aWMgY29udmVydEZsb2F0MzJBcnJheVRvVUludDE2QXJyYXkoZmxvYXQzMkFycmF5KSB7XG4gICAgY29uc3QgdW5pdDE2cyA9IG5ldyBVaW50MTZBcnJheShmbG9hdDMyQXJyYXkubGVuZ3RoKVxuICAgIGNvbnN0IGludDMyVmlldyA9IG5ldyBJbnQzMkFycmF5KGZsb2F0MzJBcnJheS5idWZmZXIpXG4gICAgY29uc3QgdG9VSW50MTYgPSAoeCkgPT4ge1xuICAgICAgbGV0IGJpdHMgPSAoeCA+PiAxNikgJiAweDgwMDAgLyogR2V0IHRoZSBzaWduICovXG4gICAgICBsZXQgbSA9ICh4ID4+IDEyKSAmIDB4MDdmZiAvKiBLZWVwIG9uZSBleHRyYSBiaXQgZm9yIHJvdW5kaW5nICovXG4gICAgICBjb25zdCBlID0gKHggPj4gMjMpICYgMHhmZiAvKiBVc2luZyBpbnQgaXMgZmFzdGVyIGhlcmUgKi9cblxuICAgICAgLyogSWYgemVybywgb3IgZGUtbm9ybWFsLCBvciBleHBvbmVudCB1bmRlcmZsb3dzIHRvbyBtdWNoIGZvciBhIGRlLW5vcm1hbFxuICAgICAgICogaGFsZiwgcmV0dXJuIHNpZ25lZCB6ZXJvLiAqL1xuICAgICAgaWYgKGUgPCAxMDMpIHtcbiAgICAgICAgcmV0dXJuIGJpdHNcbiAgICAgIH1cblxuICAgICAgLyogSWYgTmFOLCByZXR1cm4gTmFOLiBJZiBJbmYgb3IgZXhwb25lbnQgb3ZlcmZsb3csIHJldHVybiBJbmYuICovXG4gICAgICBpZiAoZSA+IDE0Mikge1xuICAgICAgICBiaXRzIHw9IDB4N2MwMFxuICAgICAgICAvKiBJZiBleHBvbmVudCB3YXMgMHhmZiBhbmQgb25lIG1hbnRpc3NhIGJpdCB3YXMgc2V0LCBpdCBtZWFucyBOYU4sXG4gICAgICAgICAqIG5vdCBJbmYsIHNvIG1ha2Ugc3VyZSB3ZSBzZXQgb25lIG1hbnRpc3NhIGJpdCB0b28uICovXG4gICAgICAgIGJpdHMgfD0gKGUgPT0gMjU1ID8gMCA6IDEpICYmIHggJiAweDAwN2ZmZmZmXG4gICAgICAgIHJldHVybiBiaXRzXG4gICAgICB9XG5cbiAgICAgIC8qIElmIGV4cG9uZW50IHVuZGVyZmxvd3MgYnV0IG5vdCB0b28gbXVjaCwgcmV0dXJuIGEgZGUtbm9ybWFsICovXG4gICAgICBpZiAoZSA8IDExMykge1xuICAgICAgICBtIHw9IDB4MDgwMFxuICAgICAgICAvKiBFeHRyYSByb3VuZGluZyBtYXkgb3ZlcmZsb3cgYW5kIHNldCBtYW50aXNzYSB0byAwIGFuZCBleHBvbmVudFxuICAgICAgICAgKiB0byAxLCB3aGljaCBpcyBPSy4gKi9cbiAgICAgICAgYml0cyB8PSAobSA+PiAoMTE0IC0gZSkpICsgKChtID4+ICgxMTMgLSBlKSkgJiAxKVxuICAgICAgICByZXR1cm4gYml0c1xuICAgICAgfVxuXG4gICAgICBiaXRzIHw9ICgoZSAtIDExMikgPDwgMTApIHwgKG0gPj4gMSlcbiAgICAgIC8qIEV4dHJhIHJvdW5kaW5nLiBBbiBvdmVyZmxvdyB3aWxsIHNldCBtYW50aXNzYSB0byAwIGFuZCBpbmNyZW1lbnRcbiAgICAgICAqIHRoZSBleHBvbmVudCwgd2hpY2ggaXMgT0suICovXG4gICAgICBiaXRzICs9IG0gJiAxXG5cbiAgICAgIHJldHVybiBiaXRzXG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmxvYXQzMkFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB1bml0MTZzW2ldID0gdG9VSW50MTYoaW50MzJWaWV3W2ldKVxuICAgIH1cbiAgICByZXR1cm4gdW5pdDE2c1xuICB9XG59XG5cbmV4cG9ydCB7IFVJbnQ4LCBTSW50OCwgU0ludDE2LCBVSW50MTYsIFNJbnQzMiwgVUludDMyLCBGbG9hdDMyLCBNYXRoRnVuY3Rpb25zIH1cbiIsImltcG9ydCB7IFVJbnQ4LCBTSW50OCwgVUludDE2LCBTSW50MTYsIFVJbnQzMiwgU0ludDMyLCBGbG9hdDMyIH0gZnJvbSAnLi9VdGlsaXRpZXMvTWF0aEZ1bmN0aW9ucydcblxubGV0IF9yZWdpc3RlcmVkQmx1ZXByaW50cyA9IHt9XG5sZXQgX2JsdWVwcmludE5hbWVzID0ge31cbmxldCBfYmx1ZXByaW50cyA9IFtdXG5cbi8qKlxuICogUmVnaXN0cnkgaXMgYSBzdGF0aWMgZmFjdG9yeSB0aGF0IGhhbmRsZXMgcmVnaXN0cmF0aW9uL3JlY29uc3RydWN0aW9uIG9mXG4gKiBwZXJzaXN0ZWQgdHlwZSBvZiBkYXRhLCB0aGlzIGluY2x1ZGVzIGNsYXNzZXMgYW5kIHR5cGVzLlxuICpcbiAqIE5vdGU6IGJsdWVwcmludE5hbWUgaXMgcmVxdWlyZWQgYmVjYXVzZSBvbiBtaW5pZmljYXRpb24gcHJvY2Vzc1xuICogdGhlIG5hbWUgb2YgY2xhc3NlcyBjaGFuZ2UgYW5kIHdlIGNhbid0IHNpbXBseSB1c2UgJy4uLi5jb25zdHJ1Y3Rvci5uYW1lJy5cbiAqIFNvLCB3ZSBuZWVkIGEgd2F5IG9mIHJlbGF0aW5nIG1pbmlmaWVkIGJsdWVwcmludCBuYW1lcyB0byB0aGUgb25lIHN0b3JlZCBmb3IgcGVyc2lzdGVuY3kuXG4gKiA8YnI+XG4gKiBpLmUuXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBJbXBvcnQgcmVnaXN0cnkgY2xhc3NcbiAqIGNsYXNzIEZvbygpIHt9XG4gKlxuICogUmVnaXN0cnkucmVnaXN0ZXIoJ0ZvbycsIEZvbylcbiAqIC8vIEluIGNhc2UgJ0ZvbycgY2xhc3MgZ2V0cyBpdHMgbmFtZSBjaGFuZ2VkIHRvICdjJyBvbiBtaW5pZmljYXRpb24sXG4gKiAvLyBhbmQgdGhlIHBlcnNpc3RlZCBkYXRhIHR5cGUgaXMgJ0ZvbycsIHdlIHdvdWxkIGtub3cgaG93IHRvIHJlbGF0ZSB0aGVtLlxuICogYGBgXG4gKlxuICogQHN0YXRpY1xuICogQGNsYXNzIFJlZ2lzdHJ5XG4gKi9cbmNvbnN0IFJlZ2lzdHJ5ID0ge1xuICAvKipcbiAgICogUmVnaXN0ZXJzIGEgbmV3IGJsdWVwcmludCBpbiB0aGUgZmFjdG9yeS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJsdWVwcmludE5hbWUgLSBOYW1lIG9mIHRoZSByZWdpc3RlcmVkIGJsdWVwcmludChDbGFzcywgdHlwZSwgZXRjKVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufG51bWJlcnxhbnl9IGJsdWVwcmludCAtIEJsdWVwcmludCByZXByZXNlbnRhdGlvbihDbGFzcyBmdW5jdGlvbiwgdHlwZSlcbiAgICovXG4gIHJlZ2lzdGVyOiAoYmx1ZXByaW50TmFtZSwgYmx1ZXByaW50KSA9PiB7XG4gICAgaWYgKF9yZWdpc3RlcmVkQmx1ZXByaW50c1tibHVlcHJpbnROYW1lXSkge1xuICAgICAgY29uc29sZS53YXJuKGBUaGVyZSdzIGEgY2xhc3MgcmVnaXN0ZXJlZCB3aXRoICcke2JsdWVwcmludE5hbWV9JyBuYW1lYClcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBfcmVnaXN0ZXJlZEJsdWVwcmludHNbYmx1ZXByaW50TmFtZV0gPSB7IGJsdWVwcmludCwgY2FsbGJhY2tzOiBbXSB9XG5cbiAgICAvLyBOb3RlOiBUbyBwcm92aWRlIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCBzYW1lIGJsdWVwcmludCBjYW4gYmUgc3RvcmVkIHVuZGVyIG11bHRpcGxlIG5hbWVzLlxuICAgIC8vIFRoYXRzIHRoZSByZWFzb24gYmVoaW5kIHVzaW5nIGluZGV4ZXMgaW5zdGVhZCBvZiB0aGUgYmx1ZXByaW50LlxuICAgIGNvbnN0IGJsdWVwcmludEluZGV4ID0gX2JsdWVwcmludHMubGVuZ3RoXG4gICAgX2JsdWVwcmludHMucHVzaChibHVlcHJpbnQpXG4gICAgX2JsdWVwcmludE5hbWVzW2JsdWVwcmludEluZGV4XSA9IGJsdWVwcmludE5hbWVcbiAgfSxcbiAgLyoqXG4gICAqIFJldHVybnMgYmx1ZXByaW50IGZ1bmN0aW9uL3R5cGUgYnkgc3BlY2lmeWluZyBpdHMgbmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJsdWVwcmludE5hbWUgLSBOYW1lIG9mIHRoZSByZWdpc3RlcmVkIGJsdWVwcmludChDbGFzcywgdHlwZSwgZXRjKVxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbnxudW1iZXJ8YW55fSAtIEJsdWVwcmludCByZXByZXNlbnRhdGlvbihDbGFzcyBmdW5jdGlvbiwgdHlwZSlcbiAgICovXG4gIGdldEJsdWVwcmludDogKGJsdWVwcmludE5hbWUpID0+IHtcbiAgICBpZiAoX3JlZ2lzdGVyZWRCbHVlcHJpbnRzW2JsdWVwcmludE5hbWVdKSByZXR1cm4gX3JlZ2lzdGVyZWRCbHVlcHJpbnRzW2JsdWVwcmludE5hbWVdLmJsdWVwcmludFxuXG4gICAgdGhyb3cgbmV3IEVycm9yKGAke2JsdWVwcmludE5hbWV9IGJsdWVwcmludCBpcyBub3QgcmVnaXN0ZXJlZGApXG4gIH0sXG4gIC8qKlxuICAgKiBSZXR1cm5zIGNsYXNzIG5hbWUgdXNpbmcgcGFzc2luZyBhbiBpbnN0YW50aWF0ZWQgb2JqZWN0LlxuICAgKiBJZiBpdCBpcyBub3QgcmVnaXN0ZXJlZCwgdGhlIG5hbWUgaW4gY29uc3RydWN0b3IgaXMgcmV0dXJuZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb258bnVtYmVyfGFueXx1bmRlZmluZWR9IGJsdWVwcmludEluc3RhbmNlIC0gQmx1ZXByaW50IHJlcHJlc2VudGF0aW9uKENsYXNzIGZ1bmN0aW9uLCB0eXBlKVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IC0gTmFtZSBvZiB0aGUgcmVnaXN0ZXJlZCBibHVlcHJpbnQoQ2xhc3MsIHR5cGUsIGV0YylcbiAgICovXG4gIGdldEJsdWVwcmludE5hbWU6IChibHVlcHJpbnRJbnN0YW5jZSkgPT4ge1xuICAgIGxldCBibHVlcHJpbnQgPSBibHVlcHJpbnRJbnN0YW5jZVxuICAgIGxldCBibHVlcHJpbnROYW1lID0gYmx1ZXByaW50SW5zdGFuY2VcblxuICAgIGlmICh0eXBlb2YgYmx1ZXByaW50SW5zdGFuY2UgPT09ICdvYmplY3QnKSB7XG4gICAgICBibHVlcHJpbnQgPSBibHVlcHJpbnRJbnN0YW5jZS5jb25zdHJ1Y3RvclxuICAgICAgYmx1ZXByaW50TmFtZSA9IGJsdWVwcmludC5uYW1lXG4gICAgfVxuXG4gICAgY29uc3QgYmx1ZXByaW50SWQgPSBfYmx1ZXByaW50cy5pbmRleE9mKGJsdWVwcmludClcbiAgICBpZiAoYmx1ZXByaW50SWQgPj0gMCAmJiBfYmx1ZXByaW50TmFtZXNbYmx1ZXByaW50SWRdKSByZXR1cm4gX2JsdWVwcmludE5hbWVzW2JsdWVwcmludElkXVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKGAke2JsdWVwcmludE5hbWV9IGJsdWVwcmludCBpcyBub3QgcmVnaXN0ZXJlZGApXG4gIH0sXG4gIC8qKlxuICAgKiBBY2NlcHRpbmcgdGhlIGNsYXNzIG5hbWUgYW5kIGBOYCBudW1iZXIgb2YgYXJndW1lbnRzLCBpbnN0YW50aWF0ZXMgYSBuZXcgb2JqZWN0IG9mIHRoZSBzcGVjaWZpZWQgY2xhc3MuXG4gICAqIElmIHRoZSBjbGFzcyBpcyBub3QgcmVnaXN0ZXJlZCwgdGhlbiBgbnVsbGAgaXMgcmV0dXJuZWQuXG4gICAqIDxicj5cbiAgICogKipOb3RlOioqIEFsdGhvdWdoIHRoZSBjbGFzcyBhcmd1bWVudHMgYXJlIG5vdCBsaXRlcmFsbHkgc3BlY2lmaWVkIGluIHRoZSBwYXJhbWV0ZXJzLFxuICAgKiB5b3UgY2FuIHBhc3MgdGhlbShBcyBtYW55IGFzIG5lZWRlZCkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBibHVlcHJpbnROYW1lIC0gTmFtZSBvZiB0aGUgcmVnaXN0ZXJlZCBibHVlcHJpbnQoQ2xhc3MsIHR5cGUsIGV0YylcbiAgICogQHJldHVybiB7b2JqZWN0fG51bGx9IC0gSW5zdGFudGlhdGVkIG9iamVjdCBvZiB0aGUgc3BlY2lmaWVkIGNsYXNzXG4gICAqL1xuICBjb25zdHJ1Y3RDbGFzczogKGJsdWVwcmludE5hbWUsIC4uLmFyZ3MpID0+IHtcbiAgICBjb25zdCBibHVlcHJpbnREYXRhID0gX3JlZ2lzdGVyZWRCbHVlcHJpbnRzW2JsdWVwcmludE5hbWVdXG4gICAgaWYgKCFibHVlcHJpbnREYXRhKSB0aHJvdyBuZXcgRXJyb3IoYCR7Ymx1ZXByaW50TmFtZX0gYmx1ZXByaW50IGlzIG5vdCByZWdpc3RlcmVkYClcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuZXctY2FwXG4gICAgcmV0dXJuIG5ldyBibHVlcHJpbnREYXRhLmJsdWVwcmludCguLi5hcmdzKVxuICB9LFxuICAvKipcbiAgICogRm9yIHRlc3RpbmcgcHVycG9zZSBvbmx5LCBuZXZlciBjYWxsIHRoaXMgb3V0c2lkZSBvZiB0aGUgdGVzdCBzY29wZS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZsdXNoOiAoKSA9PiB7XG4gICAgX3JlZ2lzdGVyZWRCbHVlcHJpbnRzID0ge31cbiAgICBfYmx1ZXByaW50TmFtZXMgPSB7fVxuICAgIF9ibHVlcHJpbnRzID0gW11cbiAgfSxcbn1cblxuUmVnaXN0cnkucmVnaXN0ZXIoJ1VJbnQ4JywgVUludDgpXG5SZWdpc3RyeS5yZWdpc3RlcignU0ludDgnLCBTSW50OClcblJlZ2lzdHJ5LnJlZ2lzdGVyKCdVSW50MTYnLCBVSW50MTYpXG5SZWdpc3RyeS5yZWdpc3RlcignU0ludDE2JywgU0ludDE2KVxuUmVnaXN0cnkucmVnaXN0ZXIoJ1VJbnQzMicsIFVJbnQzMilcblJlZ2lzdHJ5LnJlZ2lzdGVyKCdTSW50MzInLCBTSW50MzIpXG5SZWdpc3RyeS5yZWdpc3RlcignRmxvYXQzMicsIEZsb2F0MzIpXG5cbmV4cG9ydCB7IFJlZ2lzdHJ5IH1cbiIsImltcG9ydCB7IEF0dHJWYWx1ZSB9IGZyb20gJy4vQXR0clZhbHVlLmpzJ1xuaW1wb3J0IHsgUmVnaXN0cnkgfSBmcm9tICcuLi9SZWdpc3RyeSdcblxuLyoqXG4gKiBSZXByZXNlbnRpbmcgYSBWZWMyKHR3by1kaW1lbnNpb25hbCBmbG9hdGluZyBwb2ludCB2ZWN0b3IpLiBBIFZlYzIgaXMgZm9yIHJlcHJlc2VudGluZyAyIGRpbWVuc2lvbmFsIHZhbHVlcywgc3VjaCBhcyBzY3JlZW4gY29vcmRpbmF0ZXMgb3IgcGl4ZWwgY29vcmRpbmF0ZXMgd2l0aGluIGFuIGltYWdlLlxuICpcbiAqIE1hdGggdHlwZXMgaW50ZXJuYWxseSBzdG9yZSB2YWx1ZXMgaW4ge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0Zsb2F0MzJBcnJheXxGbG9hdDMyQXJyYXl9IGFuZFxuICogZXhwb3NlIGdldHRlcnMgYW5kIHNldHRlcnMgZm9yIHRoZSBjb21wb25lbnQgdmFsdWVzLlxuICpcbiAqIEBleHRlbmRzIEF0dHJWYWx1ZVxuICovXG5jbGFzcyBWZWMyIGV4dGVuZHMgQXR0clZhbHVlIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBWZWMyLlxuICAgKlxuICAgKiBUaGUgdHlwZSBvZiB2YWx1ZXMgb2YgdGhlIGAoeCwgeSlgIGNvb3JkaW5hdGVzIGNhbiBiZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRmxvYXQzMkFycmF5fEZsb2F0MzJBcnJheX0sXG4gICAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9VaW50MzJBcnJheXxVaW50MzJBcnJheX0sXG4gICAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9JbnQzMkFycmF5fEludDMyQXJyYXl9IGFuZFxuICAgKiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZXMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2lhL09iamV0b3NfZ2xvYmFsZXMvQXJyYXlCdWZmZXJ8QXJyYXlCdWZmZXJ9LlxuICAgKiA8YnI+XG4gICAqXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogIGNvbnN0IG15VmVjMiA9IG5ldyBWZWMyKDEuMiwgMy40KVxuICAgKiBgYGBcbiAgICpcbiAgICogR2l2ZW4gYW4gYXJyYXkgb2YgZmxvYXRzLCBjcmVhdGUgYSBWZWMyIHRoYXQgd3JhcHMgc29tZSBwYXJ0IG9mIGl0LlxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqICBjb25zdCBmbG9hdEFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSg2KVxuICAgKiAgZmxvYXRBcnJheVswXSA9IDEuMlxuICAgKiAgZmxvYXRBcnJheVsxXSA9IDMuNFxuICAgKiAgY29uc3QgbXlWZWMyID0gbmV3IFZlYzIoZmxvYXRBcnJheSlcbiAgICogIGNvbnNvbGUubG9nKG15VmVjMi50b0pTT04oKSlcbiAgICogYGBgXG4gICAqIFRoZSByZXN1bHRpbmcgb3V0cHV0XG4gICAqIGBgYGpzb25cbiAgICogID4geyB4OjEuMiwgeTozLjQgfVxuICAgKiBgYGBcbiAgICpcbiAgICogR2l2ZW4gYW4gYXJyYXkgb2YgZmxvYXRzLCBjcmVhdGUgYSBWZWMyIHRoYXQgd3JhcHMgc29tZSBwYXJ0IG9mIGl0LlxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqICBjb25zdCBmbG9hdEFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSg2KVxuICAgKiAgZmxvYXRBcnJheVswXSA9IDEuMlxuICAgKiAgZmxvYXRBcnJheVsxXSA9IDMuNFxuICAgKiAgZmxvYXRBcnJheVsyXSA9IDUuNlxuICAgKiAgZmxvYXRBcnJheVszXSA9IDcuOFxuICAgKiAgZmxvYXRBcnJheVs0XSA9IDkuMFxuICAgKiAgZmxvYXRBcnJheVs1XSA9IDEuOVxuICAgKiAgY29uc3QgbXlWZWMyID0gbmV3IFZlYzIoZmxvYXRBcnJheS5idWZmZXIsIDgpXG4gICAqICBjb25zb2xlLmxvZyhteVZlYzIudG9KU09OKCkpXG4gICAqIGBgYFxuICAgKiBUaGUgcmVzdWx0aW5nIG91dHB1dFxuICAgKiBgYGBqc29uXG4gICAqICA+IHsgeDo1LjYsIHk6Ny44IH1cbiAgICogYGBgXG4gICAqXG4gICAqIFlvdSBjYW4gYWxzbyBwYXNzIG9uZSBKU09OIG9iamVjdCBwYXJhbWV0ZXIuXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogIGNvbnN0IG15VmVjMiA9IG5ldyBWZWMyKHsgeDoxLjIsIHk6My40IH0pXG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcnxGbG9hdDMyQXJyYXl8VWludDMyQXJyYXl8anNvbn0geCAtIFRoZSB4IHZhbHVlLiBEZWZhdWx0IGlzIDAuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB5IC0gVGhlIHkgdmFsdWUuIERlZmF1bHQgaXMgMC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0gMCkge1xuICAgIHN1cGVyKClcblxuICAgIGlmICh4IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5IHx8IHggaW5zdGFuY2VvZiBVaW50MzJBcnJheSB8fCB4IGluc3RhbmNlb2YgSW50MzJBcnJheSkge1xuICAgICAgdGhpcy5fX2RhdGEgPSB4XG4gICAgfSBlbHNlIGlmICh4IGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgIGNvbnNvbGUud2FybihgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBuZXcgVmVjNChuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlciwgYnl0ZU9mZnNldCwgNCkpYClcbiAgICAgIGNvbnN0IGJ1ZmZlciA9IHhcbiAgICAgIGNvbnN0IGJ5dGVPZmZzZXQgPSB5XG4gICAgICB0aGlzLl9fZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCAyKVxuICAgIH0gZWxzZSBpZiAoeCAhPSBudWxsICYmIHR5cGVvZiB4ID09ICdvYmplY3QnKSB7XG4gICAgICB0aGlzLl9fZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoMilcbiAgICAgIHRoaXMuZnJvbUpTT04oeClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fX2RhdGEgPSBuZXcgRmxvYXQzMkFycmF5KDIpXG4gICAgICB0aGlzLl9fZGF0YVswXSA9IHhcbiAgICAgIHRoaXMuX19kYXRhWzFdID0geVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIGB4YCBjb21wb25lbnQuXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSB4IGNvbXBvbmVudC5cbiAgICovXG4gIGdldCB4KCkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YVswXVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmb3IgYHhgIGNvbXBvbmVudC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIFRoZSB2YWwgcGFyYW0uXG4gICAqL1xuICBzZXQgeCh2YWwpIHtcbiAgICB0aGlzLl9fZGF0YVswXSA9IHZhbFxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3IgYHlgIGNvbXBvbmVudC5cbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFJldHVybnMgdGhlIHkgY29tcG9uZW50LlxuICAgKi9cbiAgZ2V0IHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19kYXRhWzFdXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciBgeWAgY29tcG9uZW50LlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gVGhlIHZhbCBwYXJhbS5cbiAgICovXG4gIHNldCB5KHZhbCkge1xuICAgIHRoaXMuX19kYXRhWzFdID0gdmFsXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZyb20gc2NhbGFyIGNvbXBvbmVudHMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHggY29tcG9uZW50LlxuICAgKiBAcGFyYW0ge251bWJlcn0geSAgLSBUaGUgeSBjb21wb25lbnQuXG4gICAqL1xuICBzZXQoeCwgeSkge1xuICAgIHRoaXMuX19kYXRhWzBdID0geFxuICAgIHRoaXMuX19kYXRhWzFdID0geVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoaXMgVmVjMiBkYXRhIHdpdGggdGhlIFZlYzIgZGF0YSBwYXNzZWQgYXMgcGFyYW1ldGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzJ9IG90aGVyIC0gVGhlIG90aGVyIFZlYzIgdG8gc2V0IGZyb20uXG4gICAqL1xuICBzZXRGcm9tT3RoZXIob3RoZXIpIHtcbiAgICB0aGlzLnggPSBvdGhlci54XG4gICAgdGhpcy55ID0gb3RoZXIueVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGlzIFZlYzIgY29udGFpbnMgdGhlIHNhbWUgdmFsdWVzIGFzIHRoZSBvdGhlciBWZWMyLlxuICAgKiBEZXByZWNhdGVkLiBVc2UgI2lzRXF1YWwgaW5zdGVhZC5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQHBhcmFtIHtWZWMyfSBvdGhlciAtIFRoZSBvdGhlciBWZWMyIHRvIGNvbXBhcmUgd2l0aC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gLSBSZXR1cm5zIGB0cnVlYCBpZiBhcmUgdGhlIHNhbWUgVmVjdG9yLCBvdGhlcndpc2UsIGBmYWxzZWAuXG4gICAqL1xuICBlcXVhbChvdGhlcikge1xuICAgIGNvbnNvbGUud2FybignRGVwcmVjYXRlZC4gVXNlICNpc0VxdWFsIGluc3RlYWQuJylcbiAgICByZXR1cm4gdGhpcy5pc0VxdWFsKG90aGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGlzIFZlYzIgY29udGFpbnMgdGhlIHNhbWUgdmFsdWVzIGFzIHRoZSBvdGhlciBWZWMyLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzJ9IG90aGVyIC0gVGhlIG90aGVyIFZlYzIgdG8gY29tcGFyZSB3aXRoLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSAtIFJldHVybnMgYHRydWVgIGlmIGFyZSB0aGUgc2FtZSBWZWN0b3IsIG90aGVyd2lzZSwgYGZhbHNlYC5cbiAgICovXG4gIGlzRXF1YWwob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy54ID09IG90aGVyLnggJiYgdGhpcy55ID09IG90aGVyLnlcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhpcyBWZWMyIGlzIGRpZmZlcmVudCBmcm9tIGFub3RoZXIgVmVjMi5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQHBhcmFtIHtWZWMyfSBvdGhlciAtIFRoZSBvdGhlciBWZWMyIHRvIGNvbXBhcmUgd2l0aC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gLSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgVmVjMnMgYXJlIGRpZmZlcmVudCwgb3RoZXJ3aXNlLCBgZmFsc2VgLlxuICAgKi9cbiAgbm90RXF1YWxzKG90aGVyKSB7XG4gICAgY29uc29sZS53YXJuKCdEZXByZWNhdGVkLiBVc2UgI25vdEVxdWFsIGluc3RlYWQuJylcbiAgICByZXR1cm4gdGhpcy5ub3RFcXVhbChvdGhlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhpcyBWZWMyIGlzIGRpZmZlcmVudCBmcm9tIGFub3RoZXIgVmVjMi5cbiAgICpcbiAgICogQHBhcmFtIHtWZWMyfSBvdGhlciAtIFRoZSBvdGhlciBWZWMyIHRvIGNvbXBhcmUgd2l0aC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gLSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgVmVjMnMgYXJlIGRpZmZlcmVudCwgb3RoZXJ3aXNlLCBgZmFsc2VgLlxuICAgKi9cbiAgbm90RXF1YWwob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy54ICE9IG90aGVyLnggJiYgdGhpcy55ICE9IG90aGVyLnlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBWZWMyIGlzIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgYXMgb3RoZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjMn0gb3RoZXIgLSBUaGUgb3RoZXIgVmVjMiB0byBjb21wYXJlIHdpdGguXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwcmVjaXNpb24gLSBUaGUgcHJlY2lzaW9uIHRvIHdoaWNoIHRoZSB2YWx1ZXMgbXVzdCBtYXRjaC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gLSBSZXR1cm5zIHRydWUgb3IgZmFsc2UuXG4gICAqL1xuICBhcHByb3hFcXVhbChvdGhlciwgcHJlY2lzaW9uID0gTnVtYmVyLkVQU0lMT04pIHtcbiAgICByZXR1cm4gTWF0aC5hYnModGhpcy54IC0gb3RoZXIueCkgPCBwcmVjaXNpb24gJiYgTWF0aC5hYnModGhpcy55IC0gb3RoZXIueSkgPCBwcmVjaXNpb25cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIG90aGVyIHRvIHRoaXMgVmVjMiBhbmQgcmV0dXJucyB0aGUgcmVzdWx0IGFzIGEgbmV3IFZlYzIuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjMn0gb3RoZXIgLSBUaGUgb3RoZXIgVmVjMiB0byBhZGQuXG4gICAqIEByZXR1cm4ge1ZlYzJ9IC0gUmV0dXJucyBhIG5ldyBWZWMyLlxuICAgKi9cbiAgYWRkKG90aGVyKSB7XG4gICAgcmV0dXJuIG5ldyBWZWMyKHRoaXMueCArIG90aGVyLngsIHRoaXMueSArIG90aGVyLnkpXG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIFZlYzIgdG8gdGhpcyBWZWMyLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzJ9IG90aGVyIC0gVGhlIG90aGVyIFZlYzIgdG8gYWRkLlxuICAgKi9cbiAgYWRkSW5QbGFjZShvdGhlcikge1xuICAgIHRoaXMueCArPSBvdGhlci54XG4gICAgdGhpcy55ICs9IG90aGVyLnlcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJ0cmFjdHMgYSBWZWMyIGZyb20gdGhpcyBWZWMyIGFuZCByZXR1cm5zIHRoZSByZXN1bHQgYXMgYSBuZXcgVmVjMi5cbiAgICpcbiAgICogQHBhcmFtIHtWZWMyfSBvdGhlciAtIFRoZSBvdGhlciBWZWMyIHRvIHN1YnRyYWN0LlxuICAgKiBAcmV0dXJuIHtWZWMyfSAtIFJldHVybnMgYSBuZXcgVmVjMi5cbiAgICovXG4gIHN1YnRyYWN0KG90aGVyKSB7XG4gICAgcmV0dXJuIG5ldyBWZWMyKHRoaXMueCAtIG90aGVyLngsIHRoaXMueSAtIG90aGVyLnkpXG4gIH1cblxuICAvKipcbiAgICogU3VidHJhY3RzIGEgVmVjMiBmcm9tIHRoaXMgVmVjMi5cbiAgICpcbiAgICogQHBhcmFtIHtWZWMyfSBvdGhlciAtIFRoZSBvdGhlciBWZWMyIHRvIHN1YnRyYWN0LlxuICAgKiBAcmV0dXJuIHtWZWMyfSAtIFJldHVybnMgYSBuZXcgVmVjMi5cbiAgICovXG4gIHN1YnRyYWN0SW5QbGFjZShvdGhlcikge1xuICAgIHRoaXMueCAtPSBvdGhlci54XG4gICAgdGhpcy55IC09IG90aGVyLnlcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIFNjYWxlcyB0aGlzIFZlYzIgYnkgc2NhbGFyIGFuZCByZXR1cm5zIHRoZSByZXN1bHQgYXMgYSBuZXcgVmVjMi5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxhciAtIFRoZSBzY2FsYXIgdmFsdWUuXG4gICAqIEByZXR1cm4ge1ZlYzJ9IC0gUmV0dXJucyBhIG5ldyBWZWMyLlxuICAgKi9cbiAgc2NhbGUoc2NhbGFyKSB7XG4gICAgcmV0dXJuIG5ldyBWZWMyKHRoaXMueCAqIHNjYWxhciwgdGhpcy55ICogc2NhbGFyKVxuICB9XG5cbiAgLyoqXG4gICAqIFNjYWxlcyB0aGlzIFZlYzIgYnkgc2NhbGFyLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGFyIC0gVGhlIHNjYWxhciB2YWx1ZS5cbiAgICovXG4gIHNjYWxlSW5QbGFjZShzY2FsYXIpIHtcbiAgICB0aGlzLnggKj0gc2NhbGFyXG4gICAgdGhpcy55ICo9IHNjYWxhclxuICB9XG5cbiAgLyoqXG4gICAqIEludmVydHMgdGhpcyBWZWMyIGFuZCByZXR1cm5zIHRoZSByZXN1bHQgYXMgYSBuZXcgVmVjMi5cbiAgICpcbiAgICogQHJldHVybiB7VmVjMn0gLSBSZXR1cm5zIGEgbmV3IFZlYzIuXG4gICAqL1xuICBpbnZlcnQoKSB7XG4gICAgcmV0dXJuIG5ldyBWZWMyKDEuMCAvIHRoaXMueCwgMS4wIC8gdGhpcy55KVxuICB9XG5cbiAgLyoqXG4gICAqIEludmVydHMgdGhpcyBWZWMyLlxuICAgKlxuICAgKiBAcmV0dXJuIHtWZWMyfSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBpbnZlcnRJblBsYWNlKCkge1xuICAgIHRoaXMueCA9IDEuMCAvIHRoaXMueFxuICAgIHRoaXMueSA9IDEuMCAvIHRoaXMueVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogTXVsdGlwbGllcyBhIFZlYzIgd2l0aCB0aGlzIFZlYzIgYW5kIHJldHVybnMgdGhlIHJlc3VsdCBhcyBhIG5ldyBWZWMyLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzJ9IG90aGVyIC0gVGhlIG90aGVyIFZlYzIgdG8gbXVsdGlwbHkgd2l0aC5cbiAgICogQHJldHVybiB7VmVjMn0gLSBSZXR1cm5zIGEgbmV3IFZlYzIuXG4gICAqL1xuICBtdWx0aXBseShvdGhlcikge1xuICAgIHJldHVybiBuZXcgVmVjMih0aGlzLnggKiBvdGhlci54LCB0aGlzLnkgKiBvdGhlci55KVxuICB9XG5cbiAgLyoqXG4gICAqIE11bHRpcGxpZXMgYSBWZWMyIHdpdGggdGhpcyBWZWMyLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzJ9IG90aGVyIC0gVGhlIG90aGVyIFZlYzIgdG8gbXVsdGlwbHkgd2l0aC5cbiAgICovXG4gIG11bHRpcGx5SW5QbGFjZShvdGhlcikge1xuICAgIHRoaXMueCAqPSBvdGhlci54XG4gICAgdGhpcy55ICo9IG90aGVyLnlcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiB0aGlzIFZlYzIuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSBsZW5ndGggc3F1YXJlZC5cbiAgICovXG4gIGxlbmd0aFNxdWFyZWQoKSB7XG4gICAgY29uc3QgeCA9IHRoaXMuX19kYXRhWzBdXG4gICAgY29uc3QgeSA9IHRoaXMuX19kYXRhWzFdXG4gICAgcmV0dXJuIHggKiB4ICsgeSAqIHlcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgdGhpcyBWZWMyLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gUmV0dXJucyB0aGUgbGVuZ3RoLlxuICAgKi9cbiAgbGVuZ3RoKCkge1xuICAgIHJldHVybiBNYXRoLnNxcnQodGhpcy5sZW5ndGhTcXVhcmVkKCkpXG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgZGlzdGFuY2UgdG8gYW5vdGhlciB2ZWN0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjMn0gb3RoZXIgLSBUaGUgb3RoZXIgdmFsdWUuXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHZlY3RvcnMuXG4gICAqL1xuICBkaXN0YW5jZVRvKG90aGVyKSB7XG4gICAgY29uc3QgeCA9IHRoaXMuX19kYXRhWzBdIC0gb3RoZXIueFxuICAgIGNvbnN0IHkgPSB0aGlzLl9fZGF0YVsxXSAtIG90aGVyLnlcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpXG4gIH1cblxuICAvKipcbiAgICogTm9ybWFsaXplcyB0aGUgVmVjMiBhbmQgcmV0dXJucyBpdCBhcyBhIG5ldyBWZWMyLlxuICAgKiBNdWx0aXBsaWVzIGNvb3JkaW5hdGVzIHZhbHVlIGJ5IHRoZSBpbnZlcnNlIG9mIHRoZSB2ZWN0b3IgbGVuZ3RoLlxuICAgKlxuICAgKiBAcmV0dXJuIHtWZWMyfSAtIFJldHVybnMgdGhlIFZlYzIgbm9ybWFsaXplZC5cbiAgICovXG4gIG5vcm1hbGl6ZSgpIHtcbiAgICBjb25zdCB4ID0gdGhpcy5fX2RhdGFbMF1cbiAgICBjb25zdCB5ID0gdGhpcy5fX2RhdGFbMV1cbiAgICBsZXQgbGVuID0geCAqIHggKyB5ICogeVxuICAgIGlmIChsZW4gPCBOdW1iZXIuRVBTSUxPTikge1xuICAgICAgcmV0dXJuIG5ldyBWZWMyKClcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBldmFsdWF0ZSB1c2Ugb2YgZ2xtX2ludnNxcnQgaGVyZT9cbiAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbilcbiAgICByZXR1cm4gbmV3IFZlYzIoeCAqIGxlbiwgeSAqIGxlbilcbiAgfVxuXG4gIC8qKlxuICAgKiBOb3JtYWxpemVzIHRoaXMgVmVjMiBtdWx0aXBseWluZyBjb29yZGluYXRlIHZhbHVlcyBieSB0aGUgaW52ZXJzZSBvZiB0aGUgdmVjdG9yIGxlbmd0aC5cbiAgICovXG4gIG5vcm1hbGl6ZUluUGxhY2UoKSB7XG4gICAgY29uc3QgeCA9IHRoaXMuX19kYXRhWzBdXG4gICAgY29uc3QgeSA9IHRoaXMuX19kYXRhWzFdXG4gICAgbGV0IGxlbiA9IHggKiB4ICsgeSAqIHlcbiAgICBpZiAobGVuIDwgTnVtYmVyLkVQU0lMT04pIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbilcbiAgICB0aGlzLnNldCh4ICogbGVuLCB5ICogbGVuKVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHRoaXMgVmVjMiBhZ2FpbnN0IGFub3RoZXIgVmVjMi5cbiAgICpcbiAgICogQHBhcmFtIHtWZWMyfSBvdGhlciAtIFRoZSBvdGhlciBWZWMyIHRvIGNvbXBhcmUgd2l0aC5cbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFJldHVybnMgdGhlIGRvdCBwcm9kdWN0LlxuICAgKi9cbiAgZG90KG90aGVyKSB7XG4gICAgcmV0dXJuIHRoaXMueCAqIG90aGVyLnggKyB0aGlzLnkgKiBvdGhlci55XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0aGlzIFZlYzIgYWdhaW5zdCBhbm90aGVyIFZlYzIuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjMn0gb3RoZXIgLSBUaGUgb3RoZXIgVmVjMiB0byBjb21wYXJlIHdpdGguXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSBjcm9zcyBwcm9kdWN0LlxuICAgKi9cbiAgY3Jvc3Mob3RoZXIpIHtcbiAgICAvLyBqdXN0IGNhbGN1bGF0ZSB0aGUgei1jb21wb25lbnRcbiAgICByZXR1cm4gdGhpcy54ICogb3RoZXIueSAtIHRoaXMueSAqIG90aGVyLnhcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBhbmdsZSBiZXR3ZWVuIHRoaXMgVmVjMiBhbmQgb3RoZXIgYXNzdW1pbmcgYm90aCBhcmUgbm9ybWFsaXplZCB2ZWN0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzJ9IG90aGVyIC0gVGhlIG90aGVyIFZlYzIgdG8gY29tcGFyZSB3aXRoLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gUmV0dXJucyB0aGUgYW5nbGUgaW4gcmFkaWFucy5cbiAgICovXG4gIGFuZ2xlVG8ob3RoZXIpIHtcbiAgICBjb25zdCBjb3NpbmUgPSB0aGlzLm5vcm1hbGl6ZSgpLmRvdChvdGhlci5ub3JtYWxpemUoKSlcbiAgICBpZiAoY29zaW5lID4gMS4wKSByZXR1cm4gMC4wXG4gICAgZWxzZSBpZiAoY29zaW5lIDwgLTEuMCkgcmV0dXJuIE1hdGguUElcbiAgICBlbHNlIHJldHVybiBNYXRoLmFjb3MoY29zaW5lKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGFuZ2xlIGJldHdlZW4gdGhpcyBWZWMyIGFuZCBvdGhlci5cbiAgICpcbiAgICogQHBhcmFtIHtWZWMyfSBvdGhlciAtIFRoZSBvdGhlciBWZWMyIHRvIGNvbXBhcmUgd2l0aC5cbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFJldHVybnMgdGhlIGFuZ2xlIGluIHJhZGlhbnMuXG4gICAqL1xuICBzaWduZWRBbmdsZVRvKG90aGVyKSB7XG4gICAgY29uc3QgYW5nbGUgPSB0aGlzLmFuZ2xlVG8ob3RoZXIpXG4gICAgaWYgKHRoaXMuY3Jvc3Mob3RoZXIpIDwgMC4wKSByZXR1cm4gLWFuZ2xlXG4gICAgZWxzZSByZXR1cm4gYW5nbGVcbiAgfVxuXG4gIC8qKlxuICAgKiBSb3RhdGVzIGEgVmVjMiBpbiBhIGNsb2Nrd2lzZSBkaXJlY3Rpb24gYW5kIHJldHVybnMgYSBuZXcgcm90YXRlZCBWZWMyLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gYW5nbGUgLSBUaGUgYW5nbGUgb2Ygcm90YXRpb24uXG4gICAqIEByZXR1cm4ge1ZlYzJ9IC0gUmV0dXJucyB0aGUgcm90YXRlZCB2ZWN0b3IuXG4gICAqL1xuICByb3RhdGUoYW5nbGUpIHtcbiAgICBjb25zdCBjb3NBID0gTWF0aC5jb3MoYW5nbGUpXG4gICAgY29uc3Qgc2luQSA9IE1hdGguc2luKGFuZ2xlKVxuICAgIHJldHVybiBuZXcgVmVjMih0aGlzLnggKiBjb3NBIC0gdGhpcy55ICogc2luQSwgdGhpcy54ICogc2luQSArIHRoaXMueSAqIGNvc0EpXG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHRoaXMgVmVjMiBhbmQgb3RoZXIgVmVjMi5cbiAgICpcbiAgICogQHBhcmFtIHtWZWMyfSBvdGhlciAtIFRoZSBvdGhlciBWZWMyIHRvIGludGVycG9sYXRlIGJldHdlZW4uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0IC0gSW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0cy5cbiAgICogQHJldHVybiB7VmVjMn0gLSBSZXR1cm5zIGEgbmV3IFZlYzIuXG4gICAqL1xuICBsZXJwKG90aGVyLCB0KSB7XG4gICAgY29uc3QgYXggPSB0aGlzLnhcbiAgICBjb25zdCBheSA9IHRoaXMueVxuICAgIHJldHVybiBuZXcgVmVjMihheCArIHQgKiAob3RoZXIueCAtIGF4KSwgYXkgKyB0ICogKG90aGVyLnkgLSBheSkpXG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgcmFuZG9tIHZlY3RvciB3aXRoIHRoZSBnaXZlbiBzY2FsZS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxlIC0gTGVuZ3RoIG9mIHRoZSByZXN1bHRpbmcgdmVjdG9yLiBJZiBvbWl0dGVkLCBhIHVuaXQgdmVjdG9yIHdpbGwgYmUgcmV0dXJuZWQuXG4gICAqIEByZXR1cm4ge1ZlYzJ9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIHNldFJhbmRvbURpcihzY2FsZSA9IDEuMCkge1xuICAgIGNvbnN0IHIgPSBNYXRoLnJhbmRvbSgpICogMi4wICogTWF0aC5QSVxuICAgIHRoaXMuX19kYXRhWzBdID0gTWF0aC5jb3MocikgKiB6U2NhbGVcbiAgICB0aGlzLl9fZGF0YVsxXSA9IE1hdGguc2luKHIpICogelNjYWxlXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBSYW5kb21pemVzIHRoZSBzY2FsZSBvZiB0aGlzIFZlYzIgY29vcmRpbmF0ZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsZSAtIFRoZSBzY2FsZSB2YWx1ZS5cbiAgICogQHJldHVybiB7VmVjMn0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgc2V0UmFuZG9tKHNjYWxlID0gMS4wKSB7XG4gICAgdGhpcy5fX2RhdGFbMF0gPSBNYXRoLnJhbmRvbSgpICogc2NhbGVcbiAgICB0aGlzLl9fZGF0YVsxXSA9IE1hdGgucmFuZG9tKCkgKiBzY2FsZVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQ2xvbmVzIHRoaXMgVmVjMiBhbmQgcmV0dXJucyBhIG5ldyBWZWMyLlxuICAgKlxuICAgKiBAcmV0dXJuIHtWZWMyfSAtIFJldHVybnMgYSBuZXcgVmVjMi5cbiAgICovXG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgVmVjMih0aGlzLl9fZGF0YVswXSwgdGhpcy5fX2RhdGFbMV0pXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBjdXJyZW50IFZlYzIgZGF0YSBhcyBhcnJheS4gT2Z0ZW4gdXNlZCB0byBwYXNzIHR5cGVzIHRvIHRoZSBHUFUuXG4gICAqXG4gICAqIEByZXR1cm4ge2FycmF5fSAtIFJldHVybnMgYXMgYW4gYXJyYXkuXG4gICAqL1xuICBhc0FycmF5KCkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YVxuICB9XG5cbiAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBTdGF0aWMgTWV0aG9kc1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFZlYzIuXG4gICAqIEBzZWUgYG5ldyBWZWMyYFxuICAgKlxuICAgKiBAcGFyYW0gey4uLm9iamVjdH0gLi4uYXJncyAtIFRoZSAuLi5hcmdzIHBhcmFtLlxuICAgKiBAcmV0dXJuIHtWZWMyfSAtIFJldHVybnMgYSBuZXcgVmVjMi5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBjcmVhdGUoLi4uYXJncykge1xuICAgIHJldHVybiBuZXcgVmVjMiguLi5hcmdzKVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgVmVjMiB0byB3cmFwIGV4aXN0aW5nIG1lbW9yeSBpbiBhIGJ1ZmZlci5cbiAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYnVmZmVyIC0gVGhlIGJ1ZmZlciB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCAtIFRoZSBvZmZzZXQgdmFsdWUuXG4gICAqIEByZXR1cm4ge1ZlYzJ9IC0gUmV0dXJucyBhIG5ldyBWZWMyLlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZUZyb21GbG9hdDMyQnVmZmVyKGJ1ZmZlciwgb2Zmc2V0ID0gMCkge1xuICAgIGNvbnNvbGUud2FybignRGVwcmVjYXRlZCwgdXNlICNjcmVhdGVGcm9tQnVmZmVyIGluc3RlYWQnKVxuICAgIHJldHVybiB0aGlzLmNyZWF0ZUZyb21CdWZmZXIoYnVmZmVyLCBvZmZzZXQgKiA0KVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgYSBgVmVjMmAgdXNpbmcgYW4gQXJyYXlCdWZmZXIuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYnVmZmVyIC0gVGhlIGJ1ZmZlciB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGJ5dGVPZmZzZXQgLSBUaGUgb2Zmc2V0IHZhbHVlLlxuICAgKiBAcmV0dXJuIHtWZWMyfSAtIFJldHVybnMgYSBuZXcgVmVjMi5cbiAgICovXG4gIHN0YXRpYyBjcmVhdGVGcm9tQnVmZmVyKGJ1ZmZlciwgYnl0ZU9mZnNldCkge1xuICAgIHJldHVybiBuZXcgVmVjMihuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlciwgYnl0ZU9mZnNldCwgMikpIC8vIDQgYnl0ZXMgcGVyIDMyYml0IGZsb2F0XG4gIH1cblxuICAvKipcbiAgICogVGhlIGNyZWF0ZUZyb21GbG9hdDMyQXJyYXkgbWV0aG9kLlxuICAgKiBAcGFyYW0ge0Zsb2F0MzJBcnJheX0gYXJyYXkgLSBUaGUgYXJyYXkgdmFsdWUuXG4gICAqIEByZXR1cm4ge1ZlYzJ9IC0gUmV0dXJucyBhIG5ldyBWZWMyLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZUZyb21GbG9hdDMyQXJyYXkoYXJyYXkpIHtcbiAgICByZXR1cm4gbmV3IFZlYzIoYXJyYXkpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIEZsb2F0MzIgZWxlbWVudHMgdXNlZCBieSB0aGlzIHR5cGUuIFVzZWQgdG8gY2FsY3VsYXRlIHN0b3JhZ2UgcmVxdWlyZW1lbnRzIGZvciBsYXJnZSBhcnJheXMgb2YgdGhpcyB0eXBlLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBudW1FbGVtZW50cygpIHtcbiAgICByZXR1cm4gMlxuICB9XG5cbiAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFBlcnNpc3RlbmNlXG5cbiAgLyoqXG4gICAqIEVuY29kZXMgVmVjMiBDbGFzcyBhcyBhIEpTT04gb2JqZWN0IGZvciBwZXJzaXN0ZW5jZS5cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fSAtIFRoZSBqc29uIG9iamVjdC5cbiAgICovXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogdGhpcy54LFxuICAgICAgeTogdGhpcy55LFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNvZGVzIGEgSlNPTiBvYmplY3QgdG8gc2V0IHRoZSBzdGF0ZSBvZiB0aGlzIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gaiAtIFRoZSBqc29uIG9iamVjdC5cbiAgICovXG4gIGZyb21KU09OKGopIHtcbiAgICB0aGlzLnggPSBqLnhcbiAgICB0aGlzLnkgPSBqLnlcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkcyB0aGUgc3RhdGUgb2YgdGhlIHZhbHVlIGZyb20gYSBiaW5hcnkgcmVhZGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge0JpblJlYWRlcn0gcmVhZGVyIC0gVGhlIHJlYWRlciB2YWx1ZS5cbiAgICovXG4gIHJlYWRCaW5hcnkocmVhZGVyKSB7XG4gICAgdGhpcy54ID0gcmVhZGVyLmxvYWRGbG9hdDMyKClcbiAgICB0aGlzLnkgPSByZWFkZXIubG9hZEZsb2F0MzIoKVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgaW50ZXJzZWN0aW9uIHBvaW50IG9mIDIgMmQgbGluZXMsIHJldHVybmluZyB0aGUgcGFyYW1ldGVycyB2YWx1ZXMgZm9yIGVhY2ggbGluZS5cbiAgICpcbiAgICogQHBhcmFtIHtWZWMyfSBwMCAtIFRoZSBwb2ludCBvZiB0aGUgZmlyc3QgbGluZVxuICAgKiBAcGFyYW0ge1ZlYzJ9IGQwIC0gVGhlIGRpcmVjdGlvbiBvZiB0aGUgZmlyc3QgbGluZVxuICAgKiBAcGFyYW0ge1ZlYzJ9IHAxIC0gVGhlIHBvaW50IG9mIHRoZSBzZWNvbmQgbGluZVxuICAgKiBAcGFyYW0ge1ZlYzJ9IGQxIC0gVGhlIGRpcmVjdGlvbiBvZiB0aGUgc2Vjb25kIGxpbmVcbiAgICogQHJldHVybiB7YXJyYXl9IC0gUmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIDIgcGFyYW1ldGVyIHZhbHVlcyBmb3IgdGhlIDIgbGluZXMuXG4gICAqL1xuICBzdGF0aWMgaW50ZXJzZWN0aW9uT2ZMaW5lcyhwMSwgcDIsIHAzLCBwNCkge1xuICAgIC8vIGh0dHBzOi8vZGlyYXNrLmNvbS9wb3N0cy9KYXZhU2NyaXB0LWhvdy10by1jYWxjdWxhdGUtaW50ZXJzZWN0aW9uLXBvaW50LW9mLXR3by1saW5lcy1mb3ItZ2l2ZW4tNC1wb2ludHMtVmp2bkFqXG4gICAgLy8gZG93biBwYXJ0IG9mIGludGVyc2VjdGlvbiBwb2ludCBmb3JtdWxhXG4gICAgY29uc3QgZDEgPSAocDEueCAtIHAyLngpICogKHAzLnkgLSBwNC55KSAvLyAoeDEgLSB4MikgKiAoeTMgLSB5NClcbiAgICBjb25zdCBkMiA9IChwMS55IC0gcDIueSkgKiAocDMueCAtIHA0LngpIC8vICh5MSAtIHkyKSAqICh4MyAtIHg0KVxuICAgIGNvbnN0IGQgPSBkMSAtIGQyXG5cbiAgICBpZiAoZCA9PSAwKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIC8vIHVwcGVyIHBhcnQgb2YgaW50ZXJzZWN0aW9uIHBvaW50IGZvcm11bGFcbiAgICBjb25zdCB1MSA9IHAxLnggKiBwMi55IC0gcDEueSAqIHAyLnggLy8gKHgxICogeTIgLSB5MSAqIHgyKVxuICAgIGNvbnN0IHU0ID0gcDMueCAqIHA0LnkgLSBwMy55ICogcDQueCAvLyAoeDMgKiB5NCAtIHkzICogeDQpXG5cbiAgICBjb25zdCB1MnggPSBwMy54IC0gcDQueCAvLyAoeDMgLSB4NClcbiAgICBjb25zdCB1M3ggPSBwMS54IC0gcDIueCAvLyAoeDEgLSB4MilcbiAgICBjb25zdCB1MnkgPSBwMy55IC0gcDQueSAvLyAoeTMgLSB5NClcbiAgICBjb25zdCB1M3kgPSBwMS55IC0gcDIueSAvLyAoeTEgLSB5MilcblxuICAgIC8vIGludGVyc2VjdGlvbiBwb2ludCBmb3JtdWxhXG5cbiAgICBjb25zdCBweCA9ICh1MSAqIHUyeCAtIHUzeCAqIHU0KSAvIGRcbiAgICBjb25zdCBweSA9ICh1MSAqIHUyeSAtIHUzeSAqIHU0KSAvIGRcblxuICAgIHJldHVybiBuZXcgVmVjMihweCwgcHkpXG4gIH1cbn1cblxuUmVnaXN0cnkucmVnaXN0ZXIoJ1ZlYzInLCBWZWMyKVxuXG5leHBvcnQgeyBWZWMyIH1cbiIsImltcG9ydCB7IEF0dHJWYWx1ZSB9IGZyb20gJy4vQXR0clZhbHVlLmpzJ1xuaW1wb3J0IHsgUmVnaXN0cnkgfSBmcm9tICcuLi9SZWdpc3RyeSdcbmltcG9ydCB7IFZlYzIgfSBmcm9tICcuL1ZlYzIuanMnXG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHRocmVlIGRpbWVuc2lvbmFsIGNvb3JkaW5hdGUsIHN1Y2ggYXMgM0Qgc2NlbmUgdmFsdWVzLCBvciBtZXNoIHZlcnRleCBwb3NpdGlvbnMuXG4gKlxuICogTWF0aCB0eXBlcyBpbnRlcm5hbGx5IHN0b3JlIHZhbHVlcyBpbiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRmxvYXQzMkFycmF5fEZsb2F0MzJBcnJheX0gYW5kXG4gKiBleHBvc2UgZ2V0dGVycyBhbmQgc2V0dGVycyBmb3IgdGhlIGNvbXBvbmVudCB2YWx1ZXMuXG4gKlxuICogQGV4dGVuZHMgQXR0clZhbHVlXG4gKi9cbmNsYXNzIFZlYzMgZXh0ZW5kcyBBdHRyVmFsdWUge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIFZlYzMuXG4gICAqXG4gICAqIFRoZSB0eXBlIG9mIHZhbHVlcyBvZiB0aGUgYCh4LCB5LCB6KWAgY29vcmRpbmF0ZXMgY2FuIGJlIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9GbG9hdDMyQXJyYXl8RmxvYXQzMkFycmF5fSxcbiAgICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1VpbnQzMkFycmF5fFVpbnQzMkFycmF5fSxcbiAgICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0ludDMyQXJyYXl8SW50MzJBcnJheX0gYW5kXG4gICAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lcy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jaWEvT2JqZXRvc19nbG9iYWxlcy9BcnJheUJ1ZmZlcnxBcnJheUJ1ZmZlcn0uXG4gICAqIDxicj5cbiAgICogWW91IGNhbiBhbHNvIHBhc3Mgb25lIEpTT04gb2JqZWN0IHBhcmFtZXRlci5cbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ8RmxvYXQzMkFycmF5fGpzb259IHggLSBUaGUgeCB2YWx1ZS4gRGVmYXVsdCBpcyAwLlxuICAgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSB5IHZhbHVlLiBEZWZhdWx0IGlzIDAuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB6IC0gVGhlIHogdmFsdWUuIERlZmF1bHQgaXMgMC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0gMCwgeiA9IDApIHtcbiAgICBzdXBlcigpXG4gICAgaWYgKHggaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkgfHwgeCBpbnN0YW5jZW9mIFVpbnQzMkFycmF5KSB7XG4gICAgICB0aGlzLl9fZGF0YSA9IHhcbiAgICB9IGVsc2UgaWYgKHggaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgY29uc29sZS53YXJuKGBkZXByZWNhdGVkLCBwbGVhc2UgdXNlIG5ldyBWZWMzKG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCAzKSlgKVxuICAgICAgY29uc3QgYnVmZmVyID0geFxuICAgICAgY29uc3QgYnl0ZU9mZnNldCA9IHlcbiAgICAgIHRoaXMuX19kYXRhID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIDMpXG4gICAgfSBlbHNlIGlmICh4ICE9IG51bGwgJiYgdHlwZW9mIHggPT0gJ29iamVjdCcpIHtcbiAgICAgIHRoaXMuX19kYXRhID0gbmV3IEZsb2F0MzJBcnJheSgzKVxuICAgICAgdGhpcy5mcm9tSlNPTih4KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9fZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoMylcbiAgICAgIHRoaXMuX19kYXRhWzBdID0geFxuICAgICAgdGhpcy5fX2RhdGFbMV0gPSB5XG4gICAgICB0aGlzLl9fZGF0YVsyXSA9IHpcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0dGVyIGZvciBgeGAgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gUmV0dXJucyB0aGUgeCBjb21wb25lbnQuXG4gICAqL1xuICBnZXQgeCgpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGFbMF1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0ZXIgZm9yIGB4YCBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBUaGUgdmFsIHBhcmFtLlxuICAgKi9cbiAgc2V0IHgodmFsKSB7XG4gICAgdGhpcy5fX2RhdGFbMF0gPSB2YWxcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIGB5YCBjb21wb25lbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSB5IGNvbXBvbmVudC5cbiAgICovXG4gIGdldCB5KCkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YVsxXVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmb3IgYHlgIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIFRoZSB2YWwgcGFyYW0uXG4gICAqL1xuICBzZXQgeSh2YWwpIHtcbiAgICB0aGlzLl9fZGF0YVsxXSA9IHZhbFxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3IgYHpgIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFJldHVybnMgdGhlIHogY29tcG9uZW50LlxuICAgKi9cbiAgZ2V0IHooKSB7XG4gICAgcmV0dXJuIHRoaXMuX19kYXRhWzJdXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciBgemAgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gVGhlIHZhbCBwYXJhbS5cbiAgICovXG4gIHNldCB6KHZhbCkge1xuICAgIHRoaXMuX19kYXRhWzJdID0gdmFsXG4gIH1cblxuICAvKipcbiAgICogR2V0dGVyIGZvciBgeHlgIHN3aXp6ZWwuXG4gICAqXG4gICAqIEByZXR1cm4ge1ZlYzJ9IC0gUmV0dXJucyB0aGUgeHkgY29tcG9uZW50cyBhcyBhIFZlYzIuXG4gICAqL1xuICBnZXQgeHkoKSB7XG4gICAgcmV0dXJuIG5ldyBWZWMyKHRoaXMuX19kYXRhWzBdLCB0aGlzLl9fZGF0YVsxXSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIGB5emAgc3dpenplbC5cbiAgICpcbiAgICogQHJldHVybiB7VmVjMn0gLSBSZXR1cm5zIHRoZSB5eiBjb21wb25lbnRzIGFzIGEgVmVjMi5cbiAgICovXG4gIGdldCB5eigpIHtcbiAgICByZXR1cm4gbmV3IFZlYzIodGhpcy5fX2RhdGFbMV0sIHRoaXMuX19kYXRhWzJdKVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmcm9tIHNjYWxhciBjb21wb25lbnRzLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB4IGNvbXBvbmVudC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgeSBjb21wb25lbnQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB6IC0gVGhlIHkgY29tcG9uZW50LlxuICAgKi9cbiAgc2V0KHgsIHksIHopIHtcbiAgICB0aGlzLnggPSB4XG4gICAgdGhpcy55ID0geSAhPT0gdW5kZWZpbmVkID8geSA6IHhcbiAgICB0aGlzLnogPSB6ICE9PSB1bmRlZmluZWQgPyB6IDogeFxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHN0YXRlIG9mIGEgVmVjMyBPYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7RmxvYXQzMkFycmF5fSBmbG9hdDMyQXJyYXkgLSBUaGUgZmxvYXQzMkFycmF5IHZhbHVlLlxuICAgKi9cbiAgc2V0RGF0YUFycmF5KGZsb2F0MzJBcnJheSkge1xuICAgIHRoaXMuX19kYXRhID0gZmxvYXQzMkFycmF5XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgc3RhdGUgb2YgYSBWZWMzIE9iamVjdCBmcm9tIGFub3RoZXIgVmVjMy5cbiAgICpcbiAgICogQHBhcmFtIHtWZWMzfSBvdGhlciAtIFRoZSBvdGhlciBWZWMzIHRvIHNldCBmcm9tLlxuICAgKi9cbiAgc2V0RnJvbU90aGVyKG90aGVyKSB7XG4gICAgdGhpcy54ID0gb3RoZXIueFxuICAgIHRoaXMueSA9IG90aGVyLnlcbiAgICB0aGlzLnogPSBvdGhlci56XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBjb29yZGluYXRlcyBvZiB0aGlzIFZlYzMgYXJlIDAgMCAwLlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSAtIFJldHVybnMgYHRydWVgIGlmIHRoZSBjb29yZGluYXRlcyBhcmUoMCwgMCwgMCksIG90aGVyd2lzZSwgYGZhbHNlYC5cbiAgICovXG4gIGlzTnVsbCgpIHtcbiAgICByZXR1cm4gTWF0aC5hYnModGhpcy54KSA8IE51bWJlci5FUFNJTE9OICYmIE1hdGguYWJzKHRoaXMueSkgPCBOdW1iZXIuRVBTSUxPTiAmJiBNYXRoLmFicyh0aGlzLnopIDwgTnVtYmVyLkVQU0lMT05cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIGNvb3JkaW5hdGVzIG9mIHRoaXMgVmVjMyBhcmUgMSAxIDEuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGNvb3JkaW5hdGVzIGFyZSgxLCAxLCAxKSwgb3RoZXJ3aXNlLCBgZmFsc2VgLlxuICAgKi9cbiAgaXMxMTEoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIE1hdGguYWJzKDEuMCAtIHRoaXMueCkgPCBOdW1iZXIuRVBTSUxPTiAmJlxuICAgICAgTWF0aC5hYnMoMS4wIC0gdGhpcy55KSA8IE51bWJlci5FUFNJTE9OICYmXG4gICAgICBNYXRoLmFicygxLjAgLSB0aGlzLnopIDwgTnVtYmVyLkVQU0lMT05cbiAgICApXG4gIH1cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQ2hlY2tzIGlmIHRoaXMgVmVjMyBjb250YWlucyB0aGUgc2FtZSB2YWx1ZXMgYXMgdGhlIG90aGVyIFZlYzMuXG4gICAqIERlcHJlY2F0ZWQuIFVzZSAjaXNFcXVhbCBpbnN0ZWFkLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzN9IG90aGVyIC0gVGhlIG90aGVyIFZlYzMgdG8gY29tcGFyZSB3aXRoLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSAtIFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIHRoZSBzYW1lLCBvdGhlcndpc2UsIGBmYWxzZWAuXG4gICAqL1xuICBlcXVhbChvdGhlcikge1xuICAgIGNvbnNvbGUud2FybignRGVwcmVjYXRlZC4gVXNlICNpc0VxdWFsIGluc3RlYWQuJylcbiAgICByZXR1cm4gdGhpcy5pc0VxdWFsKG90aGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGlzIFZlYzMgY29udGFpbnMgdGhlIHNhbWUgdmFsdWVzIGFzIHRoZSBvdGhlciBWZWMzLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzN9IG90aGVyIC0gVGhlIG90aGVyIFZlYzMgdG8gY29tcGFyZSB3aXRoLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSAtIFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIHRoZSBzYW1lLCBvdGhlcndpc2UsIGBmYWxzZWAuXG4gICAqL1xuICBpc0VxdWFsKG90aGVyKSB7XG4gICAgcmV0dXJuIHRoaXMueCA9PSBvdGhlci54ICYmIHRoaXMueSA9PSBvdGhlci55ICYmIHRoaXMueiA9PSBvdGhlci56XG4gIH1cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQ2hlY2tzIGlmIHRoaXMgVmVjMiBpcyBkaWZmZXJlbnQgZnJvbSBhbm90aGVyIFZlYzIuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjM30gb3RoZXIgLSBUaGUgb3RoZXIgVmVjMyB0byBjb21wYXJlIHdpdGguXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIFZlYzNzIGFyZSBkaWZmZXJlbnQsIG90aGVyd2lzZSwgYGZhbHNlYC5cbiAgICovXG4gIG5vdEVxdWFscyhvdGhlcikge1xuICAgIGNvbnNvbGUud2FybignRGVwcmVjYXRlZC4gVXNlICNub3RFcXVhbCBpbnN0ZWFkLicpXG4gICAgcmV0dXJuIHRoaXMubm90RXF1YWwob3RoZXIpXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoaXMgVmVjMiBpcyBkaWZmZXJlbnQgZnJvbSBhbm90aGVyIFZlYzIuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjM30gb3RoZXIgLSBUaGUgb3RoZXIgVmVjMyB0byBjb21wYXJlIHdpdGguXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIFZlYzNzIGFyZSBkaWZmZXJlbnQsIG90aGVyd2lzZSwgYGZhbHNlYC5cbiAgICovXG4gIG5vdEVxdWFsKG90aGVyKSB7XG4gICAgcmV0dXJuIHRoaXMueCAhPSBvdGhlci54ICYmIHRoaXMueSAhPSBvdGhlci55ICYmIHRoaXMueiAhPSBvdGhlci56XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgVmVjMiBpcyBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGFzIG90aGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzN9IG90aGVyIC0gVGhlIG90aGVyIFZlYzMgdG8gY29tcGFyZSB3aXRoLlxuICAgKiBAcGFyYW0ge251bWJlcn0gcHJlY2lzaW9uIC0gVGhlIHByZWNpc2lvbiB0byB3aGljaCB0aGUgdmFsdWVzIG11c3QgbWF0Y2guXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gUmV0dXJucyB0cnVlIG9yIGZhbHNlLlxuICAgKi9cbiAgYXBwcm94RXF1YWwob3RoZXIsIHByZWNpc2lvbiA9IE51bWJlci5FUFNJTE9OKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIE1hdGguYWJzKHRoaXMueCAtIG90aGVyLngpIDwgcHJlY2lzaW9uICYmXG4gICAgICBNYXRoLmFicyh0aGlzLnkgLSBvdGhlci55KSA8IHByZWNpc2lvbiAmJlxuICAgICAgTWF0aC5hYnModGhpcy56IC0gb3RoZXIueikgPCBwcmVjaXNpb25cbiAgICApXG4gIH1cblxuICAvKipcbiAgICogQWRkcyBvdGhlciB0byB0aGlzIFZlYzMgYW5kIHJldHVybiB0aGUgcmVzdWx0IGFzIGEgbmV3IFZlYzMuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjM30gb3RoZXIgLSBUaGUgb3RoZXIgVmVjMyB0byBhZGQuXG4gICAqIEByZXR1cm4ge1ZlYzN9IC0gUmV0dXJucyBhIG5ldyBWZWMzLlxuICAgKi9cbiAgYWRkKG90aGVyKSB7XG4gICAgcmV0dXJuIG5ldyBWZWMzKHRoaXMueCArIG90aGVyLngsIHRoaXMueSArIG90aGVyLnksIHRoaXMueiArIG90aGVyLnopXG4gIH1cblxuICAvKipcbiAgICogQWRkcyBvdGhlciB0byB0aGlzIFZlYzMuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjM30gb3RoZXIgLSBUaGUgb3RoZXIgVmVjMyB0byBhZGQuXG4gICAqL1xuICBhZGRJblBsYWNlKG90aGVyKSB7XG4gICAgdGhpcy54ICs9IG90aGVyLnhcbiAgICB0aGlzLnkgKz0gb3RoZXIueVxuICAgIHRoaXMueiArPSBvdGhlci56XG4gIH1cblxuICAvKipcbiAgICogU3VidHJhY3RzIG90aGVyIGZyb20gdGhpcyBWZWMzIGFuZCByZXR1cm5zIHRoZSByZXN1bHQgYXMgYSBuZXcgVmVjMy5cbiAgICpcbiAgICogQHBhcmFtIHtWZWMzfSBvdGhlciAtIFRoZSBvdGhlciBWZWMzIHRvIHN1YnRyYWN0LlxuICAgKiBAcmV0dXJuIHtWZWMzfSAtIFJldHVybnMgYSBuZXcgVmVjMy5cbiAgICovXG4gIHN1YnRyYWN0KG90aGVyKSB7XG4gICAgcmV0dXJuIG5ldyBWZWMzKHRoaXMueCAtIG90aGVyLngsIHRoaXMueSAtIG90aGVyLnksIHRoaXMueiAtIG90aGVyLnopXG4gIH1cblxuICAvKipcbiAgICogU3VidHJhY3RzIG90aGVyIGZyb20gdGhpcyBWZWMzLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzN9IG90aGVyIC0gVGhlIG90aGVyIFZlYzMgdG8gc3VidHJhY3QuXG4gICAqL1xuICBzdWJ0cmFjdEluUGxhY2Uob3RoZXIpIHtcbiAgICB0aGlzLnggLT0gb3RoZXIueFxuICAgIHRoaXMueSAtPSBvdGhlci55XG4gICAgdGhpcy56IC09IG90aGVyLnpcbiAgfVxuXG4gIC8qKlxuICAgKiBNdWx0aXBsaWVzIHR3byBWZWMzcyBhbmQgcmV0dXJucyB0aGUgcmVzdWx0IGFzIGEgbmV3IFZlYzMuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjM30gb3RoZXIgLSBUaGUgb3RoZXIgVmVjMyB0byBtdWx0aXBseSB3aXRoLlxuICAgKiBAcmV0dXJuIHtWZWMzfSAtIFJldHVybnMgYSBuZXcgVmVjMy5cbiAgICovXG4gIG11bHRpcGx5KG90aGVyKSB7XG4gICAgcmV0dXJuIG5ldyBWZWMzKHRoaXMueCAqIG90aGVyLngsIHRoaXMueSAqIG90aGVyLnksIHRoaXMueiAqIG90aGVyLnopXG4gIH1cblxuICAvKipcbiAgICogTXVsdGlwbGllcyB0d28gVmVjM3MuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjM30gb3RoZXIgLSBUaGUgb3RoZXIgVmVjMyB0byBtdWx0aXBseSB3aXRoLlxuICAgKi9cbiAgbXVsdGlwbHlJblBsYWNlKG90aGVyKSB7XG4gICAgdGhpcy54ICo9IG90aGVyLnhcbiAgICB0aGlzLnkgKj0gb3RoZXIueVxuICAgIHRoaXMueiAqPSBvdGhlci56XG4gIH1cblxuICAvKipcbiAgICogRGl2aWRlcyB0d28gVmVjM3MgYW5kIHJldHVybnMgdGhlIHJlc3VsdCBhcyBhIG5ldyBWZWMzLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzN9IHZlYzMgLSBUaGUgb3RoZXIgVmVjMyB0byBkaXZpZGUgYnkuXG4gICAqIEByZXR1cm4ge1ZlYzN9IC0gUmV0dXJucyBhIG5ldyBWZWMzLlxuICAgKi9cbiAgZGl2aWRlKHZlYzMpIHtcbiAgICByZXR1cm4gbmV3IFZlYzModGhpcy54IC8gdmVjMy54LCB0aGlzLnkgLyB2ZWMzLnksIHRoaXMueiAvIHZlYzMueilcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXZpZGVzIHR3byBWZWMzcy5cbiAgICpcbiAgICogQHBhcmFtIHtWZWMzfSB2ZWMzIC0gVGhlIG90aGVyIFZlYzMgdG8gZGl2aWRlIGJ5LlxuICAgKi9cbiAgZGl2aWRlSW5QbGFjZSh2ZWMzKSB7XG4gICAgdGhpcy54IC89IHZlYzMueFxuICAgIHRoaXMueSAvPSB2ZWMzLnlcbiAgICB0aGlzLnogLz0gdmVjMy56XG4gIH1cblxuICAvKipcbiAgICogU2NhbGVzIHRoaXMgVmVjMyBieSBzY2FsYXIgYW5kIHJldHVybnMgdGhlIHJlc3VsdCBhcyBhIG5ldyBWZWMzLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGFyIC0gVGhlIHNjYWxhciB2YWx1ZS5cbiAgICogQHJldHVybiB7VmVjM30gLSBSZXR1cm5zIGEgbmV3IFZlYzMuXG4gICAqL1xuICBzY2FsZShzY2FsYXIpIHtcbiAgICByZXR1cm4gbmV3IFZlYzModGhpcy54ICogc2NhbGFyLCB0aGlzLnkgKiBzY2FsYXIsIHRoaXMueiAqIHNjYWxhcilcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsZXMgdGhpcyBWZWMzIGJ5IHNjYWxhci5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxhciAtIFRoZSBzY2FsYXIgdmFsdWUuXG4gICAqL1xuICBzY2FsZUluUGxhY2Uoc2NhbGFyKSB7XG4gICAgdGhpcy54ICo9IHNjYWxhclxuICAgIHRoaXMueSAqPSBzY2FsYXJcbiAgICB0aGlzLnogKj0gc2NhbGFyXG4gIH1cblxuICAvKipcbiAgICogTmVnYXRlcyB0aGlzIFZlYzMgKHggPSAteCwgeSA9IC15IGFuZCB6ID0gLXopLCBidXQgcmV0dXJucyB0aGUgcmVzdWx0IGFzIGEgbmV3IFZlYzMuXG4gICAqXG4gICAqIEByZXR1cm4ge1ZlYzN9IC0gUmV0dXJucyBhIG5ldyBWZWMzLlxuICAgKi9cbiAgbmVnYXRlKCkge1xuICAgIHJldHVybiBuZXcgVmVjMygtdGhpcy54LCAtdGhpcy55LCAtdGhpcy56KVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGludmVyc2Ugb2YgdGhpcyBWZWMzLCBidXQgcmV0dXJucy4gdGhlIHJlc3VsdCBhcyBhIG5ldyBWZWMzXG4gICAqXG4gICAqIEByZXR1cm4ge1ZlYzN9IC0gUmV0dXJucyBhIG5ldyBWZWMzLlxuICAgKi9cbiAgaW52ZXJzZSgpIHtcbiAgICByZXR1cm4gbmV3IFZlYzMoMS4wIC8gdGhpcy54LCAxLjAgLyB0aGlzLnksIDEuMCAvIHRoaXMueilcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiB0aGlzIFZlYzMuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSBsZW5ndGguXG4gICAqL1xuICBsZW5ndGhTcXVhcmVkKCkge1xuICAgIGNvbnN0IHggPSB0aGlzLl9fZGF0YVswXVxuICAgIGNvbnN0IHkgPSB0aGlzLl9fZGF0YVsxXVxuICAgIGNvbnN0IHogPSB0aGlzLl9fZGF0YVsyXVxuICAgIHJldHVybiB4ICogeCArIHkgKiB5ICsgeiAqIHpcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgdGhpcyBWZWMzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gUmV0dXJucyB0aGUgbGVuZ3RoLlxuICAgKi9cbiAgbGVuZ3RoKCkge1xuICAgIHJldHVybiBNYXRoLnNxcnQodGhpcy5sZW5ndGhTcXVhcmVkKCkpXG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgZGlzdGFuY2UgdG8gYW5vdGhlciBWZWMzLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzN9IG90aGVyIC0gVGhlIG90aGVyIFZlYzMgdG8gY2FsY3VsYXRlIHRoZSBkaXN0YW5jZSB0by5cbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFJldHVybnMgdGhlIGRpc3RhbmNlIGJldHdlZW4gdmVjdG9ycy5cbiAgICovXG4gIGRpc3RhbmNlVG8ob3RoZXIpIHtcbiAgICBjb25zdCB4ID0gdGhpcy5fX2RhdGFbMF0gLSBvdGhlci54XG4gICAgY29uc3QgeSA9IHRoaXMuX19kYXRhWzFdIC0gb3RoZXIueVxuICAgIGNvbnN0IHogPSB0aGlzLl9fZGF0YVsyXSAtIG90aGVyLnpcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeilcbiAgfVxuXG4gIC8qKlxuICAgKiBOb3JtYWxpemVzIHRoZSBWZWMzIGFuZCByZXR1cm5zIGl0IGFzIGEgbmV3IFZlYzMuXG4gICAqIE11bHRpcGxpZXMgY29vcmRpbmF0ZXMgdmFsdWUgYnkgdGhlIGludmVyc2Ugb2YgdGhlIHZlY3RvciBsZW5ndGguXG4gICAqXG4gICAqIEByZXR1cm4ge1ZlYzN9IC0gUmV0dXJucyB0aGUgVmVjMyBub3JtYWxpemVkLlxuICAgKi9cbiAgbm9ybWFsaXplKCkge1xuICAgIGxldCBsZW4gPSB0aGlzLl9fZGF0YVswXSAqIHRoaXMuX19kYXRhWzBdICsgdGhpcy5fX2RhdGFbMV0gKiB0aGlzLl9fZGF0YVsxXSArIHRoaXMuX19kYXRhWzJdICogdGhpcy5fX2RhdGFbMl1cbiAgICBpZiAobGVuIDwgTnVtYmVyLkVQU0lMT04pIHtcbiAgICAgIHJldHVybiBuZXcgVmVjMygpXG4gICAgfVxuXG4gICAgLy8gVE9ETzogZXZhbHVhdGUgdXNlIG9mIGdsbV9pbnZzcXJ0IGhlcmU/XG4gICAgbGVuID0gMS4wIC8gTWF0aC5zcXJ0KGxlbilcbiAgICByZXR1cm4gbmV3IFZlYzModGhpcy5fX2RhdGFbMF0gKiBsZW4sIHRoaXMuX19kYXRhWzFdICogbGVuLCB0aGlzLl9fZGF0YVsyXSAqIGxlbilcbiAgfVxuXG4gIC8qKlxuICAgKiBOb3JtYWxpemVzIHRoaXMgVmVjMyBtdWx0aXBseWluZyBjb29yZGluYXRlIHZhbHVlcyBieSB0aGUgaW52ZXJzZSBvZiB0aGUgdmVjdG9yIGxlbmd0aC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBub3JtYWxpemVJblBsYWNlKCkge1xuICAgIGxldCBsZW4gPSB0aGlzLl9fZGF0YVswXSAqIHRoaXMuX19kYXRhWzBdICsgdGhpcy5fX2RhdGFbMV0gKiB0aGlzLl9fZGF0YVsxXSArIHRoaXMuX19kYXRhWzJdICogdGhpcy5fX2RhdGFbMl1cbiAgICBpZiAobGVuIDwgTnVtYmVyLkVQU0lMT04pIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBsZW4gPSBNYXRoLnNxcnQobGVuKVxuICAgIGNvbnN0IHRtcCA9IDEuMCAvIGxlblxuICAgIHRoaXMuX19kYXRhWzBdICo9IHRtcFxuICAgIHRoaXMuX19kYXRhWzFdICo9IHRtcFxuICAgIHRoaXMuX19kYXRhWzJdICo9IHRtcFxuXG4gICAgcmV0dXJuIGxlblxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgVmVjMyB3aXRoIHRoZSBuZXcgY29vcmRpbmF0ZXMoY2FsY3VsYXRlZCB3aXRoIHRoaXMgVmVjMyBjb29yZGluYXRlcyBhbmQgdGhlIHNwZWNpZmllZCBsZW5ndGgpLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIC0gVGhlIGxlbmd0aCB2YWx1ZS5cbiAgICogQHJldHVybiB7VmVjM30gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgcmVzaXplKGxlbmd0aCkge1xuICAgIGNvbnN0IGN1cnJMZW4gPSB0aGlzLl9fZGF0YVswXSAqIHRoaXMuX19kYXRhWzBdICsgdGhpcy5fX2RhdGFbMV0gKiB0aGlzLl9fZGF0YVsxXSArIHRoaXMuX19kYXRhWzJdICogdGhpcy5fX2RhdGFbMl1cbiAgICBpZiAoY3VyckxlbiA8IE51bWJlci5FUFNJTE9OKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3Qgc2NsID0gbGVuZ3RoIC8gTWF0aC5zcXJ0KGN1cnJMZW4pXG4gICAgcmV0dXJuIG5ldyBWZWMzKHRoaXMuX19kYXRhWzBdICogc2NsLCB0aGlzLl9fZGF0YVsxXSAqIHNjbCwgdGhpcy5fX2RhdGFbMl0gKiBzY2wpXG4gIH1cblxuICAvKipcbiAgICogTW9kaWZpZXMgY3VycmVudCBjb29yZGluYXRlcyB1c2luZyB0aGUgc3BlY2lmaWVkIGxlbmd0aC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCAtIFRoZSBsZW5ndGggdmFsdWUuXG4gICAqL1xuICByZXNpemVJblBsYWNlKGxlbmd0aCkge1xuICAgIGNvbnN0IGN1cnJMZW4gPSB0aGlzLl9fZGF0YVswXSAqIHRoaXMuX19kYXRhWzBdICsgdGhpcy5fX2RhdGFbMV0gKiB0aGlzLl9fZGF0YVsxXSArIHRoaXMuX19kYXRhWzJdICogdGhpcy5fX2RhdGFbMl1cbiAgICBpZiAoY3VyckxlbiA8IE51bWJlci5FUFNJTE9OKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3Qgc2NsID0gbGVuZ3RoIC8gTWF0aC5zcXJ0KGN1cnJMZW4pXG4gICAgdGhpcy5fX2RhdGFbMF0gKj0gc2NsXG4gICAgdGhpcy5fX2RhdGFbMV0gKj0gc2NsXG4gICAgdGhpcy5fX2RhdGFbMl0gKj0gc2NsXG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdGhpcyBWZWMzIGFnYWluc3QgYW5vdGhlciBWZWMzLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzN9IG90aGVyIC0gVGhlIG90aGVyIFZlYzMgdG8gY29tcGFyZSB3aXRoLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gUmV0dXJucyB0aGUgZG90IHByb2R1Y3QuXG4gICAqL1xuICBkb3Qob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy54ICogb3RoZXIueCArIHRoaXMueSAqIG90aGVyLnkgKyB0aGlzLnogKiBvdGhlci56XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0d28gVmVjM3MgYW5kIHJldHVybnMgdGhlIHJlc3VsdCBhcyBhIG5ldyBWZWMzLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzN9IG90aGVyIC0gVGhlIG90aGVyIFZlYzMgdG8gY2FsY3VsYXRlIHdpdGguXG4gICAqIEByZXR1cm4ge1ZlYzN9IC0gUmV0dXJucyB0aGUgY3Jvc3MgcHJvZHVjdCBhcyBhIG5ldyBWZWMzLlxuICAgKi9cbiAgY3Jvc3Mob3RoZXIpIHtcbiAgICBjb25zdCBheCA9IHRoaXMueFxuICAgIGNvbnN0IGF5ID0gdGhpcy55XG4gICAgY29uc3QgYXogPSB0aGlzLnpcbiAgICBjb25zdCBieCA9IG90aGVyLnhcbiAgICBjb25zdCBieSA9IG90aGVyLnlcbiAgICBjb25zdCBieiA9IG90aGVyLnpcblxuICAgIHJldHVybiBuZXcgVmVjMyhheSAqIGJ6IC0gYXogKiBieSwgYXogKiBieCAtIGF4ICogYnosIGF4ICogYnkgLSBheSAqIGJ4KVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGFuZ2xlIGJldHdlZW4gdGhpcyBWZWMzIGFuZCBiLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzN9IG90aGVyIC0gVGhlIG90aGVyIFZlYzMgdG8gY29tcGFyZSB3aXRoLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gUmV0dXJucyB0aGUgYW5nbGUgaW4gcmFkaWFucy5cbiAgICovXG4gIGFuZ2xlVG8ob3RoZXIpIHtcbiAgICBjb25zdCBjb3NpbmUgPSB0aGlzLmRvdChvdGhlcilcbiAgICBpZiAoY29zaW5lID4gMS4wKSB7XG4gICAgICByZXR1cm4gMFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gTWF0aC5hY29zKGNvc2luZSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHRoaXMgVmVjMyBhbmQgb3RoZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjM30gb3RoZXIgLSBUaGUgb3RoZXIgVmVjMyB0byBpbnRlcnBvbGF0ZSBiZXR3ZWVuLlxuICAgKiBAcGFyYW0ge251bWJlcn0gdCAtIEludGVycG9sYXRpb24gYW1vdW50IGJldHdlZW4gdGhlIHR3byBpbnB1dHMuXG4gICAqIEByZXR1cm4ge1ZlYzN9IC0gUmV0dXJucyBhIG5ldyBWZWMzLlxuICAgKi9cbiAgbGVycChvdGhlciwgdCkge1xuICAgIGNvbnN0IGF4ID0gdGhpcy54XG4gICAgY29uc3QgYXkgPSB0aGlzLnlcbiAgICBjb25zdCBheiA9IHRoaXMuelxuICAgIHJldHVybiBuZXcgVmVjMyhheCArIHQgKiAob3RoZXIueCAtIGF4KSwgYXkgKyB0ICogKG90aGVyLnkgLSBheSksIGF6ICsgdCAqIChvdGhlci56IC0gYXopKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgVmVjMyB3aG9zZSBjb21wb25lbnQgdmFsdWVzIGFyZSB0aGUgYWJzIG9mIHRoaXMgVmVjM3MgY29tcG9uZW50IHZhbHVlcy5cbiAgICpcbiAgICogQHJldHVybiB7VmVjM30gLSBSZXR1cm5zIGEgbmV3IFZlYzMuXG4gICAqL1xuICBhYnMoKSB7XG4gICAgcmV0dXJuIG5ldyBWZWMzKE1hdGguYWJzKHRoaXMueCksIE1hdGguYWJzKHRoaXMueSksIE1hdGguYWJzKHRoaXMueikpXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgdmVjdG9yIGEgcmFuZG9tIHZlY3RvciBvbiB0aGUgc3VyZmFjZSBvZiBhIHNwaGVyZSB3aXRoIHRoZSByYWRpdXMgb2YgdGhlIGdpdmVuIHNjYWxlIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGUgLSBUaGUgcmFkaXVzIG9mIHRoZSBzdXJmYWNlIHNwaGVyZS5cbiAgICogQHJldHVybiB7VmVjM30gLSBUaGUgcmFuZG9tIFZlYzMuXG4gICAqL1xuICBzZXRSYW5kb21EaXIoc2NhbGUgPSAxLjApIHtcbiAgICBjb25zdCByID0gTWF0aC5yYW5kb20oKSAqIDIuMCAqIE1hdGguUElcbiAgICBjb25zdCB6ID0gTWF0aC5yYW5kb20oKSAqIDIuMCAtIDEuMFxuICAgIGNvbnN0IHpTY2FsZSA9IE1hdGguc3FydCgxLjAgLSB6ICogeikgKiBzY2FsZVxuXG4gICAgdGhpcy5fX2RhdGFbMF0gPSBNYXRoLmNvcyhyKSAqIHpTY2FsZVxuICAgIHRoaXMuX19kYXRhWzFdID0gTWF0aC5zaW4ocikgKiB6U2NhbGVcbiAgICB0aGlzLl9fZGF0YVsyXSA9IHogKiBzY2FsZVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgcmFuZG9tIHZlY3RvciBhbnl3aGVyZSBpbiB0aGUgc3BoZXJlIGRlZmluZWQgYnkgdGhlIHByb3ZpZGVkIHNjYWxlIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGUgLSBUaGUgcmFkaXVzIG9mIHRoZSBib3VuZGluZyBzcGhlcmUuXG4gICAqIEByZXR1cm4ge1ZlYzN9IC0gVGhlIHJhbmRvbSBWZWMzLlxuICAgKi9cbiAgc2V0UmFuZG9tKHNjYWxlID0gMS4wKSB7XG4gICAgdGhpcy5fX2RhdGFbMF0gPSAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiBzY2FsZVxuICAgIHRoaXMuX19kYXRhWzFdID0gKE1hdGgucmFuZG9tKCkgLSAwLjUpICogc2NhbGVcbiAgICB0aGlzLl9fZGF0YVsyXSA9IChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIHNjYWxlXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9uZXMgdGhpcyBWZWMzIGFuZCByZXR1cm5zIGEgbmV3IFZlYzMuXG4gICAqXG4gICAqIEByZXR1cm4ge1ZlYzN9IC0gUmV0dXJucyBhIG5ldyBWZWMzLlxuICAgKi9cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBWZWMzKHRoaXMuX19kYXRhWzBdLCB0aGlzLl9fZGF0YVsxXSwgdGhpcy5fX2RhdGFbMl0pXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdHlwZSBhcyBhbiBhcnJheS4gT2Z0ZW4gdXNlZCB0byBwYXNzIHR5cGVzIHRvIHRoZSBHUFUuXG4gICAqXG4gICAqIEByZXR1cm4ge2FycmF5fSAtIFJldHVybnMgYXMgYW4gYXJyYXkuXG4gICAqL1xuICBhc0FycmF5KCkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YVxuICB9XG5cbiAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBTdGF0aWMgTWV0aG9kc1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFZlYzMuXG4gICAqXG4gICAqIEBwYXJhbSB7Li4ub2JqZWN0fSAuLi5hcmdzIC0gVGhlIC4uLmFyZ3MgcGFyYW0uXG4gICAqIEByZXR1cm4ge1ZlYzN9IC0gUmV0dXJucyBhIG5ldyBWZWMzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZSguLi5hcmdzKSB7XG4gICAgcmV0dXJuIG5ldyBWZWMzKC4uLmFyZ3MpXG4gIH1cblxuICAvKipcbiAgICogVGhlIGNyZWF0ZUZyb21KU09OIG1ldGhvZC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGpzb24gLSBUaGUganNvbiBwYXJhbS5cbiAgICogQHJldHVybiB7VmVjM30gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZUZyb21KU09OKGpzb24pIHtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgVmVjMygpXG4gICAgcmVzdWx0LmZyb21KU09OKGpzb24pXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBjcmVhdGVGcm9tRmxvYXQzMkJ1ZmZlciBtZXRob2QuXG4gICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGJ1ZmZlciAtIFRoZSBidWZmZXIgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgLSBUaGUgb2Zmc2V0IHZhbHVlLlxuICAgKiBAcmV0dXJuIHtWZWMzfSAtIFJldHVybnMgYSBuZXcgVmVjMy5cbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBjcmVhdGVGcm9tRmxvYXQzMkJ1ZmZlcihidWZmZXIsIG9mZnNldCA9IDApIHtcbiAgICBjb25zb2xlLndhcm4oJ0RlcHJlY2F0ZWQsIHVzZSAjY3JlYXRlRnJvbUJ1ZmZlciBpbnN0ZWFkJylcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVGcm9tQnVmZmVyKGJ1ZmZlciwgb2Zmc2V0ICogNClcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGEgYFZlYzNgIHVzaW5nIGFuIEFycmF5QnVmZmVyLlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGJ1ZmZlciAtIFRoZSBidWZmZXIgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBieXRlT2Zmc2V0IC0gVGhlIG9mZnNldCB2YWx1ZS5cbiAgICogQHJldHVybiB7VmVjM30gLSBSZXR1cm5zIGEgbmV3IFZlYzMuXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlRnJvbUJ1ZmZlcihidWZmZXIsIGJ5dGVPZmZzZXQpIHtcbiAgICByZXR1cm4gbmV3IFZlYzMobmV3IEZsb2F0MzJBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIDMpKSAvLyA0IGJ5dGVzIHBlciAzMmJpdCBmbG9hdFxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBjcmVhdGVGcm9tRmxvYXQzMkFycmF5IG1ldGhvZC5cbiAgICogQHBhcmFtIHtGbG9hdDMyQXJyYXl9IGFycmF5IC0gQSBGbG9hdDMyQXJyYXkgdmFsdWVcbiAgICogQHJldHVybiB7VmVjM30gLSBSZXR1cm5zIGEgbmV3IFZlYzMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlRnJvbUZsb2F0MzJBcnJheShhcnJheSkge1xuICAgIHJldHVybiBuZXcgVmVjMyhhcnJheSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgRmxvYXQzMiBlbGVtZW50cyB1c2VkIGJ5IHRoaXMgdHlwZS4gVXNlZCB0byBjYWxjdWxhdGUgc3RvcmFnZSByZXF1aXJlbWVudHMgZm9yIGxhcmdlIGFycmF5cyBvZiB0aGlzIHR5cGUuXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhdGljIG51bUVsZW1lbnRzKCkge1xuICAgIHJldHVybiAzXG4gIH1cblxuICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gUGVyc2lzdGVuY2VcblxuICAvKipcbiAgICogRW5jb2RlcyBWZWMzIENsYXNzIGFzIGEgSlNPTiBvYmplY3QgZm9yIHBlcnNpc3RlbmNlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IC0gVGhlIGpzb24gb2JqZWN0LlxuICAgKi9cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICB4OiB0aGlzLngsXG4gICAgICB5OiB0aGlzLnksXG4gICAgICB6OiB0aGlzLnosXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlY29kZXMgYSBKU09OIG9iamVjdCB0byBzZXQgdGhlIHN0YXRlIG9mIHRoaXMgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBqIC0gVGhlIGpzb24gb2JqZWN0LlxuICAgKi9cbiAgZnJvbUpTT04oaikge1xuICAgIHRoaXMueCA9IGoueFxuICAgIHRoaXMueSA9IGoueVxuICAgIHRoaXMueiA9IGouelxuICB9XG5cbiAgLyoqXG4gICAqIExvYWRzIHRoZSBzdGF0ZSBvZiB0aGUgdmFsdWUgZnJvbSBhIGJpbmFyeSByZWFkZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7QmluUmVhZGVyfSByZWFkZXIgLSBUaGUgcmVhZGVyIHZhbHVlLlxuICAgKi9cbiAgcmVhZEJpbmFyeShyZWFkZXIpIHtcbiAgICB0aGlzLnggPSByZWFkZXIubG9hZEZsb2F0MzIoKVxuICAgIHRoaXMueSA9IHJlYWRlci5sb2FkRmxvYXQzMigpXG4gICAgdGhpcy56ID0gcmVhZGVyLmxvYWRGbG9hdDMyKClcbiAgfVxufVxuXG5SZWdpc3RyeS5yZWdpc3RlcignVmVjMycsIFZlYzMpXG5cbmV4cG9ydCB7IFZlYzMgfVxuIiwiLyogZXNsaW50LWRpc2FibGUgbmV3LWNhcCAqL1xuaW1wb3J0IHsgQXR0clZhbHVlIH0gZnJvbSAnLi9BdHRyVmFsdWUuanMnXG5pbXBvcnQgeyBSZWdpc3RyeSB9IGZyb20gJy4uL1JlZ2lzdHJ5J1xuaW1wb3J0IHsgVmVjMyB9IGZyb20gJy4vVmVjMy5qcydcbi8qKlxuICogUmVwcmVzZW50cyBhIGZvdXItZGltZW5zaW9uYWwgY29vcmRpbmF0ZS5cbiAqIE1hdGggdHlwZXMgaW50ZXJuYWxseSBzdG9yZSB2YWx1ZXMgaW4ge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0Zsb2F0MzJBcnJheXxGbG9hdDMyQXJyYXl9IGFuZFxuICogZXhwb3NlIGdldHRlcnMgYW5kIHNldHRlcnMgZm9yIHRoZSBjb21wb25lbnQgdmFsdWVzLlxuICpcbiAqIEBleHRlbmRzIEF0dHJWYWx1ZVxuICovXG5jbGFzcyBWZWM0IGV4dGVuZHMgQXR0clZhbHVlIHtcbiAgLyoqXG4gICAvKipcbiAgICogQ3JlYXRlcyBhIFZlYzQuXG4gICAqXG4gICAqIFRoZSB0eXBlIG9mIHZhbHVlcyBvZiB0aGUgYCh4LCB5LCB6LCB0KWAgY29vcmRpbmF0ZXMgY2FuIGJlIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9GbG9hdDMyQXJyYXl8RmxvYXQzMkFycmF5fSxcbiAgICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1VpbnQzMkFycmF5fFVpbnQzMkFycmF5fSxcbiAgICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0ludDMyQXJyYXl8SW50MzJBcnJheX0gYW5kXG4gICAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lcy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jaWEvT2JqZXRvc19nbG9iYWxlcy9BcnJheUJ1ZmZlcnxBcnJheUJ1ZmZlcn0uXG4gICAqIDxicj5cbiAgICogWW91IGNhbiBhbHNvIHBhc3Mgb25lIEpTT04gb2JqZWN0IHBhcmFtZXRlci5cbiAgICogXG4gICAqIEBwYXJhbSB7TnVtYmVyfEZsb2F0MzJBcnJheXxqc29ufSB4IC0gVGhlIHggdmFsdWUuIERlZmF1bHQgaXMgMC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgeSB2YWx1ZS4gRGVmYXVsdCBpcyAwLlxuICAgKiBAcGFyYW0ge251bWJlcn0geiAtIFRoZSB5IHZhbHVlLiBEZWZhdWx0IGlzIDAuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0IC0gVGhlIHQgdmFsdWUuIERlZmF1bHQgaXMgMC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0gMCwgeiA9IDAsIHQgPSAwKSB7XG4gICAgc3VwZXIoKVxuXG4gICAgaWYgKHggaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkgfHwgeCBpbnN0YW5jZW9mIFVpbnQzMkFycmF5KSB7XG4gICAgICB0aGlzLl9fZGF0YSA9IHhcbiAgICB9IGVsc2UgaWYgKHggaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgY29uc29sZS53YXJuKGBkZXByZWNhdGVkLCBwbGVhc2UgdXNlIG5ldyBWZWM0KG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCA0KSlgKVxuICAgICAgY29uc3QgYnVmZmVyID0geFxuICAgICAgY29uc3QgYnl0ZU9mZnNldCA9IHlcbiAgICAgIHRoaXMuX19kYXRhID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIDQpXG4gICAgfSBlbHNlIGlmICh4ICE9IG51bGwgJiYgdHlwZW9mIHggPT0gJ29iamVjdCcpIHtcbiAgICAgIHRoaXMuX19kYXRhID0gbmV3IEZsb2F0MzJBcnJheSg0KVxuICAgICAgdGhpcy5mcm9tSlNPTih4KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9fZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoNClcbiAgICAgIHRoaXMuX19kYXRhWzBdID0geFxuICAgICAgdGhpcy5fX2RhdGFbMV0gPSB5XG4gICAgICB0aGlzLl9fZGF0YVsyXSA9IHpcbiAgICAgIHRoaXMuX19kYXRhWzNdID0gdFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIGB4YCB2YWx1ZS5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFJldHVybnMgdGhlIHggdmFsdWUuXG4gICAqL1xuICBnZXQgeCgpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGFbMF1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0ZXIgZm9yIGB4YCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIFRoZSB2YWwgcGFyYW0uXG4gICAqL1xuICBzZXQgeCh2YWwpIHtcbiAgICB0aGlzLl9fZGF0YVswXSA9IHZhbFxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3IgYHlgIHZhbHVlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gUmV0dXJucyB0aGUgeSB2YWx1ZS5cbiAgICovXG4gIGdldCB5KCkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YVsxXVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmb3IgYHlgIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gVGhlIHZhbCBwYXJhbS5cbiAgICovXG4gIHNldCB5KHZhbCkge1xuICAgIHRoaXMuX19kYXRhWzFdID0gdmFsXG4gIH1cblxuICAvKipcbiAgICogR2V0dGVyIGZvciBgemAgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBUaGUgdmFsIHBhcmFtLlxuICAgKi9cbiAgZ2V0IHooKSB7XG4gICAgcmV0dXJuIHRoaXMuX19kYXRhWzJdXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciBgemAgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBUaGUgdmFsIHBhcmFtLlxuICAgKi9cbiAgc2V0IHoodmFsKSB7XG4gICAgdGhpcy5fX2RhdGFbMl0gPSB2YWxcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIGB0YCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIFRoZSB2YWwgcGFyYW0uXG4gICAqL1xuICBnZXQgdCgpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGFbM11cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0ZXIgZm9yIGB0YCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIFRoZSB2YWwgcGFyYW0uXG4gICAqL1xuICBzZXQgdCh2YWwpIHtcbiAgICB0aGlzLl9fZGF0YVszXSA9IHZhbFxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3IgYHdgIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gVGhlIHZhbCBwYXJhbS5cbiAgICovXG4gIGdldCB3KCkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YVszXVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmb3IgYHdgIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gVGhlIHZhbCBwYXJhbS5cbiAgICovXG4gIHNldCB3KHZhbCkge1xuICAgIHRoaXMuX19kYXRhWzNdID0gdmFsXG4gIH1cblxuICAvKipcbiAgICogR2V0dGVyIGZvciBgeHl6YCBzd2l6emVsLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gUmV0dXJucyB0aGUgeiB2YWx1ZS5cbiAgICovXG4gIGdldCB4eXooKSB7XG4gICAgcmV0dXJuIG5ldyBWZWMzKHRoaXMuX19kYXRhWzBdLCB0aGlzLl9fZGF0YVsxXSwgdGhpcy5fX2RhdGFbMl0pXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZyb20gc2NhbGFyIGNvbXBvbmVudHMuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHggdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5ICAtIFRoZSB5IHZhbHVlLlxuICAgKiBAcGFyYW0ge251bWJlcn0geiAgLSBUaGUgeSB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHQgIC0gVGhlIHQgdmFsdWUuXG4gICAqL1xuICBzZXQoeCwgeSwgeiwgdCkge1xuICAgIHRoaXMueCA9IHhcbiAgICB0aGlzLnkgPSB5XG4gICAgdGhpcy56ID0gelxuICAgIHRoaXMudCA9IHRcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBzdGF0ZSBvZiBhIFZlYzQgT2JqZWN0IGZyb20gYW5vdGhlciBWZWM0LlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzR9IG90aGVyIC0gVGhlIG90aGVyIFZlYzQgdG8gc2V0IGZyb20uXG4gICAqL1xuICBzZXRGcm9tT3RoZXIob3RoZXIpIHtcbiAgICB0aGlzLnggPSBvdGhlci54XG4gICAgdGhpcy55ID0gb3RoZXIueVxuICAgIHRoaXMueiA9IG90aGVyLnpcbiAgICB0aGlzLnQgPSBvdGhlci50XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoaXMgVmVjNCBjb250YWlucyB0aGUgc2FtZSB2YWx1ZXMgYXMgdGhlIG90aGVyIFZlYzQuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIEBwYXJhbSB7VmVjNH0gb3RoZXIgLSBUaGUgb3RoZXIgVmVjNCB0byBjb21wYXJlIHdpdGguXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gUmV0dXJucyB0cnVlIG9yIGZhbHNlLlxuICAgKi9cbiAgZXF1YWwob3RoZXIpIHtcbiAgICBjb25zb2xlLndhcm4oJ0RlcHJlY2F0ZWQuIFVzZSAjaXNFcXVhbCBpbnN0ZWFkLicpXG4gICAgcmV0dXJuIHRoaXMuaXNFcXVhbChvdGhlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhpcyBWZWM0IGNvbnRhaW5zIHRoZSBzYW1lIHZhbHVlcyBhcyB0aGUgb3RoZXIgVmVjNC5cbiAgICpcbiAgICogQHBhcmFtIHtWZWM0fSBvdGhlciAtIFRoZSBvdGhlciBWZWM0IHRvIGNvbXBhcmUgd2l0aC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gLSBSZXR1cm5zIHRydWUgb3IgZmFsc2UuXG4gICAqL1xuICBpc0VxdWFsKG90aGVyKSB7XG4gICAgcmV0dXJuIHRoaXMueCA9PSBvdGhlci54ICYmIHRoaXMueSA9PSBvdGhlci55ICYmIHRoaXMueiA9PSBvdGhlci56ICYmIHRoaXMudCA9PSBvdGhlci50XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoaXMgVmVjNCBpcyBkaWZmZXJlbnQgZnJvbSBhbm90aGVyIFZlYzQuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIEBwYXJhbSB7VmVjNH0gb3RoZXIgLSBUaGUgb3RoZXIgVmVjNCB0byBjb21wYXJlIHdpdGguXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gUmV0dXJucyB0cnVlIG9yIGZhbHNlLlxuICAgKi9cbiAgbm90RXF1YWxzKG90aGVyKSB7XG4gICAgY29uc29sZS53YXJuKCdEZXByZWNhdGVkLiBVc2UgI25vdEVxdWFsIGluc3RlYWQuJylcbiAgICByZXR1cm4gdGhpcy5ub3RFcXVhbChvdGhlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhpcyBWZWM0IGlzIGRpZmZlcmVudCBmcm9tIGFub3RoZXIgVmVjNC5cbiAgICpcbiAgICogQHBhcmFtIHtWZWM0fSBvdGhlciAtIFRoZSBvdGhlciBWZWM0IHRvIGNvbXBhcmUgd2l0aC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gLSBSZXR1cm5zIHRydWUgb3IgZmFsc2UuXG4gICAqL1xuICBub3RFcXVhbChvdGhlcikge1xuICAgIHJldHVybiB0aGlzLnggIT0gb3RoZXIueCAmJiB0aGlzLnkgIT0gb3RoZXIueSAmJiB0aGlzLnogIT0gb3RoZXIueiAmJiB0aGlzLnQgIT0gb3RoZXIudFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIFZlYzQgaXMgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBhcyBvdGhlci5cbiAgICpcbiAgICogQHBhcmFtIHtWZWM0fSBvdGhlciAtIFRoZSBvdGhlciBWZWM0IHRvIGNvbXBhcmUgd2l0aC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHByZWNpc2lvbiAtIFRoZSBwcmVjaXNpb24gdG8gd2hpY2ggdGhlIHZhbHVlcyBtdXN0IG1hdGNoLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBhcHByb3hFcXVhbChvdGhlciwgcHJlY2lzaW9uID0gTnVtYmVyLkVQU0lMT04pIHtcbiAgICByZXR1cm4gKFxuICAgICAgTWF0aC5hYnModGhpcy54IC0gb3RoZXIueCkgPCBwcmVjaXNpb24gJiZcbiAgICAgIE1hdGguYWJzKHRoaXMueSAtIG90aGVyLnkpIDwgcHJlY2lzaW9uICYmXG4gICAgICBNYXRoLmFicyh0aGlzLnogLSBvdGhlci56KSA8IHByZWNpc2lvbiAmJlxuICAgICAgTWF0aC5hYnModGhpcy50IC0gb3RoZXIudCkgPCBwcmVjaXNpb25cbiAgICApXG4gIH1cblxuICAvKipcbiAgICogQWRkcyBvdGhlciB0byB0aGlzIFZlYzQgYW5kIHJldHVybnMgdGhlIHJlc3VsdCBhcyBhIG5ldyBWZWM0LlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzR9IG90aGVyIC0gVGhlIG90aGVyIFZlYzQgdG8gYWRkLlxuICAgKiBAcmV0dXJuIHtWZWM0fSAtIFJldHVybnMgYSBuZXcgVmVjNC5cbiAgICovXG4gIGFkZChvdGhlcikge1xuICAgIHJldHVybiBuZXcgVmVjNCh0aGlzLnggKyBvdGhlci54LCB0aGlzLnkgKyBvdGhlci55LCB0aGlzLnogKyBvdGhlci56LCB0aGlzLnQgKyBvdGhlci50KVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgb3RoZXIgdG8gdGhpcyBWZWM0IG11dGF0aW5nIHRoZSB2YWx1ZXMgb2YgdGhpcyBpbnN0YW5jZVxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzR9IG90aGVyIC0gVGhlIG90aGVyIFZlYzQgdG8gYWRkLlxuICAgKi9cbiAgYWRkSW5QbGFjZShvdGhlcikge1xuICAgIHRoaXMueCArPSBvdGhlci54XG4gICAgdGhpcy55ICs9IG90aGVyLnlcbiAgICB0aGlzLnogKz0gb3RoZXIuelxuICAgIHRoaXMudCArPSBvdGhlci50XG4gIH1cblxuICAvKipcbiAgICogU3VidHJhY3RzIG90aGVyIGZyb20gdGhpcyBWZWM0IGFuZCByZXR1cm5zIHRoZW4gcmVzdWx0IGFzIGEgbmV3IFZlYzQuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjNH0gb3RoZXIgLSBUaGUgb3RoZXIgVmVjNCB0byBzdWJ0cmFjdC5cbiAgICogQHJldHVybiB7VmVjNH0gLSBSZXR1cm5zIGEgbmV3IFZlYzQuXG4gICAqL1xuICBzdWJ0cmFjdChvdGhlcikge1xuICAgIHJldHVybiBuZXcgVmVjNCh0aGlzLnggLSBvdGhlci54LCB0aGlzLnkgLSBvdGhlci55LCB0aGlzLnogLSBvdGhlci56LCB0aGlzLnQgLSBvdGhlci50KVxuICB9XG5cbiAgLyoqXG4gICAqIFN1YnRyYWN0cyBvdGhlciBmcm9tIHRoaXMgVmVjNCBtdXRhdGluZyB0aGUgdmFsdWVzIG9mIHRoaXMgaW5zdGFuY2VcbiAgICpcbiAgICogQHBhcmFtIHtWZWM0fSBvdGhlciAtIFRoZSBvdGhlciBWZWM0IHRvIHN1YnRyYWN0LlxuICAgKi9cbiAgc3VidHJhY3RJblBsYWNlKG90aGVyKSB7XG4gICAgdGhpcy54IC09IG90aGVyLnhcbiAgICB0aGlzLnkgLT0gb3RoZXIueVxuICAgIHRoaXMueiAtPSBvdGhlci56XG4gICAgdGhpcy50IC09IG90aGVyLnRcbiAgfVxuXG4gIC8qKlxuICAgKiBNdWx0aXBsaWVzIHR3byBWZWM0cyBhbmQgcmV0dXJucyB0aGUgcmVzdWx0IGFzIGEgbmV3IFZlYzQuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjNH0gb3RoZXIgLSBUaGUgb3RoZXIgVmVjNCB0byBtdWx0aXBseSB3aXRoLlxuICAgKiBAcmV0dXJuIHtWZWM0fSAtIFJldHVybnMgYSBuZXcgVmVjNC5cbiAgICovXG4gIG11bHRpcGx5KG90aGVyKSB7XG4gICAgcmV0dXJuIG5ldyBWZWM0KHRoaXMueCAqIG90aGVyLngsIHRoaXMueSAqIG90aGVyLnksIHRoaXMueiAqIG90aGVyLnosIHRoaXMudCAqIG90aGVyLnQpXG4gIH1cblxuICAvKipcbiAgICogTXVsdGlwbGllcyB0d28gVmVjNHMgbXV0YXRpbmcgdGhlIHZhbHVlcyBvZiB0aGlzIGluc3RhbmNlXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjNH0gb3RoZXIgLSBUaGUgb3RoZXIgVmVjNCB0byBtdWx0aXBseSB3aXRoLlxuICAgKi9cbiAgbXVsdGlwbHlJblBsYWNlKG90aGVyKSB7XG4gICAgdGhpcy54ICo9IG90aGVyLnhcbiAgICB0aGlzLnkgKj0gb3RoZXIueVxuICAgIHRoaXMueiAqPSBvdGhlci56XG4gICAgdGhpcy50ICo9IG90aGVyLnRcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXZpZGVzIHR3byBWZWM0cyBhbmQgcmV0dXJucyB0aGUgcmVzdWx0IGFzIGEgbmV3IFZlYzQuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjNH0gb3RoZXIgLSBUaGUgb3RoZXIgVmVjNCB0byBkaXZpZGUgYnkuXG4gICAqIEByZXR1cm4ge1ZlYzR9IC0gUmV0dXJucyBhIG5ldyBWZWM0LlxuICAgKi9cbiAgZGl2aWRlKG90aGVyKSB7XG4gICAgcmV0dXJuIG5ldyBWZWM0KHRoaXMueCAvIG90aGVyLngsIHRoaXMueSAvIG90aGVyLnksIHRoaXMueiAvIG90aGVyLnosIHRoaXMudCAvIG90aGVyLnQpXG4gIH1cblxuICAvKipcbiAgICogRGl2aWRlcyB0d28gVmVjNHMuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjNH0gb3RoZXIgLSBUaGUgb3RoZXIgVmVjNCB0byBkaXZpZGUgYnkuXG4gICAqL1xuICBkaXZpZGVJblBsYWNlKG90aGVyKSB7XG4gICAgdGhpcy54IC89IG90aGVyLnhcbiAgICB0aGlzLnkgLz0gb3RoZXIueVxuICAgIHRoaXMueiAvPSBvdGhlci56XG4gICAgdGhpcy50IC89IG90aGVyLnRcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsZXMgdGhpcyBWZWM0IGJ5IHNjYWxhciBhbmQgcmV0dXJucyB0aGUgcmVzdWx0IGFzIGEgbmV3IFZlYzQuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsYXIgLSBUaGUgc2NhbGFyIHZhbHVlLlxuICAgKiBAcmV0dXJuIHtWZWM0fSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBzY2FsZShzY2FsYXIpIHtcbiAgICByZXR1cm4gbmV3IFZlYzQodGhpcy54ICogc2NhbGFyLCB0aGlzLnkgKiBzY2FsYXIsIHRoaXMueiAqIHNjYWxhciwgdGhpcy50ICogc2NhbGFyKVxuICB9XG5cbiAgLyoqXG4gICAqIFNjYWxlcyB0aGlzIFZlYzQgYnkgc2NhbGFyLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGFyIC0gVGhlIHNjYWxhciB2YWx1ZS5cbiAgICovXG4gIHNjYWxlSW5QbGFjZShzY2FsYXIpIHtcbiAgICB0aGlzLnNldCh0aGlzLnggKiBzY2FsYXIsIHRoaXMueSAqIHNjYWxhciwgdGhpcy56ICogc2NhbGFyLCB0aGlzLnQgKiBzY2FsYXIpXG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIHRoaXMgVmVjNC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFJldHVybnMgdGhlIGxlbmd0aC5cbiAgICovXG4gIGxlbmd0aCgpIHtcbiAgICBjb25zdCB4ID0gdGhpcy5fX2RhdGFbMF1cbiAgICBjb25zdCB5ID0gdGhpcy5fX2RhdGFbMV1cbiAgICBjb25zdCB6ID0gdGhpcy5fX2RhdGFbMl1cbiAgICBjb25zdCB0ID0gdGhpcy5fX2RhdGFbMl1cbiAgICByZXR1cm4gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHQgKiB0KVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIHRoaXMgVmVjNC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFJldHVybnMgdGhlIGxlbmd0aC5cbiAgICovXG4gIGxlbmd0aFNxdWFyZWQoKSB7XG4gICAgY29uc3QgeCA9IHRoaXMuX19kYXRhWzBdXG4gICAgY29uc3QgeSA9IHRoaXMuX19kYXRhWzFdXG4gICAgY29uc3QgeiA9IHRoaXMuX19kYXRhWzJdXG4gICAgY29uc3QgdCA9IHRoaXMuX19kYXRhWzNdXG4gICAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHQgKiB0XG4gIH1cblxuICAvKipcbiAgICogTm9ybWFsaXplcyB0aGUgVmVjNCBhbmQgcmV0dXJucyBpdCBhcyBhIG5ldyBWZWM0LlxuICAgKiBNdWx0aXBsaWVzIGNvb3JkaW5hdGVzIHZhbHVlIGJ5IHRoZSBpbnZlcnNlIG9mIHRoZSB2ZWN0b3IgbGVuZ3RoLlxuICAgKlxuICAgKiBAcmV0dXJuIHtWZWM0fSAtIFJldHVybnMgdGhlIFZlYzQgbm9ybWFsaXplZC5cbiAgICovXG4gIG5vcm1hbGl6ZSgpIHtcbiAgICBjb25zdCB4ID0gdGhpcy5fX2RhdGFbMF1cbiAgICBjb25zdCB5ID0gdGhpcy5fX2RhdGFbMV1cbiAgICBjb25zdCB6ID0gdGhpcy5fX2RhdGFbMl1cbiAgICBjb25zdCB0ID0gdGhpcy5fX2RhdGFbM11cbiAgICBsZXQgbGVuID0geCAqIHggKyB5ICogeSArIHogKiB6ICsgdCAqIHRcbiAgICBpZiAobGVuIDwgTnVtYmVyLkVQU0lMT04pIHtcbiAgICAgIHJldHVybiBuZXcgVmVjNCgpXG4gICAgfVxuXG4gICAgLy8gVE9ETzogZXZhbHVhdGUgdXNlIG9mIGdsbV9pbnZzcXJ0IGhlcmU/XG4gICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pXG4gICAgcmV0dXJuIG5ldyBWZWM0KHggKiBsZW4sIHkgKiBsZW4sIHogKiBsZW4pXG4gIH1cblxuICAvKipcbiAgICogTm9ybWFsaXplcyB0aGlzIFZlYzQgbXVsdGlwbHlpbmcgY29vcmRpbmF0ZSB2YWx1ZXMgYnkgdGhlIGludmVyc2Ugb2YgdGhlIHZlY3RvciBsZW5ndGguXG4gICAqL1xuICBub3JtYWxpemVJblBsYWNlKCkge1xuICAgIGNvbnN0IHggPSB0aGlzLl9fZGF0YVswXVxuICAgIGNvbnN0IHkgPSB0aGlzLl9fZGF0YVsxXVxuICAgIGNvbnN0IHogPSB0aGlzLl9fZGF0YVsyXVxuICAgIGNvbnN0IHQgPSB0aGlzLl9fZGF0YVszXVxuICAgIGxldCBsZW4gPSB4ICogeCArIHkgKiB5ICsgeiAqIHogKyB0ICogdFxuICAgIGlmIChsZW4gPCBOdW1iZXIuRVBTSUxPTikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKVxuICAgIHRoaXMuc2V0KHggKiBsZW4sIHkgKiBsZW4sIHogKiBsZW4sIHQgKiBsZW4pXG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdGhpcyBWZWM0IGFnYWluc3QgYW5vdGhlciBWZWM0LlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzR9IG90aGVyIC0gVGhlIG90aGVyIFZlYzQgdG8gY29tcGFyZSB3aXRoLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gUmV0dXJucyB0aGUgZG90IHByb2R1Y3QuXG4gICAqL1xuICBkb3Qob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy54ICogb3RoZXIueCArIHRoaXMueSAqIG90aGVyLnkgKyB0aGlzLnogKiBvdGhlci56ICsgdGhpcy50ICogYi50XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0d28gVmVjNHMgYW5kIHJldHVybnMgdGhlIHJlc3VsdCBhcyBhIG5ldyBWZWM0LlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzR9IG90aGVyIC0gVGhlIG90aGVyIFZlYzQgdG8gY2FsY3VsYXRlIHdpdGguXG4gICAqIEByZXR1cm4ge1ZlYzR9IC0gUmV0dXJucyB0aGUgY3Jvc3MgcHJvZHVjdCBhcyBhIG5ldyBWZWM0LlxuICAgKi9cbiAgY3Jvc3Mob3RoZXIpIHtcbiAgICBjb25zdCBheCA9IHRoaXMueFxuICAgIGNvbnN0IGF5ID0gdGhpcy55XG4gICAgY29uc3QgYXogPSB0aGlzLnpcbiAgICBjb25zdCBhdCA9IHRoaXMudFxuICAgIGNvbnN0IGJ4ID0gb3RoZXIueFxuICAgIGNvbnN0IGJ5ID0gb3RoZXIueVxuICAgIGNvbnN0IGJ6ID0gb3RoZXIuelxuICAgIGNvbnN0IGJ0ID0gb3RoZXIudFxuXG4gICAgcmV0dXJuIG5ldyBWZWM0KGF5ICogYnogLSBheiAqIGJ5LCBheiAqIGJ0IC0gYXQgKiBieiwgYXQgKiBieCAtIGF4ICogYnQsIGF4ICogYnkgLSBheSAqIGJ4KVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGFuZ2xlIGJldHdlZW4gdGhpcyBWZWM0IGFuZCBiLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzR9IG90aGVyIC0gVGhlIG90aGVyIFZlYzQgdG8gY29tcGFyZSB3aXRoLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gUmV0dXJucyB0aGUgYW5nbGUgaW4gcmFkaWFucy5cbiAgICovXG4gIGFuZ2xlVG8ob3RoZXIpIHtcbiAgICBjb25zdCB0ZW1wQSA9IHRoaXMubm9ybWFsaXplKClcbiAgICBjb25zdCB0ZW1wQiA9IG90aGVyLm5vcm1hbGl6ZSgpXG4gICAgY29uc3QgY29zaW5lID0gdGVtcEEuZG90KHRlbXBCKVxuXG4gICAgaWYgKGNvc2luZSA+IDEuMCkge1xuICAgICAgcmV0dXJuIDBcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIE1hdGguYWNvcyhjb3NpbmUpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0aGlzIFZlYzQgYW5kIG90aGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzR9IG90aGVyIC0gVGhlIG90aGVyIFZlYzQgdG8gaW50ZXJwb2xhdGUgYmV0d2Vlbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHQgLSBJbnRlcnBvbGF0aW9uIGFtb3VudCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzLlxuICAgKiBAcmV0dXJuIHtWZWM0fSAtIFJldHVybnMgYSBuZXcgVmVjNC5cbiAgICovXG4gIGxlcnAob3RoZXIsIHQpIHtcbiAgICBjb25zdCBheCA9IHRoaXMueFxuICAgIGNvbnN0IGF5ID0gdGhpcy55XG4gICAgY29uc3QgYXogPSB0aGlzLnpcbiAgICBhdCA9IHRoaXMudFxuICAgIHJldHVybiBuZXcgVmVjNChheCArIHQgKiAob3RoZXIueCAtIGF4KSwgYXkgKyB0ICogKG90aGVyLnkgLSBheSksIGF6ICsgdCAqIChvdGhlci56IC0gYXopLCBhdCArIHQgKiAob3RoZXIudCAtIGF0KSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSByYW5kb20gdmVjdG9yIHdpdGggdGhlIGdpdmVuIHNjYWxlLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGUgLSBMZW5ndGggb2YgdGhlIHJlc3VsdGluZyB2ZWN0b3IuIElmIG9taXR0ZWQsIGEgdW5pdCB2ZWN0b3Igd2lsbCBiZSByZXR1cm5lZC5cbiAgICogQHJldHVybiB7VmVjNH0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgcmFuZG9tKHNjYWxlID0gMS4wKSB7XG4gICAgY29uc3QgciA9IGdsTWF0cml4LlJBTkRPTSgpICogMi4wICogTWF0aC5QSVxuICAgIGNvbnN0IHogPSBnbE1hdHJpeC5SQU5ET00oKSAqIDIuMCAtIDEuMFxuICAgIGNvbnN0IHpTY2FsZSA9IE1hdGguc3FydCgxLjAgLSB6ICogeikgKiBzY2FsZVxuXG4gICAgb3V0WzBdID0gTWF0aC5jb3MocikgKiB6U2NhbGVcbiAgICBvdXRbMV0gPSBNYXRoLnNpbihyKSAqIHpTY2FsZVxuICAgIG91dFsyXSA9IHogKiBzY2FsZVxuICAgIHJldHVybiBvdXRcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9uZXMgdGhpcyBWZWM0IGFuZCByZXR1cm5zIGEgbmV3IFZlYzQuXG4gICAqXG4gICAqIEByZXR1cm4ge1ZlYzR9IC0gUmV0dXJucyBhIG5ldyBWZWM0LlxuICAgKi9cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBWZWM0KHRoaXMuX19kYXRhWzBdLCB0aGlzLl9fZGF0YVsxXSwgdGhpcy5fX2RhdGFbMl0sIHRoaXMuX19kYXRhWzNdKVxuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoaXMgVmVjNCBpbnRvIGEgVmVjMy5cbiAgICpcbiAgICogQHJldHVybiB7VmVjM30gLSBSZXR1cm5zIHRoZSB2YWx1ZSBhcyBhIG5ldyBWZWMzLlxuICAgKi9cbiAgdG9WZWMzKCkge1xuICAgIHJldHVybiBuZXcgVmVjMyh0aGlzLl9fZGF0YVswXSwgdGhpcy5fX2RhdGFbMV0sIHRoaXMuX19kYXRhWzJdKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHR5cGUgYXMgYW4gYXJyYXkuIE9mdGVuIHVzZWQgdG8gcGFzcyB0eXBlcyB0byB0aGUgR1BVLlxuICAgKlxuICAgKiBAcmV0dXJuIHthcnJheX0gLSBSZXR1cm5zIGFzIGFuIGFycmF5LlxuICAgKi9cbiAgYXNBcnJheSgpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGFcbiAgfVxuXG4gIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gU3RhdGljIE1ldGhvZHNcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBWZWMzLlxuICAgKiBAcGFyYW0gey4uLm9iamVjdH0gLi4uYXJncyAtIFRoZSAuLi5hcmdzIHBhcmFtLlxuICAgKiBAcmV0dXJuIHtWZWMzfSAtIFJldHVybnMgYSBuZXcgVmVjMy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBjcmVhdGUoLi4uYXJncykge1xuICAgIHJldHVybiBuZXcgVmVjMyguLi5hcmdzKVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgVmVjNCB0byB3cmFwIGV4aXN0aW5nIG1lbW9yeSBpbiBhIGJ1ZmZlci5cbiAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYnVmZmVyIC0gVGhlIGJ1ZmZlciB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCAtIFRoZSBvZmZzZXQgdmFsdWUuXG4gICAqIEByZXR1cm4ge1ZlYzR9IC0gUmV0dXJucyBhIG5ldyBWZWMzLlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZUZyb21GbG9hdDMyQnVmZmVyKGJ1ZmZlciwgb2Zmc2V0ID0gMCkge1xuICAgIGNvbnNvbGUud2FybignRGVwcmVjYXRlZCwgdXNlICNjcmVhdGVGcm9tQnVmZmVyIGluc3RlYWQnKVxuICAgIHJldHVybiBuZXcgVmVjNChuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlciwgb2Zmc2V0ICogNCwgNCkpIC8vIDQgYnl0ZXMgcGVyIDMyYml0IGZsb2F0XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBhIGBWZWM0YCB1c2luZyBhbiBBcnJheUJ1ZmZlci5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBidWZmZXIgLSBUaGUgYnVmZmVyIHZhbHVlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gYnl0ZU9mZnNldCAtIFRoZSBvZmZzZXQgdmFsdWUuXG4gICAqIEByZXR1cm4ge1ZlYzR9IC0gUmV0dXJucyBhIG5ldyBWZWM0LlxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZUZyb21CdWZmZXIoYnVmZmVyLCBieXRlT2Zmc2V0KSB7XG4gICAgcmV0dXJuIG5ldyBWZWM0KG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCA0KSkgLy8gNCBieXRlcyBwZXIgMzJiaXQgZmxvYXRcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgRmxvYXQzMiBlbGVtZW50cyB1c2VkIGJ5IHRoaXMgdHlwZS4gVXNlZCB0byBjYWxjdWxhdGUgc3RvcmFnZSByZXF1aXJlbWVudHMgZm9yIGxhcmdlIGFycmF5cyBvZiB0aGlzIHR5cGUuXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhdGljIG51bUVsZW1lbnRzKCkge1xuICAgIHJldHVybiA0XG4gIH1cblxuICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gUGVyc2lzdGVuY2VcblxuICAvKipcbiAgICogVGhlIHRvSlNPTiBtZXRob2QgZW5jb2RlcyB0aGlzIHR5cGUgYXMgYSBqc29uIG9iamVjdCBmb3IgcGVyc2lzdGVuY2UuXG4gICAqIEByZXR1cm4ge29iamVjdH0gLSBUaGUganNvbiBvYmplY3QuXG4gICAqL1xuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHRoaXMueCxcbiAgICAgIHk6IHRoaXMueSxcbiAgICAgIHo6IHRoaXMueixcbiAgICAgIHQ6IHRoaXMudCxcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVjb2RlcyBhIEpTT04gb2JqZWN0IHRvIHNldCB0aGUgc3RhdGUgb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGogLSBUaGUganNvbiBvYmplY3QuXG4gICAqL1xuICBmcm9tSlNPTihqKSB7XG4gICAgdGhpcy54ID0gai54XG4gICAgdGhpcy55ID0gai55XG4gICAgdGhpcy56ID0gai56XG4gICAgdGhpcy50ID0gai50XG4gIH1cblxuICAvKipcbiAgICogTG9hZHMgdGhlIHN0YXRlIG9mIHRoZSB2YWx1ZSBmcm9tIGEgYmluYXJ5IHJlYWRlci5cbiAgICpcbiAgICogQHBhcmFtIHtCaW5SZWFkZXJ9IHJlYWRlciAtIFRoZSByZWFkZXIgdmFsdWUuXG4gICAqL1xuICByZWFkQmluYXJ5KHJlYWRlcikge1xuICAgIHRoaXMueCA9IHJlYWRlci5sb2FkRmxvYXQzMigpXG4gICAgdGhpcy55ID0gcmVhZGVyLmxvYWRGbG9hdDMyKClcbiAgICB0aGlzLnogPSByZWFkZXIubG9hZEZsb2F0MzIoKVxuICAgIHRoaXMudCA9IHJlYWRlci5sb2FkRmxvYXQzMigpXG4gIH1cbn1cblxuUmVnaXN0cnkucmVnaXN0ZXIoJ1ZlYzQnLCBWZWM0KVxuXG5leHBvcnQgeyBWZWM0IH1cbiIsIi8qIGVzbGludC1kaXNhYmxlIHJlcXVpcmUtanNkb2MgKi9cbmltcG9ydCB7IEF0dHJWYWx1ZSB9IGZyb20gJy4vQXR0clZhbHVlLmpzJ1xuaW1wb3J0IHsgUmVnaXN0cnkgfSBmcm9tICcuLi9SZWdpc3RyeSdcblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgdGhlIHJlZCwgZ3JlZW4sIGJsdWUgYW5kIGFscGhhIGNoYW5uZWwgb2YgYSBjb2xvciBhcyA4Yml0IHZhbHVlcy5cbiAqXG4gKiBAZXh0ZW5kcyBBdHRyVmFsdWVcbiAqL1xuY2xhc3MgUkdCQSBleHRlbmRzIEF0dHJWYWx1ZSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBSR0JBLlxuICAgKiBAcGFyYW0ge251bWJlciB8IHN0cmluZyB8IFVpbnQ4QXJyYXl9IHIgLSBUaGUgcmVkIGNoYW5uZWwgb2YgYSBjb2xvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGcgLSBUaGUgZ3JlZW4gY2hhbm5lbCBvZiBhIGNvbG9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gYiAtIFRoZSBibHVlIGNoYW5uZWwgb2YgYSBjb2xvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGEgLSBUaGUgYWxwaGEgKHRyYW5zcGFyZW5jeSkgY2hhbm5lbCBvZiBhIGNvbG9yLlxuICAgKi9cbiAgY29uc3RydWN0b3IociA9IDAsIGcgPSAwLCBiID0gMCwgYSA9IDI1NSkge1xuICAgIHN1cGVyKClcblxuICAgIGlmIChyIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgdGhpcy5fX2RhdGEgPSByXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX19kYXRhID0gbmV3IFVpbnQ4QXJyYXkoNClcbiAgICAgIGlmICh0eXBlb2YgciA9PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoci5zdGFydHNXaXRoKCcjJykpIHtcbiAgICAgICAgICB0aGlzLnNldEZyb21IZXgocilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldEZyb21DU1NDb2xvck5hbWUocilcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fX2RhdGFbMF0gPSByXG4gICAgICAgIHRoaXMuX19kYXRhWzFdID0gZ1xuICAgICAgICB0aGlzLl9fZGF0YVsyXSA9IGJcbiAgICAgICAgdGhpcy5fX2RhdGFbM10gPSBhXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3IgcmVkIGNoYW5uZWwuXG4gICAqXG4gICAqIEByZXR1cm4ge1JHQkF9IC0gUmV0dXJucyB0aGUgcmVkIGNoYW5uZWwuXG4gICAqL1xuICBnZXQgcigpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGFbMF1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0ZXIgZm9yIHJlZCBjaGFubmVsLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gVGhlIHZhbCBwYXJhbS5cbiAgICovXG4gIHNldCByKHZhbCkge1xuICAgIHRoaXMuX19kYXRhWzBdID0gdmFsXG4gIH1cblxuICAvKipcbiAgICogR2V0dGVyIGZvciBncmVlbiBjaGFubmVsLlxuICAgKlxuICAgKiBAcmV0dXJuIHtSR0JBfSAtIFJldHVybnMgdGhlIGdyZWVuIGNoYW5uZWwuXG4gICAqL1xuICBnZXQgZygpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGFbMV1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0ZXIgZm9yIGdyZWVuIGNoYW5uZWwuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBUaGUgdmFsIHBhcmFtLlxuICAgKi9cbiAgc2V0IGcodmFsKSB7XG4gICAgdGhpcy5fX2RhdGFbMV0gPSB2YWxcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIGJsdWUgY2hhbm5lbC5cbiAgICpcbiAgICogQHJldHVybiB7UkdCQX0gLSBSZXR1cm5zIHRoZSBibHVlIGNoYW5uZWwuXG4gICAqL1xuICBnZXQgYigpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGFbMl1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0ZXIgZm9yIGJsdWUgY2hhbm5lbC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIFRoZSB2YWwgcGFyYW0uXG4gICAqL1xuICBzZXQgYih2YWwpIHtcbiAgICB0aGlzLl9fZGF0YVsyXSA9IHZhbFxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3IgYWxwaGEgY2hhbm5lbC5cbiAgICpcbiAgICogQHJldHVybiB7UkdCQX0gLSBSZXR1cm5zIHRoZSBhbHBoYSBjaGFubmVsLlxuICAgKi9cbiAgZ2V0IGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19kYXRhWzNdXG4gIH1cbiAgLyoqXG4gICAqIFNldHRlciBmb3IgYWxwaGEgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBUaGUgdmFsIHBhcmFtLlxuICAgKi9cbiAgc2V0IGEodmFsKSB7XG4gICAgdGhpcy5fX2RhdGFbM10gPSB2YWxcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0ZXIgZnJvbSBzY2FsYXIgY29tcG9uZW50cy5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHIgLSBUaGUgcmVkIGNoYW5uZWwuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBnICAtIFRoZSBncmVlbiBjaGFubmVsLlxuICAgKiBAcGFyYW0ge251bWJlcn0gYiAgLSBUaGUgYmx1ZSBjaGFubmVsLlxuICAgKiBAcGFyYW0ge251bWJlcn0gYSAgLSBUaGUgYWxwaGEgY2hhbm5lbC5cbiAgICovXG4gIHNldChyLCBnLCBiLCBhID0gMjU1KSB7XG4gICAgdGhpcy5yID0gclxuICAgIHRoaXMuZyA9IGdcbiAgICB0aGlzLmIgPSBiXG4gICAgdGhpcy5hID0gYVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmcm9tIGFub3RoZXIgUkdCQSBjb2xvci5cbiAgICpcbiAgICogQHBhcmFtIHtSR0JBfSBvdGhlciAtIFRoZSBvdGhlciBSR0JBIHRvIHNldCBmcm9tLlxuICAgKi9cbiAgc2V0RnJvbU90aGVyKG90aGVyKSB7XG4gICAgdGhpcy5yID0gb3RoZXIuclxuICAgIHRoaXMuZyA9IG90aGVyLmdcbiAgICB0aGlzLmIgPSBvdGhlci5iXG4gICAgdGhpcy5hID0gb3RoZXIuYVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmcm9tIGEgc2NhbGFyIGFycmF5LlxuICAgKlxuICAgKiBAcGFyYW0ge2FycmF5fSB2YWx1ZXMgLSBUaGUgYXJyYXkgb2YgdmFsdWVzLlxuICAgKi9cbiAgc2V0RnJvbUFycmF5KHZhbHVlcykge1xuICAgIHRoaXMuciA9IHZhbHVlc1swXVxuICAgIHRoaXMuZyA9IHZhbHVlc1sxXVxuICAgIHRoaXMuYiA9IHZhbHVlc1syXVxuICAgIHRoaXMuYSA9IHZhbHVlcy5sZW5ndGggPT0gNCA/IHZhbHVlc1szXSA6IDEuMFxuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmcm9tIGEgaGV4YWRlY2ltYWwgdmFsdWUuXG4gICAqIEUuZy4gI2ZmMDAwMFxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaGV4IC0gVGhlIGhleCB2YWx1ZS5cbiAgICovXG4gIHNldEZyb21IZXgoaGV4KSB7XG4gICAgZnVuY3Rpb24gaGV4VG9SZ2IoaGV4KSB7XG4gICAgICBjb25zdCByZXN1bHQgPSAvXiM/KFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pJC9pLmV4ZWMoaGV4KVxuICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICA/IHtcbiAgICAgICAgICAgIHI6IHBhcnNlSW50KHJlc3VsdFsxXSwgMTYpLFxuICAgICAgICAgICAgZzogcGFyc2VJbnQocmVzdWx0WzJdLCAxNiksXG4gICAgICAgICAgICBiOiBwYXJzZUludChyZXN1bHRbM10sIDE2KSxcbiAgICAgICAgICB9XG4gICAgICAgIDogbnVsbFxuICAgIH1cbiAgICBjb25zdCByZ2IgPSBoZXhUb1JnYihoZXgpXG4gICAgaWYgKCFyZ2IpIHtcbiAgICAgIGNvbnNvbGUud2FybignSW52YWxpZCBoZXggY29kZTonICsgaGV4KVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRoaXMuc2V0KHJnYi5yLCByZ2IuZywgcmdiLmIpXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZyb20gYSBDU1MgY29sb3IgbmFtZS5cbiAgICogRS5nLiBcInJlZFwiXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIENTUyBjb2xvciBuYW1lLlxuICAgKi9cbiAgc2V0RnJvbUNTU0NvbG9yTmFtZShuYW1lKSB7XG4gICAgY29uc3QgY29sb3VyTmFtZVRvSGV4ID0gKGNvbG91cikgPT4ge1xuICAgICAgY29uc3QgY29sb3JzID0ge1xuICAgICAgICBhbGljZWJsdWU6ICcjZjBmOGZmJyxcbiAgICAgICAgYW50aXF1ZXdoaXRlOiAnI2ZhZWJkNycsXG4gICAgICAgIGFxdWE6ICcjMDBmZmZmJyxcbiAgICAgICAgYXF1YW1hcmluZTogJyM3ZmZmZDQnLFxuICAgICAgICBhenVyZTogJyNmMGZmZmYnLFxuICAgICAgICBiZWlnZTogJyNmNWY1ZGMnLFxuICAgICAgICBiaXNxdWU6ICcjZmZlNGM0JyxcbiAgICAgICAgYmxhY2s6ICcjMDAwMDAwJyxcbiAgICAgICAgYmxhbmNoZWRhbG1vbmQ6ICcjZmZlYmNkJyxcbiAgICAgICAgYmx1ZTogJyMwMDAwZmYnLFxuICAgICAgICBibHVldmlvbGV0OiAnIzhhMmJlMicsXG4gICAgICAgIGJyb3duOiAnI2E1MmEyYScsXG4gICAgICAgIGJ1cmx5d29vZDogJyNkZWI4ODcnLFxuICAgICAgICBjYWRldGJsdWU6ICcjNWY5ZWEwJyxcbiAgICAgICAgY2hhcnRyZXVzZTogJyM3ZmZmMDAnLFxuICAgICAgICBjaG9jb2xhdGU6ICcjZDI2OTFlJyxcbiAgICAgICAgY29yYWw6ICcjZmY3ZjUwJyxcbiAgICAgICAgY29ybmZsb3dlcmJsdWU6ICcjNjQ5NWVkJyxcbiAgICAgICAgY29ybnNpbGs6ICcjZmZmOGRjJyxcbiAgICAgICAgY3JpbXNvbjogJyNkYzE0M2MnLFxuICAgICAgICBjeWFuOiAnIzAwZmZmZicsXG4gICAgICAgIGRhcmtibHVlOiAnIzAwMDA4YicsXG4gICAgICAgIGRhcmtjeWFuOiAnIzAwOGI4YicsXG4gICAgICAgIGRhcmtnb2xkZW5yb2Q6ICcjYjg4NjBiJyxcbiAgICAgICAgZGFya2dyYXk6ICcjYTlhOWE5JyxcbiAgICAgICAgZGFya2dyZWVuOiAnIzAwNjQwMCcsXG4gICAgICAgIGRhcmtraGFraTogJyNiZGI3NmInLFxuICAgICAgICBkYXJrbWFnZW50YTogJyM4YjAwOGInLFxuICAgICAgICBkYXJrb2xpdmVncmVlbjogJyM1NTZiMmYnLFxuICAgICAgICBkYXJrb3JhbmdlOiAnI2ZmOGMwMCcsXG4gICAgICAgIGRhcmtvcmNoaWQ6ICcjOTkzMmNjJyxcbiAgICAgICAgZGFya3JlZDogJyM4YjAwMDAnLFxuICAgICAgICBkYXJrc2FsbW9uOiAnI2U5OTY3YScsXG4gICAgICAgIGRhcmtzZWFncmVlbjogJyM4ZmJjOGYnLFxuICAgICAgICBkYXJrc2xhdGVibHVlOiAnIzQ4M2Q4YicsXG4gICAgICAgIGRhcmtzbGF0ZWdyYXk6ICcjMmY0ZjRmJyxcbiAgICAgICAgZGFya3R1cnF1b2lzZTogJyMwMGNlZDEnLFxuICAgICAgICBkYXJrdmlvbGV0OiAnIzk0MDBkMycsXG4gICAgICAgIGRlZXBwaW5rOiAnI2ZmMTQ5MycsXG4gICAgICAgIGRlZXBza3libHVlOiAnIzAwYmZmZicsXG4gICAgICAgIGRpbWdyYXk6ICcjNjk2OTY5JyxcbiAgICAgICAgZG9kZ2VyYmx1ZTogJyMxZTkwZmYnLFxuICAgICAgICBmaXJlYnJpY2s6ICcjYjIyMjIyJyxcbiAgICAgICAgZmxvcmFsd2hpdGU6ICcjZmZmYWYwJyxcbiAgICAgICAgZm9yZXN0Z3JlZW46ICcjMjI4YjIyJyxcbiAgICAgICAgZnVjaHNpYTogJyNmZjAwZmYnLFxuICAgICAgICBnYWluc2Jvcm86ICcjZGNkY2RjJyxcbiAgICAgICAgZ2hvc3R3aGl0ZTogJyNmOGY4ZmYnLFxuICAgICAgICBnb2xkOiAnI2ZmZDcwMCcsXG4gICAgICAgIGdvbGRlbnJvZDogJyNkYWE1MjAnLFxuICAgICAgICBncmF5OiAnIzgwODA4MCcsXG4gICAgICAgIGdyZWVuOiAnIzAwODAwMCcsXG4gICAgICAgIGdyZWVueWVsbG93OiAnI2FkZmYyZicsXG4gICAgICAgIGhvbmV5ZGV3OiAnI2YwZmZmMCcsXG4gICAgICAgIGhvdHBpbms6ICcjZmY2OWI0JyxcbiAgICAgICAgJ2luZGlhbnJlZCAnOiAnI2NkNWM1YycsXG4gICAgICAgIGluZGlnbzogJyM0YjAwODInLFxuICAgICAgICBpdm9yeTogJyNmZmZmZjAnLFxuICAgICAgICBraGFraTogJyNmMGU2OGMnLFxuICAgICAgICBsYXZlbmRlcjogJyNlNmU2ZmEnLFxuICAgICAgICBsYXZlbmRlcmJsdXNoOiAnI2ZmZjBmNScsXG4gICAgICAgIGxhd25ncmVlbjogJyM3Y2ZjMDAnLFxuICAgICAgICBsZW1vbmNoaWZmb246ICcjZmZmYWNkJyxcbiAgICAgICAgbGlnaHRibHVlOiAnI2FkZDhlNicsXG4gICAgICAgIGxpZ2h0Y29yYWw6ICcjZjA4MDgwJyxcbiAgICAgICAgbGlnaHRjeWFuOiAnI2UwZmZmZicsXG4gICAgICAgIGxpZ2h0Z29sZGVucm9keWVsbG93OiAnI2ZhZmFkMicsXG4gICAgICAgIGxpZ2h0Z3JleTogJyNkM2QzZDMnLFxuICAgICAgICBsaWdodGdyZWVuOiAnIzkwZWU5MCcsXG4gICAgICAgIGxpZ2h0cGluazogJyNmZmI2YzEnLFxuICAgICAgICBsaWdodHNhbG1vbjogJyNmZmEwN2EnLFxuICAgICAgICBsaWdodHNlYWdyZWVuOiAnIzIwYjJhYScsXG4gICAgICAgIGxpZ2h0c2t5Ymx1ZTogJyM4N2NlZmEnLFxuICAgICAgICBsaWdodHNsYXRlZ3JheTogJyM3Nzg4OTknLFxuICAgICAgICBsaWdodHN0ZWVsYmx1ZTogJyNiMGM0ZGUnLFxuICAgICAgICBsaWdodHllbGxvdzogJyNmZmZmZTAnLFxuICAgICAgICBsaW1lOiAnIzAwZmYwMCcsXG4gICAgICAgIGxpbWVncmVlbjogJyMzMmNkMzInLFxuICAgICAgICBsaW5lbjogJyNmYWYwZTYnLFxuICAgICAgICBtYWdlbnRhOiAnI2ZmMDBmZicsXG4gICAgICAgIG1hcm9vbjogJyM4MDAwMDAnLFxuICAgICAgICBtZWRpdW1hcXVhbWFyaW5lOiAnIzY2Y2RhYScsXG4gICAgICAgIG1lZGl1bWJsdWU6ICcjMDAwMGNkJyxcbiAgICAgICAgbWVkaXVtb3JjaGlkOiAnI2JhNTVkMycsXG4gICAgICAgIG1lZGl1bXB1cnBsZTogJyM5MzcwZDgnLFxuICAgICAgICBtZWRpdW1zZWFncmVlbjogJyMzY2IzNzEnLFxuICAgICAgICBtZWRpdW1zbGF0ZWJsdWU6ICcjN2I2OGVlJyxcbiAgICAgICAgbWVkaXVtc3ByaW5nZ3JlZW46ICcjMDBmYTlhJyxcbiAgICAgICAgbWVkaXVtdHVycXVvaXNlOiAnIzQ4ZDFjYycsXG4gICAgICAgIG1lZGl1bXZpb2xldHJlZDogJyNjNzE1ODUnLFxuICAgICAgICBtaWRuaWdodGJsdWU6ICcjMTkxOTcwJyxcbiAgICAgICAgbWludGNyZWFtOiAnI2Y1ZmZmYScsXG4gICAgICAgIG1pc3R5cm9zZTogJyNmZmU0ZTEnLFxuICAgICAgICBtb2NjYXNpbjogJyNmZmU0YjUnLFxuICAgICAgICBuYXZham93aGl0ZTogJyNmZmRlYWQnLFxuICAgICAgICBuYXZ5OiAnIzAwMDA4MCcsXG4gICAgICAgIG9sZGxhY2U6ICcjZmRmNWU2JyxcbiAgICAgICAgb2xpdmU6ICcjODA4MDAwJyxcbiAgICAgICAgb2xpdmVkcmFiOiAnIzZiOGUyMycsXG4gICAgICAgIG9yYW5nZTogJyNmZmE1MDAnLFxuICAgICAgICBvcmFuZ2VyZWQ6ICcjZmY0NTAwJyxcbiAgICAgICAgb3JjaGlkOiAnI2RhNzBkNicsXG4gICAgICAgIHBhbGVnb2xkZW5yb2Q6ICcjZWVlOGFhJyxcbiAgICAgICAgcGFsZWdyZWVuOiAnIzk4ZmI5OCcsXG4gICAgICAgIHBhbGV0dXJxdW9pc2U6ICcjYWZlZWVlJyxcbiAgICAgICAgcGFsZXZpb2xldHJlZDogJyNkODcwOTMnLFxuICAgICAgICBwYXBheWF3aGlwOiAnI2ZmZWZkNScsXG4gICAgICAgIHBlYWNocHVmZjogJyNmZmRhYjknLFxuICAgICAgICBwZXJ1OiAnI2NkODUzZicsXG4gICAgICAgIHBpbms6ICcjZmZjMGNiJyxcbiAgICAgICAgcGx1bTogJyNkZGEwZGQnLFxuICAgICAgICBwb3dkZXJibHVlOiAnI2IwZTBlNicsXG4gICAgICAgIHB1cnBsZTogJyM4MDAwODAnLFxuICAgICAgICByZWJlY2NhcHVycGxlOiAnIzY2MzM5OScsXG4gICAgICAgIHJlZDogJyNmZjAwMDAnLFxuICAgICAgICByb3N5YnJvd246ICcjYmM4ZjhmJyxcbiAgICAgICAgcm95YWxibHVlOiAnIzQxNjllMScsXG4gICAgICAgIHNhZGRsZWJyb3duOiAnIzhiNDUxMycsXG4gICAgICAgIHNhbG1vbjogJyNmYTgwNzInLFxuICAgICAgICBzYW5keWJyb3duOiAnI2Y0YTQ2MCcsXG4gICAgICAgIHNlYWdyZWVuOiAnIzJlOGI1NycsXG4gICAgICAgIHNlYXNoZWxsOiAnI2ZmZjVlZScsXG4gICAgICAgIHNpZW5uYTogJyNhMDUyMmQnLFxuICAgICAgICBzaWx2ZXI6ICcjYzBjMGMwJyxcbiAgICAgICAgc2t5Ymx1ZTogJyM4N2NlZWInLFxuICAgICAgICBzbGF0ZWJsdWU6ICcjNmE1YWNkJyxcbiAgICAgICAgc2xhdGVncmF5OiAnIzcwODA5MCcsXG4gICAgICAgIHNub3c6ICcjZmZmYWZhJyxcbiAgICAgICAgc3ByaW5nZ3JlZW46ICcjMDBmZjdmJyxcbiAgICAgICAgc3RlZWxibHVlOiAnIzQ2ODJiNCcsXG4gICAgICAgIHRhbjogJyNkMmI0OGMnLFxuICAgICAgICB0ZWFsOiAnIzAwODA4MCcsXG4gICAgICAgIHRoaXN0bGU6ICcjZDhiZmQ4JyxcbiAgICAgICAgdG9tYXRvOiAnI2ZmNjM0NycsXG4gICAgICAgIHR1cnF1b2lzZTogJyM0MGUwZDAnLFxuICAgICAgICB2aW9sZXQ6ICcjZWU4MmVlJyxcbiAgICAgICAgd2hlYXQ6ICcjZjVkZWIzJyxcbiAgICAgICAgd2hpdGU6ICcjZmZmZmZmJyxcbiAgICAgICAgd2hpdGVzbW9rZTogJyNmNWY1ZjUnLFxuICAgICAgICB5ZWxsb3c6ICcjZmZmZjAwJyxcbiAgICAgICAgeWVsbG93Z3JlZW46ICcjOWFjZDMyJyxcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBjb2xvcnNbY29sb3VyLnRvTG93ZXJDYXNlKCldICE9ICd1bmRlZmluZWQnKSByZXR1cm4gY29sb3JzW2NvbG91ci50b0xvd2VyQ2FzZSgpXVxuXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgaWYgKG5hbWUuc3RhcnRzV2l0aCgnIycpKSB7XG4gICAgICB0aGlzLnNldEZyb21IZXgobmFtZSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRGcm9tSGV4KGNvbG91ck5hbWVUb0hleChuYW1lKSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaGV4YWRlY2ltYWwgdmFsdWUgb2YgdGhpcyBSR0JBIGNvbG9yLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IC0gUmV0dXJucyB0aGUgaGV4IHZhbHVlLlxuICAgKi9cbiAgdG9IZXgoKSB7XG4gICAgZnVuY3Rpb24gY29tcG9uZW50VG9IZXgoaW50KSB7XG4gICAgICBjb25zdCBoZXggPSBpbnQudG9TdHJpbmcoMTYpXG4gICAgICByZXR1cm4gaGV4Lmxlbmd0aCA9PSAxID8gJzAnICsgaGV4IDogaGV4XG4gICAgfVxuICAgIHJldHVybiAnIycgKyBjb21wb25lbnRUb0hleCh0aGlzLnIpICsgY29tcG9uZW50VG9IZXgodGhpcy5nKSArIGNvbXBvbmVudFRvSGV4KHRoaXMuYilcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBSR0JBIGNvbG9yIGNvbnRhaW5zIHRoZSBzYW1lIHZhbHVlcyBhcyB0aGUgb3RoZXIuXG4gICAqIERlcHJlY2F0ZWQuIFVzZSAjaXNFcXVhbCBpbnN0ZWFkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JHQkF9IG90aGVyIC0gVGhlIG90aGVyIFJHQkEgdG8gY29tcGFyZSB3aXRoLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSAtIFJldHVybnMgdHJ1ZSBvciBmYWxzZS5cbiAgICovXG4gIGVxdWFsKG90aGVyKSB7XG4gICAgY29uc29sZS53YXJuKCdEZXByZWNhdGVkLiBVc2UgI2lzRXF1YWwgaW5zdGVhZC4nKVxuICAgIHJldHVybiB0aGlzLmlzRXF1YWwob3RoZXIpXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoaXMgQ29sb3IgIGNvbnRhaW5zIHRoZSBzYW1lIHZhbHVlcyBhcyB0aGUgb3RoZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7Q29sb3J9IG90aGVyIC0gVGhlIG90aGVyIENvbG9yIHRvIGNvbXBhcmUgd2l0aC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gLSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSB0aGUgc2FtZSwgb3RoZXJ3aXNlLCBgZmFsc2VgLlxuICAgKi9cbiAgaXNFcXVhbChvdGhlcikge1xuICAgIHJldHVybiB0aGlzLnIgPT0gb3RoZXIuciAmJiB0aGlzLmcgPT0gb3RoZXIuZyAmJiB0aGlzLmIgPT0gb3RoZXIuYiAmJiB0aGlzLmEgPT0gb3RoZXIuYVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIFJHQkEgY29sb3IgaXMgTk9UIGV4YWN0bHkgdGhlIHNhbWUgYXMgb3RoZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7UkdCQX0gb3RoZXIgLSAgVGhlIG90aGVyIFJHQkEgdG8gY29tcGFyZSB3aXRoLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSAtIFJldHVybnMgdHJ1ZSBvciBmYWxzZS5cbiAgICovXG4gIG5vdEVxdWFscyhvdGhlcikge1xuICAgIHJldHVybiB0aGlzLnIgIT0gb3RoZXIuciAmJiB0aGlzLmcgIT0gb3RoZXIuZyAmJiB0aGlzLmIgIT0gb3RoZXIuYiAmJiB0aGlzLmEgIT0gb3RoZXIuYVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIFJHQkEgY29sb3IgaXMgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBhcyBvdGhlci5cbiAgICpcbiAgICogQHBhcmFtIHtSR0JBfSBvdGhlciAtIFRoZSBvdGhlciBSR0JBIHRvIGNvbXBhcmUgd2l0aC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHByZWNpc2lvbiAtIFRoZSBwcmVjaXNpb24gdG8gd2hpY2ggdGhlIHZhbHVlcyBtdXN0IG1hdGNoLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSAtIFJldHVybnMgdHJ1ZSBvciBmYWxzZS5cbiAgICovXG4gIGFwcHJveEVxdWFsKG90aGVyLCBwcmVjaXNpb24gPSBOdW1iZXIuRVBTSUxPTikge1xuICAgIHJldHVybiAoXG4gICAgICBNYXRoLmFicyh0aGlzLnIgLSBvdGhlci5yKSA8IHByZWNpc2lvbiAmJlxuICAgICAgTWF0aC5hYnModGhpcy5nIC0gb3RoZXIuZykgPCBwcmVjaXNpb24gJiZcbiAgICAgIE1hdGguYWJzKHRoaXMuYiAtIG90aGVyLmIpIDwgcHJlY2lzaW9uICYmXG4gICAgICBNYXRoLmFicyh0aGlzLmEgLSBvdGhlci5hKSA8IHByZWNpc2lvblxuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IFJHQkEgY29sb3Igd2hpY2ggaXMgdGhpcyBSR0JBIGNvbG9yIGFkZGVkIHRvIG90aGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge1JHQkF9IG90aGVyIC0gVGhlIG90aGVyIFJHQkEgdG8gYWRkLlxuICAgKiBAcmV0dXJuIHtSR0JBfSAtIFJldHVybnMgYSBuZXcgUkdCQS5cbiAgICovXG4gIGFkZChvdGhlcikge1xuICAgIHJldHVybiBuZXcgUkdCQSh0aGlzLnIgKyBvdGhlci5yLCB0aGlzLmcgKyBvdGhlci5nLCB0aGlzLmIgKyBvdGhlci5iLCB0aGlzLmEgKyBvdGhlci5hKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgUkdCQSBjb2xvciB3aGljaCBpcyB0aGlzIFJHQkEgY29sb3Igc3VidHJhY3RlZCBmcm9tIG90aGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge1JHQkF9IG90aGVyIC0gVGhlIG90aGVyIFJHQkEgdG8gc3VidHJhY3QuXG4gICAqIEByZXR1cm4ge1JHQkF9IC0gUmV0dXJucyBhIG5ldyBSR0JBLlxuICAgKi9cbiAgc3VidHJhY3Qob3RoZXIpIHtcbiAgICByZXR1cm4gbmV3IFJHQkEodGhpcy5yIC0gb3RoZXIuciwgdGhpcy5nIC0gb3RoZXIuZywgdGhpcy5iIC0gb3RoZXIuYiwgdGhpcy5hIC0gb3RoZXIuYSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IFJHQkEgY29sb3Igd2hpY2ggaXMgdGhpcyB2ZWN0b3Igc2NhbGVkIGJ5IHNjYWxhci5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxhciAtIFRoZSBzY2FsYXIgdmFsdWUuXG4gICAqIEByZXR1cm4ge1JHQkF9IC0gUmV0dXJucyBhIG5ldyBSR0JBLlxuICAgKi9cbiAgc2NhbGUoc2NhbGFyKSB7XG4gICAgcmV0dXJuIG5ldyBSR0JBKHRoaXMuciAqIHNjYWxhciwgdGhpcy5nICogc2NhbGFyLCB0aGlzLmIgKiBzY2FsYXIsIHRoaXMuYSAqIHNjYWxhcilcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsZXMgdGhpcyBSR0JBIGNvbG9yIGJ5IHNjYWxhci5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxhciAtIFRoZSBzY2FsYXIgdmFsdWUuXG4gICAqL1xuICBzY2FsZUluUGxhY2Uoc2NhbGFyKSB7XG4gICAgdGhpcy5yICo9IHNjYWxhclxuICAgIHRoaXMuZyAqPSBzY2FsYXJcbiAgICB0aGlzLmIgKj0gc2NhbGFyXG4gICAgdGhpcy5hICo9IHNjYWxhclxuICB9XG5cbiAgLyoqXG4gICAqIEFwcGx5IGdhbW1hIGNvcnJlY3Rpb24gdG8gdGhpcyBSR0JBIGNvbG9yLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gZ2FtbWEgLSBUaGUgZ2FtbWEgdmFsdWUuXG4gICAqL1xuICBhcHBseUdhbW1hKGdhbW1hKSB7XG4gICAgdGhpcy5zZXQoTWF0aC5wb3codGhpcy5yLCBnYW1tYSksIE1hdGgucG93KHRoaXMuZywgZ2FtbWEpLCBNYXRoLnBvdyh0aGlzLmIsIGdhbW1hKSwgdGhpcy5hKVxuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRvIGxpbmVhciBjb2xvciBzcGFjZSBhbmQgcmV0dXJucyBhIG5ldyBjb2xvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGdhbW1hIC0gVGhlIGdhbW1hIHZhbHVlLlxuICAgKiBAcmV0dXJuIHtDb2xvcn0gLSBSZXR1cm5zIGEgbmV3IFJHQkEuXG4gICAqL1xuICB0b0xpbmVhcihnYW1tYSA9IDIuMikge1xuICAgIHJldHVybiBuZXcgUkdCQShNYXRoLnBvdyh0aGlzLnIsIGdhbW1hKSwgTWF0aC5wb3codGhpcy5nLCBnYW1tYSksIE1hdGgucG93KHRoaXMuYiwgZ2FtbWEpLCB0aGlzLmEpXG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgdG8gZ2FtbWEgY29sb3Igc3BhY2UgYW5kIHJldHVybnMgYSBuZXcgUkdCQSBjb2xvci5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGdhbW1hIC0gVGhlIGdhbW1hIHZhbHVlLlxuICAgKiBAcmV0dXJuIHtSR0JBfSAtIFJldHVybnMgYSBuZXcgUkdCQS5cbiAgICovXG4gIHRvR2FtbWEoZ2FtbWEgPSAyLjIpIHtcbiAgICByZXR1cm4gbmV3IFJHQkEoTWF0aC5wb3codGhpcy5yLCAxLjAgLyBnYW1tYSksIE1hdGgucG93KHRoaXMuZywgMS4wIC8gZ2FtbWEpLCBNYXRoLnBvdyh0aGlzLmIsIDEuMCAvIGdhbW1hKSwgdGhpcy5hKVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgYW5kIHJldHVybnMgdGhlIHJlbGF0aXZlIGx1bWluYW5jZSBvZiB0aGUgbGluZWFyIFJHQiBjb21wb25lbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgbHVtaW5hbmNlKCkge1xuICAgIHJldHVybiAwLjIxMjYgKiB0aGlzLnIgKyAwLjcxNTIgKiB0aGlzLmcgKyAwLjA3MjIgKiB0aGlzLmJcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdGhpcyBSR0JBIGNvbG9yIGFuZCBvdGhlci5cbiAgICpcbiAgICogQHBhcmFtIHtSR0JBfSBvdGhlciAtIFRoZSBvdGhlciBSR0JBIHRvIGludGVycG9sYXRlIGJldHdlZW4uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0IC0gSW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0cy5cbiAgICogQHJldHVybiB7UkdCQX0gLSBSZXR1cm5zIGEgbmV3IFJHQkEuXG4gICAqL1xuICBsZXJwKG90aGVyLCB0KSB7XG4gICAgY29uc3QgYXIgPSB0aGlzLnJcbiAgICBjb25zdCBhZyA9IHRoaXMuZ1xuICAgIGNvbnN0IGFiID0gdGhpcy5iXG4gICAgY29uc3QgYWEgPSB0aGlzLmFcbiAgICByZXR1cm4gbmV3IFJHQkEoYXIgKyB0ICogKG90aGVyLnIgLSBhciksIGFnICsgdCAqIChvdGhlci5nIC0gYWcpLCBhYiArIHQgKiAob3RoZXIuYiAtIGFiKSwgYWEgKyB0ICogKG90aGVyLmEgLSBhYSkpXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHJhbmRvbSBSR0JBLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gZ2FtbWFPZmZzZXQgLSBUaGUgZ2FtbWEgb2Zmc2V0LlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJhbmRvbUFscGhhIC0gRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBhbHBoYSBjaGFubmVsIGlzIHJhbmRvbS5cbiAgICogQHJldHVybiB7UkdCQX0gLSBSZXR1cm5zIGEgbmV3IHJhbmRvbSBSR0JBLlxuICAgKi9cbiAgc3RhdGljIHJhbmRvbShnYW1tYU9mZnNldCA9IDAuMCwgcmFuZG9tQWxwaGEgPSBmYWxzZSkge1xuICAgIGlmIChnYW1tYU9mZnNldCA+IDAuMCkge1xuICAgICAgcmV0dXJuIG5ldyBSR0JBKFxuICAgICAgICBnYW1tYU9mZnNldCArIE1hdGgucmFuZG9tKCkgKiAoMS4wIC0gZ2FtbWFPZmZzZXQpLFxuICAgICAgICBnYW1tYU9mZnNldCArIE1hdGgucmFuZG9tKCkgKiAoMS4wIC0gZ2FtbWFPZmZzZXQpLFxuICAgICAgICBnYW1tYU9mZnNldCArIE1hdGgucmFuZG9tKCkgKiAoMS4wIC0gZ2FtbWFPZmZzZXQpLFxuICAgICAgICByYW5kb21BbHBoYSA/IGdhbW1hT2Zmc2V0ICsgTWF0aC5yYW5kb20oKSAqICgxLjAgLSBnYW1tYU9mZnNldCkgOiAxLjBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGdhbW1hT2Zmc2V0IDwgMC4wKSB7XG4gICAgICByZXR1cm4gbmV3IFJHQkEoXG4gICAgICAgIE1hdGgucmFuZG9tKCkgKiAoMS4wICsgZ2FtbWFPZmZzZXQpLFxuICAgICAgICBNYXRoLnJhbmRvbSgpICogKDEuMCArIGdhbW1hT2Zmc2V0KSxcbiAgICAgICAgTWF0aC5yYW5kb20oKSAqICgxLjAgKyBnYW1tYU9mZnNldCksXG4gICAgICAgIHJhbmRvbUFscGhhID8gTWF0aC5yYW5kb20oKSAqICgxLjAgKyBnYW1tYU9mZnNldCkgOiAxLjBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBSR0JBKE1hdGgucmFuZG9tKCksIE1hdGgucmFuZG9tKCksIE1hdGgucmFuZG9tKCksIHJhbmRvbUFscGhhID8gTWF0aC5yYW5kb20oKSA6IDEuMClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xvbmVzIHRoaXMgUkdCQSBjb2xvciBhbmQgcmV0dXJucyBhIG5ldyBSR0JBIGNvbG9yLlxuICAgKlxuICAgKiBAcmV0dXJuIHtSR0JBfSAtIFJldHVybnMgYSBuZXcgUkdCQS5cbiAgICovXG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgUkdCQSh0aGlzLl9fZGF0YVswXSwgdGhpcy5fX2RhdGFbMV0sIHRoaXMuX19kYXRhWzJdLCB0aGlzLl9fZGF0YVszXSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB0eXBlIGFzIGFuIGFycmF5LiBPZnRlbiB1c2VkIHRvIHBhc3MgdHlwZXMgdG8gdGhlIEdQVS5cbiAgICpcbiAgICogQHJldHVybiB7YXJyYXl9IC0gUmV0dXJucyBhcyBhbiBhcnJheS5cbiAgICovXG4gIGFzQXJyYXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19kYXRhXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdHlwZSBhcyBhIDMgY29tcG9uZW50IGFycmF5LiBPZnRlbiB1c2VkIHRvIHBhc3MgdHlwZXMgdG8gdGhlIEdQVS5cbiAgICpcbiAgICogQHJldHVybiB7YXJyYXl9IC0gUmV0dXJucyBhcyBhIDMgY29tcG9uZW50IGFycmF5LlxuICAgKi9cbiAgYXMzQ29tcG9uZW50QXJyYXkoKSB7XG4gICAgcmV0dXJuIFt0aGlzLl9fZGF0YVswXSwgdGhpcy5fX2RhdGFbMV0sIHRoaXMuX19kYXRhWzJdXVxuICB9XG5cbiAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBTdGF0aWMgTWV0aG9kc1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFJHQkEgY29sb3IuXG4gICAqIEBwYXJhbSB7Li4ub2JqZWN0fSAuLi5hcmdzIC0gVGhlIC4uLmFyZ3MgcGFyYW0uXG4gICAqIEByZXR1cm4ge1JHQkF9IC0gUmV0dXJucyBhIG5ldyBSR0JBLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZSguLi5hcmdzKSB7XG4gICAgcmV0dXJuIG5ldyBSR0JBKC4uLmFyZ3MpXG4gIH1cblxuICAvKipcbiAgICogVGhlIGNyZWF0ZUZyb21GbG9hdDMyQnVmZmVyIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYnVmZmVyIC0gVGhlIGJ1ZmZlciB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCAtIFRoZSBvZmZzZXQgdmFsdWUuXG4gICAqIEByZXR1cm4ge1JHQkF9IC0gUmV0dXJucyBhIG5ldyBjb2xvci5cbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBjcmVhdGVGcm9tRmxvYXQzMkJ1ZmZlcihidWZmZXIsIG9mZnNldCA9IDApIHtcbiAgICBjb25zb2xlLndhcm4oJ0RlcHJlY2F0ZWQsIHVzZSAjY3JlYXRlRnJvbUJ1ZmZlciBpbnN0ZWFkJylcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVGcm9tQnVmZmVyKGJ1ZmZlciwgb2Zmc2V0ICogNClcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGEgYFJHQkFgIHVzaW5nIGFuIEFycmF5QnVmZmVyLlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGJ1ZmZlciAtIFRoZSBidWZmZXIgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBieXRlT2Zmc2V0IC0gVGhlIG9mZnNldCB2YWx1ZS5cbiAgICogQHJldHVybiB7UkdCQX0gLSBSZXR1cm5zIGEgbmV3IFJHQkEuXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlRnJvbUJ1ZmZlcihidWZmZXIsIGJ5dGVPZmZzZXQpIHtcbiAgICByZXR1cm4gbmV3IFJHQkEobmV3IFVpbnQ4QXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCA0KSkgLy8gNCBieXRlcyBwZXIgMzJiaXQgZmxvYXRcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgRmxvYXQzMiBlbGVtZW50cyB1c2VkIGJ5IHRoaXMgdHlwZS4gVXNlZCB0byBjYWxjdWxhdGUgc3RvcmFnZSByZXF1aXJlbWVudHMgZm9yIGxhcmdlIGFycmF5cyBvZiB0aGlzIHR5cGUuXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhdGljIG51bUVsZW1lbnRzKCkge1xuICAgIHJldHVybiA0XG4gIH1cblxuICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFBlcnNpc3RlbmNlXG5cbiAgLyoqXG4gICAqIFRoZSB0b0pTT04gbWV0aG9kIGVuY29kZXMgdGhpcyB0eXBlIGFzIGEganNvbiBvYmplY3QgZm9yIHBlcnNpc3RlbmNlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IC0gVGhlIGpzb24gb2JqZWN0LlxuICAgKi9cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICByOiB0aGlzLnIsXG4gICAgICBnOiB0aGlzLmcsXG4gICAgICBiOiB0aGlzLmIsXG4gICAgICBhOiB0aGlzLmEsXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBmcm9tSlNPTiBtZXRob2QgZGVjb2RlcyBhIGpzb24gb2JqZWN0IGZvciB0aGlzIHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBqIC0gVGhlIGpzb24gb2JqZWN0LlxuICAgKi9cbiAgZnJvbUpTT04oaikge1xuICAgIHRoaXMuciA9IGouclxuICAgIHRoaXMuZyA9IGouZ1xuICAgIHRoaXMuYiA9IGouYlxuICAgIHRoaXMuYSA9IGouYVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIENTUyByZ2JhIHN0cmluZy5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICB0b0NTU1N0cmluZygpIHtcbiAgICByZXR1cm4gKFxuICAgICAgJ3JnYmEoJyArXG4gICAgICBNYXRoLnJvdW5kKHRoaXMuciAqIDI1NSkgK1xuICAgICAgJywgJyArXG4gICAgICBNYXRoLnJvdW5kKHRoaXMuZyAqIDI1NSkgK1xuICAgICAgJywgJyArXG4gICAgICBNYXRoLnJvdW5kKHRoaXMuYiAqIDI1NSkgK1xuICAgICAgJywgJyArXG4gICAgICB0aGlzLmEgK1xuICAgICAgJyknXG4gICAgKVxuICB9XG59XG5cblJlZ2lzdHJ5LnJlZ2lzdGVyKCdSR0JBJywgUkdCQSlcblxuZXhwb3J0IHsgUkdCQSB9XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSByZXF1aXJlLWpzZG9jICovXG5pbXBvcnQgeyBBdHRyVmFsdWUgfSBmcm9tICcuL0F0dHJWYWx1ZS5qcydcbmltcG9ydCB7IFJlZ2lzdHJ5IH0gZnJvbSAnLi4vUmVnaXN0cnknXG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgY29sb3IgYXMgNCBmbG9hdGluZyBwb2ludCB2YWx1ZXMuXG4gKlxuICogQGV4dGVuZHMgQXR0clZhbHVlXG4gKi9cbmNsYXNzIENvbG9yIGV4dGVuZHMgQXR0clZhbHVlIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBgQ29sb3JgIG9iamVjdCB3aXRoIGFuIFJHQkEgc3RydWN0dXJlLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlciB8IHN0cmluZyB8IEZsb2F0MzJBcnJheSB8IEFycmF5QnVmZmVyfSByIC0gVGhlIHJlZCBjaGFubmVsIG9mIGEgY29sb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBnIC0gVGhlIGdyZWVuIGNoYW5uZWwgb2YgYSBjb2xvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGIgLSBUaGUgYmx1ZSBjaGFubmVsIG9mIGEgY29sb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhIC0gVGhlIGFscGhhICh0cmFuc3BhcmVuY3kpIGNoYW5uZWwgb2YgYSBjb2xvci5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHIgPSAwLCBnID0gMCwgYiA9IDAsIGEgPSAxLjApIHtcbiAgICBzdXBlcigpXG5cbiAgICBpZiAociBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSkge1xuICAgICAgdGhpcy5fX2RhdGEgPSByXG4gICAgfSBlbHNlIGlmIChyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgIGNvbnNvbGUud2FybihgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBuZXcgVmVjNChuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlciwgYnl0ZU9mZnNldCwgNCkpYClcbiAgICAgIGNvbnN0IGJ1ZmZlciA9IHJcbiAgICAgIGNvbnN0IGJ5dGVPZmZzZXQgPSBnXG4gICAgICB0aGlzLl9fZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCA0KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9fZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoNClcbiAgICAgIGlmICh0eXBlb2YgciA9PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoci5zdGFydHNXaXRoKCcjJykpIHtcbiAgICAgICAgICB0aGlzLnNldEZyb21IZXgocilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldEZyb21DU1NDb2xvck5hbWUocilcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fX2RhdGFbMF0gPSByXG4gICAgICAgIHRoaXMuX19kYXRhWzFdID0gZ1xuICAgICAgICB0aGlzLl9fZGF0YVsyXSA9IGJcbiAgICAgICAgdGhpcy5fX2RhdGFbM10gPSBhXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3IgcmVkIGNoYW5uZWwuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSByZWQgY2hhbm5lbC5cbiAgICovXG4gIGdldCByKCkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YVswXVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmb3IgcmVkIGNoYW5uZWwuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBUaGUgdmFsIHBhcmFtLlxuICAgKi9cbiAgc2V0IHIodmFsKSB7XG4gICAgdGhpcy5fX2RhdGFbMF0gPSB2YWxcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIGdyZWVuIGNoYW5uZWwuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSBncmVlbiBjaGFubmVsLlxuICAgKi9cbiAgZ2V0IGcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19kYXRhWzFdXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciBncmVlbiBjaGFubmVsLlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gVGhlIHZhbCBwYXJhbS5cbiAgICovXG4gIHNldCBnKHZhbCkge1xuICAgIHRoaXMuX19kYXRhWzFdID0gdmFsXG4gIH1cblxuICAvKipcbiAgICogR2V0dGVyIGZvciBibHVlIGNoYW5uZWwuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSBibHVlIGNoYW5uZWwuXG4gICAqL1xuICBnZXQgYigpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGFbMl1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0ZXIgZm9yIGJsdWUgY2hhbm5lbC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIFRoZSB2YWwgcGFyYW0uXG4gICAqL1xuICBzZXQgYih2YWwpIHtcbiAgICB0aGlzLl9fZGF0YVsyXSA9IHZhbFxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3IgYWxwaGEgY2hhbm5lbC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFJldHVybnMgdGhlIGFscGhhIGNoYW5uZWwuXG4gICAqL1xuICBnZXQgYSgpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGFbM11cbiAgfVxuICAvKipcbiAgICogU2V0dGVyIGZvciBhbHBoYSB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIFRoZSB2YWwgcGFyYW0uXG4gICAqL1xuICBzZXQgYSh2YWwpIHtcbiAgICB0aGlzLl9fZGF0YVszXSA9IHZhbFxuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmcm9tIHNjYWxhciBjb21wb25lbnRzLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gciAtIFRoZSByZWQgY2hhbm5lbC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGcgIC0gVGhlIGdyZWVuIGNoYW5uZWwuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBiICAtIFRoZSBibHVlIGNoYW5uZWwuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhICAtIFRoZSBhbHBoYSBjaGFubmVsLlxuICAgKi9cbiAgc2V0KHIsIGcsIGIsIGEgPSAxLjApIHtcbiAgICB0aGlzLnIgPSByXG4gICAgdGhpcy5nID0gZ1xuICAgIHRoaXMuYiA9IGJcbiAgICB0aGlzLmEgPSBhXG4gIH1cblxuICAvKipcbiAgICogU2V0cyBjdXJyZW50IGNvbG9yIHN0YXRlIHdpdGggYW5vdGhlciBgQ29sb3JgIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHtDb2xvcn0gb3RoZXIgLSBUaGUgb3RoZXIgY29sb3IgdG8gc2V0IGZyb20uXG4gICAqL1xuICBzZXRGcm9tT3RoZXIob3RoZXIpIHtcbiAgICB0aGlzLnIgPSBvdGhlci5yXG4gICAgdGhpcy5nID0gb3RoZXIuZ1xuICAgIHRoaXMuYiA9IG90aGVyLmJcbiAgICB0aGlzLmEgPSBvdGhlci5hXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZyb20gYSBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWUuXG4gICAqIEUuZy4gI2ZmMDAwMFxuICAgKiBAcGFyYW0ge3N0cmluZ30gaGV4IC0gVGhlIGhleCBzdHJpbmcgdmFsdWUuXG4gICAqL1xuICBzZXRGcm9tSGV4KGhleCkge1xuICAgIGZ1bmN0aW9uIGhleFRvUmdiKGhleCkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gL14jPyhbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KSQvaS5leGVjKGhleClcbiAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgPyB7XG4gICAgICAgICAgICByOiBwYXJzZUludChyZXN1bHRbMV0sIDE2KSxcbiAgICAgICAgICAgIGc6IHBhcnNlSW50KHJlc3VsdFsyXSwgMTYpLFxuICAgICAgICAgICAgYjogcGFyc2VJbnQocmVzdWx0WzNdLCAxNiksXG4gICAgICAgICAgfVxuICAgICAgICA6IG51bGxcbiAgICB9XG4gICAgY29uc3QgcmdiID0gaGV4VG9SZ2IoaGV4KVxuICAgIGlmICghcmdiKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0ludmFsaWQgaGV4IGNvZGU6JyArIGhleClcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB0aGlzLnNldChyZ2IuciAvIDI1NSwgcmdiLmcgLyAyNTUsIHJnYi5iIC8gMjU1KVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIENvbG9yIHZhbHVlcyBmcm9tIGEgQ1NTIGNvbG9yIG5hbWUuXG4gICAqIEUuZy4gXCJyZWRcIlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBDU1MgY29sb3IgbmFtZS5cbiAgICovXG4gIHNldEZyb21DU1NDb2xvck5hbWUobmFtZSkge1xuICAgIGNvbnN0IGNvbG91ck5hbWVUb0hleCA9IChjb2xvdXIpID0+IHtcbiAgICAgIGNvbnN0IGNvbG9ycyA9IHtcbiAgICAgICAgYWxpY2VibHVlOiAnI2YwZjhmZicsXG4gICAgICAgIGFudGlxdWV3aGl0ZTogJyNmYWViZDcnLFxuICAgICAgICBhcXVhOiAnIzAwZmZmZicsXG4gICAgICAgIGFxdWFtYXJpbmU6ICcjN2ZmZmQ0JyxcbiAgICAgICAgYXp1cmU6ICcjZjBmZmZmJyxcbiAgICAgICAgYmVpZ2U6ICcjZjVmNWRjJyxcbiAgICAgICAgYmlzcXVlOiAnI2ZmZTRjNCcsXG4gICAgICAgIGJsYWNrOiAnIzAwMDAwMCcsXG4gICAgICAgIGJsYW5jaGVkYWxtb25kOiAnI2ZmZWJjZCcsXG4gICAgICAgIGJsdWU6ICcjMDAwMGZmJyxcbiAgICAgICAgYmx1ZXZpb2xldDogJyM4YTJiZTInLFxuICAgICAgICBicm93bjogJyNhNTJhMmEnLFxuICAgICAgICBidXJseXdvb2Q6ICcjZGViODg3JyxcbiAgICAgICAgY2FkZXRibHVlOiAnIzVmOWVhMCcsXG4gICAgICAgIGNoYXJ0cmV1c2U6ICcjN2ZmZjAwJyxcbiAgICAgICAgY2hvY29sYXRlOiAnI2QyNjkxZScsXG4gICAgICAgIGNvcmFsOiAnI2ZmN2Y1MCcsXG4gICAgICAgIGNvcm5mbG93ZXJibHVlOiAnIzY0OTVlZCcsXG4gICAgICAgIGNvcm5zaWxrOiAnI2ZmZjhkYycsXG4gICAgICAgIGNyaW1zb246ICcjZGMxNDNjJyxcbiAgICAgICAgY3lhbjogJyMwMGZmZmYnLFxuICAgICAgICBkYXJrYmx1ZTogJyMwMDAwOGInLFxuICAgICAgICBkYXJrY3lhbjogJyMwMDhiOGInLFxuICAgICAgICBkYXJrZ29sZGVucm9kOiAnI2I4ODYwYicsXG4gICAgICAgIGRhcmtncmF5OiAnI2E5YTlhOScsXG4gICAgICAgIGRhcmtncmVlbjogJyMwMDY0MDAnLFxuICAgICAgICBkYXJra2hha2k6ICcjYmRiNzZiJyxcbiAgICAgICAgZGFya21hZ2VudGE6ICcjOGIwMDhiJyxcbiAgICAgICAgZGFya29saXZlZ3JlZW46ICcjNTU2YjJmJyxcbiAgICAgICAgZGFya29yYW5nZTogJyNmZjhjMDAnLFxuICAgICAgICBkYXJrb3JjaGlkOiAnIzk5MzJjYycsXG4gICAgICAgIGRhcmtyZWQ6ICcjOGIwMDAwJyxcbiAgICAgICAgZGFya3NhbG1vbjogJyNlOTk2N2EnLFxuICAgICAgICBkYXJrc2VhZ3JlZW46ICcjOGZiYzhmJyxcbiAgICAgICAgZGFya3NsYXRlYmx1ZTogJyM0ODNkOGInLFxuICAgICAgICBkYXJrc2xhdGVncmF5OiAnIzJmNGY0ZicsXG4gICAgICAgIGRhcmt0dXJxdW9pc2U6ICcjMDBjZWQxJyxcbiAgICAgICAgZGFya3Zpb2xldDogJyM5NDAwZDMnLFxuICAgICAgICBkZWVwcGluazogJyNmZjE0OTMnLFxuICAgICAgICBkZWVwc2t5Ymx1ZTogJyMwMGJmZmYnLFxuICAgICAgICBkaW1ncmF5OiAnIzY5Njk2OScsXG4gICAgICAgIGRvZGdlcmJsdWU6ICcjMWU5MGZmJyxcbiAgICAgICAgZmlyZWJyaWNrOiAnI2IyMjIyMicsXG4gICAgICAgIGZsb3JhbHdoaXRlOiAnI2ZmZmFmMCcsXG4gICAgICAgIGZvcmVzdGdyZWVuOiAnIzIyOGIyMicsXG4gICAgICAgIGZ1Y2hzaWE6ICcjZmYwMGZmJyxcbiAgICAgICAgZ2FpbnNib3JvOiAnI2RjZGNkYycsXG4gICAgICAgIGdob3N0d2hpdGU6ICcjZjhmOGZmJyxcbiAgICAgICAgZ29sZDogJyNmZmQ3MDAnLFxuICAgICAgICBnb2xkZW5yb2Q6ICcjZGFhNTIwJyxcbiAgICAgICAgZ3JheTogJyM4MDgwODAnLFxuICAgICAgICBncmVlbjogJyMwMDgwMDAnLFxuICAgICAgICBncmVlbnllbGxvdzogJyNhZGZmMmYnLFxuICAgICAgICBob25leWRldzogJyNmMGZmZjAnLFxuICAgICAgICBob3RwaW5rOiAnI2ZmNjliNCcsXG4gICAgICAgICdpbmRpYW5yZWQgJzogJyNjZDVjNWMnLFxuICAgICAgICBpbmRpZ286ICcjNGIwMDgyJyxcbiAgICAgICAgaXZvcnk6ICcjZmZmZmYwJyxcbiAgICAgICAga2hha2k6ICcjZjBlNjhjJyxcbiAgICAgICAgbGF2ZW5kZXI6ICcjZTZlNmZhJyxcbiAgICAgICAgbGF2ZW5kZXJibHVzaDogJyNmZmYwZjUnLFxuICAgICAgICBsYXduZ3JlZW46ICcjN2NmYzAwJyxcbiAgICAgICAgbGVtb25jaGlmZm9uOiAnI2ZmZmFjZCcsXG4gICAgICAgIGxpZ2h0Ymx1ZTogJyNhZGQ4ZTYnLFxuICAgICAgICBsaWdodGNvcmFsOiAnI2YwODA4MCcsXG4gICAgICAgIGxpZ2h0Y3lhbjogJyNlMGZmZmYnLFxuICAgICAgICBsaWdodGdvbGRlbnJvZHllbGxvdzogJyNmYWZhZDInLFxuICAgICAgICBsaWdodGdyZXk6ICcjZDNkM2QzJyxcbiAgICAgICAgbGlnaHRncmVlbjogJyM5MGVlOTAnLFxuICAgICAgICBsaWdodHBpbms6ICcjZmZiNmMxJyxcbiAgICAgICAgbGlnaHRzYWxtb246ICcjZmZhMDdhJyxcbiAgICAgICAgbGlnaHRzZWFncmVlbjogJyMyMGIyYWEnLFxuICAgICAgICBsaWdodHNreWJsdWU6ICcjODdjZWZhJyxcbiAgICAgICAgbGlnaHRzbGF0ZWdyYXk6ICcjNzc4ODk5JyxcbiAgICAgICAgbGlnaHRzdGVlbGJsdWU6ICcjYjBjNGRlJyxcbiAgICAgICAgbGlnaHR5ZWxsb3c6ICcjZmZmZmUwJyxcbiAgICAgICAgbGltZTogJyMwMGZmMDAnLFxuICAgICAgICBsaW1lZ3JlZW46ICcjMzJjZDMyJyxcbiAgICAgICAgbGluZW46ICcjZmFmMGU2JyxcbiAgICAgICAgbWFnZW50YTogJyNmZjAwZmYnLFxuICAgICAgICBtYXJvb246ICcjODAwMDAwJyxcbiAgICAgICAgbWVkaXVtYXF1YW1hcmluZTogJyM2NmNkYWEnLFxuICAgICAgICBtZWRpdW1ibHVlOiAnIzAwMDBjZCcsXG4gICAgICAgIG1lZGl1bW9yY2hpZDogJyNiYTU1ZDMnLFxuICAgICAgICBtZWRpdW1wdXJwbGU6ICcjOTM3MGQ4JyxcbiAgICAgICAgbWVkaXVtc2VhZ3JlZW46ICcjM2NiMzcxJyxcbiAgICAgICAgbWVkaXVtc2xhdGVibHVlOiAnIzdiNjhlZScsXG4gICAgICAgIG1lZGl1bXNwcmluZ2dyZWVuOiAnIzAwZmE5YScsXG4gICAgICAgIG1lZGl1bXR1cnF1b2lzZTogJyM0OGQxY2MnLFxuICAgICAgICBtZWRpdW12aW9sZXRyZWQ6ICcjYzcxNTg1JyxcbiAgICAgICAgbWlkbmlnaHRibHVlOiAnIzE5MTk3MCcsXG4gICAgICAgIG1pbnRjcmVhbTogJyNmNWZmZmEnLFxuICAgICAgICBtaXN0eXJvc2U6ICcjZmZlNGUxJyxcbiAgICAgICAgbW9jY2FzaW46ICcjZmZlNGI1JyxcbiAgICAgICAgbmF2YWpvd2hpdGU6ICcjZmZkZWFkJyxcbiAgICAgICAgbmF2eTogJyMwMDAwODAnLFxuICAgICAgICBvbGRsYWNlOiAnI2ZkZjVlNicsXG4gICAgICAgIG9saXZlOiAnIzgwODAwMCcsXG4gICAgICAgIG9saXZlZHJhYjogJyM2YjhlMjMnLFxuICAgICAgICBvcmFuZ2U6ICcjZmZhNTAwJyxcbiAgICAgICAgb3JhbmdlcmVkOiAnI2ZmNDUwMCcsXG4gICAgICAgIG9yY2hpZDogJyNkYTcwZDYnLFxuICAgICAgICBwYWxlZ29sZGVucm9kOiAnI2VlZThhYScsXG4gICAgICAgIHBhbGVncmVlbjogJyM5OGZiOTgnLFxuICAgICAgICBwYWxldHVycXVvaXNlOiAnI2FmZWVlZScsXG4gICAgICAgIHBhbGV2aW9sZXRyZWQ6ICcjZDg3MDkzJyxcbiAgICAgICAgcGFwYXlhd2hpcDogJyNmZmVmZDUnLFxuICAgICAgICBwZWFjaHB1ZmY6ICcjZmZkYWI5JyxcbiAgICAgICAgcGVydTogJyNjZDg1M2YnLFxuICAgICAgICBwaW5rOiAnI2ZmYzBjYicsXG4gICAgICAgIHBsdW06ICcjZGRhMGRkJyxcbiAgICAgICAgcG93ZGVyYmx1ZTogJyNiMGUwZTYnLFxuICAgICAgICBwdXJwbGU6ICcjODAwMDgwJyxcbiAgICAgICAgcmViZWNjYXB1cnBsZTogJyM2NjMzOTknLFxuICAgICAgICByZWQ6ICcjZmYwMDAwJyxcbiAgICAgICAgcm9zeWJyb3duOiAnI2JjOGY4ZicsXG4gICAgICAgIHJveWFsYmx1ZTogJyM0MTY5ZTEnLFxuICAgICAgICBzYWRkbGVicm93bjogJyM4YjQ1MTMnLFxuICAgICAgICBzYWxtb246ICcjZmE4MDcyJyxcbiAgICAgICAgc2FuZHlicm93bjogJyNmNGE0NjAnLFxuICAgICAgICBzZWFncmVlbjogJyMyZThiNTcnLFxuICAgICAgICBzZWFzaGVsbDogJyNmZmY1ZWUnLFxuICAgICAgICBzaWVubmE6ICcjYTA1MjJkJyxcbiAgICAgICAgc2lsdmVyOiAnI2MwYzBjMCcsXG4gICAgICAgIHNreWJsdWU6ICcjODdjZWViJyxcbiAgICAgICAgc2xhdGVibHVlOiAnIzZhNWFjZCcsXG4gICAgICAgIHNsYXRlZ3JheTogJyM3MDgwOTAnLFxuICAgICAgICBzbm93OiAnI2ZmZmFmYScsXG4gICAgICAgIHNwcmluZ2dyZWVuOiAnIzAwZmY3ZicsXG4gICAgICAgIHN0ZWVsYmx1ZTogJyM0NjgyYjQnLFxuICAgICAgICB0YW46ICcjZDJiNDhjJyxcbiAgICAgICAgdGVhbDogJyMwMDgwODAnLFxuICAgICAgICB0aGlzdGxlOiAnI2Q4YmZkOCcsXG4gICAgICAgIHRvbWF0bzogJyNmZjYzNDcnLFxuICAgICAgICB0dXJxdW9pc2U6ICcjNDBlMGQwJyxcbiAgICAgICAgdmlvbGV0OiAnI2VlODJlZScsXG4gICAgICAgIHdoZWF0OiAnI2Y1ZGViMycsXG4gICAgICAgIHdoaXRlOiAnI2ZmZmZmZicsXG4gICAgICAgIHdoaXRlc21va2U6ICcjZjVmNWY1JyxcbiAgICAgICAgeWVsbG93OiAnI2ZmZmYwMCcsXG4gICAgICAgIHllbGxvd2dyZWVuOiAnIzlhY2QzMicsXG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgY29sb3JzW2NvbG91ci50b0xvd2VyQ2FzZSgpXSAhPSAndW5kZWZpbmVkJykgcmV0dXJuIGNvbG9yc1tjb2xvdXIudG9Mb3dlckNhc2UoKV1cblxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmIChuYW1lLnN0YXJ0c1dpdGgoJyMnKSkge1xuICAgICAgdGhpcy5zZXRGcm9tSGV4KG5hbWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0RnJvbUhleChjb2xvdXJOYW1lVG9IZXgobmFtZSkpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGhleGFkZWNpbWFsIHZhbHVlIG9mIHRoaXMgY29sb3IsIGluY2x1ZGluZyB0aGUgbGVhZGluZyBcIiNcIiBjaGFyYWN0ZXIuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gLSBSZXR1cm5zIHRoZSBoZXggdmFsdWUuXG4gICAqL1xuICB0b0hleCgpIHtcbiAgICBjb25zdCB0b0hleCA9IChjKSA9PiB7XG4gICAgICBjb25zdCBpbnQgPSBNYXRoLnJvdW5kKGMgKiAyNTUpXG4gICAgICBjb25zdCBoZXggPSBpbnQudG9TdHJpbmcoMTYpXG4gICAgICByZXR1cm4gaGV4Lmxlbmd0aCA9PSAxID8gJzAnICsgaGV4IDogaGV4XG4gICAgfVxuICAgIHJldHVybiBgIyR7dG9IZXgodGhpcy5yKX0ke3RvSGV4KHRoaXMuZyl9JHt0b0hleCh0aGlzLmIpfWBcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBjb2xvciBjb250YWlucyB0aGUgc2FtZSB2YWx1ZXMgYXMgdGhlIG90aGVyLlxuICAgKiBEZXByZWNhdGVkLiBVc2UgI2lzRXF1YWwgaW5zdGVhZC5cbiAgICpcbiAgICogQHBhcmFtIHtDb2xvcn0gb3RoZXIgLSBUaGUgb3RoZXIgY29sb3IgdG8gY29tcGFyZSB3aXRoLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSAtIFJldHVybnMgdHJ1ZSBvciBmYWxzZS5cbiAgICovXG4gIGVxdWFsKG90aGVyKSB7XG4gICAgY29uc29sZS53YXJuKCdEZXByZWNhdGVkLiBVc2UgI2lzRXF1YWwgaW5zdGVhZC4nKVxuICAgIHJldHVybiB0aGlzLmlzRXF1YWwob3RoZXIpXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoaXMgQ29sb3IgIGNvbnRhaW5zIHRoZSBzYW1lIHZhbHVlcyBhcyB0aGUgb3RoZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7Q29sb3J9IG90aGVyIC0gVGhlIG90aGVyIENvbG9yIHRvIGNvbXBhcmUgd2l0aC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gLSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSB0aGUgc2FtZSwgb3RoZXJ3aXNlLCBgZmFsc2VgLlxuICAgKi9cbiAgaXNFcXVhbChvdGhlcikge1xuICAgIHJldHVybiB0aGlzLnIgPT0gb3RoZXIuciAmJiB0aGlzLmcgPT0gb3RoZXIuZyAmJiB0aGlzLmIgPT0gb3RoZXIuYiAmJiB0aGlzLmEgPT0gb3RoZXIuYVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIGNvbG9yIGlzIE5PVCBleGFjdGx5IHRoZSBzYW1lIGFzIG90aGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge0NvbG9yfSBvdGhlciAtIFRoZSBvdGhlciBjb2xvciB0byBjb21wYXJlIHdpdGguXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gUmV0dXJucyB0cnVlIG9yIGZhbHNlLlxuICAgKi9cbiAgbm90RXF1YWxzKG90aGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuciAhPSBvdGhlci5yICYmIHRoaXMuZyAhPSBvdGhlci5nICYmIHRoaXMuYiAhPSBvdGhlci5iICYmIHRoaXMuYSAhPSBvdGhlci5hXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgY29sb3IgaXMgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBhcyBvdGhlci5cbiAgICpcbiAgICogQHBhcmFtIHtDb2xvcn0gb3RoZXIgLSBUaGUgb3RoZXIgY29sb3IgdG8gY29tcGFyZSB3aXRoLlxuICAgKiBAcGFyYW0ge251bWJlcn0gcHJlY2lzaW9uIC0gVGhlIHByZWNpc2lvbiB0byB3aGljaCB0aGUgdmFsdWVzIG11c3QgbWF0Y2guXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gUmV0dXJucyB0cnVlIG9yIGZhbHNlLlxuICAgKi9cbiAgYXBwcm94RXF1YWwob3RoZXIsIHByZWNpc2lvbiA9IE51bWJlci5FUFNJTE9OKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIE1hdGguYWJzKHRoaXMuciAtIG90aGVyLnIpIDwgcHJlY2lzaW9uICYmXG4gICAgICBNYXRoLmFicyh0aGlzLmcgLSBvdGhlci5nKSA8IHByZWNpc2lvbiAmJlxuICAgICAgTWF0aC5hYnModGhpcy5iIC0gb3RoZXIuYikgPCBwcmVjaXNpb24gJiZcbiAgICAgIE1hdGguYWJzKHRoaXMuYSAtIG90aGVyLmEpIDwgcHJlY2lzaW9uXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgQ29sb3Igd2hpY2ggaXMgdGhpcyBDb2xvciBhZGRlZCB0byBvdGhlci5cbiAgICpcbiAgICogQHBhcmFtIHtDb2xvcn0gb3RoZXIgLSBUaGUgb3RoZXIgY29sb3IgdG8gYWRkLlxuICAgKiBAcmV0dXJuIHtDb2xvcn0gLSBSZXR1cm5zIGEgbmV3IGNvbG9yLlxuICAgKi9cbiAgYWRkKG90aGVyKSB7XG4gICAgcmV0dXJuIG5ldyBDb2xvcih0aGlzLnIgKyBvdGhlci5yLCB0aGlzLmcgKyBvdGhlci5nLCB0aGlzLmIgKyBvdGhlci5iLCB0aGlzLmEgKyBvdGhlci5hKVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhpcyBDb2xvciBieSBhZGRpbmcgdGhlIHZhbHVlcyBmcm9tIHRoZSBvdGhlciBjb2xvci5cbiAgICpcbiAgICogQHBhcmFtIHtDb2xvcn0gb3RoZXIgLSBUaGUgb3RoZXIgY29sb3IgdG8gYWRkLlxuICAgKi9cbiAgYWRkSW5QbGFjZShvdGhlcikge1xuICAgIHRoaXMuciArPSBvdGhlci5yXG4gICAgdGhpcy5nICs9IG90aGVyLmdcbiAgICB0aGlzLmIgKz0gb3RoZXIuYlxuICAgIHRoaXMuYSArPSBvdGhlci5hXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIG5ldyBjb2xvciB3aGljaCBpcyB0aGlzIGNvbG9yIHN1YnRyYWN0ZWQgZnJvbSBvdGhlci5cbiAgICpcbiAgICogQHBhcmFtIHtDb2xvcn0gb3RoZXIgLSBUaGUgb3RoZXIgY29sb3IgdG8gc3VidHJhY3QuXG4gICAqIEByZXR1cm4ge0NvbG9yfSAtIFJldHVybnMgYSBuZXcgY29sb3IuXG4gICAqL1xuICBzdWJ0cmFjdChvdGhlcikge1xuICAgIHJldHVybiBuZXcgQ29sb3IodGhpcy5yIC0gb3RoZXIuciwgdGhpcy5nIC0gb3RoZXIuZywgdGhpcy5iIC0gb3RoZXIuYiwgdGhpcy5hIC0gb3RoZXIuYSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsZXMgdGhpcyBjb2xvciBieSBzY2FsYXIgYW5kIHJldHVybiB0aGUgcmVzdWx0IGFzIGEgbmV3IFZlYzQuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsYXIgLSBUaGUgc2NhbGFyIHZhbHVlLlxuICAgKiBAcmV0dXJuIHtDb2xvcn0gLSBSZXR1cm5zIGEgbmV3IGNvbG9yLlxuICAgKi9cbiAgc2NhbGUoc2NhbGFyKSB7XG4gICAgcmV0dXJuIG5ldyBDb2xvcih0aGlzLnIgKiBzY2FsYXIsIHRoaXMuZyAqIHNjYWxhciwgdGhpcy5iICogc2NhbGFyLCB0aGlzLmEgKiBzY2FsYXIpXG4gIH1cblxuICAvKipcbiAgICogU2NhbGVzIHRoaXMgY29sb3IgYnkgc2NhbGFyLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGFyIC0gVGhlIHNjYWxhciB2YWx1ZS5cbiAgICovXG4gIHNjYWxlSW5QbGFjZShzY2FsYXIpIHtcbiAgICB0aGlzLnIgKj0gc2NhbGFyXG4gICAgdGhpcy5nICo9IHNjYWxhclxuICAgIHRoaXMuYiAqPSBzY2FsYXJcbiAgICB0aGlzLmEgKj0gc2NhbGFyXG4gIH1cblxuICAvKipcbiAgICogQXBwbHkgZ2FtbWEgY29ycmVjdGlvbiB0byB0aGlzIGNvbG9yXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBnYW1tYSAtIFRoZSBnYW1tYSB2YWx1ZS5cbiAgICovXG4gIGFwcGx5R2FtbWEoZ2FtbWEpIHtcbiAgICB0aGlzLnNldChNYXRoLnBvdyh0aGlzLnIsIGdhbW1hKSwgTWF0aC5wb3codGhpcy5nLCBnYW1tYSksIE1hdGgucG93KHRoaXMuYiwgZ2FtbWEpLCB0aGlzLmEpXG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgdG8gbGluZWFyIGNvbG9yIHNwYWNlIGFuZCByZXR1cm5zIGEgbmV3IGNvbG9yXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBnYW1tYSAtIFRoZSBnYW1tYSB2YWx1ZS5cbiAgICogQHJldHVybiB7Q29sb3J9IC0gUmV0dXJucyBhIG5ldyBjb2xvci5cbiAgICovXG4gIHRvTGluZWFyKGdhbW1hID0gMi4yKSB7XG4gICAgcmV0dXJuIG5ldyBDb2xvcihNYXRoLnBvdyh0aGlzLnIsIGdhbW1hKSwgTWF0aC5wb3codGhpcy5nLCBnYW1tYSksIE1hdGgucG93KHRoaXMuYiwgZ2FtbWEpLCB0aGlzLmEpXG4gIH1cblxuICAvKipcbiAgICogcmV0dXJucyBhIG5ldyBjb2xvciB2YWx1ZSB2YWx1ZSBpcyBtYXBwZWQgaW50byBhIGdhbW1hIGN1cnZlXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBnYW1tYSAtIFRoZSBnYW1tYSB2YWx1ZS5cbiAgICogQHJldHVybiB7Q29sb3J9IC0gUmV0dXJucyBhIG5ldyBjb2xvci5cbiAgICovXG4gIHRvR2FtbWEoZ2FtbWEgPSAyLjIpIHtcbiAgICByZXR1cm4gbmV3IENvbG9yKFxuICAgICAgTWF0aC5wb3codGhpcy5yLCAxLjAgLyBnYW1tYSksXG4gICAgICBNYXRoLnBvdyh0aGlzLmcsIDEuMCAvIGdhbW1hKSxcbiAgICAgIE1hdGgucG93KHRoaXMuYiwgMS4wIC8gZ2FtbWEpLFxuICAgICAgdGhpcy5hXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgYW5kIHJldHVybnMgdGhlIGx1bWluYW5jZSBvZiB0aGUgbGluZWFyIFJHQiBjb21wb25lbnRzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGx1bWluYW5jZSgpIHtcbiAgICByZXR1cm4gMC4yMTI2ICogdGhpcy5yICsgMC43MTUyICogdGhpcy5nICsgMC4wNzIyICogdGhpcy5iXG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHRoaXMgY29sb3IgYW5kIG90aGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge0NvbG9yfSBvdGhlciAtIFRoZSBvdGhlciBjb2xvciB0byBpbnRlcnBvbGF0ZSBiZXR3ZWVuLlxuICAgKiBAcGFyYW0ge251bWJlcn0gdCAtIEludGVycG9sYXRpb24gYW1vdW50IGJldHdlZW4gdGhlIHR3byBpbnB1dHMuXG4gICAqIEByZXR1cm4ge0NvbG9yfSAtIFJldHVybnMgYSBuZXcgY29sb3IuXG4gICAqL1xuICBsZXJwKG90aGVyLCB0KSB7XG4gICAgY29uc3QgYXIgPSB0aGlzLnJcbiAgICBjb25zdCBhZyA9IHRoaXMuZ1xuICAgIGNvbnN0IGFiID0gdGhpcy5iXG4gICAgY29uc3QgYWEgPSB0aGlzLmFcbiAgICByZXR1cm4gbmV3IENvbG9yKGFyICsgdCAqIChvdGhlci5yIC0gYXIpLCBhZyArIHQgKiAob3RoZXIuZyAtIGFnKSwgYWIgKyB0ICogKG90aGVyLmIgLSBhYiksIGFhICsgdCAqIChvdGhlci5hIC0gYWEpKVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSByYW5kb20gY29sb3IuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBnYW1tYU9mZnNldCAtIFRoZSBnYW1tYSBvZmZzZXQuIFZhbHVlcyBiZXR3ZWVuIDAgYW5kIDEgaW5jcmVhc2UgdGhlIGF2ZXJhZ2UgYnJpZ2h0bmVzcyBvZiB0aGUgZ2VuZXJhdGVkIGNvbG9yLiBWYWx1ZXMgYmV0d2VlbiAwIGFuZCAtMSBkYXJrZW4gdGhlIGdlbmVyYXRlZCBjb2xvciB2YWx1ZXMuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmFuZG9tQWxwaGEgLSBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGFscGhhIGNoYW5uZWwgaXMgcmFuZG9tLiBJZiBub3QsIHRoZSBhbHBoYSB2YWx1ZXMgd2lsbCBiZSAxLjAuXG4gICAqIEByZXR1cm4ge0NvbG9yfSAtIFRoZSBuZXcgcmFuZG9tIGNvbG9yLlxuICAgKi9cbiAgc3RhdGljIHJhbmRvbShnYW1tYU9mZnNldCA9IDAuMCwgcmFuZG9tQWxwaGEgPSBmYWxzZSkge1xuICAgIGlmIChnYW1tYU9mZnNldCA+IDAuMCkge1xuICAgICAgcmV0dXJuIG5ldyBDb2xvcihcbiAgICAgICAgZ2FtbWFPZmZzZXQgKyBNYXRoLnJhbmRvbSgpICogKDEuMCAtIGdhbW1hT2Zmc2V0KSxcbiAgICAgICAgZ2FtbWFPZmZzZXQgKyBNYXRoLnJhbmRvbSgpICogKDEuMCAtIGdhbW1hT2Zmc2V0KSxcbiAgICAgICAgZ2FtbWFPZmZzZXQgKyBNYXRoLnJhbmRvbSgpICogKDEuMCAtIGdhbW1hT2Zmc2V0KSxcbiAgICAgICAgcmFuZG9tQWxwaGEgPyBnYW1tYU9mZnNldCArIE1hdGgucmFuZG9tKCkgKiAoMS4wIC0gZ2FtbWFPZmZzZXQpIDogMS4wXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKGdhbW1hT2Zmc2V0IDwgMC4wKSB7XG4gICAgICByZXR1cm4gbmV3IENvbG9yKFxuICAgICAgICBNYXRoLnJhbmRvbSgpICogKDEuMCArIGdhbW1hT2Zmc2V0KSxcbiAgICAgICAgTWF0aC5yYW5kb20oKSAqICgxLjAgKyBnYW1tYU9mZnNldCksXG4gICAgICAgIE1hdGgucmFuZG9tKCkgKiAoMS4wICsgZ2FtbWFPZmZzZXQpLFxuICAgICAgICByYW5kb21BbHBoYSA/IE1hdGgucmFuZG9tKCkgKiAoMS4wICsgZ2FtbWFPZmZzZXQpIDogMS4wXG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBDb2xvcihNYXRoLnJhbmRvbSgpLCBNYXRoLnJhbmRvbSgpLCBNYXRoLnJhbmRvbSgpLCByYW5kb21BbHBoYSA/IE1hdGgucmFuZG9tKCkgOiAxLjApXG4gIH1cblxuICAvKipcbiAgICogQ2xvbmVzIHRoaXMgY29sb3IgYW5kIHJldHVybnMgYSBuZXcgY29sb3IuXG4gICAqXG4gICAqIEByZXR1cm4ge0NvbG9yfSAtIFJldHVybnMgYSBuZXcgY29sb3IuXG4gICAqL1xuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IENvbG9yKHRoaXMuX19kYXRhWzBdLCB0aGlzLl9fZGF0YVsxXSwgdGhpcy5fX2RhdGFbMl0sIHRoaXMuX19kYXRhWzNdKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHR5cGUgYXMgYW4gYXJyYXkuIE9mdGVuIHVzZWQgdG8gcGFzcyB0eXBlcyB0byB0aGUgR1BVLlxuICAgKlxuICAgKiBAcmV0dXJuIHthcnJheX0gLSBSZXR1cm5zIGFzIGFuIGFycmF5LlxuICAgKi9cbiAgYXNBcnJheSgpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGFcbiAgfVxuXG4gIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gU3RhdGljIE1ldGhvZHNcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBjb2xvci5cbiAgICogQHBhcmFtIHsuLi5vYmplY3R9IC4uLmFyZ3MgLSBUaGUgLi4uYXJncyBwYXJhbS5cbiAgICogQHJldHVybiB7Q29sb3J9IC0gUmV0dXJucyBhIG5ldyBjb2xvci5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBjcmVhdGUoLi4uYXJncykge1xuICAgIHJldHVybiBuZXcgQ29sb3IoLi4uYXJncylcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgY3JlYXRlRnJvbUZsb2F0MzJCdWZmZXIgbWV0aG9kLlxuICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBidWZmZXIgLSBUaGUgYnVmZmVyIHZhbHVlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IC0gVGhlIG9mZnNldCB2YWx1ZS5cbiAgICogQHJldHVybiB7Q29sb3J9IC0gUmV0dXJucyBhIG5ldyBjb2xvci5cbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBjcmVhdGVGcm9tRmxvYXQzMkJ1ZmZlcihidWZmZXIsIG9mZnNldCA9IDApIHtcbiAgICBjb25zb2xlLndhcm4oJ0RlcHJlY2F0ZWQsIHVzZSAjY3JlYXRlRnJvbUJ1ZmZlciBpbnN0ZWFkJylcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVGcm9tQnVmZmVyKGJ1ZmZlciwgb2Zmc2V0ICogNClcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGEgYENvbG9yYCB1c2luZyBhbiBBcnJheUJ1ZmZlci5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBidWZmZXIgLSBUaGUgYnVmZmVyIHZhbHVlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gYnl0ZU9mZnNldCAtIFRoZSBvZmZzZXQgdmFsdWUuXG4gICAqIEByZXR1cm4ge0NvbG9yfSAtIFJldHVybnMgYSBuZXcgY29sb3IuXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlRnJvbUJ1ZmZlcihidWZmZXIsIGJ5dGVPZmZzZXQpIHtcbiAgICByZXR1cm4gbmV3IENvbG9yKG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCA0KSkgLy8gNCBieXRlcyBwZXIgMzJiaXQgZmxvYXRcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgRmxvYXQzMiBlbGVtZW50cyB1c2VkIGJ5IHRoaXMgdHlwZS4gVXNlZCB0byBjYWxjdWxhdGUgc3RvcmFnZSByZXF1aXJlbWVudHMgZm9yIGxhcmdlIGFycmF5cyBvZiB0aGlzIHR5cGUuXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhdGljIG51bUVsZW1lbnRzKCkge1xuICAgIHJldHVybiA0XG4gIH1cblxuICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFBlcnNpc3RlbmNlXG5cbiAgLyoqXG4gICAqIFRoZSB0b0pTT04gbWV0aG9kIGVuY29kZXMgdGhpcyB0eXBlIGFzIGEganNvbiBvYmplY3QgZm9yIHBlcnNpc3RlbmNlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IC0gVGhlIGpzb24gb2JqZWN0LlxuICAgKi9cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICByOiB0aGlzLnIsXG4gICAgICBnOiB0aGlzLmcsXG4gICAgICBiOiB0aGlzLmIsXG4gICAgICBhOiB0aGlzLmEsXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBmcm9tSlNPTiBtZXRob2QgZGVjb2RlcyBhIGpzb24gb2JqZWN0IGZvciB0aGlzIHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBqIC0gVGhlIGpzb24gb2JqZWN0LlxuICAgKi9cbiAgZnJvbUpTT04oaikge1xuICAgIHRoaXMuciA9IGouclxuICAgIHRoaXMuZyA9IGouZ1xuICAgIHRoaXMuYiA9IGouYlxuICAgIHRoaXMuYSA9IGouYVxuICB9XG5cbiAgLyoqXG4gICAqIExvYWRzIHRoZSBzdGF0ZSBvZiB0aGUgdmFsdWUgZnJvbSBhIGJpbmFyeSByZWFkZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7QmluUmVhZGVyfSByZWFkZXIgLSBUaGUgcmVhZGVyIHZhbHVlLlxuICAgKi9cbiAgcmVhZEJpbmFyeShyZWFkZXIpIHtcbiAgICB0aGlzLnIgPSByZWFkZXIubG9hZEZsb2F0MzIoKVxuICAgIHRoaXMuZyA9IHJlYWRlci5sb2FkRmxvYXQzMigpXG4gICAgdGhpcy5iID0gcmVhZGVyLmxvYWRGbG9hdDMyKClcbiAgICB0aGlzLmEgPSByZWFkZXIubG9hZEZsb2F0MzIoKVxuICB9XG59XG5cblJlZ2lzdHJ5LnJlZ2lzdGVyKCdDb2xvcicsIENvbG9yKVxuXG5leHBvcnQgeyBDb2xvciB9XG4iLCJpbXBvcnQgeyBBdHRyVmFsdWUgfSBmcm9tICcuL0F0dHJWYWx1ZS5qcydcbmltcG9ydCB7IFJlZ2lzdHJ5IH0gZnJvbSAnLi4vUmVnaXN0cnknXG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGV1bGVyIGFuZ2xlcy4gRXVsZXIgYW5nbGVzIGRlc2NyaWJlIHJvdGF0aW5nIGFuIG9iamVjdFxuICogYXJvdW5kIGl0cyB2YXJpb3VzIGF4aXMgaW4gYSBzcGVjaWZpZWQgYXhpcyBvcmRlci5cbiAqXG4gKiBAZXh0ZW5kcyBBdHRyVmFsdWVcbiAqL1xuY2xhc3MgRXVsZXJBbmdsZXMgZXh0ZW5kcyBBdHRyVmFsdWUge1xuICAvKipcbiAgICogQ3JlYXRlIGEgZXVsZXIgYW5nbGUuIFJlY2VpdmVzIHRoZSB4eXogdmFsdWVzIGluIHJhZGlhbnMgYW5kIHRoZSBvcmRlciB0aGF0IHRoZSByb3RhdGlvbnMgYXJlIGFwcGxpZWQuXG4gICAqIDxicj5cbiAgICogT3JkZXIgcGFyYW1ldGVyIHZhbHVlczogYFhZWjogMGAsIGBZWlg6IDFgLCBgWlhZOiAyYCwgYFhaWTogM2AsIGBaWVg6IDRgLCBgWVhaOiA1YFxuICAgKiA8YnI+XG4gICAqIEl0IGNvdWxkIGJlIGVpdGhlciB0aGUgYHN0cmluZ2Agb3IgdGhlIGBudW1iZXJgIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSBhbmdsZSBvZiB0aGUgeCBheGlzIGluIHJhZGlhbnMuIERlZmF1bHQgaXMgMC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgYW5nbGUgb2YgdGhlIHkgYXhpcyBpbiByYWRpYW5zLiBEZWZhdWx0IGlzIDAuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB6IC0gVGhlIGFuZ2xlIG9mIHRoZSB6IGF4aXMgaW4gcmFkaWFucy4gRGVmYXVsdCBpcyAwLlxuICAgKiBAcGFyYW0ge251bWJlciB8IHN0cmluZ30gb3JkZXIgLSBUaGUgb3JkZXIgaW4gd2hpY2ggdGhlIHJvdGF0aW9ucyBhcmUgYXBwbGllZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0gMCwgeiA9IDAsIG9yZGVyID0gMCkge1xuICAgIHN1cGVyKClcblxuICAgIGlmICghaXNOYU4ob3JkZXIpKSB0aGlzLm9yZGVyID0gb3JkZXJcbiAgICBlbHNlIHtcbiAgICAgIHN3aXRjaCAob3JkZXIpIHtcbiAgICAgICAgY2FzZSAnWFlaJzpcbiAgICAgICAgICB0aGlzLm9yZGVyID0gMFxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ1laWCc6XG4gICAgICAgICAgdGhpcy5vcmRlciA9IDFcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdaWFknOlxuICAgICAgICAgIHRoaXMub3JkZXIgPSAyXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnWFpZJzpcbiAgICAgICAgICB0aGlzLm9yZGVyID0gM1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ1pZWCc6XG4gICAgICAgICAgdGhpcy5vcmRlciA9IDRcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdZWFonOlxuICAgICAgICAgIHRoaXMub3JkZXIgPSA1XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgRXVsZXIgQW5nbGVzIE9yZGVyOicgKyBvcmRlcilcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHggaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgY29uc3QgYnVmZmVyID0geFxuICAgICAgY29uc3QgYnl0ZU9mZnNldCA9IHlcbiAgICAgIHRoaXMuX19kYXRhID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIDQpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX19kYXRhID0gbmV3IEZsb2F0MzJBcnJheSgzKVxuICAgICAgdGhpcy5fX2RhdGFbMF0gPSB4XG4gICAgICB0aGlzLl9fZGF0YVsxXSA9IHlcbiAgICAgIHRoaXMuX19kYXRhWzJdID0gelxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIHggYXhpcyByb3RhdGlvbi5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFJldHVybnMgdGhlIHggYXhpcyByb3RhdGlvbi5cbiAgICovXG4gIGdldCB4KCkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YVswXVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmb3IgeCBheGlzIHJvdGF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gVGhlIHZhbCBwYXJhbS5cbiAgICovXG4gIHNldCB4KHZhbCkge1xuICAgIHRoaXMuX19kYXRhWzBdID0gdmFsXG4gIH1cblxuICAvKipcbiAgICogR2V0dGVyIGZvciB5IGF4aXMgcm90YXRpb24uXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSB5IGF4aXMgcm90YXRpb24uXG4gICAqL1xuICBnZXQgeSgpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGFbMV1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0ZXIgZm9yIHkgYXhpcyByb3RhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIFRoZSB2YWwgcGFyYW0uXG4gICAqL1xuICBzZXQgeSh2YWwpIHtcbiAgICB0aGlzLl9fZGF0YVsxXSA9IHZhbFxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3IgeiBheGlzIHJvdGF0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gUmV0dXJucyB0aGUgeiBheGlzIHJvdGF0aW9uLlxuICAgKi9cbiAgZ2V0IHooKSB7XG4gICAgcmV0dXJuIHRoaXMuX19kYXRhWzJdXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciB6IGF4aXMgcm90YXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBUaGUgdmFsIHBhcmFtLlxuICAgKi9cbiAgc2V0IHoodmFsKSB7XG4gICAgdGhpcy5fX2RhdGFbMl0gPSB2YWxcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBFdWxlckFuZ2xlc1xuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB4IGF4aXMgcm90YXRpb24gaW4gcmFkaWFucy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgeSBheGlzIHJvdGF0aW9uIGluIHJhZGlhbnMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB6IC0gVGhlIHogYXhpcyByb3RhdGlvbiBpbiByYWRpYW5zLlxuICAgKi9cbiAgc2V0KHgsIHksIHopIHtcbiAgICB0aGlzLl9fZGF0YVswXSA9IHhcbiAgICB0aGlzLl9fZGF0YVsxXSA9IHlcbiAgICB0aGlzLl9fZGF0YVsyXSA9IHpcbiAgfVxufVxuXG5SZWdpc3RyeS5yZWdpc3RlcignRXVsZXJBbmdsZXMnLCBFdWxlckFuZ2xlcylcblxuZXhwb3J0IHsgRXVsZXJBbmdsZXMgfVxuIiwiLyogZXNsaW50LWRpc2FibGUgbmV3LWNhcCAqL1xuaW1wb3J0IHsgQXR0clZhbHVlIH0gZnJvbSAnLi9BdHRyVmFsdWUuanMnXG5pbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi9WZWMzLmpzJ1xuaW1wb3J0IHsgUmVnaXN0cnkgfSBmcm9tICcuLi9SZWdpc3RyeSdcblxuLyoqXG4gKiBBIGNsYXNzIHJlcHJlc2VudGluZyBhIDN4MyBtYXRyaXguXG4gKiBUaGlzIG1hdHJpeCBjbGFzcyBpcyBiYXNlZCBvbiBHTE0sIGFuZCBpcyBjb2x1bW4gbWFqb3IuXG4gKlxuICogQGV4dGVuZHMgQXR0clZhbHVlXG4gKi9cbmNsYXNzIE1hdDMgZXh0ZW5kcyBBdHRyVmFsdWUge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIE1hdDMgY2xhc3Mgd2l0aCBnaXZlbiBkYXRhLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlciB8IEFycmF5QnVmZmVyfSBtMDAgLSBSb3cgMCwgY29sdW1uIDAuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMDEgLSBSb3cgMCwgY29sdW1uIDEuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMDIgLSBSb3cgMCwgY29sdW1uIDIuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMTAgLSBSb3cgMSwgY29sdW1uIDAuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMTEgLSBSb3cgMSwgY29sdW1uIDEuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMTIgLSBSb3cgMSwgY29sdW1uIDIuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMjAgLSBSb3cgMiwgY29sdW1uIDAuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMjEgLSBSb3cgMiwgY29sdW1uIDEuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMjIgLSBSb3cgMiwgY29sdW1uIDIuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihtMDAgPSAxLCBtMDEgPSAwLCBtMDIgPSAwLCBtMTAgPSAwLCBtMTEgPSAxLCBtMTIgPSAwLCBtMjAgPSAwLCBtMjEgPSAwLCBtMjIgPSAxKSB7XG4gICAgc3VwZXIoKVxuXG4gICAgaWYgKG0wMCBpbnN0YW5jZW9mIFZlYzMgJiYgbTAxIGluc3RhbmNlb2YgVmVjMyAmJiBtMDIgaW5zdGFuY2VvZiBWZWMzKSB7XG4gICAgICB0aGlzLl9fZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoOSlcbiAgICAgIHRoaXMuc2V0KG0wMC54LCBtMDAueSwgbTAwLnosIG0wMS54LCBtMDEueSwgbTAxLnosIG0wMi54LCBtMDIueSwgbTAyLnopXG4gICAgfSBlbHNlIGlmIChtMDAgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkgfHwgbTAwIGluc3RhbmNlb2YgVWludDMyQXJyYXkpIHtcbiAgICAgIHRoaXMuX19kYXRhID0gbTAwXG4gICAgfSBlbHNlIGlmIChtMDAgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgY29uc29sZS53YXJuKGBEZXByZWNhdGVkLCBwbGVhc2UgdXNlIG5ldyBWZWMzKG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCA5KSlgKVxuICAgICAgY29uc3QgYnVmZmVyID0gbTAwXG4gICAgICBjb25zdCBieXRlT2Zmc2V0ID0gbTAxXG4gICAgICB0aGlzLl9fZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCA5KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9fZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoOSlcbiAgICAgIHRoaXMuc2V0KG0wMCwgbTAxLCBtMDIsIG0xMCwgbTExLCBtMTIsIG0yMCwgbTIxLCBtMjIpXG4gICAgfVxuICB9XG5cbiAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gcHJvcGVydGllc1xuXG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIHJvdyAwLCBjb2x1bW4gMC5cbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFJldHVybnMgdGhlIG0wMCB2YWx1ZS5cbiAgICovXG4gIGdldCBtMDAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19kYXRhWzBdXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciByb3cgMCwgY29sdW1uIDAuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBUaGUgdmFsIHBhcmFtLlxuICAgKi9cbiAgc2V0IG0wMCh2YWwpIHtcbiAgICB0aGlzLl9fZGF0YVswXSA9IHZhbFxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3Igcm93IDAsIGNvbHVtbiAxLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gUmV0dXJucyB0aGUgbTAxIHZhbHVlLlxuICAgKi9cbiAgZ2V0IG0wMSgpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGFbMV1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0ZXIgZm9yIHJvdyAwLCBjb2x1bW4gMS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIFRoZSB2YWwgcGFyYW0uXG4gICAqL1xuICBzZXQgbTAxKHZhbCkge1xuICAgIHRoaXMuX19kYXRhWzFdID0gdmFsXG4gIH1cblxuICAvKipcbiAgICogR2V0dGVyIGZvciByb3cgMCwgY29sdW1uIDIuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSBtMDIgdmFsdWUuXG4gICAqL1xuICBnZXQgbTAyKCkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YVsyXVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmb3Igcm93IDAsIGNvbHVtbiAyLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gVGhlIHZhbCBwYXJhbS5cbiAgICovXG4gIHNldCBtMDIodmFsKSB7XG4gICAgdGhpcy5fX2RhdGFbMl0gPSB2YWxcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIHJvdyAxLCBjb2x1bW4gMC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFJldHVybnMgdGhlIG0xMCB2YWx1ZS5cbiAgICovXG4gIGdldCBtMTAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19kYXRhWzNdXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciByb3cgMSwgY29sdW1uIDAuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBUaGUgdmFsIHBhcmFtLlxuICAgKi9cbiAgc2V0IG0xMCh2YWwpIHtcbiAgICB0aGlzLl9fZGF0YVszXSA9IHZhbFxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3Igcm93IDEsIGNvbHVtbiAxXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSBtMTEgdmFsdWUuXG4gICAqL1xuICBnZXQgbTExKCkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YVs0XVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmb3Igcm93IDEsIGNvbHVtbiAxLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gVGhlIHZhbCBwYXJhbS5cbiAgICovXG4gIHNldCBtMTEodmFsKSB7XG4gICAgdGhpcy5fX2RhdGFbNF0gPSB2YWxcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIHJvdyAxLCBjb2x1bW4gMi5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFJldHVybnMgdGhlIG0xMiB2YWx1ZS5cbiAgICovXG4gIGdldCBtMTIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19kYXRhWzVdXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciByb3cgMSwgY29sdW1uIDIuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBUaGUgdmFsIHBhcmFtLlxuICAgKi9cbiAgc2V0IG0xMih2YWwpIHtcbiAgICB0aGlzLl9fZGF0YVs1XSA9IHZhbFxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3Igcm93IDIsIGNvbHVtbiAwLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gUmV0dXJucyB0aGUgbTIwIHZhbHVlLlxuICAgKi9cbiAgZ2V0IG0yMCgpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGFbNl1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0ZXIgZm9yIHJvdyAyLCBjb2x1bW4gMC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIFRoZSB2YWwgcGFyYW0uXG4gICAqL1xuICBzZXQgbTIwKHZhbCkge1xuICAgIHRoaXMuX19kYXRhWzZdID0gdmFsXG4gIH1cblxuICAvKipcbiAgICogR2V0dGVyIGZvciByb3cgMiwgY29sdW1uIDEuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSBtMjEgdmFsdWUuXG4gICAqL1xuICBnZXQgbTIxKCkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YVs3XVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmb3Igcm93IDIsIGNvbHVtbiAxLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gVGhlIHZhbCBwYXJhbS5cbiAgICovXG4gIHNldCBtMjEodmFsKSB7XG4gICAgdGhpcy5fX2RhdGFbN10gPSB2YWxcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIHJvdyAyLCBjb2x1bW4gMi5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFJldHVybnMgdGhlIG0yMiB2YWx1ZS5cbiAgICovXG4gIGdldCBtMjIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19kYXRhWzhdXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciByb3cgMiwgY29sdW1uIDIuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBUaGUgdmFsIHBhcmFtLlxuICAgKi9cbiAgc2V0IG0yMih2YWwpIHtcbiAgICB0aGlzLl9fZGF0YVs4XSA9IHZhbFxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3IgdGhlIGB4YCBheGlzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtWZWMzfSAtIFJldHVybnMgdGhlIGB4YCBheGlzIGFzIGEgVmVjMy5cbiAgICovXG4gIGdldCB4QXhpcygpIHtcbiAgICByZXR1cm4gVmVjMy5jcmVhdGVGcm9tQnVmZmVyKHRoaXMuX19kYXRhLmJ1ZmZlciwgMClcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0ZXIgZm9yIHRoZSBgeGAgYXhpcy5cbiAgICpcbiAgICogQHBhcmFtIHtWZWMzfSB2ZWMzIC0gVGhlIHZlYzMgdmFsdWUuXG4gICAqL1xuICBzZXQgeEF4aXModmVjMykge1xuICAgIHRoaXMueEF4aXMuc2V0KHZlYzMueCwgdmVjMy55LCB2ZWMzLnopXG4gIH1cblxuICAvKipcbiAgICogR2V0dGVyIGZvciB0aGUgYHlgIGF4aXMuXG4gICAqICogQHJldHVybiB7VmVjM30gLSBSZXR1cm5zIHRoZSBgeWAgYXhpcyBhcyBhIFZlYzMuXG4gICAqL1xuICBnZXQgeUF4aXMoKSB7XG4gICAgcmV0dXJuIFZlYzMuY3JlYXRlRnJvbUJ1ZmZlcih0aGlzLl9fZGF0YS5idWZmZXIsIDMgKiA0KVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmb3IgdGhlIGB5YCBheGlzLlxuICAgKiBAcGFyYW0ge1ZlYzN9IHZlYzMgLSBUaGUgdmVjMyB2YWx1ZS5cbiAgICovXG4gIHNldCB5QXhpcyh2ZWMzKSB7XG4gICAgdGhpcy55QXhpcy5zZXQodmVjMy54LCB2ZWMzLnksIHZlYzMueilcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIHRoZSBgemAgYXhpcy5cbiAgICogKiBAcmV0dXJuIHtWZWMzfSAtIFJldHVybnMgdGhlIGB6YCBheGlzIGFzIGEgVmVjMy5cbiAgICovXG4gIGdldCB6QXhpcygpIHtcbiAgICByZXR1cm4gVmVjMy5jcmVhdGVGcm9tQnVmZmVyKHRoaXMuX19kYXRhLmJ1ZmZlciwgNiAqIDQpXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciB0aGUgYHpgIGF4aXMuXG4gICAqIEBwYXJhbSB7VmVjM30gdmVjMyAtIFRoZSB2ZWMzIHZhbHVlLlxuICAgKi9cbiAgc2V0IHpBeGlzKHZlYzMpIHtcbiAgICB0aGlzLnpBeGlzLnNldCh2ZWMzLngsIHZlYzMueSwgdmVjMy56KVxuICB9XG5cbiAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gU2V0dGVyc1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBzdGF0ZSBvZiB0aGUgTWF0MyBjbGFzc1xuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbTAwIC0gUm93IDAsIGNvbHVtbiAwLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbTAxIC0gUm93IDAsIGNvbHVtbiAxLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbTAyIC0gUm93IDAsIGNvbHVtbiAyLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbTEwIC0gUm93IDEsIGNvbHVtbiAwLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbTExIC0gUm93IDEsIGNvbHVtbiAxLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbTEyIC0gUm93IDEsIGNvbHVtbiAyLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbTIwIC0gUm93IDIsIGNvbHVtbiAwLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbTIxIC0gUm93IDIsIGNvbHVtbiAxLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbTIyIC0gUm93IDIsIGNvbHVtbiAyLlxuICAgKi9cbiAgc2V0KG0wMCA9IDEsIG0wMSA9IDAsIG0wMiA9IDAsIG0xMCA9IDAsIG0xMSA9IDEsIG0xMiA9IDAsIG0yMCA9IDAsIG0yMSA9IDAsIG0yMiA9IDEpIHtcbiAgICB0aGlzLl9fZGF0YVswXSA9IG0wMFxuICAgIHRoaXMuX19kYXRhWzFdID0gbTAxXG4gICAgdGhpcy5fX2RhdGFbMl0gPSBtMDJcbiAgICB0aGlzLl9fZGF0YVszXSA9IG0xMFxuICAgIHRoaXMuX19kYXRhWzRdID0gbTExXG4gICAgdGhpcy5fX2RhdGFbNV0gPSBtMTJcbiAgICB0aGlzLl9fZGF0YVs2XSA9IG0yMFxuICAgIHRoaXMuX19kYXRhWzddID0gbTIxXG4gICAgdGhpcy5fX2RhdGFbOF0gPSBtMjJcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHN0YXRlIG9mIHRoZSBNYXQzIHdpdGggdGhlIGlkZW50aXR5ICBNYXRyaXhcbiAgICovXG4gIHNldElkZW50aXR5KCkge1xuICAgIHRoaXMuc2V0KClcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHN0YXRlIG9mIHRoZSBNYXQzIGZyb20gYW5vdGhlciBNYXQzXG4gICAqIDxicj5cbiAgICogTm90ZTogd29ya3Mgd2l0aCBlaXRoZXIgTWF0MyBvciBNYXQ0LlxuICAgKlxuICAgKiBAcGFyYW0ge01hdDN9IG1hdCAtIFRoZSBtYXQgdmFsdWUuXG4gICAqL1xuICBzZXRGcm9tTWF0KG1hdCkge1xuICAgIHRoaXMuX19kYXRhWzBdID0gbWF0Lm0wMFxuICAgIHRoaXMuX19kYXRhWzFdID0gbWF0Lm0wMVxuICAgIHRoaXMuX19kYXRhWzJdID0gbWF0Lm0wMlxuICAgIHRoaXMuX19kYXRhWzNdID0gbWF0Lm0xMFxuICAgIHRoaXMuX19kYXRhWzRdID0gbWF0Lm0xMVxuICAgIHRoaXMuX19kYXRhWzVdID0gbWF0Lm0xMlxuICAgIHRoaXMuX19kYXRhWzZdID0gbWF0Lm0yMFxuICAgIHRoaXMuX19kYXRhWzddID0gbWF0Lm0yMVxuICAgIHRoaXMuX19kYXRhWzhdID0gbWF0Lm0yMlxuICB9XG5cbiAgLyoqXG4gICAqIFNjYWxlcyBhbmQgY2FsY3VsYXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0aGUgYFZlYzNgIGFuZCBzZXRzIHRoZSByZXN1bHQgaW4gdGhlIE1hdDNcbiAgICogTm90ZTogdGhlIHJlc3VsdGluZyBtYXRyaXggK1ogYXhpcyBpcyBhbGlnbmVkIHdpdGggdGhlIHByb3ZpZGVkIGRpcmVjdGlvbiB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtWZWMzfSBkaXIgLSBUaGUgZGlyIHZhbHVlLlxuICAgKiBAcGFyYW0ge1ZlYzN9IHVwIC0gVGhlIHVwIHZhbHVlLlxuICAgKi9cbiAgc2V0RnJvbURpcmVjdGlvbkFuZFVwdmVjdG9yKGRpciwgdXApIHtcbiAgICBjb25zdCB6QXhpcyA9IGRpclxuICAgIGNvbnN0IHpMZW4gPSB6QXhpcy5sZW5ndGgoKVxuICAgIGlmICh6TGVuIDwgTnVtYmVyLkVQU0lMT04pIHtcbiAgICAgIHRoaXMuc2V0SWRlbnRpdHkoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHpBeGlzLnNjYWxlSW5QbGFjZSgxIC8gekxlbilcblxuICAgIGNvbnN0IHhBeGlzID0gdXAuY3Jvc3MoekF4aXMpXG4gICAgY29uc3QgeExlbiA9IHhBeGlzLmxlbmd0aCgpXG4gICAgaWYgKHhMZW4gPiBOdW1iZXIuRVBTSUxPTikgeEF4aXMuc2NhbGVJblBsYWNlKDEgLyB4TGVuKVxuXG4gICAgY29uc3QgeUF4aXMgPSB6QXhpcy5jcm9zcyh4QXhpcylcbiAgICBjb25zdCB5TGVuID0geUF4aXMubGVuZ3RoKClcbiAgICBpZiAoeUxlbiA+IE51bWJlci5FUFNJTE9OKSB5QXhpcy5zY2FsZUluUGxhY2UoMSAvIHlMZW4pXG5cbiAgICB0aGlzLnNldCh4QXhpcy54LCB4QXhpcy55LCB4QXhpcy56LCB5QXhpcy54LCB5QXhpcy55LCB5QXhpcy56LCB6QXhpcy54LCB6QXhpcy55LCB6QXhpcy56KVxuICB9XG5cbiAgLyoqXG4gICAqIEludmVydHMgYSBNYXQzIGFuZCByZXR1cm5zIHRoZSByZXN1bHQgYXMgYSBuZXcgaW5zdGFuY2UuXG4gICAqXG4gICAqIEByZXR1cm4ge01hdDN9IC0gUmV0dXJucyBhIG5ldyBNYXQzLlxuICAgKi9cbiAgaW52ZXJzZSgpIHtcbiAgICBjb25zdCBhMDAgPSB0aGlzLl9fZGF0YVswXVxuICAgIGNvbnN0IGEwMSA9IHRoaXMuX19kYXRhWzFdXG4gICAgY29uc3QgYTAyID0gdGhpcy5fX2RhdGFbMl1cbiAgICBjb25zdCBhMTAgPSB0aGlzLl9fZGF0YVszXVxuICAgIGNvbnN0IGExMSA9IHRoaXMuX19kYXRhWzRdXG4gICAgY29uc3QgYTEyID0gdGhpcy5fX2RhdGFbNV1cbiAgICBjb25zdCBhMjAgPSB0aGlzLl9fZGF0YVs2XVxuICAgIGNvbnN0IGEyMSA9IHRoaXMuX19kYXRhWzddXG4gICAgY29uc3QgYTIyID0gdGhpcy5fX2RhdGFbOF1cbiAgICBjb25zdCBiMDEgPSBhMjIgKiBhMTEgLSBhMTIgKiBhMjFcbiAgICBjb25zdCBiMTEgPSAtYTIyICogYTEwICsgYTEyICogYTIwXG4gICAgY29uc3QgYjIxID0gYTIxICogYTEwIC0gYTExICogYTIwXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuICAgIGNvbnN0IGRldCA9IGEwMCAqIGIwMSArIGEwMSAqIGIxMSArIGEwMiAqIGIyMVxuXG4gICAgaWYgKCFkZXQpIHtcbiAgICAgIGNvbnNvbGUud2FybignVW5hYmxlIHRvIGludmVydCBNYXQzJylcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICAgIGRldCA9IDEuMCAvIGRldFxuXG4gICAgcmV0dXJuIG5ldyBNYXQzKFxuICAgICAgYjAxICogZGV0LFxuICAgICAgKC1hMjIgKiBhMDEgKyBhMDIgKiBhMjEpICogZGV0LFxuICAgICAgKGExMiAqIGEwMSAtIGEwMiAqIGExMSkgKiBkZXQsXG4gICAgICBiMTEgKiBkZXQsXG4gICAgICAoYTIyICogYTAwIC0gYTAyICogYTIwKSAqIGRldCxcbiAgICAgICgtYTEyICogYTAwICsgYTAyICogYTEwKSAqIGRldCxcbiAgICAgIGIyMSAqIGRldCxcbiAgICAgICgtYTIxICogYTAwICsgYTAxICogYTIwKSAqIGRldCxcbiAgICAgIChhMTEgKiBhMDAgLSBhMDEgKiBhMTApICogZGV0XG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIEludmVydHMgYSBNYXQzIGluIHBsYWNlIG1vZGlmeWluZyBpdHMgdmFsdWVzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBpbnZlcnRJblBsYWNlKCkge1xuICAgIGNvbnN0IGEwMCA9IHRoaXMuX19kYXRhWzBdXG4gICAgY29uc3QgYTAxID0gdGhpcy5fX2RhdGFbMV1cbiAgICBjb25zdCBhMDIgPSB0aGlzLl9fZGF0YVsyXVxuICAgIGNvbnN0IGExMCA9IHRoaXMuX19kYXRhWzNdXG4gICAgY29uc3QgYTExID0gdGhpcy5fX2RhdGFbNF1cbiAgICBjb25zdCBhMTIgPSB0aGlzLl9fZGF0YVs1XVxuICAgIGNvbnN0IGEyMCA9IHRoaXMuX19kYXRhWzZdXG4gICAgY29uc3QgYTIxID0gdGhpcy5fX2RhdGFbN11cbiAgICBjb25zdCBhMjIgPSB0aGlzLl9fZGF0YVs4XVxuICAgIGNvbnN0IGIwMSA9IGEyMiAqIGExMSAtIGExMiAqIGEyMVxuICAgIGNvbnN0IGIxMSA9IC1hMjIgKiBhMTAgKyBhMTIgKiBhMjBcbiAgICBjb25zdCBiMjEgPSBhMjEgKiBhMTAgLSBhMTEgKiBhMjBcbiAgICAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG4gICAgY29uc3QgZGV0ID0gYTAwICogYjAxICsgYTAxICogYjExICsgYTAyICogYjIxXG5cbiAgICBpZiAoIWRldCkge1xuICAgICAgY29uc29sZS53YXJuKCdVbmFibGUgdG8gaW52ZXJ0IE1hdDMnKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGRldCA9IDEuMCAvIGRldFxuXG4gICAgdGhpcy5zZXQoXG4gICAgICBiMDEgKiBkZXQsXG4gICAgICAoLWEyMiAqIGEwMSArIGEwMiAqIGEyMSkgKiBkZXQsXG4gICAgICAoYTEyICogYTAxIC0gYTAyICogYTExKSAqIGRldCxcbiAgICAgIGIxMSAqIGRldCxcbiAgICAgIChhMjIgKiBhMDAgLSBhMDIgKiBhMjApICogZGV0LFxuICAgICAgKC1hMTIgKiBhMDAgKyBhMDIgKiBhMTApICogZGV0LFxuICAgICAgYjIxICogZGV0LFxuICAgICAgKC1hMjEgKiBhMDAgKyBhMDEgKiBhMjApICogZGV0LFxuICAgICAgKGExMSAqIGEwMCAtIGEwMSAqIGExMCkgKiBkZXRcbiAgICApXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc3Bvc2VzIChleGNoYW5nZXMgY29sdW1ucyB3aXRoIHJvd3MpIHRoaXMgbWF0cml4XG4gICAqIGFuZCByZXR1cm5zIHRoZSByZXN1bHQgYXMgYSBuZXcgaW5zdGFuY2UuXG4gICAqXG4gICAqIEByZXR1cm4ge01hdDN9IC0gUmV0dXJuIGEgbmV3IHRyYW5zcG9zZWQgTWF0My5cbiAgICovXG4gIHRyYW5zcG9zZSgpIHtcbiAgICByZXR1cm4gTWF0MyhcbiAgICAgIHRoaXMuX19kYXRhWzBdLFxuICAgICAgdGhpcy5fX2RhdGFbM10sXG4gICAgICB0aGlzLl9fZGF0YVs2XSxcbiAgICAgIHRoaXMuX19kYXRhWzFdLFxuICAgICAgdGhpcy5fX2RhdGFbNF0sXG4gICAgICB0aGlzLl9fZGF0YVs3XSxcbiAgICAgIHRoaXMuX19kYXRhWzJdLFxuICAgICAgdGhpcy5fX2RhdGFbNV0sXG4gICAgICB0aGlzLl9fZGF0YVs4XVxuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc3Bvc2VzIChleGNoYW5nZXMgY29sdW1ucyB3aXRoIHJvd3MpIHRoaXMgbWF0cml4IG1vZGlmeWluZyBpdHMgdmFsdWVzLlxuICAgKi9cbiAgdHJhbnNwb3NlSW5QbGFjZSgpIHtcbiAgICAvLyBJZiB3ZSBhcmUgdHJhbnNwb3Npbmcgb3Vyc2VsdmVzIHdlIGNhbiBza2lwIGEgZmV3IHN0ZXBzIGJ1dCBoYXZlIHRvIGNhY2hlIHNvbWUgdmFsdWVzXG4gICAgY29uc3QgYTAxID0gdGhpcy5fX2RhdGFbMV1cbiAgICBjb25zdCBhMDIgPSB0aGlzLl9fZGF0YVsyXVxuICAgIGNvbnN0IGExMiA9IHRoaXMuX19kYXRhWzVdXG5cbiAgICB0aGlzLl9fZGF0YVsxXSA9IHRoaXMuX19kYXRhWzNdXG4gICAgdGhpcy5fX2RhdGFbMl0gPSB0aGlzLl9fZGF0YVs2XVxuICAgIHRoaXMuX19kYXRhWzNdID0gYTAxXG4gICAgdGhpcy5fX2RhdGFbNV0gPSB0aGlzLl9fZGF0YVs3XVxuICAgIHRoaXMuX19kYXRhWzZdID0gYTAyXG4gICAgdGhpcy5fX2RhdGFbN10gPSBhMTJcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm1zIHRoZSBWZWMzIHdpdGggYSBNYXQzLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzN9IHZlYzMgLSBUaGUgdmVjMyB2YWx1ZS5cbiAgICogQHJldHVybiB7VmVjM30gLSBSZXR1cm4gdGhlIHJlc3VsdCBhcyBhIG5ldyBWZWMzLlxuICAgKi9cbiAgdHJhbnNmb3JtVmVjMyh2ZWMzKSB7XG4gICAgcmV0dXJuIG5ldyBWZWMzKFxuICAgICAgdGhpcy5fX2RhdGFbMF0gKiB2ZWMzLnggKyB0aGlzLl9fZGF0YVsxXSAqIHZlYzMueSArIHRoaXMuX19kYXRhWzJdICogdmVjMy56LFxuICAgICAgdGhpcy5fX2RhdGFbM10gKiB2ZWMzLnggKyB0aGlzLl9fZGF0YVs0XSAqIHZlYzMueSArIHRoaXMuX19kYXRhWzVdICogdmVjMy56LFxuICAgICAgdGhpcy5fX2RhdGFbNl0gKiB2ZWMzLnggKyB0aGlzLl9fZGF0YVs3XSAqIHZlYzMueSArIHRoaXMuX19kYXRhWzhdICogdmVjMy56XG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIENsb25lcyB0aGlzIE1hdDMgcmV0dXJuaW5nIGEgbmV3IGluc3RhbmNlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtNYXQzfSAtIFJldHVybnMgYSBuZXcgTWF0My5cbiAgICovXG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgTWF0MyhcbiAgICAgIHRoaXMuX19kYXRhWzBdLFxuICAgICAgdGhpcy5fX2RhdGFbMV0sXG4gICAgICB0aGlzLl9fZGF0YVsyXSxcbiAgICAgIHRoaXMuX19kYXRhWzNdLFxuICAgICAgdGhpcy5fX2RhdGFbNF0sXG4gICAgICB0aGlzLl9fZGF0YVs1XSxcbiAgICAgIHRoaXMuX19kYXRhWzZdLFxuICAgICAgdGhpcy5fX2RhdGFbN10sXG4gICAgICB0aGlzLl9fZGF0YVs4XSxcbiAgICAgIHRoaXMuX19kYXRhWzldXG4gICAgKVxuICB9XG5cbiAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBTdGF0aWMgTWV0aG9kc1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgTWF0My5cbiAgICogQHBhcmFtIHsuLi5vYmplY3R9IC4uLmFyZ3MgLSBUaGUgLi4uYXJncyBwYXJhbS5cbiAgICogQHJldHVybiB7TWF0M30gLSBSZXR1cm5zIGEgbmV3IE1hdDMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gbmV3IE1hdDMoLi4uYXJncylcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IE1hdDMgdG8gd3JhcCBleGlzdGluZyBtZW1vcnkgaW4gYSBidWZmZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGJ1ZmZlciAtIFRoZSBidWZmZXIgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgLSBUaGUgb2Zmc2V0IHZhbHVlLlxuICAgKiBAcmV0dXJuIHtNYXQzfSAtIFJldHVybnMgYSBuZXcgTWF0My5cbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBjcmVhdGVGcm9tRmxvYXQzMkJ1ZmZlcihidWZmZXIsIG9mZnNldCA9IDApIHtcbiAgICBjb25zb2xlLndhcm4oJ0RlcHJlY2F0ZWQsIHVzZSAjY3JlYXRlRnJvbUJ1ZmZlciBpbnN0ZWFkJylcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVGcm9tQnVmZmVyKGJ1ZmZlciwgb2Zmc2V0ICogNClcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGEgYE1hdDNgIHVzaW5nIGFuIEFycmF5QnVmZmVyLlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGJ1ZmZlciAtIFRoZSBidWZmZXIgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBieXRlT2Zmc2V0IC0gVGhlIG9mZnNldCB2YWx1ZS5cbiAgICogQHJldHVybiB7TWF0M30gLSBSZXR1cm5zIGEgbmV3IE1hdDMuXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlRnJvbUJ1ZmZlcihidWZmZXIsIGJ5dGVPZmZzZXQpIHtcbiAgICByZXR1cm4gbmV3IE1hdDMobmV3IEZsb2F0MzJBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIDkpKSAvLyA0IGJ5dGVzIHBlciAzMmJpdCBmbG9hdFxuICB9XG5cbiAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFBlcnNpc3RlbmNlXG5cbiAgLyoqXG4gICAqIExvYWRzIHRoZSBzdGF0ZSBvZiB0aGUgdmFsdWUgZnJvbSBhIGJpbmFyeSByZWFkZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7QmluUmVhZGVyfSByZWFkZXIgLSBUaGUgcmVhZGVyIHZhbHVlLlxuICAgKi9cbiAgcmVhZEJpbmFyeShyZWFkZXIpIHtcbiAgICB0aGlzLl9fZGF0YSA9IHJlYWRlci5sb2FkRmxvYXQzMkFycmF5KDkpXG4gIH1cblxuICAvKipcbiAgICogVGhlIHRvSlNPTiBtZXRob2QgZW5jb2RlcyB0aGlzIHR5cGUgYXMgYSBqc29uIG9iamVjdCBmb3IgcGVyc2lzdGVuY2UuXG4gICAqXG4gICAqIEByZXR1cm4ge29iamVjdH0gLSBUaGUganNvbiBvYmplY3QuXG4gICAqL1xuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMuX19kYXRhXG4gIH1cblxuICAvKipcbiAgICogVGhlIGZyb21KU09OIG1ldGhvZCBkZWNvZGVzIGEganNvbiBvYmplY3QgZm9yIHRoaXMgdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGpzb24gLSBUaGUganNvbiBwYXJhbS5cbiAgICovXG4gIGZyb21KU09OKGpzb24pIHtcbiAgICB0aGlzLl9fZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoanNvbilcbiAgfVxuXG4gIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBEZWJ1Z2dpbmdcblxuICAvKipcbiAgICogQ2FsbHMgYHRvSlNPTmAgbWV0aG9kIGFuZCBzdHJpbmdpZmllcyBpdC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy50b0pTT04oKS50b1N0cmluZygpXG4gIH1cbn1cblxuUmVnaXN0cnkucmVnaXN0ZXIoJ01hdDMnLCBNYXQzKVxuXG5leHBvcnQgeyBNYXQzIH1cbiIsImltcG9ydCB7IEF0dHJWYWx1ZSB9IGZyb20gJy4vQXR0clZhbHVlLmpzJ1xuaW1wb3J0IHsgVmVjMyB9IGZyb20gJy4vVmVjMy5qcydcbmltcG9ydCB7IE1hdDMgfSBmcm9tICcuL01hdDMuanMnXG5pbXBvcnQgeyBSZWdpc3RyeSB9IGZyb20gJy4uL1JlZ2lzdHJ5J1xuXG4vKipcbiAqIEEgY2xhc3MgcmVwcmVzZW50aW5nIGEgNHg0IG1hdHJpeC5cbiAqIFRoaXMgbWF0cml4IGNsYXNzIGlzIGJhc2VkIG9uIEdMTSwgYW5kIGlzIGNvbHVtbiBtYWpvci5cbiAqXG4gKiBAZXh0ZW5kcyBBdHRyVmFsdWVcbiAqL1xuY2xhc3MgTWF0NCBleHRlbmRzIEF0dHJWYWx1ZSB7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgTWF0MyBjbGFzcyB3aXRoIGdpdmVuIGRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyIHwgRmxvYXQzMkFycmF5IHwgQXJyYXlCdWZmZXJ9IG0wMCAtIFJvdyAwLCBjb2x1bW4gMC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0wMSAtIFJvdyAwLCBjb2x1bW4gMS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0wMiAtIFJvdyAwLCBjb2x1bW4gMi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0wMyAtIFJvdyAwLCBjb2x1bW4gMy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0xMCAtIFJvdyAxLCBjb2x1bW4gMC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0xMSAtIFJvdyAxLCBjb2x1bW4gMS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0xMiAtIFJvdyAxLCBjb2x1bW4gMi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0xMyAtIFJvdyAxLCBjb2x1bW4gMy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0yMCAtIFJvdyAyLCBjb2x1bW4gMC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0yMSAtIFJvdyAyLCBjb2x1bW4gMS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0yMiAtIFJvdyAyLCBjb2x1bW4gMi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0yMyAtIFJvdyAyLCBjb2x1bW4gMy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0zMCAtIFJvdyAzLCBjb2x1bW4gMC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0zMSAtIFJvdyAzLCBjb2x1bW4gMS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0zMiAtIFJvdyAzLCBjb2x1bW4gMi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0zMyAtIFJvdyAzLCBjb2x1bW4gMy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIG0wMCA9IDEsXG4gICAgbTAxID0gMCxcbiAgICBtMDIgPSAwLFxuICAgIG0wMyA9IDAsXG4gICAgbTEwID0gMCxcbiAgICBtMTEgPSAxLFxuICAgIG0xMiA9IDAsXG4gICAgbTEzID0gMCxcbiAgICBtMjAgPSAwLFxuICAgIG0yMSA9IDAsXG4gICAgbTIyID0gMSxcbiAgICBtMjMgPSAwLFxuICAgIG0zMCA9IDAsXG4gICAgbTMxID0gMCxcbiAgICBtMzIgPSAwLFxuICAgIG0zMyA9IDFcbiAgKSB7XG4gICAgc3VwZXIoKVxuXG4gICAgaWYgKG0wMCBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSkge1xuICAgICAgdGhpcy5fX2RhdGEgPSBtMDBcbiAgICB9IGVsc2UgaWYgKG0wMCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICBjb25zdCBidWZmZXIgPSBtMDBcbiAgICAgIGNvbnN0IGJ5dGVPZmZzZXQgPSBtMDFcbiAgICAgIHRoaXMuX19kYXRhID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIDE2KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9fZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoMTYpXG4gICAgICB0aGlzLnNldChtMDAsIG0wMSwgbTAyLCBtMDMsIG0xMCwgbTExLCBtMTIsIG0xMywgbTIwLCBtMjEsIG0yMiwgbTIzLCBtMzAsIG0zMSwgbTMyLCBtMzMpXG4gICAgfVxuICB9XG5cbiAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gcHJvcGVydGllc1xuXG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIHJvdyAwLCBjb2x1bW4gMC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFJldHVybnMgdGhlIG0wMCB2YWx1ZS5cbiAgICovXG4gIGdldCBtMDAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19kYXRhWzBdXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciByb3cgMCwgY29sdW1uIDAuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBUaGUgdmFsIHBhcmFtLlxuICAgKi9cbiAgc2V0IG0wMCh2YWwpIHtcbiAgICB0aGlzLl9fZGF0YVswXSA9IHZhbFxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3Igcm93IDAsIGNvbHVtbiAxLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gUmV0dXJucyB0aGUgbTAxIHZhbHVlLlxuICAgKi9cbiAgZ2V0IG0wMSgpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGFbMV1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0ZXIgZm9yIHJvdyAwLCBjb2x1bW4gMS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIFRoZSB2YWwgcGFyYW0uXG4gICAqL1xuICBzZXQgbTAxKHZhbCkge1xuICAgIHRoaXMuX19kYXRhWzFdID0gdmFsXG4gIH1cblxuICAvKipcbiAgICogR2V0dGVyIGZvciByb3cgMCwgY29sdW1uIDIuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSBtMDIgdmFsdWUuXG4gICAqL1xuICBnZXQgbTAyKCkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YVsyXVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmb3Igcm93IDAsIGNvbHVtbiAyLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gVGhlIHZhbCBwYXJhbS5cbiAgICovXG4gIHNldCBtMDIodmFsKSB7XG4gICAgdGhpcy5fX2RhdGFbMl0gPSB2YWxcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIHJvdyAwLCBjb2x1bW4gMy5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFJldHVybnMgdGhlIG0wMyB2YWx1ZS5cbiAgICovXG4gIGdldCBtMDMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19kYXRhWzNdXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciByb3cgMCwgY29sdW1uIDMuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBUaGUgdmFsIHBhcmFtLlxuICAgKi9cbiAgc2V0IG0wMyh2YWwpIHtcbiAgICB0aGlzLl9fZGF0YVszXSA9IHZhbFxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3Igcm93IDEsIGNvbHVtbiAwLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gUmV0dXJucyB0aGUgbTEwIHZhbHVlLlxuICAgKi9cbiAgZ2V0IG0xMCgpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGFbNF1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0ZXIgZm9yIHJvdyAxLCBjb2x1bW4gMC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIFRoZSB2YWwgcGFyYW0uXG4gICAqL1xuICBzZXQgbTEwKHZhbCkge1xuICAgIHRoaXMuX19kYXRhWzRdID0gdmFsXG4gIH1cblxuICAvKipcbiAgICogR2V0dGVyIGZvciByb3cgMSwgY29sdW1uIDEuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSBtMTEgdmFsdWUuXG4gICAqL1xuICBnZXQgbTExKCkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YVs1XVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmb3Igcm93IDEsIGNvbHVtbiAxLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gVGhlIHZhbCBwYXJhbS5cbiAgICovXG4gIHNldCBtMTEodmFsKSB7XG4gICAgdGhpcy5fX2RhdGFbNV0gPSB2YWxcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIHJvdyAxLCBjb2x1bW4gMi5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFJldHVybnMgdGhlIG0xMiB2YWx1ZS5cbiAgICovXG4gIGdldCBtMTIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19kYXRhWzZdXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciByb3cgMSwgY29sdW1uIDIuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBUaGUgdmFsIHBhcmFtLlxuICAgKi9cbiAgc2V0IG0xMih2YWwpIHtcbiAgICB0aGlzLl9fZGF0YVs2XSA9IHZhbFxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3Igcm93IDEsIGNvbHVtbiAzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gUmV0dXJucyB0aGUgbTEzIHZhbHVlLlxuICAgKi9cbiAgZ2V0IG0xMygpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGFbN11cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0ZXIgZm9yIHJvdyAxLCBjb2x1bW4gMy5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIFRoZSB2YWwgcGFyYW0uXG4gICAqL1xuICBzZXQgbTEzKHZhbCkge1xuICAgIHRoaXMuX19kYXRhWzddID0gdmFsXG4gIH1cblxuICAvKipcbiAgICogR2V0dGVyIGZvciByb3cgMiwgY29sdW1uIDAuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSBtMjAgdmFsdWUuXG4gICAqL1xuICBnZXQgbTIwKCkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YVs4XVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmb3Igcm93IDIsIGNvbHVtbiAwLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gVGhlIHZhbCBwYXJhbS5cbiAgICovXG4gIHNldCBtMjAodmFsKSB7XG4gICAgdGhpcy5fX2RhdGFbOF0gPSB2YWxcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIHJvdyAyLCBjb2x1bW4gMS5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFJldHVybnMgdGhlIG0yMSB2YWx1ZS5cbiAgICovXG4gIGdldCBtMjEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19kYXRhWzldXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciByb3cgMiwgY29sdW1uIDFcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIFRoZSB2YWwgcGFyYW0uXG4gICAqL1xuICBzZXQgbTIxKHZhbCkge1xuICAgIHRoaXMuX19kYXRhWzldID0gdmFsXG4gIH1cblxuICAvKipcbiAgICogR2V0dGVyIGZvciByb3cgMiwgY29sdW1uIDIuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSBtMjIgdmFsdWUuXG4gICAqL1xuICBnZXQgbTIyKCkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YVsxMF1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0ZXIgZm9yIHJvdyAyLCBjb2x1bW4gMi5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIFRoZSB2YWwgcGFyYW0uXG4gICAqL1xuICBzZXQgbTIyKHZhbCkge1xuICAgIHRoaXMuX19kYXRhWzEwXSA9IHZhbFxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3Igcm93IDIsIGNvbHVtbiAzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gUmV0dXJucyB0aGUgbTIzIHZhbHVlLlxuICAgKi9cbiAgZ2V0IG0yMygpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGFbMTFdXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciByb3cgMiwgY29sdW1uIDMuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBUaGUgdmFsIHBhcmFtLlxuICAgKi9cbiAgc2V0IG0yMyh2YWwpIHtcbiAgICB0aGlzLl9fZGF0YVsxMV0gPSB2YWxcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIHJvdyAzLCBjb2x1bW4gMFxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gUmV0dXJucyB0aGUgbTMwIHZhbHVlLlxuICAgKi9cbiAgZ2V0IG0zMCgpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGFbMTJdXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciByb3cgMywgY29sdW1uIDAuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBUaGUgdmFsIHBhcmFtLlxuICAgKi9cbiAgc2V0IG0zMCh2YWwpIHtcbiAgICB0aGlzLl9fZGF0YVsxMl0gPSB2YWxcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIHJvdyAzLCBjb2x1bW4gMS5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFJldHVybnMgdGhlIG0zMSB2YWx1ZS5cbiAgICovXG4gIGdldCBtMzEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19kYXRhWzEzXVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmb3Igcm93IDMsIGNvbHVtbiAxLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gVGhlIHZhbCBwYXJhbS5cbiAgICovXG4gIHNldCBtMzEodmFsKSB7XG4gICAgdGhpcy5fX2RhdGFbMTNdID0gdmFsXG4gIH1cblxuICAvKipcbiAgICogR2V0dGVyIGZvciByb3cgMywgY29sdW1uIDIuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSBtMzIgdmFsdWUuXG4gICAqL1xuICBnZXQgbTMyKCkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YVsxNF1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0ZXIgZm9yIHJvdyAzLCBjb2x1bW4gMi5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIFRoZSB2YWwgcGFyYW0uXG4gICAqL1xuICBzZXQgbTMyKHZhbCkge1xuICAgIHRoaXMuX19kYXRhWzE0XSA9IHZhbFxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3Igcm93IDMsIGNvbHVtbiAzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gUmV0dXJucyB0aGUgbTMzIHZhbHVlLlxuICAgKi9cbiAgZ2V0IG0zMygpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGFbMTVdXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciByb3cgMywgY29sdW1uIDMuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBUaGUgdmFsIHBhcmFtLlxuICAgKi9cbiAgc2V0IG0zMyh2YWwpIHtcbiAgICB0aGlzLl9fZGF0YVsxNV0gPSB2YWxcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIHRoZSBgeGAgYXhpcy5cbiAgICpcbiAgICogQHJldHVybiB7VmVjM30gLSBSZXR1cm5zIHRoZSBgeGAgYXhpcyBhcyBhIFZlYzMuXG4gICAqL1xuICBnZXQgeEF4aXMoKSB7XG4gICAgcmV0dXJuIFZlYzMuY3JlYXRlRnJvbUJ1ZmZlcih0aGlzLl9fZGF0YS5idWZmZXIsIDApXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciB0aGUgYHhgIGF4aXMuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjM30gdmVjMyAtIFRoZSB2ZWMzIHZhbHVlLlxuICAgKi9cbiAgc2V0IHhBeGlzKHZlYzMpIHtcbiAgICB0aGlzLnhBeGlzLnNldCh2ZWMzLngsIHZlYzMueSwgdmVjMy56KVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3IgdGhlIGB5YCBheGlzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtWZWMzfSAtIFJldHVybnMgdGhlIGB5YCBheGlzIGFzIGEgVmVjMy5cbiAgICovXG4gIGdldCB5QXhpcygpIHtcbiAgICByZXR1cm4gVmVjMy5jcmVhdGVGcm9tQnVmZmVyKHRoaXMuX19kYXRhLmJ1ZmZlciwgNCAqIDQpXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciB0aGUgYHlgIGF4aXMuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjM30gdmVjMyAtIFRoZSB2ZWMzIHZhbHVlLlxuICAgKi9cbiAgc2V0IHlBeGlzKHZlYzMpIHtcbiAgICB0aGlzLnlBeGlzLnNldCh2ZWMzLngsIHZlYzMueSwgdmVjMy56KVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3IgdGhlIGB6YCBheGlzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtWZWMzfSAtIFJldHVybnMgdGhlIGB6YCBheGlzIGFzIGEgVmVjMy5cbiAgICovXG4gIGdldCB6QXhpcygpIHtcbiAgICByZXR1cm4gVmVjMy5jcmVhdGVGcm9tQnVmZmVyKHRoaXMuX19kYXRhLmJ1ZmZlciwgOCAqIDQpXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciB0aGUgYHpgIGF4aXMuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjM30gdmVjMyAtIFRoZSB2ZWMzIHZhbHVlLlxuICAgKi9cbiAgc2V0IHpBeGlzKHZlYzMpIHtcbiAgICB0aGlzLnpBeGlzLnNldCh2ZWMzLngsIHZlYzMueSwgdmVjMy56KVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3IgdGhlIHRyYW5zbGF0aW9uIG9mIHRoZSBtYXRyaXguIEFzc3VtZXMgdGhlIHRyYW5zbGF0aW9uIHZhbHVlcyBhcmUgMTIsIDEzLCAmIDE0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtWZWMzfSAtIFJldHVybnMgdGhlIHRyYW5zbGF0aW9uLlxuICAgKi9cbiAgZ2V0IHRyYW5zbGF0aW9uKCkge1xuICAgIHJldHVybiBWZWMzLmNyZWF0ZUZyb21CdWZmZXIodGhpcy5fX2RhdGEuYnVmZmVyLCAxMiAqIDQpXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciB0aGUgdHJhbnNsYXRpb24gb2YgdGhlIG1hdHJpeC4gQXNzdW1lcyB0aGUgdHJhbnNsYXRpb24gdmFsdWVzIGFyZSAxMiwgMTMsICYgMTQuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjM30gdmVjMyAtIFRoZSB0cmFuc2xhdGlvbi5cbiAgICovXG4gIHNldCB0cmFuc2xhdGlvbih2ZWMzKSB7XG4gICAgdGhpcy50cmFuc2xhdGlvbi5zZXQodmVjMy54LCB2ZWMzLnksIHZlYzMueilcbiAgfVxuXG4gIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFNldHRlcnNcblxuICAvKipcbiAgICogU2V0cyB0aGUgc3RhdGUgb2YgdGhlIE1hdDQgY2xhc3NcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IG0wMCAtIFJvdyAwLCBjb2x1bW4gMC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0wMSAtIFJvdyAwLCBjb2x1bW4gMS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0wMiAtIFJvdyAwLCBjb2x1bW4gMi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0wMyAtIFJvdyAwLCBjb2x1bW4gMy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0xMCAtIFJvdyAxLCBjb2x1bW4gMC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0xMSAtIFJvdyAxLCBjb2x1bW4gMS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0xMiAtIFJvdyAxLCBjb2x1bW4gMi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0xMyAtIFJvdyAxLCBjb2x1bW4gMy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0yMCAtIFJvdyAyLCBjb2x1bW4gMC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0yMSAtIFJvdyAyLCBjb2x1bW4gMS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0yMiAtIFJvdyAyLCBjb2x1bW4gMi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0yMyAtIFJvdyAyLCBjb2x1bW4gMy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0zMCAtIFJvdyAzLCBjb2x1bW4gMC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0zMSAtIFJvdyAzLCBjb2x1bW4gMS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0zMiAtIFJvdyAzLCBjb2x1bW4gMi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG0zMyAtIFJvdyAzLCBjb2x1bW4gMy5cbiAgICovXG4gIHNldChcbiAgICBtMDAgPSAxLFxuICAgIG0wMSA9IDAsXG4gICAgbTAyID0gMCxcbiAgICBtMDMgPSAwLFxuICAgIG0xMCA9IDAsXG4gICAgbTExID0gMSxcbiAgICBtMTIgPSAwLFxuICAgIG0xMyA9IDAsXG4gICAgbTIwID0gMCxcbiAgICBtMjEgPSAwLFxuICAgIG0yMiA9IDEsXG4gICAgbTIzID0gMCxcbiAgICBtMzAgPSAwLFxuICAgIG0zMSA9IDAsXG4gICAgbTMyID0gMCxcbiAgICBtMzMgPSAxXG4gICkge1xuICAgIHRoaXMuX19kYXRhWzBdID0gbTAwXG4gICAgdGhpcy5fX2RhdGFbMV0gPSBtMDFcbiAgICB0aGlzLl9fZGF0YVsyXSA9IG0wMlxuICAgIHRoaXMuX19kYXRhWzNdID0gbTAzXG4gICAgdGhpcy5fX2RhdGFbNF0gPSBtMTBcbiAgICB0aGlzLl9fZGF0YVs1XSA9IG0xMVxuICAgIHRoaXMuX19kYXRhWzZdID0gbTEyXG4gICAgdGhpcy5fX2RhdGFbN10gPSBtMTNcbiAgICB0aGlzLl9fZGF0YVs4XSA9IG0yMFxuICAgIHRoaXMuX19kYXRhWzldID0gbTIxXG4gICAgdGhpcy5fX2RhdGFbMTBdID0gbTIyXG4gICAgdGhpcy5fX2RhdGFbMTFdID0gbTIzXG4gICAgdGhpcy5fX2RhdGFbMTJdID0gbTMwXG4gICAgdGhpcy5fX2RhdGFbMTNdID0gbTMxXG4gICAgdGhpcy5fX2RhdGFbMTRdID0gbTMyXG4gICAgdGhpcy5fX2RhdGFbMTVdID0gbTMzXG4gIH1cblxuICAvKipcbiAgICogU2V0cyBzdGF0ZSBvZiB0aGUgTWF0NCB3aXRoIHRoZSBpZGVudGl0eSAgTWF0cml4XG4gICAqL1xuICBzZXRJZGVudGl0eSgpIHtcbiAgICB0aGlzLnNldCgpXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgc3RhdGUgb2YgdGhlIE1hdDQgT2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0ge0Zsb2F0MzJBcnJheX0gZmxvYXQzMkFycmF5IC0gVGhlIGZsb2F0MzJBcnJheSB2YWx1ZS5cbiAgICovXG4gIHNldERhdGFBcnJheShmbG9hdDMyQXJyYXkpIHtcbiAgICB0aGlzLl9fZGF0YSA9IGZsb2F0MzJBcnJheVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgc3RhdGUgb2YgdGhlIE1hdDQgZnJvbSBhbm90aGVyIE1hdDRcbiAgICogPGJyPlxuICAgKiBOb3RlOiB3b3JrcyB3aXRoIGVpdGhlciBNYXQzIG9yIE1hdDQuXG4gICAqXG4gICAqIEBwYXJhbSB7TWF0NH0gbWF0NCAtIFRoZSBtYXQ0IHZhbHVlLlxuICAgKi9cbiAgc2V0RnJvbU1hdDQobWF0NCkge1xuICAgIHRoaXMuX19kYXRhWzBdID0gbWF0NC5tMDBcbiAgICB0aGlzLl9fZGF0YVsxXSA9IG1hdDQubTAxXG4gICAgdGhpcy5fX2RhdGFbMl0gPSBtYXQ0Lm0wMlxuICAgIHRoaXMuX19kYXRhWzNdID0gbWF0NC5tMDNcbiAgICB0aGlzLl9fZGF0YVs0XSA9IG1hdDQubTEwXG4gICAgdGhpcy5fX2RhdGFbNV0gPSBtYXQ0Lm0xMVxuICAgIHRoaXMuX19kYXRhWzZdID0gbWF0NC5tMTJcbiAgICB0aGlzLl9fZGF0YVs3XSA9IG1hdDQubTEzXG4gICAgdGhpcy5fX2RhdGFbOF0gPSBtYXQ0Lm0yMFxuICAgIHRoaXMuX19kYXRhWzldID0gbWF0NC5tMjFcbiAgICB0aGlzLl9fZGF0YVsxMF0gPSBtYXQ0Lm0yMlxuICAgIHRoaXMuX19kYXRhWzExXSA9IG1hdDQubTIzXG4gICAgdGhpcy5fX2RhdGFbMTJdID0gbWF0NC5tMzBcbiAgICB0aGlzLl9fZGF0YVsxM10gPSBtYXQ0Lm0zMVxuICAgIHRoaXMuX19kYXRhWzE0XSA9IG1hdDQubTMyXG4gICAgdGhpcy5fX2RhdGFbMTVdID0gbWF0NC5tMzNcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgTWF0MyBtYWRlIHVwIG9mIHRoZSB0b3AgbGVmdCBvZiB0aGUgbWF0NCB2YWx1ZXMuXG4gICAqXG4gICAqIEByZXR1cm4ge01hdDN9IC0gUmV0dXJucyBhIG5ldyBNYXQzLlxuICAgKi9cbiAgdG9NYXQzKCkge1xuICAgIHJldHVybiBuZXcgTWF0MyhcbiAgICAgIHRoaXMuX19kYXRhWzBdLFxuICAgICAgdGhpcy5fX2RhdGFbMV0sXG4gICAgICB0aGlzLl9fZGF0YVsyXSxcbiAgICAgIHRoaXMuX19kYXRhWzRdLFxuICAgICAgdGhpcy5fX2RhdGFbNV0sXG4gICAgICB0aGlzLl9fZGF0YVs2XSxcbiAgICAgIHRoaXMuX19kYXRhWzhdLFxuICAgICAgdGhpcy5fX2RhdGFbOV0sXG4gICAgICB0aGlzLl9fZGF0YVsxMF1cbiAgICApXG4gIH1cblxuICAvKipcbiAgICogVHJhbnNwb3NlcyAoZXhjaGFuZ2VzIGNvbHVtbnMgd2l0aCByb3dzKSB0aGlzIG1hdHJpeC5cbiAgICovXG4gIHRyYW5zcG9zZUluUGxhY2UoKSB7XG4gICAgLy8gSWYgd2UgYXJlIHRyYW5zcG9zaW5nIG91cnNlbHZlcyB3ZSBjYW4gc2tpcCBhIGZldyBzdGVwcyBidXQgaGF2ZSB0byBjYWNoZSBzb21lIHZhbHVlc1xuICAgIGNvbnN0IGEwMSA9IHRoaXMuX19kYXRhWzFdXG4gICAgY29uc3QgYTAyID0gdGhpcy5fX2RhdGFbMl1cbiAgICBjb25zdCBhMDMgPSB0aGlzLl9fZGF0YVszXVxuICAgIGNvbnN0IGExMiA9IHRoaXMuX19kYXRhWzZdXG4gICAgY29uc3QgYTEzID0gdGhpcy5fX2RhdGFbN11cbiAgICBjb25zdCBhMjMgPSB0aGlzLl9fZGF0YVsxMV1cblxuICAgIHRoaXMuX19kYXRhWzFdID0gdGhpcy5fX2RhdGFbNF1cbiAgICB0aGlzLl9fZGF0YVsyXSA9IHRoaXMuX19kYXRhWzhdXG4gICAgdGhpcy5fX2RhdGFbM10gPSB0aGlzLl9fZGF0YVsxMl1cbiAgICB0aGlzLl9fZGF0YVs0XSA9IGEwMVxuICAgIHRoaXMuX19kYXRhWzZdID0gdGhpcy5fX2RhdGFbOV1cbiAgICB0aGlzLl9fZGF0YVs3XSA9IHRoaXMuX19kYXRhWzEzXVxuICAgIHRoaXMuX19kYXRhWzhdID0gYTAyXG4gICAgdGhpcy5fX2RhdGFbOV0gPSBhMTJcbiAgICB0aGlzLl9fZGF0YVsxMV0gPSB0aGlzLl9fZGF0YVsxNF1cbiAgICB0aGlzLl9fZGF0YVsxMl0gPSBhMDNcbiAgICB0aGlzLl9fZGF0YVsxM10gPSBhMTNcbiAgICB0aGlzLl9fZGF0YVsxNF0gPSBhMjNcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc3Bvc2VzIChleGNoYW5nZXMgY29sdW1ucyB3aXRoIHJvd3MpIHRoaXMgbWF0cml4XG4gICAqIGFuZCByZXR1cm5zIHRoZSByZXN1bHQgYXMgYSBuZXcgaW5zdGFuY2UuXG4gICAqXG4gICAqIEByZXR1cm4ge01hdDR9IC0gUmV0dXJuIGEgbmV3IHRyYW5zcG9zZWQgTWF0NC5cbiAgICovXG4gIHRyYW5zcG9zZSgpIHtcbiAgICByZXR1cm4gbmV3IE1hdDQoXG4gICAgICB0aGlzLl9fZGF0YVswXSxcbiAgICAgIHRoaXMuX19kYXRhWzRdLFxuICAgICAgdGhpcy5fX2RhdGFbOF0sXG4gICAgICB0aGlzLl9fZGF0YVsxMl0sXG4gICAgICB0aGlzLl9fZGF0YVsxXSxcbiAgICAgIHRoaXMuX19kYXRhWzVdLFxuICAgICAgdGhpcy5fX2RhdGFbOV0sXG4gICAgICB0aGlzLl9fZGF0YVsxM10sXG4gICAgICB0aGlzLl9fZGF0YVsyXSxcbiAgICAgIHRoaXMuX19kYXRhWzZdLFxuICAgICAgdGhpcy5fX2RhdGFbMTBdLFxuICAgICAgdGhpcy5fX2RhdGFbMTRdLFxuICAgICAgdGhpcy5fX2RhdGFbM10sXG4gICAgICB0aGlzLl9fZGF0YVs3XSxcbiAgICAgIHRoaXMuX19kYXRhWzExXSxcbiAgICAgIHRoaXMuX19kYXRhWzE1XVxuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZlcnRzIGEgTWF0NCBhbmQgcmV0dXJucyB0aGUgcmVzdWx0IGFzIGEgbmV3IGluc3RhbmNlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtNYXQ0fSAtIFJldHVybnMgYSBuZXcgTWF0NC5cbiAgICovXG4gIGludmVyc2UoKSB7XG4gICAgY29uc3QgYTAwID0gdGhpcy5fX2RhdGFbMF1cbiAgICBjb25zdCBhMDEgPSB0aGlzLl9fZGF0YVsxXVxuICAgIGNvbnN0IGEwMiA9IHRoaXMuX19kYXRhWzJdXG4gICAgY29uc3QgYTAzID0gdGhpcy5fX2RhdGFbM11cbiAgICBjb25zdCBhMTAgPSB0aGlzLl9fZGF0YVs0XVxuICAgIGNvbnN0IGExMSA9IHRoaXMuX19kYXRhWzVdXG4gICAgY29uc3QgYTEyID0gdGhpcy5fX2RhdGFbNl1cbiAgICBjb25zdCBhMTMgPSB0aGlzLl9fZGF0YVs3XVxuICAgIGNvbnN0IGEyMCA9IHRoaXMuX19kYXRhWzhdXG4gICAgY29uc3QgYTIxID0gdGhpcy5fX2RhdGFbOV1cbiAgICBjb25zdCBhMjIgPSB0aGlzLl9fZGF0YVsxMF1cbiAgICBjb25zdCBhMjMgPSB0aGlzLl9fZGF0YVsxMV1cbiAgICBjb25zdCBhMzAgPSB0aGlzLl9fZGF0YVsxMl1cbiAgICBjb25zdCBhMzEgPSB0aGlzLl9fZGF0YVsxM11cbiAgICBjb25zdCBhMzIgPSB0aGlzLl9fZGF0YVsxNF1cbiAgICBjb25zdCBhMzMgPSB0aGlzLl9fZGF0YVsxNV1cblxuICAgIGNvbnN0IGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMFxuICAgIGNvbnN0IGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMFxuICAgIGNvbnN0IGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMFxuICAgIGNvbnN0IGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMVxuICAgIGNvbnN0IGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMVxuICAgIGNvbnN0IGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMlxuICAgIGNvbnN0IGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMFxuICAgIGNvbnN0IGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMFxuICAgIGNvbnN0IGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMFxuICAgIGNvbnN0IGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMVxuICAgIGNvbnN0IGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMVxuICAgIGNvbnN0IGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMlxuXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuICAgIGxldCBkZXQgPSBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDZcblxuICAgIGlmICghZGV0KSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1VuYWJsZSB0byBpbnZlcnQgTWF0NCcpXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICBkZXQgPSAxLjAgLyBkZXRcblxuICAgIHJldHVybiBuZXcgTWF0NChcbiAgICAgIChhMTEgKiBiMTEgLSBhMTIgKiBiMTAgKyBhMTMgKiBiMDkpICogZGV0LFxuICAgICAgKGEwMiAqIGIxMCAtIGEwMSAqIGIxMSAtIGEwMyAqIGIwOSkgKiBkZXQsXG4gICAgICAoYTMxICogYjA1IC0gYTMyICogYjA0ICsgYTMzICogYjAzKSAqIGRldCxcbiAgICAgIChhMjIgKiBiMDQgLSBhMjEgKiBiMDUgLSBhMjMgKiBiMDMpICogZGV0LFxuICAgICAgKGExMiAqIGIwOCAtIGExMCAqIGIxMSAtIGExMyAqIGIwNykgKiBkZXQsXG4gICAgICAoYTAwICogYjExIC0gYTAyICogYjA4ICsgYTAzICogYjA3KSAqIGRldCxcbiAgICAgIChhMzIgKiBiMDIgLSBhMzAgKiBiMDUgLSBhMzMgKiBiMDEpICogZGV0LFxuICAgICAgKGEyMCAqIGIwNSAtIGEyMiAqIGIwMiArIGEyMyAqIGIwMSkgKiBkZXQsXG4gICAgICAoYTEwICogYjEwIC0gYTExICogYjA4ICsgYTEzICogYjA2KSAqIGRldCxcbiAgICAgIChhMDEgKiBiMDggLSBhMDAgKiBiMTAgLSBhMDMgKiBiMDYpICogZGV0LFxuICAgICAgKGEzMCAqIGIwNCAtIGEzMSAqIGIwMiArIGEzMyAqIGIwMCkgKiBkZXQsXG4gICAgICAoYTIxICogYjAyIC0gYTIwICogYjA0IC0gYTIzICogYjAwKSAqIGRldCxcbiAgICAgIChhMTEgKiBiMDcgLSBhMTAgKiBiMDkgLSBhMTIgKiBiMDYpICogZGV0LFxuICAgICAgKGEwMCAqIGIwOSAtIGEwMSAqIGIwNyArIGEwMiAqIGIwNikgKiBkZXQsXG4gICAgICAoYTMxICogYjAxIC0gYTMwICogYjAzIC0gYTMyICogYjAwKSAqIGRldCxcbiAgICAgIChhMjAgKiBiMDMgLSBhMjEgKiBiMDEgKyBhMjIgKiBiMDApICogZGV0XG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIEludmVydHMgYSBNYXQ0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBpbnZlcnRJblBsYWNlKCkge1xuICAgIGNvbnN0IGEwMCA9IHRoaXMuX19kYXRhWzBdXG4gICAgY29uc3QgYTAxID0gdGhpcy5fX2RhdGFbMV1cbiAgICBjb25zdCBhMDIgPSB0aGlzLl9fZGF0YVsyXVxuICAgIGNvbnN0IGEwMyA9IHRoaXMuX19kYXRhWzNdXG4gICAgY29uc3QgYTEwID0gdGhpcy5fX2RhdGFbNF1cbiAgICBjb25zdCBhMTEgPSB0aGlzLl9fZGF0YVs1XVxuICAgIGNvbnN0IGExMiA9IHRoaXMuX19kYXRhWzZdXG4gICAgY29uc3QgYTEzID0gdGhpcy5fX2RhdGFbN11cbiAgICBjb25zdCBhMjAgPSB0aGlzLl9fZGF0YVs4XVxuICAgIGNvbnN0IGEyMSA9IHRoaXMuX19kYXRhWzldXG4gICAgY29uc3QgYTIyID0gdGhpcy5fX2RhdGFbMTBdXG4gICAgY29uc3QgYTIzID0gdGhpcy5fX2RhdGFbMTFdXG4gICAgY29uc3QgYTMwID0gdGhpcy5fX2RhdGFbMTJdXG4gICAgY29uc3QgYTMxID0gdGhpcy5fX2RhdGFbMTNdXG4gICAgY29uc3QgYTMyID0gdGhpcy5fX2RhdGFbMTRdXG4gICAgY29uc3QgYTMzID0gdGhpcy5fX2RhdGFbMTVdXG5cbiAgICBjb25zdCBiMDAgPSBhMDAgKiBhMTEgLSBhMDEgKiBhMTBcbiAgICBjb25zdCBiMDEgPSBhMDAgKiBhMTIgLSBhMDIgKiBhMTBcbiAgICBjb25zdCBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTBcbiAgICBjb25zdCBiMDMgPSBhMDEgKiBhMTIgLSBhMDIgKiBhMTFcbiAgICBjb25zdCBiMDQgPSBhMDEgKiBhMTMgLSBhMDMgKiBhMTFcbiAgICBjb25zdCBiMDUgPSBhMDIgKiBhMTMgLSBhMDMgKiBhMTJcbiAgICBjb25zdCBiMDYgPSBhMjAgKiBhMzEgLSBhMjEgKiBhMzBcbiAgICBjb25zdCBiMDcgPSBhMjAgKiBhMzIgLSBhMjIgKiBhMzBcbiAgICBjb25zdCBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzBcbiAgICBjb25zdCBiMDkgPSBhMjEgKiBhMzIgLSBhMjIgKiBhMzFcbiAgICBjb25zdCBiMTAgPSBhMjEgKiBhMzMgLSBhMjMgKiBhMzFcbiAgICBjb25zdCBiMTEgPSBhMjIgKiBhMzMgLSBhMjMgKiBhMzJcblxuICAgIC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcbiAgICBsZXQgZGV0ID0gYjAwICogYjExIC0gYjAxICogYjEwICsgYjAyICogYjA5ICsgYjAzICogYjA4IC0gYjA0ICogYjA3ICsgYjA1ICogYjA2XG5cbiAgICBpZiAoIWRldCkge1xuICAgICAgY29uc29sZS53YXJuKCdVbmFibGUgdG8gaW52ZXJ0IE1hdDQnKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGRldCA9IDEuMCAvIGRldFxuXG4gICAgdGhpcy5zZXQoXG4gICAgICAoYTExICogYjExIC0gYTEyICogYjEwICsgYTEzICogYjA5KSAqIGRldCxcbiAgICAgIChhMDIgKiBiMTAgLSBhMDEgKiBiMTEgLSBhMDMgKiBiMDkpICogZGV0LFxuICAgICAgKGEzMSAqIGIwNSAtIGEzMiAqIGIwNCArIGEzMyAqIGIwMykgKiBkZXQsXG4gICAgICAoYTIyICogYjA0IC0gYTIxICogYjA1IC0gYTIzICogYjAzKSAqIGRldCxcbiAgICAgIChhMTIgKiBiMDggLSBhMTAgKiBiMTEgLSBhMTMgKiBiMDcpICogZGV0LFxuICAgICAgKGEwMCAqIGIxMSAtIGEwMiAqIGIwOCArIGEwMyAqIGIwNykgKiBkZXQsXG4gICAgICAoYTMyICogYjAyIC0gYTMwICogYjA1IC0gYTMzICogYjAxKSAqIGRldCxcbiAgICAgIChhMjAgKiBiMDUgLSBhMjIgKiBiMDIgKyBhMjMgKiBiMDEpICogZGV0LFxuICAgICAgKGExMCAqIGIxMCAtIGExMSAqIGIwOCArIGExMyAqIGIwNikgKiBkZXQsXG4gICAgICAoYTAxICogYjA4IC0gYTAwICogYjEwIC0gYTAzICogYjA2KSAqIGRldCxcbiAgICAgIChhMzAgKiBiMDQgLSBhMzEgKiBiMDIgKyBhMzMgKiBiMDApICogZGV0LFxuICAgICAgKGEyMSAqIGIwMiAtIGEyMCAqIGIwNCAtIGEyMyAqIGIwMCkgKiBkZXQsXG4gICAgICAoYTExICogYjA3IC0gYTEwICogYjA5IC0gYTEyICogYjA2KSAqIGRldCxcbiAgICAgIChhMDAgKiBiMDkgLSBhMDEgKiBiMDcgKyBhMDIgKiBiMDYpICogZGV0LFxuICAgICAgKGEzMSAqIGIwMSAtIGEzMCAqIGIwMyAtIGEzMiAqIGIwMCkgKiBkZXQsXG4gICAgICAoYTIwICogYjAzIC0gYTIxICogYjAxICsgYTIyICogYjAwKSAqIGRldFxuICAgIClcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIE11bHRpcGxpZXMgdHdvIE1hdDRzIGFuZCByZXR1cm5zIHRoZSByZXN1bHQgYXMgYSBuZXcgaW5zdGFuY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7TWF0NH0gb3RoZXIgLSBUaGUgb3RoZXIgTWF0NCB0byBtdWx0aXBseSB3aXRoLlxuICAgKiBAcmV0dXJuIHtNYXQ0fSAtIFJldHVybnMgYSBuZXcgTWF0NC5cbiAgICovXG4gIG11bHRpcGx5KG90aGVyKSB7XG4gICAgY29uc3QgYTAwID0gdGhpcy5fX2RhdGFbMF1cbiAgICBjb25zdCBhMDEgPSB0aGlzLl9fZGF0YVsxXVxuICAgIGNvbnN0IGEwMiA9IHRoaXMuX19kYXRhWzJdXG4gICAgY29uc3QgYTAzID0gdGhpcy5fX2RhdGFbM11cbiAgICBjb25zdCBhMTAgPSB0aGlzLl9fZGF0YVs0XVxuICAgIGNvbnN0IGExMSA9IHRoaXMuX19kYXRhWzVdXG4gICAgY29uc3QgYTEyID0gdGhpcy5fX2RhdGFbNl1cbiAgICBjb25zdCBhMTMgPSB0aGlzLl9fZGF0YVs3XVxuICAgIGNvbnN0IGEyMCA9IHRoaXMuX19kYXRhWzhdXG4gICAgY29uc3QgYTIxID0gdGhpcy5fX2RhdGFbOV1cbiAgICBjb25zdCBhMjIgPSB0aGlzLl9fZGF0YVsxMF1cbiAgICBjb25zdCBhMjMgPSB0aGlzLl9fZGF0YVsxMV1cbiAgICBjb25zdCBhMzAgPSB0aGlzLl9fZGF0YVsxMl1cbiAgICBjb25zdCBhMzEgPSB0aGlzLl9fZGF0YVsxM11cbiAgICBjb25zdCBhMzIgPSB0aGlzLl9fZGF0YVsxNF1cbiAgICBjb25zdCBhMzMgPSB0aGlzLl9fZGF0YVsxNV1cblxuICAgIC8vIENhY2hlIG9ubHkgdGhlIGN1cnJlbnQgbGluZSBvZiB0aGUgc2Vjb25kIG1hdHJpeFxuICAgIGNvbnN0IGIgPSBvdGhlci5hc0FycmF5KClcbiAgICBsZXQgYjAgPSBiWzBdXG4gICAgbGV0IGIxID0gYlsxXVxuICAgIGxldCBiMiA9IGJbMl1cbiAgICBsZXQgYjMgPSBiWzNdXG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IE1hdDQoKVxuICAgIHJlc3VsdC5tMDAgPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMFxuICAgIHJlc3VsdC5tMDEgPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMVxuICAgIHJlc3VsdC5tMDIgPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMlxuICAgIHJlc3VsdC5tMDMgPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzM1xuXG4gICAgYjAgPSBiWzRdXG4gICAgYjEgPSBiWzVdXG4gICAgYjIgPSBiWzZdXG4gICAgYjMgPSBiWzddXG4gICAgcmVzdWx0Lm0xMCA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwXG4gICAgcmVzdWx0Lm0xMSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxXG4gICAgcmVzdWx0Lm0xMiA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyXG4gICAgcmVzdWx0Lm0xMyA9IGIwICogYTAzICsgYjEgKiBhMTMgKyBiMiAqIGEyMyArIGIzICogYTMzXG5cbiAgICBiMCA9IGJbOF1cbiAgICBiMSA9IGJbOV1cbiAgICBiMiA9IGJbMTBdXG4gICAgYjMgPSBiWzExXVxuICAgIHJlc3VsdC5tMjAgPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMFxuICAgIHJlc3VsdC5tMjEgPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMVxuICAgIHJlc3VsdC5tMjIgPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMlxuICAgIHJlc3VsdC5tMjMgPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzM1xuXG4gICAgYjAgPSBiWzEyXVxuICAgIGIxID0gYlsxM11cbiAgICBiMiA9IGJbMTRdXG4gICAgYjMgPSBiWzE1XVxuICAgIHJlc3VsdC5tMzAgPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMFxuICAgIHJlc3VsdC5tMzEgPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMVxuICAgIHJlc3VsdC5tMzIgPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMlxuICAgIHJlc3VsdC5tMzMgPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzM1xuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIC8qKlxuICAgKiBNdWx0aXBsaWVzIHR3byBNYXQ0cyBpbiBwbGFjZSBleHBsaWNpdGx5LlxuICAgKlxuICAgKiBAcGFyYW0ge01hdDR9IG90aGVyIC0gVGhlIG90aGVyIE1hdDQgdG8gbXVsdGlwbHkgd2l0aC5cbiAgICogQHJldHVybiB7TWF0NH0gLSBSZXR1cm5zIGEgbmV3IE1hdDQuXG4gICAqL1xuICBtdWx0aXBseUluUGxhY2Uob3RoZXIpIHtcbiAgICBjb25zdCBhID0gdGhpcy5hc0FycmF5KClcbiAgICBjb25zdCBhMDAgPSBhWzBdXG4gICAgY29uc3QgYTAxID0gYVsxXVxuICAgIGNvbnN0IGEwMiA9IGFbMl1cbiAgICBjb25zdCBhMDMgPSBhWzNdXG4gICAgY29uc3QgYTEwID0gYVs0XVxuICAgIGNvbnN0IGExMSA9IGFbNV1cbiAgICBjb25zdCBhMTIgPSBhWzZdXG4gICAgY29uc3QgYTEzID0gYVs3XVxuICAgIGNvbnN0IGEyMCA9IGFbOF1cbiAgICBjb25zdCBhMjEgPSBhWzldXG4gICAgY29uc3QgYTIyID0gYVsxMF1cbiAgICBjb25zdCBhMjMgPSBhWzExXVxuICAgIGNvbnN0IGEzMCA9IGFbMTJdXG4gICAgY29uc3QgYTMxID0gYVsxM11cbiAgICBjb25zdCBhMzIgPSBhWzE0XVxuICAgIGNvbnN0IGEzMyA9IGFbMTVdXG5cbiAgICAvLyBDYWNoZSBvbmx5IHRoZSBjdXJyZW50IGxpbmUgb2YgdGhlIHNlY29uZCBtYXRyaXhcbiAgICBjb25zdCBiID0gb3RoZXIuYXNBcnJheSgpXG4gICAgbGV0IGIwID0gYlswXVxuICAgIGxldCBiMSA9IGJbMV1cbiAgICBsZXQgYjIgPSBiWzJdXG4gICAgbGV0IGIzID0gYlszXVxuICAgIHRoaXMubTAwID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzBcbiAgICB0aGlzLm0wMSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxXG4gICAgdGhpcy5tMDIgPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMlxuICAgIHRoaXMubTAzID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzNcblxuICAgIGIwID0gYls0XVxuICAgIGIxID0gYls1XVxuICAgIGIyID0gYls2XVxuICAgIGIzID0gYls3XVxuICAgIHRoaXMubTEwID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzBcbiAgICB0aGlzLm0xMSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxXG4gICAgdGhpcy5tMTIgPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMlxuICAgIHRoaXMubTEzID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzNcblxuICAgIGIwID0gYls4XVxuICAgIGIxID0gYls5XVxuICAgIGIyID0gYlsxMF1cbiAgICBiMyA9IGJbMTFdXG4gICAgdGhpcy5tMjAgPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMFxuICAgIHRoaXMubTIxID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzFcbiAgICB0aGlzLm0yMiA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyXG4gICAgdGhpcy5tMjMgPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzM1xuXG4gICAgYjAgPSBiWzEyXVxuICAgIGIxID0gYlsxM11cbiAgICBiMiA9IGJbMTRdXG4gICAgYjMgPSBiWzE1XVxuICAgIHRoaXMubTMwID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzBcbiAgICB0aGlzLm0zMSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxXG4gICAgdGhpcy5tMzIgPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMlxuICAgIHRoaXMubTMzID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzNcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIFBvc3QgbXVsdGlwbGllcyB0d28gTWF0NHMgaW4gcGxhY2UgZXhwbGljaXRseS5cbiAgICpcbiAgICogQHBhcmFtIHtNYXQ0fSBvdGhlciAtIFRoZSBvdGhlciBNYXQ0IHRvIG11bHRpcGx5IHdpdGguXG4gICAqIEByZXR1cm4ge01hdDN9IC0gUmV0dXJucyB0aGUgcmVzdWx0IGFzIGEgbmV3IE1hdDQuXG4gICAqL1xuICBwb3N0TXVsdGlwbHlJblBsYWNlKG90aGVyKSB7XG4gICAgY29uc3QgYSA9IG90aGVyLmFzQXJyYXkoKVxuICAgIGNvbnN0IGEwMCA9IGFbMF1cbiAgICBjb25zdCBhMDEgPSBhWzFdXG4gICAgY29uc3QgYTAyID0gYVsyXVxuICAgIGNvbnN0IGEwMyA9IGFbM11cbiAgICBjb25zdCBhMTAgPSBhWzRdXG4gICAgY29uc3QgYTExID0gYVs1XVxuICAgIGNvbnN0IGExMiA9IGFbNl1cbiAgICBjb25zdCBhMTMgPSBhWzddXG4gICAgY29uc3QgYTIwID0gYVs4XVxuICAgIGNvbnN0IGEyMSA9IGFbOV1cbiAgICBjb25zdCBhMjIgPSBhWzEwXVxuICAgIGNvbnN0IGEyMyA9IGFbMTFdXG4gICAgY29uc3QgYTMwID0gYVsxMl1cbiAgICBjb25zdCBhMzEgPSBhWzEzXVxuICAgIGNvbnN0IGEzMiA9IGFbMTRdXG4gICAgY29uc3QgYTMzID0gYVsxNV1cblxuICAgIC8vIENhY2hlIG9ubHkgdGhlIGN1cnJlbnQgbGluZSBvZiB0aGUgc2Vjb25kIG1hdHJpeFxuICAgIGNvbnN0IGIgPSB0aGlzLmFzQXJyYXkoKVxuICAgIGxldCBiMCA9IGJbMF1cbiAgICBsZXQgYjEgPSBiWzFdXG4gICAgbGV0IGIyID0gYlsyXVxuICAgIGxldCBiMyA9IGJbM11cbiAgICB0aGlzLm0wMCA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwXG4gICAgdGhpcy5tMDEgPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMVxuICAgIHRoaXMubTAyID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzJcbiAgICB0aGlzLm0wMyA9IGIwICogYTAzICsgYjEgKiBhMTMgKyBiMiAqIGEyMyArIGIzICogYTMzXG5cbiAgICBiMCA9IGJbNF1cbiAgICBiMSA9IGJbNV1cbiAgICBiMiA9IGJbNl1cbiAgICBiMyA9IGJbN11cbiAgICB0aGlzLm0xMCA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwXG4gICAgdGhpcy5tMTEgPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMVxuICAgIHRoaXMubTEyID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzJcbiAgICB0aGlzLm0xMyA9IGIwICogYTAzICsgYjEgKiBhMTMgKyBiMiAqIGEyMyArIGIzICogYTMzXG5cbiAgICBiMCA9IGJbOF1cbiAgICBiMSA9IGJbOV1cbiAgICBiMiA9IGJbMTBdXG4gICAgYjMgPSBiWzExXVxuICAgIHRoaXMubTIwID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzBcbiAgICB0aGlzLm0yMSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxXG4gICAgdGhpcy5tMjIgPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMlxuICAgIHRoaXMubTIzID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzNcblxuICAgIGIwID0gYlsxMl1cbiAgICBiMSA9IGJbMTNdXG4gICAgYjIgPSBiWzE0XVxuICAgIGIzID0gYlsxNV1cbiAgICB0aGlzLm0zMCA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwXG4gICAgdGhpcy5tMzEgPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMVxuICAgIHRoaXMubTMyID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzJcbiAgICB0aGlzLm0zMyA9IGIwICogYTAzICsgYjEgKiBhMTMgKyBiMiAqIGEyMyArIGIzICogYTMzXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2xhdGUgYSBNYXQ0IGJ5IHRoZSBnaXZlbiB2ZWN0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjM30gdjMgLSBUaGUgZ2l2ZW4gdmVjdG9yIHRvIHRyYW5zbGF0ZSBhbG9uZy5cbiAgICogQHJldHVybiB7TWF0NH0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgdHJhbnNsYXRlSW5QbGFjZSh2Mykge1xuICAgIGNvbnN0IGEgPSB0aGlzLl9fZGF0YVxuICAgIGNvbnN0IHggPSB2My54XG4gICAgY29uc3QgeSA9IHYzLnlcbiAgICBjb25zdCB6ID0gdjMuelxuICAgIGFbMTJdID0gYVswXSAqIHggKyBhWzRdICogeSArIGFbOF0gKiB6ICsgYVsxMl1cbiAgICBhWzEzXSA9IGFbMV0gKiB4ICsgYVs1XSAqIHkgKyBhWzldICogeiArIGFbMTNdXG4gICAgYVsxNF0gPSBhWzJdICogeCArIGFbNl0gKiB5ICsgYVsxMF0gKiB6ICsgYVsxNF1cbiAgICBhWzE1XSA9IGFbM10gKiB4ICsgYVs3XSAqIHkgKyBhWzExXSAqIHogKyBhWzE1XVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgbG9vay1hdCBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gcG9zaXRpb24sIGZvY2FsIHBvaW50LCBhbmQgdXAgYXhpcy5cbiAgICpcbiAgICogQHBhcmFtIHtWZWMzfSBwb3MgLSBQb3NpdGlvbiBvZiB0aGUgdmlld2VyLlxuICAgKiBAcGFyYW0ge1ZlYzN9IHRhcmdldCAtIFBvaW50IHRoZSB2aWV3ZXIgaXMgbG9va2luZyBhdC5cbiAgICogQHBhcmFtIHtWZWMzfSB1cCAtIFZlYzMgcG9pbnRpbmcgdXAuXG4gICAqL1xuICBzZXRMb29rQXQocG9zLCB0YXJnZXQsIHVwKSB7XG4gICAgY29uc3QgekF4aXMgPSBwb3Muc3VidHJhY3QodGFyZ2V0KVxuICAgIGNvbnN0IHpMZW4gPSB6QXhpcy5sZW5ndGgoKVxuICAgIGlmICh6TGVuIDwgTnVtYmVyLkVQU0lMT04pIHtcbiAgICAgIHRoaXMuc2V0SWRlbnRpdHkoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHpBeGlzLnNjYWxlSW5QbGFjZSgxLjAgLyB6TGVuKVxuXG4gICAgY29uc3QgeEF4aXMgPSB1cC5jcm9zcyh6QXhpcylcbiAgICBjb25zdCB4TGVuID0geEF4aXMubGVuZ3RoKClcbiAgICBpZiAoeExlbiA+IE51bWJlci5FUFNJTE9OKSB4QXhpcy5zY2FsZUluUGxhY2UoMS4wIC8geExlbilcblxuICAgIGNvbnN0IHlBeGlzID0gekF4aXMuY3Jvc3MoeEF4aXMpXG4gICAgY29uc3QgeUxlbiA9IHlBeGlzLmxlbmd0aCgpXG4gICAgaWYgKHlMZW4gPiBOdW1iZXIuRVBTSUxPTikgeUF4aXMuc2NhbGVJblBsYWNlKDEuMCAvIHlMZW4pXG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBwcmV0dGllci9wcmV0dGllciovXG4gICAgdGhpcy5zZXQoXG4gICAgICB4QXhpcy54LFxuICAgICAgeEF4aXMueSxcbiAgICAgIHhBeGlzLnosXG4gICAgICAwLFxuICAgICAgeUF4aXMueCxcbiAgICAgIHlBeGlzLnksXG4gICAgICB5QXhpcy56LFxuICAgICAgMCxcbiAgICAgIHpBeGlzLngsXG4gICAgICB6QXhpcy55LFxuICAgICAgekF4aXMueixcbiAgICAgIDAsXG4gICAgICBwb3MueCxcbiAgICAgIHBvcy55LFxuICAgICAgcG9zLnosXG4gICAgICAxXG4gICAgKVxuICAgIC8qIGVzbGludC1lbmFibGUgcHJldHRpZXIvcHJldHRpZXIqL1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIGdpdmVuIGFuZ2xlIGFyb3VuZCBhIGdpdmVuIGF4aXMuXG4gICAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICAgKlxuICAgKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAgICogICAgIG1hdDQucm90YXRlKGRlc3QsIGRlc3QsIHJhZCwgYXhpcyk7XG4gICAqXG4gICAqIEBwYXJhbSB7VmVjM30gYXhpcyAtIFRoZSBheGlzIHRvIHJvdGF0ZSBhcm91bmQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByYWQgLSBUaGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnkuXG4gICAqIEByZXR1cm4ge01hdDR9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIHNldFJvdGF0aW9uKGF4aXMsIHJhZCkge1xuICAgIGNvbnN0IGxlbiA9IGF4aXMubGVuZ3RoKClcblxuICAgIGlmIChNYXRoLmFicyhsZW4pIDwgTnVtYmVyLkVQU0lMT04pIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgY29uc3QgeCA9IGF4aXMueCAvIGxlblxuICAgIGNvbnN0IHkgPSBheGlzLnkgLyBsZW5cbiAgICBjb25zdCB6ID0gYXhpcy56IC8gbGVuXG5cbiAgICBjb25zdCBzID0gTWF0aC5zaW4ocmFkKVxuICAgIGNvbnN0IGMgPSBNYXRoLmNvcyhyYWQpXG4gICAgY29uc3QgdCA9IDEgLSBjXG5cbiAgICAvLyBQZXJmb3JtIHJvdGF0aW9uLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuICAgIGNvbnN0IGEgPSB0aGlzLl9fZGF0YVxuICAgIGFbMF0gPSB4ICogeCAqIHQgKyBjXG4gICAgYVsxXSA9IHkgKiB4ICogdCArIHogKiBzXG4gICAgYVsyXSA9IHogKiB4ICogdCAtIHkgKiBzXG4gICAgYVszXSA9IDBcbiAgICBhWzRdID0geCAqIHkgKiB0IC0geiAqIHNcbiAgICBhWzVdID0geSAqIHkgKiB0ICsgY1xuICAgIGFbNl0gPSB6ICogeSAqIHQgKyB4ICogc1xuICAgIGFbN10gPSAwXG4gICAgYVs4XSA9IHggKiB6ICogdCArIHkgKiBzXG4gICAgYVs5XSA9IHkgKiB6ICogdCAtIHggKiBzXG4gICAgYVsxMF0gPSB6ICogeiAqIHQgKyBjXG4gICAgYVsxMV0gPSAwXG4gICAgYVsxMl0gPSAwXG4gICAgYVsxM10gPSAwXG4gICAgYVsxNF0gPSAwXG4gICAgYVsxNV0gPSAxXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWCBheGlzLlxuICAgKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAgICpcbiAgICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gICAqICAgICBtYXQ0LnJvdGF0ZVgoZGVzdCwgZGVzdCwgcmFkKTtcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJhZCAtIFRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieS5cbiAgICogQHJldHVybiB7TWF0NH0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgc2V0WFJvdGF0aW9uKHJhZCkge1xuICAgIGNvbnN0IHMgPSBNYXRoLnNpbihyYWQpXG4gICAgY29uc3QgYyA9IE1hdGguY29zKHJhZClcblxuICAgIC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cbiAgICBjb25zdCBhID0gdGhpcy5fX2RhdGFcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBwcmV0dGllci9wcmV0dGllciovXG4gICAgYVswXSA9IDFcbiAgICBhWzFdID0gMFxuICAgIGFbMl0gPSAwXG4gICAgYVszXSA9IDBcbiAgICBhWzRdID0gMFxuICAgIGFbNV0gPSBjXG4gICAgYVs2XSA9IHNcbiAgICBhWzddID0gMFxuICAgIGFbOF0gPSAwXG4gICAgYVs5XSA9IC1zXG4gICAgYVsxMF0gPSBjXG4gICAgYVsxMV0gPSAwXG4gICAgYVsxMl0gPSAwXG4gICAgYVsxM10gPSAwXG4gICAgYVsxNF0gPSAwXG4gICAgYVsxNV0gPSAxXG4gICAgLyogZXNsaW50LWVuYWJsZSBwcmV0dGllci9wcmV0dGllciovXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWSBheGlzLlxuICAgKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAgICpcbiAgICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gICAqICAgICBtYXQ0LnJvdGF0ZVkoZGVzdCwgZGVzdCwgcmFkKTtcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJhZCAtIFRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieS5cbiAgICogQHJldHVybiB7TWF0NH0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgc2V0WVJvdGF0aW9uKHJhZCkge1xuICAgIGNvbnN0IHMgPSBNYXRoLnNpbihyYWQpXG4gICAgY29uc3QgYyA9IE1hdGguY29zKHJhZClcblxuICAgIC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cbiAgICBjb25zdCBhID0gdGhpcy5fX2RhdGFcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBwcmV0dGllci9wcmV0dGllciovXG4gICAgYVswXSA9IGNcbiAgICBhWzFdID0gMFxuICAgIGFbMl0gPSAtc1xuICAgIGFbM10gPSAwXG4gICAgYVs0XSA9IDBcbiAgICBhWzVdID0gMVxuICAgIGFbNl0gPSAwXG4gICAgYVs3XSA9IDBcbiAgICBhWzhdID0gc1xuICAgIGFbOV0gPSAwXG4gICAgYVsxMF0gPSBjXG4gICAgYVsxMV0gPSAwXG4gICAgYVsxMl0gPSAwXG4gICAgYVsxM10gPSAwXG4gICAgYVsxNF0gPSAwXG4gICAgYVsxNV0gPSAxXG4gICAgLyogZXNsaW50LWVuYWJsZSBwcmV0dGllci9wcmV0dGllciovXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWiBheGlzLlxuICAgKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAgICpcbiAgICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gICAqICAgICBtYXQ0LnJvdGF0ZVooZGVzdCwgZGVzdCwgcmFkKTtcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJhZCAtIFRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieS5cbiAgICogQHJldHVybiB7TWF0NH0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgc2V0WlJvdGF0aW9uKHJhZCkge1xuICAgIGNvbnN0IHMgPSBNYXRoLnNpbihyYWQpXG4gICAgY29uc3QgYyA9IE1hdGguY29zKHJhZClcblxuICAgIC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cbiAgICBjb25zdCBhID0gdGhpcy5fX2RhdGFcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBwcmV0dGllci9wcmV0dGllciovXG4gICAgYVswXSA9IGNcbiAgICBhWzFdID0gc1xuICAgIGFbMl0gPSAwXG4gICAgYVszXSA9IDBcbiAgICBhWzRdID0gLXNcbiAgICBhWzVdID0gY1xuICAgIGFbNl0gPSAwXG4gICAgYVs3XSA9IDBcbiAgICBhWzhdID0gMFxuICAgIGFbOV0gPSAwXG4gICAgYVsxMF0gPSAxXG4gICAgYVsxMV0gPSAwXG4gICAgYVsxMl0gPSAwXG4gICAgYVsxM10gPSAwXG4gICAgYVsxNF0gPSAwXG4gICAgYVsxNV0gPSAxXG4gICAgLyogZXNsaW50LWVuYWJsZSBwcmV0dGllci9wcmV0dGllciovXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm1zIHRoZSBWZWM0IHdpdGggYSBNYXQ0LlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzR9IHZlYyAtIFRoZSB2ZWMgdmFsdWUuXG4gICAqIEByZXR1cm4ge1ZlYzR9IC0gUmV0dXJuIHRoZSByZXN1bHQgYXMgYSBuZXcgVmVjNC5cbiAgICovXG4gIHRyYW5zZm9ybVZlYzQodmVjKSB7XG4gICAgY29uc3QgYSA9IHRoaXMuX19kYXRhXG4gICAgY29uc3QgeCA9IHZlYy54XG4gICAgY29uc3QgeSA9IHZlYy55XG4gICAgY29uc3QgeiA9IHZlYy56XG4gICAgY29uc3QgdyA9IHZlYy50XG4gICAgcmV0dXJuIG5ldyBWZWM0KFxuICAgICAgYVswXSAqIHggKyBhWzRdICogeSArIGFbOF0gKiB6ICsgYVsxMl0gKiB3LFxuICAgICAgYVsxXSAqIHggKyBhWzVdICogeSArIGFbOV0gKiB6ICsgYVsxM10gKiB3LFxuICAgICAgYVsyXSAqIHggKyBhWzZdICogeSArIGFbMTBdICogeiArIGFbMTRdICogdyxcbiAgICAgIGFbM10gKiB4ICsgYVs3XSAqIHkgKyBhWzExXSAqIHogKyBhWzE1XSAqIHdcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogVHJhbnNmb3JtcyB0aGUgVmVjMyB3aXRoIGEgTWF0NC5cbiAgICpcbiAgICogQHBhcmFtIHtWZWMzfSB2ZWMgLSBUaGUgdmVjIHZhbHVlLlxuICAgKiBAcmV0dXJuIHtWZWMzfSAtIFJldHVybiB0aGUgcmVzdWx0IGFzIGEgbmV3IFZlYzMuXG4gICAqL1xuICB0cmFuc2Zvcm1WZWMzKHZlYykge1xuICAgIGNvbnN0IGEgPSB0aGlzLl9fZGF0YVxuICAgIGNvbnN0IHggPSB2ZWMueFxuICAgIGNvbnN0IHkgPSB2ZWMueVxuICAgIGNvbnN0IHogPSB2ZWMuelxuICAgIHJldHVybiBuZXcgVmVjMyhcbiAgICAgIGFbMF0gKiB4ICsgYVs0XSAqIHkgKyBhWzhdICogeiArIGFbMTJdLFxuICAgICAgYVsxXSAqIHggKyBhWzVdICogeSArIGFbOV0gKiB6ICsgYVsxM10sXG4gICAgICBhWzJdICogeCArIGFbNl0gKiB5ICsgYVsxMF0gKiB6ICsgYVsxNF1cbiAgICApXG4gIH1cblxuICAvKipcbiAgICogUm90YXRlcyBhIGdpdmVuIGBWZWMzYCBhbmQgdGhlIHJlc3VsdCBpcyByZXR1cm5lZCBhcyBhIG5ldyBgVmVjM2AsIGFwcGx5aW5nIG9ubHkgdGhlIHRvcCBsZWZ0IGNvbXBvbmVudHMgb2YgdGhlIG1hdHJpeCwgc28gbm90IGFwcGx5aW5nIGFueSB0cmFuc2xhdGlvbi5cbiAgICogQHBhcmFtIHtWZWMzfSB2ZWMgLSBUaGUgdmVjIHZhbHVlLlxuICAgKiBAcmV0dXJuIHtWZWMzfSAtIFJldHVybiB0aGUgcmVzdWx0IGFzIGEgbmV3IFZlYzMuXG4gICAqL1xuICByb3RhdGVWZWMzKHZlYykge1xuICAgIGNvbnN0IGEgPSB0aGlzLl9fZGF0YVxuICAgIGNvbnN0IHggPSB2ZWMueFxuICAgIGNvbnN0IHkgPSB2ZWMueVxuICAgIGNvbnN0IHogPSB2ZWMuelxuICAgIHJldHVybiBuZXcgVmVjMyhhWzBdICogeCArIGFbNF0gKiB5ICsgYVs4XSAqIHosIGFbMV0gKiB4ICsgYVs1XSAqIHkgKyBhWzldICogeiwgYVsyXSAqIHggKyBhWzZdICogeSArIGFbMTBdICogeilcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHBlcnNwZWN0aXZlIGZyb20gYSBNYXQ0LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gZm92WSAtIFRoZSBmb3ZZIHZhbHVlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gYXNwZWN0IC0gVGhlIGFzcGVjdCB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgLSBUaGUgbmVhciB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZhciAtIFRoZSBmYXIgdmFsdWUuXG4gICAqL1xuICBzZXRQZXJzcGVjdGl2ZU1hdHJpeChmb3ZZLCBhc3BlY3QsIG5lYXIsIGZhcikge1xuICAgIGNvbnN0IGYgPSBNYXRoLnRhbihNYXRoLlBJICogMC41IC0gMC41ICogZm92WSlcbiAgICBjb25zdCByYW5nZUludiA9IDEuMCAvIChuZWFyIC0gZmFyKVxuICAgIC8qIGVzbGludC1kaXNhYmxlIHByZXR0aWVyL3ByZXR0aWVyKi9cbiAgICB0aGlzLnNldChmIC8gYXNwZWN0LCAwLCAwLCAwLCAwLCBmLCAwLCAwLCAwLCAwLCAobmVhciArIGZhcikgKiByYW5nZUludiwgLTEsIDAsIDAsIG5lYXIgKiBmYXIgKiByYW5nZUludiAqIDIsIDApXG4gICAgLyogZXNsaW50LWVuYWJsZSBwcmV0dGllci9wcmV0dGllciovXG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgb3J0aG9ncmFwaGljIG1hdHJpeCBhbmQgc2V0cyB0aGUgc3RhdGUgb2YgdGhlIE1hdDQgY2xhc3NcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlZnQgLSBUaGUgbGVmdCB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHJpZ2h0IC0gVGhlIHJpZ2h0IHZhbHVlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gYm90dG9tIC0gVGhlIGJvdHRvbSB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHRvcCAtIFRoZSB0b3AgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBuZWFyIC0gVGhlIG5lYXIgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmYXIgLSBUaGUgZmFyIHZhbHVlLlxuICAgKi9cbiAgc2V0T3J0aG9ncmFwaGljTWF0cml4KGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyKSB7XG4gICAgY29uc3QgbHIgPSAxIC8gKGxlZnQgLSByaWdodClcbiAgICBjb25zdCBidCA9IDEgLyAoYm90dG9tIC0gdG9wKVxuICAgIGNvbnN0IG5mID0gMSAvIChuZWFyIC0gZmFyKVxuICAgIC8qIGVzbGludC1kaXNhYmxlIHByZXR0aWVyL3ByZXR0aWVyKi9cbiAgICB0aGlzLnNldChcbiAgICAgIC0yICogbHIsXG4gICAgICAwLFxuICAgICAgMCxcbiAgICAgIDAsXG4gICAgICAwLFxuICAgICAgLTIgKiBidCxcbiAgICAgIDAsXG4gICAgICAwLFxuICAgICAgMCxcbiAgICAgIDAsXG4gICAgICAyICogbmYsXG4gICAgICAwLFxuICAgICAgKGxlZnQgKyByaWdodCkgKiBscixcbiAgICAgICh0b3AgKyBib3R0b20pICogYnQsXG4gICAgICAoZmFyICsgbmVhcikgKiBuZixcbiAgICAgIDFcbiAgICApXG4gICAgLyogZXNsaW50LWVuYWJsZSBwcmV0dGllci9wcmV0dGllciovXG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBNYXRyaXggdG8gYmUgYSBzY2FsZSBtYXRyaXguXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHggdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHkgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB6IC0gVGhlIHogdmFsdWUuXG4gICAqL1xuICBzZXRTY2FsZSh4LCB5LCB6KSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgcHJldHRpZXIvcHJldHRpZXIqL1xuICAgIGlmICh4IGluc3RhbmNlb2YgVmVjMykge1xuICAgICAgdGhpcy5zZXQoeC54LCAwLCAwLCAwLCAwLCB4LnksIDAsIDAsIDAsIDAsIHgueiwgMCwgMCwgMCwgMCwgMSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXQoeCwgMCwgMCwgMCwgMCwgeSwgMCwgMCwgMCwgMCwgeiwgMCwgMCwgMCwgMCwgMSlcbiAgICB9XG4gICAgLyogZXNsaW50LWVuYWJsZSBwcmV0dGllci9wcmV0dGllciovXG4gIH1cblxuICAvKipcbiAgICogTG9hZHMgYSAzeDQgbWF0cml4IGRhdGEgaW50byBhIHRoZSBNYXQ0LlxuICAgKlxuICAgKiBAcGFyYW0ge2FycmF5fSBtM3g0IC0gVGhlIG0zeDQgdmFsdWUuXG4gICAqL1xuICBzZXRGcm9tTWF0M3g0QXJyYXkobTN4NCkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIHByZXR0aWVyL3ByZXR0aWVyKi9cbiAgICB0aGlzLnNldChcbiAgICAgIG0zeDRbMF0sXG4gICAgICBtM3g0WzFdLFxuICAgICAgbTN4NFsyXSxcbiAgICAgIDAsXG4gICAgICBtM3g0WzNdLFxuICAgICAgbTN4NFs0XSxcbiAgICAgIG0zeDRbNV0sXG4gICAgICAwLFxuICAgICAgbTN4NFs2XSxcbiAgICAgIG0zeDRbN10sXG4gICAgICBtM3g0WzhdLFxuICAgICAgMCxcbiAgICAgIG0zeDRbOV0sXG4gICAgICBtM3g0WzEwXSxcbiAgICAgIG0zeDRbMTFdLFxuICAgICAgMVxuICAgIClcbiAgICAvKiBlc2xpbnQtZW5hYmxlIHByZXR0aWVyL3ByZXR0aWVyKi9cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IE1hdDQgdG8gd3JhcCBleGlzdGluZyBtZW1vcnkgaW4gYSBidWZmZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGJ1ZmZlciAtIFRoZSBidWZmZXIgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgLSBUaGUgb2Zmc2V0IHZhbHVlLlxuICAgKiBAcmV0dXJuIHtNYXQ0fSAtIFJldHVybnMgYSBuZXcgTWF0NC5cbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBjcmVhdGVGcm9tRmxvYXQzMkJ1ZmZlcihidWZmZXIsIG9mZnNldCA9IDApIHtcbiAgICBjb25zb2xlLndhcm4oJ0RlcHJlY2F0ZWQsIHVzZSAjY3JlYXRlRnJvbUJ1ZmZlciBpbnN0ZWFkJylcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVGcm9tQnVmZmVyKGJ1ZmZlciwgb2Zmc2V0ICogNClcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGEgYE1hdDRgIHVzaW5nIGFuIEFycmF5QnVmZmVyLlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGJ1ZmZlciAtIFRoZSBidWZmZXIgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBieXRlT2Zmc2V0IC0gVGhlIG9mZnNldCB2YWx1ZS5cbiAgICogQHJldHVybiB7TWF0NH0gLSBSZXR1cm5zIGEgbmV3IE1hdDQuXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlRnJvbUJ1ZmZlcihidWZmZXIsIGJ5dGVPZmZzZXQpIHtcbiAgICByZXR1cm4gbmV3IE1hdDQobmV3IEZsb2F0MzJBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIDE2KSkgLy8gNCBieXRlcyBwZXIgMzJiaXQgZmxvYXRcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9uZXMgdGhpcyBNYXQ0IHJldHVybmluZyBhIG5ldyBpbnN0YW5jZS5cbiAgICpcbiAgICogQHJldHVybiB7TWF0NH0gLSBSZXR1cm5zIGEgbmV3IE1hdDQuXG4gICAqL1xuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IE1hdDQoXG4gICAgICB0aGlzLl9fZGF0YVswXSxcbiAgICAgIHRoaXMuX19kYXRhWzFdLFxuICAgICAgdGhpcy5fX2RhdGFbMl0sXG4gICAgICB0aGlzLl9fZGF0YVszXSxcbiAgICAgIHRoaXMuX19kYXRhWzRdLFxuICAgICAgdGhpcy5fX2RhdGFbNV0sXG4gICAgICB0aGlzLl9fZGF0YVs2XSxcbiAgICAgIHRoaXMuX19kYXRhWzddLFxuICAgICAgdGhpcy5fX2RhdGFbOF0sXG4gICAgICB0aGlzLl9fZGF0YVs5XSxcbiAgICAgIHRoaXMuX19kYXRhWzEwXSxcbiAgICAgIHRoaXMuX19kYXRhWzExXSxcbiAgICAgIHRoaXMuX19kYXRhWzEyXSxcbiAgICAgIHRoaXMuX19kYXRhWzEzXSxcbiAgICAgIHRoaXMuX19kYXRhWzE0XSxcbiAgICAgIHRoaXMuX19kYXRhWzE1XVxuICAgIClcbiAgfVxuXG4gIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gU3RhdGljIE1ldGhvZHNcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBNYXQ0LlxuICAgKiBAcGFyYW0gey4uLm9iamVjdH0gLi4uYXJncyAtIFRoZSAuLi5hcmdzIHBhcmFtLlxuICAgKiBAcmV0dXJuIHtNYXQ0fSAtIFJldHVybnMgYSBuZXcgTWF0NC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBjcmVhdGUoLi4uYXJncykge1xuICAgIHJldHVybiBuZXcgTWF0NCguLi5hcmdzKVxuICB9XG5cbiAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFBlcnNpc3RlbmNlXG5cbiAgLyoqXG4gICAqIFRoZSB0b0pTT04gbWV0aG9kIGVuY29kZXMgdGhpcyB0eXBlIGFzIGEganNvbiBvYmplY3QgZm9yIHBlcnNpc3RlbmNlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IC0gVGhlIGpzb24gb2JqZWN0LlxuICAgKi9cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBmcm9tSlNPTiBtZXRob2QgZGVjb2RlcyBhIGpzb24gb2JqZWN0IGZvciB0aGlzIHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBqc29uIC0gVGhlIGpzb24gcGFyYW0uXG4gICAqL1xuICBmcm9tSlNPTihqc29uKSB7XG4gICAgaWYgKGpzb24gaW5zdGFuY2VvZiBBcnJheSkgdGhpcy5fX2RhdGEgPSBuZXcgRmxvYXQzMkFycmF5KGpzb24pXG4gICAgZWxzZSBpZiAoanNvbiBpbnN0YW5jZW9mIE9iamVjdCkgdGhpcy5fX2RhdGEgPSBuZXcgRmxvYXQzMkFycmF5KE9iamVjdC52YWx1ZXMoanNvbikpXG4gIH1cblxuICAvKipcbiAgICogTG9hZHMgdGhlIHN0YXRlIG9mIHRoZSB2YWx1ZSBmcm9tIGEgYmluYXJ5IHJlYWRlci5cbiAgICpcbiAgICogQHBhcmFtIHtCaW5SZWFkZXJ9IHJlYWRlciAtIFRoZSByZWFkZXIgdmFsdWUuXG4gICAqL1xuICByZWFkQmluYXJ5KHJlYWRlcikge1xuICAgIHRoaXMuX19kYXRhID0gcmVhZGVyLmxvYWRGbG9hdDMyQXJyYXkoMTYpXG4gIH1cbn1cblxuUmVnaXN0cnkucmVnaXN0ZXIoJ01hdDQnLCBNYXQ0KVxuXG5leHBvcnQgeyBNYXQ0IH1cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5pbXBvcnQgeyBBdHRyVmFsdWUgfSBmcm9tICcuL0F0dHJWYWx1ZS5qcydcbmltcG9ydCB7IFZlYzMgfSBmcm9tICcuL1ZlYzMuanMnXG5pbXBvcnQgeyBNYXQzIH0gZnJvbSAnLi9NYXQzLmpzJ1xuaW1wb3J0IHsgTWF0NCB9IGZyb20gJy4vTWF0NC5qcydcbmltcG9ydCB7IEV1bGVyQW5nbGVzIH0gZnJvbSAnLi9FdWxlckFuZ2xlcy5qcydcbmltcG9ydCB7IFJlZ2lzdHJ5IH0gZnJvbSAnLi4vUmVnaXN0cnknXG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgcXVhdGVybmlvbi4gUXVhdGVybmlvbnMgYXJlIHVzZWQgdG8gcmVwcmVzZW50IDMgZGltZW5zaW9uYWwgcm90YXRpb25zLlxuICpcbiAqIFdoaWxlIFF1YXRlcm5pb25zIGFyZSBkaWZmaWN1bHQgdG8gdW5kZXJzdGFuZCB0aGV5IGhhdmUgaW1wb3J0YW50IG1hdGhlbWF0aWNhbCBwcm9wZXJ0aWVzIHRoYXQgbWFrZSB0aGVtIHZlcnkgdXNlZnVsIGluIDNkIGVuZ2luZXMuXG4gKiBUaGV5IGNhbiBiZSBkaXJlY3RseSBtdWx0aXBsaWVkIHRvZ2V0aGVyIGluIHRoZSBzYW1lIHdhcyBhcyBtYXRyaWNlcy5cbiAqIFRoZXkgY2FuIGJlIGludGVycG9sYXRlZCBmcm9tIG9uZSB2YWx1ZSB0byBhbm90aGVyIHdoaWxlIG1haW50YWluaW5nIGNvbnN0YW50IGFuZ3VsYXIgdmVsb2NpdHkuXG4gKiBUaGV5IGNhbiBiZSBjb252ZXJ0ZWQgdG8gb3RoZXIgbW9yZSBlYXNpbHkgdW5kZXJzdG9vZCByZXByZXNlbnRhdGlvbnMgc3VjaCBhcyBFdWxlckFuZ2xlcyBvciBNYXRyaWNlcy5cbiAqXG4gKiBAZXh0ZW5kcyBBdHRyVmFsdWVcbiAqL1xuY2xhc3MgUXVhdCBleHRlbmRzIEF0dHJWYWx1ZSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgcXVhdGVybmlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXIgfCBBcnJheUJ1ZmZlciB8IG9iamVjdH0geCAtIFRoZSBhbmdsZSBvZiB0aGUgeCBheGlzLiBEZWZhdWx0IGlzIDAuIE9yIGEgRmxvYXQzMkFycmF5IGNvbnRhaW5pbmcgNCB2YWx1ZXMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIGFuZ2xlIG9mIHRoZSB5IGF4aXMuIERlZmF1bHQgaXMgMC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHogLSBUaGUgYW5nbGUgb2YgdGhlIHogYXhpcy4gRGVmYXVsdCBpcyAwLlxuICAgKiBAcGFyYW0ge251bWJlcn0gdyAtIFRoZSB3IHZhbHVlLiBEZWZhdWx0IGlzIDEuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih4ID0gMCwgeSA9IDAsIHogPSAwLCB3ID0gMSkge1xuICAgIHN1cGVyKClcblxuICAgIGlmICh4IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5KSB7XG4gICAgICB0aGlzLl9fZGF0YSA9IHhcbiAgICB9IGVsc2UgaWYgKHggaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgY29uc29sZS53YXJuKGBkZXByZWNhdGVkLCBwbGVhc2UgdXNlIG5ldyBWZWM0KG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCA0KSlgKVxuICAgICAgY29uc3QgYnVmZmVyID0geFxuICAgICAgY29uc3QgYnl0ZU9mZnNldCA9IHlcbiAgICAgIHRoaXMuX19kYXRhID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIDQpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX19kYXRhID0gbmV3IEZsb2F0MzJBcnJheSg0KVxuICAgICAgaWYgKHR5cGVvZiB4ID09PSAnb2JqZWN0Jykge1xuICAgICAgICB0aGlzLl9fZGF0YVswXSA9IDBcbiAgICAgICAgdGhpcy5fX2RhdGFbMV0gPSAwXG4gICAgICAgIHRoaXMuX19kYXRhWzJdID0gMFxuICAgICAgICB0aGlzLl9fZGF0YVszXSA9IDFcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4geCkge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHhba2V5XSkpIHRoaXNba2V5XS5jYWxsKHRoaXMsIC4uLnhba2V5XSlcbiAgICAgICAgICBlbHNlIHRoaXNba2V5XS5jYWxsKHRoaXMsIHhba2V5XSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fX2RhdGFbMF0gPSB4XG4gICAgICAgIHRoaXMuX19kYXRhWzFdID0geVxuICAgICAgICB0aGlzLl9fZGF0YVsyXSA9IHpcbiAgICAgICAgdGhpcy5fX2RhdGFbM10gPSB3XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3IgYHhgIGF4aXMgcm90YXRpb24uXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSB4IGF4aXMgcm90YXRpb24uXG4gICAqL1xuICBnZXQgeCgpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGFbMF1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0ZXIgZm9yIGB4YCBheGlzIHJvdGF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gVGhlIHZhbCBwYXJhbS5cbiAgICovXG4gIHNldCB4KHZhbCkge1xuICAgIHRoaXMuX19kYXRhWzBdID0gdmFsXG4gIH1cblxuICAvKipcbiAgICogR2V0dGVyIGZvciBgeWAgYXhpcyByb3RhdGlvbi5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFJldHVybnMgdGhlIHkgYXhpcyByb3RhdGlvbi5cbiAgICovXG4gIGdldCB5KCkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YVsxXVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmb3IgYHlgIGF4aXMgcm90YXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBUaGUgdmFsIHBhcmFtLlxuICAgKi9cbiAgc2V0IHkodmFsKSB7XG4gICAgdGhpcy5fX2RhdGFbMV0gPSB2YWxcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIGB6YCBheGlzIHJvdGF0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gUmV0dXJucyB0aGUgeiBheGlzIHJvdGF0aW9uLlxuICAgKi9cbiAgZ2V0IHooKSB7XG4gICAgcmV0dXJuIHRoaXMuX19kYXRhWzJdXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciBgemAgYXhpcyByb3RhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIFRoZSB2YWwgcGFyYW0uXG4gICAqL1xuICBzZXQgeih2YWwpIHtcbiAgICB0aGlzLl9fZGF0YVsyXSA9IHZhbFxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3IgYHdgIHZhbHVlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gUmV0dXJucyB0aGUgdyB2YWx1ZS5cbiAgICovXG4gIGdldCB3KCkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YVszXVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmb3IgYHdgLlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gVGhlIHZhbCBwYXJhbS5cbiAgICovXG4gIHNldCB3KHZhbCkge1xuICAgIHRoaXMuX19kYXRhWzNdID0gdmFsXG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZyb20gc2NhbGFyIGNvbXBvbmVudHMuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHggYXhpcyByb3RhdGlvbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgIC0gVGhlIHkgYXhpcyByb3RhdGlvbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHogIC0gVGhlIHogYXhpcyByb3RhdGlvbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHcgIC0gVGhlIHcgdmFsdWUuXG4gICAqL1xuICBzZXQoeCwgeSwgeiwgdykge1xuICAgIHRoaXMuX19kYXRhWzBdID0geFxuICAgIHRoaXMuX19kYXRhWzFdID0geVxuICAgIHRoaXMuX19kYXRhWzJdID0gelxuICAgIHRoaXMuX19kYXRhWzNdID0gd1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHN0YXRlIG9mIHRoZSBRdWF0IGNsYXNzIHVzaW5nIGEgRmxvYXQzMkFycmF5LlxuICAgKlxuICAgKiBAcGFyYW0ge0Zsb2F0MzJBcnJheX0gZmxvYXQzMkFycmF5IC0gVGhlIGZsb2F0MzJBcnJheSB2YWx1ZS5cbiAgICovXG4gIHNldERhdGFBcnJheShmbG9hdDMyQXJyYXkpIHtcbiAgICB0aGlzLl9fZGF0YSA9IGZsb2F0MzJBcnJheVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmcm9tIGFub3RoZXIgdmVjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0ge1F1YXR9IG90aGVyIC0gVGhlIG90aGVyIHZlY3RvciB0byBzZXQgZnJvbS5cbiAgICovXG4gIHNldEZyb21PdGhlcihvdGhlcikge1xuICAgIHRoaXMuX19kYXRhWzBdID0gb3RoZXIueFxuICAgIHRoaXMuX19kYXRhWzFdID0gb3RoZXIueVxuICAgIHRoaXMuX19kYXRhWzJdID0gb3RoZXIuelxuICAgIHRoaXMuX19kYXRhWzNdID0gb3RoZXIud1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGlzIFF1YXQgZnJvbSBhIGV1bGVyIHJvdGF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge0V1bGVyQW5nbGVzfSBldWxlckFuZ2xlcyAtIFRoZSBldWxlciBhbmdsZXMgcm90YXRpb24uXG4gICAqL1xuICBzZXRGcm9tRXVsZXJBbmdsZXMoZXVsZXJBbmdsZXMpIHtcbiAgICBjb25zdCBvcmRlcmVkID0gbmV3IFZlYzMoKVxuXG4gICAgc3dpdGNoIChldWxlckFuZ2xlcy5vcmRlcikge1xuICAgICAgY2FzZSAwOlxuICAgICAgICAvLyAnWFlaJ1xuICAgICAgICBvcmRlcmVkLnNldChldWxlckFuZ2xlcy54LCAtZXVsZXJBbmdsZXMueSwgZXVsZXJBbmdsZXMueilcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgLy8gJ1laWCdcbiAgICAgICAgb3JkZXJlZC5zZXQoZXVsZXJBbmdsZXMueSwgLWV1bGVyQW5nbGVzLnosIGV1bGVyQW5nbGVzLngpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIDI6XG4gICAgICAgIC8vICdaWFknXG4gICAgICAgIG9yZGVyZWQuc2V0KGV1bGVyQW5nbGVzLnosIC1ldWxlckFuZ2xlcy54LCBldWxlckFuZ2xlcy55KVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAzOlxuICAgICAgICAvLyAnWFpZJ1xuICAgICAgICBvcmRlcmVkLnNldChldWxlckFuZ2xlcy54LCBldWxlckFuZ2xlcy56LCBldWxlckFuZ2xlcy55KVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSA0OlxuICAgICAgICAvLyAnWllYJ1xuICAgICAgICBvcmRlcmVkLnNldChldWxlckFuZ2xlcy56LCBldWxlckFuZ2xlcy55LCBldWxlckFuZ2xlcy54KVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSA1OlxuICAgICAgICAvLyAnWVhaJ1xuICAgICAgICBvcmRlcmVkLnNldChldWxlckFuZ2xlcy55LCBldWxlckFuZ2xlcy54LCBldWxlckFuZ2xlcy56KVxuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEV1bGVyQW5nbGVzIG9yZGVyOicsIGV1bGVyQW5nbGVzLm9yZGVyKVxuICAgIH1cblxuICAgIGNvbnN0IHRpID0gb3JkZXJlZC54ICogMC41XG4gICAgY29uc3QgdGogPSBvcmRlcmVkLnkgKiAwLjVcbiAgICBjb25zdCB0ayA9IG9yZGVyZWQueiAqIDAuNVxuICAgIGNvbnN0IGNpID0gTWF0aC5jb3ModGkpXG4gICAgY29uc3QgY2ogPSBNYXRoLmNvcyh0ailcbiAgICBjb25zdCBjayA9IE1hdGguY29zKHRrKVxuICAgIGNvbnN0IHNpID0gTWF0aC5zaW4odGkpXG4gICAgY29uc3Qgc2ogPSBNYXRoLnNpbih0ailcbiAgICBjb25zdCBzayA9IE1hdGguc2luKHRrKVxuICAgIGNvbnN0IGNjID0gY2kgKiBja1xuICAgIGNvbnN0IGNzID0gY2kgKiBza1xuICAgIGNvbnN0IHNjID0gc2kgKiBja1xuICAgIGNvbnN0IHNzID0gc2kgKiBza1xuICAgIGNvbnN0IGFpID0gY2ogKiBzYyAtIHNqICogY3NcbiAgICBjb25zdCBhaiA9IGNqICogc3MgKyBzaiAqIGNjXG4gICAgY29uc3QgYWsgPSBjaiAqIGNzIC0gc2ogKiBzY1xuXG4gICAgdGhpcy53ID0gY2ogKiBjYyArIHNqICogc3NcblxuICAgIHN3aXRjaCAoZXVsZXJBbmdsZXMub3JkZXIpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgLy8gJyBYWVonXG4gICAgICAgIHRoaXMueCA9IGFpXG4gICAgICAgIHRoaXMueSA9IC1halxuICAgICAgICB0aGlzLnogPSBha1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAxOlxuICAgICAgICAvLyAnWVpYJ1xuICAgICAgICB0aGlzLnggPSBha1xuICAgICAgICB0aGlzLnkgPSBhaVxuICAgICAgICB0aGlzLnogPSAtYWpcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgLy8gJ1pYWSdcbiAgICAgICAgdGhpcy54ID0gLWFqXG4gICAgICAgIHRoaXMueSA9IGFrXG4gICAgICAgIHRoaXMueiA9IGFpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIDM6XG4gICAgICAgIC8vICdYWlknXG4gICAgICAgIHRoaXMueCA9IGFpXG4gICAgICAgIHRoaXMueSA9IGFrXG4gICAgICAgIHRoaXMueiA9IGFqXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIDQ6XG4gICAgICAgIC8vICdaWVgnXG4gICAgICAgIHRoaXMueCA9IGFrXG4gICAgICAgIHRoaXMueSA9IGFqXG4gICAgICAgIHRoaXMueiA9IGFpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIDU6XG4gICAgICAgIC8vICdZWFonXG4gICAgICAgIHRoaXMueCA9IGFqXG4gICAgICAgIHRoaXMueSA9IGFpXG4gICAgICAgIHRoaXMueiA9IGFrXG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgRXVsZXJBbmdsZXMgb3JkZXI6JywgZXVsZXJBbmdsZXMub3JkZXIpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIFF1YXQgdG8gYW4gRXVsZXJBbmdsZXNcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXIgfCBzdHJpbmd9IHJvdGF0aW9uT3JkZXIgLSBUaGUgb3JkZXIgaW4gd2hpY2ggdGhlIHJvdGF0aW9ucyBhcmUgYXBwbGllZC5cbiAgICogQHJldHVybiB7RXVsZXJBbmdsZXN9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIHRvRXVsZXJBbmdsZXMocm90YXRpb25PcmRlcikge1xuICAgIGNvbnN0IG9yZGVyZWQgPSBuZXcgVmVjMygpXG4gICAgc3dpdGNoIChyb3RhdGlvbk9yZGVyKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIC8qICcgWFlaJyAqL1xuICAgICAgICBvcmRlcmVkLnNldCh0aGlzLnosIHRoaXMueCwgdGhpcy55KVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAxOlxuICAgICAgICAvKiAnWVpYJyAqL1xuICAgICAgICBvcmRlcmVkLnNldCh0aGlzLngsIHRoaXMueSwgdGhpcy56KVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAyOlxuICAgICAgICAvKiAnWlhZJyAqL1xuICAgICAgICBvcmRlcmVkLnNldCh0aGlzLnksIHRoaXMueiwgdGhpcy54KVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAzOlxuICAgICAgICAvKiAnWFpZJyAqL1xuICAgICAgICBvcmRlcmVkLnNldCh0aGlzLnksIC10aGlzLngsIHRoaXMueilcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgLyogJ1pZWCcgKi9cbiAgICAgICAgb3JkZXJlZC5zZXQodGhpcy54LCAtdGhpcy56LCB0aGlzLnkpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIDU6XG4gICAgICAgIC8qICdZWFonICovXG4gICAgICAgIG9yZGVyZWQuc2V0KHRoaXMueiwgLXRoaXMueSwgdGhpcy54KVxuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJvdGF0aW9uIG9yZGVyOicgKyByb3RhdGlvbk9yZGVyKVxuICAgIH1cblxuICAgIGNvbnN0IGV1bGVyID0gbmV3IFZlYzMoKVxuICAgIGNvbnN0IHRlc3QgPSBvcmRlcmVkLnggKiBvcmRlcmVkLnkgKyBvcmRlcmVkLnogKiB0aGlzLndcbiAgICBpZiAodGVzdCA+IDAuNDk5OTkpIHtcbiAgICAgIC8vIHNpbmd1bGFyaXR5IGF0IG5vcnRoIHBvbGVcbiAgICAgIGV1bGVyLnkgPSAyLjAgKiBNYXRoLmF0YW4yKG9yZGVyZWQueCwgdGhpcy53KVxuICAgICAgZXVsZXIueiA9IE1hdGguUEkgKiAwLjVcbiAgICAgIGV1bGVyLnggPSAwLjBcbiAgICB9IGVsc2UgaWYgKHRlc3QgPCAtMC40OTk5OSkge1xuICAgICAgLy8gc2luZ3VsYXJpdHkgYXQgc291dGggcG9sZVxuICAgICAgZXVsZXIueSA9IC0yLjAgKiBNYXRoLmF0YW4yKG9yZGVyZWQueCwgdGhpcy53KVxuICAgICAgZXVsZXIueiA9IE1hdGguUEkgKiAtMC41XG4gICAgICBldWxlci54ID0gMC4wXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHNxeCA9IG9yZGVyZWQueCAqIG9yZGVyZWQueFxuICAgICAgY29uc3Qgc3F5ID0gb3JkZXJlZC55ICogb3JkZXJlZC55XG4gICAgICBjb25zdCBzcXogPSBvcmRlcmVkLnogKiBvcmRlcmVkLnpcbiAgICAgIGV1bGVyLnkgPSBNYXRoLmF0YW4yKDIuMCAqIG9yZGVyZWQueSAqIHRoaXMudyAtIDIuMCAqIG9yZGVyZWQueCAqIG9yZGVyZWQueiwgMS4wIC0gMi4wICogc3F5IC0gMi4wICogc3F6KVxuICAgICAgZXVsZXIueiA9IE1hdGguYXNpbigyLjAgKiB0ZXN0KVxuICAgICAgZXVsZXIueCA9IE1hdGguYXRhbjIoMi4wICogb3JkZXJlZC54ICogdGhpcy53IC0gMi4wICogb3JkZXJlZC55ICogb3JkZXJlZC56LCAxLjAgLSAyLjAgKiBzcXggLSAyLjAgKiBzcXopXG4gICAgfVxuXG4gICAgc3dpdGNoIChyb3RhdGlvbk9yZGVyKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIC8qICcgWFlaJyAqL1xuICAgICAgICByZXR1cm4gbmV3IEV1bGVyQW5nbGVzKGV1bGVyLnksIGV1bGVyLnosIGV1bGVyLngsIHJvdGF0aW9uT3JkZXIpXG4gICAgICBjYXNlIDE6XG4gICAgICAgIC8qICdZWlgnICovXG4gICAgICAgIHJldHVybiBuZXcgRXVsZXJBbmdsZXMoZXVsZXIueCwgZXVsZXIueSwgZXVsZXIueiwgcm90YXRpb25PcmRlcilcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgLyogJ1pYWScgKi9cbiAgICAgICAgcmV0dXJuIG5ldyBFdWxlckFuZ2xlcyhldWxlci56LCBldWxlci54LCBldWxlci55LCByb3RhdGlvbk9yZGVyKVxuICAgICAgY2FzZSAzOlxuICAgICAgICAvKiAnWFpZJyAqL1xuICAgICAgICByZXR1cm4gbmV3IEV1bGVyQW5nbGVzKC1ldWxlci55LCBldWxlci54LCBldWxlci56LCByb3RhdGlvbk9yZGVyKVxuICAgICAgY2FzZSA0OlxuICAgICAgICAvKiAnWllYJyAqL1xuICAgICAgICByZXR1cm4gbmV3IEV1bGVyQW5nbGVzKGV1bGVyLngsIGV1bGVyLnosIC1ldWxlci55LCByb3RhdGlvbk9yZGVyKVxuICAgICAgY2FzZSA1OlxuICAgICAgICAvKiAnWVhaJyAqL1xuICAgICAgICByZXR1cm4gbmV3IEV1bGVyQW5nbGVzKGV1bGVyLnosIC1ldWxlci55LCBldWxlci54LCByb3RhdGlvbk9yZGVyKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhpcyBRdWF0IHRvIGEgcm90YXRpb24gZGVmaW5lZCBieSBhbiBheGlzIGFuZCBhbiBhbmdsZSAoaW4gcmFkaWFucykuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjM30gYXhpcyAtIFRoZSBheGlzIGFyb3VuZCB3aGljaCB0byByb3RhdGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZSAtIFRoZSBhbmdsZSB0byByb3RhdGVcbiAgICovXG4gIHNldEZyb21BeGlzQW5kQW5nbGUoYXhpcywgYW5nbGUpIHtcbiAgICBjb25zdCBoYWxmQW5nbGUgPSBhbmdsZSAvIDIuMFxuICAgIGNvbnN0IHZlYyA9IGF4aXMubm9ybWFsaXplKCkuc2NhbGUoTWF0aC5zaW4oaGFsZkFuZ2xlKSlcbiAgICB0aGlzLnNldCh2ZWMueCwgdmVjLnksIHZlYy56LCBNYXRoLmNvcyhoYWxmQW5nbGUpKVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHN0YXRlIG9mIHRoZSBRdWF0IHRvIGxvb2sgaW4gYSBwYXJ0aWN1bGFyIGRpcmVjdGlvbiBhbG9uZyB0aGUgeiBheGlzLlxuICAgKiA+IFRoZSBjYW1lcmEgbG9va3MgZG93biB0aGUgbmVnYXRpdmUgeiBheGlzLCBzbyB0byBzZXQgYSByb3RhdGlvbiB2YWx1ZVxuICAgKiA+IGZvciB0aGUgY2FtZXJhLCByZW1lbWJlciB0byBuZWdhdGUgdGhlIGRpcmVjdGlvbiB2ZWN0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjM30gZGlyIC0gVGhlIGRpcmVjdGlvbiB2YWx1ZS5cbiAgICogQHBhcmFtIHtWZWMzfSB1cCAtIFRoZSB1cCB2ZWN0b3IuXG4gICAqL1xuICBzZXRGcm9tRGlyZWN0aW9uQW5kVXB2ZWN0b3IoZGlyLCB1cCkge1xuICAgIGNvbnN0IG1hdDMgPSBuZXcgTWF0MygpXG4gICAgbWF0My5zZXRGcm9tRGlyZWN0aW9uQW5kVXB2ZWN0b3IoZGlyLCB1cClcbiAgICB0aGlzLnNldEZyb21NYXQzKG1hdDMpXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgc3RhdGUgb2YgdGhlIGBRdWF0YCBmcm9tIHR3byBgVmVjM2AuIFRoZSBxdWF0ZXJuaW9uIHdvdWxkIHRoZW4gcmVwcmVzZW50IHRoZSByb3RhdGlvbiBmcm9tIHYwIHRvIHYxIGluIDNkIHNwYWNlLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzN9IHYwIC0gVGhlIHYwIHVuaXQgdmVjdG9yLlxuICAgKiBAcGFyYW0ge1ZlYzN9IHYxIC0gVGhlIHYxIHVuaXQgdmVjdG9yLlxuICAgKi9cbiAgc2V0RnJvbTJWZWN0b3JzKHYwLCB2MSkge1xuICAgIGNvbnN0IGMgPSB2MC5jcm9zcyh2MSlcbiAgICBjb25zdCBkID0gdjAuZG90KHYxKVxuICAgIGNvbnN0IHMgPSBNYXRoLnNxcnQoKDEgKyBkKSAqIDIpXG4gICAgLy8gdGhpcy5zZXQoIHMvMiwgYy54IC8gcywgYy55IC8gcywgYy56IC8gcyApO1xuICAgIHRoaXMuc2V0KGMueCAvIHMsIGMueSAvIHMsIGMueiAvIHMsIHMgLyAyKVxuICAgIHRoaXMubm9ybWFsaXplSW5QbGFjZSgpXG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBRdWF0IGZyb20gYSBNYXQzLlxuICAgKlxuICAgKiBAcGFyYW0ge01hdDN9IG1hdDMgLSBUaGUgbWF0MyB2YWx1ZS5cbiAgICovXG4gIHNldEZyb21NYXQzKG1hdDMpIHtcbiAgICAvLyBBbGdvcml0aG0gaW4gS2VuIFNob2VtYWtlJ3MgYXJ0aWNsZSBpbiAxOTg3IFNJR0dSQVBIIGNvdXJzZSBub3Rlc1xuICAgIC8vIGFydGljbGUgXCJRdWF0ZXJuaW9uIENhbGN1bHVzIGFuZCBGYXN0IEFuaW1hdGlvblwiLlxuICAgIGNvbnN0IGZUcmFjZSA9IG1hdDMuX19kYXRhWzBdICsgbWF0My5fX2RhdGFbNF0gKyBtYXQzLl9fZGF0YVs4XVxuICAgIGxldCBmUm9vdFxuXG4gICAgaWYgKGZUcmFjZSA+IDAuMCkge1xuICAgICAgLy8gfHd8ID4gMS8yLCBtYXkgYXMgd2VsbCBjaG9vc2UgdyA+IDEvMlxuICAgICAgZlJvb3QgPSBNYXRoLnNxcnQoZlRyYWNlICsgMSkgLy8gMndcbiAgICAgIHRoaXMuX19kYXRhWzNdID0gMC41ICogZlJvb3RcbiAgICAgIGZSb290ID0gMC41IC8gZlJvb3QgLy8gMS8oNHcpXG4gICAgICB0aGlzLl9fZGF0YVswXSA9IChtYXQzLl9fZGF0YVs1XSAtIG1hdDMuX19kYXRhWzddKSAqIGZSb290XG4gICAgICB0aGlzLl9fZGF0YVsxXSA9IChtYXQzLl9fZGF0YVs2XSAtIG1hdDMuX19kYXRhWzJdKSAqIGZSb290XG4gICAgICB0aGlzLl9fZGF0YVsyXSA9IChtYXQzLl9fZGF0YVsxXSAtIG1hdDMuX19kYXRhWzNdKSAqIGZSb290XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHx3fCA8PSAxLzJcbiAgICAgIGxldCBpID0gMFxuICAgICAgaWYgKG1hdDMuX19kYXRhWzRdID4gbWF0My5fX2RhdGFbMF0pIGkgPSAxXG4gICAgICBpZiAobWF0My5fX2RhdGFbOF0gPiBtYXQzLl9fZGF0YVtpICogMyArIGldKSBpID0gMlxuICAgICAgY29uc3QgaiA9IChpICsgMSkgJSAzXG4gICAgICBjb25zdCBrID0gKGkgKyAyKSAlIDNcblxuICAgICAgZlJvb3QgPSBNYXRoLnNxcnQobWF0My5fX2RhdGFbaSAqIDMgKyBpXSAtIG1hdDMuX19kYXRhW2ogKiAzICsgal0gLSBtYXQzLl9fZGF0YVtrICogMyArIGtdICsgMS4wKVxuICAgICAgdGhpcy5fX2RhdGFbaV0gPSAwLjUgKiBmUm9vdFxuICAgICAgZlJvb3QgPSAwLjUgLyBmUm9vdFxuICAgICAgdGhpcy5fX2RhdGFbM10gPSAobWF0My5fX2RhdGFbaiAqIDMgKyBrXSAtIG1hdDMuX19kYXRhW2sgKiAzICsgal0pICogZlJvb3RcbiAgICAgIHRoaXMuX19kYXRhW2pdID0gKG1hdDMuX19kYXRhW2ogKiAzICsgaV0gKyBtYXQzLl9fZGF0YVtpICogMyArIGpdKSAqIGZSb290XG4gICAgICB0aGlzLl9fZGF0YVtrXSA9IChtYXQzLl9fZGF0YVtrICogMyArIGldICsgbWF0My5fX2RhdGFbaSAqIDMgKyBrXSkgKiBmUm9vdFxuICAgIH1cbiAgICB0aGlzLm5vcm1hbGl6ZUluUGxhY2UoKVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgUXVhdCBmcm9tIGEgTWF0NC5cbiAgICpcbiAgICogQHBhcmFtIHtNYXQ0fSBtYXQ0IC0gVGhlIG1hdDQgdmFsdWUuXG4gICAqL1xuICBzZXRGcm9tTWF0NChtYXQ0KSB7XG4gICAgLy8gQWxnb3JpdGhtIGluIEtlbiBTaG9lbWFrZSdzIGFydGljbGUgaW4gMTk4NyBTSUdHUkFQSCBjb3Vyc2Ugbm90ZXNcbiAgICAvLyBhcnRpY2xlIFwiUXVhdGVybmlvbiBDYWxjdWx1cyBhbmQgRmFzdCBBbmltYXRpb25cIi5cbiAgICBjb25zdCBmVHJhY2UgPSBtYXQ0Ll9fZGF0YVswXSArIG1hdDQuX19kYXRhWzVdICsgbWF0NC5fX2RhdGFbMTBdXG4gICAgbGV0IGZSb290XG5cbiAgICBpZiAoZlRyYWNlID4gMC4wKSB7XG4gICAgICAvLyB8d3wgPiAxLzIsIG1heSBhcyB3ZWxsIGNob29zZSB3ID4gMS8yXG4gICAgICBmUm9vdCA9IE1hdGguc3FydChmVHJhY2UgKyAxKSAvLyAyd1xuICAgICAgdGhpcy5fX2RhdGFbM10gPSAwLjUgKiBmUm9vdFxuICAgICAgZlJvb3QgPSAwLjUgLyBmUm9vdCAvLyAxLyg0dylcbiAgICAgIHRoaXMuX19kYXRhWzBdID0gKG1hdDQuX19kYXRhWzZdIC0gbWF0NC5fX2RhdGFbOV0pICogZlJvb3RcbiAgICAgIHRoaXMuX19kYXRhWzFdID0gKG1hdDQuX19kYXRhWzhdIC0gbWF0NC5fX2RhdGFbMl0pICogZlJvb3RcbiAgICAgIHRoaXMuX19kYXRhWzJdID0gKG1hdDQuX19kYXRhWzFdIC0gbWF0NC5fX2RhdGFbNF0pICogZlJvb3RcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gfHd8IDw9IDEvMlxuICAgICAgbGV0IGkgPSAwXG4gICAgICBpZiAobWF0NC5fX2RhdGFbNV0gPiBtYXQ0Ll9fZGF0YVswXSkgaSA9IDFcbiAgICAgIGlmIChtYXQ0Ll9fZGF0YVsxMF0gPiBtYXQ0Ll9fZGF0YVtpICogNCArIGldKSBpID0gMlxuICAgICAgY29uc3QgaiA9IChpICsgMSkgJSAzXG4gICAgICBjb25zdCBrID0gKGkgKyAyKSAlIDNcblxuICAgICAgZlJvb3QgPSBNYXRoLnNxcnQobWF0NC5fX2RhdGFbaSAqIDQgKyBpXSAtIG1hdDQuX19kYXRhW2ogKiA0ICsgal0gLSBtYXQ0Ll9fZGF0YVtrICogNCArIGtdICsgMS4wKVxuICAgICAgdGhpcy5fX2RhdGFbaV0gPSAwLjUgKiBmUm9vdFxuICAgICAgZlJvb3QgPSAwLjUgLyBmUm9vdFxuICAgICAgdGhpcy5fX2RhdGFbM10gPSAobWF0NC5fX2RhdGFbaiAqIDQgKyBrXSAtIG1hdDQuX19kYXRhW2sgKiA0ICsgal0pICogZlJvb3RcbiAgICAgIHRoaXMuX19kYXRhW2pdID0gKG1hdDQuX19kYXRhW2ogKiA0ICsgaV0gKyBtYXQ0Ll9fZGF0YVtpICogNCArIGpdKSAqIGZSb290XG4gICAgICB0aGlzLl9fZGF0YVtrXSA9IChtYXQ0Ll9fZGF0YVtrICogNCArIGldICsgbWF0NC5fX2RhdGFbaSAqIDQgKyBrXSkgKiBmUm9vdFxuICAgIH1cbiAgICB0aGlzLm5vcm1hbGl6ZUluUGxhY2UoKVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgYW5nbGUgb2YgdGhlIFF1YXQgaXMgbGVzcyB0aGF0IGAgTnVtYmVyLkVQU0lMT05gXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gUmV0dXJucyB0cnVlIG9yIGZhbHNlLlxuICAgKi9cbiAgaXNJZGVudGl0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBbmdsZSgpIDwgTnVtYmVyLkVQU0lMT05cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGFuZ2xlIG9mIHRoZSBRdWF0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGdldEFuZ2xlKCkge1xuICAgIHJldHVybiBNYXRoLmFjb3ModGhpcy53KSAqIDIuMFxuICB9XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIFF1YXQgY29udGFpbnMgdGhlIHNhbWUgdmFsdWVzIGFzIHRoZSBvdGhlci5cbiAgICogRGVwcmVjYXRlZC4gVXNlICNpc0VxdWFsIGluc3RlYWQuXG4gICAqXG4gICAqIEBwYXJhbSB7UXVhdH0gb3RoZXIgLSBUaGUgb3RoZXIgUXVhdCB0byBjb21wYXJlIHdpdGguXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gUmV0dXJucyB0cnVlIG9yIGZhbHNlLlxuICAgKi9cbiAgZXF1YWwob3RoZXIpIHtcbiAgICBjb25zb2xlLndhcm4oJ0RlcHJlY2F0ZWQuIFVzZSAjaXNFcXVhbCBpbnN0ZWFkLicpXG4gICAgcmV0dXJuIHRoaXMuaXNFcXVhbChvdGhlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhpcyBRdWF0IGNvbnRhaW5zIHRoZSBzYW1lIHZhbHVlcyBhcyB0aGUgb3RoZXIgUXVhdC5cbiAgICpcbiAgICogQHBhcmFtIHtRdWF0fSBvdGhlciAtIFRoZSBvdGhlciBRdWF0IHRvIGNvbXBhcmUgd2l0aC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gLSBSZXR1cm5zIGB0cnVlYCBpZiBhcmUgdGhlIHNhbWUgVmVjdG9yLCBvdGhlcndpc2UsIGBmYWxzZWAuXG4gICAqL1xuICBpc0VxdWFsKG90aGVyKSB7XG4gICAgcmV0dXJuIHRoaXMueCA9PSBvdGhlci54ICYmIHRoaXMueSA9PSBvdGhlci55ICYmIHRoaXMueiA9PSBvdGhlci56ICYmIHRoaXMudyA9PSBvdGhlci53XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgUXVhdCBpcyBOT1QgZXhhY3RseSB0aGUgc2FtZSBvdGhlci5cbiAgICpcbiAgICogQHBhcmFtIHtRdWF0fSBvdGhlciAtIFRoZSBvdGhlciBRdWF0IHRvIGNvbXBhcmUgd2l0aC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gLSBSZXR1cm5zIHRydWUgb3IgZmFsc2UuXG4gICAqL1xuICBub3RFcXVhbHMob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy54ICE9IG90aGVyLnggJiYgdGhpcy55ICE9IG90aGVyLnkgJiYgdGhpcy56ICE9IG90aGVyLnogJiYgdGhpcy53ICE9IG90aGVyLndcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBRdWF0IGlzIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgYXMgb3RoZXJcbiAgICpcbiAgICogQHBhcmFtIHtRdWF0fSBvdGhlciAtIFRoZSBvdGhlciBRdWF0IHRvIGNvbXBhcmUgd2l0aC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHByZWNpc2lvbiAtIFRoZSBwcmVjaXNpb24gdG8gd2hpY2ggdGhlIHZhbHVlcyBtdXN0IG1hdGNoLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSAtIFJldHVybnMgdHJ1ZSBvciBmYWxzZS5cbiAgICovXG4gIGFwcHJveEVxdWFsKG90aGVyLCBwcmVjaXNpb24gPSBOdW1iZXIuRVBTSUxPTikge1xuICAgIHJldHVybiAoXG4gICAgICBNYXRoLmFicyh0aGlzLnggLSBvdGhlci54KSA8IHByZWNpc2lvbiAmJlxuICAgICAgTWF0aC5hYnModGhpcy55IC0gb3RoZXIueSkgPCBwcmVjaXNpb24gJiZcbiAgICAgIE1hdGguYWJzKHRoaXMueiAtIG90aGVyLnopIDwgcHJlY2lzaW9uICYmXG4gICAgICBNYXRoLmFicyh0aGlzLncgLSBvdGhlci53KSA8IHByZWNpc2lvblxuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIG90aGVyIHRvIHRoaXMgUXVhdCBhbmQgcmV0dXJuIHRoZSByZXN1bHQgYXMgYSBuZXcgUXVhdC5cbiAgICpcbiAgICogQHBhcmFtIHtRdWF0fSBvdGhlciAtIFRoZSBvdGhlciBRdWF0IHRvIGFkZC5cbiAgICogQHJldHVybiB7UXVhdH0gLSBSZXR1cm5zIGEgbmV3IFF1YXQuXG4gICAqL1xuICBhZGQob3RoZXIpIHtcbiAgICByZXR1cm4gbmV3IFF1YXQodGhpcy54ICsgb3RoZXIueCwgdGhpcy55ICsgb3RoZXIueSwgdGhpcy56ICsgb3RoZXIueiwgdGhpcy53ICsgb3RoZXIudylcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIG90aGVyIHRvIHRoaXMgUXVhdC5cbiAgICpcbiAgICogQHBhcmFtIHtRdWF0fSBvdGhlciAtIFRoZSBvdGhlciBRdWF0IHRvIGFkZC5cbiAgICovXG4gIGFkZEluUGxhY2Uob3RoZXIpIHtcbiAgICB0aGlzLnggKz0gb3RoZXIueFxuICAgIHRoaXMueSArPSBvdGhlci55XG4gICAgdGhpcy56ICs9IG90aGVyLnpcbiAgICB0aGlzLncgKz0gb3RoZXIud1xuICB9XG5cbiAgLyoqXG4gICAqIFN1YnRyYWN0cyBvdGhlciBmcm9tIHRoaXMgUXVhdCBhbmQgcmV0dXJucyB0aGUgcmVzdWx0IGFzIGEgbmV3IFF1YXQuXG4gICAqXG4gICAqIEBwYXJhbSB7UXVhdH0gb3RoZXIgLSBUaGUgb3RoZXIgUXVhdCB0byBzdWJ0cmFjdC5cbiAgICogQHJldHVybiB7UXVhdH0gLSBSZXR1cm5zIGEgbmV3IFF1YXQuXG4gICAqL1xuICBzdWJ0cmFjdChvdGhlcikge1xuICAgIHJldHVybiBuZXcgUXVhdCh0aGlzLnggLSBvdGhlci54LCB0aGlzLnkgLSBvdGhlci55LCB0aGlzLnogLSBvdGhlci56LCB0aGlzLncgLSBvdGhlci53KVxuICB9XG5cbiAgLyoqXG4gICAqIFNjYWxlcyB0aGlzIFF1YXQgYnkgc2NhbGFyIGFuZCByZXR1cm5zIHRoZSByZXN1bHQgYXMgYSBuZXcgUXVhdC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxhciAtIFRoZSBzY2FsYXIgdmFsdWUuXG4gICAqIEByZXR1cm4ge1F1YXR9IC0gUmV0dXJucyBhIG5ldyBWZWMzLlxuICAgKi9cbiAgc2NhbGUoc2NhbGFyKSB7XG4gICAgcmV0dXJuIG5ldyBRdWF0KHRoaXMueCAqIHNjYWxhciwgdGhpcy55ICogc2NhbGFyLCB0aGlzLnogKiBzY2FsYXIsIHRoaXMudyAqIHNjYWxhcilcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsZXMgdGhpcyBRdWF0IGJ5IHNjYWxhci5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxhciAtIFRoZSBzY2FsYXIgdmFsdWUuXG4gICAqL1xuICBzY2FsZUluUGxhY2Uoc2NhbGFyKSB7XG4gICAgdGhpcy54ICo9IHNjYWxhclxuICAgIHRoaXMueSAqPSBzY2FsYXJcbiAgICB0aGlzLnogKj0gc2NhbGFyXG4gICAgdGhpcy53ICo9IHNjYWxhclxuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiB0aGlzIFF1YXQuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSBsZW5ndGguXG4gICAqL1xuICBsZW5ndGgoKSB7XG4gICAgY29uc3QgeCA9IHRoaXMuX19kYXRhWzBdXG4gICAgY29uc3QgeSA9IHRoaXMuX19kYXRhWzFdXG4gICAgY29uc3QgeiA9IHRoaXMuX19kYXRhWzJdXG4gICAgY29uc3QgdyA9IHRoaXMuX19kYXRhWzNdXG4gICAgcmV0dXJuIE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHogKyB3ICogdylcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiB0aGlzIFF1YXQuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSBsZW5ndGguXG4gICAqL1xuICBsZW5ndGhTcXVhcmVkKCkge1xuICAgIGNvbnN0IHggPSB0aGlzLl9fZGF0YVswXVxuICAgIGNvbnN0IHkgPSB0aGlzLl9fZGF0YVsxXVxuICAgIGNvbnN0IHogPSB0aGlzLl9fZGF0YVsyXVxuICAgIGNvbnN0IHcgPSB0aGlzLl9fZGF0YVszXVxuICAgIHJldHVybiB4ICogeCArIHkgKiB5ICsgeiAqIHogKyB3ICogd1xuICB9XG5cbiAgLyoqXG4gICAqIE5vcm1hbGl6ZXMgdGhlIFF1YXQgYW5kIHJldHVybnMgaXQgYXMgYSBuZXcgUXVhdC5cbiAgICpcbiAgICogQHJldHVybiB7UXVhdH0gLSBSZXR1cm5zIHRoZSBRdWF0IG5vcm1hbGl6ZWQuXG4gICAqL1xuICBub3JtYWxpemUoKSB7XG4gICAgY29uc3QgeCA9IHRoaXMuX19kYXRhWzBdXG4gICAgY29uc3QgeSA9IHRoaXMuX19kYXRhWzFdXG4gICAgY29uc3QgeiA9IHRoaXMuX19kYXRhWzJdXG4gICAgY29uc3QgdyA9IHRoaXMuX19kYXRhWzNdXG4gICAgbGV0IGxlbiA9IHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3XG4gICAgaWYgKGxlbiA8IE51bWJlci5FUFNJTE9OKSB7XG4gICAgICByZXR1cm4gbmV3IFF1YXQoKVxuICAgIH1cblxuICAgIC8vIFRPRE86IGV2YWx1YXRlIHVzZSBvZiBnbG1faW52c3FydCBoZXJlP1xuICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKVxuICAgIHJldHVybiBuZXcgUXVhdCh4ICogbGVuLCB5ICogbGVuLCB6ICogbGVuLCB3ICogbGVuKVxuICB9XG5cbiAgLyoqXG4gICAqIE5vcm1hbGl6ZXMgdGhlIFF1YXQsIG1vZGlmeWluZyBpdHMgdmFsdWVzIGluIHBsYWNlLlxuICAgKi9cbiAgbm9ybWFsaXplSW5QbGFjZSgpIHtcbiAgICBjb25zdCB4ID0gdGhpcy5fX2RhdGFbMF1cbiAgICBjb25zdCB5ID0gdGhpcy5fX2RhdGFbMV1cbiAgICBjb25zdCB6ID0gdGhpcy5fX2RhdGFbMl1cbiAgICBjb25zdCB3ID0gdGhpcy5fX2RhdGFbM11cbiAgICBsZXQgbGVuID0geCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHdcbiAgICBpZiAobGVuIDwgTnVtYmVyLkVQU0lMT04pIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbilcbiAgICB0aGlzLnNldCh4ICogbGVuLCB5ICogbGVuLCB6ICogbGVuLCB3ICogbGVuKVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHRoaXMgcXVhdCBhZ2FpbnN0IGFub3RoZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7UXVhdH0gb3RoZXIgLSBUaGUgb3RoZXIgUXVhdCB0byBjb21wYXJlIHdpdGguXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSBkb3QgcHJvZHVjdC5cbiAgICovXG4gIGRvdChvdGhlcikge1xuICAgIHJldHVybiB0aGlzLnggKiBvdGhlci54ICsgdGhpcy55ICogb3RoZXIueSArIHRoaXMueiAqIG90aGVyLnogKyB0aGlzLncgKiBvdGhlci53XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0d28gUXVhdHMgYW5kIHJldHVybnMgdGhlIHJlc3VsdCBhcyBhIG5ldyBRdWF0LlxuICAgKlxuICAgKiBAcGFyYW0ge1F1YXR9IG90aGVyIC0gVGhlIG90aGVyIFF1YXQgdG8gY2FsY3VsYXRlIHdpdGguXG4gICAqIEByZXR1cm4ge1F1YXR9IC0gUmV0dXJucyB0aGUgY3Jvc3MgcHJvZHVjdCBhcyBhIG5ldyBRdWF0LlxuICAgKi9cbiAgY3Jvc3Mob3RoZXIpIHtcbiAgICBjb25zdCBheCA9IHRoaXMueFxuICAgIGNvbnN0IGF5ID0gdGhpcy55XG4gICAgY29uc3QgYXogPSB0aGlzLnpcbiAgICBjb25zdCBhdCA9IHRoaXMud1xuICAgIGNvbnN0IGJ4ID0gb3RoZXIueFxuICAgIGNvbnN0IGJ5ID0gb3RoZXIueVxuICAgIGNvbnN0IGJ6ID0gb3RoZXIuelxuICAgIGNvbnN0IGJ0ID0gb3RoZXIud1xuXG4gICAgcmV0dXJuIG5ldyBRdWF0KGF5ICogYnogLSBheiAqIGJ5LCBheiAqIGJ0IC0gYXQgKiBieiwgYXQgKiBieCAtIGF4ICogYnQsIGF4ICogYnkgLSBheSAqIGJ4KVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHJvdGF0aW9uYWwgY29uanVnYXRlIG9mIHRoaXMgUXVhdC5cbiAgICogQ29uanVnYXRpb24gcmVwcmVzZW50cyB0aGUgc2FtZSByb3RhdGlvbiBvZiB0aGUgUXVhdCBidXRcbiAgICogaW4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbiBhcm91bmQgdGhlIHJvdGF0aW9uYWwgYXhpcy5cbiAgICpcbiAgICogQHJldHVybiB7UXVhdH0gLSB0aGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgY29uanVnYXRlKCkge1xuICAgIHJldHVybiBuZXcgUXVhdCgtdGhpcy54LCAtdGhpcy55LCAtdGhpcy56LCB0aGlzLncpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBpbnZlcnNlIG9mIHRoZSBgUXVhdGBcbiAgICpcbiAgICogQHJldHVybiB7UXVhdH0gLSBSZXR1cm5zIGEgbmV3IFF1YXQuXG4gICAqL1xuICBpbnZlcnNlKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmp1Z2F0ZSgpXG4gIH1cblxuICAvKipcbiAgICogQWxpZ25zIHRoaXMgcXVhdGVybmlvbiB3aXRoIGFub3RoZXIgb25lIGVuc3VyaW5nIHRoYXQgdGhlIGRlbHRhIGJldHdlZW5cbiAgICogdGhlIFF1YXQgdmFsdWVzIGlzIHRoZSBzaG9ydGVzdCBwYXRoIG92ZXIgdGhlIGh5cGVyLXNwaGVyZS5cbiAgICpcbiAgICogIEBwYXJhbSB7UXVhdH0gb3RoZXIgLSBUaGUgb3RoZXIgUXVhdCB0byBkaXZpZGUgYnkuXG4gICAqL1xuICBhbGlnbldpdGgob3RoZXIpIHtcbiAgICBpZiAodGhpcy5kb3Qob3RoZXIpIDwgMC4wKSB7XG4gICAgICB0aGlzLnNldCgtdGhpcy54LCAtdGhpcy55LCAtdGhpcy56LCAtdGhpcy53KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNdWx0aXBsaWVzIHR3byB0aGlzIHF1YXQgYnkgYW5vdGhlciByZXR1cm5pbmcgdGhlIHJlc3VsdCBhcyBhIG5ldyBRdWF0LlxuICAgKlxuICAgKiBAcGFyYW0ge1F1YXR9IG90aGVyIC0gVGhlIG90aGVyIFF1YXQgdG8gbXVsdGlwbHkuXG4gICAqIEByZXR1cm4ge1F1YXR9IC0gUmV0dXJucyBhIG5ldyBRdWF0LlxuICAgKi9cbiAgbXVsdGlwbHkob3RoZXIpIHtcbiAgICBjb25zdCBheCA9IHRoaXMuX19kYXRhWzBdXG4gICAgY29uc3QgYXkgPSB0aGlzLl9fZGF0YVsxXVxuICAgIGNvbnN0IGF6ID0gdGhpcy5fX2RhdGFbMl1cbiAgICBjb25zdCBhdyA9IHRoaXMuX19kYXRhWzNdXG4gICAgY29uc3QgYnggPSBvdGhlci5fX2RhdGFbMF1cbiAgICBjb25zdCBieSA9IG90aGVyLl9fZGF0YVsxXVxuICAgIGNvbnN0IGJ6ID0gb3RoZXIuX19kYXRhWzJdXG4gICAgY29uc3QgYncgPSBvdGhlci5fX2RhdGFbM11cblxuICAgIHJldHVybiBuZXcgUXVhdChcbiAgICAgIGF4ICogYncgKyBhdyAqIGJ4ICsgYXkgKiBieiAtIGF6ICogYnksXG4gICAgICBheSAqIGJ3ICsgYXcgKiBieSArIGF6ICogYnggLSBheCAqIGJ6LFxuICAgICAgYXogKiBidyArIGF3ICogYnogKyBheCAqIGJ5IC0gYXkgKiBieCxcbiAgICAgIGF3ICogYncgLSBheCAqIGJ4IC0gYXkgKiBieSAtIGF6ICogYnpcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogTXVsdGlwbGllcyB0aGlzIHF1YXQgYnkgYW5vdGhlciwgbW9kaWZ5aW5nIGl0cyB2YWx1ZXMgaW4gcGxhY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7UXVhdH0gb3RoZXIgLSBUaGUgb3RoZXIgUXVhdCB0byBtdWx0aXBseS5cbiAgICovXG4gIG11bHRpcGx5SW5QbGFjZShvdGhlcikge1xuICAgIGNvbnN0IGF4ID0gdGhpcy5fX2RhdGFbMF1cbiAgICBjb25zdCBheSA9IHRoaXMuX19kYXRhWzFdXG4gICAgY29uc3QgYXogPSB0aGlzLl9fZGF0YVsyXVxuICAgIGNvbnN0IGF3ID0gdGhpcy5fX2RhdGFbM11cbiAgICBjb25zdCBieCA9IG90aGVyLl9fZGF0YVswXVxuICAgIGNvbnN0IGJ5ID0gb3RoZXIuX19kYXRhWzFdXG4gICAgY29uc3QgYnogPSBvdGhlci5fX2RhdGFbMl1cbiAgICBjb25zdCBidyA9IG90aGVyLl9fZGF0YVszXVxuXG4gICAgdGhpcy5zZXQoXG4gICAgICBheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5LFxuICAgICAgYXkgKiBidyArIGF3ICogYnkgKyBheiAqIGJ4IC0gYXggKiBieixcbiAgICAgIGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYngsXG4gICAgICBhdyAqIGJ3IC0gYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6XG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIFJvdGF0ZXMgYSB2ZWN0b3IgYnkgdGhpcyBxdWF0ZXJuaW9uLlxuICAgKiBEb24ndCBmb3JnZXQgdG8gbm9ybWFsaXplIHRoZSBxdWF0ZXJuaW9uIHVubGVzc1xuICAgKiB5b3Ugd2FudCBheGlhbCB0cmFuc2xhdGlvbiBhcyB3ZWxsIGFzIHJvdGF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzN9IHZlYzMgLSBUaGUgdmVjMyB2YWx1ZS5cbiAgICogQHJldHVybiB7VmVjM30gLSBSZXR1cm5zIGEgbmV3IFZlYzMuXG4gICAqL1xuICByb3RhdGVWZWMzKHZlYzMpIHtcbiAgICBjb25zdCB2cSA9IG5ldyBRdWF0KHZlYzMueCwgdmVjMy55LCB2ZWMzLnosIDAuMClcbiAgICBjb25zdCBwcSA9IHRoaXMubXVsdGlwbHkodnEpLm11bHRpcGx5KHRoaXMuY29uanVnYXRlKCkpXG4gICAgcmV0dXJuIG5ldyBWZWMzKHBxLngsIHBxLnksIHBxLnopXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGlzIHF1YXRlcm5pb24gdG8gYSByb3RhdGlvbiBieSB0aGUgZ2l2ZW4gYW5nbGUgYWJvdXQgdGhlIFggYXhpcy5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJhZCAtIEFuZ2xlIChpbiByYWRpYW5zKSB0byByb3RhdGUuXG4gICAqL1xuICByb3RhdGVYKHJhZCkge1xuICAgIHJhZCAqPSAwLjVcblxuICAgIGNvbnN0IGF4ID0gdGhpcy54XG4gICAgY29uc3QgYXkgPSB0aGlzLnlcbiAgICBjb25zdCBheiA9IHRoaXMuelxuICAgIGNvbnN0IGF3ID0gdGhpcy53XG4gICAgY29uc3QgYnggPSBNYXRoLnNpbihyYWQpXG4gICAgY29uc3QgYncgPSBNYXRoLmNvcyhyYWQpXG5cbiAgICB0aGlzLnggPSBheCAqIGJ3ICsgYXcgKiBieFxuICAgIHRoaXMueSA9IGF5ICogYncgKyBheiAqIGJ4XG4gICAgdGhpcy56ID0gYXogKiBidyAtIGF5ICogYnhcbiAgICB0aGlzLncgPSBhdyAqIGJ3IC0gYXggKiBieFxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhpcyBxdWF0ZXJuaW9uIHRvIGEgcm90YXRpb24gYnkgdGhlIGdpdmVuIGFuZ2xlIGFib3V0IHRoZSBZIGF4aXMuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByYWQgLSBBbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlLlxuICAgKi9cbiAgcm90YXRlWShyYWQpIHtcbiAgICByYWQgKj0gMC41XG5cbiAgICBjb25zdCBheCA9IHRoaXMueFxuICAgIGNvbnN0IGF5ID0gdGhpcy55XG4gICAgY29uc3QgYXogPSB0aGlzLnpcbiAgICBjb25zdCBhdyA9IHRoaXMud1xuICAgIGNvbnN0IGJ5ID0gTWF0aC5zaW4ocmFkKVxuICAgIGNvbnN0IGJ3ID0gTWF0aC5jb3MocmFkKVxuXG4gICAgdGhpcy54ID0gYXggKiBidyAtIGF6ICogYnlcbiAgICB0aGlzLnkgPSBheSAqIGJ3ICsgYXcgKiBieVxuICAgIHRoaXMueiA9IGF6ICogYncgKyBheCAqIGJ5XG4gICAgdGhpcy53ID0gYXcgKiBidyAtIGF5ICogYnlcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoaXMgcXVhdGVybmlvbiB0byBhIHJvdGF0aW9uIGJ5IHRoZSBnaXZlbiBhbmdsZSBhYm91dCB0aGUgWiBheGlzLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gcmFkIC0gQW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZS5cbiAgICovXG4gIHJvdGF0ZVoocmFkKSB7XG4gICAgcmFkICo9IDAuNVxuXG4gICAgY29uc3QgYXggPSB0aGlzLnhcbiAgICBjb25zdCBheSA9IHRoaXMueVxuICAgIGNvbnN0IGF6ID0gdGhpcy56XG4gICAgY29uc3QgYXcgPSB0aGlzLndcbiAgICBjb25zdCBieiA9IE1hdGguc2luKHJhZClcbiAgICBjb25zdCBidyA9IE1hdGguY29zKHJhZClcblxuICAgIHRoaXMueCA9IGF4ICogYncgKyBheSAqIGJ6XG4gICAgdGhpcy55ID0gYXkgKiBidyAtIGF4ICogYnpcbiAgICB0aGlzLnogPSBheiAqIGJ3ICsgYXcgKiBielxuICAgIHRoaXMudyA9IGF3ICogYncgLSBheiAqIGJ6XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgdGhpcyBRdWF0IHRvIGEgTWF0MyAoYSAzeDMgbWF0cml4KS5cbiAgICpcbiAgICogQHJldHVybiB7TWF0M30gLSBUUmV0dXJucyBhIG5ldyBNYXQzLlxuICAgKi9cbiAgdG9NYXQzKCkge1xuICAgIGNvbnN0IHggPSB0aGlzLnhcbiAgICBjb25zdCB5ID0gdGhpcy55XG4gICAgY29uc3QgeiA9IHRoaXMuelxuICAgIGNvbnN0IHcgPSB0aGlzLndcbiAgICBjb25zdCB4MiA9IHggKyB4XG4gICAgY29uc3QgeTIgPSB5ICsgeVxuICAgIGNvbnN0IHoyID0geiArIHpcbiAgICBjb25zdCB4eCA9IHggKiB4MlxuICAgIGNvbnN0IHl4ID0geSAqIHgyXG4gICAgY29uc3QgeXkgPSB5ICogeTJcbiAgICBjb25zdCB6eCA9IHogKiB4MlxuICAgIGNvbnN0IHp5ID0geiAqIHkyXG4gICAgY29uc3QgenogPSB6ICogejJcbiAgICBjb25zdCB3eCA9IHcgKiB4MlxuICAgIGNvbnN0IHd5ID0gdyAqIHkyXG4gICAgY29uc3Qgd3ogPSB3ICogejJcblxuICAgIGNvbnN0IG1hdDMgPSBuZXcgTWF0MygpXG4gICAgbWF0My5fX2RhdGFbMF0gPSAxIC0geXkgLSB6elxuICAgIG1hdDMuX19kYXRhWzNdID0geXggLSB3elxuICAgIG1hdDMuX19kYXRhWzZdID0genggKyB3eVxuXG4gICAgbWF0My5fX2RhdGFbMV0gPSB5eCArIHd6XG4gICAgbWF0My5fX2RhdGFbNF0gPSAxIC0geHggLSB6elxuICAgIG1hdDMuX19kYXRhWzddID0genkgLSB3eFxuXG4gICAgbWF0My5fX2RhdGFbMl0gPSB6eCAtIHd5XG4gICAgbWF0My5fX2RhdGFbNV0gPSB6eSArIHd4XG4gICAgbWF0My5fX2RhdGFbOF0gPSAxIC0geHggLSB5eVxuXG4gICAgcmV0dXJuIG1hdDNcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIGEgVmVjMyB2YWx1ZSBhbGlnbmVkIHdpdGggdGhlIFggYXhpcyBvZiB0aGlzIHF1YXRlcm5pb24uXG4gICAqXG4gICAqIEByZXR1cm4ge1ZlYzN9IC0gVGhlIHJlc3VsdGluZyBWZWMzIHZhbHVlXG4gICAqL1xuICBnZXRYYXhpcygpIHtcbiAgICBjb25zdCB4eSA9IHRoaXMueCAqIHRoaXMueVxuICAgIGNvbnN0IHh6ID0gdGhpcy54ICogdGhpcy56XG4gICAgY29uc3QgeXkgPSB0aGlzLnkgKiB0aGlzLnlcbiAgICBjb25zdCB5dyA9IHRoaXMueSAqIHRoaXMud1xuICAgIGNvbnN0IHp6ID0gdGhpcy56ICogdGhpcy56XG4gICAgY29uc3QgencgPSB0aGlzLnogKiB0aGlzLndcblxuICAgIHJldHVybiBuZXcgVmVjMygxLjAgLSAyLjAgKiAoenogKyB5eSksIDIuMCAqICh4eSArIHp3KSwgMi4wICogKHh6IC0geXcpKVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgYSBWZWMzIHZhbHVlIGFsaWduZWQgd2l0aCB0aGUgWSBheGlzIG9mIHRoaXMgcXVhdGVybmlvbi5cbiAgICpcbiAgICogQHJldHVybiB7VmVjM30gLSBUaGUgcmVzdWx0aW5nIFZlYzMgdmFsdWVcbiAgICovXG4gIGdldFlheGlzKCkge1xuICAgIGNvbnN0IHh4ID0gdGhpcy54ICogdGhpcy54XG4gICAgY29uc3QgeHkgPSB0aGlzLnggKiB0aGlzLnlcbiAgICBjb25zdCB4dyA9IHRoaXMueCAqIHRoaXMud1xuICAgIGNvbnN0IHl6ID0gdGhpcy55ICogdGhpcy56XG4gICAgY29uc3QgenogPSB0aGlzLnogKiB0aGlzLnpcbiAgICBjb25zdCB6dyA9IHRoaXMueiAqIHRoaXMud1xuXG4gICAgcmV0dXJuIG5ldyBWZWMzKDIuMCAqICh4eSAtIHp3KSwgMS4wIC0gMi4wICogKHp6ICsgeHgpLCAyLjAgKiAoeXogKyB4dykpXG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyBhIFZlYzMgdmFsdWUgYWxpZ25lZCB3aXRoIHRoZSBaIGF4aXMgb2YgdGhpcyBxdWF0ZXJuaW9uLlxuICAgKlxuICAgKiBAcmV0dXJuIHtWZWMzfSAtIFRoZSByZXN1bHRpbmcgVmVjMyB2YWx1ZVxuICAgKi9cbiAgZ2V0WmF4aXMoKSB7XG4gICAgY29uc3QgeHggPSB0aGlzLnggKiB0aGlzLnhcbiAgICBjb25zdCB4eiA9IHRoaXMueCAqIHRoaXMuelxuICAgIGNvbnN0IHh3ID0gdGhpcy54ICogdGhpcy53XG5cbiAgICBjb25zdCB5eSA9IHRoaXMueSAqIHRoaXMueVxuICAgIGNvbnN0IHl6ID0gdGhpcy55ICogdGhpcy56XG4gICAgY29uc3QgeXcgPSB0aGlzLnkgKiB0aGlzLndcbiAgICBjb25zdCB0ZW1wID0gbmV3IFZlYzMoKVxuXG4gICAgcmV0dXJuIG5ldyBWZWMzKDIuMCAqICh5dyArIHh6KSwgMi4wICogKHl6IC0geHcpLCAxLjAgLSAyLjAgKiAoeXkgKyB4eCkpXG4gIH1cblxuICAvKipcbiAgICogUmVmbGVjdHMgdGhpcyBxdWF0ZXJuaW9uIGFjY29yZGluZyB0byB0aGUgYXhpcyBwcm92aWRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGF4aXNJbmRleCAtIEFuIGludGVnZXIgd2l0aCB2YWx1ZSBvZiAwIGZvciB0aGUgWCBheGlzLCAxIGZvciB0aGUgWSBheGlzLCBhbmQgMiBmb3IgdGhlIFogYXhpcy5cbiAgICogQHJldHVybiB7UXVhdH0gLSBSZXR1cm5zIGEgbmV3IFF1YXQuXG4gICAqL1xuICBtaXJyb3IoYXhpc0luZGV4KSB7XG4gICAgc3dpdGNoIChheGlzSW5kZXgpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIG5ldyBRdWF0KHRoaXMueiwgdGhpcy53LCB0aGlzLngsIHRoaXMueSlcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIG5ldyBRdWF0KC10aGlzLncsIHRoaXMueiwgdGhpcy55LCAtdGhpcy54KVxuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gbmV3IFF1YXQodGhpcy54LCB0aGlzLnksIHRoaXMueiwgLXRoaXMudylcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgdGhpcyBRdWF0IHRvIGEgTWF0NCAoYSA0eDQgbWF0cml4KS5cbiAgICpcbiAgICogQHJldHVybiB7TWF0NH0gLSBSZXR1cm5zIGEgbmV3IE1hdDQuXG4gICAqL1xuICB0b01hdDQoKSB7XG4gICAgY29uc3QgeCA9IHRoaXMueFxuICAgIGNvbnN0IHkgPSB0aGlzLnlcbiAgICBjb25zdCB6ID0gdGhpcy56XG4gICAgY29uc3QgdyA9IHRoaXMud1xuICAgIGNvbnN0IHgyID0geCArIHhcbiAgICBjb25zdCB5MiA9IHkgKyB5XG4gICAgY29uc3QgejIgPSB6ICsgelxuICAgIGNvbnN0IHh4ID0geCAqIHgyXG4gICAgY29uc3QgeXggPSB5ICogeDJcbiAgICBjb25zdCB5eSA9IHkgKiB5MlxuICAgIGNvbnN0IHp4ID0geiAqIHgyXG4gICAgY29uc3QgenkgPSB6ICogeTJcbiAgICBjb25zdCB6eiA9IHogKiB6MlxuICAgIGNvbnN0IHd4ID0gdyAqIHgyXG4gICAgY29uc3Qgd3kgPSB3ICogeTJcbiAgICBjb25zdCB3eiA9IHcgKiB6MlxuXG4gICAgLy8gU2V0IHRoZSBjb2x1bW5zXG4gICAgY29uc3QgbWF0NCA9IG5ldyBNYXQ0KClcbiAgICBtYXQ0Ll9fZGF0YVswXSA9IDEgLSB5eSAtIHp6XG4gICAgbWF0NC5fX2RhdGFbNF0gPSB5eCAtIHd6XG4gICAgbWF0NC5fX2RhdGFbOF0gPSB6eCArIHd5XG5cbiAgICBtYXQ0Ll9fZGF0YVsxXSA9IHl4ICsgd3pcbiAgICBtYXQ0Ll9fZGF0YVs1XSA9IDEgLSB4eCAtIHp6XG4gICAgbWF0NC5fX2RhdGFbOV0gPSB6eSAtIHd4XG5cbiAgICBtYXQ0Ll9fZGF0YVsyXSA9IHp4IC0gd3lcbiAgICBtYXQ0Ll9fZGF0YVs2XSA9IHp5ICsgd3hcbiAgICBtYXQ0Ll9fZGF0YVsxMF0gPSAxIC0geHggLSB5eVxuXG4gICAgcmV0dXJuIG1hdDRcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIG9mIHRoaXMgUXVhdCB0b3dhcmRzIGFub3RoZXIgUXVhdCwgcmV0dXJuaW5nIHRoZSByZXN1bHQgYXMgYSBuZXcgUXVhdC5cbiAgICpcbiAgICogQHBhcmFtIHtRdWF0fSBvdGhlciAgLSBUaGUgb3RoZXIgUXVhdCB0byBpbnRlcnBvbGF0ZSB0b3dhcmRzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gdCAtIEludGVycG9sYXRpb24gYW1vdW50IGJldHdlZW4gdGhlIHR3byBpbnB1dHMuXG4gICAqIEByZXR1cm4ge1F1YXR9IC0gUmV0dXJucyBhIG5ldyBRdWF0LlxuICAgKi9cbiAgbGVycChvdGhlciwgdCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBRdWF0KFxuICAgICAgdGhpcy54ICsgdCAqIChvdGhlci54IC0gdGhpcy54KSxcbiAgICAgIHRoaXMueSArIHQgKiAob3RoZXIueSAtIHRoaXMueSksXG4gICAgICB0aGlzLnogKyB0ICogKG90aGVyLnogLSB0aGlzLnopLFxuICAgICAgdGhpcy53ICsgdCAqIChvdGhlci53IC0gdGhpcy53KVxuICAgIClcbiAgICByZXN1bHQubm9ybWFsaXplSW5QbGFjZSgpXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm1zIGEgc3BoZXJpY2FsIGxpbmVhciBpbnRlcnBvbGF0aW9uIG9mIHRoaXMgUXVhdCB0b3dhcmRzIGFub3RoZXIgUXVhdCwgcmV0dXJuaW5nIHRoZSByZXN1bHQgYXMgYSBuZXcgUXVhdC5cbiAgICpcbiAgICogQHBhcmFtIHtRdWF0fSBvdGhlciAtIFRoZSBvdGhlciBRdWF0IHRvIGludGVycG9sYXRlIHRvd2FyZHMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0IC0gSW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0cy5cbiAgICogQHJldHVybiB7UXVhdH0gLSBSZXR1cm5zIGEgbmV3IFF1YXQuXG4gICAqL1xuICBzbGVycChvdGhlciwgdCkge1xuICAgIC8vIGh0dHBzOi8vd3d3LmxpeC5wb2x5dGVjaG5pcXVlLmZyL35uaWVsc2VuL1dFQnZpc3VhbGNvbXB1dGluZy9wcm9ncmFtcy9zbGVycC5jcHBcbiAgICAvLyBjb25zdCBkb3RQcm9kdWN0ID0gdGhpcy54ICogb3RoZXIueCArIHRoaXMueSAqIG90aGVyLnkgKyB0aGlzLnogKiBvdGhlci56ICsgdGhpcy53ICogb3RoZXIud1xuICAgIGNvbnN0IGRvdFByb2R1Y3QgPSB0aGlzLmRvdChvdGhlcilcblxuICAgIC8vIGFsZ29yaXRobSBhZGFwdGVkIGZyb20gU2hvZW1ha2UncyBwYXBlclxuICAgIGNvbnN0IGxhbWJkYSA9IHQgLyAyXG5cbiAgICBjb25zdCB0aGV0YSA9IE1hdGguYWNvcyhkb3RQcm9kdWN0KVxuICAgIGlmICh0aGV0YSA8IDAuMCkgdGhldGEgPSAtdGhldGFcblxuICAgIGNvbnN0IHN0ID0gTWF0aC5zaW4odGhldGEpXG4gICAgY29uc3Qgc3V0ID0gTWF0aC5zaW4obGFtYmRhICogdGhldGEpXG4gICAgY29uc3Qgc291dCA9IE1hdGguc2luKCgxIC0gbGFtYmRhKSAqIHRoZXRhKVxuICAgIGNvbnN0IGNvZWZmMSA9IHNvdXQgLyBzdFxuICAgIGNvbnN0IGNvZWZmMiA9IHN1dCAvIHN0XG5cbiAgICBjb25zdCByZXN1bHQgPSBuZXcgUXVhdChcbiAgICAgIGNvZWZmMSAqIHRoaXMueCArIGNvZWZmMiAqIG90aGVyLngsXG4gICAgICBjb2VmZjEgKiB0aGlzLnkgKyBjb2VmZjIgKiBvdGhlci55LFxuICAgICAgY29lZmYxICogdGhpcy56ICsgY29lZmYyICogb3RoZXIueixcbiAgICAgIGNvZWZmMSAqIHRoaXMudyArIGNvZWZmMiAqIG90aGVyLndcbiAgICApXG4gICAgcmVzdWx0Lm5vcm1hbGl6ZUluUGxhY2UoKVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gU3RhdGljIE1ldGhvZHNcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBRdWF0LlxuICAgKiBAcGFyYW0gey4uLm9iamVjdH0gLi4uYXJncyAtIFRoZSAuLi5hcmdzIHBhcmFtLlxuICAgKiBAcmV0dXJuIHtRdWF0fSAtIFJldHVybnMgYSBuZXcgUXVhdC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBjcmVhdGUoLi4uYXJncykge1xuICAgIHJldHVybiBuZXcgUXVhdCguLi5hcmdzKVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgUXVhdCB0byB3cmFwIGV4aXN0aW5nIG1lbW9yeSBpbiBhIGJ1ZmZlci5cbiAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYnVmZmVyIC0gVGhlIGJ1ZmZlciB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCAtIFRoZSBvZmZzZXQgdmFsdWUuXG4gICAqIEByZXR1cm4ge1F1YXR9IC0gUmV0dXJucyBhIG5ldyBRdWF0LlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZUZyb21GbG9hdDMyQnVmZmVyKGJ1ZmZlciwgb2Zmc2V0ID0gMCkge1xuICAgIGNvbnNvbGUud2FybignRGVwcmVjYXRlZCwgdXNlICNjcmVhdGVGcm9tQnVmZmVyIGluc3RlYWQnKVxuICAgIHJldHVybiB0aGlzLmNyZWF0ZUZyb21CdWZmZXIoYnVmZmVyLCBvZmZzZXQgKiA0KVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgYSBgUXVhdGAgdXNpbmcgYW4gQXJyYXlCdWZmZXIuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYnVmZmVyIC0gVGhlIGJ1ZmZlciB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGJ5dGVPZmZzZXQgLSBUaGUgb2Zmc2V0IHZhbHVlLlxuICAgKiBAcmV0dXJuIHtRdWF0fSAtIFJldHVybnMgYSBuZXcgUXVhdC5cbiAgICovXG4gIHN0YXRpYyBjcmVhdGVGcm9tQnVmZmVyKGJ1ZmZlciwgYnl0ZU9mZnNldCkge1xuICAgIHJldHVybiBuZXcgUXVhdChuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlciwgYnl0ZU9mZnNldCwgNCkpIC8vIDQgYnl0ZXMgcGVyIDMyYml0IGZsb2F0XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIEZsb2F0MzIgZWxlbWVudHMgdXNlZCBieSB0aGlzIHR5cGUuIFVzZWQgdG8gY2FsY3VsYXRlIHN0b3JhZ2UgcmVxdWlyZW1lbnRzIGZvciBsYXJnZSBhcnJheXMgb2YgdGhpcyB0eXBlLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBudW1FbGVtZW50cygpIHtcbiAgICByZXR1cm4gNFxuICB9XG5cbiAgLyoqXG4gICAqIENsb25lcyB0aGlzIFF1YXQgYW5kIHJldHVybnMgYSBuZXcgUXVhdC5cbiAgICpcbiAgICogQHJldHVybiB7UXVhdH0gLSBSZXR1cm5zIGEgbmV3IFF1YXQuXG4gICAqL1xuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IFF1YXQodGhpcy5fX2RhdGFbMF0sIHRoaXMuX19kYXRhWzFdLCB0aGlzLl9fZGF0YVsyXSwgdGhpcy5fX2RhdGFbM10pXG4gIH1cblxuICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gUGVyc2lzdGVuY2VcblxuICAvKipcbiAgICogVGhlIHRvSlNPTiBtZXRob2QgZW5jb2RlcyB0aGlzIHR5cGUgYXMgYSBqc29uIG9iamVjdCBmb3IgcGVyc2lzdGVuY2UuXG4gICAqXG4gICAqIEByZXR1cm4ge29iamVjdH0gLSBUaGUganNvbiBvYmplY3QuXG4gICAqL1xuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHRoaXMueCxcbiAgICAgIHk6IHRoaXMueSxcbiAgICAgIHo6IHRoaXMueixcbiAgICAgIHc6IHRoaXMudyxcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhlIGZyb21KU09OIG1ldGhvZCBkZWNvZGVzIGEganNvbiBvYmplY3QgZm9yIHRoaXMgdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGogLSBUaGUganNvbiBvYmplY3QuXG4gICAqL1xuICBmcm9tSlNPTihqKSB7XG4gICAgdGhpcy5fX2RhdGFbMF0gPSBqLnhcbiAgICB0aGlzLl9fZGF0YVsxXSA9IGoueVxuICAgIHRoaXMuX19kYXRhWzJdID0gai56XG4gICAgdGhpcy5fX2RhdGFbM10gPSBqLndcbiAgICB0aGlzLm5vcm1hbGl6ZUluUGxhY2UoKVxuICB9XG5cbiAgLyoqXG4gICAqIExvYWRzIHRoZSBzdGF0ZSBvZiB0aGUgdmFsdWUgZnJvbSBhIGJpbmFyeSByZWFkZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7QmluUmVhZGVyfSByZWFkZXIgLSBUaGUgcmVhZGVyIHZhbHVlLlxuICAgKi9cbiAgcmVhZEJpbmFyeShyZWFkZXIpIHtcbiAgICB0aGlzLnggPSByZWFkZXIubG9hZEZsb2F0MzIoKVxuICAgIHRoaXMueSA9IHJlYWRlci5sb2FkRmxvYXQzMigpXG4gICAgdGhpcy56ID0gcmVhZGVyLmxvYWRGbG9hdDMyKClcbiAgICB0aGlzLncgPSByZWFkZXIubG9hZEZsb2F0MzIoKVxuICB9XG59XG5cblJlZ2lzdHJ5LnJlZ2lzdGVyKCdRdWF0JywgUXVhdClcblxuZXhwb3J0IHsgUXVhdCB9XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuZXctY2FwICovXG5pbXBvcnQgeyBTdHJpbmdGdW5jdGlvbnMgfSBmcm9tICcuLi9VdGlsaXRpZXMvU3RyaW5nRnVuY3Rpb25zJ1xuaW1wb3J0IHsgTWF0aEZ1bmN0aW9ucyB9IGZyb20gJy4uL1V0aWxpdGllcy9NYXRoRnVuY3Rpb25zJ1xuaW1wb3J0IHsgVmVjMyB9IGZyb20gJy4vVmVjMy5qcydcbmltcG9ydCB7IFJlZ2lzdHJ5IH0gZnJvbSAnLi4vUmVnaXN0cnknXG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgcmF5IHRoYXQgc3RhcnRzIGZyb20gYW4gb3JpZ2luIGluIGEgc3BlY2lmaWVkIGRpcmVjdGlvbi5cbiAqL1xuY2xhc3MgUmF5IHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIHJheS5cbiAgICpcbiAgICogQHBhcmFtIHtWZWMzfSBzdGFydCAtIFRoZSBvcmlnaW4gb2YgdGhlIHJheS5cbiAgICogQHBhcmFtIHtWZWMzfSBkaXIgLSBUaGUgZGlyZWN0aW9uIG9mIHRoZSByYXkuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihzdGFydCA9IHVuZGVmaW5lZCwgZGlyID0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHN0YXJ0IGluc3RhbmNlb2YgVmVjMykge1xuICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhcnQgPSBuZXcgVmVjMygpXG4gICAgfVxuICAgIGlmIChkaXIgaW5zdGFuY2VvZiBWZWMzKSB7XG4gICAgICB0aGlzLmRpciA9IGRpclxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpciA9IG5ldyBWZWMzKClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjbG9zZXN0IHBvaW50IG9uIHRoZSByYXkgdG8gdGhlIGdpdmVuIHBvaW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzN9IHBvaW50IC0gVGhlIHBvaW50IGluIDNEIHNwYWNlLlxuICAgKiBAcmV0dXJuIHtSYXl9IC0gUmV0dXJucyB0aGUgZGlzdGFuY2UgYWxvbmcgdGhlIHJheSB3aGVyZSB0aGUgY2xvc2VzdCBwb2ludCBvY2N1cnMuXG4gICAqL1xuICBjbG9zZXN0UG9pbnQocG9pbnQpIHtcbiAgICBjb25zdCB3ID0gcG9pbnQuc3VidHJhY3QodGhpcy5zdGFydClcbiAgICBjb25zdCBjMSA9IHcuZG90KHRoaXMuZGlyKVxuICAgIGlmIChjMSA8IE51bWJlci5FUFNJTE9OKSByZXR1cm4gMFxuICAgIGNvbnN0IGMyID0gdGhpcy5kaXIuZG90KHRoaXMuZGlyKVxuICAgIGlmIChjMiA8IE51bWJlci5FUFNJTE9OKSByZXR1cm4gMFxuICAgIHJldHVybiBjMSAvIGMyXG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjbG9zZXN0IHBvaW50IGJldHdlZW4gdGhlIHJheSBhbmQgdGhlIGdpdmVuIGxpbmUgc2VnbWVudCBtYWRlIG9mIHRoZSAyIHBvaW50cy5cbiAgICpcbiAgICogQHBhcmFtIHtWZWMzfSBwMCAtIFRoZSBwb2ludCBpbiAzRCBzcGFjZS5cbiAgICogQHBhcmFtIHtWZWMzfSBwMSAtIFRoZSBwb2ludCBpbiAzRCBzcGFjZS5cbiAgICogQHJldHVybiB7YXJyYXl9IC0gUmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIDIgc2NhbGFyIHZhbHVlcyBpbmRpY2F0aW5nIDA6IHRoZSBmcmFjdGlvbiBvZiB0aGUgbGluZSBzZWdtZW50LCAxOiBkaXN0YW5jZSBhbG9uZyB0aGUgUmF5XG4gICAqL1xuICBjbG9zZXN0UG9pbnRPbkxpbmVTZWdtZW50KHAwLCBwMSkge1xuICAgIGNvbnN0IHUgPSB0aGlzLmRpclxuICAgIGNvbnN0IHYgPSBwMS5zdWJ0cmFjdChwMClcbiAgICBjb25zdCB2X2xlbiA9IHYubGVuZ3RoKClcbiAgICB2Lm5vcm1hbGl6ZUluUGxhY2UoKVxuICAgIGNvbnN0IHcgPSB0aGlzLnN0YXJ0LnN1YnRyYWN0KHAwKVxuICAgIGNvbnN0IGEgPSB1LmRvdCh1KSAvLyBhbHdheXMgPj0gMFxuICAgIGNvbnN0IGIgPSB1LmRvdCh2KVxuICAgIGNvbnN0IGMgPSB2LmRvdCh2KSAvLyBhbHdheXMgPj0gMFxuICAgIGNvbnN0IGQgPSB1LmRvdCh3KVxuICAgIGNvbnN0IGUgPSB2LmRvdCh3KVxuXG4gICAgaWYgKGEgPT0gMC4wICYmIGMgPT0gMC4wKSB7XG4gICAgICByZXR1cm4gW3RoaXMuc3RhcnQuZGlzdGFuY2VUbyhwMCksIDAuMF1cbiAgICB9XG4gICAgaWYgKGEgPT0gMC4wKSB7XG4gICAgICByZXR1cm4gWzAuMCwgMC4wXVxuICAgIH1cbiAgICBpZiAoYyA9PSAwLjApIHtcbiAgICAgIHJldHVybiBbdGhpcy5jbG9zZXN0UG9pbnQocDApLCAwLjBdXG4gICAgfVxuICAgIGNvbnN0IEQgPSBhICogYyAtIGIgKiBiIC8vIGFsd2F5cyA+PSAwXG5cbiAgICAvLyBjb21wdXRlIHRoZSByYXkgcGFyYW1ldGVycyBvZiB0aGUgdHdvIGNsb3Nlc3QgcG9pbnRzXG4gICAgbGV0IHRoaXNfdFxuICAgIGxldCBzZWdfdFxuICAgIGlmIChEIDwgMC4wMDEpIHtcbiAgICAgIC8vIHRoZSBsaW5lcyBhcmUgYWxtb3N0IHBhcmFsbGVsXG4gICAgICB0aGlzX3QgPSAwLjBcbiAgICAgIGlmIChiID4gYykge1xuICAgICAgICAvLyB1c2UgdGhlIGxhcmdlc3QgZGVub21pbmF0b3JcbiAgICAgICAgc2VnX3QgPSBkIC8gYlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VnX3QgPSBlIC8gY1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzX3QgPSAoYiAqIGUgLSBjICogZCkgLyBEXG4gICAgICBzZWdfdCA9IChhICogZSAtIGIgKiBkKSAvIERcbiAgICB9XG4gICAgcmV0dXJuIFt0aGlzX3QsIE1hdGhGdW5jdGlvbnMuY2xhbXAoc2VnX3QgLyB2X2xlbiwgMCwgMSldXG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjbG9zZXN0IHBvaW50IGF0IGEgZGlzdGFuY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjM30gZGlzdCAtIFRoZSBkaXN0YW5jZSB2YWx1ZS5cbiAgICogQHJldHVybiB7UmF5fSAtIFJldHVybnMgYSBSYXkuXG4gICAqL1xuICBwb2ludEF0RGlzdChkaXN0KSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhcnQuYWRkKHRoaXMuZGlyLnNjYWxlKGRpc3QpKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHR3byByYXkgcGFyYW1zIHRoYXQgcmVwcmVzZW50IHRoZSBjbG9zZXN0IHBvaW50IGJldHdlZW4gdGhlIHR3byByYXlzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JheX0gcmF5IC0gVGhlIHJheSB2YWx1ZS5cbiAgICogQHJldHVybiB7YXJyYXl9IC0gUmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIDIgc2NhbGFyIHZhbHVlcyBpbmRpY2F0aW5nIDA6IHRoZSBmcmFjdGlvbiBvZiB0aGUgbGluZSBzZWdtZW50LCAxOiBkaXN0YW5jZSBhbG9uZyB0aGUgUmF5XG4gICAqL1xuICBpbnRlcnNlY3RSYXlWZWN0b3IocmF5KSB7XG4gICAgY29uc3QgdSA9IHRoaXMuZGlyXG4gICAgY29uc3QgdiA9IHJheS5kaXJcbiAgICBjb25zdCB3ID0gdGhpcy5zdGFydC5zdWJ0cmFjdChyYXkuc3RhcnQpXG4gICAgY29uc3QgYSA9IHUuZG90KHUpIC8vIGFsd2F5cyA+PSAwXG4gICAgY29uc3QgYiA9IHUuZG90KHYpXG4gICAgY29uc3QgYyA9IHYuZG90KHYpIC8vIGFsd2F5cyA+PSAwXG4gICAgY29uc3QgZCA9IHUuZG90KHcpXG4gICAgY29uc3QgZSA9IHYuZG90KHcpXG4gICAgaWYgKGEgPT0gMC4wICYmIGMgPT0gMC4wKSB7XG4gICAgICByZXR1cm4gWzAuMCwgdGhpcy5zdGFydC5kaXN0YW5jZVRvKHJheS5zdGFydCldXG4gICAgfVxuICAgIGlmIChhID09IDAuMCkge1xuICAgICAgcmV0dXJuIFtyYXkuY2xvc2VzdFBvaW50KHRoaXMuc3RhcnQpLCAwLjBdXG4gICAgfVxuICAgIGlmIChjID09IDAuMCkge1xuICAgICAgcmV0dXJuIFsxLjAsIHRoaXMuY2xvc2VzdFBvaW50KHJheS5zdGFydCldXG4gICAgfVxuICAgIGNvbnN0IEQgPSBhICogYyAtIGIgKiBiIC8vIGFsd2F5cyA+PSAwXG5cbiAgICAvLyBjb21wdXRlIHRoZSByYXkgcGFyYW1ldGVycyBvZiB0aGUgdHdvIGNsb3Nlc3QgcG9pbnRzXG4gICAgbGV0IHRoaXNfdFxuICAgIGxldCByYXlfdFxuICAgIGlmIChEIDwgMC4wMDEpIHtcbiAgICAgIC8vIHRoZSBsaW5lcyBhcmUgYWxtb3N0IHBhcmFsbGVsXG4gICAgICB0aGlzX3QgPSAwLjBcbiAgICAgIGlmIChiID4gYykge1xuICAgICAgICAvLyB1c2UgdGhlIGxhcmdlc3QgZGVub21pbmF0b3JcbiAgICAgICAgcmF5X3QgPSBkIC8gYlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmF5X3QgPSBlIC8gY1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzX3QgPSAoYiAqIGUgLSBjICogZCkgLyBEXG4gICAgICByYXlfdCA9IChhICogZSAtIGIgKiBkKSAvIERcbiAgICB9XG4gICAgcmV0dXJuIFt0aGlzX3QsIHJheV90XVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgb25lIHJheSBwYXJhbSByZXByZXNlbnRpbmcgdGhlIGludGVyc2VjdGlvblxuICAgKiBvZiB0aGlzIHJheSBhZ2FpbnN0IHRoZSBwbGFuZSBkZWZpbmVkIGJ5IHRoZSBnaXZlbiByYXkuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjM30gcGxhbmUgLSBUaGUgcGxhbmUgdG8gaW50ZXJzZWN0IHdpdGguXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgaW50ZXJzZWN0UmF5UGxhbmUocGxhbmUpIHtcbiAgICBjb25zdCB3ID0gdGhpcy5zdGFydC5zdWJ0cmFjdChwbGFuZS5zdGFydClcbiAgICBjb25zdCBEID0gcGxhbmUuZGlyLmRvdCh0aGlzLmRpcilcbiAgICBjb25zdCBOID0gLXBsYW5lLmRpci5kb3QodylcblxuICAgIGlmIChNYXRoLmFicyhEKSA8IE51bWJlci5QUkVDSVNJT04pIHtcbiAgICAgIC8vIHNlZ21lbnQgaXMgcGFyYWxsZWwgdG8gcGxhbmVcbiAgICAgIGlmIChOID09IDAuMCkgcmV0dXJuIC0xLjBcbiAgICAgIC8vIHNlZ21lbnQgbGllcyBpbiBwbGFuZVxuICAgICAgZWxzZSByZXR1cm4gLTEuMCAvLyBubyBpbnRlcnNlY3Rpb25cbiAgICB9XG4gICAgLy8gdGhleSBhcmUgbm90IHBhcmFsbGVsXG4gICAgLy8gY29tcHV0ZSBpbnRlcnNlY3QgcGFyYW1cbiAgICBjb25zdCBzSSA9IE4gLyBEXG4gICAgaWYgKHNJIDwgLU51bWJlci5QUkVDSVNJT04pIHtcbiAgICAgIHJldHVybiAtMSAvLyBubyBpbnRlcnNlY3Rpb25cbiAgICB9XG4gICAgcmV0dXJuIHNJXG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGlzIEJveDMgaW50ZXJzZWN0cyBhIHJheS5cbiAgICpcbiAgICogQHBhcmFtIHtCb3gzfSBib3gzIC0gVGhlIGJveCB0byBjaGVjayBmb3IgaW50ZXJzZWN0aW9uIGFnYWluc3QuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0b2xlcmFuY2UgLSBUaGUgdG9sZXJhbmNlIG9mIHRoZSB0ZXN0LlxuICAgKiBAcmV0dXJuIHtib29sZWFufSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBpbnRlcnNlY3RSYXlCb3gzKGJveDMsIHRvbGVyYW5jZSA9IDApIHtcbiAgICAvLyBodHRwczovL3d3dy5zY3JhdGNoYXBpeGVsLmNvbS9sZXNzb25zLzNkLWJhc2ljLXJlbmRlcmluZy9taW5pbWFsLXJheS10cmFjZXItcmVuZGVyaW5nLXNpbXBsZS1zaGFwZXMvcmF5LWJveC1pbnRlcnNlY3Rpb25cblxuICAgIGNvbnN0IGludkRpciA9IG5ldyBWZWMzKDEgLyB0aGlzLmRpci54LCAxIC8gdGhpcy5kaXIueSwgMSAvIHRoaXMuZGlyLnopXG4gICAgY29uc3Qgc2lnbiA9IFtdXG4gICAgc2lnblswXSA9IGludkRpci54IDwgMFxuICAgIHNpZ25bMV0gPSBpbnZEaXIueSA8IDBcbiAgICBzaWduWzJdID0gaW52RGlyLnogPCAwXG5cbiAgICBjb25zdCBib3VuZHMgPSBbXVxuICAgIGlmICh0b2xlcmFuY2UgPiAwKSB7XG4gICAgICBjb25zdCBkaWFnID0gYm94My5kaWFnb25hbCgpXG4gICAgICBkaWFnLm5vcm1hbGl6ZUluUGxhY2UoKVxuICAgICAgZGlhZy5zY2FsZUluUGxhY2UodG9sZXJhbmNlKVxuICAgICAgYm91bmRzWzBdID0gYm94My5wMC5zdWJ0cmFjdChkaWFnKVxuICAgICAgYm91bmRzWzFdID0gYm94My5wMS5hZGQoZGlhZylcbiAgICB9IGVsc2Uge1xuICAgICAgYm91bmRzWzBdID0gYm94My5wMFxuICAgICAgYm91bmRzWzFdID0gYm94My5wMVxuICAgIH1cblxuICAgIGxldCB0TWluID0gKGJvdW5kc1tzaWduWzBdXS54IC0gdGhpcy5zdGFydC54KSAqIGludkRpci54XG4gICAgbGV0IHRNYXggPSAoYm91bmRzWzEgLSBzaWduWzBdXS54IC0gdGhpcy5zdGFydC54KSAqIGludkRpci54XG4gICAgY29uc3QgdHlNaW4gPSAoYm91bmRzW3NpZ25bMV1dLnkgLSB0aGlzLnN0YXJ0LnkpICogaW52RGlyLnlcbiAgICBjb25zdCB0eU1heCA9IChib3VuZHNbMSAtIHNpZ25bMV1dLnkgLSB0aGlzLnN0YXJ0LnkpICogaW52RGlyLnlcblxuICAgIGlmICh0TWluID4gdHlNYXggfHwgdHlNaW4gPiB0TWF4KSByZXR1cm4gZmFsc2VcbiAgICBpZiAodHlNaW4gPiB0TWluKSB0TWluID0gdHlNaW5cbiAgICBpZiAodHlNYXggPCB0TWF4KSB0TWF4ID0gdHlNYXhcblxuICAgIGNvbnN0IHR6TWluID0gKGJvdW5kc1tzaWduWzJdXS56IC0gdGhpcy5zdGFydC56KSAqIGludkRpci56XG4gICAgY29uc3QgdHpNYXggPSAoYm91bmRzWzEgLSBzaWduWzJdXS56IC0gdGhpcy5zdGFydC56KSAqIGludkRpci56XG5cbiAgICBpZiAodE1pbiA+IHR6TWF4IHx8IHR6TWluID4gdE1heCkgcmV0dXJuIGZhbHNlXG4gICAgaWYgKHR6TWluID4gdE1pbikgdE1pbiA9IHR6TWluXG4gICAgaWYgKHR6TWF4IDwgdE1heCkgdE1heCA9IHR6TWF4XG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIENsb25lcyB0aGlzIFJheSBhbmQgcmV0dXJucyBhIG5ldyBSYXkuXG4gICAqXG4gICAqIEByZXR1cm4ge1JheX0gLSBSZXR1cm5zIGEgbmV3IFJheS5cbiAgICovXG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgUmF5KHRoaXMuc3RhcnQuY2xvbmUoKSwgdGhpcy5kaXIuY2xvbmUoKSlcbiAgfVxuXG4gIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gU3RhdGljIE1ldGhvZHNcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBSYXkuXG4gICAqIEBwYXJhbSB7Li4ub2JqZWN0fSAuLi5hcmdzIC0gVGhlIC4uLmFyZ3MgcGFyYW0uXG4gICAqIEByZXR1cm4ge1JheX0gLSBSZXR1cm5zIGEgbmV3IFJheS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBjcmVhdGUoLi4uYXJncykge1xuICAgIHJldHVybiBuZXcgUmF5KC4uLmFyZ3MpXG4gIH1cblxuICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gUGVyc2lzdGVuY2VcblxuICAvKipcbiAgICogVGhlIHRvSlNPTiBtZXRob2QgZW5jb2RlcyB0aGlzIHR5cGUgYXMgYSBqc29uIG9iamVjdCBmb3IgcGVyc2lzdGVuY2UuXG4gICAqXG4gICAqIEByZXR1cm4ge29iamVjdH0gLSBUaGUganNvbiBvYmplY3QuXG4gICAqL1xuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0OiB0aGlzLnN0YXJ0LFxuICAgICAgZGlyOiB0aGlzLmRpcixcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhlIGZyb21KU09OIG1ldGhvZCBkZWNvZGVzIGEganNvbiBvYmplY3QgZm9yIHRoaXMgdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGogLSBUaGUganNvbiBvYmplY3QuXG4gICAqL1xuICBmcm9tSlNPTihqKSB7XG4gICAgdGhpcy5zdGFydC5mcm9tSlNPTihqLnN0YXJ0KVxuICAgIHRoaXMuZGlyLmZyb21KU09OKGouZGlyKVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIGB0b0pTT05gIG1ldGhvZCBhbmQgc3RyaW5naWZpZXMgaXQuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIFN0cmluZ0Z1bmN0aW9ucy5zdHJpbmdpZnlKU09OV2l0aEZpeGVkUHJlY2lzaW9uKHRoaXMudG9KU09OKCkpXG4gIH1cbn1cblxuUmVnaXN0cnkucmVnaXN0ZXIoJ1JheScsIFJheSlcblxuZXhwb3J0IHsgUmF5IH1cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5pbXBvcnQgeyBTdHJpbmdGdW5jdGlvbnMgfSBmcm9tICcuLi9VdGlsaXRpZXMvU3RyaW5nRnVuY3Rpb25zJ1xuaW1wb3J0IHsgVmVjMyB9IGZyb20gJy4vVmVjMy5qcydcbmltcG9ydCB7IE1hdDQgfSBmcm9tICcuL01hdDQuanMnXG5pbXBvcnQgeyBRdWF0IH0gZnJvbSAnLi9RdWF0LmpzJ1xuaW1wb3J0IHsgUmVnaXN0cnkgfSBmcm9tICcuLi9SZWdpc3RyeSdcblxuY29uc3Qgc2NfaGVscGVyID0gbmV3IFZlYzMoMSwgMSwgMSlcblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYW4gWGZvIHRyYW5zZm9ybSwgd2hpY2ggaXMgYSB0cmFuc2Zvcm1hdGlvbiBkZWNvbXBvc2VkIGludG8gMyBjb21wb25lbnQgdmFsdWVzLiBUcmFuc2xhdGlvbiwgT3JpZW50YXRpb24sIGFuZCBTY2FsaW5nLlxuICovXG5jbGFzcyBYZm8ge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIFhmbyBvYmplY3QuXG4gICAqIDxicj5cbiAgICogKipOb3RlOioqIFlvdSBjYW4gbGVhdmUgaXQgZW1wdHkgYW5kIHVzZSBvdGhlciBtZXRob2RzIHRpIHNldCB0aGUgc3RhdGUgb2YgdGhlIGNsYXNzLlxuICAgKlxuICAgKiBAc2VlIFtgc2V0RnJvbU90aGVyYF0oI3NldEZyb21PdGhlcikgW2Bmcm9tTWF0NGBdKCNmcm9tTWF0NCkgW2BzZXRGcm9tRmxvYXQzMkFycmF5YF0oI3NldEZyb21GbG9hdDMyQXJyYXkpIFtgZnJvbUpTT05gXSgjZnJvbUpTT04pXG4gICAqXG4gICAqIEBwYXJhbSB7RmxvYXQzMkFycmF5IHwgVmVjM30gdHIgLSBUaGUgdHJhbnNsYXRpb24gdmFsdWUuXG4gICAqIEBwYXJhbSB7UXVhdH0gb3JpIC0gVGhlIG9yaWVudGF0aW9uIHZhbHVlLlxuICAgKiBAcGFyYW0ge1ZlYzN9IHNjIC0gVGhlIHNjYWxpbmcgdmFsdWUuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih0ciA9IHVuZGVmaW5lZCwgb3JpID0gdW5kZWZpbmVkLCBzYyA9IHVuZGVmaW5lZCkge1xuICAgIGlmICh0ciBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSkge1xuICAgICAgdGhpcy5zZXRGcm9tRmxvYXQzMkFycmF5KHRyKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmICh0ciBpbnN0YW5jZW9mIFZlYzMpIHtcbiAgICAgIHRoaXMudHIgPSB0clxuICAgIH0gZWxzZSBpZiAodHIgaW5zdGFuY2VvZiBRdWF0ICYmIG9yaSA9PSB1bmRlZmluZWQgJiYgc2MgPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnRyID0gbmV3IFZlYzMoKVxuICAgICAgdGhpcy5vcmkgPSB0ciAvLyBYZm8gY29uc3RydWN0b3Igd2l0aCBqdXN0IGEgUXVhdC5cbiAgICAgIHRoaXMuc2MgPSBuZXcgVmVjMygxLCAxLCAxKVxuICAgICAgcmV0dXJuXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudHIgPSBuZXcgVmVjMygpXG4gICAgfVxuICAgIGlmIChvcmkgaW5zdGFuY2VvZiBRdWF0KSB7XG4gICAgICB0aGlzLm9yaSA9IG9yaVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9yaSA9IG5ldyBRdWF0KClcbiAgICB9XG4gICAgaWYgKHNjIGluc3RhbmNlb2YgVmVjMykge1xuICAgICAgdGhpcy5zYyA9IHNjXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2MgPSBuZXcgVmVjMygxLCAxLCAxKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBzdGF0ZSBvZiB0aGUgWGZvIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHtWZWMzfSB0ciAtIFRoZSB0cmFuc2xhdGlvbiB2YWx1ZS5cbiAgICogQHBhcmFtIHtRdWF0fSBvcmkgLSBUaGUgb3JpZW50YXRpb24gdmFsdWUuXG4gICAqIEBwYXJhbSB7VmVjM30gc2MgLSBUaGUgc2NhbGluZyB2YWx1ZS5cbiAgICovXG4gIHNldCh0ciwgb3JpLCBzYyA9IHVuZGVmaW5lZCkge1xuICAgIHRoaXMudHIgPSB0clxuICAgIHRoaXMub3JpID0gb3JpXG4gICAgaWYgKHNjIGluc3RhbmNlb2YgVmVjMykgdGhpcy5zYyA9IHNjXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgc3RhdGUgb2YgdGhlIFhmbyBvYmplY3QgdXNpbmcgYW5vdGhlciBYZm8gb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0ge1hmb30gb3RoZXIgLSBUaGUgb3RoZXIgWGZvIHRvIHNldCBmcm9tLlxuICAgKi9cbiAgc2V0RnJvbU90aGVyKG90aGVyKSB7XG4gICAgdGhpcy50ciA9IG90aGVyLnRyXG4gICAgdGhpcy5vcmkgPSBvdGhlci5vcmlcbiAgICB0aGlzLnNjID0gb3RoZXIuc2NcbiAgfVxuXG4gIC8qKlxuICAgKiBWZXJpZmllcyB0aGF0IHRoZSBYZm8gb2JqZWN0IGlzIGFuIGBpZGVudGl0eWAsIGNoZWNraW5nIHRoYXQgdGhlIHRyYW5zbGF0aW9uLCBvcmllbnRhdGlvbiBhbmQgc2NhbGluZyBhdHRyaWJ1dGVzIGFyZSBpbiB0aGVpciBpbml0aWFsIHN0YXRlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBpc0lkZW50aXR5KCkge1xuICAgIHJldHVybiB0aGlzLnRyLmlzTnVsbCgpICYmIHRoaXMub3JpLmlzSWRlbnRpdHkoKSAmJiB0aGlzLnNjLmlzMTExKClcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhpcyBWZWMzIGNvbnRhaW5zIHRoZSBzYW1lIHZhbHVlcyBhcyB0aGUgb3RoZXIgVmVjMy5cbiAgICpcbiAgICogQHBhcmFtIHtWZWMzfSBvdGhlciAtIFRoZSBvdGhlciBWZWMzIHRvIGNvbXBhcmUgd2l0aC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gLSBSZXR1cm5zIGB0cnVlYCBpZiBhcmUgdGhlIHNhbWUgVmVjdG9yLCBvdGhlcndpc2UsIGBmYWxzZWAuXG4gICAqL1xuICBpc0VxdWFsKG90aGVyKSB7XG4gICAgcmV0dXJuIHRoaXMudHIuaXNFcXVhbChvdGhlci50cikgJiYgdGhpcy5vcmkuaXNFcXVhbChvdGhlci5vcmkpICYmIHRoaXMuc2MuaXNFcXVhbChvdGhlci5zYylcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBWZWMyIGlzIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgYXMgb3RoZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjM30gb3RoZXIgLSBUaGUgb3RoZXIgVmVjMyB0byBjb21wYXJlIHdpdGguXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwcmVjaXNpb24gLSBUaGUgcHJlY2lzaW9uIHRvIHdoaWNoIHRoZSB2YWx1ZXMgbXVzdCBtYXRjaC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gLSBSZXR1cm5zIHRydWUgb3IgZmFsc2UuXG4gICAqL1xuICBhcHByb3hFcXVhbChvdGhlciwgcHJlY2lzaW9uID0gTnVtYmVyLkVQU0lMT04pIHtcbiAgICByZXR1cm4gKFxuICAgICAgKG90aGVyLnRyID8gdGhpcy50ci5hcHByb3hFcXVhbChvdGhlci50ciwgcHJlY2lzaW9uKSA6IHRydWUpICYmXG4gICAgICAob3RoZXIub3JpID8gdGhpcy5vcmkuYXBwcm94RXF1YWwob3RoZXIub3JpLCBwcmVjaXNpb24pIDogdHJ1ZSkgJiZcbiAgICAgIChvdGhlci5zYyA/IHRoaXMuc2MuYXBwcm94RXF1YWwob3RoZXIuc2MsIHByZWNpc2lvbikgOiB0cnVlKVxuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgc2V0TG9va0F0IG1ldGhvZC5cbiAgICogQHBhcmFtIHtWZWMzfSBwb3MgLSBUaGUgcG9zaXRpb24gdmFsdWUuXG4gICAqIEBwYXJhbSB7VmVjM30gdGFyZ2V0IC0gVGhlIHRhcmdldCB2YWx1ZS5cbiAgICogQHBhcmFtIHtWZWMzfSB1cCAtIFRoZSB1cCB2YWx1ZS5cbiAgICovXG4gIHNldExvb2tBdChwb3MsIHRhcmdldCwgdXApIHtcbiAgICAvLyBOb3RlOiBXZSBsb29rIGFsb25nIHRoZSAteiBheGlzLiBOZWdhdGUgdGhlIGRpcmVjdGlvbi5cbiAgICBjb25zdCBkaXIgPSBwb3Muc3VidHJhY3QodGFyZ2V0KVxuICAgIGNvbnN0IGRpckxlbiA9IGRpci5sZW5ndGgoKVxuICAgIGlmIChkaXJMZW4gPCBOdW1iZXIuRVBTSUxPTikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGRpcicpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdGhpcy5vcmkuc2V0RnJvbURpcmVjdGlvbkFuZFVwdmVjdG9yKGRpciwgdXApXG4gICAgdGhpcy50ciA9IHBvc1xuICB9XG5cbiAgLyoqXG4gICAqIE11bHRpcGxpZXMgdHdvIFhmbyB0cmFuc2Zvcm1zLlxuICAgKlxuICAgKiBAcGFyYW0ge1hmb30geGZvIC0gVGhlIHhmbyB0byBtdWx0aXBseSB3aXRoLlxuICAgKiBAcmV0dXJuIHtYZm99IC0gUmV0dXJucyBhbiBYZm8uXG4gICAqL1xuICBtdWx0aXBseSh4Zm8pIHtcbiAgICBsZXQgdGhpc19zYyA9IHRoaXMuc2NcbiAgICBpZiAodGhpcy5zYy54ICE9IHRoaXMuc2MueSB8fCB0aGlzLnNjLnggIT0gdGhpcy5zYy56KSB7XG4gICAgICB0aGlzX3NjID0geGZvLm9yaS5yb3RhdGVWZWMzKHRoaXMuc2MpXG4gICAgICBpZiAoTWF0aC5zaWduKHRoaXNfc2MueCkgIT0gTWF0aC5zaWduKHRoaXMuc2MueCkpIHRoaXNfc2MueCA9IC10aGlzX3NjLnhcbiAgICAgIGlmIChNYXRoLnNpZ24odGhpc19zYy55KSAhPSBNYXRoLnNpZ24odGhpcy5zYy55KSkgdGhpc19zYy55ID0gLXRoaXNfc2MueVxuICAgICAgaWYgKE1hdGguc2lnbih0aGlzX3NjLnopICE9IE1hdGguc2lnbih0aGlzLnNjLnopKSB0aGlzX3NjLnogPSAtdGhpc19zYy56XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBYZm8oXG4gICAgICB0aGlzLnRyLmFkZCh0aGlzLm9yaS5yb3RhdGVWZWMzKHRoaXNfc2MubXVsdGlwbHkoeGZvLnRyKSkpLFxuICAgICAgdGhpcy5vcmkubXVsdGlwbHkoeGZvLm9yaSksXG4gICAgICB0aGlzX3NjLm11bHRpcGx5KHhmby5zYylcbiAgICApXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGludmVyc2Ugb2YgdGhlIFhmbyBvYmplY3QsIGJ1dCByZXR1cm5zLiB0aGUgcmVzdWx0IGFzIGEgbmV3IFhmby5cbiAgICpcbiAgICogQHJldHVybiB7WGZvfSAtIFJldHVybnMgYSBuZXcgWGZvLlxuICAgKi9cbiAgaW52ZXJzZSgpIHtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgWGZvKClcbiAgICByZXN1bHQub3JpID0gdGhpcy5vcmkuaW52ZXJzZSgpXG5cbiAgICBpZiAodGhpcy5zYy54ICE9IHRoaXMuc2MueSB8fCB0aGlzLnNjLnggIT0gdGhpcy5zYy56KSB7XG4gICAgICAvLyBOb3RlOiB0aGUgZm9sbG93aW5nIGNvZGUgaGFzIG5vdCBiZWVuIHRlc3RlZCBhbmRcbiAgICAgIC8vIG1heSBub3QgYmUgcXVpdGUgY29ycmVjdC4gV2UgbmVlZCB0byBzZXR1cFxuICAgICAgLy8gdW5pdCB0ZXN0cyBmb3IgdGhpcyBraW5kIG9mIHNhbXBsZS5cbiAgICAgIC8vIEFuIGV4YW1wbGUgd291bGQgYmUgdG8gbGF5IG91dCBzb21lIGJveGVzIG9uIGRpZmZlcmVudCByb3RhdGlvbnNcbiAgICAgIC8vIGFuZCB3aXRoIG5vbi11bmlmb3JtIHNjYWxlLiBUaGVuIHBhcmVudCB0aGVtIHRvZ2V0aGVyLiBJZiB0aGV5XG4gICAgICAvLyByZW1haW4gc3RhdGlvbmFyeSwgYWZ0ZXIgcGFyZW50aW5nLCB0aGVuIHRoaXMgbWF0aCBpcyBjb3JyZWN0LlxuICAgICAgcmVzdWx0LnNjID0gcmVzdWx0Lm9yaS5yb3RhdGVWZWMzKHRoaXMuc2MpXG4gICAgICBpZiAoTWF0aC5zaWduKHJlc3VsdC5zYy54KSAhPSBNYXRoLnNpZ24odGhpcy5zYy54KSkgcmVzdWx0LnNjLnggPSAtcmVzdWx0LnNjLnhcbiAgICAgIGlmIChNYXRoLnNpZ24ocmVzdWx0LnNjLnkpICE9IE1hdGguc2lnbih0aGlzLnNjLnkpKSByZXN1bHQuc2MueSA9IC1yZXN1bHQuc2MueVxuICAgICAgaWYgKE1hdGguc2lnbihyZXN1bHQuc2MueikgIT0gTWF0aC5zaWduKHRoaXMuc2MueikpIHJlc3VsdC5zYy56ID0gLXJlc3VsdC5zYy56XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5zYyA9IHRoaXMuc2MuaW52ZXJzZSgpXG4gICAgfVxuICAgIHJlc3VsdC50ciA9IHJlc3VsdC5vcmkucm90YXRlVmVjMyh0aGlzLnRyLm5lZ2F0ZSgpLm11bHRpcGx5KHJlc3VsdC5zYykpXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybXMgWGZvIG9iamVjdCB1c2luZyBhIGBWZWMzYCBvYmplY3QuIEZpcnN0IHNjYWxpbmcgaXQsIHRoZW4gcm90YXRpbmcgYW5kIGZpbmFsbHkgYWRkaW5nIHRoZSByZXN1bHQgdG8gY3VycmVudCB0cmFuc2xhdGlvbiBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjM30gdmVjMyAtIFRoZSB2ZWMzIHZhbHVlLlxuICAgKiBAcmV0dXJuIHtWZWMzfSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICB0cmFuc2Zvcm1WZWMzKHZlYzMpIHtcbiAgICByZXR1cm4gdGhpcy50ci5hZGQodGhpcy5vcmkucm90YXRlVmVjMyh0aGlzLnNjLm11bHRpcGx5KHZlYzMpKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGlzIFhmbyB0byBhIE1hdDQgKGEgNHg0IG1hdHJpeCkuXG4gICAqXG4gICAqIEByZXR1cm4ge01hdDR9IC0gUmV0dXJucyBhIG5ldyBNYXQ0LlxuICAgKi9cbiAgdG9NYXQ0KCkge1xuICAgIGNvbnN0IHNjbCA9IG5ldyBNYXQ0KHRoaXMuc2MueCwgMCwgMCwgMCwgMCwgdGhpcy5zYy55LCAwLCAwLCAwLCAwLCB0aGlzLnNjLnosIDAsIDAsIDAsIDAsIDEuMClcblxuICAgIGNvbnN0IHJvdCA9IHRoaXMub3JpLnRvTWF0NCgpXG5cbiAgICBjb25zdCB0cm4gPSBuZXcgTWF0NCgpXG4gICAgdHJuLnRyYW5zbGF0aW9uID0gdGhpcy50clxuXG4gICAgcmV0dXJuIHRybi5tdWx0aXBseShyb3QpLm11bHRpcGx5KHNjbClcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBzdGF0ZSBvZiB0aGUgWGZvIG9iamVjdCB1c2luZyBNYXQ0LlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBAcGFyYW0ge01hdDR9IG1hdDQgLSBUaGUgbWF0NCB2YWx1ZS5cbiAgICovXG4gIGZyb21NYXQ0KG1hdDQpIHtcbiAgICB0aGlzLnNldEZyb21NYXQ0KG1hdDQpXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgc3RhdGUgb2YgdGhlIFhmbyBvYmplY3QgdXNpbmcgTWF0NC5cbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQHBhcmFtIHtNYXQ0fSBtYXQ0IC0gVGhlIG1hdDQgdmFsdWUuXG4gICAqL1xuICBzZXRGcm9tTWF0NChtYXQ0KSB7XG4gICAgdGhpcy50ciA9IG1hdDQudHJhbnNsYXRpb25cbiAgICB0aGlzLm9yaS5zZXRGcm9tTWF0NChtYXQ0KVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHN0YXRlIG9mIHRoZSBYZm8gb2JqZWN0IHVzaW5nIGFuIGBGbG9hdDMyYXJyYXlgLlxuICAgKiA8YnI+XG4gICAqICoqTm90ZToqKiBZb3UgY2FuIHNldCB0aGUgYnl0ZU9mZnNldCBpbiB5b3VyIGBGbG9hdDMyYXJyYXlgIG9iamVjdFxuICAgKlxuICAgKiBAcGFyYW0ge0Zsb2F0MzJBcnJheX0gZmxvYXQzMmFycmF5IC0gVGhlIGZsb2F0MzJhcnJheSB2YWx1ZS5cbiAgICovXG4gIHNldEZyb21GbG9hdDMyQXJyYXkoZmxvYXQzMmFycmF5KSB7XG4gICAgaWYgKGZsb2F0MzJhcnJheS5sZW5ndGggPT0gNykge1xuICAgICAgdGhpcy50ciA9IG5ldyBWZWMzKGZsb2F0MzJhcnJheS5idWZmZXIsIGZsb2F0MzJhcnJheS5ieXRlT2Zmc2V0KVxuICAgICAgdGhpcy5vcmkgPSBuZXcgUXVhdChmbG9hdDMyYXJyYXkuYnVmZmVyLCBmbG9hdDMyYXJyYXkuYnl0ZU9mZnNldCArIDEyKVxuICAgICAgdGhpcy5zYyA9IG5ldyBWZWMzKDEsIDEsIDEpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKGZsb2F0MzJhcnJheS5sZW5ndGggPT0gOCkge1xuICAgICAgdGhpcy50ciA9IG5ldyBWZWMzKGZsb2F0MzJhcnJheS5idWZmZXIsIGZsb2F0MzJhcnJheS5ieXRlT2Zmc2V0KVxuICAgICAgdGhpcy5vcmkgPSBuZXcgUXVhdChmbG9hdDMyYXJyYXkuYnVmZmVyLCBmbG9hdDMyYXJyYXkuYnl0ZU9mZnNldCArIDEyKVxuICAgICAgY29uc3Qgc2NsID0gZmxvYXQzMmFycmF5WzddXG4gICAgICB0aGlzLnNjID0gbmV3IFZlYzMoc2NsLCBzY2wsIHNjbClcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAoZmxvYXQzMmFycmF5Lmxlbmd0aCA9PSAxMCkge1xuICAgICAgdGhpcy50ciA9IG5ldyBWZWMzKGZsb2F0MzJhcnJheS5idWZmZXIsIGZsb2F0MzJhcnJheS5ieXRlT2Zmc2V0KVxuICAgICAgdGhpcy5vcmkgPSBuZXcgUXVhdChmbG9hdDMyYXJyYXkuYnVmZmVyLCBmbG9hdDMyYXJyYXkuYnl0ZU9mZnNldCArIDEyKVxuICAgICAgdGhpcy5zYyA9IG5ldyBWZWMzKGZsb2F0MzJhcnJheS5idWZmZXIsIGZsb2F0MzJhcnJheS5ieXRlT2Zmc2V0ICsgMjEpXG4gICAgICByZXR1cm5cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xvbmVzIHRoaXMgWGZvIGFuZCByZXR1cm5zIGEgbmV3IFhmby5cbiAgICpcbiAgICogQHJldHVybiB7WGZvfSAtIFJldHVybnMgYSBuZXcgWGZvLlxuICAgKi9cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBYZm8odGhpcy50ci5jbG9uZSgpLCB0aGlzLm9yaS5jbG9uZSgpLCB0aGlzLnNjLmNsb25lKCkpXG4gIH1cblxuICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFN0YXRpYyBNZXRob2RzXG5cbiAgLyoqXG4gICAqIEZhY3RvcnkgZnVuY3Rpb24gdG8gY3JlYXRlcyBhIG5ldyBYZm8uXG4gICAqIEBwYXJhbSB7Li4ub2JqZWN0fSAuLi5hcmdzIC0gVGhlIC4uLmFyZ3MgcGFyYW0uXG4gICAqIEByZXR1cm4ge1hmb30gLSByZXR1cm5zIGEgbmV3IFhmby5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBjcmVhdGUoLi4uYXJncykge1xuICAgIHJldHVybiBuZXcgWGZvKC4uLmFyZ3MpXG4gIH1cblxuICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gUGVyc2lzdGVuY2VcblxuICAvKipcbiAgICogVGhlIHRvSlNPTiBtZXRob2QgZW5jb2RlcyB0aGlzIHR5cGUgYXMgYSBqc29uIG9iamVjdCBmb3IgcGVyc2lzdGVuY2UuXG4gICAqXG4gICAqIEByZXR1cm4ge29iamVjdH0gLSBUaGUganNvbiBvYmplY3QuXG4gICAqL1xuICB0b0pTT04oKSB7XG4gICAgY29uc3QgaiA9IHtcbiAgICAgIHRyOiB0aGlzLnRyLnRvSlNPTigpLFxuICAgICAgb3JpOiB0aGlzLm9yaS50b0pTT04oKSxcbiAgICB9XG4gICAgaWYgKCF0aGlzLnNjLmlzMTExKCkpIGouc2MgPSB0aGlzLnNjLnRvSlNPTigpXG4gICAgcmV0dXJuIGpcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZnJvbUpTT04gbWV0aG9kIGRlY29kZXMgYSBqc29uIG9iamVjdCBmb3IgdGhpcyB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gaiAtIFRoZSBqc29uIG9iamVjdC5cbiAgICovXG4gIGZyb21KU09OKGopIHtcbiAgICB0aGlzLnRyLmZyb21KU09OKGoudHIpXG4gICAgdGhpcy5vcmkuZnJvbUpTT04oai5vcmkpXG4gICAgaWYgKGouc2MpIHtcbiAgICAgIHRoaXMuc2MuZnJvbUpTT04oai5zYylcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTG9hZHMgdGhlIHN0YXRlIG9mIHRoZSB2YWx1ZSBmcm9tIGEgYmluYXJ5IHJlYWRlci5cbiAgICpcbiAgICogQHBhcmFtIHtCaW5SZWFkZXJ9IHJlYWRlciAtIFRoZSByZWFkZXIgdmFsdWUuXG4gICAqL1xuICByZWFkQmluYXJ5KHJlYWRlcikge1xuICAgIHRoaXMudHIucmVhZEJpbmFyeShyZWFkZXIpXG4gICAgdGhpcy5vcmkucmVhZEJpbmFyeShyZWFkZXIpXG4gICAgdGhpcy5zYy5yZWFkQmluYXJ5KHJlYWRlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZnJvbUpTT04gbWV0aG9kIGRlY29kZXMgYSBqc29uIG9iamVjdCBmb3IgdGhpcyB0eXBlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuZXctY2FwXG4gICAgcmV0dXJuIFN0cmluZ0Z1bmN0aW9ucy5zdHJpbmdpZnlKU09OV2l0aEZpeGVkUHJlY2lzaW9uKHRoaXMudG9KU09OKCkpXG4gIH1cbn1cblxuUmVnaXN0cnkucmVnaXN0ZXIoJ1hmbycsIFhmbylcblxuZXhwb3J0IHsgWGZvIH1cbiIsImltcG9ydCB7IFN0cmluZ0Z1bmN0aW9ucyB9IGZyb20gJy4uL1V0aWxpdGllcy9TdHJpbmdGdW5jdGlvbnMnXG5cbmltcG9ydCB7IFZlYzIgfSBmcm9tICcuL1ZlYzInXG5pbXBvcnQgeyBSZWdpc3RyeSB9IGZyb20gJy4uL1JlZ2lzdHJ5J1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBib3ggaW4gMkQgc3BhY2UuIE5lZWRpbmcgdHdvIFZlYzIgdmVjdG9ycyBkZXNjcmliaW5nIHRoZSBjb3JuZXJzXG4gKi9cbmNsYXNzIEJveDIge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIEJveDIgb2JqZWN0IHVzaW5nIFZlYzJzLlxuICAgKiBJbiBjYXNlIHRoZSBwYXJhbWV0ZXJzIGFyZSBub3QgcGFzc2VkIGJ5LCB0aGVpciB2YWx1ZXMgYXJlIHByZS1kZWZpbmVkOlxuICAgKiA8YnI+XG4gICAqIHAwIGlzIGEgVmVjMiB3aXRoIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9OdW1iZXIvUE9TSVRJVkVfSU5GSU5JVFl8YE51bWJlci5QT1NJVElWRV9JTkZJTklUWWB9XG4gICAqIDxicj5cbiAgICogcDEgaXMgYSBWZWMyIHdpdGgge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL051bWJlci9ORUdBVElWRV9JTkZJTklUWXxgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZYH1cbiAgICpcbiAgICogQHBhcmFtIHtWZWMyfSBwMCAtIEEgcG9pbnQgcmVwcmVzZW50aW5nIHRoZSBjb3JuZXJzIG9mIGEgMkQgYm94LlxuICAgKiBAcGFyYW0ge1ZlYzJ9IHAxIC0gQSBwb2ludCByZXByZXNlbnRpbmcgdGhlIGNvcm5lcnMgb2YgYSAyRCBib3guXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwMCA9IHVuZGVmaW5lZCwgcDEgPSB1bmRlZmluZWQpIHtcbiAgICBpZiAocDAgaW5zdGFuY2VvZiBWZWMyKSB7XG4gICAgICB0aGlzLnAwID0gcDBcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wMCA9IG5ldyBWZWMyKE51bWJlci5QT1NJVElWRV9JTkZJTklUWSwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKVxuICAgIH1cbiAgICBpZiAocDEgaW5zdGFuY2VvZiBWZWMyKSB7XG4gICAgICB0aGlzLnAxID0gcDFcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wMSA9IG5ldyBWZWMyKE51bWJlci5ORUdBVElWRV9JTkZJTklUWSwgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGJvdGggY29ybmVyIHBvaW50c1xuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzJ9IHAwIC0gQSBwb2ludCByZXByZXNlbnRpbmcgdGhlIGNvcm5lcnMgb2YgYSAyRCBib3guXG4gICAqIEBwYXJhbSB7VmVjMn0gcDEgLSBBIHBvaW50IHJlcHJlc2VudGluZyB0aGUgY29ybmVycyBvZiBhIDJEIGJveC5cbiAgICovXG4gIHNldChwMCwgcDEpIHtcbiAgICB0aGlzLnAwID0gcDBcbiAgICB0aGlzLnAxID0gcDFcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldHMgdGhlIGJveDIgYmFjayB0byBhbiB1bmluaXRpYWxpemVkIHN0YXRlLlxuICAgKlxuICAgKiBAc2VlIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9OdW1iZXIvUE9TSVRJVkVfSU5GSU5JVFl8YE51bWJlci5QT1NJVElWRV9JTkZJTklUWWB9XG4gICAqIGFuZCB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTnVtYmVyL05FR0FUSVZFX0lORklOSVRZfGBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFlgfVxuICAgKi9cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5wMC54ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZXG4gICAgdGhpcy5wMS54ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZXG4gICAgdGhpcy5wMC55ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZXG4gICAgdGhpcy5wMS55ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGJveCBoYXMgYmVlbiBleHBhbmRlZCB0byBjb250YWluIGEgcG9pbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMucDAueCAhPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgJiZcbiAgICAgIHRoaXMucDEueCAhPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkgJiZcbiAgICAgIHRoaXMucDAueSAhPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgJiZcbiAgICAgIHRoaXMucDEueSAhPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFlcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogRXhwYW5kcyB0aGUgQm94MiB0byBjb250YWluIHRoZSBuZXcgcG9pbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7VmVjMn0gcG9pbnQgLSBBIHBvaW50IHJlcHJlc2VudHMgdGhlIGNvcm5lcnMgb2YgYSAyRCBib3guXG4gICAqL1xuICBhZGRQb2ludChwb2ludCkge1xuICAgIGlmICh0aGlzLnAwLnggPT0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIHx8IHBvaW50LnggPCB0aGlzLnAwLngpIHRoaXMucDAueCA9IHBvaW50LnhcbiAgICBpZiAodGhpcy5wMC55ID09IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSB8fCBwb2ludC55IDwgdGhpcy5wMC55KSB0aGlzLnAwLnkgPSBwb2ludC55XG5cbiAgICBpZiAodGhpcy5wMS55ID09IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSB8fCBwb2ludC54ID4gdGhpcy5wMS54KSB0aGlzLnAxLnggPSBwb2ludC54XG4gICAgaWYgKHRoaXMucDEueSA9PSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkgfHwgcG9pbnQueSA+IHRoaXMucDEueSkgdGhpcy5wMS55ID0gcG9pbnQueVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUgZGlhZ29uYWwgb2YgdGhlIGJveC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFJldHVybnMgdGhlIGRpc3RhbmNlLlxuICAgKi9cbiAgc2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wMS5kaXN0YW5jZVRvKHRoaXMucDApXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGlhZ29uYWwgdmVjdG9yIG9mIHRoZSBCPWJveCBmcm9tIHAwIHRvIHAxLlxuICAgKlxuICAgKiBAcmV0dXJuIHtWZWMzfSAtIFJldHVybnMgYSBWZWMzLlxuICAgKi9cbiAgZGlhZ29uYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMucDEuc3VidHJhY3QodGhpcy5wMClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjZW50ZXIgcG9pbnQgb2YgYSBCb3gyLlxuICAgKlxuICAgKiBAcmV0dXJuIHtWZWMyfSAtIFJldHVybnMgYSBWZWMyLlxuICAgKi9cbiAgY2VudGVyKCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucDEuc3VidHJhY3QodGhpcy5wMClcbiAgICByZXN1bHQuc2NhbGVJblBsYWNlKDAuNSlcbiAgICByZXN1bHQuYWRkSW5QbGFjZSh0aGlzLnAwKVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gU3RhdGljIE1ldGhvZHNcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBCb3gyLlxuICAgKiBAcGFyYW0gey4uLm9iamVjdH0gLi4uYXJncyAtIFRoZSAuLi5hcmdzIHBhcmFtLlxuICAgKiBAcmV0dXJuIHtCb3gyfSAtIFJldHVybnMgYSBuZXcgQm94Mi5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBjcmVhdGUoLi4uYXJncykge1xuICAgIHJldHVybiBuZXcgQm94MiguLi5hcmdzKVxuICB9XG5cbiAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBQZXJzaXN0ZW5jZVxuXG4gIC8qKlxuICAgKiBFbmNvZGVzIGBCb3gyYCBDbGFzcyBhcyBhIEpTT04gb2JqZWN0IGZvciBwZXJzaXN0ZW5jZS5cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fSAtIFRoZSBqc29uIG9iamVjdC5cbiAgICovXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcDA6IHRoaXMucDAudG9KU09OKCksXG4gICAgICBwMTogdGhpcy5wMS50b0pTT04oKSxcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbHMgYHRvSlNPTmAgbWV0aG9kIGFuZCBzdHJpbmdpZmllcyBpdC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICB0b1N0cmluZygpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbmV3LWNhcFxuICAgIHJldHVybiBTdHJpbmdGdW5jdGlvbnMuc3RyaW5naWZ5SlNPTldpdGhGaXhlZFByZWNpc2lvbih0aGlzLnRvSlNPTigpKVxuICB9XG59XG5cblJlZ2lzdHJ5LnJlZ2lzdGVyKCdCb3gyJywgQm94MilcblxuZXhwb3J0IHsgQm94MiB9XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuZXctY2FwICovXG5pbXBvcnQgeyBTdHJpbmdGdW5jdGlvbnMgfSBmcm9tICcuLi9VdGlsaXRpZXMvU3RyaW5nRnVuY3Rpb25zJ1xuaW1wb3J0IHsgQXR0clZhbHVlIH0gZnJvbSAnLi9BdHRyVmFsdWUuanMnXG5pbXBvcnQgeyBSZWdpc3RyeSB9IGZyb20gJy4uL1JlZ2lzdHJ5J1xuaW1wb3J0IHsgVmVjMyB9IGZyb20gJy4vVmVjMy5qcydcblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSBtYXRoZW1hdGljYWwgc3BoZXJlLCBhcyBvcHBvc2VkIHRvIHRoZSBTcGhlcmUgY2xhc3MgZGVyaXZlZCBmcm9tIFByb2NlZHVyYWxNZXNoLlxuICpcbiAqIEBleHRlbmRzIEF0dHJWYWx1ZVxuICovXG5jbGFzcyBTcGhlcmVUeXBlIGV4dGVuZHMgQXR0clZhbHVlIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIHNwaGVyZS5cbiAgICogQHBhcmFtIHtWZWMzfSBwb3MgLSBUaGUgcG9zaXRpb24gb2YgdGhlIHNwaGVyZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1cyAtIFRoZSByYWRpdXMgb2YgdGhlIHNwaGVyZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHBvcywgcmFkaXVzID0gMCkge1xuICAgIHN1cGVyKClcbiAgICBpZiAocG9zIGluc3RhbmNlb2YgVmVjMykge1xuICAgICAgdGhpcy5wb3MgPSBwb3NcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wb3MgPSBuZXcgVmVjMygpXG4gICAgfVxuICAgIHRoaXMucmFkaXVzID0gcmFkaXVzXG4gIH1cblxuICAvKipcbiAgICogQ2xvbmVzIHRoaXMgc3BoZXJlIGFuZCByZXR1cm5zIGEgbmV3IHNwaGVyZS5cbiAgICpcbiAgICogQHJldHVybiB7U3BoZXJlfSAtIFJldHVybnMgYSBuZXcgc3BoZXJlLlxuICAgKi9cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBTcGhlcmUodGhpcy5wb3MuY2xvbmUoKSwgdGhpcy5yYWRpdXMpXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoaXMgc3BoZXJlIGludGVyc2VjdHMgYSBib3guXG4gICAqXG4gICAqIEBwYXJhbSB7Qm94M30gYm94IC0gVGhlIGJveCB2YWx1ZS5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgaW50ZXJzZWN0c0JveChib3gpIHtcbiAgICByZXR1cm4gYm94LmludGVyc2VjdHNTcGhlcmUodGhpcylcbiAgfVxuXG4gIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBQZXJzaXN0ZW5jZVxuXG4gIC8qKlxuICAgKiBUaGUgdG9KU09OIG1ldGhvZCBlbmNvZGVzIHRoaXMgdHlwZSBhcyBhIGpzb24gb2JqZWN0IGZvciBwZXJzaXN0ZW5jZS5cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fSAtIFRoZSBqc29uIG9iamVjdC5cbiAgICovXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcG9zOiB0aGlzLnBvcy50b0pTT04oKSxcbiAgICAgIHJhZGl1czogdGhpcy5yYWRpdXMsXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIGB0b0pTT05gIG1ldGhvZCBhbmQgc3RyaW5naWZpZXMgaXQuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIFN0cmluZ0Z1bmN0aW9ucy5zdHJpbmdpZnlKU09OV2l0aEZpeGVkUHJlY2lzaW9uKHRoaXMudG9KU09OKCkpXG4gIH1cblxuICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFN0YXRpYyBNZXRob2RzXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgc3BoZXJlLlxuICAgKlxuICAgKiBAcGFyYW0gey4uLm9iamVjdH0gLi4uYXJncyAtIFRoZSAuLi5hcmdzIHBhcmFtLlxuICAgKiBAcmV0dXJuIHtTcGhlcmV9IC0gUmV0dXJucyBhIG5ldyBzcGhlcmUuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gbmV3IFNwaGVyZSguLi5hcmdzKVxuICB9XG59XG5cblJlZ2lzdHJ5LnJlZ2lzdGVyKCdTcGhlcmVUeXBlJywgU3BoZXJlVHlwZSlcblxuZXhwb3J0IHsgU3BoZXJlVHlwZSB9XG4iLCJpbXBvcnQgeyBTdHJpbmdGdW5jdGlvbnMgfSBmcm9tICcuLi9VdGlsaXRpZXMvU3RyaW5nRnVuY3Rpb25zJ1xuaW1wb3J0IHsgTWF0aEZ1bmN0aW9ucyB9IGZyb20gJy4uL1V0aWxpdGllcy9NYXRoRnVuY3Rpb25zJ1xuaW1wb3J0IHsgVmVjMyB9IGZyb20gJy4vVmVjMy5qcydcbmltcG9ydCB7IE1hdDQgfSBmcm9tICcuL01hdDQuanMnXG5pbXBvcnQgeyBTcGhlcmVUeXBlIH0gZnJvbSAnLi9TcGhlcmVUeXBlLmpzJ1xuaW1wb3J0IHsgUmVnaXN0cnkgfSBmcm9tICcuLi9SZWdpc3RyeSdcblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSBib3ggaW4gM0Qgc3BhY2UuXG4gKiBSZXByZXNlbnRzIGEgYm94IGluIDNEIHNwYWNlIGRlZmluZWQgYnkgdHdvIFZlYzMgdmFsdWVzIHdoaWNoIGRlZmluZSBvcHBvc2luZyBjb3JuZXJzIG9mIHRoZSBib3guXG4gKi9cbmNsYXNzIEJveDMge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIEJveDMgb2JqZWN0IHVzaW5nIFZlYzNzLlxuICAgKiBJbiBjYXNlIHRoZSBwYXJhbWV0ZXJzIGFyZSBub3QgcGFzc2VkIGJ5LCB0aGVpciB2YWx1ZXMgYXJlIHByZS1kZWZpbmVkOlxuICAgKiA8YnI+XG4gICAqIHAwIGlzIGEgVmVjMiB3aXRoIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9OdW1iZXIvUE9TSVRJVkVfSU5GSU5JVFl8YE51bWJlci5QT1NJVElWRV9JTkZJTklUWWB9XG4gICAqIDxicj5cbiAgICogcDEgaXMgYSBWZWMyIHdpdGgge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL051bWJlci9ORUdBVElWRV9JTkZJTklUWXxgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZYH1cbiAgICpcbiAgICogQHBhcmFtIHtWZWMzfSBwMCAtIEEgcG9pbnQgcmVwcmVzZW50aW5nIHRoZSBjb3JuZXJzIG9mIGEgM0QgYm94LlxuICAgKiBAcGFyYW0ge1ZlYzN9IHAxIC0gQSBwb2ludCByZXByZXNlbnRpbmcgdGhlIGNvcm5lcnMgb2YgYSAzRCBib3guXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwMCA9IHVuZGVmaW5lZCwgcDEgPSB1bmRlZmluZWQpIHtcbiAgICBpZiAocDAgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkpIHtcbiAgICAgIHRoaXMuc2V0RnJvbUZsb2F0MzJBcnJheShwMClcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAocDAgaW5zdGFuY2VvZiBWZWMzKSB7XG4gICAgICB0aGlzLnAwID0gcDBcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wMCA9IG5ldyBWZWMzKE51bWJlci5QT1NJVElWRV9JTkZJTklUWSwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpXG4gICAgfVxuICAgIGlmIChwMSBpbnN0YW5jZW9mIFZlYzMpIHtcbiAgICAgIHRoaXMucDEgPSBwMVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnAxID0gbmV3IFZlYzMoTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLCBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksIE51bWJlci5ORUdBVElWRV9JTkZJTklUWSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0dGVyIGZvciB0aGUgbG93ZXIgKHgsIHksIHopIGJvdW5kYXJ5IG9mIHRoZSBib3guXG4gICAqXG4gICAqIEByZXR1cm4ge1ZlYzN9IC0gUmV0dXJucyB0aGUgbWluaW11bSBWZWMzLlxuICAgKi9cbiAgZ2V0IG1pbigpIHtcbiAgICByZXR1cm4gdGhpcy5wMFxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3IgdGhlIHVwcGVyICh4LCB5LCB6KSBib3VuZGFyeSBvZiB0aGUgYm94LlxuICAgKlxuICAgKiBAcmV0dXJuIHtWZWMzfSAtIFJldHVybnMgdGhlIG1heGltdW0gVmVjMy5cbiAgICovXG4gIGdldCBtYXgoKSB7XG4gICAgcmV0dXJuIHRoaXMucDFcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGJvdGggVmVjMyBwb2ludHNcbiAgICpcbiAgICogQHBhcmFtIHtWZWMzfSBwMCAtIEEgcG9pbnQgcmVwcmVzZW50aW5nIHRoZSBjb3JuZXJzIG9mIGEgM0QgYm94LlxuICAgKiBAcGFyYW0ge1ZlYzN9IHAxIC0gQSBwb2ludCByZXByZXNlbnRpbmcgdGhlIGNvcm5lcnMgb2YgYSAzRCBib3guXG4gICAqL1xuICBzZXQocDAsIHAxKSB7XG4gICAgdGhpcy5wMCA9IHAwXG4gICAgdGhpcy5wMSA9IHAxXG4gIH1cblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBib3gzIGJhY2sgdG8gYW4gdW5pbml0aWFsaXplZCBzdGF0ZS5cbiAgICovXG4gIHJlc2V0KCkge1xuICAgIHRoaXMucDAueCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWVxuICAgIHRoaXMucDAueSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWVxuICAgIHRoaXMucDAueiA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWVxuICAgIHRoaXMucDEueCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWVxuICAgIHRoaXMucDEueSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWVxuICAgIHRoaXMucDEueiA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBib3ggaGFzIGJlZW4gZXhwYW5kZWQgdG8gY29udGFpbiBhIHBvaW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBpc1ZhbGlkKCkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLnAwLnggIT0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZICYmXG4gICAgICB0aGlzLnAxLnggIT0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZICYmXG4gICAgICB0aGlzLnAwLnkgIT0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZICYmXG4gICAgICB0aGlzLnAxLnkgIT0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZICYmXG4gICAgICB0aGlzLnAwLnogIT0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZICYmXG4gICAgICB0aGlzLnAxLnogIT0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIEV4cGFuZHMgdGhlIEJveDMgdG8gY29udGFpbiB0aGUgbmV3IHBvaW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzN9IHBvaW50IC0gQSBwb2ludCByZXByZXNlbnRzIHRoZSBjb3JuZXJzIG9mIGEgM0QgYm94LlxuICAgKi9cbiAgYWRkUG9pbnQocG9pbnQpIHtcbiAgICBpZiAocG9pbnQueCAhPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgJiYgcG9pbnQueCAhPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpIHtcbiAgICAgIGlmIChwb2ludC54IDwgdGhpcy5wMC54KSB0aGlzLnAwLnggPSBwb2ludC54XG4gICAgICBpZiAocG9pbnQueCA+IHRoaXMucDEueCkgdGhpcy5wMS54ID0gcG9pbnQueFxuICAgIH1cbiAgICBpZiAocG9pbnQueSAhPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgJiYgcG9pbnQueSAhPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpIHtcbiAgICAgIGlmIChwb2ludC55IDwgdGhpcy5wMC55KSB0aGlzLnAwLnkgPSBwb2ludC55XG4gICAgICBpZiAocG9pbnQueSA+IHRoaXMucDEueSkgdGhpcy5wMS55ID0gcG9pbnQueVxuICAgIH1cbiAgICBpZiAocG9pbnQueiAhPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgJiYgcG9pbnQueiAhPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpIHtcbiAgICAgIGlmIChwb2ludC56IDwgdGhpcy5wMC56KSB0aGlzLnAwLnogPSBwb2ludC56XG4gICAgICBpZiAocG9pbnQueiA+IHRoaXMucDEueikgdGhpcy5wMS56ID0gcG9pbnQuelxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGBCb3gzYCB0byB0aGlzIGBCb3gzYCwgb2YgdGhlIFhmbyBpbnN0YW5jZSBpcyBwYXNzZWQgaW4gdGhlIHBhcmFtZXRlcnNcbiAgICogaXQgcHJvY2VlZHMgdG8gYXBwbHkgdGhlIHRyYW5zZm9ybSBmb3IgdGhlIFZlYzMuXG4gICAqXG4gICAqIEBwYXJhbSB7Qm94M30gYm94MyAtIEEgM0QgYm94LlxuICAgKiBAcGFyYW0ge1hmb30geGZvIC0gQSAzRCB0cmFuc2Zvcm0uXG4gICAqL1xuICBhZGRCb3gzKGJveDMsIHhmbyA9IHVuZGVmaW5lZCkge1xuICAgIGlmICh4Zm8pIHtcbiAgICAgIC8vIFRyYW5zZm9ybSBlYWNoIGNvcm5lciBvZiB0aGUgQm94MyBpbnRvIHRoZSBuZXcgY29vcmRpbmF0ZSBzeXN0ZW0uXG4gICAgICB0aGlzLmFkZFBvaW50KHhmby50cmFuc2Zvcm1WZWMzKGJveDMucDApKVxuICAgICAgdGhpcy5hZGRQb2ludCh4Zm8udHJhbnNmb3JtVmVjMyhuZXcgVmVjMyhib3gzLnAwLngsIGJveDMucDAueSwgYm94My5wMS56KSkpXG4gICAgICB0aGlzLmFkZFBvaW50KHhmby50cmFuc2Zvcm1WZWMzKG5ldyBWZWMzKGJveDMucDAueCwgYm94My5wMS55LCBib3gzLnAwLnopKSlcbiAgICAgIHRoaXMuYWRkUG9pbnQoeGZvLnRyYW5zZm9ybVZlYzMobmV3IFZlYzMoYm94My5wMS54LCBib3gzLnAwLnksIGJveDMucDAueikpKVxuICAgICAgdGhpcy5hZGRQb2ludCh4Zm8udHJhbnNmb3JtVmVjMyhuZXcgVmVjMyhib3gzLnAwLngsIGJveDMucDEueSwgYm94My5wMS56KSkpXG4gICAgICB0aGlzLmFkZFBvaW50KHhmby50cmFuc2Zvcm1WZWMzKG5ldyBWZWMzKGJveDMucDEueCwgYm94My5wMC55LCBib3gzLnAxLnopKSlcbiAgICAgIHRoaXMuYWRkUG9pbnQoeGZvLnRyYW5zZm9ybVZlYzMobmV3IFZlYzMoYm94My5wMS54LCBib3gzLnAxLnksIGJveDMucDAueikpKVxuICAgICAgdGhpcy5hZGRQb2ludCh4Zm8udHJhbnNmb3JtVmVjMyhib3gzLnAxKSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hZGRQb2ludChib3gzLnAwKVxuICAgICAgdGhpcy5hZGRQb2ludChib3gzLnAxKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhlIGRpYWdvbmFsIG9mIHRoZSBib3guXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSBkaXN0YW5jZS5cbiAgICovXG4gIHNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMucDEuZGlzdGFuY2VUbyh0aGlzLnAwKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRpYWdvbmFsIHZlY3RvciBvZiB0aGUgQj1ib3ggZnJvbSBwMCB0byBwMS5cbiAgICpcbiAgICogQHJldHVybiB7Qm94M30gLSBSZXR1cm5zIGEgQm94My5cbiAgICovXG4gIGRpYWdvbmFsKCkge1xuICAgIHJldHVybiB0aGlzLnAxLnN1YnRyYWN0KHRoaXMucDApXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY2VudGVyIHBvaW50IG9mIGEgQm94My5cbiAgICpcbiAgICogQHJldHVybiB7VmVjM30gLSBSZXR1cm5zIGEgVmVjMy5cbiAgICovXG4gIGNlbnRlcigpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLnAxLnN1YnRyYWN0KHRoaXMucDApXG4gICAgcmVzdWx0LnNjYWxlSW5QbGFjZSgwLjUpXG4gICAgcmVzdWx0LmFkZEluUGxhY2UodGhpcy5wMClcbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgdGhpcyBCb3gzIHRvIGEgTWF0NCAoYSA0eDQgbWF0cml4KS4gVGhlIHJldHVybmVkIG1hdDQgd291bGQgdHJhbnNmb3JtIGEgdW5pdCBjdWJlIGludG8gdGhlIHNoYXBlIG9mIHRoZSBCb3VuZGluZyBib3guXG4gICAqXG4gICAqIEByZXR1cm4ge01hdDR9IC0gUmV0dXJucyBhIG5ldyBNYXQ0LlxuICAgKi9cbiAgdG9NYXQ0KCkge1xuICAgIGNvbnN0IHNjeCA9IHRoaXMucDEueCAtIHRoaXMucDAueFxuICAgIGNvbnN0IHNjeSA9IHRoaXMucDEueSAtIHRoaXMucDAueVxuICAgIGNvbnN0IHNjeiA9IHRoaXMucDEueiAtIHRoaXMucDAuelxuICAgIHJldHVybiBuZXcgTWF0NChzY3gsIDAsIDAsIDAsIDAsIHNjeSwgMCwgMCwgMCwgMCwgc2N6LCAwLCB0aGlzLnAwLngsIHRoaXMucDAueSwgdGhpcy5wMC56LCAxLjApXG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyBhbmQgcmV0dXJucyB0aGUgYm91bmRpbmcgU3BoZXJlIG9mIHRoZSBCb3gzXG4gICAqXG4gICAqIEByZXR1cm4ge1NwaGVyZVR5cGV9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGdldEJvdW5kaW5nU3BoZXJlKCkge1xuICAgIHJldHVybiBuZXcgU3BoZXJlVHlwZSh0aGlzLmNlbnRlcigpLCB0aGlzLmRpYWdvbmFsKCkubGVuZ3RoKCkgKiAwLjUpXG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGlzIEJveDMgaW50ZXJzZWN0cyBhIGdpdmVuIGJveCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtCb3gzfSBib3ggLSBUaGUgYm94IHRvIGNoZWNrIGZvciBpbnRlcnNlY3Rpb24gYWdhaW5zdC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gLSBSZXR1cm5zIHRydWUgaWYgdGhlIHNoYXBlcyBpbnRlcnNlY3QuXG4gICAqL1xuICBpbnRlcnNlY3RzQm94KGJveCkge1xuICAgIC8vIFVzaW5nIDYgc3BsaXR0aW5nIHBsYW5lcyB0byBydWxlIG91dCBpbnRlcnNlY3Rpb25zLlxuICAgIHJldHVybiBib3gubWF4LnggPCB0aGlzLm1pbi54IHx8XG4gICAgICBib3gubWluLnggPiB0aGlzLm1heC54IHx8XG4gICAgICBib3gubWF4LnkgPCB0aGlzLm1pbi55IHx8XG4gICAgICBib3gubWluLnkgPiB0aGlzLm1heC55IHx8XG4gICAgICBib3gubWF4LnogPCB0aGlzLm1pbi56IHx8XG4gICAgICBib3gubWluLnogPiB0aGlzLm1heC56XG4gICAgICA/IGZhbHNlXG4gICAgICA6IHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoaXMgQm94MyBpbnRlcnNlY3RzIGEgc3BoZXJlLlxuICAgKlxuICAgKiBAcGFyYW0ge1NwaGVyZX0gc3BoZXJlIC0gVGhlIHNwaGVyZSB0byBjaGVjayBmb3IgaW50ZXJzZWN0aW9uIGFnYWluc3QuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gUmV0dXJucyB0cnVlIGlmIHRoZSBzaGFwZXMgaW50ZXJzZWN0LlxuICAgKi9cbiAgaW50ZXJzZWN0c1NwaGVyZShzcGhlcmUpIHtcbiAgICAvLyB2YXIgY2xvc2VzdFBvaW50ID0gbmV3IFZlY3RvcjMoKTtcblxuICAgIC8vIEZpbmQgdGhlIHBvaW50IG9uIHRoZSBBQUJCIGNsb3Nlc3QgdG8gdGhlIHNwaGVyZSBjZW50ZXIuXG4gICAgLy8gdGhpcy5jbGFtcFBvaW50KCBzcGhlcmUuY2VudGVyLCBjbG9zZXN0UG9pbnQgKTtcblxuICAgIC8vIElmIHRoYXQgcG9pbnQgaXMgaW5zaWRlIHRoZSBzcGhlcmUsIHRoZSBBQUJCIGFuZCBzcGhlcmUgaW50ZXJzZWN0LlxuICAgIHJldHVybiBjbG9zZXN0UG9pbnQuZGlzdGFuY2VUb1NxdWFyZWQoc3BoZXJlLmNlbnRlcikgPD0gc3BoZXJlLnJhZGl1cyAqIHNwaGVyZS5yYWRpdXNcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoaXMgQm94MyBpbnRlcnNlY3RzIGEgcGxhbmUuXG4gICAqXG4gICAqIEBwYXJhbSB7UGxhbmV9IHBsYW5lIC0gVGhlIHBsYW5lIHRvIGNoZWNrIGZvciBpbnRlcnNlY3Rpb24gYWdhaW5zdC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gLSBSZXR1cm5zIHRydWUgaWYgdGhlIHNoYXBlcyBpbnRlcnNlY3QuXG4gICAqL1xuICBpbnRlcnNlY3RzUGxhbmUocGxhbmUpIHtcbiAgICAvLyBXZSBjb21wdXRlIHRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIGRvdCBwcm9kdWN0IHZhbHVlcy4gSWYgdGhvc2UgdmFsdWVzXG4gICAgLy8gYXJlIG9uIHRoZSBzYW1lIHNpZGUgKGJhY2sgb3IgZnJvbnQpIG9mIHRoZSBwbGFuZSwgdGhlbiB0aGVyZSBpcyBubyBpbnRlcnNlY3Rpb24uXG5cbiAgICBsZXQgbWluXG4gICAgbGV0IG1heFxuXG4gICAgaWYgKHBsYW5lLm5vcm1hbC54ID4gMCkge1xuICAgICAgbWluID0gcGxhbmUubm9ybWFsLnggKiB0aGlzLm1pbi54XG4gICAgICBtYXggPSBwbGFuZS5ub3JtYWwueCAqIHRoaXMubWF4LnhcbiAgICB9IGVsc2Uge1xuICAgICAgbWluID0gcGxhbmUubm9ybWFsLnggKiB0aGlzLm1heC54XG4gICAgICBtYXggPSBwbGFuZS5ub3JtYWwueCAqIHRoaXMubWluLnhcbiAgICB9XG5cbiAgICBpZiAocGxhbmUubm9ybWFsLnkgPiAwKSB7XG4gICAgICBtaW4gKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1pbi55XG4gICAgICBtYXggKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1heC55XG4gICAgfSBlbHNlIHtcbiAgICAgIG1pbiArPSBwbGFuZS5ub3JtYWwueSAqIHRoaXMubWF4LnlcbiAgICAgIG1heCArPSBwbGFuZS5ub3JtYWwueSAqIHRoaXMubWluLnlcbiAgICB9XG5cbiAgICBpZiAocGxhbmUubm9ybWFsLnogPiAwKSB7XG4gICAgICBtaW4gKz0gcGxhbmUubm9ybWFsLnogKiB0aGlzLm1pbi56XG4gICAgICBtYXggKz0gcGxhbmUubm9ybWFsLnogKiB0aGlzLm1heC56XG4gICAgfSBlbHNlIHtcbiAgICAgIG1pbiArPSBwbGFuZS5ub3JtYWwueiAqIHRoaXMubWF4LnpcbiAgICAgIG1heCArPSBwbGFuZS5ub3JtYWwueiAqIHRoaXMubWluLnpcbiAgICB9XG5cbiAgICByZXR1cm4gbWluIDw9IC1wbGFuZS5jb25zdGFudCAmJiBtYXggPj0gLXBsYW5lLmNvbnN0YW50XG4gIH1cblxuICAvKipcbiAgICogQ2xvbmVzIHRoaXMgQm94MyBhbmQgcmV0dXJucyBhIG5ldyBCb3gzLlxuICAgKiBAcmV0dXJuIHtCb3gzfSAtIFJldHVybnMgYSBuZXcgQm94My5cbiAgICovXG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgQm94Myh0aGlzLnAwLmNsb25lKCksIHRoaXMucDEuY2xvbmUoKSlcbiAgfVxuXG4gIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gU3RhdGljIE1ldGhvZHNcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBCb3gzLlxuICAgKiBAcGFyYW0gey4uLm9iamVjdH0gLi4uYXJncyAtIFRoZSAuLi5hcmdzIHBhcmFtLlxuICAgKiBAcmV0dXJuIHtCb3gzfSAtIFJldHVybnMgYSBuZXcgQm94My5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBjcmVhdGUoLi4uYXJncykge1xuICAgIHJldHVybiBuZXcgQm94MyguLi5hcmdzKVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBzaXplSW5CeXRlcyBtZXRob2QuXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhdGljIHNpemVJbkJ5dGVzKCkge1xuICAgIHJldHVybiAyNFxuICB9XG5cbiAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBQZXJzaXN0ZW5jZVxuXG4gIC8qKlxuICAgKiBFbmNvZGVzIGBCb3gzYCBDbGFzcyBhcyBhIEpTT04gb2JqZWN0IGZvciBwZXJzaXN0ZW5jZS5cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fSAtIFRoZSBqc29uIG9iamVjdC5cbiAgICovXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcDA6IHRoaXMucDAudG9KU09OKCksXG4gICAgICBwMTogdGhpcy5wMS50b0pTT04oKSxcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVjb2RlcyBhIEpTT04gb2JqZWN0IHRvIHNldCB0aGUgc3RhdGUgb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGogLSBUaGUganNvbiBvYmplY3QuXG4gICAqL1xuICBmcm9tSlNPTihqKSB7XG4gICAgLy8gV2UgbmVlZCB0byB2ZXJpZnkgdGhhdCBwMCBhbmQgcDEgYXhlcyBhcmUgbnVtZXJpYywgc28gaW4gY2FzZSB0aGV5IGFyZSBub3QsIHdlIHJlc3RvcmUgdGhlbSB0byB0aGVpciBkZWZhdWx0IHZhbHVlcy5cbiAgICAvLyBUaGlzLCBiZWNhdXNlICdJbmZpbml0eScgYW5kICctSW5maW5pdHknIGFyZSBzdHJpbmdpZmllZCBhcyAnbnVsbCcuXG4gICAgY29uc3QgcDAgPSB7XG4gICAgICB4OiBNYXRoRnVuY3Rpb25zLmlzTnVtZXJpYyhqLnAwLngpID8gai5wMC54IDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgICAgeTogTWF0aEZ1bmN0aW9ucy5pc051bWVyaWMoai5wMC55KSA/IGoucDAueSA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICAgIHo6IE1hdGhGdW5jdGlvbnMuaXNOdW1lcmljKGoucDAueikgPyBqLnAwLnogOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgfVxuICAgIGNvbnN0IHAxID0ge1xuICAgICAgeDogTWF0aEZ1bmN0aW9ucy5pc051bWVyaWMoai5wMS54KSA/IGoucDEueCA6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSxcbiAgICAgIHk6IE1hdGhGdW5jdGlvbnMuaXNOdW1lcmljKGoucDEueSkgPyBqLnAxLnkgOiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksXG4gICAgICB6OiBNYXRoRnVuY3Rpb25zLmlzTnVtZXJpYyhqLnAxLnopID8gai5wMS56IDogTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLFxuICAgIH1cbiAgICB0aGlzLnAwLmZyb21KU09OKHAwKVxuICAgIHRoaXMucDEuZnJvbUpTT04ocDEpXG4gIH1cblxuICAvKipcbiAgICogVGhlIHNldEZyb21GbG9hdDMyQXJyYXkgbWV0aG9kLlxuICAgKiBAcGFyYW0ge0Zsb2F0MzJBcnJheX0gZmxvYXQzMmFycmF5IC0gVGhlIGZsb2F0MzJhcnJheSB2YWx1ZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHNldEZyb21GbG9hdDMyQXJyYXkoZmxvYXQzMmFycmF5KSB7XG4gICAgdGhpcy5wMCA9IG5ldyBWZWMzKGZsb2F0MzJhcnJheS5idWZmZXIsIGZsb2F0MzJhcnJheS5ieXRlT2Zmc2V0KVxuICAgIHRoaXMucDEgPSBuZXcgVmVjMyhmbG9hdDMyYXJyYXkuYnVmZmVyLCBmbG9hdDMyYXJyYXkuYnl0ZU9mZnNldCArIDEyKVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIGB0b0pTT05gIG1ldGhvZCBhbmQgc3RyaW5naWZpZXMgaXQuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgdG9TdHJpbmcoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5ldy1jYXBcbiAgICByZXR1cm4gU3RyaW5nRnVuY3Rpb25zLnN0cmluZ2lmeUpTT05XaXRoRml4ZWRQcmVjaXNpb24odGhpcy50b0pTT04oKSlcbiAgfVxufVxuXG5SZWdpc3RyeS5yZWdpc3RlcignQm94MycsIEJveDMpXG5cbmV4cG9ydCB7IEJveDMgfVxuIiwiLyogZXNsaW50LWRpc2FibGUgbmV3LWNhcCAqL1xuaW1wb3J0IHsgU3RyaW5nRnVuY3Rpb25zIH0gZnJvbSAnLi4vVXRpbGl0aWVzL1N0cmluZ0Z1bmN0aW9ucydcbmltcG9ydCB7IEF0dHJWYWx1ZSB9IGZyb20gJy4vQXR0clZhbHVlLmpzJ1xuaW1wb3J0IHsgUmVnaXN0cnkgfSBmcm9tICcuLi9SZWdpc3RyeSdcbmltcG9ydCB7IFZlYzMgfSBmcm9tICcuL1ZlYzMuanMnXG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgcGxhbmUuXG4gKlxuICogQGV4dGVuZHMgQXR0clZhbHVlXG4gKi9cbmNsYXNzIFBsYW5lVHlwZSBleHRlbmRzIEF0dHJWYWx1ZSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBwbGFuZS5cbiAgICpcbiAgICogQHBhcmFtIHtWZWMzfSBub3JtYWwgLSBUaGUgbm9ybWFsIG9mIHRoZSBwbGFuZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHcgLSBUaGUgdyB2YWx1ZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG5vcm1hbCwgdyA9IDApIHtcbiAgICBzdXBlcigpXG4gICAgaWYgKG5vcm1hbCBpbnN0YW5jZW9mIFZlYzMpIHtcbiAgICAgIHRoaXMubm9ybWFsID0gbm9ybWFsXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubm9ybWFsID0gbmV3IFZlYzMoKVxuICAgIH1cbiAgICB0aGlzLncgPSB3XG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZyb20gc2NhbGFyIGNvbXBvbmVudHMuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHggdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHkgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB6IC0gVGhlIHogdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3IC0gVGhlIHcgdmFsdWUuXG4gICAqL1xuICBzZXQoeCwgeSwgeiwgdykge1xuICAgIHRoaXMubm9ybWFsLnNldCh4LCB5LCB6KVxuICAgIHRoaXMudyA9IHdcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZGl2aWRlU2NhbGFyIG1ldGhvZFxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgdmFsdWUgdmFsdWUuXG4gICAqL1xuICBkaXZpZGVTY2FsYXIodmFsdWUpIHtcbiAgICB0aGlzLm5vcm1hbC5zY2FsZUluUGxhY2UoMSAvIHZhbHVlKVxuICAgIHRoaXMudyAvPSB2YWx1ZVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIGRpc3RhbmNlIGZyb20gYSBwb2ludCB0byB0aGlzIHBsYW5lLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlYzN9IHBvaW50IC0gVGhlIHBvaW50IHZhbHVlLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGRpc3RhbmNlVG9Qb2ludChwb2ludCkge1xuICAgIHJldHVybiBwb2ludC5kb3QodGhpcy5ub3JtYWwpICsgdGhpcy53XG4gIH1cblxuICAvKipcbiAgICogTm9ybWFsaXplIHRoaXMgcGxhbmUgaW4gcGxhY2UgbW9kaWZ5aW5nIGl0cyB2YWx1ZXMuXG4gICAqL1xuICBub3JtYWxpemVJblBsYWNlKCkge1xuICAgIGNvbnN0IGludmVyc2VOb3JtYWxMZW5ndGggPSAxLjAgLyB0aGlzLm5vcm1hbC5sZW5ndGgoKVxuICAgIHRoaXMubm9ybWFsLnNjYWxlSW5QbGFjZShpbnZlcnNlTm9ybWFsTGVuZ3RoKVxuICAgIHRoaXMudyAqPSBpbnZlcnNlTm9ybWFsTGVuZ3RoXG4gIH1cblxuICAvKipcbiAgICogQ2xvbmVzIHRoaXMgcGxhbmUgYW5kIHJldHVybnMgYSBuZXcgcGxhbmUuXG4gICAqXG4gICAqIEByZXR1cm4ge1BsYW5lfSAtIFJldHVybnMgYSBuZXcgcGxhbmUuXG4gICAqL1xuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IFBsYW5lKHRoaXMubm9ybWFsLmNsb25lKCksIHRoaXMudylcbiAgfVxuXG4gIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gU3RhdGljIE1ldGhvZHNcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBwbGFuZS5cbiAgICogQHBhcmFtIHsuLi5vYmplY3R9IC4uLmFyZ3MgLSBUaGUgLi4uYXJncyBwYXJhbS5cbiAgICogQHJldHVybiB7UGxhbmV9IC0gUmV0dXJucyBhIG5ldyBwbGFuZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBjcmVhdGUoLi4uYXJncykge1xuICAgIHJldHVybiBuZXcgUGxhbmUoLi4uYXJncylcbiAgfVxuXG4gIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBQZXJzaXN0ZW5jZVxuXG4gIC8qKlxuICAgKiBUaGUgdG9KU09OIG1ldGhvZCBlbmNvZGVzIHRoaXMgdHlwZSBhcyBhIGpzb24gb2JqZWN0IGZvciBwZXJzaXN0ZW5jZS5cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fSAtIFRoZSBqc29uIG9iamVjdC5cbiAgICovXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbm9ybWFsOiB0aGlzLm5vcm1hbC50b0pTT04oKSxcbiAgICAgIHc6IHRoaXMudyxcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbHMgYHRvSlNPTmAgbWV0aG9kIGFuZCBzdHJpbmdpZmllcyBpdC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gU3RyaW5nRnVuY3Rpb25zLnN0cmluZ2lmeUpTT05XaXRoRml4ZWRQcmVjaXNpb24odGhpcy50b0pTT04oKSlcbiAgfVxufVxuXG5SZWdpc3RyeS5yZWdpc3RlcignUGxhbmVUeXBlJywgUGxhbmVUeXBlKVxuXG5leHBvcnQgeyBQbGFuZVR5cGUgfVxuIiwiLyogZXNsaW50LWRpc2FibGUgbmV3LWNhcCAqL1xuaW1wb3J0IHsgU3RyaW5nRnVuY3Rpb25zIH0gZnJvbSAnLi4vVXRpbGl0aWVzL1N0cmluZ0Z1bmN0aW9ucydcbmltcG9ydCB7IFZlYzMgfSBmcm9tICcuL1ZlYzMuanMnXG5pbXBvcnQgeyBQbGFuZVR5cGUgfSBmcm9tICcuL1BsYW5lVHlwZS5qcydcbmltcG9ydCB7IFJlZ2lzdHJ5IH0gZnJvbSAnLi4vUmVnaXN0cnknXG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgRnJ1c3R1bS4gRnJ1c3R1bXMgYXJlIHVzZWQgdG8gZGV0ZXJtaW5lIHdoYXRcbiAqIGlzIGluc2lkZSB0aGUgY2FtZXJhJ3MgZmllbGQgb2Ygdmlldy5cbiAqIEBwcml2YXRlXG4gKiAqL1xuY2xhc3MgRnJ1c3R1bSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBGcnVzdHVtXG4gICAqIEBwYXJhbSB7UGxhbmVUeXBlfSBwMCAtIHRoZSBwMCB2YWx1ZS5cbiAgICogQHBhcmFtIHtQbGFuZVR5cGV9IHAxIC0gdGhlIHAxIHZhbHVlLlxuICAgKiBAcGFyYW0ge1BsYW5lVHlwZX0gcDIgLSB0aGUgcDIgdmFsdWUuXG4gICAqIEBwYXJhbSB7UGxhbmVUeXBlfSBwMyAtIHRoZSBwMyB2YWx1ZS5cbiAgICogQHBhcmFtIHtQbGFuZVR5cGV9IHA0IC0gdGhlIHA0IHZhbHVlLlxuICAgKiBAcGFyYW0ge1BsYW5lVHlwZX0gcDUgLSB0aGUgcDUgdmFsdWUuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwMCwgcDEsIHAyLCBwMywgcDQsIHA1KSB7XG4gICAgdGhpcy5wbGFuZXMgPSBbXG4gICAgICBwMCB8fCBuZXcgUGxhbmVUeXBlKCksXG4gICAgICBwMSB8fCBuZXcgUGxhbmVUeXBlKCksXG4gICAgICBwMiB8fCBuZXcgUGxhbmVUeXBlKCksXG4gICAgICBwMyB8fCBuZXcgUGxhbmVUeXBlKCksXG4gICAgICBwNCB8fCBuZXcgUGxhbmVUeXBlKCksXG4gICAgICBwNSB8fCBuZXcgUGxhbmVUeXBlKCksXG4gICAgXVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBzZXRGcm9tTWF0cml4IGNvbmZpZ3VyZXMgYSBGcnVzdHVtIG9iamVjdCB1c2luZyBhIG1hdHJpeC5cbiAgICogVHlwaWNhbGx5IHRoZSBtYXRyaXggaXMgYSBtb2RlbCB2aWV3IHByb2plY3Rpb24gbWF0cml4LlxuICAgKiBAcGFyYW0ge01hdDR9IG1hdDQgLSBUaGUgbWF0cml4IHRvIHVzZS5cbiAgICovXG4gIHNldEZyb21NYXRyaXgobWF0NCkge1xuICAgIGNvbnN0IG0gPSBtYXQ0XG4gICAgY29uc3QgcGxhbmVzID0gdGhpcy5wbGFuZXNcbiAgICBwbGFuZXNbMF0uc2V0KG0ubTAzIC0gbS5tMDAsIG0ubTEzIC0gbS5tMTAsIG0ubTIzIC0gbS5tMjAsIG0ubTMzIC0gbS5tMzApXG4gICAgcGxhbmVzWzFdLnNldChtLm0wMyArIG0ubTAwLCBtLm0xMyArIG0ubTEwLCBtLm0yMyArIG0ubTIwLCBtLm0zMyArIG0ubTMwKVxuICAgIHBsYW5lc1syXS5zZXQobS5tMDMgKyBtLm0wMSwgbS5tMTMgKyBtLm0xMSwgbS5tMjMgKyBtLm0yMSwgbS5tMzMgKyBtLm0zMSlcbiAgICBwbGFuZXNbM10uc2V0KG0ubTAzIC0gbS5tMDEsIG0ubTEzIC0gbS5tMTEsIG0ubTIzIC0gbS5tMjEsIG0ubTMzIC0gbS5tMzEpXG4gICAgcGxhbmVzWzRdLnNldChtLm0wMyAtIG0ubTAyLCBtLm0xMyAtIG0ubTEyLCBtLm0yMyAtIG0ubTIyLCBtLm0zMyAtIG0ubTMyKVxuICAgIHBsYW5lc1s1XS5zZXQobS5tMDMgKyBtLm0wMiwgbS5tMTMgKyBtLm0xMiwgbS5tMjMgKyBtLm0yMiwgbS5tMzMgKyBtLm0zMilcblxuICAgIHBsYW5lcy5mb3JFYWNoKChwbGFuZSkgPT4gcGxhbmUubm9ybWFsaXplSW5QbGFjZSgpKVxuICB9XG5cbiAgLyoqXG4gICAqIFRlc3RzIGEgYm94IHRvIHNlZSBpZiBpdCBpcyBlbnRpcmVseSB3aXRoaW4gdGhlIGZydXN0dW0uXG4gICAqIEBwYXJhbSB7Qm94M30gYm94MyAtIFRoZSBib3ggdG8gdGVzdC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gLSBUcnVlIGlmIHRoZSBmcnVzdHVtIGludGVyc2VjdHMgdGhlIGJveC5cbiAgICovXG4gIGludGVyc2VjdHNCb3goYm94Mykge1xuICAgIGNvbnN0IHAgPSBuZXcgVmVjMygpXG4gICAgY29uc3QgcGxhbmVzID0gdGhpcy5wbGFuZXNcbiAgICBjb25zdCB7IG1pbiwgbWF4IH0gPSBib3gzXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDY7IGkrKykge1xuICAgICAgY29uc3QgcGxhbmUgPSBwbGFuZXNbaV1cblxuICAgICAgLy8gY29ybmVyIGF0IG1heCBkaXN0YW5jZVxuICAgICAgcC54ID0gcGxhbmUubm9ybWFsLnggPiAwID8gbWF4LnggOiBtaW4ueFxuICAgICAgcC55ID0gcGxhbmUubm9ybWFsLnkgPiAwID8gbWF4LnkgOiBtaW4ueVxuICAgICAgcC56ID0gcGxhbmUubm9ybWFsLnogPiAwID8gbWF4LnogOiBtaW4uelxuXG4gICAgICBpZiAocGxhbmUuZGlzdGFuY2VUb1BvaW50KHApIDwgMCkgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFBlcnNpc3RlbmNlXG5cbiAgLyoqXG4gICAqIFRoZSB0b0pTT04gbWV0aG9kIGVuY29kZXMgdGhpcyB0eXBlIGFzIGEganNvbiBvYmplY3QgZm9yIHBlcnNpc3RlbmNlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IC0gVGhlIGpzb24gb2JqZWN0LlxuICAgKi9cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwMDogdGhpcy5wMC50b0pTT04oKSxcbiAgICAgIHAxOiB0aGlzLnAxLnRvSlNPTigpLFxuICAgICAgcDI6IHRoaXMucDIudG9KU09OKCksXG4gICAgICBwMzogdGhpcy5wMy50b0pTT04oKSxcbiAgICAgIHA0OiB0aGlzLnA0LnRvSlNPTigpLFxuICAgICAgcDU6IHRoaXMucDUudG9KU09OKCksXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBmcm9tSlNPTiBtZXRob2QgZGVjb2RlcyBhIGpzb24gb2JqZWN0IGZvciB0aGlzIHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBqIC0gVGhlIGpzb24gb2JqZWN0LlxuICAgKi9cbiAgZnJvbUpTT04oaikge1xuICAgIHRoaXMucDAuZnJvbUpTT04oai5wMClcbiAgICB0aGlzLnAxLmZyb21KU09OKGoucDEpXG4gICAgdGhpcy5wMi5mcm9tSlNPTihqLnAyKVxuICAgIHRoaXMucDMuZnJvbUpTT04oai5wMylcbiAgICB0aGlzLnA0LmZyb21KU09OKGoucDQpXG4gICAgdGhpcy5wNS5mcm9tSlNPTihqLnA1KVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIGB0b0pTT05gIG1ldGhvZCBhbmQgc3RyaW5naWZpZXMgaXQuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIFN0cmluZ0Z1bmN0aW9ucy5zdHJpbmdpZnlKU09OV2l0aEZpeGVkUHJlY2lzaW9uKHRoaXMudG9KU09OKCkpXG4gIH1cbn1cblxuUmVnaXN0cnkucmVnaXN0ZXIoJ0ZydXN0dW0nLCBGcnVzdHVtKVxuXG5leHBvcnQgeyBGcnVzdHVtIH1cbiIsImxldCBjb3VudGVyID0gMFxuXG4vKipcbiAqIFByb3ZpZGVzIGFuIGludGVyZmFjZSBmb3IgZW1pdHRpbmcgZXZlbnRzIHVuZGVyIGdpdmVuIG5hbWVzLCBhbmQgcmVnaXN0ZXJpbmcgbGlzdGVuZXJzIHRvIHRob3NlIGV2ZW50cy5cbiAqIFRoaXMgaXMgYSBiYXNlIGNsYXNzIGZvciBtb3N0IGNsYXNzZXMgaW4gdGhlIFNjZW5lIFRyZWUgYW5kIFJlbmRlcmVyLCBlbmFibGluZyBvYnNlcnZlcnMgdG8gbGlzdGVuIHRvIGNoYW5nZXMgdGhyb3VnaG91dCB0aGUgc3lzdGVtLlxuICogVGhlIGludGVyZmFjZSBleHBvc2VkIGlzIHNpbWlsYXIgdG8gW0V2ZW50RW1pdHRlcl0oaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9ldmVudHMuaHRtbCNldmVudHNfY2xhc3NfZXZlbnRlbWl0dGVyKSBpbiBOb2RlLlxuICpcbiAqIFNpbWlsYXIgdG8gaG93IHRoZSBET00gZXZlbnQgc3lzdGVtIGluIHRoZSBicm93c2VyIHdvcmtzLCBldmVudHMgYXJlIHJlZ2lzdGVyZWQgYnkgbmFtZS5cbiAqIEV4YW1wbGU6IFJlZ2lzdGVyaW5nIGEgbGlzdGVuZXIgZm9yIGEgY3VzdG9tIGV2ZW50LCBhbmQgdGhlbiBlbWl0dGluZyB0aGF0IGV2ZW50LlxuICogYGBgamF2YXNjcmlwdFxuICogIGNvbnN0IGVlID0gbmV3IEV2ZW50RW1pdHRlcigpXG4gKlxuICogIGVlLm9uKCdteUV2ZW50JywgKGV2ZW50KSA9PiB7XG4gKiAgICBjb25zb2xlLmxvZygnTXkgRXZlbnQgd2FzIGVtaXR0ZWQ6JywgZXZlbnQpXG4gKiAgfSlcbiAqXG4gKiAgZWUuZW1pdCgnbXlFdmVudCcsIHsgZGF0YTogNDIgfSlcbiAqIGBgYFxuICpcbiAqXG4gKi9cbmNsYXNzIEV2ZW50RW1pdHRlciB7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBhbiBlbXB0eSBgbGlzdGVuZXJzYCBtYXAgdGhhdCB3aWxsIGhvc3QgYWxsIHRoZSBldmVudHMsXG4gICAqIHdoaWNoIGltcGxpZXMgdGhhdCBpdCBkb2Vzbid0IGFsbG93IG11bHRpcGxlIGV2ZW50cyB3aXRoIHRoZSBzYW1lIG5hbWUuXG4gICAqIDxicj5cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubGlzdGVuZXJzID0ge31cbiAgICB0aGlzLl9faWQgPSArK2NvdW50ZXJcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB1bmlxdWUgaWQgb2YgdGhlIG9iamVjdC5cbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFRoZSBJZCBvZiB0aGUgUGFyYW1ldGVyT3duZXIgb2JqZWN0LlxuICAgKi9cbiAgZ2V0SWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19pZFxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBsaXN0ZW5lciBmdW5jdGlvbiBmb3IgYSBnaXZlbiBldmVudCBuYW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50LlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciAtIFRoZSBsaXN0ZW5lciBmdW5jdGlvbihjYWxsYmFjaykuXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSB0aGUgaWQgdGhhdCBjYW4gYmUgdXNlZCB0byByZW1vdmUgdGhlIGxpc3RlbmVyLlxuICAgKi9cbiAgb24oZXZlbnROYW1lLCBsaXN0ZW5lcikge1xuICAgIGlmICghbGlzdGVuZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBsaXN0ZW5lci4nKVxuICAgIH1cblxuICAgIGlmICghdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXSkge1xuICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXSA9IFtdXG4gICAgfVxuXG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXVxuXG4gICAgaWYgKGxpc3RlbmVycy5pbmNsdWRlcyhsaXN0ZW5lcikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTGlzdGVuZXIgXCIke2xpc3RlbmVyLm5hbWV9XCIgYWxyZWFkeSBjb25uZWN0ZWQgdG8gZXZlbnQgXCIke2V2ZW50TmFtZX1cIi5gKVxuICAgIH1cblxuICAgIC8vIFRPRE86IERlcHJlY2F0ZSBhbG9uZ3NpZGUgI2FkZExpc3RlbmVyLlxuICAgIGNvbnN0IGlkID0gbGlzdGVuZXJzLmxlbmd0aFxuICAgIGxpc3RlbmVyc1tpZF0gPSBsaXN0ZW5lclxuXG4gICAgcmV0dXJuIGlkXG4gIH1cblxuICAvKipcbiAgICogU2ltaWxhciB0byB0aGUgYG9uYCBtZXRob2Qgd2l0aCB0aGUgZGlmZmVyZW5jZSB0aGF0IHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZCxcbiAgICogaXQgaXMgYXV0b21hdGljYWxseSB1bnJlZ2lzdGVyZWQgbWVhbmluZyB0aGF0IHRoZSBldmVudCBsaXN0ZW5lciB3aWxsIGJlIHRyaWdnZXJlZCBhdCBtb3N0IG9uZSB0aW1lLlxuICAgKlxuICAgKiBVc2VmdWwgZm9yIGV2ZW50cyB0aGF0IHdlIGV4cGVjdCB0byB0cmlnZ2VyIG9uZSB0aW1lLCBzdWNoIGFzIHdoZW4gYXNzZXRzIGxvYWQuXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY29uc3QgYXNzZXQgPSBuZXcgQXNzZXQoKTtcbiAgICogYXNzZXQub25jZSgnbG9hZGVkJywgKCkgPT4ge1xuICAgKiAgIGNvbnNvbGUubG9nKFwiWWF5ISB0aGUgYXNzZXQgaXMgbG9hZGVkXCIpXG4gICAqIH0pXG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIC0gVGhlIGV2ZW50TmFtZSB2YWx1ZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciAtIFRoZSBsaXN0ZW5lciB2YWx1ZVxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gdGhlIGlkIHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVtb3ZlIHRoZSBsaXN0ZW5lci5cbiAgICovXG4gIG9uY2UoZXZlbnROYW1lLCBsaXN0ZW5lcikge1xuICAgIGNvbnN0IGNiID0gKGV2ZW50KSA9PiB7XG4gICAgICBsaXN0ZW5lcihldmVudClcbiAgICAgIHRoaXMub2ZmKGV2ZW50TmFtZSwgY2IpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMub24oZXZlbnROYW1lLCBjYilcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgbGlzdGVuZXIgZnVuY3Rpb24gZnJvbSB0aGUgc3BlY2lmaWVkIGV2ZW50LCB1c2luZyBlaXRoZXIgdGhlIGZ1bmN0aW9uIG9yIHRoZSBpbmRleCBpZC4gRGVwZW5kcyBvbiB3aGF0IGlzIHBhc3NlZCBpbi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbnxudW1iZXJ9IGxpc3RlbmVyIC0gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uIG9yIHRoZSBpZCBudW1iZXIuXG4gICAqL1xuICBvZmYoZXZlbnROYW1lLCBsaXN0ZW5lcikge1xuICAgIGlmICghbGlzdGVuZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBjYWxsYmFjayBmdW5jdGlvbiAobGlzdGVuZXIpLicpXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciA9PSAnbnVtYmVyJykge1xuICAgICAgY29uc29sZS53YXJuKCdEZXByZWNhdGVkLiBVbi1yZWdpc3RlciB1c2luZyB0aGUgb3JpZ2luYWwgbGlzdGVuZXIgaW5zdGVhZC4nKVxuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lckJ5SWQoZXZlbnROYW1lLCBsaXN0ZW5lcilcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV0gfHwgW11cblxuICAgIGNvbnN0IGlkcyA9IFtdXG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaCgoZSwgaSkgPT4ge1xuICAgICAgaWYgKGUgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgIGlkcy5wdXNoKGkpXG4gICAgICB9XG4gICAgfSlcblxuICAgIGlmIChpZHMubGVuZ3RoID09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTGlzdGVuZXIgXCIke2xpc3RlbmVyLm5hbWV9XCIgaXMgbm90IGNvbm5lY3RlZCB0byBcIiR7ZXZlbnROYW1lfVwiIGV2ZW50YClcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChjb25zdCBpZCBvZiBpZHMpIHtcbiAgICAgICAgbGlzdGVuZXJzW2lkXSA9IHVuZGVmaW5lZFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgI29uIGluc3RlYWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgZXZlbnQuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIC0gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uKGNhbGxiYWNrKS5cbiAgICogQHJldHVybiB7bnVtYmVyfSAtIHRoZSBpZCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlbW92ZSB0aGUgbGlzdGVuZXIuXG4gICAqL1xuICBhZGRMaXN0ZW5lcihldmVudE5hbWUsIGxpc3RlbmVyKSB7XG4gICAgY29uc29sZS53YXJuKCdEZXByZWNhdGVkLiBVc2UgI29uIGluc3RlYWQuJylcblxuICAgIHJldHVybiB0aGlzLm9uKGV2ZW50TmFtZSwgbGlzdGVuZXIpXG4gIH1cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgVXNlICNvZmYgaW5zdGVhZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXIgLSBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gICAqL1xuICByZW1vdmVMaXN0ZW5lcihldmVudE5hbWUsIGxpc3RlbmVyKSB7XG4gICAgY29uc29sZS53YXJuKCdEZXByZWNhdGVkLiBVc2UgI29mZiBpbnN0ZWFkLicpXG5cbiAgICB0aGlzLm9mZihldmVudE5hbWUsIGxpc3RlbmVyKVxuICB9XG5cbiAgLyoqXG4gICAqIHJlbW92ZSBsaXN0ZW5lciBieSBJRCByZXR1cm5lZCBmcm9tICNvblxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50LlxuICAgKiBAcGFyYW0ge251bWJlcn0gaWQgLSBUaGUgaWQgcmV0dXJuZWQgYnkgYWRkTGlzdGVuZXJcbiAgICovXG4gIHJlbW92ZUxpc3RlbmVyQnlJZChldmVudE5hbWUsIGlkKSB7XG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXVxuXG4gICAgaWYgKCFsaXN0ZW5lcnMpIHtcbiAgICAgIGNvbnNvbGUud2FybignY2FsbGJhY2sgOicgKyBpZCArICcgd2FzIG5vdCBjb25uZWN0ZWQgdG8gdGhpcyBzaWduYWw6JyArIGV2ZW50TmFtZSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICghbGlzdGVuZXJzW2lkXSkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIElEJylcblxuICAgIGxpc3RlbmVyc1tpZF0gPSB1bmRlZmluZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmlnZ2VycyBhbGwgbGlzdGVuZXIgZnVuY3Rpb25zIGluIGFuIGV2ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50LlxuICAgKiBAcGFyYW0ge29iamVjdHxzdHJpbmd8YW55fSBldmVudCAtIFRoZSBkYXRhIHlvdSB3YW50IHRvIHBhc3MgZG93biB0byBhbGwgbGlzdGVuZXIgZnVuY3Rpb25zIGFzIHBhcmFtZXRlci5cbiAgICovXG4gIGVtaXQoZXZlbnROYW1lLCBldmVudCkge1xuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV0gfHwgW11cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKChmbikgPT4ge1xuICAgICAgLy8gU2tpcCBkaXNjb25uZWN0ZWQgbGlzdGVuZXJzLlxuICAgICAgaWYgKGZuKSB7XG4gICAgICAgIGZuKGV2ZW50KVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cblxuZXhwb3J0IHsgRXZlbnRFbWl0dGVyIH1cbiIsIi8qIGVzbGludC1kaXNhYmxlIHJlcXVpcmUtanNkb2MgKi9cbmltcG9ydCB7IEZsb2F0MzIsIFVJbnQzMiwgU0ludDMyLCBNYXRoRnVuY3Rpb25zIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzL01hdGhGdW5jdGlvbnMnXG5pbXBvcnQgeyBSZWdpc3RyeSB9IGZyb20gJy4uLy4uL1JlZ2lzdHJ5J1xuXG5mdW5jdGlvbiBpc1R5cGVkQXJyYXkob2JqKSB7XG4gIHJldHVybiAhIW9iaiAmJiBvYmouYnl0ZUxlbmd0aCAhPT0gdW5kZWZpbmVkXG59XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGFuIGF0dHJpYnV0ZS5cbiAqL1xuY2xhc3MgQXR0cmlidXRlIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7QXR0clZhbHVlfG51bWJlcn0gZGF0YVR5cGUgLSBUaGUgZGF0YVR5cGUgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfFR5cGVkQXJyYXl9IGV4cGVjdGVkU2l6ZSAtIFRoZSBleHBlY3RlZFNpemUgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkZWZhdWx0VmFsdWUgLSBUaGUgZGVmYXVsdFZhbHVlIHZhbHVlLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZGF0YVR5cGUsIGV4cGVjdGVkU2l6ZSwgZGVmYXVsdFZhbHVlID0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5fX2RhdGFUeXBlID0gZGF0YVR5cGVcbiAgICB0aGlzLm5vcm1hbGl6ZWQgPSBmYWxzZVxuICAgIGlmIChkYXRhVHlwZS5udW1FbGVtZW50cyAhPSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX19kaW1lbnNpb24gPSB0aGlzLl9fZGF0YVR5cGUubnVtRWxlbWVudHMoKVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKGRhdGFUeXBlKSB7XG4gICAgICAgIGNhc2UgRmxvYXQzMjpcbiAgICAgICAgY2FzZSBVSW50MzI6XG4gICAgICAgIGNhc2UgU0ludDMyOlxuICAgICAgICAgIHRoaXMuX19kaW1lbnNpb24gPSAxXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZGF0YSB0eXBlIGZvciBhdHRyaWJ1dGU6JyArIGRhdGFUeXBlKVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9fZGVmYXVsdEVsZW1lbnRWYWx1ZSA9IGRlZmF1bHRWYWx1ZSAhPSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiBOdW1iZXIuTUFYX1ZBTFVFXG4gICAgaWYgKGlzVHlwZWRBcnJheShleHBlY3RlZFNpemUpKSB7XG4gICAgICB0aGlzLl9fZGF0YSA9IGV4cGVjdGVkU2l6ZVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9fZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoZXhwZWN0ZWRTaXplICogdGhpcy5fX2RpbWVuc2lvbilcbiAgICAgIHRoaXMuaW5pdFJhbmdlKDApXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlc2l6ZXMgY3VycmVudCBkYXRhIGFycmF5IHRvIHRvIGEgbmV3IHNpemUuXG4gICAqIEluIGNhc2UgdGhlIG5ldyBzaXplIGlzIGJpZ2dlciB0aGFuIGN1cnJlbnQgc2l6ZSwgdGhlIG5ldyB2YWx1ZXMgYXJlIGZpbGxlZCB1cCB3aXRoIGRlZmF1bHQgb25lcy5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNpemUgLSBUaGUgc2l6ZSB2YWx1ZS5cbiAgICovXG4gIHJlc2l6ZShzaXplKSB7XG4gICAgY29uc3QgcHJldkxlbmd0aCA9IHRoaXMuX19kYXRhLmxlbmd0aFxuICAgIGNvbnN0IG5ld0xlbmd0aCA9IHNpemUgKiB0aGlzLl9fZGltZW5zaW9uXG5cbiAgICBpZiAobmV3TGVuZ3RoID4gcHJldkxlbmd0aCkge1xuICAgICAgY29uc3QgZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkobmV3TGVuZ3RoKVxuICAgICAgZGF0YS5zZXQodGhpcy5fX2RhdGEpXG4gICAgICB0aGlzLl9fZGF0YSA9IGRhdGFcbiAgICAgIHRoaXMuaW5pdFJhbmdlKHByZXZMZW5ndGgpXG4gICAgfSBlbHNlIGlmIChuZXdMZW5ndGggPCBwcmV2TGVuZ3RoKSB7XG4gICAgICB0aGlzLl9fZGF0YSA9IHRoaXMuX19kYXRhLnNsaWNlKDAsIG5ld0xlbmd0aClcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTm8gY2hhbmdlIGluIHNpemUuICh0aGlzIGNhbiBoYXBwZW4gd2hlbiBhbiBhdHRyaWJ1dGUgd2FzIGFscmVhZHkgbG9hZGVkIHdpdGggZGF0YS4pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZpbGxzIHVwIGRhdGEgdmFsdWVzIHdpdGggZGVmYXVsdCBvbmVzIHN0YXJ0aW5nIGZyb20gdGhlIHNwZWNpZmllZCBpbmRleC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IC0gVGhlIHN0YXJ0IHZhbHVlLlxuICAgKi9cbiAgaW5pdFJhbmdlKHN0YXJ0KSB7XG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgdmFsdWVzIHRvIGludmFsaWQgdmFsdWVzLlxuICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IHRoaXMuX19kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLl9fZGF0YVtpXSA9IHRoaXMuX19kZWZhdWx0RWxlbWVudFZhbHVlXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNvdW50IG9mIGF0dHJpYnV0ZSB2YWx1ZXMgaW4gdGhlIGRhdGEuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgZ2V0Q291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19kYXRhLmxlbmd0aCAvIHRoaXMuX19kaW1lbnNpb25cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjb3VudCBvZiBhdHRyaWJ1dGUgdmFsdWVzIGluIHRoZSBkYXRhLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGdldCBsZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19kYXRhLmxlbmd0aCAvIHRoaXMuX19kaW1lbnNpb25cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB0eXBlIG9mIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICpcbiAgICogQHJldHVybiB7QXR0clZhbHVlfG51bWJlcn0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgZ2V0IGRhdGFUeXBlKCkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YVR5cGVcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGN1cnJlbnQgZGF0YSBhcnJheS5cbiAgICpcbiAgICogQHJldHVybiB7VHlwZWRBcnJheX0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgZ2V0IGRhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19kYXRhXG4gIH1cblxuICAvKipcbiAgICogU2V0cyBkYXRhIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge1R5cGVkQXJyYXl9IGRhdGEgLSBUaGUgZGF0YSB2YWx1ZS5cbiAgICovXG4gIHNldCBkYXRhKGRhdGEpIHtcbiAgICB0aGlzLl9fZGF0YSA9IGRhdGFcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgc3RvcmVkIGluIGVhY2ggYEF0dHJWYWx1ZWAuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgZ2V0IG51bUVsZW1lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLl9fZGltZW5zaW9uXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBkYXRhIHZhbHVlIG9mIHRoZSBzcGVjaWZpZWQgaW5kZXguXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCB2YWx1ZS5cbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBnZXRGbG9hdDMyVmFsdWUoaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGFbaW5kZXhdXG4gIH1cblxuICAvKipcbiAgICogU2V0cyBkYXRhIHZhbHVlIGluIHRoZSBzcGVjaWZpZWQgaW5kZXguXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIHZhbHVlIHBhcmFtLlxuICAgKi9cbiAgc2V0RmxvYXQzMlZhbHVlKGluZGV4LCB2YWx1ZSkge1xuICAgIHRoaXMuX19kYXRhW2luZGV4XSA9IHZhbHVlXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYEF0dHJWYWx1ZWAgb2JqZWN0IHBsYWNlZCBpbiB0aGUgc3BlY2lmaWVkIGluZGV4LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggdmFsdWUuXG4gICAqIEByZXR1cm4ge0F0dHJWYWx1ZX0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgZ2V0VmFsdWVSZWYoaW5kZXgpIHtcbiAgICBjb25zdCBudW1FbGVtcyA9IHRoaXMuX19kaW1lbnNpb25cbiAgICBpZiAoaW5kZXggPj0gdGhpcy5fX2RhdGEubGVuZ3RoIC8gbnVtRWxlbXMpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmVydGV4IGluZGV4OicgKyBpbmRleCArICcuIE51bSBWZXJ0aWNlczonICsgdGhpcy5fX2RhdGEubGVuZ3RoIC8gMylcbiAgICByZXR1cm4gdGhpcy5fX2RhdGFUeXBlLmNyZWF0ZUZyb21CdWZmZXIodGhpcy5fX2RhdGEuYnVmZmVyLCBpbmRleCAqIG51bUVsZW1zICogNClcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGBBdHRyVmFsdWVgIG9iamVjdCBpbiB0aGUgc3BlY2lmaWVkIGluZGV4LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggdmFsdWUuXG4gICAqIEBwYXJhbSB7QXR0clZhbHVlfSB2YWx1ZSAtIFRoZSB2YWx1ZSBwYXJhbS5cbiAgICovXG4gIHNldFZhbHVlKGluZGV4LCB2YWx1ZSkge1xuICAgIGNvbnN0IG51bUVsZW1zID0gdGhpcy5fX2RpbWVuc2lvblxuICAgIGlmIChpbmRleCA+PSB0aGlzLl9fZGF0YS5sZW5ndGggLyBudW1FbGVtcylcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB2ZXJ0ZXggaW5kZXg6JyArIGluZGV4ICsgJy4gTnVtIFZlcnRpY2VzOicgKyB0aGlzLl9fZGF0YS5sZW5ndGggLyAzKVxuICAgIHRoaXMuX19kYXRhVHlwZS5jcmVhdGVGcm9tQnVmZmVyKHRoaXMuX19kYXRhLmJ1ZmZlciwgaW5kZXggKiBudW1FbGVtcyAqIDQpLnNldEZyb21PdGhlcih2YWx1ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgdG9KU09OIG1ldGhvZCBlbmNvZGVzIHRoaXMgdHlwZSBhcyBhIGpzb24gb2JqZWN0IGZvciBwZXJzaXN0ZW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHQgLSBUaGUgY29udGV4dCB2YWx1ZS5cbiAgICogQHJldHVybiB7b2JqZWN0fSAtIFJldHVybnMgdGhlIGpzb24gb2JqZWN0LlxuICAgKi9cbiAgdG9KU09OKGNvbnRleHQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGF0YTogQXJyYXkuZnJvbSh0aGlzLl9fZGF0YSksXG4gICAgICBkYXRhVHlwZTogUmVnaXN0cnkuZ2V0Qmx1ZXByaW50TmFtZSh0aGlzLl9fZGF0YVR5cGUpLFxuICAgICAgZGVmYXVsdFZhbHVlOiB0aGlzLl9fZGVmYXVsdEVsZW1lbnRWYWx1ZSxcbiAgICAgIGxlbmd0aDogdGhpcy5fX2RhdGEubGVuZ3RoIC8gdGhpcy5fX2RpbWVuc2lvbixcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhlIGZyb21KU09OIG1ldGhvZCBkZWNvZGVzIGEganNvbiBvYmplY3QgZm9yIHRoaXMgdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGogLSBUaGUganNvbiBvYmplY3QgdGhpcyBpdGVtIG11c3QgZGVjb2RlLlxuICAgKi9cbiAgZnJvbUpTT04oaikge1xuICAgIGNvbnN0IGRhdGEgPSBqLmRhdGEubWFwKChkYXRhRWxlbWVudCkgPT5cbiAgICAgIE1hdGhGdW5jdGlvbnMuaXNOdW1lcmljKGRhdGFFbGVtZW50KSA/IGRhdGFFbGVtZW50IDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZXG4gICAgKVxuICAgIHRoaXMuX19kYXRhID0gRmxvYXQzMkFycmF5LmZyb20oZGF0YSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9iamVjdCdzIHN0YXRlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvSlNPTigpLCBudWxsLCAyKVxuICB9XG59XG5cbmV4cG9ydCB7IEF0dHJpYnV0ZSB9XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cbi8qIGVzbGludC1kaXNhYmxlIGd1YXJkLWZvci1pbiAqL1xuaW1wb3J0IHsgQXR0cmlidXRlIH0gZnJvbSAnLi9BdHRyaWJ1dGUuanMnXG5pbXBvcnQgeyBGbG9hdDMyIH0gZnJvbSAnLi4vLi4vVXRpbGl0aWVzL01hdGhGdW5jdGlvbnMnXG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIHZlcnRleCBhdHRyaWJ1dGVzLlxuICpcbiAqIGBgYFxuICogY29uc3QgdmVydGV4QXR0cmlidXRlID0gbmV3IFZlcnRleEF0dHJpYnV0ZSh0aGlzLCBGbG9hdDMyLCAwKVxuICogYGBgXG4gKlxuICogQGV4dGVuZHMgQXR0cmlidXRlXG4gKi9cbmNsYXNzIFZlcnRleEF0dHJpYnV0ZSBleHRlbmRzIEF0dHJpYnV0ZSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgdmVydGV4IGF0dHJpYnV0ZXNcbiAgICogQHBhcmFtIHtNZXNofSBnZW9tIC0gVGhlIGdlb20gdmFsdWUuXG4gICAqIEBwYXJhbSB7QXR0clZhbHVlfG51bWJlcn0gZGF0YVR5cGUgLSBUaGUgZGF0YVR5cGUgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfFR5cGVkQXJyYXl9IGV4cGVjdGVkU2l6ZSAtIFRoZSBleHBlY3RlZFNpemUgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkZWZhdWx0U2NhbGFyVmFsdWUgLSBUaGUgZGVmYXVsdCBzY2FsYXIgdmFsdWUuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihnZW9tLCBkYXRhVHlwZSwgZXhwZWN0ZWRTaXplLCBkZWZhdWx0U2NhbGFyVmFsdWUpIHtcbiAgICBzdXBlcihkYXRhVHlwZSwgZXhwZWN0ZWRTaXplLCBkZWZhdWx0U2NhbGFyVmFsdWUpXG4gICAgdGhpcy5fX2dlb20gPSBnZW9tIC8vIFRPRE86IFdlYWtSZWY/P1xuXG4gICAgdGhpcy5fX3NwbGl0cyA9IHt9XG4gICAgdGhpcy5fX3NwbGl0VmFsdWVzID0gW11cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNpemVzIGN1cnJlbnQgZGF0YSBhcnJheSB0byB0byBhIG5ldyBzaXplLlxuICAgKiBJbiBjYXNlIHRoZSBuZXcgc2l6ZSBpcyBiaWdnZXIgdGhhbiBjdXJyZW50IHNpemUsIHRoZSBuZXcgdmFsdWVzIGFyZSBmaWxsZWQgdXAgd2l0aCBkZWZhdWx0IG9uZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplIC0gVGhlIHNpemUgdmFsdWUuXG4gICAqL1xuICByZXNpemUoc2l6ZSkge1xuICAgIHN1cGVyLnJlc2l6ZShzaXplKVxuICAgIHRoaXMuX19zcGxpdHMgPSB7fVxuICAgIHRoaXMuX19zcGxpdFZhbHVlcyA9IFtdXG4gIH1cblxuICAvKipcbiAgICogVGhlIGdldEZhY2VWZXJ0ZXhWYWx1ZVJlZiBtZXRob2QuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmYWNlIC0gVGhlIGZhY2UgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmYWNlVmVydGV4IC0gVGhlIGZhY2UgdmVydGV4IHZhbHVlLlxuICAgKiBAcmV0dXJuIHtBdHRyVmFsdWV9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGdldEZhY2VWZXJ0ZXhWYWx1ZVJlZihmYWNlLCBmYWNlVmVydGV4KSB7XG4gICAgY29uc3QgdmVydGV4ID0gdGhpcy5fX2dlb20uZ2V0RmFjZVZlcnRleEluZGV4KGZhY2UsIGZhY2VWZXJ0ZXgpXG4gICAgaWYgKHZlcnRleCBpbiB0aGlzLl9fc3BsaXRzICYmIGZhY2UgaW4gdGhpcy5fX3NwbGl0c1t2ZXJ0ZXhdKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3NwbGl0VmFsdWVzW3RoaXMuX19zcGxpdHNbdmVydGV4XVtmYWNlXV1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWVSZWYodmVydGV4KVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBzZXRGYWNlVmVydGV4VmFsdWUgbWV0aG9kLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZmFjZSAtIFRoZSBmYWNlIHZhbHVlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZmFjZVZlcnRleCAtIFRoZSBmYWNlVmVydGV4IHZhbHVlLlxuICAgKiBAcGFyYW0ge0F0dHJWYWx1ZX0gdmFsdWUgLSBUaGUgdmFsdWUgdmFsdWUuXG4gICAqL1xuICBzZXRGYWNlVmVydGV4VmFsdWUoZmFjZSwgZmFjZVZlcnRleCwgdmFsdWUpIHtcbiAgICBjb25zdCB2ZXJ0ZXggPSB0aGlzLl9fZ2VvbS5nZXRGYWNlVmVydGV4SW5kZXgoZmFjZSwgZmFjZVZlcnRleClcbiAgICB0aGlzLnNldEZhY2VWZXJ0ZXhWYWx1ZV9CeVZlcnRleEluZGV4KGZhY2UsIHZlcnRleCwgdmFsdWUpXG4gIH1cblxuICAvKipcbiAgICogVGhlIHNldEZhY2VWZXJ0ZXhWYWx1ZV9CeVZlcnRleEluZGV4IG1ldGhvZC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZhY2UgLSBUaGUgZmFjZSB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHZlcnRleCAtIFRoZSB2ZXJ0ZXggdmFsdWUuXG4gICAqIEBwYXJhbSB7QXR0clZhbHVlfSB2YWx1ZSAtIFRoZSB2YWx1ZSB2YWx1ZS5cbiAgICovXG4gIHNldEZhY2VWZXJ0ZXhWYWx1ZV9CeVZlcnRleEluZGV4KGZhY2UsIHZlcnRleCwgdmFsdWUpIHtcbiAgICBjb25zdCB2YWx1ZVJlZiA9IHRoaXMuZ2V0VmFsdWVSZWYodmVydGV4KVxuICAgIGlmICghdmFsdWVSZWYuaXNWYWxpZCgpKSB7XG4gICAgICAvLyB0aGUgdmFsdWUgaXMgdW5pbml0aWFsaXplZC4gSW5pdGlhbGl6ZSBpdC5cbiAgICAgIHZhbHVlUmVmLnNldEZyb21PdGhlcih2YWx1ZSlcbiAgICB9IGVsc2UgaWYgKHZhbHVlUmVmLmFwcHJveEVxdWFsKHZhbHVlKSkge1xuICAgICAgLy8gUmV1c2luZyB2ZXJ0ZXggdmFsdWUuIERvIG5vdGhpbmdcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhlIG5ldyB2YWx1ZSBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgZXhpc3RpbmcgdmFsdWVcblxuICAgICAgaWYgKHZlcnRleCBpbiB0aGlzLl9fc3BsaXRzKSB7XG4gICAgICAgIC8vIE5vdyBjaGVjayBpZiBhbnkgZXhpc3Rpbmcgc3BsaXRzIGZvciB0aGlzIHZlcnRleCBtYXRjaCB0aGUgdmFsdWUgYmVpbmcgc2V0LlxuICAgICAgICAvLyBpLmUuIGZvciBmYWNlcyBhcm91bmQgYSB2ZXJ0ZXgsIHRoZXJlIHdpbGwgb2Z0ZW4gYmUgYSBzZWFtIGFsb25nIDIgZWRnZXNcbiAgICAgICAgLy8gd2hlcmUgdGhlIHZhbHVlcyBkaWZmZXIuIE9uIGVhY2ggc2lkZSBvZiB0aGUgc2VhbSwgYWxsIGZhY2VzIGNhbiB1c2UgdGhlIHNhbWVcbiAgICAgICAgLy8gdmFsdWUuIFdlIHNob3VsZCBzZWUgdGhlbiBvbmx5IG9uZSBzcGxpdCB2YWx1ZSBmb3IgdGhlIHZlcnRleC5cbiAgICAgICAgY29uc3QgdmVydGV4U3BsaXRJZHMgPSB0aGlzLl9fc3BsaXRzW3ZlcnRleF1cbiAgICAgICAgZm9yIChjb25zdCBmaWQgaW4gdmVydGV4U3BsaXRJZHMpIHtcbiAgICAgICAgICBjb25zdCBzcGxpdElkID0gdmVydGV4U3BsaXRJZHNbZmlkXVxuICAgICAgICAgIGlmICh0aGlzLl9fc3BsaXRWYWx1ZXNbc3BsaXRJZF0uYXBwcm94RXF1YWwodmFsdWUpKSB7XG4gICAgICAgICAgICAvLyByZS11c2UgdGhpcyBzcGxpdCB2YWx1ZVxuICAgICAgICAgICAgdmVydGV4U3BsaXRJZHNbZmFjZV0gPSBzcGxpdElkXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBhIHNwbGl0IGFscmVhZHkgZXhpc3RzIGZvciB0aGlzIGZhY2UsIHJlLXVzZSBpdC5cbiAgICAgICAgaWYgKGZhY2UgaW4gdGhpcy5fX3NwbGl0c1t2ZXJ0ZXhdKSB7XG4gICAgICAgICAgY29uc3QgdmFsdWVSZWYgPSB0aGlzLl9fc3BsaXRWYWx1ZXNbdGhpcy5fX3NwbGl0c1t2ZXJ0ZXhdW2ZhY2VdXVxuICAgICAgICAgIHZhbHVlUmVmLnNldEZyb21PdGhlcih2YWx1ZSlcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fX3NwbGl0c1t2ZXJ0ZXhdID0ge31cbiAgICAgIH1cbiAgICAgIHRoaXMuX19zcGxpdHNbdmVydGV4XVtmYWNlXSA9IHRoaXMuX19zcGxpdFZhbHVlcy5sZW5ndGhcbiAgICAgIHRoaXMuX19zcGxpdFZhbHVlcy5wdXNoKHZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgc2V0U3BsaXRWZXJ0ZXhWYWx1ZSBtZXRob2QuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2ZXJ0ZXggLSBUaGUgdmVydGV4IHZhbHVlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZmFjZSAtIFRoZSBmYWNlIHZhbHVlLlxuICAgKiBAcGFyYW0ge0F0dHJWYWx1ZX0gdmFsdWUgLSBUaGUgdmFsdWUgdmFsdWUuXG4gICAqL1xuICBzZXRTcGxpdFZlcnRleFZhbHVlKHZlcnRleCwgZmFjZSwgdmFsdWUpIHtcbiAgICBpZiAoISh2ZXJ0ZXggaW4gdGhpcy5fX3NwbGl0cykpIHRoaXMuX19zcGxpdHNbdmVydGV4XSA9IHt9XG4gICAgaWYgKGZhY2UgaW4gdGhpcy5fX3NwbGl0c1t2ZXJ0ZXhdKSB7XG4gICAgICBjb25zdCBjdXJyVmFsdWUgPSB0aGlzLl9fc3BsaXRWYWx1ZXNbdGhpcy5fX3NwbGl0c1t2ZXJ0ZXhdW2ZhY2VdXVxuICAgICAgaWYgKGN1cnJWYWx1ZS5hcHByb3hFcXVhbCh2YWx1ZSkpIHJldHVyblxuICAgICAgY29uc29sZS53YXJuKCdGYWNlIFZlcnRleCBBbHJlYWR5IFNwbGl0IHdpdGggZGlmZmVyZW50IHZhbHVlJylcbiAgICB9XG4gICAgdGhpcy5fX3NwbGl0c1t2ZXJ0ZXhdW2ZhY2VdID0gdGhpcy5fX3NwbGl0VmFsdWVzLmxlbmd0aFxuICAgIHRoaXMuX19zcGxpdFZhbHVlcy5wdXNoKHZhbHVlKVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBzZXRTcGxpdFZlcnRleFZhbHVlcyBtZXRob2QuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2ZXJ0ZXggLSBUaGUgdmVydGV4IHZhbHVlLlxuICAgKiBAcGFyYW0ge2FycmF5fSBmYWNlR3JvdXAgLSBUaGUgZmFjZUdyb3VwIHZhbHVlLlxuICAgKiBAcGFyYW0ge0F0dHJWYWx1ZX0gdmFsdWUgLSBUaGUgdmFsdWUgdmFsdWUuXG4gICAqL1xuICBzZXRTcGxpdFZlcnRleFZhbHVlcyh2ZXJ0ZXgsIGZhY2VHcm91cCwgdmFsdWUpIHtcbiAgICBpZiAoISh2ZXJ0ZXggaW4gdGhpcy5fX3NwbGl0cykpIHRoaXMuX19zcGxpdHNbdmVydGV4XSA9IHt9XG4gICAgY29uc3Qgc3BsaXRJbmRleCA9IHRoaXMuX19zcGxpdFZhbHVlcy5sZW5ndGhcbiAgICB0aGlzLl9fc3BsaXRWYWx1ZXMucHVzaCh2YWx1ZSlcbiAgICBmb3IgKGNvbnN0IGZhY2Ugb2YgZmFjZUdyb3VwKSB7XG4gICAgICAvLyBpZiAoZmFjZSBpbiB0aGlzLl9fc3BsaXRzW3ZlcnRleF0pIHtcbiAgICAgIC8vICAgICBsZXQgY3VyclZhbHVlID0gdGhpcy5fX3NwbGl0VmFsdWVzW3RoaXMuX19zcGxpdHNbdmVydGV4XVtmYWNlXV07XG4gICAgICAvLyAgICAgaWYgKGN1cnJWYWx1ZS5hcHByb3hFcXVhbCh2YWx1ZSkpXG4gICAgICAvLyAgICAgICAgIHJldHVybjtcbiAgICAgIC8vICAgICBjb25zb2xlLndhcm4oXCJGYWNlIFZlcnRleCBBbHJlYWR5IFNwbGl0IHdpdGggZGlmZmVyZW50IHZhbHVlXCIpO1xuICAgICAgLy8gfVxuICAgICAgdGhpcy5fX3NwbGl0c1t2ZXJ0ZXhdW2ZhY2VdID0gc3BsaXRJbmRleFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZ2V0U3BsaXRzIG1ldGhvZC5cbiAgICogQHJldHVybiB7YXJyYXl9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGdldFNwbGl0cygpIHtcbiAgICByZXR1cm4gdGhpcy5fX3NwbGl0c1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBnZXRTcGxpdENvdW50IG1ldGhvZC5cbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBnZXRTcGxpdENvdW50KCkge1xuICAgIGxldCBzcGxpdENvdW50ID0gMFxuICAgIGZvciAoY29uc3QgdmVydGV4IGluIHRoaXMuX19zcGxpdHMpIHNwbGl0Q291bnQgKz0gT2JqZWN0LmtleXModGhpcy5fX3NwbGl0c1t2ZXJ0ZXhdKS5sZW5ndGhcbiAgICByZXR1cm4gc3BsaXRDb3VudFxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBnZW5lcmF0ZVNwbGl0VmFsdWVzIG1ldGhvZC5cbiAgICogQHBhcmFtIHthcnJheX0gc3BsaXRJbmRpY2VzIC0gVGhlIHNwbGl0SW5kaWNlcyB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHNwbGl0Q291bnQgLSBUaGUgc3BsaXRDb3VudCB2YWx1ZS5cbiAgICogQHJldHVybiB7RmxvYXQzMkFycmF5fSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBnZW5lcmF0ZVNwbGl0VmFsdWVzKHNwbGl0SW5kaWNlcywgc3BsaXRDb3VudCkge1xuICAgIGlmIChzcGxpdENvdW50ID09IDApIHJldHVybiB0aGlzLl9fZGF0YVxuXG4gICAgY29uc3QgbnVtVW5TcGxpdFZhbHVlcyA9IHRoaXMubGVuZ3RoXG4gICAgY29uc3QgY291bnQgPSB0aGlzLmxlbmd0aCArIHNwbGl0Q291bnRcbiAgICBjb25zdCBudW1FbGVtcyA9IHRoaXMuX19kYXRhVHlwZS5udW1FbGVtZW50cyA/IHRoaXMuX19kYXRhVHlwZS5udW1FbGVtZW50cygpIDogMVxuICAgIGNvbnN0IGRhdGEgPSBuZXcgRmxvYXQzMkFycmF5KGNvdW50ICogbnVtRWxlbXMpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9fZGF0YS5sZW5ndGg7IGkrKykgZGF0YVtpXSA9IHRoaXMuX19kYXRhW2ldXG5cbiAgICAvLyBOb3cgZHVwbGljYXRlIHRoZSBzcGxpdCB2YWx1ZXMgdG8gZ2VuZXJhdGUgYW4gYXR0cmlidXRlcyBhcnJheVxuICAgIC8vIHVzaWcgdGhlIHNoYXJlZCBzcGxpdHMgYWNjcm9zcyBhbGwgYXR0cmlidXRlcy5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG4gICAgZm9yIChjb25zdCB2ZXJ0ZXggaW4gc3BsaXRJbmRpY2VzKSB7XG4gICAgICBjb25zdCBmYWNlcyA9IHNwbGl0SW5kaWNlc1t2ZXJ0ZXhdXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG4gICAgICBmb3IgKGNvbnN0IGZhY2UgaW4gZmFjZXMpIHtcbiAgICAgICAgY29uc3QgdGd0ID0gbnVtVW5TcGxpdFZhbHVlcyArIGZhY2VzW2ZhY2VdXG4gICAgICAgIGlmICh2ZXJ0ZXggaW4gdGhpcy5fX3NwbGl0cyAmJiBmYWNlIGluIHRoaXMuX19zcGxpdHNbdmVydGV4XSkge1xuICAgICAgICAgIC8vIHRoaXMgYXR0cmlidWUgaGFzIGEgc3BsaXQgdmFsdWUgaW4gaXRzIGFycmF5LlxuICAgICAgICAgIC8vIHdlIG11c3QgdXNlIHRoYXQgdmFsdWUuLi5cbiAgICAgICAgICBjb25zdCBzcmMgPSB0aGlzLl9fc3BsaXRzW3ZlcnRleF1bZmFjZV1cbiAgICAgICAgICBpZiAodGhpcy5fX2RhdGFUeXBlID09IEZsb2F0MzIpIGRhdGFbdGd0ICogbnVtRWxlbXNdID0gdGhpcy5fX3NwbGl0VmFsdWVzW3NyY11cbiAgICAgICAgICBlbHNlIHRoaXMuX19kYXRhVHlwZS5jcmVhdGVGcm9tQnVmZmVyKGRhdGEuYnVmZmVyLCB0Z3QgKiBudW1FbGVtcyAqIDQpLnNldEZyb21PdGhlcih0aGlzLl9fc3BsaXRWYWx1ZXNbc3JjXSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBDb3B5IGVhY2ggc2NhbGFyIHZhbHVlIHRvIHRoZSBuZXcgcGxhY2UgaW4gdGhlIGFycmF5LlxuICAgICAgICAgIGNvbnN0IHNyYyA9IHBhcnNlSW50KHZlcnRleClcbiAgICAgICAgICBmb3IgKGxldCBlID0gMDsgZSA8IG51bUVsZW1zOyBlKyspIHtcbiAgICAgICAgICAgIGlmIChzcmMgKiBudW1FbGVtcyArIGUgPiB0aGlzLl9fZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIHJlbWFwcGluZyBzcmM6JyArIHNyYyAqIG51bUVsZW1zICsgZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0Z3QgKiBudW1FbGVtcyArIGUgPiBkYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3IgcmVtYXBwaW5nIHRndDonICsgdGd0ICogbnVtRWxlbXMgKyBlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YVt0Z3QgKiBudW1FbGVtcyArIGVdID0gdGhpcy5fX2RhdGFbc3JjICogbnVtRWxlbXMgKyBlXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB0b0pTT04gbWV0aG9kIGVuY29kZXMgdGhpcyB0eXBlIGFzIGEganNvbiBvYmplY3QgZm9yIHBlcnNpc3RlbmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dCAtIFRoZSBjb250ZXh0IHZhbHVlLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IC0gUmV0dXJucyB0aGUganNvbiBvYmplY3QuXG4gICAqL1xuICB0b0pTT04oY29udGV4dCkge1xuICAgIGNvbnN0IGpzb24gPSBzdXBlci50b0pTT04oY29udGV4dClcbiAgICBqc29uLnNwbGl0cyA9IHRoaXMuX19zcGxpdHNcbiAgICBqc29uLnNwbGl0VmFsdWVzID0gdGhpcy5fX3NwbGl0VmFsdWVzXG4gICAgcmV0dXJuIGpzb25cbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZnJvbUpTT04gbWV0aG9kIGRlY29kZXMgYSBqc29uIG9iamVjdCBmb3IgdGhpcyB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0ganNvbiAtIFRoZSBqc29uIG9iamVjdCB0aGlzIGl0ZW0gbXVzdCBkZWNvZGUuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0IC0gVGhlIGNvbnRleHQgdmFsdWUuXG4gICAqL1xuICBmcm9tSlNPTihqc29uLCBjb250ZXh0KSB7XG4gICAgc3VwZXIuZnJvbUpTT04oanNvbiwgY29udGV4dClcbiAgICB0aGlzLl9fc3BsaXRzID0ganNvbi5zcGxpdHMgfHwge31cbiAgICB0aGlzLl9fc3BsaXRWYWx1ZXMgPSBbXVxuICAgIGlmIChqc29uLnNwbGl0VmFsdWVzKSB7XG4gICAgICBmb3IgKGNvbnN0IGpzb25WYWwgb2YganNvbi5zcGxpdFZhbHVlcykge1xuICAgICAgICBjb25zdCBkYXRlVHlwZUluc3RhbmNlID0gbmV3IHRoaXMuX19kYXRhVHlwZSgpXG4gICAgICAgIGRhdGVUeXBlSW5zdGFuY2UuZnJvbUpTT04oanNvblZhbClcbiAgICAgICAgdGhpcy5fX3NwbGl0VmFsdWVzLnB1c2goZGF0ZVR5cGVJbnN0YW5jZSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhlIGxvYWRTcGxpdFZhbHVlcyBtZXRob2QuXG4gICAqIEBwYXJhbSB7QmluUmVhZGVyfSByZWFkZXIgLSBUaGUgcmVhZGVyIHZhbHVlLlxuICAgKi9cbiAgbG9hZFNwbGl0VmFsdWVzKHJlYWRlcikge1xuICAgIGNvbnN0IHNwbGl0SW5kaWNlcyA9IHJlYWRlci5sb2FkVUludDMyQXJyYXkoKVxuICAgIGlmIChzcGxpdEluZGljZXMubGVuZ3RoID09IDApIHJldHVyblxuICAgIGxldCBvZmZzZXQgPSAwXG4gICAgbGV0IG51bVNwbGl0VmFsdWVzID0gMFxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBjb25zdCB2ZXJ0ZXhJZCA9IHNwbGl0SW5kaWNlc1tvZmZzZXQrK11cbiAgICAgIGNvbnN0IG51bVNwbGl0cyA9IHNwbGl0SW5kaWNlc1tvZmZzZXQrK11cblxuICAgICAgY29uc3Qgc3BsaXRzID0ge31cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtU3BsaXRzOyBpKyspIHtcbiAgICAgICAgY29uc3QgZmFjZUlkID0gc3BsaXRJbmRpY2VzW29mZnNldCsrXVxuICAgICAgICBjb25zdCBzcGxpdElkID0gc3BsaXRJbmRpY2VzW29mZnNldCsrXVxuICAgICAgICBzcGxpdHNbZmFjZUlkXSA9IHNwbGl0SWRcbiAgICAgICAgaWYgKHNwbGl0SWQgPj0gbnVtU3BsaXRWYWx1ZXMpIG51bVNwbGl0VmFsdWVzID0gc3BsaXRJZCArIDFcbiAgICAgIH1cbiAgICAgIHRoaXMuX19zcGxpdHNbdmVydGV4SWRdID0gc3BsaXRzXG4gICAgICBpZiAob2Zmc2V0ID49IHNwbGl0SW5kaWNlcy5sZW5ndGgpIGJyZWFrXG4gICAgfVxuICAgIGNvbnN0IGRpbSA9IHRoaXMuX19udW1GbG9hdDMyRWxlbWVudHNcbiAgICBjb25zdCBzcGxpdFZhbHVlcyA9IHJlYWRlci5sb2FkRmxvYXQzMkFycmF5KG51bVNwbGl0VmFsdWVzICogZGltKVxuICAgIHRoaXMuX19zcGxpdFZhbHVlcyA9IFtdXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1TcGxpdFZhbHVlczsgaSsrKSB7XG4gICAgICBjb25zdCB2YWwgPSB0aGlzLl9fZGF0YVR5cGUuY3JlYXRlRnJvbUZsb2F0MzJBcnJheShzcGxpdFZhbHVlcy5zbGljZShpICogZGltLCBpICogZGltICsgZGltKSlcbiAgICAgIHRoaXMuX19zcGxpdFZhbHVlcy5wdXNoKHZhbClcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHsgVmVydGV4QXR0cmlidXRlIH1cbiIsIi8qIGVzbGludC1kaXNhYmxlIHJlcXVpcmUtanNkb2MgKi9cbi8qIGVzbGludC1kaXNhYmxlIGd1YXJkLWZvci1pbiAqL1xuaW1wb3J0IHsgVmVjMiwgVmVjMywgQm94MiwgQm94MyB9IGZyb20gJy4uLy4uL01hdGgvaW5kZXgnXG5pbXBvcnQgeyBQYXJhbWV0ZXJPd25lciB9IGZyb20gJy4uL1BhcmFtZXRlck93bmVyLmpzJ1xuaW1wb3J0IHsgQXR0cmlidXRlIH0gZnJvbSAnLi9BdHRyaWJ1dGUuanMnXG5pbXBvcnQgeyBSZWdpc3RyeSB9IGZyb20gJy4uLy4uL1JlZ2lzdHJ5J1xuaW1wb3J0IHsgVmVydGV4QXR0cmlidXRlIH0gZnJvbSAnLi9WZXJ0ZXhBdHRyaWJ1dGUnXG5cbi8vIERlZmluZXMgdXNlZCB0byBleHBsaWNpdHkgc3BlY2lmeSB0eXBlcyBmb3IgV2ViR0wuXG5mdW5jdGlvbiBpc1R5cGVkQXJyYXkob2JqKSB7XG4gIHJldHVybiAhIW9iaiAmJiBvYmouYnl0ZUxlbmd0aCAhPT0gdW5kZWZpbmVkXG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGJhc2UgY2xhc3MgZm9yIDNEIGdlb21ldHJ5IGl0ZW1zLlxuICpcbiAqICoqRXZlbnRzKipcbiAqICogKipib3VuZGluZ0JveENoYW5nZWQ6KiogVHJpZ2dlcmVkIHdoZW4gdGhlIGJvdW5kaW5nIGJveCBjaGFuZ2VzLlxuICogKiAqKmdlb21EYXRhQ2hhbmdlZDoqKiBFbWl0dGVkIHdoZW4gdGhlIGdlb21ldHJ5IGF0dHJpYnV0ZXMgaGF2ZSBjaGFuZ2VkLiBUaGUgdG9wb2xvZ3kgZGlkIG5vdCBjaGFuZ2UuIFRoZSBSZW5kZXJlciB3aWxsIHVwbG9hZCB0aGUgbmV3IGF0dHJpYnV0ZXMgdG8gdGhlIEdQVS5cbiAqICogKipnZW9tRGF0YVRvcG9sb2d5Q2hhbmdlZDoqKiBFbWl0dGVkIHdoZW4gdGhlIGdlb21ldHJ5IGF0dHJpYnV0ZXMgYW5kIHRvcG9sb2d5IGhhdmUgY2hhbmdlZC4gIFRoZSBSZW5kZXJlciB3aWxsIHVwbG9hZCB0aGUgbmV3IGF0dHJpYnV0ZXMgYW5kIHRvcG9sb2d5IHRvIHRoZSBHUFUuXG4gKlxuICogQGV4dGVuZHMgUGFyYW1ldGVyT3duZXJcbiAqL1xuY2xhc3MgQmFzZUdlb20gZXh0ZW5kcyBQYXJhbWV0ZXJPd25lciB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBiYXNlIGdlb20uXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5fX251bVZlcnRpY2VzID0gMFxuICAgIHRoaXMuX19ib3VuZGluZ0JveCA9IG5ldyBCb3gzKClcbiAgICB0aGlzLl9fYm91bmRpbmdCb3hEaXJ0eSA9IHRydWVcbiAgICB0aGlzLl9fdmVydGV4QXR0cmlidXRlcyA9IG5ldyBNYXAoKVxuICAgIHRoaXMuX19tZXRhRGF0YSA9IG5ldyBNYXAoKVxuICAgIHRoaXMuYWRkVmVydGV4QXR0cmlidXRlKCdwb3NpdGlvbnMnLCBWZWMzLCAwLjApXG4gIH1cblxuICAvKipcbiAgICogVGhlIGNsZWFyIG1ldGhvZC5cbiAgICovXG4gIGNsZWFyKCkge1xuICAgIHRoaXMuc2V0TnVtVmVydGljZXMoMClcbiAgfVxuXG4gIC8qKlxuICAgKiBFc3RhYmxpc2hlcyBhIG5hbWUgZm9yIHRoZSBnZW9tZXRyeS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgZGVidWcgbmFtZSB2YWx1ZS5cbiAgICovXG4gIHNldERlYnVnTmFtZShuYW1lKSB7XG4gICAgdGhpcy5fX25hbWUgPSBuYW1lXG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIG5ldyB2ZXJ0ZXggYXR0cmlidXRlIHRvIHRoZSBnZW9tZXRyeS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgdmVydGV4IGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHtBdHRyVmFsdWV8bnVtYmVyfSBkYXRhVHlwZSAtIFRoZSBkYXRhVHlwZSB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGRlZmF1bHRTY2FsYXJWYWx1ZSAtIFRoZSBkZWZhdWx0IHNjYWxhciB2YWx1ZS5cbiAgICogQHJldHVybiB7QXR0cmlidXRlfSAtIFJldHVybnMgYW4gYXR0cmlidXRlLlxuICAgKi9cbiAgYWRkVmVydGV4QXR0cmlidXRlKG5hbWUsIGRhdGFUeXBlLCBkZWZhdWx0U2NhbGFyVmFsdWUgPSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBwb3NpdGlvbnMgPSB0aGlzLmdldFZlcnRleEF0dHJpYnV0ZSgncG9zaXRpb25zJylcbiAgICBsZXQgYXR0clxuICAgIGlmIChpc1R5cGVkQXJyYXkoZGVmYXVsdFNjYWxhclZhbHVlKSkge1xuICAgICAgYXR0ciA9IG5ldyBBdHRyaWJ1dGUoZGF0YVR5cGUsIGRlZmF1bHRTY2FsYXJWYWx1ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgYXR0ciA9IG5ldyBBdHRyaWJ1dGUoZGF0YVR5cGUsIHBvc2l0aW9ucyAhPSB1bmRlZmluZWQgPyBwb3NpdGlvbnMubGVuZ3RoIDogMCwgZGVmYXVsdFNjYWxhclZhbHVlKVxuICAgIH1cbiAgICB0aGlzLl9fdmVydGV4QXR0cmlidXRlcy5zZXQobmFtZSwgYXR0cilcbiAgICByZXR1cm4gYXR0clxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgdGhlIGdlb21ldHJ5IGhhcyBhbiBhdHRyaWJ1dGUgd2l0aCB0aGUgc3BlY2lmaWVkIG5hbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHZlcnRleCBhdHRyaWJ1dGUuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGhhc1ZlcnRleEF0dHJpYnV0ZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX192ZXJ0ZXhBdHRyaWJ1dGVzLmhhcyhuYW1lKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdmVydGV4IGF0dHJpYnV0ZSB3aXRoIHRoZSBzcGVjaWZpZWQgbmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgdmVydGV4IGF0dHJpYnV0ZS5cbiAgICogQHJldHVybiB7QXR0cmlidXRlfSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBnZXRWZXJ0ZXhBdHRyaWJ1dGUobmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9fdmVydGV4QXR0cmlidXRlcy5nZXQobmFtZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFsbCB2ZXJ0ZXggYXR0cmlidXRlcyBpbiBhbiBvYmplY3Qgd2l0aCB0aGVpciBuYW1lcy5cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBnZXRWZXJ0ZXhBdHRyaWJ1dGVzKCkge1xuICAgIGNvbnN0IHZlcnRleEF0dHJpYnV0ZXMgPSB7fVxuICAgIGZvciAoY29uc3QgW2tleSwgYXR0cl0gb2YgdGhpcy5fX3ZlcnRleEF0dHJpYnV0ZXMuZW50cmllcygpKSB2ZXJ0ZXhBdHRyaWJ1dGVzW2tleV0gPSBhdHRyXG4gICAgcmV0dXJuIHZlcnRleEF0dHJpYnV0ZXNcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zICdwb3NpdGlvbnMnIHZlcnRleCBhdHRyaWJ1dGUuXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBnZXQgdmVydGljZXMoKSB7XG4gICAgY29uc29sZS53YXJuKFwiZGVwcmVjYXRlZCB1c2UgI2dldFZlcnRleEF0dHJpYnV0ZSgncG9zaXRpb25zJylcIilcbiAgICByZXR1cm4gdGhpcy5fX3ZlcnRleEF0dHJpYnV0ZXMuZ2V0KCdwb3NpdGlvbnMnKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG51bWJlciBvZiB2ZXJ0ZXggYXR0cmlidXRlcy5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBudW1WZXJ0aWNlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fX251bVZlcnRpY2VzXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHZlcnRleCBhdHRyaWJ1dGVzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGdldE51bVZlcnRpY2VzKCkge1xuICAgIHJldHVybiB0aGlzLl9fbnVtVmVydGljZXNcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBudW1iZXIgb2YgdmVydGljZXMgdGhlIGdlb21ldHJ5IGhhcy5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNvdW50IC0gVGhlIGNvdW50IHZhbHVlLlxuICAgKi9cbiAgc2V0TnVtVmVydGljZXMoY291bnQpIHtcbiAgICB0aGlzLl9fbnVtVmVydGljZXMgPSBjb3VudFxuICAgIC8vIFJlc2l6ZXMgZWFjaCBvZiB0aGUgdmVydGV4IGF0dHJpYnV0ZXMgdG8gbWF0Y2ggdGhlIG5ldyBjb3VudC5cbiAgICB0aGlzLl9fdmVydGV4QXR0cmlidXRlcy5mb3JFYWNoKChhdHRyKSA9PiBhdHRyLnJlc2l6ZSh0aGlzLl9fbnVtVmVydGljZXMpKVxuICAgIHRoaXMuc2V0Qm91bmRpbmdCb3hEaXJ0eSgpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcG9zaXRpb24gYXR0cmlidXRlIHZhbHVlIG9mIHRoZSBnaXZlbiB2ZXJ0ZXhcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IHZhbHVlLlxuICAgKiBAcmV0dXJuIHtWZWMzfSAtIFJldHVybnMgYSBWZWMzLlxuICAgKi9cbiAgZ2V0VmVydGV4KGluZGV4KSB7XG4gICAgY29uc29sZS53YXJuKGBkZXByZWNhdGVkIHVzZSAjZ2V0VmVydGV4QXR0cmlidXRlKCdwb3NpdGlvbnMnKS5nZXRWYWx1ZVJlZigpYClcbiAgICByZXR1cm4gVmVjMy5jcmVhdGVGcm9tQnVmZmVyKHRoaXMudmVydGljZXMuZGF0YS5idWZmZXIsIGluZGV4ICogMyAqIDQpXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgcG9zaXRpb24gYXR0cmlidXRlIHZhbHVlIG9mIHRoZSBnaXZlbiB2ZXJ0ZXhcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQHBhcmFtIHtpbmRleH0gaW5kZXggLSBUaGUgaW5kZXggdmFsdWUuXG4gICAqIEBwYXJhbSB7VmVjM30gdmFsdWUgLSBUaGUgdmFsdWUgdmFsdWUuXG4gICAqIEByZXR1cm4ge1ZlYzN9IC0gUmV0dXJucyBhIFZlYzMuXG4gICAqL1xuICBzZXRWZXJ0ZXgoaW5kZXgsIHZhbHVlKSB7XG4gICAgY29uc29sZS53YXJuKGBkZXByZWNhdGVkIHVzZSAjZ2V0VmVydGV4QXR0cmlidXRlKCdwb3NpdGlvbnMnKS5nZXRWYWx1ZVJlZigpLnNldEZyb21PdGhlcih2YWx1ZSlgKVxuICAgIHJldHVybiBWZWMzLmNyZWF0ZUZyb21CdWZmZXIodGhpcy52ZXJ0aWNlcy5kYXRhLmJ1ZmZlciwgaW5kZXggKiAzICogNCkuc2V0RnJvbU90aGVyKHZhbHVlKVxuICB9XG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgYW4gb2Zmc2V0IHRvIGVhY2ggb2YgdGhlIHZlcnRpY2VzIGluIHRoZSBnZW9tZXRyeS5cbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQHBhcmFtIHtWZWMzfSBkZWx0YSAtIFRoZSBkZWx0YSB2YWx1ZS5cbiAgICovXG4gIG1vdmVWZXJ0aWNlcyhkZWx0YSkge1xuICAgIGNvbnNvbGUud2FybihgZGVwcmVjYXRlZCB1c2UgI2dldFZlcnRleEF0dHJpYnV0ZSgncG9zaXRpb25zJykuZ2V0VmFsdWVSZWYoKWApXG4gICAgY29uc3QgdmVydGljZXMgPSB0aGlzLnZlcnRpY2VzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0aWNlcy5sZW5ndGg7IGkrKykgdmVydGljZXMuZ2V0VmFsdWVSZWYoaSkuYWRkSW5QbGFjZShkZWx0YSlcbiAgICB0aGlzLnNldEJvdW5kaW5nQm94RGlydHkoKVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB0cmFuc2Zvcm1WZXJ0aWNlcyBtZXRob2QuXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIEBwYXJhbSB7WGZvfSB4Zm8gLSBUaGUgeGZvIHRyYW5zZm9ybS5cbiAgICovXG4gIHRyYW5zZm9ybVZlcnRpY2VzKHhmbykge1xuICAgIGNvbnNvbGUud2FybihgZGVwcmVjYXRlZCwgcGxlYXNlIHRyYW5zZm9ybSB0aGUgdmVydGljZXMgbWFudWFsbHlgKVxuICAgIGNvbnN0IHZlcnRpY2VzID0gdGhpcy5fX3ZlcnRleEF0dHJpYnV0ZXMuZ2V0KCdwb3NpdGlvbnMnKVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmVydGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHYgPSB2ZXJ0aWNlcy5nZXRWYWx1ZVJlZihpKVxuICAgICAgY29uc3QgdjIgPSB4Zm8udHJhbnNmb3JtVmVjMyh2KVxuICAgICAgdi5zZXQodjIueCwgdjIueSwgdjIueilcbiAgICB9XG4gICAgdGhpcy5zZXRCb3VuZGluZ0JveERpcnR5KClcbiAgfVxuXG4gIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gQm91bmRpbmdCb3hcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYm91bmRpbmcgYm94IGZvciBnZW9tZXRyeS5cbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQHJldHVybiB7VmVjM30gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgZ2V0IGJvdW5kaW5nQm94KCkge1xuICAgIGNvbnNvbGUud2FybihgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSAjZ2V0Qm91bmRpbmdCb3goKWApXG4gICAgaWYgKHRoaXMuX19ib3VuZGluZ0JveERpcnR5KSB0aGlzLnVwZGF0ZUJvdW5kaW5nQm94KClcbiAgICByZXR1cm4gdGhpcy5fX2JvdW5kaW5nQm94XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYm91bmRpbmcgYm94IGZvciBnZW9tZXRyeS5cbiAgICogQHJldHVybiB7VmVjM30gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgZ2V0Qm91bmRpbmdCb3goKSB7XG4gICAgaWYgKHRoaXMuX19ib3VuZGluZ0JveERpcnR5KSB0aGlzLnVwZGF0ZUJvdW5kaW5nQm94KClcbiAgICByZXR1cm4gdGhpcy5fX2JvdW5kaW5nQm94XG4gIH1cblxuICAvKipcbiAgICogVGhlIHNldEJvdW5kaW5nQm94RGlydHkgbWV0aG9kLlxuICAgKi9cbiAgc2V0Qm91bmRpbmdCb3hEaXJ0eSgpIHtcbiAgICBpZiAoIXRoaXMuX19ib3VuZGluZ0JveERpcnR5KSB7XG4gICAgICB0aGlzLl9fYm91bmRpbmdCb3hEaXJ0eSA9IHRydWVcbiAgICAgIHRoaXMuZW1pdCgnYm91bmRpbmdCb3hDaGFuZ2VkJywge30pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB1cGRhdGVCb3VuZGluZ0JveCBtZXRob2QuXG4gICAqL1xuICB1cGRhdGVCb3VuZGluZ0JveCgpIHtcbiAgICBjb25zdCBwb3NpdGlvbnMgPSB0aGlzLmdldFZlcnRleEF0dHJpYnV0ZSgncG9zaXRpb25zJylcbiAgICBjb25zdCBiYm94ID0gbmV3IEJveDMoKVxuICAgIGNvbnN0IG51bVZlcnRzID0gcG9zaXRpb25zLmxlbmd0aFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVmVydHM7IGkrKykgYmJveC5hZGRQb2ludChwb3NpdGlvbnMuZ2V0VmFsdWVSZWYoaSkpXG4gICAgdGhpcy5fX2JvdW5kaW5nQm94ID0gYmJveFxuICAgIHRoaXMuX19ib3VuZGluZ0JveERpcnR5ID0gZmFsc2VcbiAgfVxuXG4gIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gTWV0YWRhdGFcblxuICAvKipcbiAgICogUmV0dXJucyBtZXRhZGF0YSB2YWx1ZSBvZiB0aGUgc3BlY2lmaWVkIG5hbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IHZhbHVlLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGdldE1ldGFkYXRhKGtleSkge1xuICAgIHJldHVybiB0aGlzLl9fbWV0YURhdGEuZ2V0KGtleSlcbiAgfVxuXG4gIC8qKlxuICAgKiBWZXJpZmllcyBpZiBnZW9tZXRyeSdzIG1ldGFkYXRhIGNvbnRhaW5zIGEgdmFsdWUgd2l0aCB0aGUgc3BlY2lmaWVkIGtleS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBrZXkgdmFsdWUuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGhhc01ldGFkYXRhKGtleSkge1xuICAgIHJldHVybiB0aGlzLl9fbWV0YURhdGEuaGFzKGtleSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIG1ldGFkYXRhIHZhbHVlIHRvIHRoZSBnZW9tZXRyeS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBrZXkgdmFsdWUuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBtZXRhRGF0YSAtIFRoZSBtZXRhRGF0YSB2YWx1ZS5cbiAgICovXG4gIHNldE1ldGFkYXRhKGtleSwgbWV0YURhdGEpIHtcbiAgICB0aGlzLl9fbWV0YURhdGEuc2V0KGtleSwgbWV0YURhdGEpXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBtZXRhZGF0YSB2YWx1ZSBmcm9tIHRoZSBnZW9tZXRyeSB3aXRoIHRoZSBzcGVjaWZpZWQga2V5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSB2YWx1ZS5cbiAgICovXG4gIGRlbGV0ZU1ldGFkYXRhKGtleSkge1xuICAgIHRoaXMuX19tZXRhRGF0YS5kZWxldGUoa2V5KVxuICB9XG5cbiAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBNZW1vcnlcblxuICAvKipcbiAgICogUmV0dXJucyB2ZXJ0ZXggYXR0cmlidXRlcyBidWZmZXJzIGFuZCBpdHMgY291bnQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIC0gVGhlIG9wdHMgdmFsdWUuXG4gICAqIEByZXR1cm4ge29iamVjdH0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgZ2VuQnVmZmVycyhvcHRzKSB7XG4gICAgY29uc3QgYXR0ckJ1ZmZlcnMgPSB7fVxuICAgIGZvciAoY29uc3QgW2F0dHJOYW1lLCBhdHRyXSBvZiB0aGlzLl9fdmVydGV4QXR0cmlidXRlcykge1xuICAgICAgYXR0ckJ1ZmZlcnNbYXR0ck5hbWVdID0ge1xuICAgICAgICB2YWx1ZXM6IGF0dHIuZGF0YSxcbiAgICAgICAgY291bnQ6IGF0dHIubGVuZ3RoLFxuICAgICAgICBkYXRhVHlwZTogYXR0ci5kYXRhVHlwZSxcbiAgICAgICAgbm9ybWFsaXplZDogYXR0ci5ub3JtYWxpemVkLFxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgbnVtVmVydGljZXM6IHRoaXMubnVtVmVydGljZXMoKSxcbiAgICAgIGF0dHJCdWZmZXJzLFxuICAgIH1cbiAgfVxuXG4gIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gUGVyc2lzdGVuY2VcbiAgLyoqXG4gICAqIFNldHMgc3RhdGUgb2YgY3VycmVudCBHZW9tZXRyeShJbmNsdWRpbmcgVmVydGljZXMgYW5kIEJvdW5kaW5nIEJveCkgdXNpbmcgYSBiaW5hcnkgcmVhZGVyIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHtCaW5SZWFkZXJ9IHJlYWRlciAtIFRoZSByZWFkZXIgdmFsdWUuXG4gICAqL1xuICBsb2FkQmFzZUdlb21CaW5hcnkocmVhZGVyKSB7XG4gICAgdGhpcy5uYW1lID0gcmVhZGVyLmxvYWRTdHIoKVxuICAgIGNvbnN0IGZsYWdzID0gcmVhZGVyLmxvYWRVSW50OCgpXG4gICAgdGhpcy5kZWJ1Z0NvbG9yID0gcmVhZGVyLmxvYWRSR0JGbG9hdDMyQ29sb3IoKVxuICAgIGNvbnN0IG51bVZlcnRzID0gcmVhZGVyLmxvYWRVSW50MzIoKVxuICAgIHRoaXMuX19ib3VuZGluZ0JveC5zZXQocmVhZGVyLmxvYWRGbG9hdDMyVmVjMygpLCByZWFkZXIubG9hZEZsb2F0MzJWZWMzKCkpXG5cbiAgICB0aGlzLnNldE51bVZlcnRpY2VzKG51bVZlcnRzKVxuICAgIGNvbnN0IHBvc2l0aW9uc0F0dHIgPSB0aGlzLmdldFZlcnRleEF0dHJpYnV0ZSgncG9zaXRpb25zJylcblxuICAgIGxldCBub3JtYWxzQXR0clxuICAgIGxldCB0ZXhDb29yZHNBdHRyXG4gICAgaWYgKGZsYWdzICYgKDEgPDwgMSkpIHtcbiAgICAgIG5vcm1hbHNBdHRyID0gdGhpcy5nZXRWZXJ0ZXhBdHRyaWJ1dGUoJ25vcm1hbHMnKVxuICAgICAgaWYgKCFub3JtYWxzQXR0cikgbm9ybWFsc0F0dHIgPSB0aGlzLmFkZFZlcnRleEF0dHJpYnV0ZSgnbm9ybWFscycsIFZlYzMsIDAuMClcbiAgICB9XG4gICAgaWYgKGZsYWdzICYgKDEgPDwgMikpIHtcbiAgICAgIHRleENvb3Jkc0F0dHIgPSB0aGlzLmdldFZlcnRleEF0dHJpYnV0ZSgndGV4Q29vcmRzJylcbiAgICAgIGlmICghdGV4Q29vcmRzQXR0cikgdGV4Q29vcmRzQXR0ciA9IHRoaXMuYWRkVmVydGV4QXR0cmlidXRlKCd0ZXhDb29yZHMnLCBWZWMyLCAwLjApXG4gICAgfVxuXG4gICAgY29uc3QgcGFyc2U4Qml0UG9zaXRpb25zQXJyYXkgPSAocmFuZ2UsIG9mZnNldCwgc2NsVmVjLCBwb3NpdGlvbnM4Yml0KSA9PiB7XG4gICAgICBmb3IgKGxldCBpID0gcmFuZ2VbMF07IGkgPCByYW5nZVsxXTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHBvcyA9IG5ldyBWZWMzKFxuICAgICAgICAgIHBvc2l0aW9uczhiaXRbaSAqIDMgKyAwXSAvIDI1NS4wLFxuICAgICAgICAgIHBvc2l0aW9uczhiaXRbaSAqIDMgKyAxXSAvIDI1NS4wLFxuICAgICAgICAgIHBvc2l0aW9uczhiaXRbaSAqIDMgKyAyXSAvIDI1NS4wXG4gICAgICAgIClcbiAgICAgICAgcG9zLm11bHRpcGx5SW5QbGFjZShzY2xWZWMpXG4gICAgICAgIHBvcy5hZGRJblBsYWNlKG9mZnNldClcbiAgICAgICAgcG9zaXRpb25zQXR0ci5zZXRWYWx1ZShpLCBwb3MpXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcGFyc2U4Qml0Tm9ybWFsc0FycmF5ID0gKHJhbmdlLCBvZmZzZXQsIHNjbFZlYywgbm9ybWFsczhiaXQpID0+IHtcbiAgICAgIGlmIChzY2xWZWMuaXNOdWxsKCkpIHNjbFZlYy5zZXQoMSwgMSwgMSlcbiAgICAgIGZvciAobGV0IGkgPSByYW5nZVswXTsgaSA8IHJhbmdlWzFdOyBpKyspIHtcbiAgICAgICAgY29uc3Qgbm9ybWFsID0gbmV3IFZlYzMoXG4gICAgICAgICAgbm9ybWFsczhiaXRbaSAqIDMgKyAwXSAvIDI1NS4wLFxuICAgICAgICAgIG5vcm1hbHM4Yml0W2kgKiAzICsgMV0gLyAyNTUuMCxcbiAgICAgICAgICBub3JtYWxzOGJpdFtpICogMyArIDJdIC8gMjU1LjBcbiAgICAgICAgKVxuICAgICAgICBub3JtYWwubXVsdGlwbHlJblBsYWNlKHNjbFZlYylcbiAgICAgICAgbm9ybWFsLmFkZEluUGxhY2Uob2Zmc2V0KVxuICAgICAgICBub3JtYWwubm9ybWFsaXplSW5QbGFjZSgpXG4gICAgICAgIG5vcm1hbHNBdHRyLnNldFZhbHVlKGksIG5vcm1hbClcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcGFyc2U4Qml0VGV4dHVyZUNvb3Jkc0FycmF5ID0gKHJhbmdlLCBvZmZzZXQsIHNjbFZlYywgdGV4Q29vcmRzOGJpdCkgPT4ge1xuICAgICAgLy8gaWYgKHNjbFZlYy5pc051bGwoKSlcbiAgICAgIC8vICAgICBzY2xWZWMuc2V0KDEsIDEsIDEpO1xuICAgICAgZm9yIChsZXQgaSA9IHJhbmdlWzBdOyBpIDwgcmFuZ2VbMV07IGkrKykge1xuICAgICAgICBjb25zdCB0ZXh0dXJlQ29vcmQgPSBuZXcgVmVjMih0ZXhDb29yZHM4Yml0W2kgKiAyICsgMF0gLyAyNTUuMCwgdGV4Q29vcmRzOGJpdFtpICogMiArIDFdIC8gMjU1LjApXG4gICAgICAgIHRleHR1cmVDb29yZC5tdWx0aXBseUluUGxhY2Uoc2NsVmVjKVxuICAgICAgICB0ZXh0dXJlQ29vcmQuYWRkSW5QbGFjZShvZmZzZXQpXG4gICAgICAgIHRleENvb3Jkc0F0dHIuc2V0VmFsdWUoaSwgdGV4dHVyZUNvb3JkKVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IG51bUNsdXN0ZXJzID0gcmVhZGVyLmxvYWRVSW50MzIoKVxuICAgIGlmIChudW1DbHVzdGVycyA9PSAxKSB7XG4gICAgICB7XG4gICAgICAgIGNvbnN0IGJveDMgPSB0aGlzLl9fYm91bmRpbmdCb3hcbiAgICAgICAgY29uc3QgcG9zaXRpb25zOGJpdCA9IHJlYWRlci5sb2FkVUludDhBcnJheShudW1WZXJ0cyAqIDMpXG4gICAgICAgIHBhcnNlOEJpdFBvc2l0aW9uc0FycmF5KFswLCBudW1WZXJ0c10sIGJveDMucDAsIGJveDMuZGlhZ29uYWwoKSwgcG9zaXRpb25zOGJpdClcbiAgICAgIH1cblxuICAgICAgaWYgKG5vcm1hbHNBdHRyKSB7XG4gICAgICAgIGNvbnN0IGJveDMgPSBuZXcgQm94MyhyZWFkZXIubG9hZEZsb2F0MzJWZWMzKCksIHJlYWRlci5sb2FkRmxvYXQzMlZlYzMoKSlcbiAgICAgICAgY29uc3Qgbm9ybWFsczhiaXQgPSByZWFkZXIubG9hZFVJbnQ4QXJyYXkobnVtVmVydHMgKiAzKVxuICAgICAgICBwYXJzZThCaXROb3JtYWxzQXJyYXkoWzAsIG51bVZlcnRzXSwgYm94My5wMCwgYm94My5kaWFnb25hbCgpLCBub3JtYWxzOGJpdClcblxuICAgICAgICBub3JtYWxzQXR0ci5sb2FkU3BsaXRWYWx1ZXMocmVhZGVyKVxuICAgICAgfVxuICAgICAgaWYgKHRleENvb3Jkc0F0dHIpIHtcbiAgICAgICAgY29uc3QgYm94MiA9IG5ldyBCb3gyKHJlYWRlci5sb2FkRmxvYXQzMlZlYzIoKSwgcmVhZGVyLmxvYWRGbG9hdDMyVmVjMigpKVxuICAgICAgICBjb25zdCB0ZXhDb29yZHM4Yml0ID0gcmVhZGVyLmxvYWRVSW50OEFycmF5KG51bVZlcnRzICogMilcbiAgICAgICAgcGFyc2U4Qml0VGV4dHVyZUNvb3Jkc0FycmF5KFswLCBudW1WZXJ0c10sIGJveDIucDAsIGJveDIuZGlhZ29uYWwoKSwgdGV4Q29vcmRzOGJpdClcblxuICAgICAgICB0ZXhDb29yZHNBdHRyLmxvYWRTcGxpdFZhbHVlcyhyZWFkZXIpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGNsdXN0ZXJzID0gW11cbiAgICAgIGxldCBvZmZzZXQgPSAwXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUNsdXN0ZXJzOyBpKyspIHtcbiAgICAgICAgY29uc3QgY291bnQgPSByZWFkZXIubG9hZFVJbnQzMigpXG4gICAgICAgIGNvbnN0IGJveDMgPSBuZXcgQm94MyhyZWFkZXIubG9hZEZsb2F0MzJWZWMzKCksIHJlYWRlci5sb2FkRmxvYXQzMlZlYzMoKSlcbiAgICAgICAgY29uc3QgY2x1c3RlckRhdGEgPSB7XG4gICAgICAgICAgcmFuZ2U6IFtvZmZzZXQsIG9mZnNldCArIGNvdW50XSxcbiAgICAgICAgICBiYm94OiBib3gzLFxuICAgICAgICB9XG4gICAgICAgIGlmIChub3JtYWxzQXR0cikge1xuICAgICAgICAgIGNsdXN0ZXJEYXRhLm5vcm1hbHNSYW5nZSA9IG5ldyBCb3gzKHJlYWRlci5sb2FkRmxvYXQzMlZlYzMoKSwgcmVhZGVyLmxvYWRGbG9hdDMyVmVjMygpKVxuICAgICAgICB9XG4gICAgICAgIGlmICh0ZXhDb29yZHNBdHRyKSB7XG4gICAgICAgICAgY2x1c3RlckRhdGEudGV4Q29vcmRzUmFuZ2UgPSBuZXcgQm94MihyZWFkZXIubG9hZEZsb2F0MzJWZWMyKCksIHJlYWRlci5sb2FkRmxvYXQzMlZlYzIoKSlcbiAgICAgICAgfVxuXG4gICAgICAgIGNsdXN0ZXJzLnB1c2goY2x1c3RlckRhdGEpXG4gICAgICAgIG9mZnNldCArPSBjb3VudFxuICAgICAgfVxuICAgICAgY29uc3QgcG9zaXRpb25zOGJpdCA9IHJlYWRlci5sb2FkVUludDhBcnJheShudW1WZXJ0cyAqIDMpXG4gICAgICBsZXQgbm9ybWFsczhiaXRcbiAgICAgIGxldCB0ZXhDb29yZHM4Yml0XG4gICAgICBpZiAobm9ybWFsc0F0dHIpIHtcbiAgICAgICAgbm9ybWFsczhiaXQgPSByZWFkZXIubG9hZFVJbnQ4QXJyYXkobnVtVmVydHMgKiAzKVxuICAgICAgfVxuICAgICAgaWYgKHRleENvb3Jkc0F0dHIpIHtcbiAgICAgICAgdGV4Q29vcmRzOGJpdCA9IHJlYWRlci5sb2FkVUludDhBcnJheShudW1WZXJ0cyAqIDIpXG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtQ2x1c3RlcnM7IGkrKykge1xuICAgICAgICB7XG4gICAgICAgICAgY29uc3QgYm94MyA9IGNsdXN0ZXJzW2ldLmJib3hcbiAgICAgICAgICBwYXJzZThCaXRQb3NpdGlvbnNBcnJheShjbHVzdGVyc1tpXS5yYW5nZSwgYm94My5wMCwgYm94My5kaWFnb25hbCgpLCBwb3NpdGlvbnM4Yml0KVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5vcm1hbHNBdHRyKSB7XG4gICAgICAgICAgY29uc3QgYm94MyA9IGNsdXN0ZXJzW2ldLm5vcm1hbHNSYW5nZVxuICAgICAgICAgIHBhcnNlOEJpdE5vcm1hbHNBcnJheShjbHVzdGVyc1tpXS5yYW5nZSwgYm94My5wMCwgYm94My5kaWFnb25hbCgpLCBub3JtYWxzOGJpdClcbiAgICAgICAgfVxuICAgICAgICBpZiAodGV4Q29vcmRzQXR0cikge1xuICAgICAgICAgIGNvbnN0IGJveDIgPSBjbHVzdGVyc1tpXS50ZXhDb29yZHNSYW5nZVxuICAgICAgICAgIHBhcnNlOEJpdFRleHR1cmVDb29yZHNBcnJheShjbHVzdGVyc1tpXS5yYW5nZSwgYm94Mi5wMCwgYm94Mi5kaWFnb25hbCgpLCB0ZXhDb29yZHM4Yml0KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobm9ybWFsc0F0dHIpIHtcbiAgICAgICAgbm9ybWFsc0F0dHIubG9hZFNwbGl0VmFsdWVzKHJlYWRlcilcbiAgICAgIH1cbiAgICAgIGlmICh0ZXhDb29yZHNBdHRyKSB7XG4gICAgICAgIHRleENvb3Jkc0F0dHIubG9hZFNwbGl0VmFsdWVzKHJlYWRlcilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhlIHRvSlNPTiBtZXRob2QgZW5jb2RlcyB0aGlzIHR5cGUgYXMgYSBqc29uIG9iamVjdCBmb3IgcGVyc2lzdGVuY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0IC0gVGhlIGNvbnRleHQgdmFsdWUuXG4gICAqIEByZXR1cm4ge29iamVjdH0gLSBSZXR1cm5zIHRoZSBqc29uIG9iamVjdC5cbiAgICovXG4gIHRvSlNPTihjb250ZXh0KSB7XG4gICAgbGV0IGpzb24gPSBzdXBlci50b0pTT04oY29udGV4dClcbiAgICBpZiAoIWpzb24pIGpzb24gPSB7fVxuICAgIGpzb24udHlwZSA9IFJlZ2lzdHJ5LmdldEJsdWVwcmludE5hbWUodGhpcylcbiAgICBpZiAoIWNvbnRleHQgfHwgIWNvbnRleHQuc2tpcFRvcG9sb2d5KSB7XG4gICAgICBqc29uLm51bVZlcnRpY2VzID0gdGhpcy5fX251bVZlcnRpY2VzIHx8IDBcbiAgICB9XG5cbiAgICBjb25zdCB2ZXJ0ZXhBdHRyaWJ1dGVzID0ge31cbiAgICBmb3IgKGNvbnN0IFtrZXksIGF0dHJdIG9mIHRoaXMuX192ZXJ0ZXhBdHRyaWJ1dGVzLmVudHJpZXMoKSkge1xuICAgICAgaWYgKCFjb250ZXh0IHx8ICEoJ3NraXBBdHRyaWJ1dGVzJyBpbiBjb250ZXh0KSB8fCAhY29udGV4dC5za2lwQXR0cmlidXRlcy5pbmNsdWRlcyhrZXkpKVxuICAgICAgICB2ZXJ0ZXhBdHRyaWJ1dGVzW2tleV0gPSBhdHRyLnRvSlNPTihjb250ZXh0KVxuICAgIH1cbiAgICBqc29uLnZlcnRleEF0dHJpYnV0ZXMgPSB2ZXJ0ZXhBdHRyaWJ1dGVzXG5cbiAgICByZXR1cm4ganNvblxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBmcm9tSlNPTiBtZXRob2QgZGVjb2RlcyBhIGpzb24gb2JqZWN0IGZvciB0aGlzIHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBqc29uIC0gVGhlIGpzb24gb2JqZWN0IHRoaXMgaXRlbSBtdXN0IGRlY29kZS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHQgLSBUaGUgY29udGV4dCB2YWx1ZS5cbiAgICovXG4gIGZyb21KU09OKGpzb24sIGNvbnRleHQpIHtcbiAgICB0aGlzLmNsZWFyKClcbiAgICBzdXBlci5mcm9tSlNPTihqc29uLCBjb250ZXh0KVxuICAgIGlmIChqc29uLm51bVZlcnRpY2VzKSB0aGlzLnNldE51bVZlcnRpY2VzKGpzb24ubnVtVmVydGljZXMpXG4gICAgaWYgKGpzb24udmVydGV4QXR0cmlidXRlcykge1xuICAgICAgZm9yIChjb25zdCBuYW1lIGluIGpzb24udmVydGV4QXR0cmlidXRlcykge1xuICAgICAgICBsZXQgYXR0ciA9IHRoaXMuX192ZXJ0ZXhBdHRyaWJ1dGVzLmdldChuYW1lKVxuICAgICAgICBjb25zdCBhdHRySlNPTiA9IGpzb24udmVydGV4QXR0cmlidXRlc1tuYW1lXVxuICAgICAgICBpZiAoIWF0dHIpIHtcbiAgICAgICAgICBjb25zdCBkYXRhVHlwZSA9IFJlZ2lzdHJ5LmdldEJsdWVwcmludChhdHRySlNPTi5kYXRhVHlwZSlcbiAgICAgICAgICBhdHRyID0gbmV3IFZlcnRleEF0dHJpYnV0ZSh0aGlzLCBkYXRhVHlwZSwgMCwgYXR0ckpTT04uZGVmYXVsdFNjYWxhclZhbHVlKVxuICAgICAgICAgIHRoaXMuX192ZXJ0ZXhBdHRyaWJ1dGVzLnNldChuYW1lLCBhdHRyKVxuICAgICAgICB9XG4gICAgICAgIGF0dHIuZnJvbUpTT04oYXR0ckpTT04pXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZW1pdCgnZ2VvbURhdGFUb3BvbG9neUNoYW5nZWQnKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZ2VvbWV0cnkgZGF0YSB2YWx1ZSBpbiBqc29uIGZvcm1hdC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy50b0pTT04oKSwgbnVsbCwgMilcbiAgfVxufVxuZXhwb3J0IHsgQmFzZUdlb20gfVxuIiwiLyogZXNsaW50LWRpc2FibGUgZ3VhcmQtZm9yLWluICovXG4vKiBlc2xpbnQtZGlzYWJsZSB2YWxpZC1qc2RvYyAqL1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnLi4vVXRpbGl0aWVzL0V2ZW50RW1pdHRlcidcbmltcG9ydCB7IFJlZ2lzdHJ5IH0gZnJvbSAnLi4vUmVnaXN0cnknXG5cbi8qKlxuICogQ2xhc3MgdGhhdCBhbGxvd3Mgb3RoZXIgY2xhc3NlcyB0byBiZSBwYXJhbWV0ZXJpemVkIGJ5IGBQYXJhbWV0ZXJgIHR5cGUgb2Ygb2JqZWN0cy5cbiAqIE5vdCBvbmx5IGhvc3RpbmcgcGFyYW1ldGVycywgYnV0IHRoZWlyIGV2ZW50cy5cbiAqXG4gKiBAZXh0ZW5kcyB7RXZlbnRFbWl0dGVyfVxuICovXG5jbGFzcyBQYXJhbWV0ZXJPd25lciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFBhcmFtZXRlck93bmVyIGJ5IGluaXRpYWxpemluZyBwYXJhbWV0ZXIgaG9zdGluZyBtYXBwaW5ncyBhbmQgZXZlbnRzLlxuICAgKiA8YnI+XG4gICAqIEV2ZXJ5IE9iamVjdCBoYXMgYSB1bmlxdWUgaWRlbnRpZmllciB3aGljaCBpcyBiYXNlZCBvbiBhIGNvdW50ZXIgdGhhdCBpcyBpbmNyZW1lbnRlZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLl9fcGFyYW1zID0gW11cbiAgICB0aGlzLl9fcGFyYW1NYXBwaW5nID0ge31cbiAgICB0aGlzLmRlcHJlY2F0ZWRQYXJhbU1hcHBpbmcgPSB7fVxuICAgIHRoaXMuX19wYXJhbUV2ZW50TGlzdGVuZXJJRHMgPSB7fVxuICB9XG5cbiAgLy8gLS0tIFBhcmFtcyAtLS1cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHBhcmFtZXRlcnMgY3VycmVudCBvYmplY3QgaGFzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gQW1vdW50IG9mIHBhcmFtZXRlcnMgaW4gY3VycmVudCBvYmplY3QuXG4gICAqL1xuICBudW1QYXJhbWV0ZXJzKCkge1xuICAgIGNvbnNvbGUud2FybignRGVwcmVjYXRlZC4gVXNlICNnZXROdW1QYXJhbWV0ZXJzIGluc3RlYWQuJylcbiAgICByZXR1cm4gdGhpcy5nZXROdW1QYXJhbWV0ZXJzKClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgcGFyYW1ldGVycyBjdXJyZW50IG9iamVjdCBoYXMuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBBbW91bnQgb2YgcGFyYW1ldGVycyBpbiBjdXJyZW50IG9iamVjdC5cbiAgICovXG4gIGdldE51bVBhcmFtZXRlcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19wYXJhbXMubGVuZ3RoXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbGwgdGhlIHBhcmFtZXRlcnMgb2YgdGhlIG9iamVjdC5cbiAgICpcbiAgICogQHJldHVybiB7YXJyYXl9IC0gUGFyYW1ldGVyIExpc3RcbiAgICovXG4gIGdldFBhcmFtZXRlcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19wYXJhbXNcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpbmRleCBvZiBhIHBhcmFtZXRlciBpbiBwYXJhbWV0ZXIgbGlzdC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtTmFtZSAtIE5hbWUgb2YgdGhlIHBhcmFtZXRlci5cbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFBvc2l0aW9uIGluIHRoZSBhcnJheVxuICAgKi9cbiAgZ2V0UGFyYW1ldGVySW5kZXgocGFyYW1OYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX19wYXJhbU1hcHBpbmdbcGFyYW1OYW1lXVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYFBhcmFtZXRlcmAgb2JqZWN0IGluIGEgZ2l2ZW4gaW5kZXhcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gUG9zaXRpb24gb2YgdGhlIHBhcmFtZXRlciBpbiB0aGUgYXJyYXlcbiAgICogQHJldHVybiB7UGFyYW1ldGVyfSAtIFBhcmFtZXRlciBvYmplY3QgdmFsdWVcbiAgICovXG4gIGdldFBhcmFtZXRlckJ5SW5kZXgoaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5fX3BhcmFtc1tpbmRleF1cbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgaWYgdGhlIHNwZWNpZmllZCBwYXJhbWV0ZXIgZXhpc3RzIGluIHRoZSBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbU5hbWUgLSBUaGUgcGFyYW1ldGVyIG5hbWUuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGhhc1BhcmFtZXRlcihwYXJhbU5hbWUpIHtcbiAgICByZXR1cm4gcGFyYW1OYW1lIGluIHRoaXMuX19wYXJhbU1hcHBpbmdcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBtYXBwaW5nIGZyb20gb25lIG5hbWUgdG8gYSBuZXcgcGFyYW1ldGVyLlxuICAgKiBUaGlzIGlzIHVzZWQgdG8gaGFuZGxlIG1pZ3JhdGluZyBwYXJhbWV0ZXJzIHRvIG5ldyBuYW1lcy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBwYXJhbWV0ZXIgbmFtZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtTmFtZSAtIFRoZSBwYXJhbWV0ZXIgbmFtZS5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgYWRkUGFyYW1ldGVyRGVwcmVjYXRpb25NYXBwaW5nKGtleSwgcGFyYW1OYW1lKSB7XG4gICAgdGhpcy5kZXByZWNhdGVkUGFyYW1NYXBwaW5nW2tleV0gPSBwYXJhbU5hbWVcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGBQYXJhbWV0ZXJgIG9iamVjdCB1c2luZyB0aGUgZ2l2ZW4gbmFtZVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1OYW1lIC0gVGhlIHBhcmFtZXRlciBuYW1lLlxuICAgKiBAcmV0dXJuIHtQYXJhbWV0ZXJ9IC0gUGFyYW1ldGVyIG9iamVjdCB2YWx1ZVxuICAgKi9cbiAgZ2V0UGFyYW1ldGVyKHBhcmFtTmFtZSkge1xuICAgIGxldCBpbmRleCA9IHRoaXMuX19wYXJhbU1hcHBpbmdbcGFyYW1OYW1lXVxuICAgIGlmIChpbmRleCA9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IG5ld1BhcmFtTmFtZSA9IHRoaXMuZGVwcmVjYXRlZFBhcmFtTWFwcGluZ1twYXJhbU5hbWVdXG4gICAgICBpZiAoIW5ld1BhcmFtTmFtZSkgcmV0dXJuIG51bGxcbiAgICAgIGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oYFBhcmFtZXRlciBuYW1lICR7cGFyYW1OYW1lfSBpcyBub3cgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSAke25ld1BhcmFtTmFtZX0gaW5zdGVhZC5gKVxuICAgICAgICBpbmRleCA9IHRoaXMuX19wYXJhbU1hcHBpbmdbbmV3UGFyYW1OYW1lXVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fX3BhcmFtc1tpbmRleF1cbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgb3ZlcnJpZGRlbiBpbiBkZXJpdmVkIGNsYXNzZXNcbiAgICogdG8gcGVyZm9ybSBnZW5lcmFsIHVwZGF0ZXMgKHNlZSBHTFBhc3Mgb3IgQmFzZUl0ZW0pLlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgLSBUaGUgZXZlbnQgb2JqZWN0IGVtaXR0ZWQgYnkgdGhlIHBhcmFtZXRlci5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9fcGFyYW1ldGVyVmFsdWVDaGFuZ2VkKGV2ZW50KSB7XG4gICAgdGhpcy5lbWl0KCdwYXJhbWV0ZXJWYWx1ZUNoYW5nZWQnLCBldmVudClcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGBQYXJhbWV0ZXJgIG9iamVjdCB0byB0aGUgb3duZXIncyBwYXJhbWV0ZXIgbGlzdC5cbiAgICpcbiAgICogQGVtaXRzIGBwYXJhbWV0ZXJBZGRlZGAgd2l0aCB0aGUgbmFtZSBvZiB0aGUgcGFyYW0uXG4gICAqIEBwYXJhbSB7UGFyYW1ldGVyfSBwYXJhbSAtIFRoZSBwYXJhbWV0ZXIgdG8gYWRkLlxuICAgKiBAcmV0dXJuIHtQYXJhbWV0ZXJ9IC0gV2l0aCBgb3duZXJgIGFuZCBgdmFsdWVDaGFuZ2VkYCBldmVudCBzZXQuXG4gICAqL1xuICBhZGRQYXJhbWV0ZXIocGFyYW0pIHtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRQYXJhbWV0ZXIocGFyYW0sIHRoaXMuX19wYXJhbXMubGVuZ3RoKVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYFBhcmFtZXRlcmAgb2JqZWN0IHRvIHRoZSBvd25lcidzIHBhcmFtZXRlciBsaXN0IHVzaW5nIHRoZSBpbmRleC5cbiAgICogSXQgcmVwbGFjZXMgdGhlIGV2ZW50IGluIHRoZSBzcGVjaWZpZWQgaW5kZXguXG4gICAqXG4gICAqXG4gICAqIEBlbWl0cyBgcGFyYW1ldGVyQWRkZWRgIHdpdGggdGhlIG5hbWUgb2YgdGhlIHBhcmFtLlxuICAgKiBAcGFyYW0ge1BhcmFtZXRlcn0gcGFyYW0gLSBUaGUgcGFyYW1ldGVyIHRvIGluc2VydC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IHZhbHVlLlxuICAgKiBAcmV0dXJuIHtQYXJhbWV0ZXJ9IC0gV2l0aCBgb3duZXJgIGFuZCBgdmFsdWVDaGFuZ2VkYCBldmVudCBzZXQuXG4gICAqL1xuICBpbnNlcnRQYXJhbWV0ZXIocGFyYW0sIGluZGV4KSB7XG4gICAgY29uc3QgbmFtZSA9IHBhcmFtLmdldE5hbWUoKVxuICAgIGlmICh0aGlzLl9fcGFyYW1NYXBwaW5nW25hbWVdICE9IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS53YXJuKCdSZXBsYWNpbmcgUGFyYW1ldGVyOicgKyBuYW1lKVxuICAgICAgdGhpcy5yZW1vdmVQYXJhbWV0ZXIobmFtZSlcbiAgICB9XG4gICAgcGFyYW0uc2V0T3duZXIodGhpcylcbiBcblxuICAgIHRoaXMuX19wYXJhbUV2ZW50TGlzdGVuZXJJRHNbbmFtZV0gPSBwYXJhbS5vbigndmFsdWVDaGFuZ2VkJywgKGV2ZW50KSA9PiB7XG4gICAgICAvLyBOb3RlOiBzcHJlYWQgb3BlcmF0b3JzIGNhdXNlIGVycm9ycyBvbiBpT1MgMTEuXG4gICAgICBjb25zdCBuZXdFdmVudCA9IHsgcGFyYW0gfVxuICAgICAgZm9yIChjb25zdCBrZXkgaW4gZXZlbnQpIG5ld0V2ZW50W2tleV0gPSBldmVudFtrZXldXG4gICAgICB0aGlzLl9fcGFyYW1ldGVyVmFsdWVDaGFuZ2VkKG5ld0V2ZW50KVxuICAgIH0pXG5cbiAgICB0aGlzLl9fcGFyYW1zLnNwbGljZShpbmRleCwgMCwgcGFyYW0pXG5cbiAgICBmb3IgKGxldCBpID0gaW5kZXg7IGkgPCB0aGlzLl9fcGFyYW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLl9fcGFyYW1NYXBwaW5nW3RoaXMuX19wYXJhbXNbaV0uZ2V0TmFtZSgpXSA9IGlcbiAgICB9XG4gICAgdGhpcy5lbWl0KCdwYXJhbWV0ZXJBZGRlZCcsIHsgbmFtZSB9KVxuICAgIHJldHVybiBwYXJhbVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYFBhcmFtZXRlcmAgZnJvbSBvd25lciwgYnkgdXNpbmcgcGFyYW1ldGVyJ3MgbmFtZS5cbiAgICogQGVtaXRzIGBwYXJhbWV0ZXJSZW1vdmVkYCB3aXRoIHRoZSBuYW1lIG9mIHRoZSBwYXJhbS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgcGFyYW1ldGVyIG5hbWUuXG4gICAqL1xuICByZW1vdmVQYXJhbWV0ZXIobmFtZSkge1xuICAgIGlmICh0aGlzLl9fcGFyYW1NYXBwaW5nW25hbWVdID09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gcmVtb3ZlIFBhcmFtZXRlcjonICsgbmFtZSlcbiAgICB9XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLl9fcGFyYW1NYXBwaW5nW25hbWVdXG4gICAgY29uc3QgcGFyYW0gPSB0aGlzLl9fcGFyYW1zW3RoaXMuX19wYXJhbU1hcHBpbmdbbmFtZV1dXG5cbiAgICBwYXJhbS5yZW1vdmVMaXN0ZW5lckJ5SWQoJ3ZhbHVlQ2hhbmdlZCcsIHRoaXMuX19wYXJhbUV2ZW50TGlzdGVuZXJJRHNbbmFtZV0pXG4gICAgdGhpcy5fX3BhcmFtcy5zcGxpY2UoaW5kZXgsIDEpXG5cbiAgICBkZWxldGUgdGhpcy5fX3BhcmFtTWFwcGluZ1tuYW1lXVxuICAgIGZvciAobGV0IGkgPSBpbmRleDsgaSA8IHRoaXMuX19wYXJhbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuX19wYXJhbU1hcHBpbmdbdGhpcy5fX3BhcmFtc1tpXS5nZXROYW1lKCldID0gaVxuICAgIH1cblxuICAgIHRoaXMuZW1pdCgncGFyYW1ldGVyUmVtb3ZlZCcsIHsgbmFtZSB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIG9sZCBgUGFyYW1ldGVyYCBieSBwYXNzaW5nIGEgbmV3IG9uZSB3aXRoIHRoZSBzYW1lIG5hbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7UGFyYW1ldGVyfSBwYXJhbSAtIFRoZSBwYXJhbWV0ZXIgdG8gcmVwbGFjZS5cbiAgICogQHJldHVybiB7UGFyYW1ldGVyfSAtIGBQYXJhbWV0ZXJgIHdpdGggYHZhbHVlQ2hhbmdlZGAgZXZlbnQgc2V0LlxuICAgKi9cbiAgcmVwbGFjZVBhcmFtZXRlcihwYXJhbSkge1xuICAgIGNvbnN0IG5hbWUgPSBwYXJhbS5nZXROYW1lKClcbiAgICBpZiAodGhpcy5fX3BhcmFtTWFwcGluZ1tuYW1lXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIHJlcGxhY2UgUGFyYW1ldGVyOicgKyBwYXJhbU5hbWUpXG4gICAgfVxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fX3BhcmFtTWFwcGluZ1tuYW1lXVxuICAgIHRoaXMucmVtb3ZlUGFyYW1ldGVyKG5hbWUpXG4gICAgdGhpcy5pbnNlcnRQYXJhbWV0ZXIocGFyYW0sIGluZGV4KVxuICAgIHJldHVybiBwYXJhbVxuICB9XG5cbiAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBQZXJzaXN0ZW5jZVxuXG4gIC8qKlxuICAgKiBUaGUgdG9KU09OIG1ldGhvZCBlbmNvZGVzIHRoaXMgdHlwZSBhcyBhIGpzb24gb2JqZWN0IGZvciBwZXJzaXN0ZW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHQgLSBUaGUgY29udGV4dCB2YWx1ZS5cbiAgICogQHJldHVybiB7b2JqZWN0fSAtIFJldHVybnMgdGhlIGpzb24gb2JqZWN0LlxuICAgKi9cbiAgdG9KU09OKGNvbnRleHQpIHtcbiAgICBjb25zdCBqc29uID0ge31cbiAgICBjb25zdCBwYXJhbXNKU09OID0ge31cbiAgICBsZXQgc2F2ZWRQYXJhbXMgPSAwXG4gICAgZm9yIChjb25zdCBwYXJhbSBvZiB0aGlzLl9fcGFyYW1zKSB7XG4gICAgICBjb25zdCBwYXJhbUpTT04gPSBwYXJhbS50b0pTT04oY29udGV4dClcbiAgICAgIGlmIChwYXJhbUpTT04pIHtcbiAgICAgICAgcGFyYW1zSlNPTltwYXJhbS5nZXROYW1lKCldID0gcGFyYW1KU09OXG4gICAgICAgIHNhdmVkUGFyYW1zKytcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNhdmVkUGFyYW1zID4gMCkganNvbi5wYXJhbXMgPSBwYXJhbXNKU09OXG4gICAgcmV0dXJuIGpzb25cbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZnJvbUpTT04gbWV0aG9kIGRlY29kZXMgYSBqc29uIG9iamVjdCBmb3IgdGhpcyB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gaiAtIFRoZSBqc29uIG9iamVjdCB0aGlzIGl0ZW0gbXVzdCBkZWNvZGUuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0IC0gVGhlIGNvbnRleHQgdmFsdWUuXG4gICAqL1xuICBmcm9tSlNPTihqLCBjb250ZXh0KSB7XG4gICAgaWYgKGoucGFyYW1zKSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBqLnBhcmFtcykge1xuICAgICAgICBjb25zdCBwaiA9IGoucGFyYW1zW2tleV1cbiAgICAgICAgY29uc3QgcGFyYW0gPSB0aGlzLmdldFBhcmFtZXRlcihrZXkpXG4gICAgICAgIGlmICghcGFyYW0pIGNvbnNvbGUud2FybignUGFyYW0gbm90IGZvdW5kOicgKyBrZXkpXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlmIChwai5wYXJhbVBhdGgpIHtcbiAgICAgICAgICAgIGNvbnRleHQucmVzb2x2ZVBhdGgoXG4gICAgICAgICAgICAgIHBqLnBhcmFtUGF0aCxcbiAgICAgICAgICAgICAgKHBhcmFtKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXBsYWNlUGFyYW1ldGVyKHBhcmFtKVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAocmVhc29uKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdVbmFibGUgdG8gcmVzb2x2ZSBzaGFyZWQgcGFyYW1ldGVyOicgKyBwai5wYXJhbVBhdGgpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyYW0uZnJvbUpTT04ocGosIGNvbnRleHQpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVzZXMgcGFzc2VkIGluIEJpblJlYWRlciBvYmplY3QoY29udGFpbmluZyBhbiBJbnQzMiBhcnJheSB3aXRoIGFsbCB0aGUgcGFyYW1ldGVycykgdG8gcmVjb25zdHJ1Y3QgYWxsIHBhcmFtZXRlcnMgc3RhdGUuXG4gICAqIDxicj5cbiAgICogSW4gZWFjaCBpdGVyYXRpb24gb2YgdGhlIGFycmF5LCBwcm9wVHlwZSBhbmQgcHJvcE5hbWUgYXJlIGV4dHJhY3RlZCBhbmRcbiAgICogdXNlZCB0byBidWlsZCB0aGUgcmlnaHQgYFBhcmFtZXRlcmAgY2xhc3MuIFRoZW4gYWxsIG9mIHRoZW0gYXJlIGFkZGVkIHRvIHRoZSBvYmplY3QuXG4gICAqXG4gICAqIEBlbWl0cyBgcGFyYW1ldGVyQWRkZWRgIHdpdGggdGhlIG5hbWUgb2YgdGhlIHBhcmFtLlxuICAgKiBAcGFyYW0ge0JpblJlYWRlcn0gcmVhZGVyIC0gVGhlIHJlYWRlciB2YWx1ZS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHQgLSBUaGUgY29udGV4dCB2YWx1ZS5cbiAgICovXG4gIHJlYWRCaW5hcnkocmVhZGVyLCBjb250ZXh0KSB7XG4gICAgLy8gVE9ETzogbWFrZSB0aGlzIHdvcmtcblxuICAgIGlmIChjb250ZXh0LnZlcnNpb25zWyd6ZWEtZW5naW5lJ10uY29tcGFyZShbMCwgMCwgM10pID49IDApIHtcbiAgICAgIGNvbnN0IG51bVByb3BzID0gcmVhZGVyLmxvYWRVSW50MzIoKVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1Qcm9wczsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHByb3BUeXBlID0gcmVhZGVyLmxvYWRTdHIoKVxuICAgICAgICBjb25zdCBwcm9wTmFtZSA9IHJlYWRlci5sb2FkU3RyKClcbiAgICAgICAgbGV0IHBhcmFtID0gdGhpcy5nZXRQYXJhbWV0ZXIocHJvcE5hbWUpXG4gICAgICAgIGlmICghcGFyYW0pIHtcbiAgICAgICAgICBwYXJhbSA9IFJlZ2lzdHJ5LmNvbnN0cnVjdENsYXNzKHByb3BUeXBlLCBwcm9wTmFtZSlcbiAgICAgICAgICBpZiAoIXBhcmFtKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmFibGUgdG8gY29uc3RydWN0IHByb3A6JyArIHByb3BOYW1lICsgJyBvZiB0eXBlOicgKyBwcm9wVHlwZSlcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuYWRkUGFyYW1ldGVyKHBhcmFtKVxuICAgICAgICB9XG4gICAgICAgIHBhcmFtLnJlYWRCaW5hcnkocmVhZGVyLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBvYmplY3QncyBKU09OIHZhbHVlIGFuZCBjb252ZXJ0cyBpdCB0byBhIHN0cmluZy5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfSAtIFN0cmluZyBvZiBvYmplY3QncyBwYXJhbWV0ZXIgbGlzdCBzdGF0ZS5cbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvSlNPTigpLCBudWxsLCAyKVxuICB9XG5cbiAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBDbG9uZSBhbmQgRGVzdHJveVxuXG4gIC8qKlxuICAgKiBDb3BpZXMgUGFyYW1ldGVycyBmcm9tIGFub3RoZXIgYFBhcmFtZXRlck93bmVyYCB0byBjdXJyZW50IG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHtQYXJhbWV0ZXJPd25lcn0gc3JjIC0gVGhlIFBhcmFtZXRlck93bmVyIGNvcHkgZnJvbS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHQgLSBUaGUgY29udGV4dCB2YWx1ZS5cbiAgICovXG4gIGNvcHlGcm9tKHNyYywgY29udGV4dCkge1xuICAgIC8vIE5vdGU6IExvb3Agb3ZlciB0aGUgcGFyYW1ldGVycyBpbiByZXZlcnNlIG9yZGVyLFxuICAgIC8vIHRoaXMgaXMgYmVjYXVzZSBvZnRlbiwgcGFyYW1ldGVyIGRlcGVuZGVuY2llc1xuICAgIC8vIGFyZSBib3R0b20gdG8gdG9wIChib3R0b20gcGFyYW1zIGRlcGVuZGVudCBvbiBoaWdoZXIgcGFyYW1zKS5cbiAgICAvLyBUaGlzIG1lYW5zIHRoYXQgYXMgYSBwYXJhbWV0ZXIgaXMgc2V0IHdpdGggYSBuZXcgdmFsdWVcbiAgICAvLyBpdCB3aWxsIGRpcnR5IHRoZSBwYXJhbXMgYmVsb3cgaXQuXG4gICAgbGV0IGkgPSBzcmMuZ2V0TnVtUGFyYW1ldGVycygpXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY29uc3Qgc3JjUGFyYW0gPSBzcmMuZ2V0UGFyYW1ldGVyQnlJbmRleChpKVxuICAgICAgY29uc3QgcGFyYW0gPSB0aGlzLmdldFBhcmFtZXRlcihzcmNQYXJhbS5nZXROYW1lKCkpXG4gICAgICBpZiAocGFyYW0pIHtcbiAgICAgICAgLy8gTm90ZTogd2UgYXJlIG5vdCBjbG9uaW5nIHRoZSB2YWx1ZXMuXG4gICAgICAgIHBhcmFtLmxvYWRWYWx1ZShzcmNQYXJhbS5nZXRWYWx1ZSgpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5hZGRQYXJhbWV0ZXIoc3JjUGFyYW0uY2xvbmUoY29udGV4dCkpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7IFBhcmFtZXRlck93bmVyIH1cbiIsImltcG9ydCB7IEJhc2VHZW9tIH0gZnJvbSAnLi9CYXNlR2VvbS5qcydcbmltcG9ydCB7IFJlZ2lzdHJ5IH0gZnJvbSAnLi4vLi4vUmVnaXN0cnknXG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgcG9pbnQgcHJpbWl0aXZlIGRyYXdpbmcgdHlwZSwgZXZlcnkgdmVydGV4IHNwZWNpZmllZCBpcyBhIHBvaW50LlxuICpcbiAqIGBgYFxuICogY29uc3QgcG9pbnRzID0gbmV3IFBvaW50cygpXG4gKiBgYGBcbiAqXG4gKiAqICoqRXZlbnRzKipcbiAqICogKipib3VuZGluZ0JveENoYW5nZWQ6KiogVHJpZ2dlcmVkIHdoZW4gdGhlIGJvdW5kaW5nIGJveCBjaGFuZ2VzLlxuICpcbiAqIEBleHRlbmRzIEJhc2VHZW9tXG4gKi9cbmNsYXNzIFBvaW50cyBleHRlbmRzIEJhc2VHZW9tIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBwb2ludHMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpXG4gIH1cblxuICAvKipcbiAgICogVGhlIGNsZWFyIG1ldGhvZC5cbiAgICovXG4gIGNsZWFyKCkge1xuICAgIHRoaXMuc2V0TnVtVmVydGljZXMoMClcbiAgICB0aGlzLmVtaXQoJ2dlb21EYXRhVG9wb2xvZ3lDaGFuZ2VkJylcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkcyBhbmQgcG9wdWxhdGVzIGBQb2ludHNgIG9iamVjdCBmcm9tIGEgYmluYXJ5IHJlYWRlci5cbiAgICpcbiAgICogQHBhcmFtIHtCaW5SZWFkZXJ9IHJlYWRlciAtIFRoZSByZWFkZXIgdmFsdWUuXG4gICAqL1xuICBsb2FkQmluKHJlYWRlcikge1xuICAgIHRoaXMubmFtZSA9IHJlYWRlci5sb2FkU3RyKClcbiAgICBjb25zdCBudW1WZXJ0cyA9IHJlYWRlci5sb2FkVUludDMyKClcbiAgICB0aGlzLl9fYm91bmRpbmdCb3guc2V0KHJlYWRlci5sb2FkRmxvYXQzMlZlYzMoKSwgcmVhZGVyLmxvYWRGbG9hdDMyVmVjMygpKVxuICAgIHRoaXMuc2V0TnVtVmVydGljZXMobnVtVmVydHMpXG4gICAgY29uc3QgcG9zaXRpb25zID0gdGhpcy5nZXRWZXJ0ZXhBdHRyaWJ1dGUoJ3Bvc2l0aW9ucycpXG5cbiAgICBpZiAobnVtVmVydHMgPCAyNTYpIHtcbiAgICAgIGNvbnN0IGJib3hNYXQgPSB0aGlzLl9fYm91bmRpbmdCb3gudG9NYXQ0KClcbiAgICAgIGNvbnN0IHBvc0F0dHI4Yml0ID0gcmVhZGVyLmxvYWRVSW50OEFycmF5KG51bVZlcnRzICogMylcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVmVydHM7IGkrKykge1xuICAgICAgICBjb25zdCBwb3MgPSBuZXcgVmVjMyhcbiAgICAgICAgICBwb3NBdHRyOGJpdFtpICogMyArIDBdIC8gMjU1LjAsXG4gICAgICAgICAgcG9zQXR0cjhiaXRbaSAqIDMgKyAxXSAvIDI1NS4wLFxuICAgICAgICAgIHBvc0F0dHI4Yml0W2kgKiAzICsgMl0gLyAyNTUuMFxuICAgICAgICApXG4gICAgICAgIHBvc2l0aW9ucy5zZXRWYWx1ZShpLCBiYm94TWF0LnRyYW5zZm9ybVZlYzMocG9zKSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbnVtQ2x1c3RlcnMgPSByZWFkZXIubG9hZFVJbnQzMigpXG4gICAgICBjb25zdCBjbHVzdGVycyA9IFtdXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUNsdXN0ZXJzOyBpKyspIHtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSByZWFkZXIubG9hZFVJbnQzMlZlYzIoKVxuICAgICAgICBjb25zdCBwMCA9IHJlYWRlci5sb2FkRmxvYXQzMlZlYzMoKVxuICAgICAgICBjb25zdCBwMSA9IHJlYWRlci5sb2FkRmxvYXQzMlZlYzMoKVxuICAgICAgICBjbHVzdGVycy5wdXNoKHtcbiAgICAgICAgICByYW5nZTogcmFuZ2UsXG4gICAgICAgICAgYmJveDogbmV3IEJveDMocDAsIHAxKSxcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIGNvbnN0IHBvc0F0dHI4Yml0ID0gcmVhZGVyLmxvYWRVSW50OEFycmF5KG51bVZlcnRzICogMylcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1DbHVzdGVyczsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGJib3hNYXQgPSBjbHVzdGVyc1tpXVsnYmJveCddLnRvTWF0NCgpXG4gICAgICAgIGZvciAobGV0IGogPSBjbHVzdGVyc1tpXVsncmFuZ2UnXS54OyBqIDwgY2x1c3RlcnNbaV1bJ3JhbmdlJ10ueTsgaisrKSB7XG4gICAgICAgICAgY29uc3QgcG9zID0gbmV3IFZlYzMoXG4gICAgICAgICAgICBwb3NBdHRyOGJpdFtqICogMyArIDBdIC8gMjU1LjAsXG4gICAgICAgICAgICBwb3NBdHRyOGJpdFtqICogMyArIDFdIC8gMjU1LjAsXG4gICAgICAgICAgICBwb3NBdHRyOGJpdFtqICogMyArIDJdIC8gMjU1LjBcbiAgICAgICAgICApXG4gICAgICAgICAgcG9zaXRpb25zLnNldFZhbHVlKGosIGJib3hNYXQudHJhbnNmb3JtVmVjMyhwb3MpKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBQZXJzaXN0ZW5jZVxuXG4gIC8qKlxuICAgKiBTZXRzIHN0YXRlIG9mIGN1cnJlbnQgZ2VvbWV0cnkoSW5jbHVkaW5nIGxpbmUgc2VnbWVudHMpIHVzaW5nIGEgYmluYXJ5IHJlYWRlciBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7QmluUmVhZGVyfSByZWFkZXIgLSBUaGUgcmVhZGVyIHZhbHVlLlxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dCAtIFRoZSBjb250ZXh0IHZhbHVlLlxuICAgKi9cbiAgcmVhZEJpbmFyeShyZWFkZXIsIGNvbnRleHQpIHtcbiAgICBzdXBlci5sb2FkQmFzZUdlb21CaW5hcnkocmVhZGVyKVxuXG4gICAgLy8gdGhpcy5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xuICAgIHRoaXMuZW1pdCgnZ2VvbURhdGFDaGFuZ2VkJywge30pXG4gIH1cbn1cblxuUmVnaXN0cnkucmVnaXN0ZXIoJ1BvaW50cycsIFBvaW50cylcblxuZXhwb3J0IHsgUG9pbnRzIH1cbiIsImltcG9ydCB7IEJhc2VHZW9tIH0gZnJvbSAnLi9CYXNlR2VvbS5qcydcbmltcG9ydCB7IFJlZ2lzdHJ5IH0gZnJvbSAnLi4vLi4vUmVnaXN0cnknXG5cbi8qKlxuICpcbiAqIENsYXNzIHJlcHJlc2VudGluZyBsaW5lcyBwcmltaXRpdmUgZHJhd2luZyB0eXBlLCBjb25uZWN0aW5nIHZlcnRpY2VzIHVzaW5nIHRoZSBzcGVjaWZpZWQgaW5kaWNlcy5cbiAqIGkuZS4gV2UgaGF2ZSA0IHBvaW50cyh2ZXJ0aWNlcykgYnV0IHdlIGRvbid0IGtub3cgaG93IHRoZXkgY29ubmVjdCB0byBlYWNoIG90aGVyLFxuICogYW5kIHRoYXQncyB3aHkgd2UgbmVlZCBpbmRpY2VzKE51bWJlcnMgaW5kaWNhdGluZyB3aGljaCB2ZXJ0ZXggY29ubmVjdHMgdG8gd2hpY2gpLlxuICogSW4gdGhpcyBjYXNlIGlmIHdlIHNheSB0aGF0IGBpbmRpY2VzYCBpcyBgWzAsMSwyLDNdYCwgaXQgd291bGQgY29ubmVjdCB0aGUgZmlyc3QgdmVydGV4IHRvIHRoZSBzZWNvbmQsXG4gKiBhbmQgdGhlIHRoaXJkIHRvIHRoZSBmb3VydGguXG4gKlxuICogYGBgXG4gKiBjb25zdCBsaW5lcyA9IG5ldyBMaW5lcygpXG4gKiBgYGBcbiAqXG4gKiAqKkV2ZW50cyoqXG4gKiAqICoqZ2VvbURhdGFDaGFuZ2VkOioqIFRyaWdnZXJlZCB3aGVuIHRoZSBkYXRhIHZhbHVlIG9mIHRoZSBnZW9tZXRyeSBpcyBzZXQoVGhpcyBpbmNsdWRlcyByZWFkaW5nIGJpbmFyeSlcbiAqXG4gKiBAZXh0ZW5kcyBCYXNlR2VvbVxuICovXG5jbGFzcyBMaW5lcyBleHRlbmRzIEJhc2VHZW9tIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBsaW5lcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLl9faW5kaWNlcyA9IG5ldyBVaW50MzJBcnJheSgpXG4gIH1cblxuICAvKipcbiAgICogVGhlIGNsZWFyIG1ldGhvZC5cbiAgICovXG4gIGNsZWFyKCkge1xuICAgIHN1cGVyLmNsZWFyKClcbiAgICB0aGlzLnNldE51bVNlZ21lbnRzKDApXG4gICAgdGhpcy5lbWl0KCdnZW9tRGF0YVRvcG9sb2d5Q2hhbmdlZCcpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc3BlY2lmaWVkIGluZGljZXMoVmVydGV4IGNvbm5lY3RvcnMpXG4gICAqXG4gICAqIEByZXR1cm4ge1VpbnQzMkFycmF5fSAtIFRoZSBpbmRpY2VzIGluZGV4IGFycmF5LlxuICAgKi9cbiAgZ2V0SW5kaWNlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fX2luZGljZXNcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgbGluZSBzZWdtZW50cy5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFJldHVybnMgdGhlIG51bWJlciBvZiBzZWdtZW50cy5cbiAgICovXG4gIGdldE51bVNlZ21lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLl9faW5kaWNlcy5sZW5ndGggLyAyXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgbnVtYmVyIG9mIGxpbmUgc2VnbWVudHMgaW4gdGhlIGdlb21ldHJ5Ljxicj5cbiAgICogKipJbXBvcnRhbnQ6KiogSXQgcmVzZXRzIGluZGljZXMgdmFsdWVzLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbnVtT2ZTZWdtZW50cyAtIFRoZSBjb3VudCB2YWx1ZS5cbiAgICovXG4gIHNldE51bVNlZ21lbnRzKG51bU9mU2VnbWVudHMpIHtcbiAgICBpZiAobnVtT2ZTZWdtZW50cyA+IHRoaXMuZ2V0TnVtU2VnbWVudHMoKSkge1xuICAgICAgY29uc3QgaW5kaWNlcyA9IG5ldyBVaW50MzJBcnJheShudW1PZlNlZ21lbnRzICogMilcbiAgICAgIGluZGljZXMuc2V0KHRoaXMuX19pbmRpY2VzKVxuICAgICAgdGhpcy5fX2luZGljZXMgPSBpbmRpY2VzXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX19pbmRpY2VzID0gdGhpcy5fX2luZGljZXMuc2xpY2UoMCwgbnVtT2ZTZWdtZW50cyAqIDIpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgc2VnbWVudCB2YWx1ZXMgaW4gdGhlIHNwZWNpZmllZCBpbmRleC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IHZhbHVlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gcDAgLSBUaGUgcDAgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwMSAtIFRoZSBwMSB2YWx1ZS5cbiAgICovXG4gIHNldFNlZ21lbnRWZXJ0ZXhJbmRpY2VzKGluZGV4LCBwMCwgcDEpIHtcbiAgICBpZiAoaW5kZXggPj0gdGhpcy5fX2luZGljZXMubGVuZ3RoIC8gMilcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBsaW5lIGluZGV4OiAnICsgaW5kZXggKyAnLiBOdW0gU2VnbWVudHM6ICcgKyB0aGlzLl9faW5kaWNlcy5sZW5ndGggLyAyKVxuICAgIHRoaXMuX19pbmRpY2VzW2luZGV4ICogMiArIDBdID0gcDBcbiAgICB0aGlzLl9faW5kaWNlc1tpbmRleCAqIDIgKyAxXSA9IHAxXG4gIH1cblxuICAvKipcbiAgICogU2V0cyBzZWdtZW50IHZhbHVlcyBpbiB0aGUgc3BlY2lmaWVkIGluZGV4LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwMCAtIFRoZSBwMCB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHAxIC0gVGhlIHAxIHZhbHVlLlxuICAgKi9cbiAgc2V0U2VnbWVudChpbmRleCwgcDAsIHAxKSB7XG4gICAgY29uc29sZS53YXJuKGBkZXByZWNhdGVkIHVzZSAjc2V0U2VnbWVudFZlcnRleEluZGljZXNgKVxuICAgIHRoaXMuc2V0U2VnbWVudFZlcnRleEluZGljZXMoaW5kZXgsIHAwLCBwMSlcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZ2V0U2VnbWVudFZlcnRleEluZGV4IG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxpbmUgLSBUaGUgbGluZSB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGxpbmVWZXJ0ZXggLSBUaGUgbGluZVZlcnRleCB2YWx1ZS5cbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXRTZWdtZW50VmVydGV4SW5kZXgobGluZSwgbGluZVZlcnRleCkge1xuICAgIGNvbnN0IG51bVNlZ21lbnRzID0gdGhpcy5nZXROdW1TZWdtZW50cygpXG4gICAgaWYgKGxpbmUgPCBudW1TZWdtZW50cykgcmV0dXJuIHRoaXMuX19pbmRpY2VzW2xpbmUgKiAyICsgbGluZVZlcnRleF1cbiAgfVxuXG4gIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gTWVtb3J5XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdmVydGV4IGF0dHJpYnV0ZXMgYnVmZmVycyBhbmQgaXRzIGNvdW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGdlbkJ1ZmZlcnMoKSB7XG4gICAgY29uc3QgYnVmZmVycyA9IHN1cGVyLmdlbkJ1ZmZlcnMoKVxuXG4gICAgbGV0IGluZGljZXNcbiAgICBpZiAoYnVmZmVycy5udW1WZXJ0aWNlcyA8IE1hdGgucG93KDIsIDgpKSB7XG4gICAgICBpbmRpY2VzID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5fX2luZGljZXMpXG4gICAgfSBlbHNlIGlmIChidWZmZXJzLm51bVZlcnRpY2VzIDwgTWF0aC5wb3coMiwgMTYpKSB7XG4gICAgICBpbmRpY2VzID0gbmV3IFVpbnQxNkFycmF5KHRoaXMuX19pbmRpY2VzKVxuICAgIH0gZWxzZSB7XG4gICAgICBpbmRpY2VzID0gdGhpcy5fX2luZGljZXNcbiAgICB9XG4gICAgYnVmZmVycy5pbmRpY2VzID0gaW5kaWNlc1xuICAgIHJldHVybiBidWZmZXJzXG4gIH1cblxuICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFBlcnNpc3RlbmNlXG5cbiAgLyoqXG4gICAqIFNldHMgc3RhdGUgb2YgY3VycmVudCBnZW9tZXRyeShJbmNsdWRpbmcgbGluZSBzZWdtZW50cykgdXNpbmcgYSBiaW5hcnkgcmVhZGVyIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHJlYWRlciAtIFRoZSByZWFkZXIgdmFsdWUuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0IC0gVGhlIGNvbnRleHQgdmFsdWUuXG4gICAqL1xuICByZWFkQmluYXJ5KHJlYWRlciwgY29udGV4dCkge1xuICAgIHN1cGVyLmxvYWRCYXNlR2VvbUJpbmFyeShyZWFkZXIpXG5cbiAgICB0aGlzLnNldE51bVNlZ21lbnRzKHJlYWRlci5sb2FkVUludDMyKCkpXG5cbiAgICBjb25zdCBieXRlcyA9IHJlYWRlci5sb2FkVUludDgoKVxuICAgIGlmIChieXRlcyA9PSAxKSB0aGlzLl9faW5kaWNlcyA9IHJlYWRlci5sb2FkVUludDhBcnJheSgpXG4gICAgZWxzZSBpZiAoYnl0ZXMgPT0gMikgdGhpcy5fX2luZGljZXMgPSByZWFkZXIubG9hZFVJbnQxNkFycmF5KClcbiAgICBlbHNlIGlmIChieXRlcyA9PSA0KSB0aGlzLl9faW5kaWNlcyA9IHJlYWRlci5sb2FkVUludDMyQXJyYXkoKVxuXG4gICAgdGhpcy5lbWl0KCdnZW9tRGF0YUNoYW5nZWQnLCB7fSlcbiAgfVxuICAvKipcbiAgICogVGhlIHRvSlNPTiBtZXRob2QgZW5jb2RlcyB0aGlzIHR5cGUgYXMgYSBqc29uIG9iamVjdCBmb3IgcGVyc2lzdGVuY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0IC0gVGhlIGNvbnRleHQgdmFsdWUuXG4gICAqIEByZXR1cm4ge29iamVjdH0gLSBSZXR1cm5zIHRoZSBqc29uIG9iamVjdC5cbiAgICovXG4gIHRvSlNPTihjb250ZXh0KSB7XG4gICAgY29uc3QgaiA9IHN1cGVyLnRvSlNPTihjb250ZXh0KVxuICAgIGlmICghY29udGV4dCB8fCAhY29udGV4dC5za2lwVG9wb2xvZ3kpIGouaW5kaWNlcyA9IEFycmF5LmZyb20odGhpcy5fX2luZGljZXMpXG5cbiAgICByZXR1cm4galxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBmcm9tSlNPTiBtZXRob2QgZGVjb2RlcyBhIGpzb24gb2JqZWN0IGZvciB0aGlzIHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBqIC0gVGhlIGpzb24gb2JqZWN0IHRoaXMgaXRlbSBtdXN0IGRlY29kZS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHQgLSBUaGUgY29udGV4dCB2YWx1ZS5cbiAgICovXG4gIGZyb21KU09OKGosIGNvbnRleHQpIHtcbiAgICBzdXBlci5mcm9tSlNPTihqLCBjb250ZXh0KVxuICAgIGlmIChqLmluZGljZXMpIHRoaXMuX19pbmRpY2VzID0gVWludDMyQXJyYXkuZnJvbShqLmluZGljZXMpXG4gIH1cbn1cblxuUmVnaXN0cnkucmVnaXN0ZXIoJ0xpbmVzJywgTGluZXMpXG5cbmV4cG9ydCB7IExpbmVzIH1cbiIsIi8qIGVzbGludC1kaXNhYmxlIHByZWZlci1yZXN0LXBhcmFtcyAqL1xuLyogZXNsaW50LWRpc2FibGUgZ3VhcmQtZm9yLWluICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuaW1wb3J0IHsgVmVjMyB9IGZyb20gJy4uLy4uL01hdGgvVmVjMydcbmltcG9ydCB7IEJhc2VHZW9tIH0gZnJvbSAnLi9CYXNlR2VvbS5qcydcbmltcG9ydCB7IEF0dHJpYnV0ZSB9IGZyb20gJy4vQXR0cmlidXRlLmpzJ1xuXG5pbXBvcnQgeyBWZXJ0ZXhBdHRyaWJ1dGUgfSBmcm9tICcuL1ZlcnRleEF0dHJpYnV0ZS5qcydcbmltcG9ydCB7IFJlZ2lzdHJ5IH0gZnJvbSAnLi4vLi4vUmVnaXN0cnknXG5cbi8qKlxuICogVGhlIE1lc2ggY2xhc3MgcHJvdmlkZXMgYSBmbGV4aWJsZSBhbmQgZmFzdCBwb2x5Z29uIG1lc2ggcmVwcmVzZW50YXRpb24uIEl0IHN1cHBvcnRzIHBvbHlnb25zIG9mIGFyYml0cmFyeSBjb21wbGV4aXR5LFxuICogZnJvbSBiYXNpYyB0cmlhbmdsZXMgYW5kIHF1YWRzIHRvIHBlbnRhZ29ucyBtb3JlLlxuICogSXQgc3VwcG9ydHMgc3RvcmluZyBwZXIgZmFjZSBhdHRyaWJ1dGVzLCBhbmQgcGVyIGVkZ2UgYXR0cmlidXRlcy5cbiAqIFRoZSBNZXNoIGNsYXNzIGhhbmRsZXMgY29udmVydGluZyBpdHMgaW50ZXJuYWwgcmVwcmVzZW50YXRpb24gb2YgcG9seWdvbnMgaW50byBhIHNpbXBsZXIgdHJpYW5nbGVzIHJlcHJlc2VudGF0aW9uIGZvciByZW5kZXJpbmcuXG4gKlxuICogYGBgXG4gKiBjb25zdCBtZXNoID0gbmV3IE1lc2goKVxuICogYGBgXG4gKlxuICogKipFdmVudHMqKlxuICogKiAqKmdlb21EYXRhVG9wb2xvZ3lDaGFuZ2VkOioqIFRyaWdnZXJlZCB3aGVuIHRoZSB0b3BvbG9neSBvZiB0aGUgbWVzaCBoYXMgYmVlbiBjaGFuZ2VkLlxuICogKiAqKmdlb21EYXRhQ2hhbmdlZDoqKiBUcmlnZ2VyZWQgd2hlbiB0aGUgdmVydGljZXMgb2YgdGhlIG1lc2ggaGF2ZSBjaGFuZ2VkLCBidXQgbm90IG5lY2Vzc2FyaWx5IHRoZSB0b3BvbG9neS5cbiAqXG4gKiBAZXh0ZW5kcyBCYXNlR2VvbVxuICovXG5jbGFzcyBNZXNoIGV4dGVuZHMgQmFzZUdlb20ge1xuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBNZXNoLlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKVxuXG4gICAgdGhpcy5fX2ZhY2VDb3VudHMgPSBbXVxuICAgIHRoaXMuX19mYWNlVmVydGV4SW5kaWNlcyA9IG5ldyBVaW50MzJBcnJheSgpXG5cbiAgICB0aGlzLl9fZmFjZUF0dHJpYnV0ZXMgPSBuZXcgTWFwKClcbiAgICB0aGlzLl9fZWRnZUF0dHJpYnV0ZXMgPSBuZXcgTWFwKClcblxuICAgIHRoaXMuX19sb2dUb3BvbG9neVdhcm5pbmdzID0gZmFsc2VcblxuICAgIHRoaXMuZWRnZVZlcnRzID0gdW5kZWZpbmVkXG4gICAgdGhpcy52ZXJ0ZXhFZGdlcyA9IHVuZGVmaW5lZFxuICAgIHRoaXMubnVtRWRnZXMgPSAwXG4gICAgdGhpcy5lZGdlQW5nbGVzID0gbmV3IEZsb2F0MzJBcnJheSgpXG5cbiAgICB0aGlzLmVkZ2VWZWNzID0gW11cbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgaW5pdCBtZXRob2QuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpbml0KCkge31cblxuICAvKipcbiAgICogVGhlIGNsZWFyIG1ldGhvZC5cbiAgICovXG4gIGNsZWFyKCkge1xuICAgIHN1cGVyLmNsZWFyKClcblxuICAgIC8vIGNsZWFyIGVkZ2UgYW5kIGZhY2Ugbm9ybWFscy5cbiAgICB0aGlzLmVkZ2VWZXJ0cyA9IHVuZGVmaW5lZFxuICAgIHRoaXMudmVydGV4RWRnZXMgPSB1bmRlZmluZWRcbiAgICB0aGlzLm51bUVkZ2VzID0gMFxuICAgIHRoaXMuZWRnZUFuZ2xlcyA9IG5ldyBGbG9hdDMyQXJyYXkoKVxuICAgIHRoaXMuZW1pdCgnZ2VvbURhdGFUb3BvbG9neUNoYW5nZWQnKVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBnZXRGYWNlQ291bnRzIG1ldGhvZC5cbiAgICogQHJldHVybiB7YXJyYXl9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGdldEZhY2VDb3VudHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19mYWNlQ291bnRzXG4gIH1cblxuICAvKipcbiAgICogVGhlIGdldE51bUZhY2VzIG1ldGhvZC5cbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBnZXROdW1GYWNlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fX2ZhY2VDb3VudHMubGVuZ3RoID09IDAgPyAwIDogdGhpcy5fX2ZhY2VDb3VudHMucmVkdWNlKChudW1GYWNlcywgZmMpID0+IChudW1GYWNlcyArPSBmYykpXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgbnVtYmVyIG9mIGZhY2VzIG9uIHRoZSBtZXNoIHVzaW5nIGFuIGFycmF5IHNwZWNpZnlpbmcgdGhlIGNvdW50cyBwZXIgcG9seWdvbiBzaXplLlxuICAgKiBUaGUgZmlyc3QgaXRlbSBpbiB0aGUgYXJyYXkgc3BlY2lmaWVzIHRoZSBudW1iZXIgb2YgdHJpYW5nbGVzLCB0aGUgc2Vjb25kLCB0aGUgbnVtYmVyIG9mIHF1YWRzLCB0aGUgM3JkLCB0aGUgbnVtYmVyIG9mIDUgc2lkZWQgcG9seWdvbnMgZXRjLi5cbiAgICogZS5nLiB0byBzcGVjaWZ5IDIgdHJpYW5nbGVzLCBhbmQgNyBxdWFkcywgd2Ugd291bGQgcGFzcyBbMiwgN11cbiAgICogQHBhcmFtIHthcnJheX0gZmFjZUNvdW50cyAtIFRoZSBmYWNlQ291bnRzIHZhbHVlLlxuICAgKi9cbiAgc2V0RmFjZUNvdW50cyhmYWNlQ291bnRzKSB7XG4gICAgbGV0IG51bUZhY2VzID0gMFxuICAgIGxldCBudW1GYWNlc1ZlcnRpY2VzID0gMFxuICAgIGxldCBudW1WZXJ0c1BlckZhY2UgPSAzXG4gICAgZm9yIChjb25zdCBmYyBvZiBmYWNlQ291bnRzKSB7XG4gICAgICBudW1GYWNlcyArPSBmY1xuICAgICAgbnVtRmFjZXNWZXJ0aWNlcyArPSBmYyAqIG51bVZlcnRzUGVyRmFjZVxuICAgICAgbnVtVmVydHNQZXJGYWNlKytcbiAgICB9XG5cbiAgICBjb25zdCBwcmV2TnVtRmFjZXMgPSB0aGlzLmdldE51bUZhY2VzKClcbiAgICBpZiAocHJldk51bUZhY2VzID09IDApIHtcbiAgICAgIHRoaXMuX19mYWNlVmVydGV4SW5kaWNlcyA9IG5ldyBVaW50MzJBcnJheShudW1GYWNlc1ZlcnRpY2VzKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBmYWNlVmVydGV4SW5kaWNlcyA9IG5ldyBVaW50MzJBcnJheShudW1GYWNlc1ZlcnRpY2VzKVxuXG4gICAgICAvLyBOb3cgd2UgcHJlc2VydmUgdGhlIGV4aXN0aW5nIGluZGljZXMgaWYgdGhleSBmaXQgd2l0aGluIHRoZSBuZXcgZmFjZVZlcnRleEluZGljZXMgYXJyYXkuXG4gICAgICBsZXQgc3RhcnRTcmMgPSAwXG4gICAgICBsZXQgc3RhcnRUZ3QgPSAwXG4gICAgICBudW1GYWNlc1ZlcnRpY2VzID0gMFxuICAgICAgbnVtVmVydHNQZXJGYWNlID0gM1xuICAgICAgZmFjZUNvdW50cy5mb3JFYWNoKChmYywgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgZW5kU3JjID0gc3RhcnRTcmMgKyBNYXRoLm1pbihmYywgdGhpcy5fX2ZhY2VDb3VudHNbaW5kZXhdKSAqIG51bVZlcnRzUGVyRmFjZVxuICAgICAgICBmYWNlVmVydGV4SW5kaWNlcy5zZXQodGhpcy5fX2ZhY2VWZXJ0ZXhJbmRpY2VzLnNsaWNlKHN0YXJ0U3JjLCBlbmRTcmMpLCBzdGFydFRndClcbiAgICAgICAgc3RhcnRTcmMgKz0gdGhpcy5fX2ZhY2VDb3VudHNbaW5kZXhdICogbnVtVmVydHNQZXJGYWNlXG4gICAgICAgIHN0YXJ0VGd0ICs9IGZjICogbnVtVmVydHNQZXJGYWNlXG4gICAgICAgIG51bVZlcnRzUGVyRmFjZSsrXG4gICAgICB9KVxuICAgICAgdGhpcy5fX2ZhY2VWZXJ0ZXhJbmRpY2VzID0gZmFjZVZlcnRleEluZGljZXNcbiAgICB9XG4gICAgdGhpcy5fX2ZhY2VDb3VudHMgPSBmYWNlQ291bnRzXG5cbiAgICB0aGlzLl9fZmFjZUF0dHJpYnV0ZXMuZm9yRWFjaCgoYXR0cikgPT4ge1xuICAgICAgYXR0ci5yZXNpemUobnVtRmFjZXMpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgdmVydGljZXMgaW5kZXhlZCBieSB0aGlzIGZhY2VcbiAgICogQHBhcmFtIHtudW1iZXJ9IGZhY2VJbmRleCAtIFRoZSBmYWNlSW5kZXggdmFsdWUuXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgZ2V0RmFjZVZlcnRleENvdW50KGZhY2VJbmRleCkge1xuICAgIGxldCBpZHggPSAwXG4gICAgbGV0IGNvdW50ID0gMFxuICAgIHRoaXMuX19mYWNlQ291bnRzLnNvbWUoKGZjLCBpbmRleCkgPT4ge1xuICAgICAgaWR4ICs9IGZjXG4gICAgICBpZiAoaWR4ID4gZmFjZUluZGV4KSB7XG4gICAgICAgIGNvdW50ID0gaW5kZXggKyAzXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gY291bnRcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBvZmZzZXQgb2YgdGhlIGZhY2UgaW5kaWNlcyB3aXRoaW4gdGhlIGVudGlyZSBpbmRleCBhcnJheS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZhY2VJbmRleCAtIFRoZSBmYWNlSW5kZXggdmFsdWUuXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgZ2V0RmFjZVZlcnRleE9mZnNldChmYWNlSW5kZXgpIHtcbiAgICBsZXQgaWR4ID0gMFxuICAgIGxldCBvZmZzZXQgPSAwXG4gICAgdGhpcy5fX2ZhY2VDb3VudHMuc29tZSgoZmMsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoaWR4ICsgZmMgPiBmYWNlSW5kZXgpIHtcbiAgICAgICAgb2Zmc2V0ICs9IChmYWNlSW5kZXggLSBpZHgpICogKGluZGV4ICsgMylcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIGlkeCArPSBmY1xuICAgICAgb2Zmc2V0ICs9IGZjICogKGluZGV4ICsgMylcbiAgICB9KVxuICAgIHJldHVybiBvZmZzZXRcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgc2V0RmFjZVZlcnRleEluZGljZXMgbWV0aG9kLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZmFjZUluZGV4IC0gVGhlIGZhY2VJbmRleCB2YWx1ZS5cbiAgICogQHBhcmFtIHthcnJheX0gdmVydGV4SW5kaWNlcyAtIFRoZSBhcnJheSBvZiB2ZXJ0ZXggaW5kaWNlcyBmb3IgdGhpcyBmYWNlIHZhbHVlLlxuICAgKi9cbiAgc2V0RmFjZVZlcnRleEluZGljZXMoZmFjZUluZGV4LCB2ZXJ0ZXhJbmRpY2VzKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT0gMikge1xuICAgICAgY29uc29sZS53YXJuKGBkZXByZWNhdGVkIGludGVyZmFjZS4gUGxlYXNlIHBhc3MgdmVydGV4SW5kaWNlcyBhcyBhbiBhcnJheWApXG4gICAgICB2ZXJ0ZXhJbmRpY2VzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKVxuICAgIH1cbiAgICBjb25zdCBmYWNlVmVydGV4Q291bnQgPSB0aGlzLmdldEZhY2VWZXJ0ZXhDb3VudChmYWNlSW5kZXgpXG4gICAgaWYgKHZlcnRleEluZGljZXMubGVuZ3RoICE9IGZhY2VWZXJ0ZXhDb3VudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgSW52YWxpZCBpbmRpY2VzIGZvciBmYWNlOiR7ZmFjZUluZGV4fSB2ZXJ0ZXhJbmRpY2VzOiR7dmVydGV4SW5kaWNlc30uIEV4cGVjdGVkICR7ZmFjZVZlcnRleENvdW50fSBpbmRpY2VzYFxuICAgICAgKVxuICAgIH1cbiAgICBjb25zdCBvZmZzZXQgPSB0aGlzLmdldEZhY2VWZXJ0ZXhPZmZzZXQoZmFjZUluZGV4KVxuICAgIHRoaXMuX19mYWNlVmVydGV4SW5kaWNlcy5zZXQodmVydGV4SW5kaWNlcywgb2Zmc2V0KVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBuZXcgZmFjZSB0byB0aGUgbWVzaFxuICAgKiBAcGFyYW0ge2FycmF5fSB2ZXJ0ZXhJbmRpY2VzIC0gVGhlIHZlcnRleCBpbmRpY2VzIG9mIHRoZSBmYWNlLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gVGhlIGluZGV4IG9mIHRoZSBmYWNlIGluIHRoZSBtZXNoLlxuICAgKi9cbiAgYWRkRmFjZSh2ZXJ0ZXhJbmRpY2VzKSB7XG4gICAgY29uc3QgZmFjZUNvdW50cyA9IFsuLi50aGlzLl9fZmFjZUNvdW50c11cbiAgICBpZiAoZmFjZUNvdW50cy5sZW5ndGggPD0gdmVydGV4SW5kaWNlcy5sZW5ndGggLSAzKSB7XG4gICAgICBmb3IgKGxldCBpID0gZmFjZUNvdW50cy5sZW5ndGg7IGkgPCB2ZXJ0ZXhJbmRpY2VzLmxlbmd0aCAtIDM7IGkrKykgZmFjZUNvdW50c1tpXSA9IDBcbiAgICAgIGZhY2VDb3VudHNbdmVydGV4SW5kaWNlcy5sZW5ndGggLSAzXSA9IDFcbiAgICB9IGVsc2Uge1xuICAgICAgZmFjZUNvdW50c1t2ZXJ0ZXhJbmRpY2VzLmxlbmd0aCAtIDNdKytcbiAgICB9XG4gICAgdGhpcy5zZXRGYWNlQ291bnRzKGZhY2VDb3VudHMpXG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIG9mZnNldCBpbiB0aGUgZmFjZVZlcnRleEluZGljZXMgb2YgdGhpcyBuZXcgZmFjZS5cbiAgICBsZXQgZmFjZUluZGV4ID0gMFxuICAgIGxldCBvZmZzZXQgPSAwXG4gICAgdGhpcy5fX2ZhY2VDb3VudHMuc29tZSgoZmMsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoaW5kZXggKyAzID09IHZlcnRleEluZGljZXMubGVuZ3RoKSB7XG4gICAgICAgIGZhY2VJbmRleCArPSBmYyAtIDFcbiAgICAgICAgb2Zmc2V0ICs9IChmYyAtIDEpICogKGluZGV4ICsgMylcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIGZhY2VJbmRleCArPSBmY1xuICAgICAgb2Zmc2V0ICs9IGZjICogKGluZGV4ICsgMylcbiAgICB9KVxuICAgIHRoaXMuX19mYWNlVmVydGV4SW5kaWNlcy5zZXQodmVydGV4SW5kaWNlcywgb2Zmc2V0KVxuICAgIHJldHVybiBmYWNlSW5kZXhcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB2ZXJ0ZXggaW5kaWNlcyBvZiB0aGUgc3BlY2lmaWVkIGZhY2UuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmYWNlSW5kZXggLSBUaGUgaW5kZXggb2YgdGhlIHNwZWNpZmllZCBmYWNlXG4gICAqIEByZXR1cm4ge2FycmF5fSAtIEFuIGFycmF5IG9mIGluZGljZXMgaW50byB0aGUgdmVydGV4IGF0dHJpYnV0ZXNcbiAgICovXG4gIGdldEZhY2VWZXJ0ZXhJbmRpY2VzKGZhY2VJbmRleCkge1xuICAgIGNvbnN0IHZlcnRleEluZGljZXMgPSBbXVxuICAgIGNvbnN0IG9mZnNldCA9IHRoaXMuZ2V0RmFjZVZlcnRleE9mZnNldChmYWNlSW5kZXgpXG4gICAgY29uc3QgY291bnQgPSB0aGlzLmdldEZhY2VWZXJ0ZXhDb3VudChmYWNlSW5kZXgpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICB2ZXJ0ZXhJbmRpY2VzLnB1c2godGhpcy5fX2ZhY2VWZXJ0ZXhJbmRpY2VzW29mZnNldCArIGldKVxuICAgIH1cbiAgICByZXR1cm4gdmVydGV4SW5kaWNlc1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzaW5nbGUgdmVydGV4IGluZGV4IGZvciBhIGdpdmVuIGZhY2UgYW5kIGZhY2VWZXJ0ZXguXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmYWNlSW5kZXggLSBUaGUgZmFjZUluZGV4IHZhbHVlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZmFjZVZlcnRleCAtIFRoZSBmYWNlIHZlcnRleCBpcyB0aGUgaW5kZXggd2l0aGluIHRoZSBmYWNlLiBTbyB0aGUgZmlyc3QgdmVydGV4IGluZGV4IGlzIDAuXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBUaGUgdmVydGV4IGluZGV4XG4gICAqL1xuICBnZXRGYWNlVmVydGV4SW5kZXgoZmFjZUluZGV4LCBmYWNlVmVydGV4KSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5nZXRGYWNlVmVydGV4T2Zmc2V0KGZhY2VJbmRleClcbiAgICByZXR1cm4gdGhpcy5fX2ZhY2VWZXJ0ZXhJbmRpY2VzW29mZnNldCArIGZhY2VWZXJ0ZXhdXG4gIH1cblxuICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gVmVydGV4IEF0dHJpYnV0ZXNcblxuICAvKipcbiAgICogQWRkcyBhIGBWZXJ0ZXhBdHRyaWJ1dGVgIHRvIHRoZSBnZW9tZXRyeS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgdmVydGV4IGF0dHJpYnV0ZSB0byBhZGQuXG4gICAqIEBwYXJhbSB7QXR0clZhbHVlfG51bWJlcn0gZGF0YVR5cGUgLSBUaGUgZGF0YVR5cGUgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkZWZhdWx0U2NhbGFyVmFsdWUgLSBUaGUgZGVmYXVsdCBzY2FsYXIgdmFsdWUuXG4gICAqIEByZXR1cm4ge1ZlcnRleEF0dHJpYnV0ZX0gLSBSZXR1cm5zIGEgdmVydGV4IGF0dHJpYnV0ZS5cbiAgICovXG4gIGFkZFZlcnRleEF0dHJpYnV0ZShuYW1lLCBkYXRhVHlwZSwgZGVmYXVsdFNjYWxhclZhbHVlID0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgcG9zaXRpb25zID0gdGhpcy5nZXRWZXJ0ZXhBdHRyaWJ1dGUoJ3Bvc2l0aW9ucycpXG4gICAgY29uc3QgYXR0ciA9IG5ldyBWZXJ0ZXhBdHRyaWJ1dGUodGhpcywgZGF0YVR5cGUsIHBvc2l0aW9ucyAhPSB1bmRlZmluZWQgPyBwb3NpdGlvbnMubGVuZ3RoIDogMCwgZGVmYXVsdFNjYWxhclZhbHVlKVxuICAgIHRoaXMuX192ZXJ0ZXhBdHRyaWJ1dGVzLnNldChuYW1lLCBhdHRyKVxuICAgIHJldHVybiBhdHRyXG4gIH1cblxuICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gRmFjZSBBdHRyaWJ1dGVzXG5cbiAgLyoqXG4gICAqIFRoZSBhZGRGYWNlQXR0cmlidXRlIG1ldGhvZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgZmFjZSBhdHRyaWJ1dGUgdG8gYWRkLlxuICAgKiBAcGFyYW0ge0F0dHJWYWx1ZXxudW1iZXJ9IGRhdGFUeXBlIC0gVGhlIGRhdGEgdHlwZS5cbiAgICogQHBhcmFtIHtudW1iZXJ8VHlwZWRBcnJheX0gY291bnQgLSBUaGUgY291bnQgdmFsdWUuXG4gICAqIEByZXR1cm4ge0F0dHJpYnV0ZX0gLSBSZXR1cm5zIGEgZmFjZSBhdHRyaWJ1dGUuXG4gICAqL1xuICBhZGRGYWNlQXR0cmlidXRlKG5hbWUsIGRhdGFUeXBlLCBjb3VudCA9IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IGF0dHIgPSBuZXcgQXR0cmlidXRlKGRhdGFUeXBlLCBjb3VudCAhPSB1bmRlZmluZWQgPyBjb3VudCA6IHRoaXMuZ2V0TnVtRmFjZXMoKSlcbiAgICB0aGlzLl9fZmFjZUF0dHJpYnV0ZXMuc2V0KG5hbWUsIGF0dHIpXG4gICAgcmV0dXJuIGF0dHJcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgaGFzRmFjZUF0dHJpYnV0ZSBtZXRob2QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGZhY2UgYXR0cmlidXRlLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBoYXNGYWNlQXR0cmlidXRlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fX2ZhY2VBdHRyaWJ1dGVzLmhhcyhuYW1lKVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBnZXRGYWNlQXR0cmlidXRlIG1ldGhvZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgZmFjZSBhdHRyaWJ1dGUuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGdldEZhY2VBdHRyaWJ1dGUobmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9fZmFjZUF0dHJpYnV0ZXMuZ2V0KG5hbWUpXG4gIH1cblxuICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIEVkZ2UgQXR0cmlidXRlc1xuXG4gIC8qKlxuICAgKiBUaGUgYWRkRWRnZUF0dHJpYnV0ZSBtZXRob2QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGVkZ2UgYXR0cmlidXRlIHRvIGFkZC5cbiAgICogQHBhcmFtIHtBdHRyVmFsdWV8bnVtYmVyfSBkYXRhVHlwZSAtIFRoZSBkYXRhIHR5cGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCAtIFRoZSBkZWZhdWx0IHNjYWxhciB2YWx1ZS5cbiAgICogQHJldHVybiB7QXR0cmlidXRlfSAtIFJldHVybnMgYW4gZWRnZSBhdHRyaWJ1dGUuXG4gICAqL1xuICBhZGRFZGdlQXR0cmlidXRlKG5hbWUsIGRhdGFUeXBlLCBjb3VudCA9IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IGF0dHIgPSBuZXcgQXR0cmlidXRlKGRhdGFUeXBlLCBjb3VudCAhPSB1bmRlZmluZWQgPyBjb3VudCA6IHRoaXMuZ2V0TnVtRWRnZXMoKSlcbiAgICB0aGlzLl9fZWRnZUF0dHJpYnV0ZXMuc2V0KG5hbWUsIGF0dHIpXG4gICAgcmV0dXJuIGF0dHJcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgaGFzRWRnZUF0dHJpYnV0ZSBtZXRob2QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGVkZ2UgYXR0cmlidXRlLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBoYXNFZGdlQXR0cmlidXRlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fX2VkZ2VBdHRyaWJ1dGVzLmhhcyhuYW1lKVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBnZXRFZGdlQXR0cmlidXRlIG1ldGhvZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgZWRnZSBhdHRyaWJ1dGUuXG4gICAqIEByZXR1cm4ge0F0dHJpYnV0ZX0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgZ2V0RWRnZUF0dHJpYnV0ZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX19lZGdlQXR0cmlidXRlcy5nZXQobmFtZSlcbiAgfVxuXG4gIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIC8qKlxuICAgKiBUaGUgZ2VuVG9wb2xvZ3lJbmZvIG1ldGhvZC5cbiAgICovXG4gIGdlblRvcG9sb2d5SW5mbygpIHtcbiAgICBjb25zdCBjb25uZWN0ZWRWZXJ0aWNlcyA9IHt9IC8vIGFjY2VsZXJhdGlvbiBzdHJ1Y3R1cmUuXG4gICAgdGhpcy52ZXJ0ZXhFZGdlcyA9IFtdIC8vIDJkIGFycmF5IG9mIHZlcnRleCB0byBlZGdlcy5cbiAgICAvLyB0aGlzLnZlcnRleEZhY2VzID0gW107IC8vIDJkIGFycmF5IG9mIHZlcnRleCB0byBmYWNlcy5cbiAgICB0aGlzLmVkZ2VGYWNlcyA9IFtdIC8vIGZsYXQgYXJyYXkgb2YgMiBmYWNlIGluZGljZXMgcGVyIGVkZ2VcbiAgICB0aGlzLmVkZ2VWZXJ0cyA9IFtdIC8vIGZsYXQgYXJyYXkgb2YgMiB2ZXJ0IGluZGljZXMgcGVyIGVkZ2VcbiAgICB0aGlzLmZhY2VFZGdlcyA9IFtdIC8vIHRoZSBlZGdlcyBib3JkZXJpbmcgZWFjaCBmYWNlLlxuICAgIHRoaXMubnVtRWRnZXMgPSAwXG5cbiAgICBjb25zdCBwb3NpdGlvbnMgPSB0aGlzLmdldFZlcnRleEF0dHJpYnV0ZSgncG9zaXRpb25zJylcbiAgICBjb25zdCBnZXRFZGdlSW5kZXggPSAodjAsIHYxKSA9PiB7XG4gICAgICBsZXQgdG1wMCA9IHYwXG4gICAgICBsZXQgdG1wMSA9IHYxXG4gICAgICBpZiAodG1wMSA8IHRtcDApIHtcbiAgICAgICAgY29uc3QgdG1wID0gdG1wMFxuICAgICAgICB0bXAwID0gdG1wMVxuICAgICAgICB0bXAxID0gdG1wXG4gICAgICB9XG4gICAgICBjb25zdCBrZXkgPSB0bXAwICsgJz4nICsgdG1wMVxuICAgICAgaWYgKGtleSBpbiBjb25uZWN0ZWRWZXJ0aWNlcykge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhrZXkgKyAnOicgKyBjb25uZWN0ZWRWZXJ0aWNlc1trZXldICsgXCIgZmFjZTpcIiArICggdjAgPCB2MSA/IDAgOiAxKSApO1xuICAgICAgICByZXR1cm4gY29ubmVjdGVkVmVydGljZXNba2V5XVxuICAgICAgfVxuXG4gICAgICBjb25zdCBwMCA9IHBvc2l0aW9ucy5nZXRWYWx1ZVJlZih0bXAwKVxuICAgICAgY29uc3QgcDEgPSBwb3NpdGlvbnMuZ2V0VmFsdWVSZWYodG1wMSlcbiAgICAgIGNvbnN0IGVkZ2VWZWMgPSBwMS5zdWJ0cmFjdChwMClcblxuICAgICAgY29uc3QgZWRnZUluZGV4ID0gdGhpcy5lZGdlRmFjZXMubGVuZ3RoIC8gMlxuICAgICAgY29uc3QgZWRnZURhdGEgPSB7XG4gICAgICAgIGVkZ2VJbmRleDogZWRnZUluZGV4LFxuICAgICAgICBlZGdlVmVjOiBlZGdlVmVjLFxuICAgICAgfVxuICAgICAgY29ubmVjdGVkVmVydGljZXNba2V5XSA9IGVkZ2VEYXRhXG5cbiAgICAgIHRoaXMuZWRnZUZhY2VzLnB1c2goLTEpXG4gICAgICB0aGlzLmVkZ2VGYWNlcy5wdXNoKC0xKVxuICAgICAgdGhpcy5lZGdlVmVydHMucHVzaCh0bXAwKVxuICAgICAgdGhpcy5lZGdlVmVydHMucHVzaCh0bXAxKVxuICAgICAgLy8gY29uc29sZS5sb2coa2V5ICsgJzonICsgY29ubmVjdGVkVmVydGljZXNba2V5XSArIFwiIGZhY2U6XCIgKyAoIHYwIDwgdjEgPyAwIDogMSkpO1xuXG4gICAgICB0aGlzLm51bUVkZ2VzKytcbiAgICAgIHJldHVybiBlZGdlRGF0YVxuICAgIH1cblxuICAgIGNvbnN0IGFkZEVkZ2UgPSAodjAsIHYxLCBmYWNlSW5kZXgpID0+IHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdhZGRFZGdlOicgKyB2MCArIFwiIDpcIiArIHYxICsgXCIgZmFjZUluZGV4OlwiICsgZmFjZUluZGV4ICk7XG4gICAgICBjb25zdCBlZGdlRGF0YSA9IGdldEVkZ2VJbmRleCh2MCwgdjEpXG4gICAgICBjb25zdCBlZGdlSW5kZXggPSBlZGdlRGF0YS5lZGdlSW5kZXhcbiAgICAgIGlmICh2MSA8IHYwKSB7XG4gICAgICAgIGNvbnN0IGVkZ2VGYWNlSW5kZXggPSBlZGdlSW5kZXggKiAyICsgMFxuICAgICAgICBpZiAodGhpcy5fX2xvZ1RvcG9sb2d5V2FybmluZ3MgJiYgdGhpcy5lZGdlRmFjZXNbZWRnZUZhY2VJbmRleF0gIT0gLTEpXG4gICAgICAgICAgY29uc29sZS53YXJuKCdFZGdlIHBvbHkgMCBhbHJlYWR5IHNldC4gTWVzaCBpcyBub24tbWFuaWZvbGQuJylcbiAgICAgICAgdGhpcy5lZGdlRmFjZXNbZWRnZUZhY2VJbmRleF0gPSBmYWNlSW5kZXhcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGVkZ2VGYWNlSW5kZXggPSBlZGdlSW5kZXggKiAyICsgMVxuICAgICAgICBpZiAodGhpcy5fX2xvZ1RvcG9sb2d5V2FybmluZ3MgJiYgdGhpcy5lZGdlRmFjZXNbZWRnZUZhY2VJbmRleF0gIT0gLTEpXG4gICAgICAgICAgY29uc29sZS53YXJuKCdFZGdlIHBvbHkgMSBhbHJlYWR5IHNldC4gTWVzaCBpcyBub24tbWFuaWZvbGQuJylcbiAgICAgICAgdGhpcy5lZGdlRmFjZXNbZWRnZUZhY2VJbmRleF0gPSBmYWNlSW5kZXhcbiAgICAgIH1cblxuICAgICAgaWYgKCEoZmFjZUluZGV4IGluIHRoaXMuZmFjZUVkZ2VzKSkgdGhpcy5mYWNlRWRnZXNbZmFjZUluZGV4XSA9IFtdXG4gICAgICB0aGlzLmZhY2VFZGdlc1tmYWNlSW5kZXhdLnB1c2goZWRnZUluZGV4KVxuXG4gICAgICAvLyBQdXNoIHRoZSBlZGdlIGluZGV4IG9udG8gYm90aCB2ZXJ0ZXggZWRnZSBsaXN0cy5cbiAgICAgIC8vIFdlIHVzZSBTZXRzIHRvIGF2b2lkIGFkZGluZyB0aGUgc2FtZSBlZGdlIDJ4IHRvIHRoZSBzYW1lIHZlcnRleC5cbiAgICAgIGlmICh0aGlzLnZlcnRleEVkZ2VzW3YwXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy52ZXJ0ZXhFZGdlc1t2MF0gPSBuZXcgU2V0KClcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnZlcnRleEVkZ2VzW3YxXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy52ZXJ0ZXhFZGdlc1t2MV0gPSBuZXcgU2V0KClcbiAgICAgIH1cbiAgICAgIHRoaXMudmVydGV4RWRnZXNbdjBdLmFkZChlZGdlSW5kZXgpXG4gICAgICB0aGlzLnZlcnRleEVkZ2VzW3YxXS5hZGQoZWRnZUluZGV4KVxuXG4gICAgICAvLyBpZiAodGhpcy52ZXJ0ZXhGYWNlc1t2MF0gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyAgICAgdGhpcy52ZXJ0ZXhGYWNlc1t2MF0gPSBbXTtcbiAgICAgIC8vIH1cbiAgICAgIC8vIHRoaXMudmVydGV4RmFjZXNbdjBdLnB1c2goZmFjZUluZGV4KTtcbiAgICB9XG5cbiAgICBjb25zdCBudW1GYWNlcyA9IHRoaXMuZ2V0TnVtRmFjZXMoKVxuICAgIGZvciAobGV0IGZhY2VJbmRleCA9IDA7IGZhY2VJbmRleCA8IG51bUZhY2VzOyBmYWNlSW5kZXgrKykge1xuICAgICAgY29uc3QgZmFjZVZlcnRzID0gdGhpcy5nZXRGYWNlVmVydGV4SW5kaWNlcyhmYWNlSW5kZXgpXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGZhY2VWZXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBjb25zdCB2MCA9IGZhY2VWZXJ0c1tqXVxuICAgICAgICBjb25zdCB2MSA9IGZhY2VWZXJ0c1soaiArIDEpICUgZmFjZVZlcnRzLmxlbmd0aF1cbiAgICAgICAgYWRkRWRnZSh2MCwgdjEsIGZhY2VJbmRleClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29tcHV0ZXMgYSBub3JtYWwgdmFsdWUgcGVyIGZhY2UgYnkgYXZlcmFnaW5nIHRoZSB0cmlhbmdsZSBub3JtYWxzIG9mIHRoZSBmYWNlLlxuICAgKi9cbiAgY29tcHV0ZUZhY2VOb3JtYWxzKCkge1xuICAgIGNvbnN0IHBvc2l0aW9ucyA9IHRoaXMuZ2V0VmVydGV4QXR0cmlidXRlKCdwb3NpdGlvbnMnKVxuICAgIGNvbnN0IGZhY2VOb3JtYWxzID0gdGhpcy5hZGRGYWNlQXR0cmlidXRlKCdub3JtYWxzJywgVmVjMylcbiAgICBjb25zdCBudW1GYWNlcyA9IHRoaXMuZ2V0TnVtRmFjZXMoKVxuICAgIGZvciAobGV0IGZhY2VJbmRleCA9IDA7IGZhY2VJbmRleCA8IG51bUZhY2VzOyBmYWNlSW5kZXgrKykge1xuICAgICAgY29uc3QgZmFjZVZlcnRzID0gdGhpcy5nZXRGYWNlVmVydGV4SW5kaWNlcyhmYWNlSW5kZXgpXG4gICAgICBjb25zdCBwMCA9IHBvc2l0aW9ucy5nZXRWYWx1ZVJlZihmYWNlVmVydHNbMF0pXG4gICAgICBjb25zdCBwMSA9IHBvc2l0aW9ucy5nZXRWYWx1ZVJlZihmYWNlVmVydHNbMV0pXG4gICAgICBsZXQgcHJldiA9IHAxXG4gICAgICBjb25zdCBmYWNlTm9ybWFsID0gbmV3IFZlYzMoKVxuICAgICAgZm9yIChsZXQgaiA9IDI7IGogPCBmYWNlVmVydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgY29uc3QgcG4gPSBwb3NpdGlvbnMuZ2V0VmFsdWVSZWYoZmFjZVZlcnRzW2pdKVxuICAgICAgICBjb25zdCB2MCA9IHByZXYuc3VidHJhY3QocDApXG4gICAgICAgIGNvbnN0IHYxID0gcG4uc3VidHJhY3QocDApXG4gICAgICAgIGZhY2VOb3JtYWwuYWRkSW5QbGFjZSh2MS5jcm9zcyh2MCkubm9ybWFsaXplKCkpXG4gICAgICAgIHByZXYgPSBwblxuICAgICAgfVxuICAgICAgaWYgKGZhY2VOb3JtYWwubGVuZ3RoU3F1YXJlZCgpIDwgTnVtYmVyLkVQU0lMT04pIHtcbiAgICAgICAgLy8gTm90ZTogd2UgYXJlIGdldHRpbmcgbWFueSBmYWNlcyB3aXRoIG5vIHN1cmZhY2UgYXJlYS5cbiAgICAgICAgLy8gVGhpcyBpcyBzaW1wbHkgYW4gYXV0aG9yaW5nIGlzc3VlLlxuICAgICAgICAvLyBjb25zb2xlLndhcm4oXCJJbnZhbGlkIE1lc2ggdG9wb2xvZ3lcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmYWNlTm9ybWFscy5zZXRWYWx1ZShmYWNlSW5kZXgsIGZhY2VOb3JtYWwubm9ybWFsaXplKCkpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIGFuZ2xlcyBhdCBlYWNoIGVkZ2UgYmV0d2VlbiB0aGUgYWRqb2luaW5nIGZhY2VzXG4gICAqL1xuICBjYWxjdWxhdGVFZGdlQW5nbGVzKCkge1xuICAgIGlmICh0aGlzLnZlcnRleEVkZ2VzID09IHVuZGVmaW5lZCkgdGhpcy5nZW5Ub3BvbG9neUluZm8oKVxuXG4gICAgdGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKVxuXG4gICAgY29uc3QgcG9zaXRpb25zID0gdGhpcy5nZXRWZXJ0ZXhBdHRyaWJ1dGUoJ3Bvc2l0aW9ucycpXG4gICAgY29uc3QgZmFjZU5vcm1hbHMgPSB0aGlzLmdldEZhY2VBdHRyaWJ1dGUoJ25vcm1hbHMnKVxuICAgIHRoaXMuZWRnZVZlY3MgPSBbXVxuICAgIHRoaXMuZWRnZUFuZ2xlcyA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5udW1FZGdlcylcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZWRnZUZhY2VzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICBjb25zdCB2MCA9IHRoaXMuZWRnZVZlcnRzW2ldXG4gICAgICBjb25zdCB2MSA9IHRoaXMuZWRnZVZlcnRzW2kgKyAxXVxuICAgICAgY29uc3QgZWRnZVZlYyA9IHBvc2l0aW9ucy5nZXRWYWx1ZVJlZih2MSkuc3VidHJhY3QocG9zaXRpb25zLmdldFZhbHVlUmVmKHYwKSlcbiAgICAgIGVkZ2VWZWMubm9ybWFsaXplSW5QbGFjZSgpXG4gICAgICB0aGlzLmVkZ2VWZWNzLnB1c2goZWRnZVZlYylcblxuICAgICAgY29uc3QgcDAgPSB0aGlzLmVkZ2VGYWNlc1tpXVxuICAgICAgY29uc3QgcDEgPSB0aGlzLmVkZ2VGYWNlc1tpICsgMV1cbiAgICAgIGlmIChwMCA9PSAtMSB8fCBwMSA9PSAtMSkge1xuICAgICAgICAvLyBGbGFnIHRoZSBlZGdlIGFzIGEgYm9yZGVyIGVkZ2UuLi4uXG4gICAgICAgIHRoaXMuZWRnZUFuZ2xlc1tpIC8gMl0gPSBNYXRoLlBJICogMi4wXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG4wID0gZmFjZU5vcm1hbHMuZ2V0VmFsdWVSZWYocDApXG4gICAgICBjb25zdCBuMSA9IGZhY2VOb3JtYWxzLmdldFZhbHVlUmVmKHAxKVxuICAgICAgdGhpcy5lZGdlQW5nbGVzW2kgLyAyXSA9IG4wLmFuZ2xlVG8objEpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbXB1dGUgdmVydGV4IG5vcm1hbHMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoYXJkQW5nbGUgLSBUaGUgaGFyZEFuZ2xlIHZhbHVlIGluIHJhZGlhbnMuXG4gICAqIEByZXR1cm4ge1ZlcnRleEF0dHJpYnV0ZX0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgY29tcHV0ZVZlcnRleE5vcm1hbHMoaGFyZEFuZ2xlID0gMS4wIC8qIHJhZGlhbnMgKi8pIHtcbiAgICB0aGlzLmNhbGN1bGF0ZUVkZ2VBbmdsZXMoKVxuXG4gICAgY29uc3QgZmFjZU5vcm1hbHMgPSB0aGlzLmdldEZhY2VBdHRyaWJ1dGUoJ25vcm1hbHMnKVxuICAgIGNvbnN0IG5vcm1hbHNBdHRyID0gdGhpcy5hZGRWZXJ0ZXhBdHRyaWJ1dGUoJ25vcm1hbHMnLCBWZWMzKVxuXG4gICAgLy8gdGhlc2UgbWV0aG9kcyBhcmUgZmFzdGVyIHZlcnNpb25zIHRoYW4gdXNpbmcgdGhlIG1ldGhvZHNcbiAgICAvLyBwcm92aWRlZCBvbiB0aGUgYXR0cmlidXRlcy4gV2UgY2FjaGUgdmFsdWVzIGFuZCB1c2UgaGFyZCBjb2RlZCBjb25zdGFudHMuXG4gICAgY29uc3QgZmFjZU5vcm1hbHNCdWZmZXIgPSBmYWNlTm9ybWFscy5kYXRhLmJ1ZmZlclxuICAgIGNvbnN0IGdldEZhY2VOb3JtYWwgPSAoaW5kZXgpID0+IHtcbiAgICAgIHJldHVybiBWZWMzLmNyZWF0ZUZyb21CdWZmZXIoZmFjZU5vcm1hbHNCdWZmZXIsIGluZGV4ICogMyAqIDQpIC8vIDMgY29tcG9uZW50cyBhdCA0IGJ5dGVzIGVhY2guXG4gICAgfVxuICAgIGNvbnN0IHZlcnRleE5vcm1hbHNBcnJheSA9IG5vcm1hbHNBdHRyLmRhdGFcbiAgICBjb25zdCBzZXRWZXJ0ZXhOb3JtYWwgPSAoaW5kZXgsIHZhbHVlKSA9PiB7XG4gICAgICB2ZXJ0ZXhOb3JtYWxzQXJyYXlbaW5kZXggKiAzICsgMF0gPSB2YWx1ZS54XG4gICAgICB2ZXJ0ZXhOb3JtYWxzQXJyYXlbaW5kZXggKiAzICsgMV0gPSB2YWx1ZS55XG4gICAgICB2ZXJ0ZXhOb3JtYWxzQXJyYXlbaW5kZXggKiAzICsgMl0gPSB2YWx1ZS56XG4gICAgfVxuICAgIGNvbnN0IGdldENvbm5lY3RlZEVkZ2VWZWNzID0gKGZhY2VJbmRleCwgdmVydGV4SW5kZXgpID0+IHtcbiAgICAgIGxldCBlMFxuICAgICAgbGV0IGUxXG4gICAgICBjb25zdCBmYWNlRWRnZXMgPSB0aGlzLmZhY2VFZGdlc1tmYWNlSW5kZXhdXG4gICAgICBmb3IgKGNvbnN0IGUgb2YgZmFjZUVkZ2VzKSB7XG4gICAgICAgIGlmICh0aGlzLmVkZ2VWZXJ0c1tlICogMl0gPT0gdmVydGV4SW5kZXgpIHtcbiAgICAgICAgICBpZiAoIWUwKSBlMCA9IHRoaXMuZWRnZVZlY3NbZV1cbiAgICAgICAgICBlbHNlIGUxID0gdGhpcy5lZGdlVmVjc1tlXVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZWRnZVZlcnRzW2UgKiAyICsgMV0gPT0gdmVydGV4SW5kZXgpIHtcbiAgICAgICAgICBpZiAoIWUwKSBlMCA9IHRoaXMuZWRnZVZlY3NbZV1cbiAgICAgICAgICBlbHNlIGUxID0gdGhpcy5lZGdlVmVjc1tlXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gW2UwLCBlMV1cbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudmVydGV4RWRnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIElmIHRoaXMgZmFjZSBpbmRleGluZyBkb2Vzbid0IHN0YXJ0IGF0IDAsIHRoZW4gdGhlIHZlcnRleEVkZ2VzIGRvbid0IGVpdGhlci5cbiAgICAgIGlmICh0aGlzLnZlcnRleEVkZ2VzW2ldID09IHVuZGVmaW5lZCkgY29udGludWVcblxuICAgICAgY29uc3QgZWRnZXMgPSB0aGlzLnZlcnRleEVkZ2VzW2ldXG5cbiAgICAgIC8vIEdyb3VwcyBvZiBmYWNlcyBoYXZpbmcgYSBzbW9vdGggbm9ybWFsIGF0IHRoZSBjdXJyZW50IHZlcnRleC5cbiAgICAgIGNvbnN0IGZhY2VHcm91cHMgPSBbXVxuICAgICAgY29uc3QgYWRkRmFjZVRvR3JvdXAgPSAoZmFjZSkgPT4ge1xuICAgICAgICBsZXQgaW5Hcm91cCA9IGZhbHNlXG4gICAgICAgIGZvciAoY29uc3QgZmFjZUdyb3VwIG9mIGZhY2VHcm91cHMpIHtcbiAgICAgICAgICBpbkdyb3VwID0gZmFjZUdyb3VwLmluY2x1ZGVzKGZhY2UpXG4gICAgICAgICAgaWYgKGluR3JvdXApIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpbkdyb3VwKSBmYWNlR3JvdXBzLnB1c2goW2ZhY2VdKVxuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBlIG9mIGVkZ2VzKSB7XG4gICAgICAgIGNvbnN0IGYwID0gdGhpcy5lZGdlRmFjZXNbZSAqIDJdXG4gICAgICAgIGNvbnN0IGYxID0gdGhpcy5lZGdlRmFjZXNbZSAqIDIgKyAxXVxuICAgICAgICBpZiAoZjAgIT0gLTEgJiYgZjEgIT0gLTEgJiYgdGhpcy5lZGdlQW5nbGVzW2VdIDwgaGFyZEFuZ2xlKSB7XG4gICAgICAgICAgbGV0IGYwZ3JvdXBJbmRleCA9IC0xXG4gICAgICAgICAgbGV0IGYxZ3JvdXBJbmRleCA9IC0xXG4gICAgICAgICAgZm9yIChsZXQgZ3JvdXBJbmRleCA9IDA7IGdyb3VwSW5kZXggPCBmYWNlR3JvdXBzLmxlbmd0aDsgZ3JvdXBJbmRleCsrKSB7XG4gICAgICAgICAgICBpZiAoZjBncm91cEluZGV4ID09IC0xICYmIGZhY2VHcm91cHNbZ3JvdXBJbmRleF0uaW5jbHVkZXMoZjApKSBmMGdyb3VwSW5kZXggPSBncm91cEluZGV4XG4gICAgICAgICAgICBpZiAoZjFncm91cEluZGV4ID09IC0xICYmIGZhY2VHcm91cHNbZ3JvdXBJbmRleF0uaW5jbHVkZXMoZjEpKSBmMWdyb3VwSW5kZXggPSBncm91cEluZGV4XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChmMGdyb3VwSW5kZXggPT0gLTEgJiYgZjFncm91cEluZGV4ID09IC0xKSB7XG4gICAgICAgICAgICBmYWNlR3JvdXBzLnB1c2goW2YwLCBmMV0pXG4gICAgICAgICAgfSBlbHNlIGlmIChmMGdyb3VwSW5kZXggIT0gLTEgJiYgZjFncm91cEluZGV4ICE9IC0xKSB7XG4gICAgICAgICAgICBpZiAoZjBncm91cEluZGV4ICE9IGYxZ3JvdXBJbmRleCkge1xuICAgICAgICAgICAgICAvLyBNZXJnZSB0aGUgMiBncm91cHMgdGhhdCB0aGUgc21vb3RoIGVkZ2Ugam9pbnMuXG4gICAgICAgICAgICAgIGZhY2VHcm91cHNbZjBncm91cEluZGV4XSA9IGZhY2VHcm91cHNbZjBncm91cEluZGV4XS5jb25jYXQoZmFjZUdyb3Vwc1tmMWdyb3VwSW5kZXhdKVxuICAgICAgICAgICAgICBmYWNlR3JvdXBzLnNwbGljZShmMWdyb3VwSW5kZXgsIDEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmMGdyb3VwSW5kZXggPT0gLTEpIHtcbiAgICAgICAgICAgICAgZmFjZUdyb3Vwc1tmMWdyb3VwSW5kZXhdLnB1c2goZjApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZjFncm91cEluZGV4ID09IC0xKSB7XG4gICAgICAgICAgICAgIGZhY2VHcm91cHNbZjBncm91cEluZGV4XS5wdXNoKGYxKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICAgIC8vIFRoaXMgaXMgYSBoYXJkIGVkZ2Ugb3IgYSBib3JkZXIgZWRnZS4uLiBBZGQgZmFjZXMgc2VwYXJhdGVseSBncm91cC5cbiAgICAgICAgaWYgKGYwICE9IC0xKSBhZGRGYWNlVG9Hcm91cChmMClcbiAgICAgICAgaWYgKGYxICE9IC0xKSBhZGRGYWNlVG9Hcm91cChmMSlcbiAgICAgIH1cblxuICAgICAgLy8gU29ydCB0aGUgZ3JvdXBzIHRvIGhhdmUgdGhlIGJpZ2dlc3QgZ3JvdXAgZmlyc3QuXG4gICAgICBmYWNlR3JvdXBzLnNvcnQoKGEsIGIpID0+IChhLmxlbmd0aCA8IGIubGVuZ3RoID8gMSA6IGEubGVuZ3RoID4gYi5sZW5ndGggPyAtMSA6IDApKVxuXG4gICAgICBsZXQgZmlyc3RWZXJ0ZXggPSB0cnVlXG4gICAgICBmb3IgKGNvbnN0IGZhY2VHcm91cCBvZiBmYWNlR3JvdXBzKSB7XG4gICAgICAgIGNvbnN0IG5vcm1hbCA9IG5ldyBWZWMzKClcbiAgICAgICAgZm9yIChjb25zdCBmYWNlSW5kZXggb2YgZmFjZUdyb3VwKSB7XG4gICAgICAgICAgY29uc3QgZmFjZUVkZ2VzID0gZ2V0Q29ubmVjdGVkRWRnZVZlY3MoZmFjZUluZGV4LCBpKVxuICAgICAgICAgIGNvbnN0IHdlaWdodCA9IGZhY2VFZGdlc1swXS5hbmdsZVRvKGZhY2VFZGdlc1sxXSlcbiAgICAgICAgICAvLyBpZiAoaSA9PSAxKVxuICAgICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhcIkZhY2VOb3JtYWw6XCIgKyBmYWNlSW5kZXggKyBcIjpcIiArIGdldEZhY2VOb3JtYWwoZmFjZUluZGV4KS50b1N0cmluZygpKTtcbiAgICAgICAgICBub3JtYWwuYWRkSW5QbGFjZShnZXRGYWNlTm9ybWFsKGZhY2VJbmRleCkuc2NhbGUod2VpZ2h0KSlcbiAgICAgICAgfVxuICAgICAgICBub3JtYWwubm9ybWFsaXplSW5QbGFjZSgpXG4gICAgICAgIGlmIChmaXJzdFZlcnRleCkge1xuICAgICAgICAgIHNldFZlcnRleE5vcm1hbChpLCBub3JtYWwpXG4gICAgICAgICAgZmlyc3RWZXJ0ZXggPSBmYWxzZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vcm1hbHNBdHRyLnNldFNwbGl0VmVydGV4VmFsdWVzKGksIGZhY2VHcm91cCwgbm9ybWFsKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vcm1hbHNBdHRyXG4gIH1cblxuICAvKipcbiAgICogVGhlIGNvbXB1dGVIYXJkRWRnZXNJbmRpY2VzIG1ldGhvZC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGhhcmRBbmdsZSAtIFRoZSBoYXJkQW5nbGUgdmFsdWUgaW4gcmFkaWFucy5cbiAgICogQHJldHVybiB7YXJyYXl9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGNvbXB1dGVIYXJkRWRnZXNJbmRpY2VzKGhhcmRBbmdsZSA9IDEuMCkge1xuICAgIGlmICghdGhpcy5lZGdlVmVydHMpIHRoaXMuY2FsY3VsYXRlRWRnZUFuZ2xlcygpXG5cbiAgICBjb25zdCBoYXJkRWRnZXMgPSBbXVxuICAgIGNvbnN0IGFkZEVkZ2UgPSAoaW5kZXgpID0+IHtcbiAgICAgIGhhcmRFZGdlcy5wdXNoKHRoaXMuZWRnZVZlcnRzW2luZGV4XSlcbiAgICAgIGhhcmRFZGdlcy5wdXNoKHRoaXMuZWRnZVZlcnRzW2luZGV4ICsgMV0pXG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5lZGdlQW5nbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5lZGdlQW5nbGVzW2ldID4gaGFyZEFuZ2xlKSB7XG4gICAgICAgIGFkZEVkZ2UoaSAqIDIpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBVaW50MzJBcnJheS5mcm9tKGhhcmRFZGdlcylcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZ2V0V2lyZWZyYW1lSW5kaWNlcyBtZXRob2QuXG4gICAqIEByZXR1cm4ge2FueX0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ2V0V2lyZWZyYW1lSW5kaWNlcygpIHtcbiAgICBjb25zb2xlLndhcm4oJ0B0b2RvLXJldmlldyAtIFRoaXMgcmV0dXJucyBub3RoaW5nJylcbiAgICByZXR1cm4gaW5kaWNlc1xuICB9XG5cbiAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBSZW5kZXJpbmdcblxuICAvKipcbiAgICogVGhlIGdlbkJ1ZmZlcnMgbWV0aG9kLlxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0cyAtIFRoZSBvcHRzIHZhbHVlLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGdlbkJ1ZmZlcnMob3B0cykge1xuICAgIC8vIENvbXB1dGUgdGhlIG5vcm1hbHMgb24gZGVtYW5kLlxuICAgIC8vIGlmICghKCdub3JtYWxzJyBpbiB0aGlzLl9fdmVydGV4QXR0cmlidXRlcykpIHtcbiAgICAvLyAgICAgLy8gdGhpcy5fX2dlb20uY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcbiAgICAvLyAgICAgdGhpcy5hZGRWZXJ0ZXhBdHRyaWJ1dGUoXCJub3JtYWxzXCIsIFZlYzMsIDAuMCk7XG4gICAgLy8gfVxuXG4gICAgY29uc3Qgc3BsaXRJbmRpY2VzID0ge31cbiAgICBsZXQgc3BsaXRDb3VudCA9IDBcbiAgICBmb3IgKGNvbnN0IFssIGF0dHJdIG9mIHRoaXMuX192ZXJ0ZXhBdHRyaWJ1dGVzKSB7XG4gICAgICBjb25zdCBhdHRyU3BsaXRzID0gYXR0ci5nZXRTcGxpdHMoKVxuICAgICAgZm9yIChjb25zdCBwb2x5Z29uIGluIGF0dHJTcGxpdHMpIHtcbiAgICAgICAgaWYgKCEocG9seWdvbiBpbiBzcGxpdEluZGljZXMpKSBzcGxpdEluZGljZXNbcG9seWdvbl0gPSB7fVxuICAgICAgICBjb25zdCB2ZXJ0aWNlcyA9IGF0dHJTcGxpdHNbcG9seWdvbl1cbiAgICAgICAgZm9yIChjb25zdCB2IGluIHZlcnRpY2VzKSB7XG4gICAgICAgICAgY29uc3QgdmVydGV4ID0gcGFyc2VJbnQodilcbiAgICAgICAgICBpZiAoISh2ZXJ0ZXggaW4gc3BsaXRJbmRpY2VzW3BvbHlnb25dKSkge1xuICAgICAgICAgICAgc3BsaXRJbmRpY2VzW3BvbHlnb25dW3ZlcnRleF0gPSBzcGxpdENvdW50XG4gICAgICAgICAgICBzcGxpdENvdW50KytcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBwb3NpdGlvbnMgPSB0aGlzLmdldFZlcnRleEF0dHJpYnV0ZSgncG9zaXRpb25zJylcbiAgICBjb25zdCBudW1VblNwbGl0VmVydGljZXMgPSBwb3NpdGlvbnMubGVuZ3RoXG4gICAgY29uc3QgdG90YWxOdW1WZXJ0aWNlcyA9IG51bVVuU3BsaXRWZXJ0aWNlcyArIHNwbGl0Q291bnRcblxuICAgIGxldCBpbmRpY2VzXG4gICAgaWYgKCFvcHRzIHx8IG9wdHMuaW5jbHVkZUluZGljZXMgIT0gZmFsc2UpIHtcbiAgICAgIGluZGljZXMgPSB0aGlzLmdlbmVyYXRlVHJpYW5ndWxhdGVkSW5kaWNlcyh0b3RhbE51bVZlcnRpY2VzLCBudW1VblNwbGl0VmVydGljZXMsIHNwbGl0SW5kaWNlcylcbiAgICB9XG5cbiAgICAvLyBsZXQgbWF4SW5kZXg7XG4gICAgLy8gaWYgKGRlYnVnQXR0clZhbHVlcylcbiAgICAvLyAgICAgbWF4SW5kZXggPSBNYXRoLm1heCguLi5pbmRpY2VzKTtcbiAgICBjb25zdCBhdHRyQnVmZmVycyA9IHt9XG4gICAgZm9yIChjb25zdCBbYXR0ck5hbWUsIGF0dHJdIG9mIHRoaXMuX192ZXJ0ZXhBdHRyaWJ1dGVzKSB7XG4gICAgICBsZXQgdmFsdWVzXG4gICAgICBpZiAoc3BsaXRDb3VudCA9PSAwKSB2YWx1ZXMgPSBhdHRyLmRhdGFcbiAgICAgIGVsc2UgdmFsdWVzID0gYXR0ci5nZW5lcmF0ZVNwbGl0VmFsdWVzKHNwbGl0SW5kaWNlcywgc3BsaXRDb3VudClcblxuICAgICAgY29uc3QgZGltZW5zaW9uID0gYXR0ci5udW1FbGVtZW50c1xuICAgICAgY29uc3QgY291bnQgPSB2YWx1ZXMubGVuZ3RoIC8gZGltZW5zaW9uXG5cbiAgICAgIC8vIGlmIChkZWJ1Z0F0dHJWYWx1ZXMpIHtcbiAgICAgIC8vICAgICBpZiAoY291bnQgPD0gbWF4SW5kZXgpXG4gICAgICAvLyAgICAgICAgIGNvbnNvbGUud2FybihcIkludmFsaWQgaW5kZXhpbmcuIEF0dHIgdmFsdWUgaXMgaW5zdWZmaWNpZW50IGZvciBpbmRleGluZzpcIiArIGF0dHJOYW1lICsgXCIuIE1heCBJbmRleDpcIiArIG1heEluZGV4ICsgXCIgQXR0ciBTaXplOlwiICsgY291bnQpO1xuICAgICAgLy8gfVxuXG4gICAgICBhdHRyQnVmZmVyc1thdHRyTmFtZV0gPSB7XG4gICAgICAgIHZhbHVlczogdmFsdWVzLFxuICAgICAgICBjb3VudDogY291bnQsXG4gICAgICAgIGRpbWVuc2lvbjogZGltZW5zaW9uLFxuICAgICAgICBub3JtYWxpemVkOiBhdHRyTmFtZSA9PSAnbm9ybWFscycsXG4gICAgICAgIGRhdGFUeXBlOiBhdHRyLmRhdGFUeXBlLFxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgIG51bVZlcnRpY2VzOiB0aGlzLm51bVZlcnRpY2VzKCksXG4gICAgICBudW1SZW5kZXJWZXJ0czogdG90YWxOdW1WZXJ0aWNlcyxcbiAgICAgIGluZGljZXMsXG4gICAgICBhdHRyQnVmZmVycyxcbiAgICB9XG5cbiAgICBpZiAob3B0cyAmJiBvcHRzLmluY2x1ZGVWZXJ0ZXhOZWlnaGJvcnMpIHtcbiAgICAgIGlmICh0aGlzLnZlcnRleEVkZ2VzID09IHVuZGVmaW5lZCkgdGhpcy5nZW5Ub3BvbG9neUluZm8oKVxuXG4gICAgICBsZXQgY291bnQgPSAwXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudmVydGV4RWRnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gSWYgdGhpcyBmYWNlIGluZGV4aW5nIGRvZXNuJ3Qgc3RhcnQgYXQgMCwgdGhlbiB0aGUgdmVydGV4RWRnZXMgZG9uJ3QgZWl0aGVyLlxuICAgICAgICBpZiAodGhpcy52ZXJ0ZXhFZGdlc1tpXSkgY291bnQgKz0gdGhpcy52ZXJ0ZXhFZGdlc1tpXS5zaXplXG4gICAgICB9XG4gICAgICAvLyBUaGUgYXJyYXkgd2lsbCBiZSBzdHJ1Y3R1cmVkIGFzIGEgc3RhcnQrb2Zmc2V0IGZvciBlYWNoIHZlcnRleCwgZm9sbG93ZWRcbiAgICAgIC8vIGJ5IGEgMmQgYXJyYXkgb2YgbmVpZ2hib3IgaW5kaWNlcy5cbiAgICAgIGNvbnN0IHZlcnRleE5laWdoYm9ycyA9IG5ldyBVaW50MzJBcnJheSh0aGlzLnZlcnRleEVkZ2VzLmxlbmd0aCAqIDIgKyBjb3VudClcblxuICAgICAgY29uc3Qgc29ydEZhbkVkZ2VzID0gKGZhbkVkZ2VzKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmFuRWRnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBmZUEgPSBmYW5FZGdlc1tpXVxuICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgaTsgaisrKSB7XG4gICAgICAgICAgICBjb25zdCBmZUIgPSBmYW5FZGdlc1tqXVxuICAgICAgICAgICAgaWYgKGZlQVswXSAhPSAtMSAmJiBmZUFbMF0gPT0gZmVCWzFdKSB7XG4gICAgICAgICAgICAgIC8vICBtb3ZlIGZlQSBhZnRlciBmZUI7XG4gICAgICAgICAgICAgIGlmIChpICE9IGogKyAxKSB7XG4gICAgICAgICAgICAgICAgZmFuRWRnZXMuc3BsaWNlKGksIDEpXG4gICAgICAgICAgICAgICAgZmFuRWRnZXMuc3BsaWNlKGogKyAxLCAwLCBmZUEpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmZUFbMV0gIT0gLTEgJiYgZmVBWzFdID09IGZlQlswXSkge1xuICAgICAgICAgICAgICAvLyAgbW92ZSBmZUEgYmVmb3JlIGZlQjtcbiAgICAgICAgICAgICAgZmFuRWRnZXMuc3BsaWNlKGksIDEpXG4gICAgICAgICAgICAgIGZhbkVkZ2VzLnNwbGljZShqLCAwLCBmZUEpXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNoZWNrRmFuRWRnZXMgPSAoZmFuRWRnZXMpID0+IHtcbiAgICAgICAgLy8gbm93IGNoZWNrIHRoYXQgdGhlIGZhY2VzIGFsbCBidWlsZCBhIGZhbi4gTWF5YmUgc3RhcnRpbmcgYW5kIGVuZGluZyB3aXRoIC0xXG4gICAgICAgIGlmIChmYW5FZGdlc1swXVswXSA9PSAtMSB8fCBmYW5FZGdlc1tmYW5FZGdlcy5sZW5ndGggLSAxXVsxXSA9PSAtMSkge1xuICAgICAgICAgIGlmIChmYW5FZGdlc1swXVswXSAhPSAtMSB8fCBmYW5FZGdlc1tmYW5FZGdlcy5sZW5ndGggLSAxXVsxXSAhPSAtMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJZiBmYW4gc3RhcnRzIHdpdGggLTEsIGl0IG11c3QgYWxzbyBlbmQgd2l0aCAtMScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmFuRWRnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBmZSA9IGZhbkVkZ2VzW2ldXG4gICAgICAgICAgaWYgKGZlWzBdID09IC0xIHx8IGZlWzFdID09IC0xKSB7XG4gICAgICAgICAgICBpZiAoaSAhPSAwICYmIGkgIT0gZmFuRWRnZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJy0xIG9ubHkgYWxsb3dlZCBhdCB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBmYW4uJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGZlWzBdICE9IC0xKSB7XG4gICAgICAgICAgICBsZXQgcHJldiA9IGkgLSAxXG4gICAgICAgICAgICBpZiAocHJldiA8IDApIHByZXYgKz0gZmFuRWRnZXMubGVuZ3RoXG4gICAgICAgICAgICBpZiAoZmVbMF0gIT0gZmFuRWRnZXNbcHJldl1bMV0pIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWNlcyBhcmUgbm90IHNlcXVlbnRpYWwnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZmVbMV0gIT0gLTEpIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHQgPSAoaSArIDEpICUgZmFuRWRnZXMubGVuZ3RoXG4gICAgICAgICAgICBpZiAoZmVbMV0gIT0gZmFuRWRnZXNbbmV4dF1bMF0pIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWNlcyBhcmUgbm90IHNlcXVlbnRpYWwnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBQb3B1bGF0ZSB0aGUgc3RhcnQgYW5kIG9mZnNldCB2YWx1ZXMuXG4gICAgICBsZXQgb2Zmc2V0ID0gdGhpcy52ZXJ0ZXhFZGdlcy5sZW5ndGggKiAyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudmVydGV4RWRnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXMudmVydGV4RWRnZXNbaV0gPT0gdW5kZWZpbmVkKSBjb250aW51ZVxuICAgICAgICBjb25zdCBlZGdlcyA9IHRoaXMudmVydGV4RWRnZXNbaV1cblxuICAgICAgICAvLyBCdWlsZCBhIHNvcnRlZCBsaXN0IG9mIGZhY2VzIGJhc2VkIG9uIGEgZmFuIGFyb3VuZFxuICAgICAgICAvLyB0aGUgdmVydGV4LlxuICAgICAgICBjb25zdCBmYW5FZGdlcyA9IFtdXG4gICAgICAgIGZvciAoY29uc3QgZSBvZiBlZGdlcykge1xuICAgICAgICAgIGNvbnN0IHYwID0gdGhpcy5lZGdlVmVydHNbZSAqIDJdXG4gICAgICAgICAgY29uc3QgdjEgPSB0aGlzLmVkZ2VWZXJ0c1tlICogMiArIDFdXG4gICAgICAgICAgbGV0IGYwID0gdGhpcy5lZGdlRmFjZXNbZSAqIDJdXG4gICAgICAgICAgbGV0IGYxID0gdGhpcy5lZGdlRmFjZXNbZSAqIDIgKyAxXVxuICAgICAgICAgIGxldCBuZWlnVmVydFxuICAgICAgICAgIGlmICh2MCA9PSBpKSB7XG4gICAgICAgICAgICBuZWlnVmVydCA9IHYxXG4gICAgICAgICAgfSBlbHNlIGlmICh2MSA9PSBpKSB7XG4gICAgICAgICAgICBuZWlnVmVydCA9IHYwXG4gICAgICAgICAgICAvLyBzd2FwIHRoZSBmYWNlc1xuICAgICAgICAgICAgY29uc3QgdG1wID0gZjBcbiAgICAgICAgICAgIGYwID0gZjFcbiAgICAgICAgICAgIGYxID0gdG1wXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB0b3BvbG9neScpXG4gICAgICAgICAgfVxuICAgICAgICAgIGZhbkVkZ2VzLnB1c2goW2YwLCBmMSwgbmVpZ1ZlcnRdKVxuICAgICAgICB9XG4gICAgICAgIHNvcnRGYW5FZGdlcyhmYW5FZGdlcylcbiAgICAgICAgY2hlY2tGYW5FZGdlcyhmYW5FZGdlcylcbiAgICAgICAgY29uc3QgY2xvc2VkID0gZmFuRWRnZXNbMF1bMF0gIT0gLTEgfHwgZmFuRWRnZXNbZmFuRWRnZXMubGVuZ3RoIC0gMV1bMV0gIT0gLTFcbiAgICAgICAgbGV0IGZsYWdzID0gMFxuICAgICAgICBpZiAoY2xvc2VkKSBmbGFncyArPSAxXG4gICAgICAgIHZlcnRleE5laWdoYm9yc1tpICogMl0gPSBvZmZzZXRcbiAgICAgICAgdmVydGV4TmVpZ2hib3JzW2kgKiAyICsgMV0gPSBlZGdlcy5zaXplICsgKGZsYWdzIDw8IDgpXG4gICAgICAgIGZvciAoY29uc3QgZmUgb2YgZmFuRWRnZXMpIHtcbiAgICAgICAgICB2ZXJ0ZXhOZWlnaGJvcnNbb2Zmc2V0XSA9IGZlWzJdXG4gICAgICAgICAgb2Zmc2V0KytcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXN1bHQudmVydGV4TmVpZ2hib3JzID0gdmVydGV4TmVpZ2hib3JzXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIENvbXB1dGUgdGhlIG51bWJlciBvZiB0cmlhbmdsZXMuIEZvciBoaWdoZXIgZGVncmVlIHBvbHlnb25zLCB0aGV5IGFyZSBkaXZpZGVkIGludG8gbXVsdGlwbGUgdHJpYW5nbGVzIGZvciByZW5kZXJpbmcuXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBSZXR1cm5zIHRoZSBudW1iZXIgb2YgdHJpYW5nbGVzLlxuICAgKi9cbiAgY29tcHV0ZU51bVRyaWFuZ2xlcygpIHtcbiAgICBsZXQgbnVtVmVydHNQZXJGYWNlID0gM1xuICAgIGxldCB0cmlzQ291bnQgPSAwXG4gICAgZm9yIChjb25zdCBmYyBvZiB0aGlzLl9fZmFjZUNvdW50cykge1xuICAgICAgdHJpc0NvdW50ICs9IGZjICogKG51bVZlcnRzUGVyRmFjZSAtIDIpXG4gICAgICBudW1WZXJ0c1BlckZhY2UrK1xuICAgIH1cbiAgICByZXR1cm4gdHJpc0NvdW50XG4gIH1cblxuICAvKipcbiAgICogVG8gcHJlcGFyZSBkYXRhIGZvciByZW5kZXJpbmcsIHRoZSBpbmRpY2VzIGZvciB0aGUgcG9seWdvbnMgaXMgdXNlZCB0byBjb21wdXRlIGEgbmV3IGluZGV4IGJ1ZmZlciBiYXNlZCBvblxuICAgKiBvbmx5IHRyaWFuZ2xlcy4gVGhpcyBpcyB1c2VkIGR1cmluZyByZW5kZXJpbmcgYW5kIHRoZSByZXN1bHRpbmcgaW5kaWNlcyB1cGxvYWRlZCBvdCB0aGUgR1BVICBieSBHTE1lc2ggY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0b3RhbE51bVZlcnRpY2VzIC0gVGhlIHRvdGFsIG51bWJlciBvZiB2ZXJ0aWNlcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG51bVVuU3BsaXRWZXJ0aWNlcyAtIFRoZSB0b3RhbCBudW1iZXIgb2YgdW4tc3BsaXQgdmVydGljZXMuXG4gICAqIEBwYXJhbSB7YXJyYXl9IHNwbGl0SW5kaWNlcyAtIFRoZSBzcGxpdEluZGljZXMgdmFsdWUuXG4gICAqIEByZXR1cm4ge1R5cGVkQXJyYXl9IC0gUmV0dXJucyBhIHR5cGVkIGFycmF5IGNvbnRhaW5pbmcgdGhlIHRyaWFuZ3VsYXRlZCBpbmRpY2VzLlxuICAgKi9cbiAgZ2VuZXJhdGVUcmlhbmd1bGF0ZWRJbmRpY2VzKHRvdGFsTnVtVmVydGljZXMsIG51bVVuU3BsaXRWZXJ0aWNlcywgc3BsaXRJbmRpY2VzKSB7XG4gICAgY29uc3QgdHJpc0NvdW50ID0gdGhpcy5jb21wdXRlTnVtVHJpYW5nbGVzKClcblxuICAgIGxldCB0cmlhbmd1bGF0ZWRJbmRpY2VzXG4gICAgaWYgKHRvdGFsTnVtVmVydGljZXMgPCBNYXRoLnBvdygyLCA4KSkgdHJpYW5ndWxhdGVkSW5kaWNlcyA9IG5ldyBVaW50OEFycmF5KHRyaXNDb3VudCAqIDMpXG4gICAgZWxzZSBpZiAodG90YWxOdW1WZXJ0aWNlcyA8IE1hdGgucG93KDIsIDE2KSkgdHJpYW5ndWxhdGVkSW5kaWNlcyA9IG5ldyBVaW50MTZBcnJheSh0cmlzQ291bnQgKiAzKVxuICAgIGVsc2UgdHJpYW5ndWxhdGVkSW5kaWNlcyA9IG5ldyBVaW50MzJBcnJheSh0cmlzQ291bnQgKiAzKVxuXG4gICAgbGV0IHRyaWFuZ2xlVmVydGV4ID0gMFxuICAgIGNvbnN0IGFkZFRyaWFuZ2xlVmVydGV4SW5kZXggPSBmdW5jdGlvbiAodmVydGV4LCBmYWNlSW5kZXgpIHtcbiAgICAgIGlmICh2ZXJ0ZXggaW4gc3BsaXRJbmRpY2VzICYmIGZhY2VJbmRleCBpbiBzcGxpdEluZGljZXNbdmVydGV4XSlcbiAgICAgICAgdmVydGV4ID0gbnVtVW5TcGxpdFZlcnRpY2VzICsgc3BsaXRJbmRpY2VzW3ZlcnRleF1bZmFjZUluZGV4XVxuICAgICAgdHJpYW5ndWxhdGVkSW5kaWNlc1t0cmlhbmdsZVZlcnRleF0gPSB2ZXJ0ZXhcbiAgICAgIHRyaWFuZ2xlVmVydGV4KytcbiAgICB9XG4gICAgY29uc3QgbnVtRmFjZXMgPSB0aGlzLmdldE51bUZhY2VzKClcbiAgICBmb3IgKGxldCBmYWNlSW5kZXggPSAwOyBmYWNlSW5kZXggPCBudW1GYWNlczsgZmFjZUluZGV4KyspIHtcbiAgICAgIGNvbnN0IGZhY2VWZXJ0cyA9IHRoaXMuZ2V0RmFjZVZlcnRleEluZGljZXMoZmFjZUluZGV4KVxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBmYWNlVmVydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKGogPj0gMykge1xuICAgICAgICAgIC8vIEZvciBlYWNoIGFkZGl0aW9uYWwgdHJpYW5nbGUsIHdlIGhhdmUgdG8gYWRkIDIgaW5kaWNlcy5cbiAgICAgICAgICBhZGRUcmlhbmdsZVZlcnRleEluZGV4KGZhY2VWZXJ0c1swXSwgZmFjZUluZGV4KVxuICAgICAgICAgIGFkZFRyaWFuZ2xlVmVydGV4SW5kZXgoZmFjZVZlcnRzW2ogLSAxXSwgZmFjZUluZGV4KVxuICAgICAgICB9XG4gICAgICAgIGFkZFRyaWFuZ2xlVmVydGV4SW5kZXgoZmFjZVZlcnRzW2pdLCBmYWNlSW5kZXgpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cmlhbmd1bGF0ZWRJbmRpY2VzXG4gIH1cblxuICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFBlcnNpc3RlbmNlXG5cbiAgLyoqXG4gICAqIFJlc3RvcmVzIG1lc2ggcHJvcGVydGllcyBmcm9tIGEgYmluYXJ5IHJlYWRlci5cbiAgICpcbiAgICogQHBhcmFtIHtCaW5SZWFkZXJ9IHJlYWRlciAtIFRoZSByZWFkZXIgdmFsdWUuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0IC0gVGhlIGNvbnRleHQgdmFsdWUuXG4gICAqL1xuICByZWFkQmluYXJ5KHJlYWRlciwgY29udGV4dCkge1xuICAgIHN1cGVyLmxvYWRCYXNlR2VvbUJpbmFyeShyZWFkZXIpXG4gICAgdGhpcy5zZXRGYWNlQ291bnRzKHJlYWRlci5sb2FkVUludDMyQXJyYXkoKSlcbiAgICBjb25zdCBudW1GYWNlcyA9IHRoaXMuZ2V0TnVtRmFjZXMoKVxuXG4gICAgLy8gTm90ZTogd2UgY2FuIHJlbW92ZSB0aGlzLiBXZSBjYW4gaW5mZXIgdGhpcyBmcm9tIHRoZSBhYm92ZSBmYWNlQ291bnRzIGFycmF5LlxuICAgIGNvbnN0IGZhY2VWZXJ0ZXhDb3VudHMgPSByZWFkZXIubG9hZFVJbnQ4QXJyYXkobnVtRmFjZXMpXG4gICAgY29uc3Qgb2Zmc2V0UmFuZ2UgPSByZWFkZXIubG9hZFNJbnQzMlZlYzIoKVxuICAgIGNvbnN0IGJ5dGVzID0gcmVhZGVyLmxvYWRVSW50OCgpXG4gICAgbGV0IGZhY2VWZXJ0ZXhJbmRleERlbHRhc1xuICAgIGlmIChieXRlcyA9PSAxKSBmYWNlVmVydGV4SW5kZXhEZWx0YXMgPSByZWFkZXIubG9hZFVJbnQ4QXJyYXkoKVxuICAgIGVsc2UgaWYgKGJ5dGVzID09IDIpIGZhY2VWZXJ0ZXhJbmRleERlbHRhcyA9IHJlYWRlci5sb2FkVUludDE2QXJyYXkoKVxuICAgIGVsc2UgaWYgKGJ5dGVzID09IDQpIGZhY2VWZXJ0ZXhJbmRleERlbHRhcyA9IHJlYWRlci5sb2FkVUludDMyQXJyYXkoKVxuXG4gICAgLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gTm90ZTogVGhlIE1lc2ggY29tcHJlc3Npb24gc3lzdGVtIG5lZWRzIGEgdGhvcm91Z2ggcmV2aWV3LlxuICAgIC8vIFRoZSBDKysgY2xhc3NlcyBhcmUgbm90IHN0b3JpbmcgZmFjZSBpbmRpY2VzIGluIGEgc29ydGVkIG1hbm5lci5cbiAgICAvLyBTbyBxdWFkcyBwcmVjZWRlIHRyaWFuZ2xlcyBpbiB0aGUgaW5kZXhpbmcsIHdoaWNoIGlzbid0IHN1cHBvc2VkIHRvIGhhcHBlbi5cbiAgICAvLyBXZSBzaG91bGQgZm9yY2UgdGhlIEMrKyBjb2RlIHRvIHN0b3JlIHF1YWRzIGFuZCB0cmlhbmdsZXMgaW4gb3JkZXIuXG4gICAgLy8gZS5nLiBpbXBsZW1lbnQgdGhlICdhZGRGYWNlJyBtZXRob2QgaW4gQysrIHNvIGl0IGF1dG9tYXRpY2FsbHkgZG9lcyB0aGlzLlxuXG4gICAgbGV0IG51bUZhY2VWZXJ0cyA9IDNcbiAgICBsZXQgb2Zmc2V0ID0gMFxuICAgIGNvbnN0IGZhY2VPZmZzZXRzQnlDb3VudCA9IHRoaXMuX19mYWNlQ291bnRzLm1hcCgoZmMsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBvZmZzZXRcbiAgICAgIG9mZnNldCArPSBmYyAqIG51bUZhY2VWZXJ0c1xuICAgICAgbnVtRmFjZVZlcnRzKytcbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9KVxuXG4gICAgbGV0IHNyY09mZnNldCA9IDBcbiAgICBsZXQgcHJldkNvdW50ID0gMFxuICAgIGNvbnN0IGZhY2VPZmZzZXRzID0gW11cbiAgICBmb3IgKGxldCBmYWNlSW5kZXggPSAwOyBmYWNlSW5kZXggPCBudW1GYWNlczsgZmFjZUluZGV4KyspIHtcbiAgICAgIGNvbnN0IGZjID0gZmFjZVZlcnRleENvdW50c1tmYWNlSW5kZXhdXG4gICAgICBjb25zdCBvZmZzZXQgPSBmYWNlT2Zmc2V0c0J5Q291bnRbZmNdXG4gICAgICBjb25zdCBjb3VudCA9IGZjICsgM1xuICAgICAgZmFjZU9mZnNldHNbZmFjZUluZGV4XSA9IG9mZnNldFxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb3VudDsgaisrKSB7XG4gICAgICAgIGNvbnN0IHNyY0ZhY2VWZXJ0ZXggPSBzcmNPZmZzZXQgKyBqXG4gICAgICAgIGNvbnN0IGZhY2VWZXJ0ZXggPSBvZmZzZXQgKyBqXG4gICAgICAgIGNvbnN0IGRlbHRhID0gZmFjZVZlcnRleEluZGV4RGVsdGFzW3NyY0ZhY2VWZXJ0ZXhdICsgb2Zmc2V0UmFuZ2UueFxuICAgICAgICBpZiAoZmFjZUluZGV4ID09IDApIHRoaXMuX19mYWNlVmVydGV4SW5kaWNlc1tmYWNlVmVydGV4XSA9IGRlbHRhXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGxldCBwcmV2RmFjZVZlcnRleCA9IGZhY2VPZmZzZXRzW2ZhY2VJbmRleCAtIDFdXG4gICAgICAgICAgcHJldkZhY2VWZXJ0ZXggKz0gaiA8IHByZXZDb3VudCA/IGogOiBwcmV2Q291bnQgLSAxXG4gICAgICAgICAgdGhpcy5fX2ZhY2VWZXJ0ZXhJbmRpY2VzW2ZhY2VWZXJ0ZXhdID0gdGhpcy5fX2ZhY2VWZXJ0ZXhJbmRpY2VzW3ByZXZGYWNlVmVydGV4XSArIGRlbHRhXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNyY09mZnNldCArPSBjb3VudFxuICAgICAgZmFjZU9mZnNldHNCeUNvdW50W2ZjXSArPSBjb3VudFxuICAgICAgcHJldkNvdW50ID0gY291bnRcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaGFzVmVydGV4QXR0cmlidXRlKCdub3JtYWxzJykpIHtcbiAgICAgIHRoaXMuY29tcHV0ZVZlcnRleE5vcm1hbHMoKVxuICAgIH1cblxuICAgIC8vIHRoaXMuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcbiAgICB0aGlzLmVtaXQoJ2dlb21EYXRhQ2hhbmdlZCcsIHt9KVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB0b0pTT04gbWV0aG9kIGVuY29kZXMgdGhpcyB0eXBlIGFzIGEganNvbiBvYmplY3QgZm9yIHBlcnNpc3RlbmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dCAtIFRoZSBjb250ZXh0IHZhbHVlLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IC0gUmV0dXJucyB0aGUganNvbiBvYmplY3QuXG4gICAqL1xuICB0b0pTT04oY29udGV4dCkge1xuICAgIGNvbnN0IGogPSBzdXBlci50b0pTT04oY29udGV4dClcbiAgICBpZiAoIWNvbnRleHQgfHwgIWNvbnRleHQuc2tpcFRvcG9sb2d5KSB7XG4gICAgICBqLmZhY2VDb3VudHMgPSBBcnJheS5mcm9tKHRoaXMuX19mYWNlQ291bnRzKVxuICAgICAgai5mYWNlVmVydGV4SW5kaWNlcyA9IEFycmF5LmZyb20odGhpcy5fX2ZhY2VWZXJ0ZXhJbmRpY2VzKVxuICAgIH1cblxuICAgIHJldHVybiBqXG4gIH1cblxuICAvKipcbiAgICogVGhlIGZyb21KU09OIG1ldGhvZCBkZWNvZGVzIGEganNvbiBvYmplY3QgZm9yIHRoaXMgdHlwZS5cbiAgICpcbiAgICogZS5nLiB0byBsb2FkIGRhdGEgaW50byB0aGUgbWVzaCBjbGFzcywgcHJvdmlkZSBhIGpzb24gc3RydWN0dXJlIHNpbWlsYXIgdG8gdGhlIGZvbGxvd2luZy5cbiAgICogTm90ZTogZmFjZUNvdW50cyBpcyBhbiBhcnJheSBvZiBjb3VudCB2YWx1ZXMsIHN0YXJ0aW5nIHdpdGggdGhlIG51bWJlciBvZiB0cmlhbmdsZXMsIHRoZW4gdGhlIG51bWJlciBvZiBxdWFkcy4gU2VlICNzZXRGYWNlQ291bnRzXG4gICAqIFRoZSBmYWNlVmVydGV4SW5kaWNlcyBhcnJheSBzaG91bGQgYWxzbyBiZSBzb3J0ZWQgdG8gY29udGFpbiBhbGwgdGhlIHRyaWFuZ2xlcyBmaXJzdCwgZm9sbG93ZWQgYnkgdGhlIHF1YWRzLCBhbmQgdGhlbiB0aGUgcGVudGFnb25zIGV0Yy4uXG4gICAqIGBgYGpzb25cbiAgICogLy8gVGhpcyBjb2RlIHdpbGwgZGVmaW5lIGEgbWVzaCBtYWRlIHVwIG9mIDIgdHJpYW5nbGVzIGFuZCB0aGVuIGEgcXVhZC5cbiAgICogY29uc3QgbWVzaCA9IG5ldyBNZXNoKClcbiAgICogbWVzaC5mcm9tSlNPTih7XG4gICAqICAgZmFjZUNvdW50czpbMiwgMV0sXG4gICAqICAgZmFjZVZlcnRleEluZGljZXM6IFswLCAxLCAyLCAwLCAyLCAzLCAzLCAyLCA0LCA1XSxcbiAgICogICBudW1WZXJ0aWNlczogNixcbiAgICogICB2ZXJ0ZXhBdHRyaWJ1dGVzOiB7XG4gICAqICAgICBwb3NpdGlvbnM6IHtcbiAgICogICAgICAgZGF0YVR5cGU6ICdWZWMzJ1xuICAgKiAgICAgICBkZWZhdWx0U2NhbGFyVmFsdWU6IDAuMCxcbiAgICogICAgICAgZGF0YTogWzAsMCwwLCAwLCAxLCAwLCAxLCAxLCAwLCAxLCAwLCAwLCAyLCAxLCAwLCAyLCAwLCAwXVxuICAgKiAgICAgfVxuICAgKiAgIH1cbiAgICogfVxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGogLSBUaGUganNvbiBvYmplY3QgdGhpcyBpdGVtIG11c3QgZGVjb2RlLlxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dCAtIFRoZSBjb250ZXh0IHZhbHVlLlxuICAgKi9cbiAgZnJvbUpTT04oaiwgY29udGV4dCkge1xuICAgIHN1cGVyLmZyb21KU09OKGosIGNvbnRleHQpXG4gICAgaWYgKGouZmFjZUNvdW50cykgdGhpcy5fX2ZhY2VDb3VudHMgPSBqLmZhY2VDb3VudHNcbiAgICBpZiAoai5mYWNlVmVydGV4SW5kaWNlcykgdGhpcy5fX2ZhY2VWZXJ0ZXhJbmRpY2VzID0gVWludDMyQXJyYXkuZnJvbShqLmZhY2VWZXJ0ZXhJbmRpY2VzKVxuICB9XG59XG5cblJlZ2lzdHJ5LnJlZ2lzdGVyKCdNZXNoJywgTWVzaClcblxuZXhwb3J0IHsgTWVzaCB9XG4iLCJpbXBvcnQgdXRpbCBmcm9tICd1dGlsJ1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuaW1wb3J0IHsgVmVjMiwgVmVjMywgUXVhdCwgQ29sb3IsIEJveDIsIEJveDMgfSBmcm9tICcuLi9NYXRoL2luZGV4J1xuaW1wb3J0IHsgTWF0aEZ1bmN0aW9ucyB9IGZyb20gJy4uL1V0aWxpdGllcy9NYXRoRnVuY3Rpb25zJ1xuXG4vKipcbiAqIFJlYWRzIGJpbmFyeSBkYXRhIGluIGEgc3BlY2lmaWMgZW5jb2RpbmcuIFVzZWQgaW4gbG9hZGluZyBiaW5hcnkgZGF0YSBzdWNoIGFzIHpjYWQgZmlsZXMuXG4gKi9cbmNsYXNzIEJpblJlYWRlciB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBiaW4gcmVhZGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gZGF0YSAtIFRoZSBkYXRhIGJ1ZmZlci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGJ5dGVPZmZzZXQgLSBUaGUgYnl0ZSBvZmZzZXQgdmFsdWUgdG8gc3RhcnQgcmVhZGluZyB0aGUgYnVmZmVyLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzTW9iaWxlRGV2aWNlIC0gVGhlIGlzTW9iaWxlRGV2aWNlIHZhbHVlLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZGF0YSwgYnl0ZU9mZnNldCA9IDAsIGlzTW9iaWxlRGV2aWNlID0gdHJ1ZSkge1xuICAgIHRoaXMuX19kYXRhID0gZGF0YVxuICAgIHRoaXMuX19ieXRlT2Zmc2V0ID0gYnl0ZU9mZnNldFxuICAgIHRoaXMuX19kYXRhVmlldyA9IG5ldyBEYXRhVmlldyh0aGlzLl9fZGF0YSlcbiAgICB0aGlzLl9faXNNb2JpbGVEZXZpY2UgPSBpc01vYmlsZURldmljZVxuICAgIHRoaXMudXRmOGRlY29kZXIgPSB1dGlsLlRleHREZWNvZGVyID8gbmV3IHV0aWwuVGV4dERlY29kZXIoKSA6IG5ldyBUZXh0RGVjb2RlcigpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBzdGF0ZSBvZiB3aGV0aGVyIG9yIG5vdCB0aGUgYEJpblJlYWRlcmAgb2JqZWN0IHdhcyBpbnN0YW50aWF0ZWQgZnJvbSBhIG1vYmlsZSBkZXZpY2UuXG4gICAqXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IC0gUmV0dXJucyB0cnVlIGlzIGEgbW9iaWxlIGRldmljZSBpcyBkZXRlY3RlZC5cbiAgICovXG4gIGdldCBpc01vYmlsZURldmljZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fX2lzTW9iaWxlRGV2aWNlXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGF0YSBidWZmZXIgd2UncmUgcmVhZGluZyBmcm9tLlxuICAgKlxuICAgKiBAcmV0dXJuIHtCdWZmZXJ9IC0gVGhlIGRhdGEgYnVmZmVyIHdlIGFyZSByZWFkaW5nIGZyb20sXG4gICAqL1xuICBnZXQgZGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGFcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhlIGJ1ZmZlci5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFRoZSB0b3RhbCBsZW5ndGggb2YgdGhlIGJ1ZmZlclxuICAgKi9cbiAgZ2V0IGJ5dGVMZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19kYXRhVmlldy5ieXRlTGVuZ3RoXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyByZW1haW5pbmcgbGVuZ3RoIG9mIHRoZSBidWZmZXIgdG8gcmVhZC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFRoZSByZW1haW5pbmcgbGVuZ3RoIG9mIHRoZSBidWZmZXIgdG8gcmVhZC5cbiAgICovXG4gIGdldCByZW1haW5pbmdCeXRlTGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YVZpZXcuYnl0ZUxlbmd0aCAtIHRoaXMuX19ieXRlT2Zmc2V0XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBjdXJyZW50IGJ5dGUgb2Zmc2V0IGluIHRoZSBidWZmZXIuXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBUaGUgY3VycmVudCBvZmZzZXQgaW4gdGhlIGJpbmFyeSBidWZmZXJcbiAgICovXG4gIHBvcygpIHtcbiAgICByZXR1cm4gdGhpcy5fX2J5dGVPZmZzZXRcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBieXRlIG9mZnNldCB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGJ5dGVPZmZzZXQgLSBUaGUgYnl0ZU9mZnNldCBwYXJhbS5cbiAgICovXG4gIHNlZWsoYnl0ZU9mZnNldCkge1xuICAgIHRoaXMuX19ieXRlT2Zmc2V0ID0gYnl0ZU9mZnNldFxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgb2Zmc2V0IGJ5dGVzIHRvIGN1cnJlbnQgb2Zmc2V0IHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gYnl0ZU9mZnNldCAtIFRoZSBieXRlIE9mZnNldCBhbW91bnQuXG4gICAqL1xuICBhZHZhbmNlKGJ5dGVPZmZzZXQpIHtcbiAgICB0aGlzLl9fYnl0ZU9mZnNldCArPSBieXRlT2Zmc2V0XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdW5zaWduZWQgVWludDggdmFsdWUgYXQgY3VycmVudCBieXRlIG9mZnNldCBwb3NpdGlvbixcbiAgICogYW5kIGFkZHMgb25lIGJ5dGUgdG8gdGhlIG9mZnNldC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBsb2FkVUludDgoKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fX2RhdGFWaWV3LmdldFVpbnQ4KHRoaXMuX19ieXRlT2Zmc2V0KVxuICAgIHRoaXMuX19ieXRlT2Zmc2V0ICs9IDFcbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdW5zaWduZWQgVWludDE2IHZhbHVlIGF0IGN1cnJlbnQgYnl0ZSBvZmZzZXQgcG9zaXRpb24sXG4gICAqIGFuZCBhZGRzIHR3byBieXRlcyB0byB0aGUgb2Zmc2V0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGxvYWRVSW50MTYoKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fX2RhdGFWaWV3LmdldFVpbnQxNih0aGlzLl9fYnl0ZU9mZnNldCwgdHJ1ZSlcbiAgICB0aGlzLl9fYnl0ZU9mZnNldCArPSAyXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHVuc2lnbmVkIFVpbnQzMiB2YWx1ZSBhdCBjdXJyZW50IGJ5dGUgb2Zmc2V0IHBvc2l0aW9uLFxuICAgKiBhbmQgYWRkcyBmb3VyIGJ5dGVzIHRvIHRoZSBvZmZzZXQuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgbG9hZFVJbnQzMigpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9fZGF0YVZpZXcuZ2V0VWludDMyKHRoaXMuX19ieXRlT2Zmc2V0LCB0cnVlKVxuICAgIHRoaXMuX19ieXRlT2Zmc2V0ICs9IDRcbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc2lnbmVkIEludDMyIHZhbHVlIGF0IGN1cnJlbnQgYnl0ZSBvZmZzZXQgcG9zaXRpb24sXG4gICAqIGFuZCBhZGRzIGZvdXIgYnl0ZXMgdG8gdGhlIG9mZnNldC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBsb2FkU0ludDMyKCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX19kYXRhVmlldy5nZXRJbnQzMih0aGlzLl9fYnl0ZU9mZnNldCwgdHJ1ZSlcbiAgICB0aGlzLl9fYnl0ZU9mZnNldCArPSA0XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIEZsb2F0MTYgdmFsdWUgYXQgY3VycmVudCBieXRlIG9mZnNldCBwb3NpdGlvbixcbiAgICogYW5kIGFkZHMgZm91ciBieXRlcyB0byB0aGUgb2Zmc2V0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGxvYWRGbG9hdDE2KCkge1xuICAgIGNvbnN0IHVpbnQxNiA9IHRoaXMubG9hZFVJbnQxNigpXG4gICAgcmV0dXJuIE1hdGhGdW5jdGlvbnMuZGVjb2RlMTZCaXRGbG9hdCh1aW50MTYpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgRmxvYXQxNiB2YWx1ZSBhdCBjdXJyZW50IGJ5dGUgb2Zmc2V0IHBvc2l0aW9uLFxuICAgKiBhbmQgYWRkcyB0d28gYnl0ZXMgdG8gdGhlIG9mZnNldC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBsb2FkVUZsb2F0MTYoKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5sb2FkRmxvYXQxNigpXG4gICAgaWYgKHJlc3VsdCA8IDAuMCkge1xuICAgICAgcmV0dXJuIDIwNDguMCAtIHJlc3VsdCAvLyBOb3RlOiBzdWJ0cmFjdCBhIG5lZ2F0aXZlIG51bWJlciB0byBhZGQgaXQuXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHNpbmdsZSBzaWduZWQgRmxvYXQxNiB2YWx1ZSBhdCBjdXJyZW50IGJ5dGUgb2Zmc2V0IHBvc2l0aW9uIGZyb20gMiB1bnNpZ25lZCBJbnQ4IHZhbHVlcyxcbiAgICogYW5kIGFkZHMgdHdvIGJ5dGVzIHRvIHRoZSBvZmZzZXQuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgbG9hZEZsb2F0MTZGcm9tMnhVSW50OCgpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9fZGF0YVZpZXcuZ2V0RmxvYXQxNih0aGlzLl9fYnl0ZU9mZnNldCwgdHJ1ZSlcbiAgICAvLyBjb25zdCB1aW50OHMgPSB0aGlzLmxvYWRVSW50OEFycmF5KDIpO1xuICAgIC8vIHJldHVybiBNYXRoLmRlY29kZTE2Qml0RmxvYXQodWludDhzKTtcbiAgICB0aGlzLl9fYnl0ZU9mZnNldCArPSAyXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIExvYWRzIGFuZCByZXR1cm5zIGEgc2luZ2xlIFNpZ25lZCBpbnRlZ2VyIHZhbHVlIGZyb20gMiBVbnNpZ25lZCBGbG9hdDE2IHZhbHVlcy5cbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBsb2FkVUludDMyRnJvbTJ4VUZsb2F0MTYoKSB7XG4gICAgY29uc3QgcGFydEEgPSB0aGlzLmxvYWRVRmxvYXQxNigpXG4gICAgY29uc3QgcGFydEIgPSB0aGlzLmxvYWRVRmxvYXQxNigpXG4gICAgcmV0dXJuIHBhcnRBICsgcGFydEIgKiA0MDk2XG4gIH1cblxuICAvKipcbiAgICogTG9hZHMgYW5kIHJldHVybnMgYSBzaW5nbGUgU2lnbmVkIGludGVnZXIgdmFsdWUgZnJvbSAyIHNpZ25lZCBGbG9hdDE2IHZhbHVlcy5cbiAgICogQHJldHVybiB7bnVtYmVyfSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBsb2FkU0ludDMyRnJvbTJ4RmxvYXQxNigpIHtcbiAgICBjb25zdCBwYXJ0QSA9IHRoaXMubG9hZEZsb2F0MTYoKVxuICAgIGNvbnN0IHBhcnRCID0gdGhpcy5sb2FkRmxvYXQxNigpXG4gICAgcmV0dXJuIHBhcnRBICsgcGFydEIgKiAyMDQ4XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgRmxvYXQzMiB2YWx1ZSBhdCBjdXJyZW50IGJ5dGUgb2Zmc2V0IHBvc2l0aW9uLFxuICAgKiBhbmQgYWRkcyBmb3VyIGJ5dGVzIHRvIHRoZSBvZmZzZXQuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgbG9hZEZsb2F0MzIoKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fX2RhdGFWaWV3LmdldEZsb2F0MzIodGhpcy5fX2J5dGVPZmZzZXQsIHRydWUpXG4gICAgdGhpcy5fX2J5dGVPZmZzZXQgKz0gNFxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkcyBidWZmZXIgYW5kIHJldHVybiBhbiB1bnNpZ25lZCBJbnQ4IGFycmF5IHdpdGggdGhlIHNwZWNpZmllZCBzaXplLFxuICAgKiBzdGFydGluZyBmcm9tIGN1cnJlbnQgYnl0ZSBvZmZzZXQuPGJyPlxuICAgKiBCeXRlIG9mZnNldCBpcyBpbmNyZWFzZWQgYnkgdGhlIHNwZWNpZmllZCBieXRlIHNpemUuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplIC0gVGhlIHNpemUgcGFyYW0uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gY2xvbmUgLSBUaGUgY2xvbmUgcGFyYW0uXG4gICAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGxvYWRVSW50OEFycmF5KHNpemUgPSB1bmRlZmluZWQsIGNsb25lID0gZmFsc2UpIHtcbiAgICBpZiAoc2l6ZSA9PSB1bmRlZmluZWQpIHNpemUgPSB0aGlzLmxvYWRVSW50MzIoKVxuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KHRoaXMuX19kYXRhLCB0aGlzLl9fYnl0ZU9mZnNldCwgc2l6ZSlcbiAgICB0aGlzLl9fYnl0ZU9mZnNldCArPSBzaXplXG4gICAgY29uc3QgcGFkID0gdGhpcy5fX2J5dGVPZmZzZXQgJSA0XG4gICAgLy8gdGhpcy5yZWFkUGFkKCk7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIFJlYWRzIGJ1ZmZlciBhbmQgcmV0dXJuIGFuIHVuc2lnbmVkIEludDE2IGFycmF5IHdpdGggdGhlIHNwZWNpZmllZCBzaXplLFxuICAgKiBzdGFydGluZyBmcm9tIGN1cnJlbnQgYnl0ZSBvZmZzZXQuPGJyPlxuICAgKiBCeXRlIG9mZnNldCBpcyBpbmNyZWFzZWQgYnkgdGhlIHNwZWNpZmllZCBieXRlIHNpemUgeCAyLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZSAtIFRoZSBzaXplIHBhcmFtLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNsb25lIC0gVGhlIGNsb25lIHBhcmFtLlxuICAgKiBAcmV0dXJuIHtVaW50MTZBcnJheX0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgbG9hZFVJbnQxNkFycmF5KHNpemUgPSB1bmRlZmluZWQsIGNsb25lID0gZmFsc2UpIHtcbiAgICBpZiAoc2l6ZSA9PSB1bmRlZmluZWQpIHNpemUgPSB0aGlzLmxvYWRVSW50MzIoKVxuICAgIGlmIChzaXplID09IDApIHJldHVybiBuZXcgVWludDE2QXJyYXkoKVxuICAgIHRoaXMucmVhZFBhZCgyKVxuICAgIGxldCByZXN1bHRcbiAgICBpZiAodGhpcy5fX2lzTW9iaWxlRGV2aWNlKSB7XG4gICAgICByZXN1bHQgPSBuZXcgVWludDE2QXJyYXkoc2l6ZSlcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICAgIHJlc3VsdFtpXSA9IHRoaXMuX19kYXRhVmlldy5nZXRVaW50MTYodGhpcy5fX2J5dGVPZmZzZXQsIHRydWUpXG4gICAgICAgIHRoaXMuX19ieXRlT2Zmc2V0ICs9IDJcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gbmV3IFVpbnQxNkFycmF5KHRoaXMuX19kYXRhLCB0aGlzLl9fYnl0ZU9mZnNldCwgc2l6ZSlcbiAgICAgIHRoaXMuX19ieXRlT2Zmc2V0ICs9IHNpemUgKiAyXG4gICAgfVxuICAgIC8vIHRoaXMucmVhZFBhZCgpO1xuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkcyBidWZmZXIgYW5kIHJldHVybiBhbiB1bnNpZ25lZCBJbnQzMiBhcnJheSB3aXRoIHRoZSBzcGVjaWZpZWQgc2l6ZSxcbiAgICogc3RhcnRpbmcgZnJvbSBjdXJyZW50IGJ5dGUgb2Zmc2V0Ljxicj5cbiAgICogQnl0ZSBvZmZzZXQgaXMgaW5jcmVhc2VkIGJ5IHRoZSBzcGVjaWZpZWQgYnl0ZSBzaXplIHggNC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNpemUgLSBUaGUgc2l6ZSBwYXJhbS5cbiAgICogQHBhcmFtIHtib29sZWFufSBjbG9uZSAtIFRoZSBjbG9uZSBwYXJhbS5cbiAgICogQHJldHVybiB7VWludDMyQXJyYXl9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGxvYWRVSW50MzJBcnJheShzaXplID0gdW5kZWZpbmVkLCBjbG9uZSA9IGZhbHNlKSB7XG4gICAgaWYgKHNpemUgPT0gdW5kZWZpbmVkKSBzaXplID0gdGhpcy5sb2FkVUludDMyKClcbiAgICBpZiAoc2l6ZSA9PSAwKSByZXR1cm4gbmV3IFVpbnQzMkFycmF5KClcbiAgICB0aGlzLnJlYWRQYWQoNClcbiAgICBsZXQgcmVzdWx0XG4gICAgaWYgKHRoaXMuX19pc01vYmlsZURldmljZSkge1xuICAgICAgcmVzdWx0ID0gbmV3IFVpbnQzMkFycmF5KHNpemUpXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemU7IGkrKykge1xuICAgICAgICByZXN1bHRbaV0gPSB0aGlzLl9fZGF0YVZpZXcuZ2V0VWludDMyKHRoaXMuX19ieXRlT2Zmc2V0LCB0cnVlKVxuICAgICAgICB0aGlzLl9fYnl0ZU9mZnNldCArPSA0XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IG5ldyBVaW50MzJBcnJheSh0aGlzLl9fZGF0YSwgdGhpcy5fX2J5dGVPZmZzZXQsIHNpemUpXG4gICAgICB0aGlzLl9fYnl0ZU9mZnNldCArPSBzaXplICogNFxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICAvKipcbiAgICogUmVhZHMgYnVmZmVyIGFuZCByZXR1cm4gYSBGbG9hdDMyIGFycmF5IHdpdGggdGhlIHNwZWNpZmllZCBzaXplLFxuICAgKiBzdGFydGluZyBmcm9tIGN1cnJlbnQgYnl0ZSBvZmZzZXQuPGJyPlxuICAgKiBCeXRlIG9mZnNldCBpcyBpbmNyZWFzZWQgYnkgdGhlIHNwZWNpZmllZCBieXRlIHNpemUgeCA0LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZSAtIFRoZSBzaXplIHBhcmFtLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNsb25lIC0gVGhlIGNsb25lIHBhcmFtLlxuICAgKiBAcmV0dXJuIHtGbG9hdDMyQXJyYXl9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGxvYWRGbG9hdDMyQXJyYXkoc2l6ZSA9IHVuZGVmaW5lZCwgY2xvbmUgPSBmYWxzZSkge1xuICAgIGlmIChzaXplID09IHVuZGVmaW5lZCkgc2l6ZSA9IHRoaXMubG9hZFVJbnQzMigpXG4gICAgaWYgKHNpemUgPT0gMCkgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoKVxuICAgIHRoaXMucmVhZFBhZCg0KVxuICAgIGxldCByZXN1bHRcbiAgICBpZiAodGhpcy5fX2lzTW9iaWxlRGV2aWNlKSB7XG4gICAgICByZXN1bHQgPSBuZXcgRmxvYXQzMkFycmF5KHNpemUpXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemU7IGkrKykge1xuICAgICAgICByZXN1bHRbaV0gPSB0aGlzLl9fZGF0YVZpZXcuZ2V0RmxvYXQzMih0aGlzLl9fYnl0ZU9mZnNldCwgdHJ1ZSlcbiAgICAgICAgdGhpcy5fX2J5dGVPZmZzZXQgKz0gNFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMuX19kYXRhLCB0aGlzLl9fYnl0ZU9mZnNldCwgc2l6ZSlcbiAgICAgIHRoaXMuX19ieXRlT2Zmc2V0ICs9IHNpemUgKiA0XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG5leHQgc3RyaW5nLlxuICAgKiBGaXJzdCBsb29rcyBmb3IgdGhlIHN0cmluZyBsZW5ndGggZGVzY3JpcHRpb24gaW4gdGhlIG5leHQgZm91ciBieXRlcyBpbiB0aGUgYnVmZmVyKFN0YXJ0aW5nIGZyb20gYnl0ZSBvZmZzZXQpLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGxvYWRTdHIoKSB7XG4gICAgY29uc3QgbnVtQ2hhcnMgPSB0aGlzLmxvYWRVSW50MzIoKVxuICAgIGNvbnN0IGNoYXJzID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5fX2RhdGEsIHRoaXMuX19ieXRlT2Zmc2V0LCBudW1DaGFycylcbiAgICB0aGlzLl9fYnl0ZU9mZnNldCArPSBudW1DaGFyc1xuICAgIHJldHVybiB0aGlzLnV0ZjhkZWNvZGVyLmRlY29kZShjaGFycylcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIHN0cmluZ3MuXG4gICAqIEZpcnN0IHJlYWRpbmcgdGhlIHNpemUgb2YgdGhlIGFycmF5IHRoZW4gcmVhZGluZyBlYWNoIHN0cmluZy5cbiAgICpcbiAgICogQHJldHVybiB7QXJyYXl9IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGxvYWRTdHJBcnJheSgpIHtcbiAgICBjb25zdCBzaXplID0gdGhpcy5sb2FkVUludDMyKClcbiAgICBjb25zdCByZXN1bHQgPSBbXVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICByZXN1bHRbaV0gPSB0aGlzLmxvYWRTdHIoKVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhIGBWZWMyYCBvYmplY3Qgd2l0aCB0aGUgbmV4dCB0d28gc2lnbmVkIEludDMyIHZhbHVlcyBpbiB0aGUgYnVmZmVyLlxuICAgKlxuICAgKiBAcmV0dXJuIHtWZWMyfSAtIFJldHVybnMgYSBWZWMyLlxuICAgKi9cbiAgbG9hZFNJbnQzMlZlYzIoKSB7XG4gICAgY29uc3QgeCA9IHRoaXMubG9hZFNJbnQzMigpXG4gICAgY29uc3QgeSA9IHRoaXMubG9hZFNJbnQzMigpXG4gICAgcmV0dXJuIG5ldyBWZWMyKHgsIHkpXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhIGBWZWMyYCBvYmplY3Qgd2l0aCB0aGUgbmV4dCB0d28gdW5zaWduZWQgSW50MzIgdmFsdWVzIGluIHRoZSBidWZmZXIuXG4gICAqIEByZXR1cm4ge1ZlYzJ9IC0gUmV0dXJucyBhIFZlYzIuXG4gICAqL1xuICBsb2FkVUludDMyVmVjMigpIHtcbiAgICBjb25zdCB4ID0gdGhpcy5sb2FkVUludDMyKClcbiAgICBjb25zdCB5ID0gdGhpcy5sb2FkVUludDMyKClcbiAgICByZXR1cm4gbmV3IFZlYzIoeCwgeSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgYFZlYzJgIG9iamVjdCB3aXRoIHRoZSBuZXh0IHR3byBGbG9hdDE2IHZhbHVlcyBpbiB0aGUgYnVmZmVyLlxuICAgKlxuICAgKiBAcmV0dXJuIHtWZWMyfSAtIFJldHVybnMgYSBWZWMyLlxuICAgKi9cbiAgbG9hZEZsb2F0MTZWZWMyKCkge1xuICAgIGNvbnN0IHggPSB0aGlzLmxvYWRGbG9hdDE2KClcbiAgICBjb25zdCB5ID0gdGhpcy5sb2FkRmxvYXQxNigpXG4gICAgcmV0dXJuIG5ldyBWZWMyKHgsIHkpXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhIGBWZWMyYCBvYmplY3Qgd2l0aCB0aGUgbmV4dCB0d28gRmxvYXQzMiB2YWx1ZXMgaW4gdGhlIGJ1ZmZlci5cbiAgICogQHJldHVybiB7VmVjMn0gLSBSZXR1cm5zIGEgVmVjMi5cbiAgICovXG4gIGxvYWRGbG9hdDMyVmVjMigpIHtcbiAgICBjb25zdCB4ID0gdGhpcy5sb2FkRmxvYXQzMigpXG4gICAgY29uc3QgeSA9IHRoaXMubG9hZEZsb2F0MzIoKVxuICAgIHJldHVybiBuZXcgVmVjMih4LCB5KVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSBgVmVjM2Agb2JqZWN0IHdpdGggdGhlIG5leHQgdGhyZWUgRmxvYXQxNiB2YWx1ZXMgaW4gdGhlIGJ1ZmZlci5cbiAgICpcbiAgICogQHJldHVybiB7VmVjM30gLSBSZXR1cm5zIGEgVmVjMy5cbiAgICovXG4gIGxvYWRGbG9hdDE2VmVjMygpIHtcbiAgICBjb25zdCB4ID0gdGhpcy5sb2FkRmxvYXQxNigpXG4gICAgY29uc3QgeSA9IHRoaXMubG9hZEZsb2F0MTYoKVxuICAgIGNvbnN0IHogPSB0aGlzLmxvYWRGbG9hdDE2KClcbiAgICByZXR1cm4gbmV3IFZlYzMoeCwgeSwgeilcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgYFZlYzNgIG9iamVjdCB3aXRoIHRoZSBuZXh0IHRocmVlIEZsb2F0MzIgdmFsdWVzIGluIHRoZSBidWZmZXIuXG4gICAqXG4gICAqIEByZXR1cm4ge1ZlYzN9IC0gUmV0dXJucyBhIFZlYzMuXG4gICAqL1xuICBsb2FkRmxvYXQzMlZlYzMoKSB7XG4gICAgY29uc3QgeCA9IHRoaXMubG9hZEZsb2F0MzIoKVxuICAgIGNvbnN0IHkgPSB0aGlzLmxvYWRGbG9hdDMyKClcbiAgICBjb25zdCB6ID0gdGhpcy5sb2FkRmxvYXQzMigpXG4gICAgcmV0dXJuIG5ldyBWZWMzKHgsIHksIHopXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhIGBRdWF0YCBvYmplY3Qgd2l0aCB0aGUgbmV4dCBmb3VyIEZsb2F0MTYgdmFsdWVzIGluIHRoZSBidWZmZXIuXG4gICAqXG4gICAqIEByZXR1cm4ge1F1YXR9IC0gUmV0dXJucyBhIFF1YXQuXG4gICAqL1xuICBsb2FkRmxvYXQxNlF1YXQoKSB7XG4gICAgY29uc3QgeCA9IHRoaXMubG9hZEZsb2F0MTYoKVxuICAgIGNvbnN0IHkgPSB0aGlzLmxvYWRGbG9hdDE2KClcbiAgICBjb25zdCB6ID0gdGhpcy5sb2FkRmxvYXQxNigpXG4gICAgY29uc3QgdyA9IHRoaXMubG9hZEZsb2F0MTYoKVxuICAgIHJldHVybiBuZXcgUXVhdCh4LCB5LCB6LCB3KVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSBgUXVhdGAgb2JqZWN0IHdpdGggdGhlIG5leHQgZm91ciBGbG9hdDMyIHZhbHVlcyBpbiB0aGUgYnVmZmVyLlxuICAgKiBAcmV0dXJuIHtRdWF0fSAtIFJldHVybnMgYSBRdWF0LlxuICAgKi9cbiAgbG9hZEZsb2F0MzJRdWF0KCkge1xuICAgIGNvbnN0IHggPSB0aGlzLmxvYWRGbG9hdDMyKClcbiAgICBjb25zdCB5ID0gdGhpcy5sb2FkRmxvYXQzMigpXG4gICAgY29uc3QgeiA9IHRoaXMubG9hZEZsb2F0MzIoKVxuICAgIGNvbnN0IHcgPSB0aGlzLmxvYWRGbG9hdDMyKClcbiAgICByZXR1cm4gbmV3IFF1YXQoeCwgeSwgeiwgdylcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgYENvbG9yYCBvYmplY3Qgd2l0aCB0aGUgbmV4dCB0aHJlZSBGbG9hdDMyIHZhbHVlcyBpbiB0aGUgYnVmZmVyLlxuICAgKlxuICAgKiBAcmV0dXJuIHtDb2xvcn0gLSBSZXR1cm5zIGEgQ29sb3IuXG4gICAqL1xuICBsb2FkUkdCRmxvYXQzMkNvbG9yKCkge1xuICAgIGNvbnN0IHIgPSB0aGlzLmxvYWRGbG9hdDMyKClcbiAgICBjb25zdCBnID0gdGhpcy5sb2FkRmxvYXQzMigpXG4gICAgY29uc3QgYiA9IHRoaXMubG9hZEZsb2F0MzIoKVxuICAgIHJldHVybiBuZXcgQ29sb3IociwgZywgYilcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgUkdCQSBgQ29sb3JgIG9iamVjdCB3aXRoIHRoZSBuZXh0IGZvdXIgRmxvYXQzMiB2YWx1ZXMgaW4gdGhlIGJ1ZmZlci5cbiAgICogQHJldHVybiB7Q29sb3J9IC0gUmV0dXJucyBhIENvbG9yLlxuICAgKi9cbiAgbG9hZFJHQkFGbG9hdDMyQ29sb3IoKSB7XG4gICAgY29uc3QgciA9IHRoaXMubG9hZEZsb2F0MzIoKVxuICAgIGNvbnN0IGcgPSB0aGlzLmxvYWRGbG9hdDMyKClcbiAgICBjb25zdCBiID0gdGhpcy5sb2FkRmxvYXQzMigpXG4gICAgY29uc3QgYSA9IHRoaXMubG9hZEZsb2F0MzIoKVxuICAgIHJldHVybiBuZXcgQ29sb3IociwgZywgYiwgYSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgYENvbG9yYCBvYmplY3Qgd2l0aCB0aGUgbmV4dCB0aHJlZSB1bnNpZ25lZCBJbnQ4IHZhbHVlcyBpbiB0aGUgYnVmZmVyLlxuICAgKiBAcmV0dXJuIHtDb2xvcn0gLSBSZXR1cm5zIGEgQ29sb3IuXG4gICAqL1xuICBsb2FkUkdCVUludDhDb2xvcigpIHtcbiAgICBjb25zdCByID0gdGhpcy5sb2FkVUludDgoKVxuICAgIGNvbnN0IGcgPSB0aGlzLmxvYWRVSW50OCgpXG4gICAgY29uc3QgYiA9IHRoaXMubG9hZFVJbnQ4KClcbiAgICByZXR1cm4gbmV3IENvbG9yKHIgLyAyNTUsIGcgLyAyNTUsIGIgLyAyNTUpXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhIFJHQkEgYENvbG9yYCBvYmplY3Qgd2l0aCB0aGUgbmV4dCBmb3VyIHVuc2lnbmVkIEludDggdmFsdWVzIGluIHRoZSBidWZmZXIuXG4gICAqIEByZXR1cm4ge0NvbG9yfSAtIFJldHVybnMgYSBDb2xvci5cbiAgICovXG4gIGxvYWRSR0JBVUludDhDb2xvcigpIHtcbiAgICBjb25zdCByID0gdGhpcy5sb2FkVUludDgoKVxuICAgIGNvbnN0IGcgPSB0aGlzLmxvYWRVSW50OCgpXG4gICAgY29uc3QgYiA9IHRoaXMubG9hZFVJbnQ4KClcbiAgICBjb25zdCBhID0gdGhpcy5sb2FkVUludDgoKVxuICAgIHJldHVybiBuZXcgQ29sb3IociAvIDI1NSwgZyAvIDI1NSwgYiAvIDI1NSwgYSAvIDI1NSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgYEJveDJgIG9iamVjdCB3aXRoIHRoZSBuZXh0IGZvdXIgRmxvYXQzMiB2YWx1ZXMgaW4gdGhlIGJ1ZmZlci5cbiAgICogTmV4dCBmb3VyIGJlY2F1c2UgaXQgY3JlYXRlcyB0d28gVmVjMi5cbiAgICpcbiAgICogQHJldHVybiB7Qm94Mn0gLSBSZXR1cm5zIGEgQm94Mi5cbiAgICovXG4gIGxvYWRCb3gyKCkge1xuICAgIHJldHVybiBuZXcgQm94Mih0aGlzLmxvYWRGbG9hdDMyVmVjMigpLCB0aGlzLmxvYWRGbG9hdDMyVmVjMigpKVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSBgQm94MmAgb2JqZWN0IHdpdGggdGhlIG5leHQgc2l4IEZsb2F0MzIgdmFsdWVzIGluIHRoZSBidWZmZXIuXG4gICAqIE5leHQgZm91ciBiZWNhdXNlIGl0IGNyZWF0ZXMgdHdvIFZlYzMuXG4gICAqXG4gICAqIEByZXR1cm4ge0JveDN9IC0gUmV0dXJucyBhIEJveDMuXG4gICAqL1xuICBsb2FkQm94MygpIHtcbiAgICByZXR1cm4gbmV3IEJveDModGhpcy5sb2FkRmxvYXQzMlZlYzMoKSwgdGhpcy5sb2FkRmxvYXQzMlZlYzMoKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHaXZlbiBhIHN0cmlkZWUgdmFsdWUsIGFkdmFuY2UgdGhlIHBvaW50ZXIgdG8gdGhlIGVuZCBvZiB0aGUgY3VycmVudCBzdHJpZGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdHJpZGUgLSBUaGUgc3RyaWRlIHBhcmFtLlxuICAgKi9cbiAgcmVhZFBhZChzdHJpZGUpIHtcbiAgICBjb25zdCBwYWQgPSB0aGlzLl9fYnl0ZU9mZnNldCAlIHN0cmlkZVxuICAgIGlmIChwYWQgIT0gMCkgdGhpcy5fX2J5dGVPZmZzZXQgKz0gc3RyaWRlIC0gcGFkXG4gIH1cbn1cblxuZXhwb3J0IHsgQmluUmVhZGVyIH1cbiIsIi8qKlxuICogQ2xhc3MgZGVzaWduZWQgdG8gc3RvcmUgdmVyc2lvbiBkYXRhLiBXaWRlbHkgdXNlZCBpbiB0aGUgemVhIGVuZ2luZSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gKi9cbmNsYXNzIFZlcnNpb24ge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIHZlcnNpb24uXG4gICAqIFRoZSB2ZXJzaW9uIHN0cmluZyBzaG91bGQgaGF2ZSB0aGUgZm9sbG93aW5nIHN0cnVjdHVyZTogPGJyPlxuICAgKiBtYWpvciwgbWlub3IgYW5kIHBhdGNoIHNlcGFyYXRlZCBieSBhIGRvdChgLmApIGFuZCBwYXJ0cyBzZXBhcmF0ZWQgYnkgYSBkYXNoKGAtYCkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyfSB2ZXJzaW9uU3RyIC0gVGhlIHZlcnNpb24gc3RyaW5nIHZhbHVlLlxuICAgKi9cbiAgY29uc3RydWN0b3IodmVyc2lvblN0cikge1xuICAgIGlmICh2ZXJzaW9uU3RyKSB7XG4gICAgICBjb25zdCBwYXJ0cyA9IHZlcnNpb25TdHIuc3BsaXQoJy0nKVxuICAgICAgY29uc3QgbnVtYmVycyA9IHBhcnRzWzBdLnNwbGl0KCcuJylcbiAgICAgIHRoaXMubWFqb3IgPSBwYXJzZUludChudW1iZXJzWzBdKVxuICAgICAgdGhpcy5taW5vciA9IHBhcnNlSW50KG51bWJlcnNbMV0pXG4gICAgICB0aGlzLnBhdGNoID0gcGFyc2VJbnQobnVtYmVyc1syXSlcbiAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT0gMikgdGhpcy5icmFuY2ggPSBwYXJ0c1sxXVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1ham9yID0gMFxuICAgICAgdGhpcy5taW5vciA9IDBcbiAgICAgIHRoaXMucGF0Y2ggPSAwXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbXBhcmUgYSB2ZXJzaW9uIG9iamVjdCBhZ2FpbnN0IGEgdmVyc2lvbiBudW1iZXJzIGFycmF5LlxuICAgKlxuICAgKiBAcGFyYW0ge2FycmF5fSBudW1iZXJzIC0gQW4gYXJyYXkgY29udGFpbmluZyAzIHZlcnNpb24gbnVtYmVycy4gW01ham9yLCBNaW5vciwgUGF0Y2hdXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSByZXR1cm4gcG9zaXRpdmU6IHYxID4gdjIsIHplcm86djEgPT0gdjIsIG5lZ2F0aXZlOiB2MSA8IHYyXG4gICAqL1xuICBjb21wYXJlKG51bWJlcnMpIHtcbiAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82ODMyNTk2L2hvdy10by1jb21wYXJlLXNvZnR3YXJlLXZlcnNpb24tbnVtYmVyLXVzaW5nLWpzLW9ubHktbnVtYmVyXG4gICAgLy8gMm5kIGFuc3dlci5cbiAgICBjb25zdCB2MSA9IFt0aGlzLm1ham9yLCB0aGlzLm1pbm9yLCB0aGlzLnBhdGNoXVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICBpZiAodjFbaV0gIT09IG51bWJlcnNbaV0pIHJldHVybiB2MVtpXSAtIG51bWJlcnNbaV1cbiAgICB9XG4gICAgcmV0dXJuIDBcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wYXJlIGEgdmVyc2lvbiBvYmplY3QgYWdhaW5zdCBhIHZlcnNpb24gbnVtYmVycyBhcnJheS5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQHBhcmFtIHthcnJheX0gbnVtYmVycyAtIFRoZSBudW1iZXJzIHZhbHVlLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSAtIFRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBlcXVhbHMobnVtYmVycykge1xuICAgIGNvbnNvbGUubG9nKGBWZXJzaW9uI2VxdWFscyBtZXRob2QgaXMgZGVwcmVjYXRlZCwgdXNlICdjb21wYXJlJyBpbnN0ZWFkIGApXG4gICAgcmV0dXJuICEodGhpcy5wYXRjaCA9PSBudW1iZXJzWzJdICYmIHRoaXMubWlub3IgPT0gbnVtYmVyc1sxXSAmJiB0aGlzLm1ham9yID09IG51bWJlcnNbMF0pXG4gIH1cblxuICAvKipcbiAgICogQ29tcGFyZSBhIHZlcnNpb24gb2JqZWN0IGFnYWluc3QgYSB2ZXJzaW9uIG51bWJlcnMgYXJyYXkuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIEBwYXJhbSB7YXJyYXl9IG51bWJlcnMgLSBUaGUgbnVtYmVycyB2YWx1ZS5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgbGVzc1RoYW4obnVtYmVycykge1xuICAgIGNvbnNvbGUubG9nKGBWZXJzaW9uI2xlc3NUaGFuIG1ldGhvZCBpcyBkZXByZWNhdGVkLCB1c2UgJ2NvbXBhcmUnIGluc3RlYWQgYClcbiAgICByZXR1cm4gISh0aGlzLm1ham9yID49IG51bWJlcnNbMF0gfHwgdGhpcy5taW5vciA+PSBudW1iZXJzWzFdIHx8IHRoaXMucGF0Y2ggPj0gbnVtYmVyc1syXSlcbiAgICAvLyBpZiAodGhpcy5tYWpvciA+PSBudW1iZXJzWzBdKSByZXR1cm4gZmFsc2VcbiAgICAvLyBpZiAodGhpcy5taW5vciA+PSBudW1iZXJzWzFdKSByZXR1cm4gZmFsc2VcbiAgICAvLyBpZiAodGhpcy5wYXRjaCA+PSBudW1iZXJzWzJdKSByZXR1cm4gZmFsc2VcbiAgICAvLyByZXR1cm4gdHJ1ZVxuICAgIC8vIHJldHVybiAoXG4gICAgLy8gICB0aGlzLm1ham9yIDwgbnVtYmVyc1swXSB8fFxuICAgIC8vICAgdGhpcy5taW5vciA8IG51bWJlcnNbMV0gfHxcbiAgICAvLyAgIHRoaXMucGF0Y2ggPCBudW1iZXJzWzJdXG4gICAgLy8gKVxuICB9XG5cbiAgLyoqXG4gICAqIENvbXBhcmUgYSB2ZXJzaW9uIG9iamVjdCBhZ2FpbnN0IGEgdmVyc2lvbiBudW1iZXJzIGFycmF5LlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBAcGFyYW0ge2FycmF5fSBudW1iZXJzIC0gVGhlIG51bWJlcnMgdmFsdWUuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gVGhlIHJldHVybiB2YWx1ZS5cbiAgICovXG4gIGdyZWF0ZXJUaGFuKG51bWJlcnMpIHtcbiAgICBjb25zb2xlLmxvZyhgVmVyc2lvbiNncmVhdGVyVGhhbiBtZXRob2QgaXMgZGVwcmVjYXRlZCwgdXNlICdjb21wYXJlJyBpbnN0ZWFkIGApXG4gICAgcmV0dXJuIHRoaXMubWFqb3IgPiBudW1iZXJzWzBdIHx8IHRoaXMubWlub3IgPiBudW1iZXJzWzFdIHx8IHRoaXMucGF0Y2ggPiBudW1iZXJzWzJdXG4gIH1cblxuICAvKipcbiAgICogQ29tcGFyZSBhIHZlcnNpb24gb2JqZWN0IGFnYWluc3QgYSB2ZXJzaW9uIG51bWJlcnMgYXJyYXkuXG4gICAqXG4gICAqIEBwYXJhbSB7YXJyYXl9IG51bWJlcnMgLSBUaGUgbnVtYmVycyB2YWx1ZS5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gLSBUaGUgcmV0dXJuIHZhbHVlLlxuICAgKi9cbiAgZ3JlYXRlck9yRXF1YWxUaGFuKG51bWJlcnMpIHtcbiAgICBjb25zb2xlLmxvZyhgVmVyc2lvbiNncmVhdGVyT3JFcXVhbFRoYW4gbWV0aG9kIGlzIGRlcHJlY2F0ZWQsIHVzZSAnY29tcGFyZScgaW5zdGVhZCBgKVxuICAgIGlmICh0aGlzLm1ham9yIDwgbnVtYmVyc1swXSkgcmV0dXJuIGZhbHNlXG4gICAgaWYgKHRoaXMubWFqb3IgPiBudW1iZXJzWzBdKSByZXR1cm4gdHJ1ZVxuXG4gICAgaWYgKHRoaXMubWlub3IgPCBudW1iZXJzWzFdKSByZXR1cm4gZmFsc2VcbiAgICBpZiAodGhpcy5taW5vciA+IG51bWJlcnNbMV0pIHJldHVybiB0cnVlXG5cbiAgICBpZiAodGhpcy5wYXRjaCA8IG51bWJlcnNbMl0pIHJldHVybiBmYWxzZVxuICAgIHJldHVybiB0cnVlXG4gICAgLy8gcmV0dXJuIChcbiAgICAvLyAgIHRoaXMubWFqb3IgPj0gbnVtYmVyc1swXSAmJlxuICAgIC8vICAgdGhpcy5taW5vciA+PSBudW1iZXJzWzFdICYmXG4gICAgLy8gICB0aGlzLnBhdGNoID49IG51bWJlcnNbMl1cbiAgICAvLyApXG4gIH1cbn1cblxuZXhwb3J0IHsgVmVyc2lvbiB9XG4iLCJpbXBvcnQgeyBwYXJzZUdlb21zQmluYXJ5IH0gZnJvbSAnLi9wYXJzZUdlb21zQmluYXJ5LmpzJ1xuXG5zZWxmLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICBwYXJzZUdlb21zQmluYXJ5KGV2ZW50LmRhdGEsIChkYXRhLCB0cmFuc2ZlcmFibGVzKSA9PiB7XG4gICAgc2VsZi5wb3N0TWVzc2FnZShkYXRhLCB0cmFuc2ZlcmFibGVzKVxuICB9KVxufVxuIiwiLyogZXNsaW50LWRpc2FibGUgZ3VhcmQtZm9yLWluICovXG5pbXBvcnQgeyBQb2ludHMgfSBmcm9tICcuL1BvaW50cy5qcydcbmltcG9ydCB7IExpbmVzIH0gZnJvbSAnLi9MaW5lcy5qcydcbmltcG9ydCB7IE1lc2ggfSBmcm9tICcuL01lc2guanMnXG5pbXBvcnQgeyBCaW5SZWFkZXIgfSBmcm9tICcuLi9CaW5SZWFkZXIuanMnXG5pbXBvcnQgeyBWZXJzaW9uIH0gZnJvbSAnLi4vVmVyc2lvbi5qcydcbmltcG9ydCB7IFJlZ2lzdHJ5IH0gZnJvbSAnLi4vLi4vUmVnaXN0cnknXG5cbi8vIGtleSwgdG9jLCBnZW9tSW5kZXhPZmZzZXQsIGdlb21zUmFuZ2UsIGlzTW9iaWxlRGV2aWNlLCBidWZmZXJTbGljZSwgZ2VuQnVmZmVyc09wdHMsIGNvbnRleHRcbmNvbnN0IHBhcnNlR2VvbXNCaW5hcnkgPSAoZGF0YSwgY2FsbGJhY2spID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pblxuICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhLmNvbnRleHQudmVyc2lvbnMpIHtcbiAgICBjb25zdCB2ID0gZGF0YS5jb250ZXh0LnZlcnNpb25zW2tleV1cbiAgICBjb25zdCB2ZXJzaW9uID0gbmV3IFZlcnNpb24oKVxuICAgIHZlcnNpb24ubWFqb3IgPSB2Lm1ham9yXG4gICAgdmVyc2lvbi5taW5vciA9IHYubWlub3JcbiAgICB2ZXJzaW9uLnBhdGNoID0gdi5wYXRjaFxuICAgIHZlcnNpb24uYnJhbmNoID0gdi5icmFuY2hcbiAgICBkYXRhLmNvbnRleHQudmVyc2lvbnNba2V5XSA9IHZlcnNpb25cbiAgfVxuICBjb25zdCBnZW9tRGF0YXMgPSBbXVxuICBjb25zdCBvZmZzZXQgPSBkYXRhLnRvY1tkYXRhLmdlb21zUmFuZ2VbMF1dXG4gIC8vIGNvbnNvbGUubG9nKFwib2Zmc2V0OlwiICsgIG9mZnNldCk7XG4gIGNvbnN0IHRyYW5zZmVyYWJsZXMgPSBbXVxuICBmb3IgKGxldCBpID0gZGF0YS5nZW9tc1JhbmdlWzBdOyBpIDwgZGF0YS5nZW9tc1JhbmdlWzFdOyBpKyspIHtcbiAgICBjb25zdCByZWFkZXIgPSBuZXcgQmluUmVhZGVyKGRhdGEuYnVmZmVyU2xpY2UsIGRhdGEudG9jW2ldIC0gb2Zmc2V0LCBkYXRhLmlzTW9iaWxlRGV2aWNlKVxuICAgIGNvbnN0IGNsYXNzTmFtZSA9IHJlYWRlci5sb2FkU3RyKClcbiAgICBjb25zdCBwb3MgPSByZWFkZXIucG9zKClcbiAgICAvLyBjb25zdCBuYW1lID0gcmVhZGVyLmxvYWRTdHIoKVxuICAgIC8vIGNvbnNvbGUubG9nKGkgKyBcIjpcIiArIG9mZnNldCArIFwiIGNsYXNzTmFtZTpcIiArICBjbGFzc05hbWUgICsgXCIgbmFtZTpcIiArICBuYW1lLyogKyBcIiBwb3M6XCIgKyAoZGF0YS50b2NbaV0gLSBvZmZzZXQpICsgXCIgYnVmZmVyU2xpY2UuYnl0ZUxlbmd0aDpcIiArICBidWZmZXJTbGljZS5ieXRlTGVuZ3RoKi8pO1xuICAgIGxldCBnZW9tXG4gICAgc3dpdGNoIChjbGFzc05hbWUpIHtcbiAgICAgIGNhc2UgJ1BvaW50cyc6XG4gICAgICAgIGdlb20gPSBuZXcgUG9pbnRzKClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ0xpbmVzJzpcbiAgICAgICAgZ2VvbSA9IG5ldyBMaW5lcygpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdNZXNoJzpcbiAgICAgICAgZ2VvbSA9IG5ldyBNZXNoKClcbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgR2VvbSB0eXBlOicgKyBjbGFzc05hbWUpXG4gICAgfVxuICAgIHRyeSB7XG4gICAgICByZWFkZXIuc2Vlayhwb3MpIC8vIFJlc2V0IHRoZSBwb2ludGVyIHRvIHRoZSBzdGFydCBvZiB0aGUgaXRlbSBkYXRhLlxuICAgICAgZ2VvbS5yZWFkQmluYXJ5KHJlYWRlciwgZGF0YS5jb250ZXh0KVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUud2FybignRXJyb3IgbG9hZGluZzonICsgZ2VvbS5uYW1lICsgJ1xcbjonICsgZSlcbiAgICAgIGdlb21EYXRhcy5wdXNoKHt9KVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBjb25zdCBnZW9tQnVmZmVycyA9IGdlb20uZ2VuQnVmZmVycyhkYXRhLmdlbkJ1ZmZlcnNPcHRzKVxuICAgIGlmIChnZW9tQnVmZmVycy5pbmRpY2VzKSB0cmFuc2ZlcmFibGVzLnB1c2goZ2VvbUJ1ZmZlcnMuaW5kaWNlcy5idWZmZXIpXG4gICAgZm9yIChjb25zdCBhdHRyTmFtZSBpbiBnZW9tQnVmZmVycy5hdHRyQnVmZmVycykge1xuICAgICAgLy8gTm90ZTogVGhlIHR5cGUgdmFsdWUgYXNzaWduZWQgdG8gdGhlIGF0dHJpYnV0ZSBjYW5cbiAgICAgIC8vIG5vdCBiZSB0cmFuc2ZlcnJlZCBiYWNrIHRvIHRoZSBtYWluIHRocmVhZC4gQ29udmVydCB0b1xuICAgICAgLy8gdGhlIHR5cGUgbmFtZSBoZXJlIGFuZCBzZW5kIGJhY2sgYXMgYSBzdHJpbmcuXG4gICAgICBjb25zdCBhdHRyRGF0YSA9IGdlb21CdWZmZXJzLmF0dHJCdWZmZXJzW2F0dHJOYW1lXVxuICAgICAgY29uc3QgdHlwZU5hbWUgPSBSZWdpc3RyeS5nZXRCbHVlcHJpbnROYW1lKGF0dHJEYXRhLmRhdGFUeXBlKVxuICAgICAgYXR0ckRhdGEuZGF0YVR5cGUgPSB0eXBlTmFtZVxuXG4gICAgICB0cmFuc2ZlcmFibGVzLnB1c2goYXR0ckRhdGEudmFsdWVzLmJ1ZmZlcilcbiAgICB9XG5cbiAgICBpZiAoZ2VvbUJ1ZmZlcnMudmVydGV4TmVpZ2hib3JzKSB7XG4gICAgICB0cmFuc2ZlcmFibGVzLnB1c2goZ2VvbUJ1ZmZlcnMudmVydGV4TmVpZ2hib3JzLmJ1ZmZlcilcbiAgICB9XG5cbiAgICAvLyBUcmFuc2ZlciB0aGUgYmJveCBwb2ludCBidWZmZXJzLlxuICAgIGNvbnN0IGJib3ggPSBnZW9tLmdldEJvdW5kaW5nQm94KClcbiAgICB0cmFuc2ZlcmFibGVzLnB1c2goYmJveC5wMC5fX2RhdGEuYnVmZmVyKVxuICAgIHRyYW5zZmVyYWJsZXMucHVzaChiYm94LnAxLl9fZGF0YS5idWZmZXIpXG5cbiAgICBnZW9tRGF0YXMucHVzaCh7XG4gICAgICBuYW1lOiBnZW9tLm5hbWUsXG4gICAgICB0eXBlOiBjbGFzc05hbWUsXG4gICAgICBnZW9tQnVmZmVycyxcbiAgICAgIGJib3gsXG4gICAgfSlcbiAgfVxuICBjYWxsYmFjayhcbiAgICB7XG4gICAgICBnZW9tTGlicmFyeUlkOiBkYXRhLmdlb21MaWJyYXJ5SWQsXG4gICAgICBnZW9tRmlsZUlEOiBkYXRhLmdlb21GaWxlSUQsXG4gICAgICBnZW9tSW5kZXhPZmZzZXQ6IGRhdGEuZ2VvbUluZGV4T2Zmc2V0LFxuICAgICAgZ2VvbXNSYW5nZTogZGF0YS5nZW9tc1JhbmdlLFxuICAgICAgZ2VvbURhdGFzLFxuICAgIH0sXG4gICAgdHJhbnNmZXJhYmxlc1xuICApXG59XG5cbmV4cG9ydCB7IHBhcnNlR2VvbXNCaW5hcnkgfVxuIl0sIm5hbWVzIjpbIlN0cmluZ0Z1bmN0aW9ucyIsIltvYmplY3QgT2JqZWN0XSIsInN0ciIsInBhdHRlcm4iLCJyZXBsYWNlbWVudCIsInJlcGxhY2UiLCJSZWdFeHAiLCJ2YWwiLCJzcGFjZSIsInByZWNpc2lvbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJrZXkiLCJ0b0ZpeGVkIiwiTnVtYmVyIiwiaSIsImNociIsImxlbiIsImhhc2giLCJsZW5ndGgiLCJjaGFyQ29kZUF0IiwiTWF0aCIsImFicyIsIkF0dHJWYWx1ZSIsInYiLCJ0aGlzIiwiX19kYXRhIiwiSW5maW5pdHkiLCJpc05hTiIsImJ1ZmZlciIsIm9mZnNldCIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiYnl0ZU9mZnNldCIsInN0cmluZ2lmeUpTT05XaXRoRml4ZWRQcmVjaXNpb24iLCJ0b0pTT04iLCJNYXRoRnVuY3Rpb25zIiwicmFkIiwiUEkiLCJkZWciLCJudW1iZXIiLCJwYXJzZUZsb2F0IiwiaXNGaW5pdGUiLCJtaW4iLCJtYXgiLCJjZWlsIiwiZmxvb3IiLCJyYW5kb20iLCJ2MCIsInYxIiwidCIsInZhbHVlIiwicG93Iiwicm91bmQiLCJsb2ciLCJsb2cxMCIsImZyYWN0IiwibG9nMiIsImV4cCIsInN0YXJ0MSIsImVuZDEiLCJzdGFydDIiLCJlbmQyIiwiZWRnZTAiLCJlZGdlMSIsIngiLCJjbGFtcCIsImMiLCJpeCIsImlleHAiLCJub3JtIiwibWFudGlzc2EiLCJVaW50OEFycmF5Iiwic2lnbnVtIiwicmVzdCIsImV4cG9uZW50IiwibGltaXQiLCJtc2IiLCJsc2IiLCJmbG9hdDMyQXJyYXkiLCJGbG9hdDMyQXJyYXkiLCJiaXRzIiwibSIsImUiLCJ0b1VJbnQxNiIsIkludDMyQXJyYXkiLCJoIiwicyIsImYiLCJOYU4iLCJ1bml0MTZzIiwiVWludDE2QXJyYXkiLCJpbnQzMlZpZXciLCJfcmVnaXN0ZXJlZEJsdWVwcmludHMiLCJfYmx1ZXByaW50TmFtZXMiLCJfYmx1ZXByaW50cyIsIlJlZ2lzdHJ5IiwiYmx1ZXByaW50TmFtZSIsImJsdWVwcmludCIsImNvbnNvbGUiLCJ3YXJuIiwiY2FsbGJhY2tzIiwiYmx1ZXByaW50SW5kZXgiLCJwdXNoIiwiYmx1ZXByaW50SW5zdGFuY2UiLCJibHVlcHJpbnRJZCIsImluZGV4T2YiLCJhcmdzIiwiYmx1ZXByaW50RGF0YSIsIlZlYzIiLCJ5Iiwic3VwZXIiLCJVaW50MzJBcnJheSIsIkFycmF5QnVmZmVyIiwiZnJvbUpTT04iLCJvdGhlciIsImlzRXF1YWwiLCJub3RFcXVhbCIsIkVQU0lMT04iLCJzY2FsYXIiLCJzcXJ0IiwibGVuZ3RoU3F1YXJlZCIsInNldCIsImNvc2luZSIsIm5vcm1hbGl6ZSIsImRvdCIsImFjb3MiLCJhbmdsZSIsImFuZ2xlVG8iLCJjcm9zcyIsImNvc0EiLCJjb3MiLCJzaW5BIiwic2luIiwiYXgiLCJheSIsInNjYWxlIiwiciIsInpTY2FsZSIsImNyZWF0ZUZyb21CdWZmZXIiLCJhcnJheSIsImoiLCJyZWFkZXIiLCJsb2FkRmxvYXQzMiIsInAxIiwicDIiLCJwMyIsInA0IiwiZCIsInUxIiwidTQiLCJ1MngiLCJ1M3giLCJ1MnkiLCJ1M3kiLCJWZWMzIiwieiIsInh5IiwieXoiLCJ1bmRlZmluZWQiLCJ2ZWMzIiwidG1wIiwiY3VyckxlbiIsInNjbCIsImF6IiwiYngiLCJieSIsImJ6IiwianNvbiIsInJlc3VsdCIsIlZlYzQiLCJ3IiwieHl6IiwiYiIsImF0IiwiYnQiLCJ0ZW1wQSIsInRlbXBCIiwiZ2xNYXRyaXgiLCJSQU5ET00iLCJvdXQiLCJSR0JBIiwiZyIsImEiLCJzdGFydHNXaXRoIiwic2V0RnJvbUhleCIsInNldEZyb21DU1NDb2xvck5hbWUiLCJ2YWx1ZXMiLCJoZXgiLCJyZ2IiLCJleGVjIiwicGFyc2VJbnQiLCJoZXhUb1JnYiIsImNvbG91ciIsImNvbG9ycyIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVlIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiY2FkZXRibHVlIiwiY2hhcnRyZXVzZSIsImNob2NvbGF0ZSIsImNvcmFsIiwiY29ybmZsb3dlcmJsdWUiLCJjb3Juc2lsayIsImNyaW1zb24iLCJjeWFuIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtraGFraSIsImRhcmttYWdlbnRhIiwiZGFya29saXZlZ3JlZW4iLCJkYXJrb3JhbmdlIiwiZGFya29yY2hpZCIsImRhcmtyZWQiLCJkYXJrc2FsbW9uIiwiZGFya3NlYWdyZWVuIiwiZGFya3NsYXRlYmx1ZSIsImRhcmtzbGF0ZWdyYXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW4iLCJncmVlbnllbGxvdyIsImhvbmV5ZGV3IiwiaG90cGluayIsImluZGlhbnJlZCAiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmV5IiwibGlnaHRncmVlbiIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZSIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicmViZWNjYXB1cnBsZSIsInJlZCIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGFuIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvdyIsInllbGxvd2dyZWVuIiwidG9Mb3dlckNhc2UiLCJjb2xvdXJOYW1lVG9IZXgiLCJjb21wb25lbnRUb0hleCIsImludCIsInRvU3RyaW5nIiwiZ2FtbWEiLCJhciIsImFnIiwiYWIiLCJhYSIsImdhbW1hT2Zmc2V0IiwicmFuZG9tQWxwaGEiLCJDb2xvciIsInRvSGV4IiwiRXVsZXJBbmdsZXMiLCJvcmRlciIsIk1hdDMiLCJtMDAiLCJtMDEiLCJtMDIiLCJtMTAiLCJtMTEiLCJtMTIiLCJtMjAiLCJtMjEiLCJtMjIiLCJ4QXhpcyIsInlBeGlzIiwiekF4aXMiLCJtYXQiLCJkaXIiLCJ1cCIsInpMZW4iLCJzZXRJZGVudGl0eSIsInNjYWxlSW5QbGFjZSIsInhMZW4iLCJ5TGVuIiwiYTAwIiwiYTAxIiwiYTAyIiwiYTEwIiwiYTExIiwiYTEyIiwiYTIwIiwiYTIxIiwiYTIyIiwiYjAxIiwiYjExIiwiYjIxIiwiZGV0IiwibG9hZEZsb2F0MzJBcnJheSIsIk1hdDQiLCJtMDMiLCJtMTMiLCJtMjMiLCJtMzAiLCJtMzEiLCJtMzIiLCJtMzMiLCJ0cmFuc2xhdGlvbiIsIm1hdDQiLCJhMDMiLCJhMTMiLCJhMjMiLCJhMzAiLCJhMzEiLCJhMzIiLCJhMzMiLCJiMDAiLCJiMDIiLCJiMDMiLCJiMDQiLCJiMDUiLCJiMDYiLCJiMDciLCJiMDgiLCJiMDkiLCJiMTAiLCJhc0FycmF5IiwiYjAiLCJiMSIsImIyIiwiYjMiLCJ2MyIsInBvcyIsInRhcmdldCIsInN1YnRyYWN0IiwiYXhpcyIsInZlYyIsImZvdlkiLCJhc3BlY3QiLCJuZWFyIiwiZmFyIiwicmFuZ2VJbnYiLCJsZWZ0IiwicmlnaHQiLCJib3R0b20iLCJ0b3AiLCJsciIsIm5mIiwibTN4NCIsIkFycmF5IiwiT2JqZWN0IiwiUXVhdCIsImlzQXJyYXkiLCJjYWxsIiwiZXVsZXJBbmdsZXMiLCJvcmRlcmVkIiwidGkiLCJ0aiIsInRrIiwiY2kiLCJjaiIsImNrIiwic2kiLCJzaiIsInNrIiwiY2MiLCJjcyIsInNjIiwic3MiLCJhaSIsImFqIiwiYWsiLCJyb3RhdGlvbk9yZGVyIiwiZXVsZXIiLCJ0ZXN0IiwiYXRhbjIiLCJzcXgiLCJzcXkiLCJzcXoiLCJhc2luIiwiaGFsZkFuZ2xlIiwibWF0MyIsInNldEZyb21EaXJlY3Rpb25BbmRVcHZlY3RvciIsInNldEZyb21NYXQzIiwibm9ybWFsaXplSW5QbGFjZSIsImZUcmFjZSIsImZSb290IiwiayIsImdldEFuZ2xlIiwiY29uanVnYXRlIiwiYXciLCJidyIsInZxIiwicHEiLCJtdWx0aXBseSIsIngyIiwieTIiLCJ6MiIsInh4IiwieXgiLCJ5eSIsInp4IiwienkiLCJ6eiIsInd4Iiwid3kiLCJ3eiIsInh6IiwieXciLCJ6dyIsInh3IiwiYXhpc0luZGV4IiwiZG90UHJvZHVjdCIsImxhbWJkYSIsInRoZXRhIiwic3QiLCJzdXQiLCJjb2VmZjEiLCJjb2VmZjIiLCJSYXkiLCJzdGFydCIsInBvaW50IiwiYzEiLCJjMiIsInAwIiwidSIsInZfbGVuIiwiZGlzdGFuY2VUbyIsImNsb3Nlc3RQb2ludCIsIkQiLCJ0aGlzX3QiLCJzZWdfdCIsImRpc3QiLCJhZGQiLCJyYXkiLCJyYXlfdCIsInBsYW5lIiwiTiIsIlBSRUNJU0lPTiIsInNJIiwiYm94MyIsInRvbGVyYW5jZSIsImludkRpciIsInNpZ24iLCJib3VuZHMiLCJkaWFnIiwiZGlhZ29uYWwiLCJ0TWluIiwidE1heCIsInR5TWluIiwidHlNYXgiLCJ0ek1pbiIsInR6TWF4IiwiY2xvbmUiLCJYZm8iLCJ0ciIsIm9yaSIsInNldEZyb21GbG9hdDMyQXJyYXkiLCJpc051bGwiLCJpc0lkZW50aXR5IiwiaXMxMTEiLCJhcHByb3hFcXVhbCIsInhmbyIsInRoaXNfc2MiLCJyb3RhdGVWZWMzIiwiaW52ZXJzZSIsIm5lZ2F0ZSIsInJvdCIsInRvTWF0NCIsInRybiIsInNldEZyb21NYXQ0IiwiZmxvYXQzMmFycmF5IiwicmVhZEJpbmFyeSIsIkJveDIiLCJQT1NJVElWRV9JTkZJTklUWSIsIk5FR0FUSVZFX0lORklOSVRZIiwiYWRkSW5QbGFjZSIsIlNwaGVyZVR5cGUiLCJyYWRpdXMiLCJTcGhlcmUiLCJib3giLCJpbnRlcnNlY3RzU3BoZXJlIiwiQm94MyIsImFkZFBvaW50IiwidHJhbnNmb3JtVmVjMyIsInNjeCIsInNjeSIsInNjeiIsImNlbnRlciIsInNwaGVyZSIsImRpc3RhbmNlVG9TcXVhcmVkIiwibm9ybWFsIiwiY29uc3RhbnQiLCJpc051bWVyaWMiLCJQbGFuZVR5cGUiLCJpbnZlcnNlTm9ybWFsTGVuZ3RoIiwiUGxhbmUiLCJwNSIsInBsYW5lcyIsImZvckVhY2giLCJwIiwiZGlzdGFuY2VUb1BvaW50IiwiY291bnRlciIsIkF0dHJpYnV0ZSIsImRhdGFUeXBlIiwiZXhwZWN0ZWRTaXplIiwiZGVmYXVsdFZhbHVlIiwiX19kYXRhVHlwZSIsIm5vcm1hbGl6ZWQiLCJudW1FbGVtZW50cyIsIl9fZGltZW5zaW9uIiwib2JqIiwiX19kZWZhdWx0RWxlbWVudFZhbHVlIiwiTUFYX1ZBTFVFIiwiYnl0ZUxlbmd0aCIsImluaXRSYW5nZSIsInNpemUiLCJwcmV2TGVuZ3RoIiwibmV3TGVuZ3RoIiwiZGF0YSIsInNsaWNlIiwiaW5kZXgiLCJudW1FbGVtcyIsInNldEZyb21PdGhlciIsImNvbnRleHQiLCJmcm9tIiwibWFwIiwiZGF0YUVsZW1lbnQiLCJWZXJ0ZXhBdHRyaWJ1dGUiLCJnZW9tIiwiZGVmYXVsdFNjYWxhclZhbHVlIiwiX19nZW9tIiwiX19zcGxpdHMiLCJfX3NwbGl0VmFsdWVzIiwicmVzaXplIiwiZmFjZSIsImZhY2VWZXJ0ZXgiLCJ2ZXJ0ZXgiLCJnZXRGYWNlVmVydGV4SW5kZXgiLCJnZXRWYWx1ZVJlZiIsInNldEZhY2VWZXJ0ZXhWYWx1ZV9CeVZlcnRleEluZGV4IiwidmFsdWVSZWYiLCJpc1ZhbGlkIiwidmVydGV4U3BsaXRJZHMiLCJmaWQiLCJzcGxpdElkIiwiZmFjZUdyb3VwIiwic3BsaXRJbmRleCIsInNwbGl0Q291bnQiLCJrZXlzIiwic3BsaXRJbmRpY2VzIiwibnVtVW5TcGxpdFZhbHVlcyIsImNvdW50IiwiZmFjZXMiLCJ0Z3QiLCJzcmMiLCJzcGxpdHMiLCJzcGxpdFZhbHVlcyIsImpzb25WYWwiLCJkYXRlVHlwZUluc3RhbmNlIiwibG9hZFVJbnQzMkFycmF5IiwibnVtU3BsaXRWYWx1ZXMiLCJ2ZXJ0ZXhJZCIsIm51bVNwbGl0cyIsImZhY2VJZCIsImRpbSIsIl9fbnVtRmxvYXQzMkVsZW1lbnRzIiwiY3JlYXRlRnJvbUZsb2F0MzJBcnJheSIsIkJhc2VHZW9tIiwibGlzdGVuZXJzIiwiX19pZCIsImV2ZW50TmFtZSIsImxpc3RlbmVyIiwiaW5jbHVkZXMiLCJpZCIsImNiIiwiZXZlbnQiLCJvZmYiLCJvbiIsInJlbW92ZUxpc3RlbmVyQnlJZCIsImlkcyIsImZuIiwiX19wYXJhbXMiLCJfX3BhcmFtTWFwcGluZyIsImRlcHJlY2F0ZWRQYXJhbU1hcHBpbmciLCJfX3BhcmFtRXZlbnRMaXN0ZW5lcklEcyIsImdldE51bVBhcmFtZXRlcnMiLCJwYXJhbU5hbWUiLCJuZXdQYXJhbU5hbWUiLCJlbWl0IiwicGFyYW0iLCJpbnNlcnRQYXJhbWV0ZXIiLCJnZXROYW1lIiwicmVtb3ZlUGFyYW1ldGVyIiwic2V0T3duZXIiLCJuZXdFdmVudCIsIl9fcGFyYW1ldGVyVmFsdWVDaGFuZ2VkIiwic3BsaWNlIiwicGFyYW1zSlNPTiIsInNhdmVkUGFyYW1zIiwicGFyYW1KU09OIiwicGFyYW1zIiwicGoiLCJnZXRQYXJhbWV0ZXIiLCJwYXJhbVBhdGgiLCJyZXNvbHZlUGF0aCIsInJlcGxhY2VQYXJhbWV0ZXIiLCJyZWFzb24iLCJ2ZXJzaW9ucyIsImNvbXBhcmUiLCJudW1Qcm9wcyIsImxvYWRVSW50MzIiLCJwcm9wVHlwZSIsImxvYWRTdHIiLCJwcm9wTmFtZSIsImVycm9yIiwiYWRkUGFyYW1ldGVyIiwic3JjUGFyYW0iLCJnZXRQYXJhbWV0ZXJCeUluZGV4IiwibG9hZFZhbHVlIiwiZ2V0VmFsdWUiLCJfX251bVZlcnRpY2VzIiwiX19ib3VuZGluZ0JveCIsIl9fYm91bmRpbmdCb3hEaXJ0eSIsIl9fdmVydGV4QXR0cmlidXRlcyIsIk1hcCIsIl9fbWV0YURhdGEiLCJhZGRWZXJ0ZXhBdHRyaWJ1dGUiLCJzZXROdW1WZXJ0aWNlcyIsIl9fbmFtZSIsInBvc2l0aW9ucyIsImdldFZlcnRleEF0dHJpYnV0ZSIsImF0dHIiLCJoYXMiLCJnZXQiLCJ2ZXJ0ZXhBdHRyaWJ1dGVzIiwiZW50cmllcyIsInZlcnRpY2VzIiwic2V0Qm91bmRpbmdCb3hEaXJ0eSIsImRlbHRhIiwidjIiLCJib3VuZGluZ0JveCIsInVwZGF0ZUJvdW5kaW5nQm94IiwiYmJveCIsIm51bVZlcnRzIiwibWV0YURhdGEiLCJkZWxldGUiLCJvcHRzIiwiYXR0ckJ1ZmZlcnMiLCJhdHRyTmFtZSIsIm51bVZlcnRpY2VzIiwiZmxhZ3MiLCJsb2FkVUludDgiLCJkZWJ1Z0NvbG9yIiwibG9hZFJHQkZsb2F0MzJDb2xvciIsImxvYWRGbG9hdDMyVmVjMyIsInBvc2l0aW9uc0F0dHIiLCJub3JtYWxzQXR0ciIsInRleENvb3Jkc0F0dHIiLCJwYXJzZThCaXRQb3NpdGlvbnNBcnJheSIsInJhbmdlIiwic2NsVmVjIiwicG9zaXRpb25zOGJpdCIsIm11bHRpcGx5SW5QbGFjZSIsInNldFZhbHVlIiwicGFyc2U4Qml0Tm9ybWFsc0FycmF5Iiwibm9ybWFsczhiaXQiLCJwYXJzZThCaXRUZXh0dXJlQ29vcmRzQXJyYXkiLCJ0ZXhDb29yZHM4Yml0IiwidGV4dHVyZUNvb3JkIiwibnVtQ2x1c3RlcnMiLCJsb2FkVUludDhBcnJheSIsImxvYWRTcGxpdFZhbHVlcyIsImJveDIiLCJsb2FkRmxvYXQzMlZlYzIiLCJjbHVzdGVycyIsImNsdXN0ZXJEYXRhIiwibm9ybWFsc1JhbmdlIiwidGV4Q29vcmRzUmFuZ2UiLCJ0eXBlIiwic2tpcFRvcG9sb2d5Iiwic2tpcEF0dHJpYnV0ZXMiLCJjbGVhciIsImF0dHJKU09OIiwiUG9pbnRzIiwiYmJveE1hdCIsInBvc0F0dHI4Yml0IiwibG9hZFVJbnQzMlZlYzIiLCJsb2FkQmFzZUdlb21CaW5hcnkiLCJMaW5lcyIsIl9faW5kaWNlcyIsInNldE51bVNlZ21lbnRzIiwibnVtT2ZTZWdtZW50cyIsImdldE51bVNlZ21lbnRzIiwiaW5kaWNlcyIsInNldFNlZ21lbnRWZXJ0ZXhJbmRpY2VzIiwibGluZSIsImxpbmVWZXJ0ZXgiLCJidWZmZXJzIiwiZ2VuQnVmZmVycyIsImJ5dGVzIiwibG9hZFVJbnQxNkFycmF5IiwiTWVzaCIsIl9fZmFjZUNvdW50cyIsIl9fZmFjZVZlcnRleEluZGljZXMiLCJfX2ZhY2VBdHRyaWJ1dGVzIiwiX19lZGdlQXR0cmlidXRlcyIsIl9fbG9nVG9wb2xvZ3lXYXJuaW5ncyIsImVkZ2VWZXJ0cyIsInZlcnRleEVkZ2VzIiwibnVtRWRnZXMiLCJlZGdlQW5nbGVzIiwiZWRnZVZlY3MiLCJyZWR1Y2UiLCJudW1GYWNlcyIsImZjIiwiZmFjZUNvdW50cyIsIm51bUZhY2VzVmVydGljZXMiLCJudW1WZXJ0c1BlckZhY2UiLCJnZXROdW1GYWNlcyIsImZhY2VWZXJ0ZXhJbmRpY2VzIiwic3RhcnRTcmMiLCJzdGFydFRndCIsImVuZFNyYyIsImZhY2VJbmRleCIsImlkeCIsInNvbWUiLCJ2ZXJ0ZXhJbmRpY2VzIiwiYXJndW1lbnRzIiwicHJvdG90eXBlIiwiZmFjZVZlcnRleENvdW50IiwiZ2V0RmFjZVZlcnRleENvdW50IiwiZ2V0RmFjZVZlcnRleE9mZnNldCIsInNldEZhY2VDb3VudHMiLCJnZXROdW1FZGdlcyIsImNvbm5lY3RlZFZlcnRpY2VzIiwiZWRnZUZhY2VzIiwiZmFjZUVkZ2VzIiwiZ2V0RWRnZUluZGV4IiwidG1wMCIsInRtcDEiLCJlZGdlVmVjIiwiZWRnZURhdGEiLCJlZGdlSW5kZXgiLCJhZGRFZGdlIiwiZWRnZUZhY2VJbmRleCIsIlNldCIsImZhY2VWZXJ0cyIsImdldEZhY2VWZXJ0ZXhJbmRpY2VzIiwiZmFjZU5vcm1hbHMiLCJhZGRGYWNlQXR0cmlidXRlIiwicHJldiIsImZhY2VOb3JtYWwiLCJwbiIsImdlblRvcG9sb2d5SW5mbyIsImNvbXB1dGVGYWNlTm9ybWFscyIsImdldEZhY2VBdHRyaWJ1dGUiLCJuMCIsIm4xIiwiaGFyZEFuZ2xlIiwiY2FsY3VsYXRlRWRnZUFuZ2xlcyIsImZhY2VOb3JtYWxzQnVmZmVyIiwidmVydGV4Tm9ybWFsc0FycmF5Iiwic2V0VmVydGV4Tm9ybWFsIiwiZ2V0Q29ubmVjdGVkRWRnZVZlY3MiLCJ2ZXJ0ZXhJbmRleCIsImUwIiwiZTEiLCJlZGdlcyIsImZhY2VHcm91cHMiLCJhZGRGYWNlVG9Hcm91cCIsImluR3JvdXAiLCJmMCIsImYxIiwiZjBncm91cEluZGV4IiwiZjFncm91cEluZGV4IiwiZ3JvdXBJbmRleCIsImNvbmNhdCIsInNvcnQiLCJmaXJzdFZlcnRleCIsIndlaWdodCIsInNldFNwbGl0VmVydGV4VmFsdWVzIiwiaGFyZEVkZ2VzIiwiYXR0clNwbGl0cyIsImdldFNwbGl0cyIsInBvbHlnb24iLCJudW1VblNwbGl0VmVydGljZXMiLCJ0b3RhbE51bVZlcnRpY2VzIiwiaW5jbHVkZUluZGljZXMiLCJnZW5lcmF0ZVRyaWFuZ3VsYXRlZEluZGljZXMiLCJnZW5lcmF0ZVNwbGl0VmFsdWVzIiwiZGltZW5zaW9uIiwibnVtUmVuZGVyVmVydHMiLCJpbmNsdWRlVmVydGV4TmVpZ2hib3JzIiwidmVydGV4TmVpZ2hib3JzIiwic29ydEZhbkVkZ2VzIiwiZmFuRWRnZXMiLCJmZUEiLCJmZUIiLCJjaGVja0ZhbkVkZ2VzIiwiZmUiLCJuZXh0IiwibmVpZ1ZlcnQiLCJ0cmlzQ291bnQiLCJjb21wdXRlTnVtVHJpYW5nbGVzIiwidHJpYW5ndWxhdGVkSW5kaWNlcyIsInRyaWFuZ2xlVmVydGV4IiwiYWRkVHJpYW5nbGVWZXJ0ZXhJbmRleCIsImZhY2VWZXJ0ZXhDb3VudHMiLCJvZmZzZXRSYW5nZSIsImxvYWRTSW50MzJWZWMyIiwiZmFjZVZlcnRleEluZGV4RGVsdGFzIiwibnVtRmFjZVZlcnRzIiwiZmFjZU9mZnNldHNCeUNvdW50Iiwic3JjT2Zmc2V0IiwicHJldkNvdW50IiwiZmFjZU9mZnNldHMiLCJwcmV2RmFjZVZlcnRleCIsImhhc1ZlcnRleEF0dHJpYnV0ZSIsImNvbXB1dGVWZXJ0ZXhOb3JtYWxzIiwiQmluUmVhZGVyIiwiaXNNb2JpbGVEZXZpY2UiLCJfX2J5dGVPZmZzZXQiLCJfX2RhdGFWaWV3IiwiRGF0YVZpZXciLCJfX2lzTW9iaWxlRGV2aWNlIiwidXRmOGRlY29kZXIiLCJUZXh0RGVjb2RlciIsInJlbWFpbmluZ0J5dGVMZW5ndGgiLCJnZXRVaW50OCIsImdldFVpbnQxNiIsImdldFVpbnQzMiIsImdldEludDMyIiwidWludDE2IiwibG9hZFVJbnQxNiIsImRlY29kZTE2Qml0RmxvYXQiLCJsb2FkRmxvYXQxNiIsImdldEZsb2F0MTYiLCJsb2FkVUZsb2F0MTYiLCJnZXRGbG9hdDMyIiwicmVhZFBhZCIsIm51bUNoYXJzIiwiY2hhcnMiLCJkZWNvZGUiLCJsb2FkU0ludDMyIiwic3RyaWRlIiwicGFkIiwiVmVyc2lvbiIsInZlcnNpb25TdHIiLCJwYXJ0cyIsInNwbGl0IiwibnVtYmVycyIsIm1ham9yIiwibWlub3IiLCJwYXRjaCIsImJyYW5jaCIsInNlbGYiLCJvbm1lc3NhZ2UiLCJjYWxsYmFjayIsInZlcnNpb24iLCJnZW9tRGF0YXMiLCJ0b2MiLCJnZW9tc1JhbmdlIiwidHJhbnNmZXJhYmxlcyIsImJ1ZmZlclNsaWNlIiwiY2xhc3NOYW1lIiwic2VlayIsImdlb21CdWZmZXJzIiwiZ2VuQnVmZmVyc09wdHMiLCJhdHRyRGF0YSIsInR5cGVOYW1lIiwiZ2V0Qm91bmRpbmdCb3giLCJnZW9tTGlicmFyeUlkIiwiZ2VvbUZpbGVJRCIsImdlb21JbmRleE9mZnNldCIsInBhcnNlR2VvbXNCaW5hcnkiLCJwb3N0TWVzc2FnZSJdLCJtYXBwaW5ncyI6InlCQUlBLE1BQU1BLEVBVUpDLGtCQUFrQkMsRUFBS0MsRUFBU0MsR0FDOUIsT0FBT0YsRUFBSUcsUUFBUSxJQUFJQyxPQUFPSCxFQUFTLEtBQU1DLEdBWS9DSCx1Q0FBdUNNLEVBQUtDLEVBQVEsRUFBR0MsRUFBWSxHQUNqRSxPQUFPQyxLQUFLQyxVQUNWSixHQUNBLENBQUNLLEVBQUtMLElBQ0dBLEdBQU9BLEVBQUlNLFFBQVVDLE9BQU9QLEVBQUlNLFFBQVFKLElBQXFCRixHQUV0RUMsR0FXSlAsZUFBZUMsR0FDYixJQUNJ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",!1);const Yl=zU.hardwareConcurrency-1;let kl=0;const Hl=[],Ml=[],Al=(F,U)=>{const Q=kl;if(!Hl[Q]){Ml[Q]={};const F=new Tl;F.onmessage=F=>{const U=F.data;Ml[Q][U.geomLibraryId](U)},Hl[Q]=F}Ml[Q][F]=Q=>{if(U(Q))for(let U=0;U<Ml.length;U++)Ml[U][F]&&(delete Ml[U][F],0==Object.keys(Ml[U]).length&&(Hl[U].terminate(),Hl[U]=null))};const B=Hl[Q];return kl=(Q+1)%Yl,B};class vl extends nQ{constructor(){super(),this.listenerIDs={},this.__streamInfos={},this.__genBuffersOpts={},this.loadCount=0,this.queue=[],this.on("streamFileParsed",(F=>{if(this.loadCount--,this.loadCount<Yl&&this.queue.length){const{geomFileID:F,geomsData:U}=this.queue.pop();this.readBinaryBuffer(F,U.buffer,this.loadContext)}})),this.clear()}clear(){this.__loadedCount=0,this.__numGeoms=-1,this.geoms=[]}isLoaded(){return this.__loadedCount==this.__numGeoms}loadGeomFile(F,U=!1){return U&&nB.incrementWorkload(1),new Promise((U=>{const Q=this.basePath+F+".zgeoms";nB.loadFile("archive",Q).then((Q=>{const B=Q[Object.keys(Q)[0]],l=this.on("streamFileParsed",(Q=>{Q.geomFileID==F&&(nB.incrementWorkDone(1),this.removeListenerById("streamFileParsed",l),U())}));this.loadCount<Yl?(this.loadCount++,this.readBinaryBuffer(F,B.buffer,this.loadContext)):this.queue.splice(0,0,{geomFileID:F,geomsData:B})}))}))}loadGeomFilesStream(F,U,Q){const B=F.numGeomsPerFile.length;nB.incrementWorkload(B),this.__numGeoms=F.numGeoms,this.basePath=U,this.loadContext=Q;for(let F=0;F<B;F++)this.loadGeomFile(F,!1)}setGenBufferOption(F,U){this.__genBuffersOpts[F]=U}setNumGeoms(F){this.__numGeoms=F}getNumGeoms(){return this.__numGeoms}getGeom(F){return F>=this.geoms.length?null:this.geoms[F]}loadArchive(F){nB.loadArchive(F).then((F=>{this.loadBin(F)}))}readBinaryBuffer(F,U,Q){const B=new mQ(U,0,zU.isMobileDevice),l=B.loadUInt32(),V=B.loadUInt32();if(this.__streamInfos[F]={total:l,done:0},0==l)return this.emit("streamFileParsed",{geomFileID:F,geomCount:0}),l;-1==this.__numGeoms&&(this.__numGeoms=l);const d=B.loadUInt32Array(l);{const R=Math.max(1,Math.floor(l/Yl+1));let t=0;for(;t<l;){const s=d[t];let i,e;t+R>=l?(e=[t,l],i=U.byteLength):(e=[t,t+R],i=d[e[1]]);const I=U.slice(s,i);t+=R,Al(this.getId(),(F=>this.__receiveGeomDatas(F))).postMessage({geomLibraryId:this.getId(),geomFileID:F,toc:d,geomIndexOffset:V,geomsRange:e,isMobileDevice:B.isMobileDevice,bufferSlice:I,genBuffersOpts:this.__genBuffersOpts,context:{versions:Q.versions}},[I])}}}__receiveGeomDatas(F){const{geomLibraryId:U,geomFileID:Q,geomDatas:B,geomIndexOffset:l,geomsRange:V}=F;if(U!=this.getId())throw new Error("Receiving workload for a different GeomLibrary");const d=l+V[0],R=[d,l+V[1]];for(let F=0;F<B.length;F++){const U=B[F];if(!U.type)continue;let Q;switch(U.type){case"Points":Q=new TB(U);break;case"Lines":Q=new YB(U);break;case"Mesh":case"Plane":case"Sphere":case"Cone":Q=new kB(U);break;default:throw new Error("Unsupported Geom type:"+className)}this.geoms[d+F]=Q}this.emit("rangeLoaded",{range:R});const t=R[1]-R[0],s=this.__streamInfos[Q];return s.done+=t,s.done==s.total&&this.emit("streamFileParsed",{geomFileID:Q,geomCount:s.done}),this.__loadedCount+=t,this.__loadedCount==this.__numGeoms&&this.emit("loaded"),this.__loadedCount==this.__numGeoms}toJSON(){return{numGeoms:this.geoms.length()}}toString(){return JSON.stringify(this.toJSON(),null,2)}static shutDownWorkers(){Hl.forEach(((F,U)=>{F.terminate()}))}}class zl extends nQ{constructor(F="MaterialLibrary"){super(),this.__name=F,this.lod=0,zU.isMobileDevice&&(this.lod=1),this.clear()}clear(){this.__images={},this.__materials={Default:new EB("Default","SimpleSurfaceShader")}}getPath(){return[this.__name]}getNumMaterials(){return Object.keys(this.__materials).length}getMaterials(){return Object.values(this.__materials)}getMaterialNames(){const F=[];for(const U in this.__materials)F.push(U);return F}hasMaterial(F){return F in this.__materials}addMaterial(F){F.setOwner(this),this.__materials[F.getName()]=F}getMaterial(F,U=!0){const Q=this.__materials[F];if(!Q&&U)throw new Error("Material:"+F+" not found in library:"+this.getMaterialNames());return Q}hasImage(F){return F in this.__images}addImage(F){F.setOwner(this),this.__images[F.getName()]=F}getImage(F,U=!0){const Q=this.__images[F];if(!Q&&U)throw new Error("Image:"+F+" not found in library:"+this.getImageNames());return Q}getImageNames(){const F=[];for(const U in this.__images)F.push(U);return F}load(F){const U=new XMLHttpRequest;U.open("GET",F,!0),U.ontimeout=()=>{throw new Error("The request for "+F+" timed out.")},U.onload=()=>{4===U.readyState&&(200===U.status?this.fromJSON(JSON.parse(U.responseText)):console.warn(U.statusText))},U.send(null)}toJSON(F={}){return{numMaterials:this.getNumMaterials()}}fromJSON(F,U={}){U.lod=this.lod;for(const U in F.textures){new Bl(U).fromJSON(F.textures[U]),this.__images[U]=texture}for(const U in F.materials){const Q=new EB(U);Q.fromJSON(F.materials[U]),this.addMaterial(Q)}}readBinary(F,U={}){this.name=F.loadStr(),U.lod=this.lod,U.materialLibrary=this;const Q=F.loadUInt32();for(let B=0;B<Q;B++){const Q=F.loadStr(),B=PU.constructClass(Q,void 0);B.readBinary(F,U),this.__images[B.getName()]=B}const B=F.loadUInt32();if(B>0){const Q=F.loadUInt32Array(B);for(let l=0;l<B;l++){const B=new EB("");F.seek(Q[l]),B.readBinary(F,U,this.__images),this.addMaterial(B)}}this.emit("loaded",{})}toString(){return JSON.stringify(this.toJSON(),null,2)}}const Dl=F=>{switch(F.toLowerCase()){case"millimeters":return.001;case"centimeters":return.01;case"decimeters":return.1;case"meters":return 1;case"kilometers":return 1e3;case"inches":return.0254;case"feet":return.3048;case"miles":return 1609.34}return 1};class Kl extends dB{constructor(F){super(F),this.__geomLibrary=new vl,this.__materials=new zl,this.loaded=!1}load(F){return Promise.reject("This method is not implemented for this Asset Item: "+F)}isLoaded(){return this.loaded}getEngineDataVersion(){return this.__engineDataVersion}getGeometryLibrary(){return this.__geomLibrary}getMaterialLibrary(){return this.__materials}getUnitsConversion(){return this.__unitsScale}readBinary(F,U){U.assetItem=this,U.numTreeItems=0,U.units||(U.units="meters"),U.numGeomItems=0,U.versions["zea-engine"]||(U.versions["zea-engine"]=new GB(F.loadStr())),this.__engineDataVersion=U.versions["zea-engine"];const Q=()=>{this.__units=F.loadStr();const Q=Dl(this.__units),B=Dl(U.units);this.__unitsScale=Q/B,U.units=this.__units;const l=this.getParameter("LocalXfo"),V=l.getValue();V.sc.scaleInPlace(this.__unitsScale),l.setValue(V)};let B;U.versions["zea-engine"].compare([0,0,6])>0&&Q();const l={};U.addGeomToLayer=(F,U)=>{if(!l[U]){B||(B=new dB("Layers"),this.addChild(B,!1));const F=new pl(U);B.addChild(F,!1),l[U]=F}l[U].addItem(F)};const V=[];U.resolvePath=(F,U,Q)=>{if(!F)throw new Error("Path not specified");try{const Q=this.resolvePath(F);U(Q)}catch(B){V.push((()=>{try{const Q=this.resolvePath(F);U(Q)}catch(F){if(!Q)throw new Error(F.message);Q(F)}}))}},U.addPLCB=F=>V.push(F),this.__materials.readBinary(F,U),super.readBinary(F,U),U.versions["zea-engine"].compare([0,0,5])>=0&&U.versions["zea-engine"].compare([0,0,7])<0&&Q();for(const F of V)F();this.loaded=!0}toJSON(F={}){F.makeRelative=F=>{const U=this.getPath(),Q=F.slice(0,U.length);for(let B=0;B<Q.length-1;B++)if(Q[B]!=U[B])return console.warn("Param Path is not relative to the asset. May not be able to be resolved at load time:"+F),F;const B=F.slice(U.length-1);return B[0]=".",B},F.assetItem=this;return super.toJSON(F)}fromJSON(F,U={},Q){U||(U={}),U.assetItem=this,U.numTreeItems=0,U.numGeomItems=0,null==U.version&&(U.version=0),U.assetItem=this;const B=[];U.resolvePath=(F,U)=>{if(!F)throw new Error("Path not specified");const Q=this.resolvePath(F);Q?U(Q):B.push((()=>{const Q=this.resolvePath(F);Q?U(Q):console.warn("Path unable to be resolved:"+F)}))},U.addPLCB=F=>B.push(F),super.fromJSON(F,U);for(const F of B)F();Q&&Q()}clone(F){const U=new Kl;return U.copyFrom(this,F),U}copyFrom(F,U){this.__geomLibrary=F.__geomLibrary,this.__materials=F.__materials,this.loaded=F.loaded,F.loaded||F.once("loaded",(Q=>{const B=F.getParameter("LocalXfo").getValue(),l=this.getParameter("LocalXfo").getValue();l.sc=B.sc.clone(),this.getParameter("LocalXfo").setValue(l),F.getChildren().forEach((F=>{F&&F!=Kl&&this.addChild(F.clone(U),!1,!1)})),this.loaded=!0,this.emit("loaded",Q)})),super.copyFrom(F,U)}}PU.register("AssetItem",Kl);class wl extends dB{constructor(F,U){super(F);const Q=this.addParameter(new wQ("Image"));U&&Q.setValue(U),this.addParameter(new pQ("PixelsPerMeter",1e3)),this.addParameter(new pQ("Alpha",1)),this.addParameter(new AQ("Color",new UQ(1,1,1))),this.addParameter(new YQ("AlignedToCamera",!1)),this.addParameter(new YQ("DrawOnTop",!1)),this.addParameter(new YQ("FixedSizeOnscreen",!1)),this.addParameter(new kQ("Pivot",new OU(.5,0)))}}PU.register("BillboardItem",wl);class fl extends dB{constructor(F){null==F&&(F="Camera"),super(F),this.__isOrthographicParam=this.addParameter(new pQ("isOrthographic",0)),this.__fovParam=this.addParameter(new pQ("fov",1)),this.__nearParam=this.addParameter(new pQ("near",.1)),this.__farParam=this.addParameter(new pQ("far",1e3)),this.__focalDistanceParam=this.addParameter(new pQ("focalDistance",5));const U=F=>{this.emit("projectionParamChanged",F)};this.__isOrthographicParam.on("valueChanged",U),this.__fovParam.on("valueChanged",U),this.__nearParam.on("valueChanged",U),this.__farParam.on("valueChanged",U),this.setPositionAndTarget(new qU(3,3,1.75),new qU(0,0,1)),this.setLensFocalLength("28mm"),this.adjustNearAndFarPlanesToFocalDist=!0,this.nearDistFactor=.2,this.farDistFactor=5,this.frameOnBoundingSphere=!1}getNear(){return this.__nearParam.getValue()}setNear(F){this.__nearParam.setValue(F)}getFar(){return this.__farParam.getValue()}setFar(F){this.__farParam.setValue(F)}getFov(){return this.__fovParam.getValue()}setFov(F){this.__fovParam.setValue(F)}getFrustumHeight(){return this.viewHeight}setFrustumHeight(F){this.viewHeight=F,this.emit("projectionParamChanged",event)}setLensFocalLength(F){const U={"10mm":100.4,"11mm":95,"12mm":90,"14mm":81.2,"15mm":77.3,"17mm":70.4,"18mm":67.4,"19mm":64.6,"20mm":61.9,"24mm":53.1,"28mm":46.4,"30mm":43.6,"35mm":37.8,"45mm":29.9,"50mm":27,"55mm":24.6,"60mm":22.6,"70mm":19.5,"75mm":18.2,"80mm":17.1,"85mm":16.1,"90mm":15.2,"100mm":13.7,"105mm":13,"120mm":11.4,"125mm":11,"135mm":10.2,"150mm":9.1,"170mm":8.1,"180mm":7.6,"210mm":6.5,"300mm":4.6,"400mm":3.4,"500mm":2.7,"600mm":2.3,"800mm":1.7};!F in U?console.warn("Camera lense focal length not supported:"+F):this.__fovParam.setValue(DU.degToRad(U[F]))}getFocalDistance(){return this.__focalDistanceParam.getValue()}setFocalDistance(F){if(F<1e-4&&console.error("Never set focal distance to zero"),this.__focalDistanceParam.setValue(F),this.adjustNearAndFarPlanesToFocalDist){const U=F*this.nearDistFactor;U<this.__nearParam.getValue()&&this.__nearParam.setValue(U);const Q=F*this.farDistFactor;Q>this.__farParam.getValue()&&this.__farParam.setValue(Q)}}isOrthographic(){return 1==this.__isOrthographicParam.getValue()}setIsOrthographic(F,U=0){if(this.__orthoIntervalId&&clearInterval(this.__orthoIntervalId),F>.5){const F=this.__fovParam.getValue(),U=this.__focalDistanceParam.getValue();this.viewHeight=Math.sin(.5*F)*U*2}if(0==U)this.__isOrthographicParam.setValue(F);else{const Q=Math.round(U/20);let B=0;const l=this.__isOrthographicParam.getValue(),V=()=>{const U=DU.lerp(l,F,B/Q);this.__isOrthographicParam.setValue(U),B++,B<=Q?this.__focusIntervalId=setTimeout(V,20):(this.__focusIntervalId=void 0,this.emit("movementFinished"))};V()}}setPositionAndTarget(F,U){this.setFocalDistance(F.distanceTo(U));const Q=new RQ;Q.setLookAt(F,U,new qU(0,0,1)),this.getParameter("GlobalXfo").setValue(Q),this.emit("movementFinished")}getTargetPosition(){const F=this.__focalDistanceParam.getValue(),U=this.getParameter("GlobalXfo").getValue(),Q=U.ori.getZaxis();return Q.scaleInPlace(-F),Q.addInPlace(U.tr),Q}frameView(F,U){const Q=this.__focalDistanceParam.getValue(),B=this.__fovParam.getValue(),l=this.getParameter("GlobalXfo").getValue().clone(),V=F.getWidth()/F.getHeight(),d=2*Math.atan(Math.tan(.5*B)*V);let R=Q;if(this.frameOnBoundingSphere){const F=new iQ;for(const Q of U)F.addBox3(Q.getParameter("BoundingBox").getValue());if(!F.isValid())return void console.warn("Bounding box not valid.");const V=l.ori.getZaxis().scale(-Q),d=l.tr.add(V),t=F.center().subtract(d);l.tr.addInPlace(t),R=F.size()/Math.tan(B)}else{const F=[];if(U.forEach((U=>{U.traverse((U=>{if(!(U instanceof dB))return!1;if(U.disableBoundingBox)return!1;if(U instanceof ul){const Q=U.getParameter("Geometry").getValue();if(Q){const B=Q.getBoundingBox();if(B.isValid()){const Q=U.getGeomMat4();return F.push(Q.transformVec3(B.p0)),F.push(Q.transformVec3(new qU(B.p0.x,B.p0.y,B.p1.z))),F.push(Q.transformVec3(new qU(B.p0.x,B.p1.y,B.p0.z))),F.push(Q.transformVec3(new qU(B.p1.x,B.p0.y,B.p0.z))),F.push(Q.transformVec3(new qU(B.p0.x,B.p1.y,B.p1.z))),F.push(Q.transformVec3(new qU(B.p1.x,B.p0.y,B.p1.z))),F.push(Q.transformVec3(new qU(B.p1.x,B.p1.y,B.p0.z))),F.push(Q.transformVec3(B.p1)),!1}}}if(0==U.getNumChildren()){const Q=U.getParameter("BoundingBox").getValue();if(Q.isValid())return F.push(new qU(Q.p0.x,Q.p0.y,Q.p0.z)),F.push(new qU(Q.p0.x,Q.p0.y,Q.p1.z)),F.push(new qU(Q.p0.x,Q.p1.y,Q.p0.z)),F.push(new qU(Q.p1.x,Q.p0.y,Q.p0.z)),F.push(new qU(Q.p0.x,Q.p1.y,Q.p1.z)),F.push(new qU(Q.p1.x,Q.p0.y,Q.p1.z)),F.push(new qU(Q.p1.x,Q.p1.y,Q.p0.z)),F.push(new qU(Q.p1.x,Q.p1.y,Q.p1.z)),!1}}))})),0==F.length)return;const Q=this.isOrthographic()?0:d/2,t=this.isOrthographic()?0:B/2,s={};s.XPos=new qU(Math.cos(Q),0,Math.sin(Q)),s.XNeg=new qU(-Math.cos(Q),0,Math.sin(Q)),s.YPos=new qU(0,Math.cos(t),Math.sin(t)),s.YNeg=new qU(0,-Math.cos(t),Math.sin(t)),s.ZPos=new qU(0,0,1),s.ZNeg=new qU(0,0,-1);const i={},e={};for(const F in s)i[F]=l.ori.rotateVec3(s[F]),e[F]=Number.NEGATIVE_INFINITY;const I=new qU;F.forEach(((F,U)=>{if(!Number.isFinite(F.x)||!Number.isFinite(F.y)||!Number.isFinite(F.z))return;const Q=F.subtract(l.tr);for(const F in s){const U=Q.dot(i[F]);U>e[F]&&U!=Number.POSITIVE_INFINITY&&(e[F]=U)}I.addInPlace(F)}));for(const F in e)if(e[F]==Number.POSITIVE_INFINITY)return;I.scaleInPlace(1/F.length);let Z=0;if(this.isOrthographic()){const F=new qU(.5*(-e.XNeg+e.XPos),.5*(-e.YNeg+e.YPos),.5*(-e.ZNeg+e.ZPos)),U=e.ZNeg+e.ZPos;Z=2*U,F.z=-e.ZNeg+Z,l.tr.addInPlace(l.ori.rotateVec3(F)),R=2*U;const Q=e.XPos+e.XNeg,B=e.YPos+e.YNeg;this.viewHeight=Math.max(B,Q/V);const d=.1;this.viewHeight+=this.viewHeight*d}else{const F=d/2,U=B/2,Q=new OU(Math.cos(F)*e.XPos,Math.sin(F)*e.XPos),V=Q.add(new OU(Math.sin(F),-Math.cos(F))),t=new OU(-Math.cos(F)*e.XNeg,Math.sin(F)*e.XNeg),s=t.add(new OU(-Math.sin(F),-Math.cos(F))),i=OU.intersectionOfLines(Q,V,t,s),c=new OU(Math.cos(U)*e.YPos,Math.sin(U)*e.YPos),n=c.add(new OU(Math.sin(U),-Math.cos(U))),a=new OU(-Math.cos(U)*e.YNeg,Math.sin(U)*e.YNeg),S=a.add(new OU(-Math.sin(U),-Math.cos(U))),g=OU.intersectionOfLines(c,n,a,S);Z=Math.max(i.y,g.y);const b=new qU(i.x,g.x,Z);l.tr.addInPlace(l.ori.rotateVec3(b)),R=I.distanceTo(l.tr);const G=R*.1;l.tr.addInPlace(l.ori.rotateVec3(new qU(0,0,G))),Z+=G}if(this.adjustNearAndFarPlanesToFocalDist){e.ZPos-=Z,e.ZNeg+=Z;const F=e.ZNeg*this.nearDistFactor,U=-e.ZPos*this.farDistFactor;this.__nearParam.setValue(F),this.__farParam.setValue(U)}}this.setFocalDistance(R),this.getParameter("GlobalXfo").setValue(l),this.emit("movementFinished")}updateProjectionMatrix(F,U){const Q=this.__isOrthographicParam.getValue(),B=this.__fovParam.getValue(),l=this.__nearParam.getValue(),V=this.__farParam.getValue(),d=new lQ;if(Q>0){const F=.5*this.viewHeight,Q=-F,B=F,R=F*-U,t=F*U;d.setOrthographicMatrix(R,t,Q,B,l,V)}Q<1&&F.setPerspectiveMatrix(B,U,l,V),1==Q?F.setFromMat4(d):Q>0&&F.set(DU.lerp(F.m00,d.m00,Q),DU.lerp(F.m01,d.m01,Q),DU.lerp(F.m02,d.m02,Q),DU.lerp(F.m03,d.m03,Q),DU.lerp(F.m10,d.m10,Q),DU.lerp(F.m11,d.m11,Q),DU.lerp(F.m12,d.m12,Q),DU.lerp(F.m13,d.m13,Q),DU.lerp(F.m20,d.m20,Q),DU.lerp(F.m21,d.m21,Q),DU.lerp(F.m22,d.m22,Q),DU.lerp(F.m23,d.m23,Q),DU.lerp(F.m30,d.m30,Q),DU.lerp(F.m31,d.m31,Q),DU.lerp(F.m32,d.m32,Q),DU.lerp(F.m33,d.m33,Q))}}PU.register("Camera",fl);class Pl extends BB{constructor(F,U){super(),this.addInput(new UB("GroupGlobalXfo")).setParam(F),this.addOutput(new QB("GroupTransformXfo")).setParam(U)}setBindXfo(F){this.bindXfo=F,this.invBindXfo=F.inverse(),this.setDirty()}evaluate(){const F=this.getOutput("GroupTransformXfo");if(this.invBindXfo){const U=this.getInput("GroupGlobalXfo").getValue();F.setClean(U.multiply(this.invBindXfo))}else F.setClean(new RQ)}}class jl extends BB{constructor(F,U){super(),this.addInput(new UB("GroupTransformXfo")).setParam(F),this.addOutput(new QB("MemberGlobalXfo",NQ.OP_READ_WRITE)).setParam(U),this._enabled=!0}disable(){this._enabled=!1,this.setDirty()}enable(){this._enabled=!0,this.setDirty()}evaluate(){const F=this.getOutput("MemberGlobalXfo"),U=F.getValue();if(this._enabled){const Q=this.getInput("GroupTransformXfo").getParam().getValue();F.setClean(Q.multiply(U))}else F.setClean(U)}}const _l={disabled:0,manual:1,first:2,average:3,globalOri:4};class Ol extends rl{constructor(F){super(F),this.groupXfoDirty=!1,this.calculatingGroupXfo=!1,this.dirty=!1,this._bindXfoDirty=!1,this.memberXfoOps=[],this.__initialXfoModeParam=this.addParameter(new TQ("InitialXfoMode",_l.average,["manual","first","average","global"])),this.__initialXfoModeParam.on("valueChanged",(F=>{this.calcGroupXfo()})),this.__highlightedParam=this.addParameter(new YQ("Highlighted",!1)),this.__highlightedParam.on("valueChanged",(F=>{this.__updateHighlight()}));this.addParameter(new AQ("HighlightColor",new UQ(.5,.5,1))).on("valueChanged",(F=>{this.__updateHighlight()}));this.addParameter(new pQ("HighlightFill",0,[0,1])).on("valueChanged",(F=>{this.__updateHighlight()})),this.__materialParam=this.addParameter(new LB("Material")),this.__materialParam.on("valueChanged",(F=>{this.__updateMaterial()})),this.addParameter(new YQ("CutAwayEnabled",!1)).on("valueChanged",(F=>{this.__updateCutaway()})),this.addParameter(new HQ("CutPlaneNormal",new qU(1,0,0))).on("valueChanged",(F=>{this.__updateCutaway()})),this.addParameter(new pQ("CutPlaneDist",0)).on("valueChanged",(F=>{this.__updateCutaway()}));const U=this.addParameter(new KQ("GroupTransform",new RQ));this.groupTransformOp=new Pl(this.getParameter("GlobalXfo"),U)}static get INITIAL_XFO_MODES(){return _l}__updateVisibility(){if(super.__updateVisibility()){const F=this.isVisible();return Array.from(this.__itemsParam.getValue()).forEach((U=>{U instanceof dB&&U.propagateVisibility(F?1:-1)})),!0}return!1}__updateHighlight(){new Promise((F=>{let U,Q=!1;(this.getParameter("Highlighted").getValue()||this.isSelected())&&(Q=!0,U=this.getParameter("HighlightColor").getValue(),U.a=this.getParameter("HighlightFill").getValue());const B="groupItemHighlight"+this.getId();Array.from(this.__itemsParam.getValue()).forEach((F=>{F instanceof dB&&(Q?F.addHighlight(B,U,!0):F.removeHighlight(B,!0))})),F()}))}setSelected(F){super.setSelected(F),this.__updateHighlight()}calcGroupXfo(){const F=Array.from(this.__itemsParam.getValue());if(0==F.length)return new RQ;this.calculatingGroupXfo=!0,this.memberXfoOps.forEach((F=>F.disable()));const U=this.__initialXfoModeParam.getValue();let Q;if(U==_l.manual)Q=this.getParameter("GlobalXfo").getValue();else if(U==_l.first)F[0]instanceof dB&&(Q=F[0].getParameter("GlobalXfo").getValue());else if(U==_l.average){Q=new RQ,Q.ori.set(0,0,0,0);let U=0;F.forEach(((F,B)=>{if(F instanceof dB){const B=F.getParameter("GlobalXfo").getValue();Q.tr.addInPlace(B.tr),Q.ori.addInPlace(B.ori),U++}})),Q.tr.scaleInPlace(1/U),Q.ori.normalizeInPlace()}else{if(U!=_l.globalOri)throw new Error("Invalid GROUP_XFO_MODES.");{Q=new RQ;let U=0;F.forEach(((F,B)=>{if(F instanceof dB){const B=F.getParameter("GlobalXfo").getValue();Q.tr.addInPlace(B.tr),U++}})),Q.tr.scaleInPlace(1/U)}}this.getParameter("GlobalXfo").setValue(Q),this.groupTransformOp.setBindXfo(Q),this.memberXfoOps.forEach((F=>F.enable())),this.calculatingGroupXfo=!1,this.groupXfoDirty=!1}__updateMaterial(){new Promise((F=>{const U=this.getParameter("Material").getValue();Array.from(this.__itemsParam.getValue()).forEach((F=>{F.traverse((F=>{if(F instanceof dB&&F.hasParameter("Material")){const Q=F.getParameter("Material");if(U){const F=Q.getValue();F==U||F&&"LinesShader"==F.getShaderName()||(Q.__backupMaterial=F,Q.loadValue(U))}else Q.__backupMaterial&&Q.loadValue(Q.__backupMaterial)}}),!1)})),F()}))}__updateCutaway(){new Promise((F=>{const U=this.getParameter("CutAwayEnabled").getValue(),Q=this.getParameter("CutPlaneNormal").getValue(),B=this.getParameter("CutPlaneDist").getValue();Array.from(this.__itemsParam.getValue()).forEach((F=>{F.traverse((F=>{F instanceof xl&&(F.setCutawayEnabled(U),F.setCutVector(Q),F.setCutDist(B))}),!0)})),F()}))}setSearchRoot(F){this.searchRoot=F}setOwner(F){this.searchRoot&&this.searchRoot!=this.getOwner()||(this.searchRoot=F),super.setOwner(F)}setPaths(F){this.clearItems(!1);this.getOwner();if(null==this.searchRoot)return void console.warn("Group does not have an owner and so cannot resolve paths:",this.getName());const U=[];F.forEach((F=>{const Q=this.searchRoot.resolvePath(F);Q?U.push(Q):console.warn("Path does not resolve to an Item:",F," group:",this.getName())})),this.setItems(U)}resolveItems(F){this.setPaths(F)}__bindItem(F,U){if(super.__bindItem(F,U),!(F instanceof dB))return;const Q=this.__itemsEventHandlers[U],B=this.getParameter("Material").getValue();if(B&&F.traverse((F=>{if(F instanceof dB&&F.hasParameter("Material")){const U=F.getParameter("Material");if(B){const F=U.getValue();F==B||F&&"LinesShader"==F.getShaderName()||(U.__backupMaterial=F,U.loadValue(B))}}}),!0),F instanceof dB&&this.getParameter("Highlighted").getValue()){const U=this.getParameter("HighlightColor").getValue();U.a=this.getParameter("HighlightFill").getValue(),F.addHighlight("groupItemHighlight"+this.getId(),U,!0)}const l=this.getParameter("CutAwayEnabled").getValue();if(l){const U=this.getParameter("CutPlaneNormal").getValue(),Q=this.getParameter("CutPlaneDist").getValue();F.traverse((F=>{F instanceof xl&&(F.setCutawayEnabled(l),F.setCutVector(U),F.setCutDist(Q))}),!0)}if(this.isVisible()||F.propagateVisibility(-1),F instanceof dB){const B=F.getParameter("GlobalXfo"),l=new jl(this.getParameter("GroupTransform"),B);this.memberXfoOps.splice(U,0,l),Q.valueChanged=F.getParameter("BoundingBox").on("valueChanged",(F=>{this._setBoundingBoxDirty(F)})),this._bindXfoDirty=!0}}__unbindItem(F,U){super.__unbindItem(F,U),F instanceof dB&&(this.getParameter("Highlighted").getValue()&&F.removeHighlight("groupItemHighlight"+this.getId(),!0),this.isVisible()||F.propagateVisibility(1),F.traverse((F=>{F instanceof xl&&F.setCutawayEnabled(!1)}),!0),F instanceof dB&&(this.memberXfoOps[U].detach(),this.memberXfoOps.splice(U,1),this._setBoundingBoxDirty(),F.getParameter("BoundingBox").removeListenerById("valueChanged",this.listenerIDs.valueChanged),this._bindXfoDirty=!0))}addItem(F,U=!0){F?(this.__itemsParam.addItem(F,U),U&&this.calcGroupXfo()):console.warn("Error adding item to group. Item is null")}removeItem(F,U=!0){this.__itemsParam.removeItem(F,U),U&&this.calcGroupXfo()}clearItems(F=!0){const U=Array.from(this.__itemsParam.getValue());for(let F=U.length-1;F>=0;F--)this.__unbindItem(U[F],F);this.memberXfoOps=[],this.__itemsParam.clearItems(F),F&&this.calcGroupXfo()}getItems(){return this.__itemsParam.getValue()}setItems(F){this.clearItems(!1),this.__itemsParam.setItems(F),this.calcGroupXfo()}_cleanBoundingBox(F){const U=super._cleanBoundingBox(F);return Array.from(this.__itemsParam.getValue()).forEach((F=>{F instanceof dB&&F.isVisible()&&U.addBox3(F.getParameter("BoundingBox").getValue())})),U}onPointerDown(F){super.onPointerDown(F)}onPointerUp(F){super.onPointerUp(F)}onPointerMove(F){super.onPointerMove(F)}__loadDone(){this.calculatingGroupXfo=!0,this.calcGroupXfo(),this.calculatingGroupXfo=!1}clone(){const F=new Ol;return F.copyFrom(this),F}}PU.register("Group",Ol);const ql={disabled:0,manual:1,first:2,average:3,globalOri:4};class $l extends rl{constructor(F){super(F),this.calculatingGroupXfo=!1,this.memberXfoOps=[],this.__initialXfoModeParam=this.addParameter(new TQ("InitialXfoMode",ql.average,["manual","first","average","global"])),this.__initialXfoModeParam.on("valueChanged",(F=>{this.calcGroupXfo()}));const U=this.addParameter(new KQ("GroupTransform",new RQ));this.groupTransformOp=new Pl(this.getParameter("GlobalXfo"),U)}static get INITIAL_XFO_MODES(){return ql}__updateHighlight(){new Promise((F=>{let U,Q=!1;this.isSelected()&&(Q=!0,U=this.getHighlight(),U.a=.2);const B="kinematicGroupItemHighlight"+this.getId();Array.from(this.__itemsParam.getValue()).forEach((F=>{F instanceof dB&&(Q?F.addHighlight(B,U,!0):F.removeHighlight(B,!0))})),F()}))}setSelected(F){super.setSelected(F),this.__updateHighlight()}calcGroupXfo(){const F=Array.from(this.__itemsParam.getValue());if(0==F.length)return new RQ;this.calculatingGroupXfo=!0,this.memberXfoOps.forEach((F=>F.disable()));const U=this.__initialXfoModeParam.getValue();let Q;if(U==ql.manual)Q=this.getParameter("GlobalXfo").getValue();else if(U==ql.first)F[0]instanceof dB&&(Q=F[0].getParameter("GlobalXfo").getValue());else if(U==ql.average){Q=new RQ,Q.ori.set(0,0,0,0);let U=0;F.forEach(((F,B)=>{if(F instanceof dB){const B=F.getParameter("GlobalXfo").getValue();Q.tr.addInPlace(B.tr),Q.ori.addInPlace(B.ori),U++}})),Q.tr.scaleInPlace(1/U),Q.ori.normalizeInPlace()}else{if(U!=ql.globalOri)throw new Error("Invalid GROUP_XFO_MODES.");{Q=new RQ;let U=0;F.forEach(((F,B)=>{if(F instanceof dB){const B=F.getParameter("GlobalXfo").getValue();Q.tr.addInPlace(B.tr),U++}})),Q.tr.scaleInPlace(1/U)}}this.getParameter("GlobalXfo").setValue(Q),this.groupTransformOp.setBindXfo(Q),this.memberXfoOps.forEach((F=>F.enable())),this.calculatingGroupXfo=!1}__bindItem(F,U){if(F instanceof dB){if(this.isSelected()){const U=this.getHighlight();U.a=.2;const Q="kinematicGroupItemHighlight"+this.getId();F.addHighlight(Q,U,!0)}{const Q=F.getParameter("GlobalXfo"),B=new jl(this.getParameter("GroupTransform"),Q);this.memberXfoOps.splice(U,0,B),this.__itemsEventHandlers[U]||(this.__itemsEventHandlers[U]={});this.__itemsEventHandlers[U]["BoundingBox.valueChanged"]=F.getParameter("BoundingBox").on("valueChanged",(F=>{this._setBoundingBoxDirty()}))}}}__unbindItem(F,U){if(super.__unbindItem(F,U),F instanceof dB){if(this.isSelected()){const U="kinematicGroupItemHighlight"+this.getId();F.removeHighlight(U,!0)}this.memberXfoOps[U].detach(),this.memberXfoOps.splice(U,1),this._setBoundingBoxDirty()}}addItem(F,U=!0){super.addItem(F,U),U&&this.calcGroupXfo()}removeItem(F,U=!0){super.removeItem(F,U),U&&this.calcGroupXfo()}setItems(F){super.setItems(emit),this.calcGroupXfo()}clearItems(F=!0){super.clearItems(F),this.memberXfoOps=[],F&&this.calcGroupXfo()}__loadDone(){this.calculatingGroupXfo=!0,this.calcGroupXfo(),this.calculatingGroupXfo=!1}clone(F){const U=new $l;return U.copyFrom(this,F),U}}PU.register("KinematicGroup",$l);class FV extends rl{constructor(F){super(F),this.__materialParam=this.addParameter(new LB("Material")),this.__materialParam.on("valueChanged",(()=>{this.__updateMaterial()}))}__updateHighlight(){new Promise((F=>{let U,Q=!1;this.isSelected()&&(Q=!0,U=this.getHighlight(),U.a=.2);const B="kinematicGroupItemHighlight"+this.getId();Array.from(this.__itemsParam.getValue()).forEach((F=>{F instanceof dB&&(Q?F.addHighlight(B,U,!0):F.removeHighlight(B,!0))})),F()}))}setSelected(F){super.setSelected(F),this.__updateHighlight()}__updateMaterial(){new Promise((F=>{const U=this.getParameter("Material").getValue();Array.from(this.__itemsParam.getValue()).forEach((F=>{F.traverse((F=>{if(F instanceof dB&&F.hasParameter("Material")){const Q=F.getParameter("Material");if(U){const F=Q.getValue();F==U||F&&"LinesShader"==F.getShaderName()||(Q.__backupMaterial=F,Q.setValue(U))}else Q.__backupMaterial&&Q.setValue(Q.__backupMaterial)}}))})),F()}))}__bindItem(F,U){if(super.__bindItem(F,U),!(F instanceof dB))return;if(this.isSelected()){const U=this.getHighlight();U.a=.2;const Q="materialGroupItemHighlight"+this.getId();F.addHighlight(Q,U,!0)}const Q=this.getParameter("Material").getValue();Q&&F.traverse((F=>{if(F instanceof dB&&F.hasParameter("Material")){const U=F.getParameter("Material");if(Q){const F=U.getValue();F==Q||F&&"LinesShader"==F.getShaderName()||(U.__backupMaterial=F,U.setValue(Q))}}}),!0)}__unbindItem(F,U){if(super.__unbindItem(F,U),F instanceof dB&&this.isSelected()){const U="materialGroupItemHighlight"+this.getId();F.removeHighlight(U,!0)}}clone(F){const U=new FV;return U.copyFrom(this,F),U}}PU.register("MaterialGroup",FV);class UV extends BB{constructor(F,U){super(),this.addInput(new UB("GroupGlobalXfo")).setParam(F),this.addOutput(new QB("CuttingPlane")).setParam(U)}evaluate(){const F=this.getOutput("CuttingPlane"),U=this.getInput("GroupGlobalXfo").getValue(),Q=U.ori.getZaxis(),B=U.tr.dot(Q);F.setClean(new $U(Q.x,Q.y,Q.z,-B))}}class QV extends rl{constructor(F){super(F);const U=new YQ("CutAwayEnabled",!1),Q=new MQ("CutPlane",new $U(1,0,0));U.on("valueChanged",(F=>{this.__updateCutaway(F)})),Q.on("vec4Parameter",(F=>{this.__updateCutaway(F)})),this.addParameter(U),this.addParameter(Q),this.cutPlaneOp=new UV(this.getParameter("GlobalXfo"),this.getParameter("CutPlane"));const B=new EB("plane","FlatSurfaceShader");B.getParameter("BaseColor").setValue(new UQ(1,1,1,.2));const l=new ul("PlaneGeom",new qB(1,1),B);l.getSelectable(!1),this.addChild(l);const V=new EB("border","LinesShader");V.getParameter("BaseColor").setValue(new UQ(1,0,0,1));const d=new ul("BorderGeom",new zB(1,1),V);d.getSelectable(!1),this.addChild(d)}__updateCutaway(F){new Promise((U=>{const Q=this.getParameter("CutAwayEnabled").getValue(),B=this.getParameter("CutPlane").getValue(),l=B.xyz,V=B.w;F instanceof xl?(F.setCutawayEnabled(Q),F.setCutVector(l),F.setCutDist(V)):Array.from(this.__itemsParam.getValue()).forEach((F=>{F.traverse((F=>{F instanceof xl&&(F.setCutawayEnabled(Q),F.setCutVector(l),F.setCutDist(V))}),!0)})),U()}))}__bindItem(F,U){if(!(F instanceof dB))return;this.getParameter("CutAwayEnabled").getValue()&&this.__updateCutaway(F);const Q=new iQ;this.getParameter("GlobalXfo").getValue().inverse();Array.from(this.__itemsParam.getValue()).forEach((F=>{F instanceof dB&&Q.addBox3(F.getParameter("BoundingBox").getValue())}));{const F=Q.p1.x-Q.p0.x,U=Q.p1.y-Q.p0.y,B=new RQ;B.sc.set(F,U,1),this.getChild(0).getParameter("LocalXfo").setValue(B),this.getChild(1).getParameter("LocalXfo").setValue(B)}}__unbindItem(F,U){F instanceof dB&&F.traverse((F=>{F instanceof xl&&F.setCutawayEnabled(!1)}),!0)}clone(F){const U=new QV;return U.copyFrom(this,F),U}}PU.register("CuttingPlane",QV);class BV extends XQ{constructor(F){super(F),this.addParameter(new AQ("BackgroundColor",new UQ("#eeeeee"))),this.addParameter(new wQ("EnvMap")),this.addParameter(new YQ("Display EnvMap",!1)),this.addParameter(new pQ("EnvMapLOD",0))}}class lV extends dB{constructor(F=5,U=50,Q=new UQ("#DCDCDC")){super("GridTree"),this.disableBoundingBox=!0,this.setSelectable(!1);const B=new EB("gridMaterial","LinesShader");B.getParameter("BaseColor").setValue(Q),B.getParameter("Overlay").setValue(0),B.getParameter("StippleValue").setValue(0),B.getParameter("OccludedStippleValue").setValue(1);const l=new fB(F,F,U,U,!0),V=new ul("GridItem",l,B);V.setSelectable(!1),this.addChild(V,!1);const d=new NB;d.setNumVertices(2),d.setNumSegments(1),d.setSegmentVertexIndices(0,0,1);const R=d.getVertexAttribute("positions");R.getValueRef(0).set(-.5*F,0,0),R.getValueRef(1).set(.5*F,0,0);const t=new EB("gridXAxisMaterial","LinesShader");t.getParameter("BaseColor").setValue(new UQ(Q.luminance(),0,0)),t.getParameter("Overlay").setValue(0),t.getParameter("StippleValue").setValue(0),t.getParameter("OccludedStippleValue").setValue(1);const s=new ul("xAxisLine",d,t);s.setSelectable(!1),this.addChild(s,!1);const i=new EB("gridYAxisMaterial","LinesShader");i.getParameter("BaseColor").setValue(new UQ(0,Q.luminance(),0)),i.getParameter("Overlay").setValue(0),i.getParameter("StippleValue").setValue(0),i.getParameter("OccludedStippleValue").setValue(1),i.setSelectable(!1);const e=new ul("yAxisLine",d,i);e.setSelectable(!1);const I=new RQ;I.ori.setFromAxisAndAngle(new qU(0,0,1),.5*Math.PI),e.setGeomOffsetXfo(I),this.addChild(e,!1);const Z=this._cleanBoundingBox(this.__boundingBoxParam.getValue());this.__boundingBoxParam.setValue(Z)}_cleanBoundingBox(F){return F.reset(),F}}PU.register("GridTreeItem",lV);const VV=new UQ("#DCDCDC");class dV{constructor(){this.settings=new BV("Scene Settings"),this.root=new dB("root"),this.root.addChild(this.settings)}getSettings(){return this.settings}getRoot(){return this.root}getResourceLoader(){return nB}setEnvMap(F){this.settings.getParameter("EnvMap").setValue(F)}setupGrid(F=5,U=50,Q=VV){const B=new lV(F,U,Q);return this.root.addChild(B,!1),B}toJSON(F={}){F.makeRelative=F=>F;return{root:this.root.toJSON(F)}}fromJSON(F,U={}){const Q=[];U.resolvePath=(F,U)=>{if(!F)throw new Error("Path not specified");const B=this.root.resolvePath(F);B?U(B):Q.push((()=>{const Q=this.resolvePath(F);Q?U(Q):console.warn("Path unable to be resolved:"+F)}))},U.addPLCB=F=>Q.push(F),U.settings=this.settings,F.root&&this.root.fromJSON(F.root,U);for(const F of Q)F()}}class RV extends Kl{constructor(F){super(F),this.__geomLibrary.on("loaded",(()=>{this.emit("geomsLoaded",{})})),this.__fileParam=this.addParameter(new hB("FilePath")),this.addParameterDeprecationMapping("DataFilePath","FilePath"),this.__fileParam.on("valueChanged",(()=>{this.__fileParam.getValue();const F=this.__fileParam.getUrl();this.load(F)}))}readBinary(F,U){U.versions["zea-engine"]||(U.versions["zea-mesh"]=new GB(F.loadStr()));const Q=F.loadUInt32();if(super.readBinary(F,U),U.versions["zea-engine"].compare([2,1,0])<0){F.loadFloat32Vec2()}return this.__geomLibrary.setNumGeoms(F.loadUInt32()),Q}load(F,U=new Nl){return new Promise(((Q,B)=>{const l=F.lastIndexOf("/")>-1?F.substring(0,F.lastIndexOf("/"))+"/":"",V=F.lastIndexOf("/")>-1?F.substring(F.lastIndexOf("/")+1):"",d=V.substring(0,V.lastIndexOf("."));let R=0;U.assetItem=this,U.url=F,U.folder=l,nB.incrementWorkload(1),this.__geomLibrary.on("loaded",(()=>{nB.incrementWorkDone(1)})),nB.loadFile("archive",F).then((F=>{let B;if(F.tree2)B=new mQ(F.tree2.buffer,0,zU.isMobileDevice);else{const Q=F.tree?F.tree:F[Object.keys(F)[0]];B=new mQ(Q.buffer,0,zU.isMobileDevice),U.versions["zea-engine"]=new GB}if(R=this.readBinary(B,U),this.loaded=!0,this.emit("loaded"),0==R&&F.geoms)this.__geomLibrary.readBinaryBuffer(V,F.geoms.buffer,U);else{const F=l+d;this.__geomLibrary.loadGeomFilesStream(F,numGeomFiles,U)}Q()}),(F=>{this.emit("error",F),B(F)}))}))}fromJSON(F,U,Q){U||(U={}),U.assetItem=this;const B=()=>{super.fromJSON(F,U,Q),Q&&Q()};if(F.params&&F.params.DataFilePath){this.__datafileLoaded=B;const Q=F.params.DataFilePath;delete F.params.DataFilePath,this.__fileParam.fromJSON(Q,U)}else B()}}PU.register("VLAAsset",RV);class tV extends Kl{constructor(F){super(F),this.addParameter(new YQ("splitObjects",!1)),this.addParameter(new YQ("splitGroupsIntoObjects",!1)),this.addParameter(new YQ("loadMtlFile",!0)),this.addParameter(new pQ("unitsConversion",1)),this.addParameter(new PQ("defaultShader",""));const U=this.addParameter(new hB("FilePath"));U.on("valueChanged",(()=>{this.loaded=!1;const F=U.getUrl();this.load(F)}))}load(F){return new Promise(((U,Q)=>{const B=F.substring(0,F.lastIndexOf("/"))+"/",l=F.substring(F.lastIndexOf("/")+1),V=F=>{const U=F.split("\n"),Q=/\s+/;let l;const V=function(F){if(3==F.length)return new UQ(parseFloat(F[0]),parseFloat(F[1]),parseFloat(F[2]));throw new Error("Unable to parse a color from the following parts:"+F.join("_"))},d=F=>new FileImage(F[0],B+F[0]);for(let F=0;F<U.length;F++){let B=U[F].trim();if(B.startsWith("#"))continue;B.includes("#")&&(B=B.substring(0,B.indexOf("#")).trim());const R=B.split(Q),t=R.shift(),s=R.join(" ");switch(t){case"newmtl":l=new EB(s),l.setShaderName("StandardSurfaceShader"),this.__materials.addMaterial(l);break;case"Kd":l.getParameter("BaseColor").setValue(V(R));break;case"map_Kd":l.getParameter("BaseColor").setValue(d(R));break;case"Ks":const F=(parseFloat(R[0])+parseFloat(R[1])+parseFloat(R[2]))/3;l.roughness=1-F,l.getParameter("Roughness").setValue(1-F),l.getParameter("Reflectance").setValue(F);break;case"map_Ks":l.getParameter("Roughness").setValue(d(R)),l.getParameter("Reflectance").setValue(.2);break;case"d":const U=parseFloat(s);U<1&&(l.setShaderName("TransparentSurfaceShader"),l.getParameter("Opacity").setValue(U));break;case"map_d":l.getParameter("alpha").setValue(parseFloat(R));break;case"map_bump":l.getParameter("normal").setValue(d(R))}}},d=F=>new Promise((U=>{xQ(F.url,(F=>{nB.incrementWorkDone(1),V(F),nB.incrementWorkDone(1),U()}))})),R=new Array,t=new Array,s=new Array,i={},e=async F=>{const U=F.split("\n"),Q=/\s+/;let V=void 0,e=void 0,I=0;const Z=F=>{if(F in i){let U=1;for(;F+String(U)in i;)U++;F+=String(U)}V={verticesRemapping:{},texCoordsRemapping:{},normalsRemapping:{},vertexIndices:[],texCoordIndices:[],normalIndices:[],numVertices:0,numTexCoords:0,numNormals:0,faceCounts:[],material:e},i[F]=V,I++};Z(l);const c=this.getParameter("splitGroupsIntoObjects").getValue();for(let F=0;F<U.length;F++){let l=U[F].trim();if(l.startsWith("#"))continue;l.includes("#")&&(l=l.substring(0,l.indexOf("#")).trim());const n=l.split(Q),a=n.shift(),S=n.join(" ");switch(a){case"":case"s":continue;case"mtllib":if(!this.getParameter("loadMtlFile").getValue())continue;nB.incrementWorkload(2);const F=nB.resolveFilepath(B+S);F&&await d(F);break;case"o":Z(S);break;case"usemtl":e=S,Z(S+Object.keys(i).length);break;case"g":c&&Z(S?n.join("_"):"Group"+I);break;case"v":R.push(n.map((F=>parseFloat(F))));break;case"vt":s.push(n.map((F=>parseFloat(F))));break;case"vn":t.push(n.map((F=>parseFloat(F))));break;case"f":{const F=[],U=[],Q=[];for(let B=0,l=n.length;B<l;B++){const l=n[B].split("/").map((F=>parseInt(F)-1)),d=l[0];let R=V.verticesRemapping[d];if(null==R&&(R=V.numVertices,V.verticesRemapping[d]=R,V.numVertices++),F.push(R),l.length>1&&!isNaN(l[1])){const F=l[1];U.push(F)}if(l.length>2&&!isNaN(l[2])){const F=l[2];Q.push(F)}}V.vertexIndices.push(F),Q.length>0&&V.normalIndices.push(Q),U.length>0&&V.texCoordIndices.push(U),null==V.faceCounts[F.length-3]&&(V.faceCounts[F.length-3]=[]),V.faceCounts[F.length-3]++;break}default:console.warn("Unhandled line:"+l)}}},I=()=>{for(const F in i)0!=i[F].numVertices&&Z(F,i[F]);this.emit("loaded"),this.getGeometryLibrary().emit("loaded"),this.emit("geomsLoaded"),U()},Z=(F,U)=>{for(let F=0;F<U.faceCounts.length;F++)null==U.faceCounts[F]&&(U.faceCounts[F]=0);const Q=U.numVertices,B=new rB(F);B.setFaceCounts(U.faceCounts),B.setNumVertices(Q);const l=B.getVertexAttribute("positions"),V=this.getParameter("unitsConversion").getValue();for(const F in U.verticesRemapping){const Q=U.verticesRemapping[F];l.getValueRef(Q).set(R[F][0]*V,R[F][1]*V,R[F][2]*V)}let d,i;U.normalIndices.length>0&&(d=B.addVertexAttribute("normals",qU)),U.texCoordIndices.length>0&&(i=B.addVertexAttribute("texCoords",OU));const e=Array(U.faceCounts.length).fill(0);for(let F=0;F<U.vertexIndices.length;F++){const Q=U.vertexIndices[F];let l=0;for(let F=0;F<Q.length-3;++F)U.faceCounts[F]&&(l+=U.faceCounts[F]);if(l+=e[Q.length-3],e[Q.length-3]++,B.setFaceVertexIndices(l,Q),d){const Q=U.normalIndices[F];for(let F=0;F<Q.length;F++){const U=new qU(t[Q[F]][0],t[Q[F]][1],t[Q[F]][2]);d.setFaceVertexValue(l,F,U)}}if(i&&U.texCoordIndices.length==U.vertexIndices.length){const Q=U.texCoordIndices[F];for(let F=0;F<Q.length;F++){const U=new OU(s[Q[F]][0],s[Q[F]][1]);i.setFaceVertexValue(l,F,U)}}}const I=new ul(F,B),Z=B.getBoundingBox().center();{const F=Z.negate(),U=B.getVertexAttribute("positions");for(let Q=0;Q<U.length;Q++)U.getValueRef(Q).addInPlace(F);B.setBoundingBoxDirty()}if(I.getParameter("LocalXfo").setValue(new RQ(Z)),null!=U.material&&this.__materials.hasMaterial(U.material))I.getParameter("Material").setValue(this.__materials.getMaterial(U.material));else{const U=this.getParameter("defaultShader").getValue(),Q=new EB(F+"mat");Q.setShaderName(""!=U?U:"StandardSurfaceShader"),this.__materials.addMaterial(Q),I.getParameter("Material").setValue(Q)}this.addChild(I,!1)};(()=>{nB.incrementWorkload(2),xQ(F,(F=>{nB.incrementWorkDone(1),e(F).then((()=>{I(),nB.incrementWorkDone(1)}))}),(F=>{this.emit("error",F),Q(F)}))})()}))}}class sV extends BB{constructor(F){super(F),this.__input=this.addInput(new UB("Input"))}addRoute(F){const U=this.addOutput(new QB("Output"+this.__outputs.size));return F&&U.setParam(F),U}evaluate(){if(this.__input.isConnected()){const F=this.__input.getValue();let U=this.__outputs.size;for(;U--;){this.getOutputByIndex(U).setClean(F)}}else{let F=this.__outputs.size;for(;F--;){this.getOutputByIndex(F).setClean(0)}}}}PU.register("RouterOperator",sV);class iV extends WQ{constructor(){super(),this.__activated=!1}activateTool(){if(this.__activated)throw new Error("Tool already activate");this.__activated=!0,this.emit("activatedChanged",{activated:this.__activated})}deactivateTool(){this.__activated=!1,this.emit("activatedChanged",{activated:this.__activated})}onPointerDown(F){}onPointerMove(F){}onPointerUp(F){}onPointerDoublePress(F){}onPointerEnter(F){}onPointerLeave(F){}onWheel(F){}onKeyDown(F){}onKeyUp(F){}onTouchStart(F){}onTouchMove(F){}onTouchEnd(F){}onTouchCancel(F){}onDoubleTap(F){}onVRControllerButtonDown(F){}onVRControllerButtonUp(F){}onVRControllerDoubleClicked(F){}onVRPoseChanged(F){}}const eV={OPAQUE:1,TRANSPARENT:2,OVERLAY:4};class IV extends WQ{constructor(){super(),this.enabled=!0,this.passIndex=0;const F=this.addParameter(new YQ("Enabled",!0));F.on("valueChanged",(()=>this.enabled=F.getValue()))}__parameterValueChanged(F){super.__parameterValueChanged(F),this.renderer&&this.renderer.requestRedraw()}init(F,U){if(null==U)throw new Error("Missing constructor argument.");this.__gl=F.gl,this.renderer=F,this.__renderer=F,this.passIndex=U,this.__passIndex=U}setPassIndex(F){this.passIndex=F,this.__passIndex=F}getPassType(){return eV.OPAQUE}itemAddedToScene(F,U){throw Error(this.constructor.name+" must implement itemAddedToScene and itemRemovedFromScene")}itemRemovedFromScene(F,U){throw Error(this.constructor.name+" must implement itemAddedToScene and itemRemovedFromScene")}startPresenting(){}stopPresenting(){}draw(F){}drawHighlightedGeoms(F){}drawGeomData(F){}getGeomItemAndDist(F){}}const ZV={pan:0,dolly:1,focussing:2,look:3,turntable:4,tumbler:5,trackball:6};class cV extends iV{constructor(F){super(),this.appData=F,this.__defaultManipulationState=ZV.turntable,this.__manipulationState=this.__defaultManipulationState,this.__pointerDown=!1,this.__dragging=0,this.aimFocusOnTouchTap=1,this.aimFocusOnMouseClick=2,this.enabledWASDWalkMode=!1,this.__keyboardMovement=!1,this.__keysPressed=[],this.__velocity=new qU,this.__prevVelocityIntegrationTime=-1,this.__ongoingTouches={},this.__orbitRateParam=this.addParameter(new pQ("OrbitRate",zU.isMobileDevice?.5:1)),this.__dollySpeedParam=this.addParameter(new pQ("DollySpeed",.02)),this.addParameter(new YQ("OrbitAroundCursor",!0)),this.__mouseWheelDollySpeedParam=this.addParameter(new pQ("MouseWheelDollySpeed",.1)),this.addParameter(new pQ("WalkSpeed",5)),this.addParameter(new YQ("WalkModeCollisionDetection",!1)),this.addParameterDeprecationMapping("orbitRate","OrbitRate"),this.addParameterDeprecationMapping("dollySpeed","DollySpeed"),this.addParameterDeprecationMapping("mouseWheelDollySpeed","MouseWheelDollySpeed")}activateTool(){super.activateTool(),this.appData&&this.appData.renderer&&(this.prevCursor=this.appData.renderer.getGLCanvas().style.cursor,this.appData.renderer.getGLCanvas().style.cursor="cursor")}deactivateTool(){super.deactivateTool(),this.appData&&this.appData.renderer&&(this.appData.renderer.getGLCanvas().style.cursor=this.appData.renderer.getGLCanvas().style.cursor)}setDefaultManipulationMode(F){if(this.__defaultManipulationState="string"==typeof F?ZV[F]:F,!Object.values(ZV).includes(this.__defaultManipulationState))throw new Error("Invalid Camera Manipulation Mode. Must be one of "+Object.keys(ZV))}look(F,U){const{viewport:Q}=F,B=Q.getCamera(),l=this.__orbitRateParam.getValue(),V=B.getParameter("GlobalXfo").getValue(),d=new VQ;d.rotateZ(U.x/Q.getWidth()*Math.PI*l),V.ori=d.multiply(V.ori);const R=new VQ;R.rotateX(U.y/Q.getHeight()*Math.PI*l),V.ori.multiplyInPlace(R),B.getParameter("GlobalXfo").setValue(V)}turntable(F,U){const{viewport:Q}=F,B=Q.getCamera(),l=this.__orbitRateParam.getValue(),V=B.getParameter("GlobalXfo").getValue(),d=V.ori.inverse().rotateVec3(V.tr.subtract(this.__orbitTarget)),R=new VQ;R.rotateZ(U.x/Q.getWidth()*2*Math.PI*-l),V.ori=R.multiply(V.ori);const t=new VQ;t.rotateX(U.y/Q.getHeight()*Math.PI*-l),V.ori.multiplyInPlace(t),V.tr=this.__orbitTarget.add(V.ori.rotateVec3(d)),B.getParameter("GlobalXfo").setValue(V)}tumbler(F,U){const{viewport:Q}=F,B=Q.getCamera(),l=this.__orbitRateParam.getValue(),V=B.getParameter("GlobalXfo").getValue(),d=V.ori.getXaxis(),R=V.ori.getYaxis(),t=V.ori.getZaxis(),s=d.scale(-U.x).add(R.scale(U.y)).cross(t);s.normalizeInPlace();const i=U.length(),e=V.ori.inverse().rotateVec3(V.tr.subtract(this.__orbitTarget)),I=new VQ;I.setFromAxisAndAngle(s,i/Q.getWidth()*Math.PI*-l),V.ori=I.multiply(V.ori),V.tr=this.__orbitTarget.add(V.ori.rotateVec3(e)),B.getParameter("GlobalXfo").setValue(V)}trackball(F,U){const{viewport:Q}=F,B=Q.getCamera(),l=this.__orbitRateParam.getValue(),V=B.getParameter("GlobalXfo").getValue(),d=V.ori.getXaxis(),R=V.ori.getYaxis(),t=V.ori.getZaxis(),s=d.scale(-U.x).add(R.scale(U.y)).cross(t);s.normalizeInPlace();const i=U.length(),e=V.ori.inverse().rotateVec3(V.tr.subtract(this.__orbitTarget)),I=new VQ;I.setFromAxisAndAngle(s,i/Q.getWidth()*Math.PI*-l),V.ori=I.multiply(V.ori),V.tr=this.__orbitTarget.add(V.ori.rotateVec3(e)),B.getParameter("GlobalXfo").setValue(V)}pan(F,U){const{viewport:Q}=F,B=Q.getCamera(),l=new RQ,V=new qU(1,0,0),d=new qU(0,1,0);if(B.isOrthographic()){const F=B.getFrustumHeight(),R=F*(Q.getWidth()/Q.getHeight());l.tr=V.scale(-U.x/Q.getWidth()*R),l.tr.addInPlace(d.scale(U.y/Q.getHeight()*F))}else{const F=B.getFocalDistance(),R=B.getFov(),t=2*F*Math.tan(.5*R),s=t*(Q.getWidth()/Q.getHeight());l.tr=V.scale(-U.x/Q.getWidth()*s),l.tr.addInPlace(d.scale(U.y/Q.getHeight()*t))}const R=B.getParameter("GlobalXfo").getValue();B.getParameter("GlobalXfo").setValue(R.multiply(l))}dolly(F,U){const{viewport:Q}=F,B=Q.getCamera(),l=B.getFocalDistance(),V=()=>{const F=U.y*this.__dollySpeedParam.getValue()*l,Q=new RQ;Q.tr.set(0,0,F);const V=B.getParameter("GlobalXfo").getValue();B.getParameter("GlobalXfo").setValue(V.multiply(Q))},d=()=>{const F=U.y*this.__dollySpeedParam.getValue(),Q=B.getFrustumHeight(),l=Q*F;B.setFrustumHeight(Q+l)};B.isOrthographic()?d():V()}initDrag(F){const{pointerPos:U}=F;F.setCapture(this),this.__pointerDown=!0;const{viewport:Q}=F,B=Q.getCamera(),l=B.getParameter("GlobalXfo").getValue(),V=this.getParameter("OrbitAroundCursor").getValue();if(null!=F.intersectionData&&V){this.__orbitTarget=F.intersectionData.intersectionPos;const U=l.inverse().transformVec3(F.intersectionData.intersectionPos);B.setFocalDistance(-U.z)}else this.__orbitTarget=l.tr.add(l.ori.getZaxis().scale(-B.getFocalDistance()));this.__prevPointerPos=U,this.__dragging=1}endDrag(F){F.getCapture()==this&&F.releaseCapture(),this.__dragging=0,this.__pointerDown=!1}aimFocus(F,U,Q=-1,B=400){this.__focusIntervalId&&clearInterval(this.__focusIntervalId);const l=Math.round(B/20),V=this.__manipulationState;let d=0;const R=()=>{const B=F.getParameter("GlobalXfo").getValue(),t=F.getFocalDistance(),s=U.subtract(B.tr),i=s.normalizeInPlace(),e=B.clone();if(V==ZV.turntable||V==ZV.look){{const F=B.ori.getZaxis().clone();F.z=0;const U=s.negate();U.z=0;const Q=new VQ;Q.setFrom2Vectors(F,U),e.ori=Q.multiply(e.ori)}{const F=B.ori.getXaxis().clone(),U=B.ori.getZaxis().clone(),Q=s.negate();Q.subtractInPlace(F.scale(Q.dot(F))),Q.normalizeInPlace();const l=new VQ;U.cross(Q).dot(F)>0?l.rotateX(U.angleTo(Q)):l.rotateX(-U.angleTo(Q)),e.ori=e.ori.multiply(l)}{const F=e.ori.getXaxis().clone(),U=F.clone();U.z=0,U.normalizeInPlace();const Q=new VQ;Q.setFrom2Vectors(F,U),e.ori=Q.multiply(e.ori)}}else{const F=B.ori.getZaxis().clone(),U=s.negate(),Q=new VQ;Q.setFrom2Vectors(F,U),e.ori=Q.multiply(e.ori)}const I=Math.pow(d/l,2),Z=B.clone();if(Z.ori=B.ori.lerp(e.ori,I),Q>0){const F=s.scale(i-Q);Z.tr.addInPlace(F.scale(I))}F.setFocalDistance(t+(i-t)*I),F.getParameter("GlobalXfo").setValue(Z),d++,d<=l?this.__focusIntervalId=setTimeout(R,20):(this.__focusIntervalId=void 0,this.emit("movementFinished",{}),F.emit("movementFinished",{}))};R()}orientPointOfView(F,U,Q,B=0,l=400){this.__focusIntervalId&&clearInterval(this.__focusIntervalId);const V=Math.round(l/20);let d=0;const R=()=>{const l=F.getParameter("GlobalXfo").getValue(),t=F.getTargetPosition(),s=Math.pow(d/V,2),i=U.subtract(l.tr),e=i.normalizeInPlace(),I=i.scale(e-B),Z=l.tr.add(I.scale(s)),c=t.lerp(Q,s);F.setPositionAndTarget(Z,c),d++,d<=V?this.__focusIntervalId=setTimeout(R,20):(this.__focusIntervalId=void 0,this.emit("movementFinished"),F.emit("movementFinished"))};R()}onPointerDoublePress(F){if(F.intersectionData&&this.aimFocusOnMouseClick&&(F.pointerType===bQ.mouse&&2==this.aimFocusOnMouseClick||F.pointerType===bQ.touch&&2==this.aimFocusOnTouchTap)){const{viewport:U}=F,Q=U.getCamera(),B=Q.getParameter("GlobalXfo").getValue().tr.add(F.pointerRay.dir.scale(F.intersectionData.dist));this.aimFocus(Q,B),F.aimTarget=B,F.aimDistance=F.intersectionData.dist,this.emit("aimingFocus",F),Q.emit("aimingFocus",F),F.stopPropagation(),F.preventDefault()}}onPointerDown(F){F.pointerType===bQ.mouse?(1==this.__dragging&&this.endDrag(F),this.initDrag(F),2==F.button?this.__manipulationState=ZV.pan:F.ctrlKey&&F.altKey?this.__manipulationState=ZV.dolly:F.ctrlKey||2==F.button?this.__manipulationState=ZV.look:this.__manipulationState=this.__defaultManipulationState):F.pointerType===bQ.touch&&this._onTouchStart(F),F.stopPropagation(),F.preventDefault()}onPointerMove(F){0!=this.__dragging&&(F.pointerType===bQ.mouse&&this._onMouseMove(F),F.pointerType===bQ.touch&&this._onTouchMove(F),this.__dragging=2,F.stopPropagation(),F.preventDefault())}_onMouseMove(F){if(!this.__pointerDown)return;const U=F.pointerPos,Q=U.subtract(this.__prevPointerPos);switch(this.__manipulationState){case ZV.turntable:this.turntable(F,Q);break;case ZV.tumbler:this.tumbler(F,Q);break;case ZV.trackball:this.trackball(F,Q);break;case ZV.look:this.look(F,Q);break;case ZV.pan:this.pan(F,U.subtract(this.__prevPointerPos));break;case ZV.dolly:this.dolly(F,Q)}this.__prevPointerPos=U}_onTouchMove(F){const U=F.touches;if(1==U.length){const Q=U[0],B=new OU(Q.clientX,Q.clientY),l=this.__ongoingTouches[Q.identifier];if(!l)return;const V=B.subtract(l.pos);switch(this.__defaultManipulationState){case ZV.look:V.scaleInPlace(6),this.look(F,V);break;case ZV.turntable:this.turntable(F,V);break;case ZV.tumbler:this.tumbler(F,V);break;case ZV.trackball:this.trackball(F,V)}l.pos=B}else if(2==U.length){const Q=U[0],B=this.__ongoingTouches[Q.identifier],l=U[1],V=this.__ongoingTouches[l.identifier];if(!B||!V)return;const d=new OU(Q.clientX,Q.clientY),R=new OU(l.clientX,l.clientY),t=V.pos.subtract(B.pos).length()-R.subtract(d).length(),s=d.subtract(B.pos),i=R.subtract(V.pos),e=s.add(i);e.scaleInPlace(.5);const I=.002*t,{viewport:Z}=F,c=Z.getCamera(),n=c.getFocalDistance(),a=c.getFov(),S=new qU(1,0,0),g=new qU(0,1,0),b=2*n*Math.tan(.5*a),G=b*(Z.getWidth()/Z.getHeight()),C=new RQ;C.tr=S.scale(-e.x/Z.getWidth()*G),C.tr.addInPlace(g.scale(e.y/Z.getHeight()*b));const h=I*n;switch(c.setFocalDistance(n+h),C.tr.z+=h,this.__defaultManipulationState){case ZV.tumbler:case ZV.trackball:const F=V.pos.subtract(B.pos),U=R.subtract(d);let Q=F.normalize().angleTo(U.normalize());F.cross(U)<0&&(Q=-Q);const l=new VQ;l.rotateZ(Q),C.ori.multiplyInPlace(l)}const W=c.getParameter("GlobalXfo").getValue();c.getParameter("GlobalXfo").setValue(W.multiply(C)),B.pos=d,V.pos=R}}onPointerUp(F){if(1==this.__dragging){if(this.endDrag(F),F.intersectionData&&(F.pointerType===bQ.mouse&&1==this.aimFocusOnMouseClick||F.pointerType===bQ.touch&&1==this.aimFocusOnTouchTap)){const{viewport:U}=F,Q=U.getCamera(),B=Q.getParameter("GlobalXfo").getValue().tr.add(F.pointerRay.dir.scale(F.intersectionData.dist));this.aimFocus(Q,B),F.aimTarget=B,F.aimDistance=F.intersectionData.dist,this.emit("aimingFocus",F),Q.emit("aimingFocus",F),F.stopPropagation(),F.preventDefault()}}else if(2==this.__dragging){if(F.pointerType===bQ.mouse)this.endDrag(F),this.emit("movementFinished",{}),F.viewport.getCamera().emit("movementFinished",{});else if(F.pointerType===bQ.touch){F.preventDefault();const{changedTouches:U,touches:Q}=F;for(let F=0;F<U.length;F++)this.__endTouch(U[F]);0==Object.keys(this.__ongoingTouches).length?this.endDrag(F):Q.length||(this.endDrag(F),this.__ongoingTouches={})}F.stopPropagation(),F.preventDefault()}}onPointerEnter(F){}onPointerLeave(F){this.__keysPressed.length>0&&(this.__keysPressed=[],this.__velocity.set(0,0,0),this.__keyboardMovement=!1)}onWheel(F){const{viewport:U}=F,Q=U.getCamera(),B=this.__mouseWheelDollySpeedParam.getValue(),l=F.shiftKey?.1:.5,V=Q.getParameter("GlobalXfo").getValue();let d;if(!Q.isOrthographic())if(null!=F.intersectionData){d=V.tr.subtract(F.intersectionData.intersectionPos),d.normalizeInPlace();const U=V.inverse().transformVec3(F.intersectionData.intersectionPos);Q.setFocalDistance(-U.z)}else d=V.ori.getZaxis();const R=F.deltaY<0||F.wheelDelta>0||F.deltaY<0?-1:1,t=()=>{const F=Q.getFocalDistance(),U=F*this.__mouseWheelMovementDist;V.tr.addInPlace(d.scale(U)),Q.setFocalDistance(F+U),Q.getParameter("GlobalXfo").setValue(V),this.__mouseWheelZoomCount++,this.__mouseWheelZoomCount<6?this.__mouseWheelZoomId=setTimeout(t,10):(this.__mouseWheelZoomId=void 0,this.emit("movementFinished",{}),Q.emit("movementFinished",{event:"onWheel"}))},s=()=>{const U=Q.getFrustumHeight(),B=U*this.__mouseWheelMovementDist;if(Q.setFrustumHeight(U+B),F.intersectionData){const l=V.tr.subtract(F.intersectionData.intersectionPos),d=V.ori.getZaxis();l.subtractInPlace(d.scale(l.dot(d))),V.tr.addInPlace(l.scale(B/(U+B))),Q.getParameter("GlobalXfo").setValue(V)}this.__mouseWheelZoomCount++,this.__mouseWheelZoomCount<6?this.__mouseWheelZoomId=setTimeout(s,10):(this.__mouseWheelZoomId=void 0,this.emit("movementFinished",{}),Q.emit("movementFinished",{event:"onWheel"}))};this.__mouseWheelZoomId?(this.__mouseWheelMovementDist+=R*B*l*.5/6,this.__mouseWheelZoomCount=0):(this.__mouseWheelMovementDist=R*B*l/6,this.__mouseWheelZoomCount=0,Q.isOrthographic()?s():t()),F.preventDefault(),F.stopPropagation()}integrateVelocityChange(F){const{viewport:U}=F,Q=U.getCamera(),B=performance.now();if(this.__prevVelocityIntegrationTime>0){const F=(B-this.__prevVelocityIntegrationTime)/1e3,l=this.getParameter("WalkSpeed").getValue();if(l>0){const B=new RQ;B.tr=this.__velocity.normalize().scale(l*F);const V=Q.getParameter("GlobalXfo").getValue().multiply(B);if(this.getParameter("WalkModeCollisionDetection").getValue()){const F=1.5,Q=1.5,B=.5,l=new RQ(V.tr),d=new dQ(V.tr,new qU(0,0,-1)),R=U.getRenderer().raycastCluster(l,d,Q,B,eV.OPAQUE);if(R.length>0){let U=0;R.forEach((F=>{U+=F.dist})),U/=R.length,V.tr=d.start.add(d.dir.scale(U-F))}}Q.getParameter("GlobalXfo").setValue(V)}}this.__prevVelocityIntegrationTime=B}onKeyDown(F){if(!this.enabledWASDWalkMode)return;const U=F.key.toLowerCase();if(!this.__keysPressed.includes(U)){switch(U){case"w":this.__velocity.z-=1;break;case"s":this.__velocity.z+=1;break;case"a":this.__velocity.x-=1;break;case"d":this.__velocity.x+=1;break;default:return}if(F.stopPropagation(),this.__keysPressed.push(U),!this.__keyboardMovement){this.__keyboardMovement=!0,this.__prevVelocityIntegrationTime=performance.now();const U=()=>{this.integrateVelocityChange(F),this.__keyboardMovement&&window.requestAnimationFrame(U)};window.requestAnimationFrame(U)}}}onKeyUp(F){const U=F.key.toLowerCase();if(!this.__keysPressed.includes(U))return;switch(U){case"w":this.__velocity.z+=1;break;case"s":this.__velocity.z-=1;break;case"a":this.__velocity.x+=1;break;case"d":this.__velocity.x-=1;break;default:return}F.stopPropagation();const Q=this.__keysPressed.indexOf(U);this.__keysPressed.splice(Q,1),0==this.__keysPressed.length&&(this.__keyboardMovement=!1)}__startTouch(F){this.__ongoingTouches[F.identifier]={identifier:F.identifier,pos:new OU(F.clientX,F.clientY)}}__endTouch(F){delete this.__ongoingTouches[F.identifier]}_onTouchStart(F){const U=F.changedTouches;for(let F=0;F<U.length;F++)this.__startTouch(U[F]);this.initDrag(F)}onTouchEnd(F){F.preventDefault(),F.stopPropagation();const U=F.changedTouches;for(let F=0;F<U.length;F++)this.__endTouch(U[F]);0==Object.keys(this.__ongoingTouches).length&&this.endDrag(F)}onTouchCancel(F){F.preventDefault();const U=F.touches;for(let F=0;F<U.length;F++)this.__endTouch(U[F]);0==Object.keys(this.__ongoingTouches).length&&this.endDrag(F)}static get MANIPULATION_MODES(){return ZV}}const nV={registerClass:(F,U)=>{console.warn("'sgFactory' is deprecated, Please use 'Registry.register'"),PU.register(F,U)},constructClass:(F,...U)=>{console.warn("'sgFactory' is deprecated, Please use 'Registry.constructClass'"),PU.constructClass(F,...U)}};var aV=Object.freeze({__proto__:null,RefCounted:hQ,ParameterOwner:WQ,BaseItem:XQ,getFileFolder:EQ,loadTextfile:xQ,loadJSONfile:oQ,loadXMLfile:yQ,loadBinfile:uQ,resourceLoader:nB,Version:GB,BinReader:mQ,BinWriter:CB,OperatorOutputMode:NQ,Parameter:rQ,MultiChoiceParameter:TQ,BooleanParameter:YQ,NumberParameter:pQ,Vec2Parameter:kQ,Vec3Parameter:HQ,Vec4Parameter:MQ,ColorParameter:AQ,QuatParameter:vQ,Mat3Parameter:zQ,Mat4Parameter:DQ,XfoParameter:KQ,ImageParameter:wQ,StringListParameter:fQ,StringParameter:PQ,CodeParameter:jQ,ListParameter:_Q,StructParameter:OQ,TreeItemParameter:qQ,ItemSetParameter:$Q,GeometryParameter:FB,FilePathParameter:hB,MaterialParameter:LB,MaterialFloatParam:mB,MaterialColorParam:JB,Attribute:xB,BaseGeom:yB,VertexAttribute:oB,Points:uB,Lines:NB,Mesh:rB,BaseProxy:pB,PointsProxy:TB,LinesProxy:YB,MeshProxy:kB,ProceduralPoints:HB,ProceduralLines:MB,ProceduralMesh:AB,PointGrid:vB,Rect:zB,Circle:DB,Cross:KB,LinesCuboid:wB,Grid:fB,Cone:PB,Cuboid:jB,Cylinder:_B,Disc:OB,Plane:qB,Sphere:$B,Torus:Fl,DataImage:Ul,FileImage:Bl,FileImage2D:ll,LDRImage:Vl,LDRVideo:dl,GIFImage:hl,EnvMap:ml,Label:Xl,VideoStreamImage2D:El,labelManager:Jl,TreeItem:dB,InstanceItem:Ll,BaseGeomItem:xl,GeomItem:ul,AssetLoadContext:Nl,AssetItem:Kl,BillboardItem:wl,Camera:fl,BaseGroup:rl,Group:Ol,SelectionSet:pl,KinematicGroup:$l,MaterialGroup:FV,CuttingPlane:QV,GeomLibrary:vl,Material:EB,BaseImage:WB,MaterialLibrary:zl,Scene:dV,GridTreeItem:lV,VLAAsset:RV,ObjAsset:tV,Operator:BB,OperatorInput:UB,OperatorOutput:QB,RouterOperator:sV,BaseTool:iV,CameraManipulator:cV,sgFactory:nV});const SV=function(F,U){let Q=null;if(null!=U.webglContextType)try{Q=F.getContext(U.webglContextType,U),Q.name=U.webglContextType}catch(F){}else{["webgl2","webgl"].some((B=>{try{Q=F.getContext(B,U),Q.name=B}catch(F){}if(Q)return!0}))}if(Q)return Q.sizeInBytes=function(F){switch(F){case this.BYTE:case this.UNSIGNED_BYTE:return 1;case this.SHORT:case this.UNSIGNED_SHORT:return 2;case this.INT:case this.UNSIGNED_INT:case this.FLOAT:return 4;default:throw new Error("unknown type")}},"webgl2"==Q.name?(Q.floatTexturesSupported=!0,Q.__ext_float_linear=Q.getExtension("OES_texture_float_linear"),Q.__ext_texture_half_float_linear=Q.getExtension("OES_texture_half_float_linear"),Q.__ext_color_buffer_float=Q.getExtension("EXT_color_buffer_float")):(Q.__ext_float=Q.getExtension("OES_texture_float"),Q.__ext_float?(Q.floatTexturesSupported=!0,Q.__ext_float_linear=Q.getExtension("OES_texture_float_linear")):console.warn("OES_texture_float is not available"),Q.__ext_half_float=Q.getExtension("OES_texture_half_float"),Q.__ext_half_float&&(Q.HALF_FLOAT=Q.__ext_half_float.HALF_FLOAT_OES,Q.floatTexturesSupported=!0,Q.__ext_texture_half_float_linear=Q.getExtension("OES_texture_half_float_linear")),Q.__ext_color_buffer_float=Q.getExtension("EXT_color_buffer_float"),Q.__ext_std_derivatives=Q.getExtension("OES_standard_derivatives"),Q.__ext_Inst=Q.getExtension("ANGLE_instanced_arrays"),Q.__ext_Inst&&(Q.vertexAttribDivisor=Q.__ext_Inst.vertexAttribDivisorANGLE.bind(Q.__ext_Inst),Q.drawArraysInstanced=Q.__ext_Inst.drawArraysInstancedANGLE.bind(Q.__ext_Inst),Q.drawElementsInstanced=Q.__ext_Inst.drawElementsInstancedANGLE.bind(Q.__ext_Inst)),Q.__ext_VAO=Q.getExtension("OES_vertex_array_object"),Q.__ext_VAO&&(Q.createVertexArray=Q.__ext_VAO.createVertexArrayOES.bind(Q.__ext_VAO),Q.deleteVertexArray=Q.__ext_VAO.deleteVertexArrayOES.bind(Q.__ext_VAO),Q.bindVertexArray=Q.__ext_VAO.bindVertexArrayOES.bind(Q.__ext_VAO)),Q.__ext_element_index_uint=Q.getExtension("OES_element_index_uint"),Q.__ext_WEBGL_depth_texture=Q.getExtension("WEBGL_depth_texture"),Q.__ext_WEBGL_depth_texture&&(Q.UNSIGNED_INT_24_8=Q.__ext_WEBGL_depth_texture.UNSIGNED_INT_24_8_WEBGL),Q.DRAW_FRAMEBUFFER=Q.FRAMEBUFFER),Q.__ext_frag_depth=Q.getExtension("EXT_frag_depth"),Q.setupInstancedQuad=function(){const F=new Float32Array([0,1,2,3]),U=new Uint16Array([0,1,2,2,1,3]);this.__quadVertexIdsBuffer=this.createBuffer(),this.bindBuffer(this.ARRAY_BUFFER,this.__quadVertexIdsBuffer),this.bufferData(this.ARRAY_BUFFER,F,this.STATIC_DRAW),this.__quadIndexBuffer=this.createBuffer(),this.bindBuffer(this.ELEMENT_ARRAY_BUFFER,this.__quadIndexBuffer),this.bufferData(this.ELEMENT_ARRAY_BUFFER,U,this.STATIC_DRAW),this.__quadattrbuffers={vertexIDs:{buffer:this.__quadVertexIdsBuffer,dataType:6,dimension:1,count:F.length,shared:!0}}},Q.drawQuad=function(){this.drawElements(this.TRIANGLES,6,this.UNSIGNED_SHORT,0)},Q.setupLineSegAttrBuffers=function(){const F=new Float32Array([0,1]),U=Q.createBuffer();Q.bindBuffer(Q.ARRAY_BUFFER,U),Q.bufferData(Q.ARRAY_BUFFER,F,Q.STATIC_DRAW),Q.__linesegattrbuffers={vertexIDs:{buffer:U,dimension:1,count:F.length,shared:!0}}},Q},gV=function(F,U){if(!U.width||!U.height){if(!U.width)throw new Error("Invalid texture params. 'width' not provided");if(!U.height)throw new Error("Invalid texture params. 'height' not provided")}const Q=F.getParameter(F.MAX_TEXTURE_SIZE);if(U.width<=0||U.width>Q||U.height<=0||U.height>Q)throw new Error("GLTextureParams: Invalid texture size. width:"+U.width+" height:"+U.height+" maxSize:"+Q);const B={width:U.width,height:U.height},l=U=>isNaN(U)?F[U]:U,V=(F,Q)=>{F in U?B[F]=l(U[F]):Q&&(B[F]=l(Q))};if(V("format"),V("internalFormat",B.format),V("type",F.UNSIGNED_BYTE),V("minFilter",U.filter?U.filter:F.LINEAR),V("magFilter",U.filter?U.filter:F.LINEAR),V("wrapS",U.wrap?U.wrap:F.CLAMP_TO_EDGE),V("wrapT",U.wrap?U.wrap:F.CLAMP_TO_EDGE),V("flipY",!1),V("mipMapped",!1),V("depthInternalFormat"),V("depthFormat"),V("depthType"),B.format==F.FLOAT)if("webgl2"==F.name)B.filter!=F.LINEAR||F.__ext_float_linear||(console.warn("Floating point texture filtering not supported on result device"),B.filter=F.NEAREST);else if(F.__ext_float)B.filter!=F.LINEAR||F.__ext_float_linear||(console.warn("Floating point texture filtering not supported on result device"),B.filter=F.NEAREST);else{if(!F.__ext_half_float)throw new Error("OES_texture_half_float is not available");B.format=F.HALF_FLOAT,B.filter!=F.LINEAR||F.__ext_texture_half_float_linear||(console.warn("Half Float texture filtering not supported on result device"),B.filter=F.NEAREST)}else if(B.format==F.HALF_FLOAT)if("webgl2"==F.name);else{if(!F.__ext_half_float)throw new Error("OES_texture_half_float is not available");if(B.filter!=F.LINEAR||F.__ext_texture_half_float_linear||(console.warn("Half Float texture filtering not supported on result device"),B.filter=F.NEAREST),B.channels==F.RGB)throw new Error("OES_texture_half_float onlysupports RGBA textures")}else if("sRGB"==B.format&&!F.__ext_sRGB)throw new Error("EXT_sRGB is not available");return null!=B.format&&"webgl2"==F.name&&B.internalFormat==B.format&&(B.type==F.FLOAT?B.format==F.RED?B.internalFormat=F.R32F:B.format==F.RG?B.internalFormat=F.RG32F:B.format==F.RGB?B.internalFormat=F.RGB32F:B.format==F.RGBA&&(B.internalFormat=F.RGBA32F):B.type==F.HALF_FLOAT?B.format==F.RED?B.internalFormat=F.R16F:B.format==F.RGB?B.internalFormat=F.RGB16F:B.format==F.RGBA&&(B.internalFormat=F.RGBA16F):B.type==F.UNSIGNED_BYTE&&(B.format==F.RED&&(B.internalFormat=F.R8),B.format==F.RGB?B.internalFormat=F.RGB8:B.format==F.RGBA&&(B.internalFormat=F.RGBA8))),null!=B.depthFormat&&("webgl2"==F.name?B.depthType==F.UNSIGNED_SHORT?B.depthInternalFormat=F.DEPTH_COMPONENT16:B.depthType==F.UNSIGNED_INT&&(B.depthInternalFormat=F.UNSIGNED_INT):B.depthInternalFormat=B.depthFormat),B};class bV extends hQ{constructor(F,U){if(super(),this.__gl=F,this.ready=!1,this.width=0,this.height=0,this.textureType=1,this.textureDesc=[0,0,0,0],this.__loaded=!1,this.__bound=!1,null!=U)if(U instanceof WB){this.__image=U,this.__image.setMetadata("gltexture",this);const F=()=>{const F=this.__image.getParams(),U=F.width,Q=F.height,B=F.data;this.bufferData(B,U,Q)};this.__image.on("updated",F),this.__image.isLoaded()?this.configure(this.__image.getParams()):this.__image.on("loaded",(()=>{this.configure(this.__image.getParams())}))}else this.configure(U)}isLoaded(){return this.__loaded}getImage(){return this.__image}getInternalFormat(){return this.__internalFormat}getType(){return this.__type}getFormat(){return this.__format}getWrap(){return this.__wrapParam}getMipMapped(){return this.__mipMapped}configure(F,U=!0){const Q=this.__gl,B=gV(Q,F);this.params=B,this.__format=B.format,this.__internalFormat=B.internalFormat,this.__type=B.type,this.__minFilter=B.minFilter,this.__magFilter=B.magFilter,this.__wrapS=B.wrapS,this.__wrapT=B.wrapT,this.__flipY="flipY"in F&&F.flipY,this.__mipMapped="mipMapped"in F&&F.mipMapped,this.invert="invert"in F&&F.invert,this.alphaFromLuminance="alphaFromLuminance"in F&&F.alphaFromLuminance,this.textureType=1,this.textureDesc[0]=this.width,this.textureDesc[1]=this.height,1==this.textureType&&this.__format==Q.RGBA&&(this.textureType=2),this.__gltex&&Q.deleteTexture(this.__gltex),this.__gltex=Q.createTexture(),this.__updateGLTexParams();const l=B.width,V=B.height,d=F.data;d?this.bufferData(d,l,V,!1,!1):this.resize(l,V,!1,!1),this.__loaded||(this.emit("ready",{}),this.__loaded=!0)}__updateGLTexParams(){const F=this.__gl;F.bindTexture(F.TEXTURE_2D,this.__gltex),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MAG_FILTER,this.__minFilter),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MIN_FILTER,this.__magFilter),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_S,this.__wrapS),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_T,this.__wrapT)}bufferData(F,U=-1,Q=-1,B=!0,l=!0){const V=this.__gl;if(B&&V.bindTexture(V.TEXTURE_2D,this.__gltex),null!=F){if(F instanceof Image||F instanceof ImageData||F instanceof HTMLCanvasElement||F instanceof HTMLImageElement||F instanceof HTMLVideoElement)V.texImage2D(V.TEXTURE_2D,0,this.__internalFormat,this.__format,this.__type,F),this.width=F.width,this.height=F.height;else{-1==U&&(U=this.width),-1==Q&&(Q=this.height);const B=U*Q;let l;switch(this.__format){case V.RED:case V.RED_INTEGER:case V.ALPHA:case V.LUMINANCE:case V.LUMINANCE_ALPHA:l=1;break;case V.RG:l=2,V.pixelStorei(V.UNPACK_ALIGNMENT,2);break;case V.RGB:l=3;break;case V.RGBA:l=4}F.length!=B*l&&console.warn("Invalid data for Image width:"+U+" height:"+Q+" format:"+this.__formatParam+" type:"+this.__typeParam+" Data Length:"+F.length+" Expected:"+B*l),this.__type==V.HALF_FLOAT&&F instanceof Float32Array&&(F=DU.convertFloat32ArrayToUInt16Array(F)),"webgl2"==V.name?V.texImage2D(V.TEXTURE_2D,0,this.__internalFormat,U,Q,0,this.__format,this.__type,F,0):V.texImage2D(V.TEXTURE_2D,0,this.__internalFormat,U,Q,0,this.__format,this.__type,F),this.width=U,this.height=Q}this.__mipMapped&&V.generateMipmap(V.TEXTURE_2D)}else V.texImage2D(V.TEXTURE_2D,0,this.__internalFormat,this.width,this.height,0,this.__format,this.__type,null),this.width=U,this.height=Q;l&&this.emit("updated",{})}clear(){const F=this.__gl,U=this.width*this.height;let Q,B;switch(this.__format){case F.RED:case F.RED_INTEGER:case F.ALPHA:case F.LUMINANCE:case F.LUMINANCE_ALPHA:Q=1;break;case F.RG:Q=2;break;case F.RGB:Q=3;break;case F.RGBA:Q=4;break;default:throw new Error("Invalid Format")}switch(this.__type){case F.UNSIGNED_BYTE:B=new UInt8Array(U*Q);break;case F.HALF_FLOAT:B=new UInt16Array(U*Q);break;case F.FLOAT:B=new Float32Array(U*Q);break;default:throw new Error("Invalid Type")}"webgl2"==F.name?F.texImage2D(F.TEXTURE_2D,0,this.__internalFormat,this.width,this.height,0,this.__format,this.__type,B,0):F.texImage2D(F.TEXTURE_2D,0,this.__internalFormat,this.width,this.height,0,this.__format,this.__type,B)}resize(F,U,Q=!1,B=!0){const l=this.__gl;if(this.width!=F||this.height!=U){const V=l.getParameter(l.MAX_TEXTURE_SIZE);if(F<0||F>V||U<0||U>V)throw new Error("gl-texture2d: Invalid texture size. width:"+F+" height:"+U+" maxSize:"+V);if(Q){const Q=l.createTexture();l.bindTexture(l.TEXTURE_2D,Q),l.texImage2D(l.TEXTURE_2D,0,this.__internalFormat,F,U,0,this.__format,this.__type,null);const B=l.createFramebuffer();l.bindFramebuffer(l.FRAMEBUFFER,B),l.framebufferTexture2D(l.FRAMEBUFFER,l.COLOR_ATTACHMENT0,l.TEXTURE_2D,this.__gltex,0),l.bindTexture(l.TEXTURE_2D,Q),l.copyTexImage2D(l.TEXTURE_2D,0,this.__internalFormat,0,0,this.width,this.height,0),l.bindFramebuffer(l.FRAMEBUFFER,null),l.deleteFramebuffer(B),this.__gl.deleteTexture(this.__gltex),this.__gltex=Q,this.__updateGLTexParams()}else this.width>0&&this.height,l.bindTexture(l.TEXTURE_2D,this.__gltex),l.texImage2D(l.TEXTURE_2D,0,this.__internalFormat,F,U,0,this.__format,this.__type,null);this.width=F,this.height=U,B&&this.emit("resized",{width:F,height:U})}}populate(F,U,Q,B=0,l=0,V=!0){const d=this.__gl;V&&d.bindTexture(d.TEXTURE_2D,this.__gltex),d.texSubImage2D(d.TEXTURE_2D,0,B,l,U,Q,this.__format,this.__type,F)}getSize(){return[this.width,this.height]}get glTex(){return this.__gltex}getTexHdl(){return this.__gltex}bind(F,U){return console.warn("'bind' is deprecated. Please use 'bindToUniform'"),this.bindToUniform(F,U)}preBind(F,U){return{textureTypeUnif:U[F.name+"Type"],textureDescUnif:U[F.name+"Desc"]}}bindToUniform(F,U,Q){if(!this.__loaded)return!1;if(!this.__gltex)throw new Error("Unable to bind non-initialized or deleted texture.");const B=F.boundTextures++,l=this.__gl;return l.activeTexture(l.TEXTURE0+B),l.bindTexture(l.TEXTURE_2D,this.__gltex),l.uniform1i(U.location,B),Q&&(Q.textureTypeUnif&&l.uniform1i(Q.textureTypeUnif.location,this.textureType),Q.textureDescUnif&&l.uniform4fv(Q.textureDescUnif.location,this.textureDesc)),!0}destroy(){super.destroy(),this.__image&&this.__image.setMetadata("gltexture",void 0),this.__gl.deleteTexture(this.__gltex),this.__gltex=void 0}}const GV={bool:Boolean,int:5,uint:4,float:6,ivec2:OU,ivec3:qU,ivec4:$U,vec2:OU,vec3:qU,vec4:$U,color:UQ,mat3:BQ,mat4:lQ,sampler2D:WB,samplerCube:WB},CV=/\s+/;const hV=new class{constructor(){this.__shaderModules={}}setShaderModule(F,U){F in this.__shaderModules||(this.__shaderModules[F]=U)}getShaderModule(F){return this.__shaderModules[F]}getShaderModuleNames(){const F=[];for(const U in this.__shaderModules)F.push(U);return F}parseAttr(F,U,Q){if(!(F[1]in GV))throw new Error("Error while parsing :"+shaderName+" \nType not recognized:"+F[1]);const B=F[2].slice(0,F[2].length-1);Q.attributes[B]={type:GV[F[1]],instanced:U},"color"==F[1]&&(F[1]="vec4",line=F.join(" "))}handleImport(F,U,Q,B,l){if(Q in this.__shaderModules){const V=this.__shaderModules[Q];if(!V)throw error("snippet not loaded or does not exists!");const d=this.parseShaderHelper(U,V,B,l);B.push(Q),F.glsl=F.glsl+d.glsl,F.numLines+=d.numLines,F.uniforms={...F.uniforms,...d.uniforms},F.attributes={...F.attributes,...d.attributes}}else console.log("shaderName: "+U),console.log("SNIPPET NOT FOUND: "+Q)}parseShader(F,U){return this.parseShaderHelper(F,U,[],0)}parseShaderHelper(F,U,Q,B){const l=(F,U)=>{F.glsl=F.glsl+U+"\n",F.numLines++};Q.push(F);const V={glsl:"",numLines:0,uniforms:{},attributes:{}},d=(U=U.toString()).split("\n");for(let U=0;U<d.length;U++){let R=d[U];const t=R.trim(),s=t.split(CV);switch(s[0]){case"<%include":case"import":{const U=t.split(/'|"|`/)[1].split("/").pop();Q.includes(U)||this.handleImport(V,F,U,Q,B);break}case"attribute":this.parseAttr(s,!1,V),l(V,R);break;case"instancedattribute":this.parseAttr(s,!0,V),s[0]="attribute",R=s.join(" "),l(V,R);break;case"uniform":{let U=1;4==s.length&&(U=2);const Q=s[U];if(!(Q in GV))throw new Error("Error while parsing :"+F+" \nType not recognized:"+s[1]);const B=s[U+1].slice(0,s[U+1].length-1);B.includes("[")?V.uniforms[B.substring(0,B.indexOf("["))]=GV[Q]:V.uniforms[B]=GV[Q],"struct"==V.uniforms[B]&&console.log(s),"color"==s[1]&&(s[1]="vec4",R=s.join(" ")),l(V,R);break}case"struct":{let F="";if(t.includes("}"))F=t.substring(t.indexOf("{")+1,t.indexOf("}")-1);else for(U++;R+=d[U]+"\n",F+=R.trim(),U++,!F.includes("}"););const Q=F.substring(F.indexOf("{")+1,F.indexOf("}")-1).split(";"),B=[];for(const F of Q){if(0==F.length)continue;const U=F.trim().split(CV);B.push({name:U[1],type:GV[U[0]]})}GV[s[1]]=B,l(V,R);break}default:l(V,R)}}return V}};let WV=0;class mV extends XQ{constructor(F,U){if(super(U),!F)throw new Error("gl context must be passed to shader constructor");this.__gl=F,this.__shaderStagesGLSL={},this.__shaderStages={},this.__shaderProgramHdls={},this.__gltextures={},this.__id=WV++}setShaderStage(F,U){this.__shaderStagesGLSL[F]=U,this.clearProgramsCache()}getShaderStage(F){return this.__shaderStagesGLSL[F]}clearProgramsCache(){const F=this.__gl;for(const U in this.__shaderProgramHdls){const Q=this.__shaderProgramHdls[U];for(const U in Q.shaderHdls)F.deleteShader(Q.shaderHdls[U]);F.deleteProgram(Q.shaderProgramHdl)}}static isTransparent(){return!1}static isOverlay(){return!1}__compileShaderStage(F,U,Q,B){const l=this.__gl;if(B||(B=l.shaderopts),B){if(B.repl)for(const U in B.repl)F=jU.replaceAll(F,U,B.repl[U]);if(B.directives){F=B.directives.join("\n")+"\n"+F}}let V;"webgl2"==l.name&&(F=jU.replaceAll(F,"attribute","in"),F="vertexShader"==Q?jU.replaceAll(F,"varying","out"):jU.replaceAll(F,"varying","in"),V="#version 300 es\n",F="#version 300 es\n"+(F=jU.replaceAll(F,"texture2D","texture")));const d=l.createShader(U);if(l.shaderSource(d,F),l.compileShader(d),!l.getShaderParameter(d,l.COMPILE_STATUS)){console.log("Errors in :"+this.constructor.name);const U=l.getShaderInfoLog(d).split("\n"),B={};for(let F in U){if(U[F].startsWith("'")){U[F-1]=U[F-1]+U[F],delete U[F],F--;continue}const Q=U[F].split(":");if(Q.length>=2){const l=parseInt(Q[2]);isNaN(l)||(B[l]?B[l].push(U[F]):B[l]=[U[F]])}}const V=[],R=F.split("\n");for(const F in B){const U=Number.parseInt(F)-1;for(let F=Math.max(0,U-4);F<U;F++)V.push((U+1+" ").padStart(" ",3)+R[F]);V.push((U+1+">").padStart(" ",3)+R[U]);for(let F=U+1;F<Math.min(R.length-1,U+5);F++)V.push((U+1+" ").padStart(" ",3)+R[F]);const Q=B[F];for(const F of Q)V.push(F)}throw new Error("An error occurred compiling the shader \n=================\n"+this.constructor.name+"."+Q+": \n\n"+V.join("\n"))}return d}__createProgram(F){const U=this.__gl;this.__shaderCompilationAttempted=!0;const Q=U.createProgram(),B={};this.__shaderStages.VERTEX_SHADER||(this.__shaderStages.VERTEX_SHADER=hV.parseShader("VERTEX_SHADER",this.__shaderStagesGLSL.VERTEX_SHADER));const l=this.__shaderStages.VERTEX_SHADER.glsl;if(null!=l){const V=this.__compileShaderStage(l,U.VERTEX_SHADER,"vertexShader",F);if(!V)return!1;U.attachShader(Q,V),B[U.VERTEX_SHADER]=V}this.__shaderStages.FRAGMENT_SHADER||(this.__shaderStages.FRAGMENT_SHADER=hV.parseShader("FRAGMENT_SHADER",this.__shaderStagesGLSL.FRAGMENT_SHADER));const V=this.__shaderStages.FRAGMENT_SHADER.glsl;if(null!=V){const l=Object.assign({},U.shaderopts,F);l.frag&&(l.defines=l.frag.defines+l.defines);const d=this.__compileShaderStage(V,U.FRAGMENT_SHADER,"fragmentShader",l);if(!d)return!1;U.attachShader(Q,d),B[U.FRAGMENT_SHADER]=d}if(U.linkProgram(Q),!U.getProgramParameter(Q,U.LINK_STATUS)){const F=U.getProgramInfoLog(Q);if(F.includes("D3D shader compilation failed")){const F=U.getExtension("WEBGL_debug_shaders");if(F){const Q=F.getTranslatedShaderSource(B[U.VERTEX_SHADER]);console.log(Q)}}throw console.log("vertexShaderGLSL:"+l),console.log("fragmentShaderGLSL:"+V),new Error("Unable to link the shader program:"+this.constructor.name+"\n==================\n"+F)}const d=this.__extractAttributeAndUniformLocations(Q,F);return d.shaderHdls=B,d.shaderProgramHdl=Q,d}__extractAttributeAndUniformLocations(F,U){const Q=this.__gl,B=this.getAttributes(),l={attrs:{},unifs:{}};for(const U in B){const V=Q.getAttribLocation(F,U);if(null==V){console.warn("Shader attribute not found:"+U);continue}const d=B[U];l.attrs[U]={name:U,location:V,type:d.type,instanced:d.instanced}}const V=this.getUniforms();for(let B in V){const d=V[B];if(d instanceof Array)for(const U of d){const V=B+"."+U.name,d=Q.getUniformLocation(F,V);null!=d&&(l.unifs[V]={name:V,location:d,type:U.type})}if(U&&U.repl)for(const F in U.repl)B=B.replace(F,U.repl[F]);const R=Q.getUniformLocation(F,B);null!=R&&(l.unifs[B]={name:B,location:R,type:d})}return l}getAttributes(){const F={};for(const U in this.__shaderStages){const Q=this.__shaderStages[U];for(const U in Q.attributes)F[U]=Q.attributes[U]}return F}getUniforms(){const F={};for(const U in this.__shaderStages){const Q=this.__shaderStages[U];for(const U in Q.uniforms)F[U]=Q.uniforms[U]}return F}finalize(){}isCompiledForTarget(F){const U=F||this.getId();return null!=this.__shaderProgramHdls[U]}compileForTarget(F,U){const Q=F||this.getId();let B=this.__shaderProgramHdls[Q];return B||!1!==B&&(B=this.__createProgram(U),B.shaderkey=Q,this.__shaderProgramHdls[Q]=B),B}compile(){this.compileForTarget()}bind(F,U){const Q=this.__gl;if(F.glShader!=this){const B=this.compileForTarget(U,F.shaderopts);if(!1===B)return console.warn(this.constructor.name+" is not compiled for "+U),!1;const l=B.shaderProgramHdl;Q.useProgram(l),F.glShader=this,F.shaderkey=B.shaderkey,F.unifs=B.unifs,F.attrs=B.attrs,F.boundTextures=0,F.glGeom=void 0,F.bindRendererUnifs&&F.bindRendererUnifs(B.unifs)}return F.supportsInstancing=!0,!0}unbind(F){return delete F.glShader,delete F.shaderkey,delete F.unifs,delete F.attrs,!0}static getParamDeclarations(){return[]}static getGeomDataShaderName(){return null}static getSelectedShaderName(){return null}static supportsInstancing(){return!0}destroy(){const F=this.__gl;for(const U in this.__shaderProgramHdls){const Q=this.__shaderProgramHdls[U];F.deleteProgram(Q.shaderProgramHdl)}this.__shaderProgramHdls={}}}class JV{constructor(F,U,Q=!1){!zU.isIOSDevice||"FLOAT"!=U.getType()&&"HALF_FLOAT"!=U.getType()||console.error("IOS devices are unable to render to float textures."),this.__gl=F,this.__colorTexture=U,this.__createDepthTexture=Q,this.__clearColor=[0,0,0,0],this.__depthTexture=void 0,this.__colorTexture&&(this.colorTextureResizeEventId=this.__colorTexture.on("resized",(F=>{this.resize(this.__colorTexture.width,this.__colorTexture.height,!1)}))),this.setup()}setClearColor(F){this.__clearColor=F}getWidth(){return this.__colorTexture.width}getHeight(){return this.__colorTexture.height}getSize(){return[this.__colorTexture.width,this.__colorTexture.height]}getColorTexture(){return this.__colorTexture}getDepthTextureGL(){return this.__depthTexture}get width(){return this.__colorTexture.width}get height(){return this.__colorTexture.height}get size(){return[this.__colorTexture.width,this.__colorTexture.height]}get colorTexture(){return this.__colorTexture}setColorTexture(F){this.__colorTexture=F,gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.__colorTexture.glTex,0)}get depthTextureGL(){return this.__depthTexture}setup(){const F=this.__gl;if(this.__fbo=F.createFramebuffer(),"webgl2"==F.name?F.bindFramebuffer(F.DRAW_FRAMEBUFFER,this.__fbo):F.bindFramebuffer(F.FRAMEBUFFER,this.__fbo),this.__colorTexture&&("webgl2"==F.name?F.framebufferTexture2D(F.DRAW_FRAMEBUFFER,F.COLOR_ATTACHMENT0,F.TEXTURE_2D,this.__colorTexture.glTex,0):F.framebufferTexture2D(F.FRAMEBUFFER,F.COLOR_ATTACHMENT0,F.TEXTURE_2D,this.__colorTexture.glTex,0)),this.__createDepthTexture)if("webgl2"==F.name||F.__ext_WEBGL_depth_texture)F.activeTexture(F.TEXTURE0),this.__depthTexture=F.createTexture(),F.bindTexture(F.TEXTURE_2D,this.__depthTexture),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MAG_FILTER,F.LINEAR),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_MIN_FILTER,F.LINEAR),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_S,F.CLAMP_TO_EDGE),F.texParameteri(F.TEXTURE_2D,F.TEXTURE_WRAP_T,F.CLAMP_TO_EDGE),"webgl2"==F.name?(F.texImage2D(F.TEXTURE_2D,0,F.DEPTH_COMPONENT24,this.width,this.height,0,F.DEPTH_COMPONENT,F.UNSIGNED_INT,null),F.framebufferTexture2D(F.DRAW_FRAMEBUFFER,F.DEPTH_ATTACHMENT,F.TEXTURE_2D,this.__depthTexture,0)):(F.texImage2D(F.TEXTURE_2D,0,F.DEPTH_COMPONENT,this.width,this.height,0,F.DEPTH_COMPONENT,F.UNSIGNED_INT,null),F.framebufferTexture2D(F.FRAMEBUFFER,F.DEPTH_ATTACHMENT,F.TEXTURE_2D,this.__depthTexture,0));else{const U=F.createRenderbuffer();F.bindRenderbuffer(F.RENDERBUFFER,U),F.renderbufferStorage(F.RENDERBUFFER,F.DEPTH_COMPONENT16,this.width,this.height),F.framebufferRenderbuffer(F.FRAMEBUFFER,F.DEPTH_ATTACHMENT,F.RENDERBUFFER,U)}this.__checkFramebuffer(),"webgl2"==F.name?F.bindFramebuffer(F.DRAW_FRAMEBUFFER,null):F.bindFramebuffer(F.FRAMEBUFFER,null)}resize(F,U,Q){const B=this.__gl;Q&&this.__colorTexture.resize(F,U,!1,!1),"webgl2"==B.name?B.bindFramebuffer(B.DRAW_FRAMEBUFFER,this.__fbo):B.bindFramebuffer(B.FRAMEBUFFER,this.__fbo),B.framebufferTexture2D(B.FRAMEBUFFER,B.COLOR_ATTACHMENT0,B.TEXTURE_2D,this.__colorTexture.glTex,0),this.__depthTexture&&(B.activeTexture(B.TEXTURE0),B.bindTexture(B.TEXTURE_2D,this.__depthTexture),"webgl2"==B.name?B.texImage2D(B.TEXTURE_2D,0,B.DEPTH_COMPONENT24,this.width,this.height,0,B.DEPTH_COMPONENT,B.UNSIGNED_INT,null):B.texImage2D(B.TEXTURE_2D,0,B.DEPTH_COMPONENT,this.width,this.height,0,B.DEPTH_COMPONENT,B.UNSIGNED_INT,null)),this.__checkFramebuffer()}__checkFramebuffer(){const F=this.__gl;let U;if(U="webgl2"==F.name?F.checkFramebufferStatus(F.DRAW_FRAMEBUFFER):F.checkFramebufferStatus(F.FRAMEBUFFER),U!==F.FRAMEBUFFER_COMPLETE)switch(F.bindTexture(F.TEXTURE_2D,null),"webgl2"==F.name?F.bindFramebuffer(F.DRAW_FRAMEBUFFER,null):F.bindFramebuffer(F.FRAMEBUFFER,null),console.warn("Error creating Fbo width:",this.width,", height:",this.height," Texture Type:",this.__colorTexture.getType()),U){case F.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw new Error("The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.");case F.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw new Error("There is no attachment.");case F.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("Height and width of the attachment are not the same.");case F.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.");case 36061:throw new Error("The framebuffer is unsupported");default:throw new Error("Incomplete Frambuffer")}}bindForWriting(F){F&&(this.__prevBoundFbo=F.boundRendertarget,F.boundRendertarget=this.__fbo);const U=this.__gl;"webgl2"==U.name?U.bindFramebuffer(U.DRAW_FRAMEBUFFER,this.__fbo):U.bindFramebuffer(U.FRAMEBUFFER,this.__fbo),U.viewport(0,0,this.width,this.height)}unbindForWriting(F){F&&(F.boundRendertarget=this.__prevBoundFbo);const U=this.__gl;"webgl2"==U.name?U.bindFramebuffer(U.DRAW_FRAMEBUFFER,this.__prevBoundFbo):U.bindFramebuffer(U.FRAMEBUFFER,this.__prevBoundFbo)}bind(F){this.bindForWriting(F)}unbind(F){this.unbindForWriting(F)}bindForReading(){const F=this.__gl;"webgl2"==F.name?F.bindFramebuffer(F.READ_FRAMEBUFFER,this.__fbo):F.bindFramebuffer(F.FRAMEBUFFER,this.__fbo)}unbindForReading(){const F=this.__gl;"webgl2"==F.name?F.bindFramebuffer(F.READ_FRAMEBUFFER,null):F.bindFramebuffer(F.FRAMEBUFFER,null)}clear(){const F=this.__gl;F.colorMask(!0,!0,!0,!0),F.clearColor(...this.__clearColor),this.__createDepthTexture?F.clear(F.COLOR_BUFFER_BIT|F.DEPTH_BUFFER_BIT):F.clear(F.COLOR_BUFFER_BIT)}bindAndClear(F){this.bind(F),this.clear(F)}unbind(){const F=this.__gl;F.bindFramebuffer(F.FRAMEBUFFER,null)}destroy(){const F=this.__gl;F.bindFramebuffer(F.FRAMEBUFFER,null),F.deleteFramebuffer(this.__fbo),this.__fbo=null,this.__colorTexture.removeListenerById("resized",this.colorTextureResizeEventId)}}class XV extends nQ{constructor(F,U){super(),this.__gl=F,this.textureTargets=[],this.depthTexture=null,this.textureDesc=[0,0,0,0],U&&this.configure(U)}configure(F){const U=this.__gl,Q=gV(U,F);this.textureTargets.forEach((F=>{U.deleteTexture(F)})),this.textureTargets=[],this.depthTexture&&(U.deleteTexture(this.depthTexture),this.depthTexture=null),this.frameBuffer&&U.deleteFramebuffer(this.frameBuffer),this.params=Q,this.type=Q.type,this.format=Q.format,this.internalFormat=Q.internalFormat,this.filter=Q.filter,this.wrap=Q.wrap,this.flipY=Q.flipY,this.width=Q.width,this.height=Q.height,this.clearColor=new UQ(0,0,0,0),this.colorMask=[!0,!0,!0,!0],this.textureType=1,this.textureDesc[0]=this.width,this.textureDesc[1]=this.height;const B=null!=F.numColorChannels?F.numColorChannels:null!=Q.format?1:0;for(let F=0;F<B;F++){U.activeTexture(U.TEXTURE0+1);const F=U.createTexture();U.bindTexture(U.TEXTURE_2D,F),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_S,Q.wrapS),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_T,Q.wrapT),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MIN_FILTER,Q.minFilter),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MAG_FILTER,Q.magFilter),U.texImage2D(U.TEXTURE_2D,0,this.internalFormat,Q.width,Q.height,0,this.format,this.type,null),this.textureTargets.push(F)}if(Q.depthFormat){if("webgl"==U.name&&!U.__ext_WEBGL_depth_texture)throw new Error("Depth textures not support on this device");U.activeTexture(U.TEXTURE0),this.depthTexture=U.createTexture(),U.bindTexture(U.TEXTURE_2D,this.depthTexture),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_S,Q.wrapS),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_T,Q.wrapT),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MIN_FILTER,Q.minFilter),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MAG_FILTER,Q.magFilter),U.texImage2D(U.TEXTURE_2D,0,Q.depthInternalFormat,Q.width,Q.height,0,Q.depthFormat,Q.depthType,null)}if(this.frameBuffer=U.createFramebuffer(),this.bindForWriting(),this.textureTargets.length>0){if(this.textureTargets.length>1&&"webgl"==U.name&&!U.drawBuffers){U.__ext_draw_buffers=U.getExtension("WEBGL_draw_buffers"),U.drawBuffers=U.__ext_draw_buffers.drawBuffersWEBGL.bind(U.__ext_draw_buffers);for(let F=1;F<14;F++)U["COLOR_ATTACHMENT"+F]=U.__ext_draw_buffers["COLOR_ATTACHMENT"+F+"_WEBGL"];U.MAX_COLOR_ATTACHMENTS=U.__ext_draw_buffers.MAX_COLOR_ATTACHMENTS_WEBGL,U.MAX_DRAW_BUFFERS=U.__ext_draw_buffers.MAX_DRAW_BUFFERS_WEBGL}const F=[];for(let Q=0;Q<this.textureTargets.length;Q++)U.framebufferTexture2D(U.DRAW_FRAMEBUFFER,U.COLOR_ATTACHMENT0+Q,U.TEXTURE_2D,this.textureTargets[Q],0),F.push(U.COLOR_ATTACHMENT0+Q);this.textureTargets.length>1&&U.drawBuffers(F)}this.depthTexture&&U.framebufferTexture2D(U.DRAW_FRAMEBUFFER,U.DEPTH_ATTACHMENT,U.TEXTURE_2D,this.depthTexture,0),this.checkFramebuffer()}checkFramebuffer(){this.bindForWriting();const F=this.__gl,U=F.checkFramebufferStatus(F.DRAW_FRAMEBUFFER);if(U!=F.FRAMEBUFFER_COMPLETE)switch(U){case F.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw new Error("The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.");case F.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw new Error("There is no attachment.");case F.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("Height and width of the attachment are not the same.");case F.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.");case 36061:throw new Error("The framebuffer is unsupported");default:throw new Error("Incomplete Frambuffer")}this.unbindForWriting()}bindForWriting(F,U=!1){F&&(this.__prevBoundFbo=F.boundRendertarget,F.boundRendertarget=this.frameBuffer);const Q=this.__gl;"webgl2"==Q.name?Q.bindFramebuffer(Q.DRAW_FRAMEBUFFER,this.frameBuffer):Q.bindFramebuffer(Q.FRAMEBUFFER,this.frameBuffer),Q.viewport(0,0,this.width,this.height),U&&this.clear()}unbindForWriting(F){F&&(F.boundRendertarget=this.__prevBoundFbo);const U=this.__gl;"webgl2"==U.name?U.bindFramebuffer(U.DRAW_FRAMEBUFFER,this.__prevBoundFbo):U.bindFramebuffer(U.FRAMEBUFFER,this.__prevBoundFbo)}clear(F=!0){const U=this.__gl;U.colorMask(...this.colorMask),U.clearColor(...this.clearColor.asArray());let Q=0;this.textureTargets.length>0&&(Q|=U.COLOR_BUFFER_BIT),this.depthTexture&&(Q|=U.DEPTH_BUFFER_BIT),U.clear(Q)}bindForReading(){const F=this.__gl;"webgl2"==F.name?F.bindFramebuffer(F.READ_FRAMEBUFFER,this.frameBuffer):F.bindFramebuffer(F.FRAMEBUFFER,this.frameBuffer)}unbindForReading(){const F=this.__gl;"webgl2"==F.name?F.bindFramebuffer(F.READ_FRAMEBUFFER,null):F.bindFramebuffer(F.FRAMEBUFFER,null)}bindColorTexture(F,U,Q=0){const B=this.__gl,l=F.boundTextures++;return B.uniform1i(U.location,l),B.activeTexture(B.TEXTURE0+l),B.bindTexture(B.TEXTURE_2D,this.textureTargets[Q]),!0}bindDepthTexture(F,U){const Q=this.__gl,B=F.boundTextures++;return Q.uniform1i(U.location,B),Q.activeTexture(Q.TEXTURE0+B),Q.bindTexture(Q.TEXTURE_2D,this.depthTexture),!0}unbind(){this.unbindForWriting()}resize(F,U,Q=!1){const B=this.__gl;if(this.width!=F||this.height!=U){const l=B.getParameter(B.MAX_TEXTURE_SIZE);if(F<0||F>l||U<0||U>l)throw new Error(`GLRenderTarget: Invalid texture size. width: ${F} height: ${U} maxSize: ${l}`);Q&&this.bindForReading();const V=this.params;for(let l=0;l<this.textureTargets.length;l++){const d=B.createTexture();B.bindTexture(B.TEXTURE_2D,d),B.texParameteri(B.TEXTURE_2D,B.TEXTURE_WRAP_S,V.wrapS),B.texParameteri(B.TEXTURE_2D,B.TEXTURE_WRAP_T,V.wrapT),B.texParameteri(B.TEXTURE_2D,B.TEXTURE_MIN_FILTER,V.minFilter),B.texParameteri(B.TEXTURE_2D,B.TEXTURE_MAG_FILTER,V.magFilter),B.texImage2D(B.TEXTURE_2D,0,this.internalFormat,F,U,0,this.format,this.type,null),Q&&B.copyTexImage2D(B.TEXTURE_2D,0,this.internalFormat,0,0,Math.min(F,this.width),Math.min(U,this.height),0),B.deleteTexture(this.textureTargets[l]),this.textureTargets[l]=d}if(V.depthFormat){if("webgl"==B.name&&!B.__ext_WEBGL_depth_texture)throw new Error("Depth textures not support on this device");B.activeTexture(B.TEXTURE0);const l=B.createTexture();B.bindTexture(B.TEXTURE_2D,l),B.texParameteri(B.TEXTURE_2D,B.TEXTURE_WRAP_S,V.wrapS),B.texParameteri(B.TEXTURE_2D,B.TEXTURE_WRAP_T,V.wrapT),B.texParameteri(B.TEXTURE_2D,B.TEXTURE_MIN_FILTER,V.minFilter),B.texParameteri(B.TEXTURE_2D,B.TEXTURE_MAG_FILTER,V.magFilter),B.texImage2D(B.TEXTURE_2D,0,V.depthInternalFormat,F,U,0,V.depthFormat,V.depthType,null),Q&&B.copyTexImage2D(B.TEXTURE_2D,0,this.internalFormat,0,0,Math.min(F,this.width),Math.min(U,this.height),0),B.deleteTexture(this.depthTexture),this.depthTexture=l}if(Q&&this.unbindForReading(),this.width=F,this.height=U,this.frameBuffer&&B.deleteFramebuffer(this.frameBuffer),this.frameBuffer=B.createFramebuffer(),this.bindForWriting(),this.textureTargets.length>0){if(this.textureTargets.length>1&&"webgl"==B.name&&!B.drawBuffers){B.__ext_draw_buffers=B.getExtension("WEBGL_draw_buffers"),B.drawBuffers=B.__ext_draw_buffers.drawBuffersWEBGL.bind(B.__ext_draw_buffers);for(let F=1;F<14;F++)B["COLOR_ATTACHMENT"+F]=B.__ext_draw_buffers["COLOR_ATTACHMENT"+F+"_WEBGL"];B.MAX_COLOR_ATTACHMENTS=B.__ext_draw_buffers.MAX_COLOR_ATTACHMENTS_WEBGL,B.MAX_DRAW_BUFFERS=B.__ext_draw_buffers.MAX_DRAW_BUFFERS_WEBGL}const F=[];for(let U=0;U<this.textureTargets.length;U++)B.framebufferTexture2D(B.DRAW_FRAMEBUFFER,B.COLOR_ATTACHMENT0+U,B.TEXTURE_2D,this.textureTargets[U],0),F.push(B.COLOR_ATTACHMENT0+U);this.textureTargets.length>1&&B.drawBuffers(F)}this.depthTexture&&B.framebufferTexture2D(B.DRAW_FRAMEBUFFER,B.DEPTH_ATTACHMENT,B.TEXTURE_2D,this.depthTexture,0),this.checkFramebuffer()}}bindToUniform(F,U,Q){const B=F.boundTextures++,l=this.__gl.TEXTURE0+B,V=this.__gl;return V.activeTexture(l),V.bindTexture(V.TEXTURE_2D,this.textureTargets[0]),V.uniform1i(U.location,B),Q&&(Q.textureTypeUnif&&V.uniform1i(Q.textureTypeUnif.location,this.textureType),Q.textureDescUnif&&this.__gl.uniform4fv(Q.textureDescUnif.location,this.textureDesc)),!0}destroy(){const F=this.__gl;this.textureTargets.forEach((U=>{F.deleteTexture(U)})),this.textureTargets=[],this.depthTexture&&(F.deleteTexture(this.depthTexture),this.depthTexture=null),this.frameBuffer&&F.deleteFramebuffer(this.frameBuffer)}}hV.setShaderModule("imageAtlas.glsl","#define GLSLIFY 1\n// Note: On mobile, I can't seem to pass around a stuct containing sampler2D.\n// I have to unpack the struct and pass its members. :(\n// struct ImageAtlas {\n//     sampler2D layout;\n//     sampler2D image;\n//     vec4 desc;\n// };\n\nimport 'GLSLUtils.glsl'\n\nvec4 getSubImageLayout(int index, in sampler2D atlasLayout, in vec4 atlasDesc){\n    return fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);\n}\nvec2 calcSubImageTexCoords(vec2 texCoord, int index, in sampler2D atlasLayout, in vec4 atlasDesc){\n    vec4 layoutData = fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);\n    // The following line is a hack to fix artifacts in our PBR lighting\n    // We were seeing loads of lighting garbage on some sufaces that were orthogonal\n    // to the world. The UV coordinates would have been landing right on the edges\n    // of our subimages and were often sampling outside the image. This couuld\n    // have been because of filtering, or an error in the uv coords. \n    texCoord = clamp(texCoord, vec2(0.01, 0.01), vec2(0.99, 0.99));\n    vec2 subimageTexel = texCoord * layoutData.zw;\n    // subimageTexel = clamp(subimageTexel, vec2(0.0, 0.0), vec2(1.0, 1.0));\n    return subimageTexel + layoutData.xy;\n}\nvec4 sampleSubImage(vec2 texCoord, int index, in sampler2D atlasLayout, in sampler2D atlasImage, in vec4 atlasDesc){\n    vec4 layoutData = fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);\n    vec2 atlasCoords = calcSubImageTexCoords(texCoord, index, atlasLayout, atlasDesc);\n    return texture2D(atlasImage, atlasCoords);\n}"),hV.setShaderModule("surfaceGeomData.glsl","#define GLSLIFY 1\n  uniform int floatGeomBuffer;\n  uniform int passId;\n\n  import 'GLSLBits.glsl'\n  \n  vec4 setFragColor_geomData(vec3 v_viewPos, int floatGeomBuffer, int passId, float v_drawItemId, int isOrthographic){\n    vec4 fragColor;\n\n    float viewDist;\n    if (isOrthographic > 0) {\n      viewDist = v_viewPos.z;\n    } else {\n      viewDist = length(v_viewPos);\n    }\n    if (floatGeomBuffer != 0) {\n      fragColor.r = float(passId); \n      fragColor.g = float(v_drawItemId);\n      fragColor.b = 0.0;// TODO: store poly-id or something.\n      fragColor.a = viewDist;\n    }\n    else {\n      ///////////////////////////////////\n      // UInt8 buffer\n      fragColor.r = mod(v_drawItemId, 256.) / 255.;\n      fragColor.g = (floor(v_drawItemId / 256.) + float(passId) * 32.) / 255.;\n\n      // encode the dist as a 16 bit float\n      vec2 float16bits = encode16BitFloatInto2xUInt8(viewDist);\n      fragColor.b = float16bits.x;\n      fragColor.a = float16bits.y;\n    }\n\n    return fragColor;\n  }"),hV.setShaderModule("surfaceHighlight.glsl","#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getHighlightColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);\n}\n#else\n\nuniform vec4 highlightColor;\n\nvec4 getHighlightColor(int id) {\n    return highlightColor;\n}\n\n#endif\n\nvec4 setFragColor_highlight(float v_drawItemId){\n  vec4 fragColor; \n  int drawItemId = int(v_drawItemId + 0.5);\n  fragColor = getHighlightColor(drawItemId);\n  return fragColor;\n}\n"),hV.setShaderModule("computeViewNormal.glsl","#define GLSLIFY 1\n  \n#ifdef ENABLE_ES3\nvec3 computeViewNormal(vec3 viewPos) {\n  vec3 fdx = dFdx(viewPos);\n  vec3 fdy = dFdy(viewPos);\n  return normalize(cross(fdx, fdy));\n}\n#else \nvec3 computeViewNormal(vec3 viewPos) {\n  return vec3(0.0, 0.0, 0.0);\n}\n#endif\n"),hV.setShaderModule("calcFatLinesViewPos.glsl","#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\nvec3 calcFatLinesViewPos(int vertexID, mat4 modelViewMatrix, inout vec3 viewNormal, inout vec2 texCoord, inout vec3 pos) {\n\n  int seqentialIndex_0 = int(mod(segmentIndices.x, 2.));\n  int seqentialIndex_1 = int(mod(segmentIndices.y, 2.));\n  int index_0 = int(segmentIndices.x) / 2;\n  int index_1 = int(segmentIndices.y) / 2;\n\n  vec3 viewPos;\n  vec4 data_0 = fetchTexel(positionsTexture, positionsTextureSize, index_0);\n  vec4 data_1 = fetchTexel(positionsTexture, positionsTextureSize, index_1);\n\n  // During XR sessions, there is a scaling applied to the view matrix\n  // which causes a distortion to the line width. We extract that scale here\n  // and use to correct the distortion.\n  // See also: FatPointsShader\n  vec3 viewZ = modelViewMatrix[2].xyz;\n  float viewScale = length(viewZ);\n\n  vec4 pos_0 = modelViewMatrix * vec4(data_0.xyz, 1.0);\n  vec4 pos_1 = modelViewMatrix * vec4(data_1.xyz, 1.0);\n  // Note: multiply the per-vertex line thickness with the line thickness uniform value;\n  float lineThickness_0 = LineThickness * data_0.w * viewScale;\n  float lineThickness_1 = LineThickness * data_1.w * viewScale;\n\n  if (vertexID < 2) {\n    pos = data_0.xyz;\n    viewPos = pos_0.xyz;\n  }\n  else {\n    pos = data_1.xyz;\n    viewPos = pos_1.xyz;\n  }\n  if (pos_1 != pos_0) {\n    vec3 segmentDir = normalize(pos_1.xyz - pos_0.xyz);\n    vec3 viewVector = normalize(viewPos);\n\n    if (vertexID < 2) {\n      vec3 segmentStartDir = segmentDir;\n      if (seqentialIndex_0 != 0) {\n        //if index_0 == 0, get the last index in the line as previous\n        int index_prev = (index_0 > 0) ? (index_0-1) : (positionsTextureSize-1);\n        vec4 data_prev = fetchTexel(positionsTexture, positionsTextureSize, index_prev);\n        vec4 pos_prev = modelViewMatrix * vec4(data_prev.xyz, 1.0);\n        segmentStartDir = normalize(segmentDir + normalize(pos_0.xyz - pos_prev.xyz));\n        // segmentStartDir = segmentDir;\n      }\n      // vec3 startBiTangent = normalize(cross(segmentStartDir, viewVector));\n      // viewNormal = normalize(cross(segmentStartDir, startBiTangent));\n      vec3 startBiTangent = normalize(vec3(-segmentStartDir.y, segmentStartDir.x, 0.0));\n      viewNormal = normalize(-viewVector);\n      // Move the endpoints to overlap a bit more.\n      //viewPos -= vec3(segmentStartDir * lineThickness_0 * 0.25);\n      if (mod(vertexIDs, 2.0) == 0.0) {\n        viewPos += vec3(startBiTangent * lineThickness_0);\n        texCoord.x = 1.0;\n      }\n      else {\n        viewPos -= vec3(startBiTangent * lineThickness_0);\n        texCoord.x = 0.0;\n      }\n      texCoord.y = 0.0;\n    }\n    else {\n      vec3 segmentEndDir = segmentDir;\n      if (seqentialIndex_1 != 0) {\n        //if index_1 == numPoints-1, get the first index in the line as next\n        int index_next = (index_1 < (positionsTextureSize-1)) ? (index_1+1) : 0;\n        vec4 data_next = fetchTexel(positionsTexture, positionsTextureSize, index_next);\n        vec4 pos_next = modelViewMatrix * vec4(data_next.xyz, 1.0);\n        segmentEndDir = normalize(segmentDir + normalize(pos_next.xyz - pos_1.xyz));\n        // segmentEndDir = segmentDir;\n      }\n      // vec3 endBiTangent = normalize(cross(segmentEndDir, viewVector));\n      // viewNormal = normalize(cross(segmentEndDir, endBiTangent));\n      vec3 endBiTangent = normalize(vec3(-segmentEndDir.y, segmentEndDir.x, 0.0));\n      viewNormal = normalize(-viewVector);\n      // Move the endpoints to overlap a bit more.\n      //viewPos += vec3(segmentEndDir * lineThickness_1 * 0.25);\n      if (mod(vertexIDs, 2.0) == 0.0) {\n        viewPos += vec3(endBiTangent * lineThickness_1);\n        texCoord.x = 1.0;\n      }\n      else {\n        viewPos -= vec3(endBiTangent * lineThickness_1);\n        texCoord.x = 0.0;\n      }\n      texCoord.y = 1.0;\n    }\n\n    // Move the line towards the viewer by the line thickness.\n    // this is to avoid depth issues when lines are rendered over meshes. \n    viewPos.z += (lineThickness_0 + lineThickness_1) * 0.5;\n  }\n\n  return viewPos;\n}\n\n"),hV.setShaderModule("constants.glsl","#define GLSLIFY 1\n#define PI 3.141592653589793\n#define TwoPI (2.0 * PI)\n#define HalfPI (0.5 * PI)\n\n"),hV.setShaderModule("convolve-helpers.glsl","#define GLSLIFY 1\n\n#ifdef ENVMAP_CUBE\n\nuniform samplerCube envMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return texture(envMap, dir);\n}\n\n#else \n\nuniform sampler2D   envMap;\n\nimport 'envmap-octahedral.glsl'\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = dirToSphOctUv(dir);\n  vec4 texel = texture2D(envMap, vec2(uv.x, 1.0 - uv.y));\n  return vec4(texel.rgb/texel.a, 1.0); // TODO: Check this line. Do we need it?\n}\n\n#endif \n\nvec3 cubeFaceUvToDir(float u, float v, int faceId) {\n\n  // normalize into [-1, 1] range\n  float n_u = 2.0 * u - 1.0;\n  float n_v = 2.0 * v - 1.0;\n\n  vec3 dir;\n  switch (faceId)\n  {\n  case 0: //TEXTURE_CUBE_MAP_POSITIVE_X:\n    dir.x = 1.0f;\n    dir.y = n_v;\n    dir.z = -n_u;\n    break;\n  case 1: //TEXTURE_CUBE_MAP_NEGATIVE_X:\n    dir.x = -1.0f;\n    dir.y = n_v;\n    dir.z = n_u;\n    break;\n  case 3: //TEXTURE_CUBE_MAP_POSITIVE_Y:\n    dir.x = n_u;\n    dir.y = 1.0f;\n    dir.z = -n_v;\n    break;\n  case 2: //TEXTURE_CUBE_MAP_NEGATIVE_Y:\n    dir.x = n_u;\n    dir.y = -1.0f;\n    dir.z = n_v;\n    break;\n  case 4: //TEXTURE_CUBE_MAP_POSITIVE_Z:\n    dir.x = n_u;\n    dir.y = n_v;\n    dir.z = 1.0f;\n    break;\n  case 5: //TEXTURE_CUBE_MAP_NEGATIVE_Z:\n    dir.x = -n_u;\n    dir.y = n_v;\n    dir.z = -1.0f;\n    break;\n  }\n  return normalize(dir);\n}\n\n"),hV.setShaderModule("cutaways.glsl","#define GLSLIFY 1\nconst int GEOMITEM_FLAG_CUTAWAY = 1; // 1<<0;\nconst int GEOMITEM_INVISIBLE_IN_GEOMDATA = 2; // 1<<1;\n\n#define RAY_EPS 0.0000001\nstruct Ray {\n  vec3 start;\n  vec3 dir;\n};\n\nfloat intersectRayPlane(Ray ray, Ray plane) {\n  vec3 w = ray.start - plane.start;\n  float D = dot(plane.dir, ray.dir);\n  float N = dot(-plane.dir, w);\n\n  if (abs(D) < RAY_EPS) {\n    // segment is parallel to plane\n    if (N == 0.0)\n      return -1.0; // segment lies in plane\n    else\n      return -1.0; // no intersection\n  }\n  // they are not parallel\n  // compute intersect param\n  float sI = N / D;\n  if (sI < -RAY_EPS) {\n    return -1.0; // no intersection\n  }\n  return sI;\n}\n\nbool cutaway(vec3 worldPos, vec3 planeNormal, float planeDist) {\n\n  vec3 planePos = planeNormal * planeDist;\n  vec3 planeDir = worldPos + planePos;\n  float planeOffset = dot(planeDir, planeNormal);\n  if (planeOffset > 0.0) {\n    return true;\n  }\n  return false;\n}\n"),hV.setShaderModule("debugColors.glsl","#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\n\nvec3 getDebugColor(float id) {\n  int sel = int(round(mod(round(id), 16.0)));\n  \n  if (sel==0)\n    return vec3(0.0, 1.0, 1.0);\n  else if (sel==1)\n    return vec3(0.0, 1.0, 0.0);\n  else if (sel==2)\n    return vec3(1.0, 0.0, 1.0);\n  else if (sel==3)\n    return vec3(0.75, 0.75, 0.0);\n  else if (sel==4)\n    return vec3(0.0, 0.75, 0.75);\n  else if (sel==5)\n    return vec3(0.75, 0.0, 0.75);\n  else if (sel==6)\n    return vec3(0.45, 0.95, 0.0);\n  else if (sel==7)\n    return vec3(0.0, 0.45, 0.95);\n  else if (sel==8)\n    return vec3(0.95, 0.0, 0.45);\n  else if (sel==9)\n    return vec3(0.95, 0.45, 0.0);\n  else if (sel==10)\n    return vec3(0.0, 0.95, 0.45);\n  else if (sel==11)\n    return vec3(0.45, 0.0, 0.95);\n  else if (sel==12)\n    return vec3(0.45, 0.45, 0.95);\n  else if (sel==13)\n    return vec3(0.0, 0.0, 0.45);\n  else if (sel==14)\n    return vec3(0.0, 0.45, 0.45);\n  else if (sel==15)\n    return vec3(0.45, 0.0, 0.45);\n  else return vec3(0.2, 0.2, 0.2);\n}\n\n"),hV.setShaderModule("drawItemId.glsl","#define GLSLIFY 1\n\n#ifdef ENABLE_MULTI_DRAW\n\nuniform sampler2D drawIdsTexture;\n\n#ifdef EMULATE_MULTI_DRAW\n\nuniform int drawId;\nint getDrawItemId() {\n  return drawId;\n}\n\n#else // EMULATE_MULTI_DRAW\n\nint getDrawItemId() {\n  ivec2 drawIdsTextureSize = textureSize(drawIdsTexture, 0);\n  ivec2 drawIdsArrayCoords = ivec2(gl_DrawID % drawIdsTextureSize.x, gl_DrawID / drawIdsTextureSize.x);\n  return int(texelFetch(drawIdsTexture, drawIdsArrayCoords, 0).r + 0.5);\n}\n\n#endif // EMULATE_MULTI_DRAW\n\n#else // ENABLE_MULTI_DRAW\n\nuniform int drawItemId;\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\nattribute float instancedIds;    // instanced attribute..\nuniform int instancedDraw;\n\nint getDrawItemId() {\n  if (instancedDraw == 0) {\n    return drawItemId;\n  }\n  else {\n    return int(instancedIds);\n  }\n}\n\n#else\n\nint getDrawItemId() {\n  return drawItemId;\n}\n\n#endif // ENABLE_FLOAT_TEXTURES\n#endif // ENABLE_MULTI_DRAW\n\n"),hV.setShaderModule("drawItemTexture.glsl","#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\nuniform sampler2D instancesTexture;\nuniform highp int instancesTextureSize;\n\nconst int pixelsPerItem = 6;\n\nvec4 getInstanceData(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 0);\n}\n\n#else\n\nuniform vec4 drawItemData;\n\nvec4 getInstanceData(int id) {\n  return drawItemData;\n}\n\n#endif\n\n"),hV.setShaderModule("envmap-dualfisheye.glsl","#define GLSLIFY 1\n\nvec2 dualfisheyeUVsFromDir(vec3 dir) {\n  vec2 result;\n  float angle = 0.465;\n  if (dir.x < 0.0) {\n    result = vec2(((dir.z * -angle) + 0.5) * 0.5, (dir.y * angle) + 0.5);\n  }\n  else {\n    result = vec2( 0.5 + ((dir.z * angle) + 0.5) * 0.5, (dir.y * angle) + 0.5);\n  }\n  return result;\n}\n\n"),hV.setShaderModule("envmap-equirect.glsl","#define GLSLIFY 1 \nimport 'constants.glsl'\n\nvec2 latLongUVsFromDir(vec3 dir) {\n  // Math function taken from...\n  // http://gl.ict.usc.edu/Data/HighResProbes/\n  // Note: Scaling from u=[0,2], v=[0,1] to u=[0,1], v=[0,1]\n  float phi = acos(dir.z);\n  float theta = atan(dir.x, dir.y);\n  return vec2((1.0 + theta / PI) / 2.0, phi / PI);\n}\n\n// Note: when u == 0.5 z = 1.0\nvec3 dirFromLatLongUVs(float u, float v) {\n  // http://gl.ict.usc.edu/Data/HighResProbes/\n  float theta = PI*((u * 2.0) - 1.0);\n  float phi = PI*v;\n  return vec3(sin(phi)*sin(theta), sin(phi)*cos(theta), cos(phi));\n}\n\nvec3 dirFromPolar(vec2 polar) {\n  float u = polar.x / (PI * 2.0);\n  float v = polar.y / PI;\n  return dirFromLatLongUVs(u, v);\n}\n\n"),hV.setShaderModule("envmap-octahedral.glsl","#define GLSLIFY 1\nimport 'constants.glsl'\nimport 'GLSLUtils.glsl'\n#define sectorize(value) step(0.0, (value))*2.0-1.0\n#define sum(value) dot(clamp((value), 1.0, 1.0), (value))\n\nvec2 dirToSphOctUv(vec3 normal) {\n  normal = normalize(normal);\n  vec3 aNorm = abs(normal);\n  vec3 sNorm = sectorize(normal);\n  \n  vec2 dir = aNorm.xy;\n  float orient = atan(dir.x, max(dir.y,0.0000000000000001))/HalfPI;\n\n  dir = vec2(aNorm.z, length(aNorm.xy));\n  float pitch = atan(dir.y, dir.x)/HalfPI;\n\n  vec2 uv = vec2(sNorm.x*orient, sNorm.y*(1.0-orient))*pitch;\n\n  if (normal.z < 0.0) {\n    uv = sNorm.xy - abs(uv.ts)*sNorm.xy;\n  }\n  vec2 res = uv*0.5+0.5;\n  // Flip-v\n  // return res;\n  return vec2(res.x, 1.0 - res.y);\n}\n\nvec3 sphOctUvToDir(vec2 uv) {\n  uv = uv*2.0-1.0;\n  // Flip-v\n  uv.y = -uv.y;\n  vec2 suv = sectorize(uv);\n  float sabsuv = sum(abs(uv));\n  float pitch = sabsuv*HalfPI;\n\n  if (pitch <= 0.0) {\n    return vec3(0.0, 0.0, 1.0);\n  }\n  if (abs(pitch - PI) < 0.000001) {\n    return vec3(0.0, 0.0, -1.0);\n  }\n  if (sabsuv > 1.0) {\n    uv = (1.0-abs(uv.ts))*suv;\n  }\n\n  float orient = (abs(uv.s)/sabsuv)*HalfPI;\n  float sOrient = sin(orient);\n  float cOrient = cos(orient);\n  float sPitch = sin(pitch);\n  float cPitch = cos(pitch);\n\n  return vec3(\n    sOrient*suv.s*sPitch,\n    cOrient*suv.t*sPitch,\n    cPitch\n  );\n}\n\n"),hV.setShaderModule("GLSLBits.glsl",'#define GLSLIFY 1\n    \n/////////////////////////////////////////////////////////////////\n// http://concord-consortium.github.io/lab/experiments/webgl-gpgpu/script.js\nfloat shift_right(float v, float amt) {\n  v = floor(v) + 0.5;\n  return floor(v / exp2(amt));\n}\nfloat shift_left(float v, float amt) {\n  return floor(v * exp2(amt) + 0.5);\n}\n\nfloat mask_last(float v, float bits) {\n  return mod(v, shift_left(1.0, bits));\n}\nfloat extract_bits(float num, float from, float to) {\n  from = floor(from + 0.5);\n  to = floor(to + 0.5);\n  return mask_last(shift_right(num, from), to - from);\n}\n\n/////////////////////////////////////////////////////////////////\n// https://stackoverflow.com/questions/18453302/how-do-you-pack-one-32bit-int-into-4-8bit-ints-in-glsl-webgl\n\nconst vec4 bitEnc = vec4(1.,255.,65025.,16581375.);\nconst vec4 bitDec = 1./bitEnc;\nvec4 EncodeFloatRGBA (float v) {\n  vec4 enc = bitEnc * v;\n  enc = fract(enc);\n  enc -= enc.yzww * vec2(1./255., 0.).xxxy;\n  return enc;\n}\nfloat DecodeFloatRGBA (vec4 v) {\n  return dot(v, bitDec);\n}\n\n/////////////////////////////////////////////////////////////////\n// https://gist.github.com/Flexi23/1713774\n// \nvec2 encode16BitFloatInto2xUInt8(float v) {\n  vec2 c = vec2(0.);\n\n  int signum = (v >= 0.) ? 128 : 0;\n  v = abs(v);\n  int exponent = 15;\n  float limit = 1024.; // considering the bias from 2^-5 to 2^10 (==1024)\n  for(int exp = 15; exp > 0; exp--) {\n    if ( v < limit) {\n      limit /= 2.;\n      exponent--;\n    }\n  }\n\n  float rest;\n  if (exponent == 0) {\n    rest = v / limit / 2.;      // "subnormalize" implicite preceding 0. \n  } \n  else {\n    rest = (v - limit)/limit;   // normalize accordingly to implicite preceding 1.\n  }\n\n  int mantissa = int(rest * 2048.);   // 2048 = 2^11 for the (split) 11 bit mantissa\n  int msb = mantissa / 256;           // the most significant 3 bits go into the lower part of the first byte\n  int lsb = mantissa - msb * 256;     // there go the other 8 bit of the lower significance\n\n  c.x = float(signum + exponent * 8 + msb) / 255.;    // color normalization for texture2D\n  c.y = float(lsb) / 255.;\n\n  if (v >= 2048.) {\n    c.y = 1.;\n  }\n\n  return c;\n}\n\nfloat decode16BitFloatFrom2xUInt8(vec2 c) {\n  float v = 0.;\n\n  int ix = int(c.x*255.); // 1st byte: 1 bit signum, 4 bits exponent, 3 bits mantissa (MSB)\n  int iy = int(c.y*255.); // 2nd byte: 8 bit mantissa (LSB)\n\n  int s = (c.x >= 0.5) ? 1 : -1;\n  ix = (s > 0) ? ix - 128 : ix;   // remove the signum bit from exponent\n  int iexp = ix / 8;              // cut off the last 3 bits of the mantissa to select the 4 exponent bits\n  int msb = ix - iexp * 8;        // subtract the exponent bits to select the 3 most significant bits of the mantissa\n\n  int norm = (iexp == 0) ? 0 : 2048;          // distinguish between normalized and subnormalized numbers\n  int mantissa = norm + msb * 256 + iy;       // implicite preceding 1 or 0 added here\n  norm = (iexp == 0) ? 1 : 0;                 // normalization toggle\n  float exponent = pow( 2., float(iexp + norm) - 16.); // -5 for the the exponent bias from 2^-5 to 2^10 plus another -11 for the normalized 12 bit mantissa \n  v = float( s * mantissa ) * exponent;\n\n  return v;\n}\n\n// TODO : Encoding Float32 to 4x UInt8\n// http://concord-consortium.github.io/lab/experiments/webgl-gpgpu/script.js\n// http://ultraist.hatenablog.com/entry/20110608/1307539319\n\n'),hV.setShaderModule("GLSLUtils.glsl","#define GLSLIFY 1\n\nint ftoi(float val) {\n  return int(floor(val + 0.5));\n}\nivec2 ftoi(vec2 v2) {\n  return ivec2(ftoi(v2.x), ftoi(v2.y));\n}\nivec3 ftoi(vec3 v4) {\n  return ivec3(ftoi(v4.x), ftoi(v4.y), ftoi(v4.z));\n}\nivec4 ftoi(vec4 v4) {\n  return ivec4(ftoi(v4.x), ftoi(v4.y), ftoi(v4.z), ftoi(v4.w));\n}\n\n#ifdef ENABLE_ES3\n\nint imod(int x, int y) {\n  return x % y;\n}\n\nvoid setFlag(inout int flags, int flag) {\n  flags |= flag;\n}\n\nvoid clearFlag(inout int flags, int flag) {\n  flags &= ~flag;\n}\n\nbool testFlag(int flags, int flag) {\n  return (flags & flag) != 0;\n}\n\n// private function: Mangle me...\nivec2 _pixelIndexToUV(int index, int textureWidth) {\n  return ivec2(index % textureWidth, index / textureWidth);\n}\n\nvec4 fetchTexel(sampler2D texture, int textureWidth, int index) {\n  return texelFetch(texture, _pixelIndexToUV(index, textureWidth), 0);\n}\n\nvec4 fetchTexel(sampler2D texture, ivec2 textureSize, ivec2 texCoord) {\n  return texelFetch(texture, texCoord, 0);\n}\n\n#else\n\n// TODO: integrate: https://gist.github.com/mattatz/70b96f8c57d4ba1ad2cd\n\nint max(int a, int b) {\n  return a > b ? a : b;\n}\nint min(int a, int b) {\n  return a < b ? a : b;\n}\n\nfloat round(float val) {\n  return floor(val + 0.4);\n}\n\nint imod(int x, int y) {\n  return x-y*(x/y);\n}\n\nvoid setFlag(inout int flags, int flag) {\n  flags += flag;\n}\nvoid clearFlag(inout int flags, int flag) {\n  flags -= flag;\n}\n\nbool testFlag(int flags, int flag) {\n  return imod(flags / flag, 2) != 0;\n}\n\n// private function: Mangle me...\nvec2 _pixelIndexToUV(int index, int textureSize) {\n  float flTexSize = float(textureSize);\n  float x = (float(imod(index, textureSize))+0.5)/flTexSize;\n  float y = (floor(float(index / textureSize))+0.5)/flTexSize;\n  return vec2(x, y);\n}\n\nvec4 fetchTexel(sampler2D texture, int textureSize, int index) {\n  vec2 texCoord = _pixelIndexToUV(index, textureSize);\n  return texture2D(texture, texCoord);\n}\n\nvec4 fetchTexel(sampler2D texture, ivec2 textureSize, ivec2 texCoord) {\n  vec2 ftextureSize = vec2(textureSize);\n  return texture2D(texture, (vec2(texCoord) + 0.5) / ftextureSize);\n}\n\n#endif // ENABLE_ES3\n\nint uvToPixelIndex(vec2 uv, int textureSize) {\n  return int(uv.x * float(textureSize)) + (int(floor(uv.y * float(textureSize))) * textureSize);\n}\n\n"),hV.setShaderModule("Hammersley.glsl","#define GLSLIFY 1\nfloat RadicalInverse_VdC(uint bits) \n{\n  bits = (bits << 16u) | (bits >> 16u);\n  bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\n  bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\n  bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\n  bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\n  return float(bits) * 2.3283064365386963e-10; // / 0x100000000\n}\n// ----------------------------------------------------------------------------\nvec2 Hammersley(uint i, uint N)\n{\n  return vec2(float(i)/float(N), RadicalInverse_VdC(i));\n} \n"),hV.setShaderModule("ImportanceSampleGGX.glsl","#define GLSLIFY 1\nimport 'constants.glsl'\n\nvec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)\n{\n  float a = roughness*roughness;\n\n  float phi = 2.0 * PI * Xi.x;\n  float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));\n  float sinTheta = sqrt(1.0 - cosTheta*cosTheta);\n\n  // from spherical coordinates to cartesian coordinates\n  vec3 H = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);\n\n  // from tangent-space vector to world-space sample vector\n  vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n  vec3 tangent   = normalize(cross(up, N));\n  vec3 bitangent = cross(N, tangent);\n\n  vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n  return normalize(sampleVec);\n} \n"),hV.setShaderModule("materialparams.glsl","#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\nimport 'gamma.glsl'\n\n#ifdef ENABLE_MULTI_DRAW\n \nuniform sampler2D materialsTexture;\nuniform highp ivec2 materialsTextureSize;\n\nvec4 getMaterialValue(vec2 materialCoords, int valueIndex) {\n  int index = ftoi(materialCoords.x) + valueIndex;\n  ivec2 texelCoords = ivec2(imod(index, materialsTextureSize.x), index / materialsTextureSize.x);\n  \n  return fetchTexel(materialsTexture, materialsTextureSize, texelCoords);\n}\n\n#else // ENABLE_MULTI_DRAW\n\n////////////////////////\n// Material Param Helpers.\n\nvec4 getColorParamValue(vec4 value, sampler2D tex, int texType, vec2 texCoord) {\n  if (texType == 0) {\n    return toLinear(value);\n  }\n  else if (texType == 1 || texType == 2) {\n    // TODO: Use SRGB textures.\n    return toLinear(texture2D(tex, texCoord));\n  }\n  else if (texType == 3) {\n    // Float HDR Texture\n    return texture2D(tex, texCoord);\n  }\n  else\n    return value;\n}\n\nfloat luminanceFromRGB(vec3 rgb) {\n  return 0.2126*rgb.r + 0.7152*rgb.g + 0.0722*rgb.b;\n}\n\nfloat getLuminanceParamValue(float value, sampler2D tex, int texType, vec2 texCoord) {\n  if (texType == 0)\n    return value;\n  else\n    return luminanceFromRGB(texture2D(tex, texCoord).rgb);\n}\n\n#endif // ENABLE_MULTI_DRAW\n"),hV.setShaderModule("modelMatrix.glsl","#define GLSLIFY 1\n#ifdef ENABLE_FLOAT_TEXTURES\nimport 'GLSLUtils.glsl'\nimport 'transpose.glsl'\nmat4 getMatrix(sampler2D texture, int textureSize, int index) {\n  // Unpack 3 x 4 matrix columns into a 4 x 4 matrix.\n  vec4 col0 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 1);\n  vec4 col1 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 2);\n  vec4 col2 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 3);\n  mat4 result = transpose(mat4(col0, col1, col2, vec4(0.0, 0.0, 0.0, 1.0)));\n  return result;\n}\n\nmat4 getModelMatrix(int id) {\n  return getMatrix(instancesTexture, instancesTextureSize, id);\n}\n\n#else\n\nuniform mat4 modelMatrix;\n\nmat4 getModelMatrix(int id) {\n  return modelMatrix;\n}\n\n#endif\n\n"),hV.setShaderModule("PBRSurfaceRadiance.glsl","#define GLSLIFY 1\nimport 'GLSLUtils.glsl'\nconst int ENVMAP_FLAG_HEADLIGHT =  1; // 1<<0;\n\nstruct MaterialParams {\n  vec3 baseColor;\n  float ambientOcclusion;\n  float metallic;\n  float roughness;\n  float reflectance;\n  float opacity;\n  float emission;\n};\n\n#ifndef ENABLE_PBR\n\nvec4 pbrSurfaceRadiance(in MaterialParams material, vec3 normal, in vec3 viewVector) {\n  vec3 irradiance = vec3(dot(normal, viewVector));\n  float ao = material.ambientOcclusion; \n  return vec4(material.baseColor * ao * irradiance + (material.emission * material.baseColor), material.opacity);\n\n  // return vec4(material.baseColor * ao * irradiance , material.opacity);\n}\n\n#else\n\nuniform int envMapFlags;\nuniform samplerCube irradianceMap;\nuniform samplerCube prefilterMap;\nuniform sampler2D brdfLUT;\n\nvec3 sampleIrradiance(vec3 dir) {\n  return texture(irradianceMap, dir).rgb;\n}\n\nvec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness) {\n  return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(max(1.0 - cosTheta, 0.0), 5.0);\n}\n\nfloat luminance(vec3 color) {\n  return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n}\n\nvec4 pbrSurfaceRadiance(in MaterialParams material, vec3 normal, in vec3 viewVector) {\n  if (envMapFlags == -1) {\n    vec3 irradiance = vec3(dot(normal, viewVector));\n    float ao = material.ambientOcclusion; \n    return vec4(material.baseColor * ao * irradiance + (material.emission * material.baseColor), material.opacity);\n  }\n\n  vec3 N = normal;\n  vec3 V = viewVector;\n  vec3 R = reflect(-V, N);\n  float roughness = material.roughness * material.roughness;\n  vec3 diffuseColor = (1.0 - material.metallic) * material.baseColor;\n\n  // Note: The specular reflectance of metallic surfaces is chromatic\n  // https://google.github.io/filament/Filament.html#listing_fnormal\n  vec3 F0 = 0.16 * material.reflectance * material.reflectance * (1.0 - material.metallic) + material.baseColor * material.metallic;\n\n  float NdotV = dot(N, V);\n\n  vec3 F = fresnelSchlickRoughness(max(NdotV, 0.0), F0, roughness);\n\n  vec3 kS = F;\n  vec3 kD = 1.0 - kS;\n  kD *= 1.0 - material.metallic;\n  float ao = material.ambientOcclusion; \n  \n  vec3 irradiance;\n  vec3 irradianceSampleDir = normal;\n  \n  bool headLightMode = testFlag(envMapFlags, ENVMAP_FLAG_HEADLIGHT);\n  if (headLightMode) {\n    irradianceSampleDir = viewVector;\n  }\n  irradiance = sampleIrradiance(irradianceSampleDir);\n  // vec3 irradiance = shGetIrradianceAt(shCoefficients, N);\n  vec3 diffuse    = irradiance * diffuseColor;\n  \n  const float MAX_REFLECTION_LOD = 4.0;\n  vec3 prefilteredColor = textureLod(prefilterMap, R,  roughness * MAX_REFLECTION_LOD).rgb;   \n  vec2 envBRDF  = texture(brdfLUT, vec2(max(NdotV, 0.0), roughness)).rg;\n  vec3 specular = prefilteredColor * (F * envBRDF.x + envBRDF.y);\n  \n  vec3 radiance = (kD * diffuse + specular) * ao;\n  \n  // Now handle semi-transparent objects. We need to be able to linearly interpolate\n  // opacity to make objects disappear, so we need a continuous change.\n  float opacity = material.opacity;\n  vec4 transparent = vec4((radiance * opacity) + specular, opacity + luminance(specular) + luminance(F));\n  vec4 result = mix(transparent, vec4(radiance, 1.0), opacity);\n\n  // Add emission on as the final component.\n  // Note: emission allows a material to blend off its specular component, \n  // which can also be used to make an object completely disappear if also transparent.\n  return mix(result, vec4(material.baseColor, opacity), material.emission);\n}\n\n#endif // ENABLE_PBR\n"),hV.setShaderModule("SHCoeffs.glsl","#define GLSLIFY 1\nuniform vec3 shCoeffs[9];\n\nvec3 sampleSHCoeffs(vec3 dir) {\n  // dir is assumed to have unit length\n  float x = dir.x, y = dir.y, z = dir.z;\n  // band 0\n  vec3 result = shCoeffs[ 0 ] * 0.886227;\n  // band 1\n  result += shCoeffs[ 1 ] * 2.0 * 0.511664 * y;\n  result += shCoeffs[ 2 ] * 2.0 * 0.511664 * z;\n  result += shCoeffs[ 3 ] * 2.0 * 0.511664 * x;\n  // band 2\n  result += shCoeffs[ 4 ] * 2.0 * 0.429043 * x * y;\n  result += shCoeffs[ 5 ] * 2.0 * 0.429043 * y * z;\n  result += shCoeffs[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n  result += shCoeffs[ 7 ] * 2.0 * 0.429043 * x * z;\n  result += shCoeffs[ 8 ] * 0.429043 * ( x * x - y * y );\n  return result;\n}\n"),hV.setShaderModule("gamma.glsl","#define GLSLIFY 1\nconst float gamma_const = 2.2;\n\nfloat toLinear(float v) {\n  return pow(v, gamma_const);\n}\n\nvec2 toLinear(vec2 v) {\n  return pow(v, vec2(gamma_const));\n}\n\nvec3 toLinear(vec3 v) {\n  return pow(v, vec3(gamma_const));\n}\n\nvec4 toLinear(vec4 v) {\n  return vec4(toLinear(v.rgb), v.a);\n}\n\nfloat toGamma(float v) {\n  return pow(v, 1.0 / gamma_const);\n}\n\nvec2 toGamma(vec2 v) {\n  return pow(v, vec2(1.0 / gamma_const));\n}\n\nvec3 toGamma(vec3 v) {\n  return pow(v, vec3(1.0 / gamma_const));\n}\n\nvec4 toGamma(vec4 v) {\n  return vec4(toGamma(v.rgb), v.a);\n}\n\nfloat toGamma(float v, float gamma) {\n  return pow(v, 1.0 / gamma);\n}\n\nvec2 toGamma(vec2 v, float gamma) {\n  return pow(v, vec2(1.0 / gamma));\n}\n\nvec3 toGamma(vec3 v, float gamma) {\n  return pow(v, vec3(1.0 / gamma));\n}\n\nvec4 toGamma(vec4 v, float gamma) {\n  return vec4(toGamma(v.rgb, gamma), v.a);\n}\n\n"),hV.setShaderModule("inverse.glsl","#define GLSLIFY 1\n\n#ifndef ENABLE_ES3\n\nfloat inverse(float m) {\n  return 1.0 / m;\n}\n\nmat2 inverse(mat2 m) {\n  return mat2(m[1][1],-m[0][1],\n             -m[1][0], m[0][0]) / (m[0][0]*m[1][1] - m[0][1]*m[1][0]);\n}\n\nmat3 inverse(mat3 m) {\n  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\n  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\n  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\n\n  float b01 = a22 * a11 - a12 * a21;\n  float b11 = -a22 * a10 + a12 * a20;\n  float b21 = a21 * a10 - a11 * a20;\n\n  float det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),\n              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),\n              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\n#endif\n\n"),hV.setShaderModule("transpose.glsl","#define GLSLIFY 1\n\n#ifndef ENABLE_ES3\n\nfloat transpose(float m) {\n  return m;\n}\n\nmat2 transpose(mat2 m) {\n  return mat2(m[0][0], m[1][0],\n              m[0][1], m[1][1]);\n}\n\nmat3 transpose(mat3 m) {\n  return mat3(m[0][0], m[1][0], m[2][0],\n              m[0][1], m[1][1], m[2][1],\n              m[0][2], m[1][2], m[2][2]);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(m[0][0], m[1][0], m[2][0], m[3][0],\n              m[0][1], m[1][1], m[2][1], m[3][1],\n              m[0][2], m[1][2], m[2][2], m[3][2],\n              m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\n#endif\n\n"),hV.setShaderModule("quadVertexFromID.glsl","#define GLSLIFY 1\nattribute float vertexIDs;\n\nvec2 getQuadVertexPositionFromID() {\n  int vertexID = int(vertexIDs);\n  if (vertexID == 0)\n    return vec2(-0.5, -0.5);\n  else if (vertexID == 1)\n    return vec2(0.5, -0.5);\n  else if (vertexID == 2)\n    return vec2(-0.5, 0.5);\n  else if (vertexID == 3)\n    return vec2(0.5, 0.5);\n  return vec2(0,0);\n}\n"),hV.setShaderModule("unpackHDR.glsl","#define GLSLIFY 1\n\nvec3 decodeHDR(const in vec3 ldrPixel, const in float cdmAlpha) {\n  float avg = (cdmAlpha * 16.0 - 8.0);\n  float scl = 1.0;\n  vec3 color;\n  color.x = (tan((ldrPixel.x-0.5)*1.5)/scl)+avg;\n  color.y = (tan((ldrPixel.y-0.5)*1.5)/scl)+avg;\n  color.z = (tan((ldrPixel.z-0.5)*1.5)/scl)+avg;\n\n  // convert from logarithmic curve to linear curve.\n  // subtract the epsilon that was added during encoding.\n  const float eps = 0.001;\n  color.x = pow(10.0, color.x) - eps;\n  color.y = pow(10.0, color.y) - eps;\n  color.z = pow(10.0, color.z) - eps;\n  return color;\n}\n\nvec3 decodeHDR(sampler2D ldrSampler, sampler2D cdmSampler, vec2 texCoord) {\n#ifdef ENABLE_ES3\n  float cdm = texture2D(cdmSampler, texCoord).r;\n#else\n  float cdm = texture2D(cdmSampler, texCoord).a;\n#endif\n  return decodeHDR(texture2D(ldrSampler, texCoord).rgb, cdm);\n}\n\n");class EV extends mV{constructor(F){super(F),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(position*2.0, 0.0, 1.0);\n}\n"),this.setShaderStage("FRAGMENT_SHADER"," \nprecision highp float;\n#define GLSLIFY 1\n\nvarying vec2 v_texCoord;\nuniform sampler2D ldrSampler;\nuniform sampler2D cdmSampler;\nuniform vec4 srcRegion; // pos, and size of the source region\n\nimport 'unpackHDR.glsl'\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec2 srcUv = srcRegion.xy + (v_texCoord * srcRegion.zw);\n\n  fragColor = vec4(decodeHDR(ldrSampler, cdmSampler, srcUv), 1.0);\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n\n")}}const LV=(F,U)=>{let Q,B,l;switch(U){case 0:Q=1,B=4,l=F.UNSIGNED_BYTE;break;case 1:Q=1,B=4,l=F.BYTE;break;case 2:Q=1,B=4,l=F.UNSIGNED_SHORT;break;case 3:Q=1,B=4,l=F.SHORT;break;case 4:Q=1,B=4,l=F.UNSIGNED_INT;break;case 5:Q=1,B=4,l=F.INT;break;case 6:Q=1,B=4,l=F.FLOAT;break;case OU:Q=2,B=4,l=F.FLOAT;break;case qU:Q=3,B=4,l=F.FLOAT;break;case $U:case UQ:Q=4,B=4,l=F.FLOAT;break;case FQ:Q=4,B=1,l=F.UNSIGNED_BYTE;break;default:throw"Unhandled Type"}return{dimension:Q,elementSize:B,dataType:l}};class xV{constructor(F,U,Q,B){this.__gl=F,this.__shaderAttrs=U,this.__glattrbuffers=Q,this.__indexBuffer=B}bind(F){const U=this.__gl;for(const F in this.__shaderAttrs){if("instancedIds"==F)continue;const Q=this.__shaderAttrs[F],B=Q.location;if(-1==B)continue;const l=this.__glattrbuffers[F];if(!l){U.disableVertexAttribArray(B);continue}const V=LV(U,l.dataType),d=V.dimension*V.elementSize,R=null!=l.offset?l.offset*V.dimension*V.elementSize:0,t=1==l.normalized,s=Q.instanced;U.enableVertexAttribArray(B),U.bindBuffer(U.ARRAY_BUFFER,l.buffer),U.vertexAttribPointer(B,V.dimension,V.dataType,t,d,R),U.vertexAttribDivisor&&(1==s?U.vertexAttribDivisor(B,1):U.vertexAttribDivisor(B,0))}return U.bindBuffer(U.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),!0}unbind(){const F=this.__gl;for(const U in this.__shaderAttrs){const Q=this.__shaderAttrs[U],B=Q.location;-1==B&&F.enableVertexAttribArray(B),Q.instanced&&F.vertexAttribDivisor(B,0)}F.bindBuffer(F.ELEMENT_ARRAY_BUFFER,null)}destroy(){}}class oV{constructor(F,U,Q,B){this.__gl=F,this.__vao=F.createVertexArray(),F.bindVertexArray(this.__vao);for(const B in U){if("instancedIds"==B)continue;const l=U[B],V=l.location;if(-1==V)continue;let d=Q[B];if(!d&&(B.endsWith("Next")&&(d=Q[B.substring(0,B.length-4)],l.offset=1),!d)){F.disableVertexAttribArray(V);continue}const R=LV(F,d.dataType),t=R.dimension*R.elementSize,s=null!=l.offset?l.offset*R.dimension*R.elementSize:0,i=1==d.normalized,e=l.instanced;F.enableVertexAttribArray(V),F.bindBuffer(F.ARRAY_BUFFER,d.buffer),F.vertexAttribPointer(V,R.dimension,R.dataType,i,t,s),F.vertexAttribDivisor&&(1==e?F.vertexAttribDivisor(V,1):F.vertexAttribDivisor(V,0))}this.__indexBuffer=B,this.__indexBuffer&&this.__gl.bindBuffer(this.__gl.ELEMENT_ARRAY_BUFFER,this.__indexBuffer)}bind(F){return this.__gl.bindVertexArray(this.__vao),this.__indexBuffer&&this.__gl.bindBuffer(this.__gl.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),!0}unbind(){const F=this.__gl;F.bindVertexArray(null),this.__indexBuffer&&F.bindBuffer(F.ELEMENT_ARRAY_BUFFER,null)}destroy(){this.__gl.deleteVertexArray(this.__vao),this.__indexBuffer&&this.__gl.deleteBuffer(this.__indexBuffe)}}function yV(F,U,Q,B){return null==F.createVertexArray?new xV(F,U,Q,B):new oV(F,U,Q,B)}class uV extends bV{constructor(F,U){super(F),this.__hdrImage=U,this.__hdrImage.setMetadata("gltexture",this);const Q=()=>{this.__unpackHDRImage(this.__hdrImage.getParams())};this.__hdrImage.on("updated",Q),this.__hdrImage.isLoaded()?Q():this.__hdrImage.on("loaded",Q)}getImage(){return this.__hdrImage}__unpackHDRImage(F){const U=this.__gl,Q=F.data.ldr,B=F.data.cdm;if(this.__fbo)this.__srcLDRTex.bufferData(Q),this.__srcCDMTex.bufferData(B);else{this.configure({format:"RGBA",type:"FLOAT",width:Q.width,height:Q.height,filter:"LINEAR",wrap:"CLAMP_TO_EDGE"}),this.__fbo=new JV(U,this),this.__fbo.setClearColor([0,0,0,0]),this.__srcLDRTex=new bV(U,{format:"RGB",type:"UNSIGNED_BYTE",width:Q.width,height:Q.height,filter:"NEAREST",mipMapped:!1,wrap:"CLAMP_TO_EDGE",data:Q}),this.__srcCDMTex=new bV(U,{format:"webgl2"==U.name?"RED":"ALPHA",type:"UNSIGNED_BYTE",width:Q.width,height:Q.height,filter:"NEAREST",mipMapped:!1,wrap:"CLAMP_TO_EDGE",data:B}),this.__unpackHDRShader=new EV(U);const F=this.__unpackHDRShader.compileForTarget("GLHDRImage");this.__shaderBinding=yV(U,F.attrs,U.__quadattrbuffers,U.__quadIndexBuffer)}this.__fbo.bindAndClear();const l={};this.__unpackHDRShader.bind(l,"GLHDRImage"),this.__shaderBinding.bind(l);const V=l.unifs;this.__srcLDRTex.bindToUniform(l,V.ldrSampler),this.__srcCDMTex.bindToUniform(l,V.cdmSampler),U.uniform4fv(V.srcRegion.location,[0,0,1,1]),U.drawQuad(),this.__fbo.unbind(),this.emit("updated",{})}bindToUniform(F,U,Q){return super.bindToUniform(F,U,Q)}destroy(){super.destroy(),this.__fbo&&(this.__fbo.destroy(),this.__srcLDRTex.destroy(),this.__srcCDMTex.destroy()),this.__unpackHDRShader&&this.__unpackHDRShader.destroy(),this.__shaderBinding&&this.__shaderBinding.destroy(),this.__hdrImage.loaded.disconnectScope(this),this.__hdrImage.updated.disconnectScope(this)}}class NV extends mV{constructor(F){super(F),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(position*2.0, 0.0, 1.0);\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nvarying vec2 v_texCoord;\n\nimport 'GLSLUtils.glsl'\nimport 'Hammersley.glsl'\nimport 'ImportanceSampleGGX.glsl'\n\nfloat GeometrySchlickGGX(float NdotV, float roughness)\n{\n  float a = roughness;\n  float k = (a * a) / 2.0;\n\n  float nom   = NdotV;\n  float denom = NdotV * (1.0 - k) + k;\n\n  return nom / denom;\n}\n// ----------------------------------------------------------------------------\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)\n{\n  float NdotV = max(dot(N, V), 0.0);\n  float NdotL = max(dot(N, L), 0.0);\n  float ggx2 = GeometrySchlickGGX(NdotV, roughness);\n  float ggx1 = GeometrySchlickGGX(NdotL, roughness);\n\n  return ggx1 * ggx2;\n}\n\nvec2 IntegrateBRDF(float NdotV, float roughness)\n{\n  vec3 V;\n  V.x = sqrt(1.0 - NdotV*NdotV);\n  V.y = 0.0;\n  V.z = NdotV;\n\n  float A = 0.0;\n  float B = 0.0;\n\n  vec3 N = vec3(0.0, 0.0, 1.0);\n\n  for(uint i = 0u; i < SAMPLE_COUNT; ++i)\n  {\n    vec2 Xi = Hammersley(i, SAMPLE_COUNT);\n    vec3 H  = ImportanceSampleGGX(Xi, N, roughness);\n    vec3 L  = normalize(2.0 * dot(V, H) * H - V);\n\n    float NdotL = max(L.z, 0.0);\n    float NdotH = max(H.z, 0.0);\n    float VdotH = max(dot(V, H), 0.0);\n\n    if (NdotL > 0.0)\n    {\n      float G = GeometrySmith(N, V, L, roughness);\n      float G_Vis = (G * VdotH) / (NdotH * NdotV);\n      float Fc = pow(1.0 - VdotH, 5.0);\n\n      A += (1.0 - Fc) * G_Vis;\n      B += Fc * G_Vis;\n    }\n  }\n  A /= float(SAMPLE_COUNT);\n  B /= float(SAMPLE_COUNT);\n  return vec2(A, B);\n}\n\nout vec2 fragColor;\nvoid main(void) {\n  vec2 integratedBRDF = IntegrateBRDF(v_texCoord.x, v_texCoord.y);\n  fragColor = integratedBRDF;\n}\n\n")}}class rV extends mV{constructor(F){super(F),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(position*2.0, 0.0, 1.0);\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\nimport 'constants.glsl'\nimport 'convolve-helpers.glsl'\n\nuniform float roughness;\nuniform int faceId;\nvarying vec2 v_texCoord;\n\nout vec4 fragColor;\nvoid main(void) {\n\n  vec3 N = cubeFaceUvToDir(v_texCoord.x, v_texCoord.y, faceId);   \n\n  vec3 irradiance = vec3(0.0);\n\n  vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n  vec3 tangent   = normalize(cross(up, N));\n  vec3 bitangent = cross(N, tangent);\n\n  float nrSamples = 0.0; \n  for(float phi = 0.0; phi < 2.0 * PI; phi += SAMPLE_DELTA)\n  {\n    for(float theta = 0.0; theta < 0.5 * PI; theta += SAMPLE_DELTA)\n    {\n      // spherical to cartesian (in tangent space)\n      // from spherical coordinates to cartesian coordinates\n      vec3 H = vec3(cos(phi) * sin(theta), sin(phi) * sin(theta), cos(theta));\n      // tangent space to world\n      vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n\n      irradiance += sampleEnvMap(normalize(sampleVec)).rgb * cos(theta) * sin(theta);\n      nrSamples++;\n    }\n  }\n  irradiance = PI * irradiance * (1.0 / float(nrSamples));\n\n  fragColor = vec4(irradiance, 1.0);\n}\n")}}class pV extends mV{constructor(F){super(F),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(position*2.0, 0.0, 1.0);\n}\n"),this.setShaderStage("FRAGMENT_SHADER","precision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'ImportanceSampleGGX.glsl'\nimport 'convolve-helpers.glsl'\nimport 'Hammersley.glsl'\n  \n  \nuniform float roughness;\nuniform int faceId;\nvarying vec2 v_texCoord;\n\nout vec4 fragColor;\nvoid main(void) {\n\n  vec3 N = cubeFaceUvToDir(v_texCoord.x, v_texCoord.y, faceId);   \n\n  vec3 R = N;\n  vec3 V = R;\n\n  float totalWeight = 0.0;   \n  vec3 prefilteredColor = vec3(0.0);     \n  for(uint i = 0u; i < SAMPLE_COUNT; ++i)\n  {\n    vec2 Xi = Hammersley(i, SAMPLE_COUNT);\n    vec3 H  = ImportanceSampleGGX(Xi, N, roughness);\n    vec3 L  = normalize(2.0 * dot(V, H) * H - V);\n\n    float NdotL = max(dot(N, L), 0.0);\n    if (NdotL > 0.0)\n    {\n      prefilteredColor += sampleEnvMap(L).rgb * NdotL;\n      totalWeight      += NdotL;\n    }\n  }\n  prefilteredColor = prefilteredColor / totalWeight;\n\n  fragColor = vec4(prefilteredColor, 1.0);\n}\n")}}class TV extends nQ{constructor(F,U){super(),this.__gl=F,this.maxFragmentShaderTextureUnits=F.getParameter(F.MAX_TEXTURE_IMAGE_UNITS),F.__quadVertexIdsBuffer||F.setupInstancedQuad(),this.textureType=1,this.textureDesc=[0,0,0,0],this.__convolved=!1,this.__fbos=[]}convolveProbe(F){const U=this.__gl,Q={shaderopts:{directives:["#define ENABLE_ES3","#define ENABLE_FLOAT_TEXTURES"]}};"Low"==zU.deviceCategory?(Q.shaderopts.directives.push("#define SAMPLE_DELTA 0.1"),Q.shaderopts.directives.push("#define SAMPLE_COUNT 64u")):"Medium"==zU.deviceCategory?(Q.shaderopts.directives.push("#define SAMPLE_DELTA 0.08"),Q.shaderopts.directives.push("#define SAMPLE_COUNT 256u")):(Q.shaderopts.directives.push("#define SAMPLE_DELTA 0.025"),Q.shaderopts.directives.push("#define SAMPLE_COUNT 1024u")),this.brdfLUTTexture=U.createTexture(),U.bindTexture(U.TEXTURE_2D,this.brdfLUTTexture),U.texImage2D(U.TEXTURE_2D,0,U.RG16F,512,512,0,U.RG,U.FLOAT,null),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_S,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_T,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MIN_FILTER,U.LINEAR),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MAG_FILTER,U.LINEAR);const B=new NV(U),l=yV(U,B.compileForTarget("GLProbe",Q.shaderopts).attrs,U.__quadattrbuffers,U.__quadIndexBuffer),V=U.createFramebuffer();U.bindFramebuffer(U.DRAW_FRAMEBUFFER,V),U.framebufferTexture2D(U.DRAW_FRAMEBUFFER,U.COLOR_ATTACHMENT0,U.TEXTURE_2D,this.brdfLUTTexture,0),B.bind(Q),l.bind(Q),U.clear(U.COLOR_BUFFER_BIT|U.DEPTH_BUFFER_BIT),U.viewport(0,0,512,512),U.drawQuad(),U.bindFramebuffer(U.DRAW_FRAMEBUFFER,null),U.deleteFramebuffer(V),B.unbind(Q),B.destroy();{const B=new rV(U),l=yV(U,B.compileForTarget("GLProbe",Q.shaderopts).attrs,U.__quadattrbuffers,U.__quadIndexBuffer);B.bind(Q,"GLProbe"),l.bind(Q);const V=Q.unifs;F.bindToUniform(Q,V.envMap);const d=64;this.irradianceCubeTex=U.createTexture(),U.bindTexture(U.TEXTURE_CUBE_MAP,this.irradianceCubeTex),U.texParameteri(U.TEXTURE_CUBE_MAP,U.TEXTURE_MAG_FILTER,U.LINEAR),U.texParameteri(U.TEXTURE_CUBE_MAP,U.TEXTURE_MIN_FILTER,U.LINEAR_MIPMAP_LINEAR),U.texParameteri(U.TEXTURE_CUBE_MAP,U.TEXTURE_WRAP_S,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_CUBE_MAP,U.TEXTURE_WRAP_T,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_CUBE_MAP,U.TEXTURE_WRAP_R,U.CLAMP_TO_EDGE);for(let F=0;F<6;F++)U.texImage2D(U.TEXTURE_CUBE_MAP_POSITIVE_X+F,0,U.RGBA32F,d,d,0,U.RGBA,U.FLOAT,null);const R=U.createFramebuffer();U.bindFramebuffer(U.DRAW_FRAMEBUFFER,R);for(let F=0;F<6;++F)U.uniform1i(V.faceId.location,F),U.framebufferTexture2D(U.DRAW_FRAMEBUFFER,U.COLOR_ATTACHMENT0,U.TEXTURE_CUBE_MAP_POSITIVE_X+F,this.irradianceCubeTex,0),U.viewport(0,0,d,d),U.clearColor(1,0,0,1),U.clear(U.COLOR_BUFFER_BIT|U.DEPTH_BUFFER_BIT),U.drawQuad();U.bindFramebuffer(U.DRAW_FRAMEBUFFER,null),U.deleteFramebuffer(R),U.generateMipmap(U.TEXTURE_CUBE_MAP)}{const B=new pV(U),l=yV(U,B.compileForTarget("GLProbe",Q.shaderopts).attrs,U.__quadattrbuffers,U.__quadIndexBuffer);B.bind(Q,"GLProbe"),l.bind(Q);const V=Q.unifs;F.bindToUniform(Q,V.envMap),this.specularCubetex=U.createTexture(),U.bindTexture(U.TEXTURE_CUBE_MAP,this.specularCubetex),U.texParameteri(U.TEXTURE_CUBE_MAP,U.TEXTURE_MAG_FILTER,U.LINEAR),U.texParameteri(U.TEXTURE_CUBE_MAP,U.TEXTURE_MIN_FILTER,U.LINEAR_MIPMAP_LINEAR),U.texParameteri(U.TEXTURE_CUBE_MAP,U.TEXTURE_WRAP_S,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_CUBE_MAP,U.TEXTURE_WRAP_T,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_CUBE_MAP,U.TEXTURE_WRAP_R,U.CLAMP_TO_EDGE);const d=256;for(let F=0;F<6;F++)U.texImage2D(U.TEXTURE_CUBE_MAP_POSITIVE_X+F,0,U.RGBA32F,d,d,0,U.RGBA,U.FLOAT,null);U.generateMipmap(U.TEXTURE_CUBE_MAP);const R=5;for(let F=0;F<R;++F){const Q=d*Math.pow(.5,F),B=d*Math.pow(.5,F),l=U.createFramebuffer();U.bindFramebuffer(U.DRAW_FRAMEBUFFER,l),U.viewport(0,0,Q,B);const t=F/(R-1);U.uniform1f(V.roughness.location,t);for(let Q=0;Q<6;++Q)U.uniform1i(V.faceId.location,Q),U.framebufferTexture2D(U.DRAW_FRAMEBUFFER,U.COLOR_ATTACHMENT0,U.TEXTURE_CUBE_MAP_POSITIVE_X+Q,this.specularCubetex,F),U.drawQuad();U.bindFramebuffer(U.DRAW_FRAMEBUFFER,null),U.deleteFramebuffer(l)}B.destroy()}this.__convolved=!0}bind(F){const U=this.__gl,{irradianceMap:Q,prefilterMap:B,brdfLUT:l,envMapFlags:V}=F.unifs;if(!this.__convolved)return Q&&U.uniform1i(Q.location,this.maxFragmentShaderTextureUnits-1),B&&U.uniform1i(B.location,this.maxFragmentShaderTextureUnits-1),V&&U.uniform1i(V.location,-1),!1;if(l){const Q=F.boundTextures++;U.activeTexture(this.__gl.TEXTURE0+Q),U.bindTexture(U.TEXTURE_2D,this.brdfLUTTexture),U.uniform1i(l.location,Q)}if(Q){const B=F.boundTextures++,l=this.__gl.TEXTURE0+B;U.activeTexture(l),U.bindTexture(U.TEXTURE_CUBE_MAP,this.irradianceCubeTex),U.uniform1i(Q.location,B)}if(B){const Q=F.boundTextures++,l=this.__gl.TEXTURE0+Q;U.activeTexture(l),U.bindTexture(U.TEXTURE_CUBE_MAP,this.specularCubetex),U.uniform1i(B.location,Q)}return V&&U.uniform1i(V.location,0),!0}destroy(){}}class YV extends mV{constructor(F){super(F),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\n\nimport 'inverse.glsl'\nimport 'transpose.glsl'\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID() * 2.0;\n  v_texCoord = position * 0.5 + 0.5;\n\n  mat4 inverseProjection = inverse(projectionMatrix);\n  mat3 inverseModelview = transpose(mat3(viewMatrix));\n\n  // transform from the normalized device coordinates back to the view space\n  vec3 unprojected = (inverseProjection * vec4(position, 0, 1)).xyz;\n\n  // transfrom from the view space back to the world space\n  // and use it as a sampling vector\n  v_worldDir = inverseModelview * unprojected;\n\n  gl_Position = vec4(position, 0, 1);\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'gamma.glsl'\nimport 'constants.glsl'\n\nuniform float focus;\nuniform float exposure;\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\nvarying vec2 v_texCoord;\n\n#define ENABLE_INLINE_GAMMACORRECTION\n\n#define ENV_MAP_LATLONG 0\n#define ENV_MAP_OCT 1\n#define ENV_MAP_CUBE 2\n#define ENV_MAP_irradianceMap 8\n#define ENV_MAP_prefilterMap 3\n#define ENV_MAP_STEREO_LATLONG 4\n#define ENV_MAP_DUALFISHEYE 5\n#define ENV_MAP_SH 6\n#define ENV_MAP_BRDF_LUT 7\n\n#define ENV_MAPTYPE ENV_MAP_OCT\n\n#if (ENV_MAPTYPE == ENV_MAP_LATLONG)  \n\nimport 'envmap-equirect.glsl'\n\nuniform sampler2D backgroundImage;\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = latLongUVsFromDir(normalize(dir));\n  vec4 texel = texture2D(backgroundImage, uv) * exposure;\n  return vec4(texel.rgb/texel.a, 1.0);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_OCT)  \n\nimport 'envmap-octahedral.glsl'\n\nuniform sampler2D   envMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = dirToSphOctUv(normalize(dir));\n  if (false) {\n    vec4 texel = texture2D(envMap, uv);\n    return vec4(texel.rgb/texel.a, 1.0);\n  }\n  else {\n    return texture2D(envMap, uv) * exposure;\n  }\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_CUBE)\n\nuniform samplerCube cubeMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return texture(cubeMap, dir, 0.0);// * exposure;\n  // return textureLod(cubeMap, dir, exposure);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_irradianceMap)\n\nuniform samplerCube irradianceMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return textureLod(irradianceMap, dir, exposure);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_prefilterMap)\n\nuniform samplerCube prefilterMap;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return textureLod(prefilterMap, dir, exposure);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_STEREO_LATLONG)  \n\nimport 'envmap-equirect.glsl'\nuniform int eye;// L = 0, R = 1;\nuniform sampler2D backgroundImage;\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = latLongUVsFromDir(normalize(v_worldDir));\n  uv.y *= 0.5;\n  if (eye == 1) {\n    uv.y += 0.5;\n  }\n  vec4 texel = texture2D(backgroundImage, uv) * exposure;\n  fragColor = vec4(texel.rgb/texel.a, 1.0);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_DUALFISHEYE)\n\nimport 'envmap-dualfisheye.glsl'\n\nvec4 sampleEnvMap(vec3 dir) {\n  vec2 uv = dualfisheyeUVsFromDir(dir);\n  return texture2D(backgroundImage, uv) * exposure;\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_SH)\n\nimport 'SHCoeffs.glsl'\n\nvec4 sampleEnvMap(vec3 dir) {\n\treturn vec4(sampleSHCoeffs(dir) * exposure, 1.0);\n}\n\n#elif (ENV_MAPTYPE == ENV_MAP_BRDF_LUT)\n\nuniform sampler2D brdfLUT;\n\nvec4 sampleEnvMap(vec3 dir) {\n  return texture2D(brdfLUT, v_texCoord);\n}\n#endif\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  fragColor = sampleEnvMap(normalize(v_worldDir));\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb);\n#endif\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}class kV extends TV{constructor(F,U){super(F.gl,"EnvMap"),this.__renderer=F,this.__envMap=U,this.__backgroundFocus=0,this.__envMap.isLoaded()?this.init():this.__envMap.once("loaded",(F=>{this.init()}))}init(){const F=this.__renderer.gl;F.__quadVertexIdsBuffer||F.setupInstancedQuad(),this.__srcGLTex=new uV(F,this.__envMap),this.__envMapShader=new YV(F);const U=this.__envMapShader.compileForTarget("GLEnvMap");this.__envMapShaderBinding=yV(F,U.attrs,F.__quadattrbuffers,F.__quadIndexBuffer);const Q=this.__envMap.getParameter("HeadLightMode"),B=()=>{Q.getValue()?this.textureDesc[3]|=1:this.textureDesc[3]&=-2};B(),Q.on("valueChanged",(()=>{B(),this.emit("updated")})),this.convolveProbe(this.__srcGLTex),this.emit("updated")}getEnvMap(){return this.__envMap}getBackgroundFocus(){return this.__backgroundFocus}setBackgroundFocus(F){this.__backgroundFocus=F,this.__renderer.requestRedraw()}draw(F){if(this.__envMap.isLoaded()){const U=this.__gl;{this.__envMapShader.bind(F,"GLEnvMap");const Q=F.unifs,{envMap:B,focus:l,exposure:V}=F.unifs;B&&this.__srcGLTex.bindToUniform(F,B),l&&U.uniform1f(l.location,this.__backgroundFocus),V&&U.uniform1f(V.location,F.exposure),this.__envMapShaderBinding.bind(F),U.depthMask(!1),F.bindViewports(Q,(()=>{U.drawQuad()}))}}}destroy(){super.destroy(),this.__srcGLTex.destroy()}}class HV extends mV{constructor(F){super(F),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\nuniform vec2 pos;\nuniform vec2 size;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(vec2(-1.0, -1.0) + (pos * 2.0) + (v_texCoord * abs(size) * 2.0), 0.0, 1.0);\n  if (size.x < 0.0)\n    v_texCoord.x = 1.0 - v_texCoord.x;\n  if (size.y < 0.0)\n    v_texCoord.y = 1.0 - v_texCoord.y;\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D image;\n\nvarying vec2 v_texCoord;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n  fragColor = texture2D(image, v_texCoord);\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}class MV{constructor(F){this.__gl=F,this.__pos=[0,0],this.__size=[1,1],this.flipY=!0,this.__glshader=new HV(F),F.__quadVertexIdsBuffer||F.setupInstancedQuad();const U=this.__glshader.compileForTarget("GLScreenQuad");this.__quadBinding=yV(F,U.attrs,F.__quadattrbuffers,F.__quadIndexBuffer),this.ready=!0}bind(F,U,Q,B){const l=F.unifs;U&&U.bindToUniform(F,F.unifs.image);const V=this.__gl;{const F=l.pos;F&&V.uniform2fv(F.location,Q?Q instanceof _U?Q.asArray():Q:this.__pos)}{const F=l.size;F&&V.uniform2fv(F.location,B?B instanceof _U?B.asArray():B:this.__size)}this.__quadBinding.bind(F)}bindShader(F){return this.__glshader.bind(F,"GLScreenQuad")}draw(F,U,Q,B){this.bind(F,U,Q,B),this.__gl.drawQuad()}destroy(){}}class AV extends hQ{constructor(F,U){super(),this.__gl=F,this.__geom=U,this.__glattrbuffers={},this.__shaderBindings={},this.buffersDirty=!0;this.__geom.on("geomDataChanged",(F=>{this.dirtyBuffers(F)}));this.__geom.on("geomDataTopologyChanged",(F=>{this.clearBuffers(),this.dirtyBuffers(F)}))}getGeom(){return this.__geom}dirtyBuffers(F){this.genBufferOpts=F,this.buffersDirty=!0,this.emit("updated")}genBuffers(F){}updateBuffers(F){this.genBuffers(F),this.buffersDirty=!1}bind(F){if(this.__destroyed)throw new Error("Error binding a destroyed geom");this.buffersDirty&&this.updateBuffers();let U=this.__shaderBindings[F.shaderkey];if(!U){U=yV(this.__gl,F.attrs,this.__glattrbuffers,this.__indexBuffer),this.__shaderBindings[F.shaderkey]=U}return U.bind(F),!0}unbind(F){const U=this.__shaderBindings[F.shaderkey];U&&U.unbind(F)}draw(F){throw new Error("Not implemented. Implement this method in a derived class.")}drawInstanced(F,U){throw new Error("Not implemented. Implement this method in a derived class.")}bindAndDraw(F){this.bind(F),this.draw(F)}clearBuffers(){const F=this.__gl;for(const U in this.__glattrbuffers){const Q=this.__glattrbuffers[U];Q.shared||F.deleteBuffer(Q.buffer)}this.__glattrbuffers={};for(const F in this.__shaderBindings){this.__shaderBindings[F].destroy()}this.__shaderBindings={}}destroy(){this.__geom.deleteMetadata("glgeom"),this.clearBuffers(),this.__destroyed=!0,this.emit("destructing",{})}}class vV extends AV{constructor(F,U){super(F,U)}genBuffers(){super.genBuffers();const F=this.__gl,U=this.__geom.genBuffers(),Q=U.indices;this.__numTriIndices=U.indices.length,Q instanceof Uint8Array&&(this.__indexDataType=this.__gl.UNSIGNED_BYTE),Q instanceof Uint16Array&&(this.__indexDataType=this.__gl.UNSIGNED_SHORT),Q instanceof Uint32Array&&(this.__indexDataType=this.__gl.UNSIGNED_INT),this.__numVertices=this.__geom.getNumVertices(),this.__numTriangles=Q.length/3,this.__numRenderVerts=U.numRenderVerts,this.__indexBuffer&&F.deleteBuffer(this.__indexBuffer),this.__indexBuffer=F.createBuffer(),F.bindBuffer(F.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),F.bufferData(F.ELEMENT_ARRAY_BUFFER,U.indices,F.STATIC_DRAW);for(const Q in U.attrBuffers){const B=U.attrBuffers[Q];this.__glattrbuffers[Q]&&this.__glattrbuffers[Q].buffer&&F.deleteBuffer(this.__glattrbuffers[Q].buffer);const l=F.createBuffer();F.bindBuffer(F.ARRAY_BUFFER,l),F.bufferData(F.ARRAY_BUFFER,B.values,F.STATIC_DRAW),this.__glattrbuffers[Q]={buffer:l,dataType:B.dataType,normalized:B.normalized},"textureCoords"==Q&&(this.__glattrbuffers.texCoords=this.__glattrbuffers.textureCoords)}}updateBuffers(F){const U=this.__gl;if(this.__numVertices!=this.__geom.getNumVertices())return void this.genBuffers();const Q=this.__geom.genBuffers({includeIndices:!1});for(const F in Q.attrBuffers){const B=Q.attrBuffers[F],l=this.__glattrbuffers[F];U.bindBuffer(U.ARRAY_BUFFER,l.buffer),U.bufferData(U.ARRAY_BUFFER,B.values,U.STATIC_DRAW)}this.buffersDirty=!1}clearBuffers(){this.__gl.deleteBuffer(this.__indexBuffer),this.__indexBuffer=null,super.clearBuffers()}generateWireframesVAO(){if(!this.__vao)return!1;this.__geom.edgeVerts||this.__geom.genTopologyInfo(),this.__wireframesVao&&this.__ext.deleteVertexArrayOES(this.__wireframesVao),this.__wireframesVao=this.__ext.createVertexArrayOES(),this.__ext.bindVertexArrayOES(this.__wireframesVao);const F=this.__gl,U=F.createBuffer(),Q=Uint32Array.from(this.__geom.edgeVerts);F.bindBuffer(F.ELEMENT_ARRAY_BUFFER,U),F.bufferData(F.ELEMENT_ARRAY_BUFFER,Q,F.STATIC_DRAW);const B=this.__glattrbuffers.positions.buffer;F.enableVertexAttribArray(0),F.bindBuffer(F.ARRAY_BUFFER,B),F.vertexAttribPointer(0,3,F.FLOAT,!1,12,0),this.__numWireIndices=Q.length,this.__ext.bindVertexArrayOES(null)}bindWireframeVAO(F){return null!=this.__wireframesVao&&(this.__ext.bindVertexArrayOES(this.__wireframesVao),!0)}unbindWireframeVAO(){this.__ext.bindVertexArrayOES(null)}drawWireframe(){this.__wireframesVao&&this.__gl.drawElements(this.__gl.LINES,this.__numWireIndices,this.__gl.UNSIGNED_INT,0)}generateHardEdgesVAO(){if(!this.__vao)return!1;this.__hardEdgesVao&&this.__ext.deleteVertexArrayOES(this.__hardEdgesVao),this.__hardEdgesVao=this.__ext.createVertexArrayOES(),this.__ext.bindVertexArrayOES(this.__hardEdgesVao);const F=this.__gl,U=F.createBuffer(),Q=this.__geom.computeHardEdgesIndices();F.bindBuffer(F.ELEMENT_ARRAY_BUFFER,U),F.bufferData(F.ELEMENT_ARRAY_BUFFER,Q,F.STATIC_DRAW);const B=this.__glattrbuffers.positions.buffer;F.enableVertexAttribArray(0),F.bindBuffer(F.ARRAY_BUFFER,B),F.vertexAttribPointer(0,3,F.FLOAT,!1,12,0),this.__numEdgeIndices=Q.length,this.__ext.bindVertexArrayOES(null)}bindHardEdgesVAO(F){return null!=this.__hardEdgesVao&&(this.__ext.bindVertexArrayOES(this.__hardEdgesVao),!0)}unbindHardEdgesVAO(){this.__ext.bindVertexArrayOES(null)}drawHardEdges(){this.__hardEdgesVao&&this.__gl.drawElements(this.__gl.LINES,this.__numEdgeIndices,this.__gl.UNSIGNED_INT,0)}drawPoints(){this.__gl.drawArrays(this.__gl.POINTS,0,this.__geom.numVertices())}draw(F){this.__gl.drawElements(this.__gl.TRIANGLES,this.__numTriIndices,this.__indexDataType,0)}drawInstanced(F,U){this.__gl.drawElementsInstanced(this.__gl.TRIANGLES,this.__numTriIndices,this.__indexDataType,0,U)}destroy(){super.destroy();this.__gl.deleteBuffer(this.__indexBuffer),this.__indexBuffer=void 0}}const zV={MSAA_RENDERBUFFER:0,COLORBUFFER:1,DEPTHBUFFER:2};class DV extends WQ{constructor(F){super(),this.renderer=F,this.__renderer=F,this.__doubleClickTimeMSParam=this.addParameter(new pQ("DoubleClickTimeMS",200)),this.__fbo=void 0,this.__ongoingPointers=[],this.__backgroundColor=new UQ(.3,.3,.3,1);const U=this.__renderer.gl;this.quad=new vV(U,new qB(1,1)),"webgl2"==U.name&&(this.offscreenBuffer=new bV(U,{type:"UNSIGNED_BYTE",format:"RGBA",filter:"LINEAR",width:4,height:4}),this.depthTexture=new bV(U,{type:U.UNSIGNED_INT_24_8,format:U.DEPTH_STENCIL,internalFormat:"webgl2"==U.name?U.DEPTH24_STENCIL8:U.DEPTH_COMPONENT,filter:U.NEAREST,wrap:U.CLAMP_TO_EDGE,width:4,height:4})),this.highlightedGeomsBuffer=new bV(U,{type:"UNSIGNED_BYTE",format:"RGBA",filter:"NEAREST",width:4,height:4}),this.highlightedGeomsBufferFbo=new JV(U,this.highlightedGeomsBuffer,!0),this.highlightedGeomsBufferFbo.setClearColor([0,0,0,0]);const Q=()=>{const Q=F.getScene().settings.getParameter("BackgroundColor"),B=()=>{const F=Q.getValue();F instanceof WB?"FLOAT"===F.type?(this.__backgroundTexture=F,this.__backgroundGLTexture=new uV(U,F)):(this.__backgroundTexture=F,this.__backgroundGLTexture=new bV(U,F)):F instanceof UQ?(this.__backgroundGLTexture&&(this.__backgroundGLTexture.destroy(),this.__backgroundGLTexture=void 0,this.__backgroundTexture=void 0),this.__backgroundColor=F,this.offscreenBufferFbo&&this.offscreenBufferFbo.setClearColor(F.asArray())):console.warn("Invalid background:"+F),this.emit("updated",{})};B(),Q.on("valueChanged",B)};this.__renderer.getScene()?Q(this.__renderer.getScene()):this.__renderer.on("sceneSet",Q)}getRenderer(){return this.__renderer}getWidth(){return this.__width}getHeight(){return this.__height}getBackground(){console.warn("Deprecated Function. Please access the Scene Settings object.");return this.__renderer.getScene().settings.getParameter("BackgroundColor").getValue()}setBackground(F){console.warn("Deprecated Function. Please access the Scene Settings object.");this.__renderer.getScene().settings.getParameter("BackgroundColor").setValue(F),this.emit("updated",{})}resize(F,U){this.__canvasWidth==F&&this.__canvasHeight==U||(this.__canvasWidth=F,this.__canvasHeight=U,this.__width=F,this.__height=U,this.resizeRenderTargets(F,U),this.emit("resized",{width:this.__width,height:this.__height}))}resizeRenderTargets(F,U){const Q=this.__renderer.gl;if(this.renderer.outlineThickness>0&&"webgl2"==Q.name){this.fb&&(Q.deleteFramebuffer(this.fb[zV.MSAA_RENDERBUFFER]),Q.deleteFramebuffer(this.fb[zV.COLORBUFFER]),Q.deleteFramebuffer(this.fb[zV.DEPTHBUFFER]),this.colorRenderbuffer&&Q.deleteRenderbuffer(this.colorRenderbuffer),this.depthBuffer&&Q.deleteRenderbuffer(this.depthBuffer)),this.offscreenBuffer.resize(F,U),this.depthTexture.resize(F,U),this.fb=[],this.fb[zV.MSAA_RENDERBUFFER]=Q.createFramebuffer(),Q.bindFramebuffer(Q.FRAMEBUFFER,this.fb[zV.MSAA_RENDERBUFFER]),this.colorRenderbuffer=Q.createRenderbuffer(),Q.bindRenderbuffer(Q.RENDERBUFFER,this.colorRenderbuffer),Q.renderbufferStorageMultisample(Q.RENDERBUFFER,4,Q.RGBA8,F,U),Q.framebufferRenderbuffer(Q.FRAMEBUFFER,Q.COLOR_ATTACHMENT0,Q.RENDERBUFFER,this.colorRenderbuffer),this.depthBuffer=Q.createRenderbuffer(),Q.bindRenderbuffer(Q.RENDERBUFFER,this.depthBuffer),Q.renderbufferStorageMultisample(Q.RENDERBUFFER,4,Q.DEPTH24_STENCIL8,F,U),Q.framebufferRenderbuffer(Q.FRAMEBUFFER,Q.DEPTH_ATTACHMENT,Q.RENDERBUFFER,this.depthBuffer),this.fb[zV.COLORBUFFER]=Q.createFramebuffer(),Q.bindFramebuffer(Q.FRAMEBUFFER,this.fb[zV.COLORBUFFER]),Q.framebufferTexture2D(Q.FRAMEBUFFER,Q.COLOR_ATTACHMENT0,Q.TEXTURE_2D,this.offscreenBuffer.glTex,0),Q.bindFramebuffer(Q.FRAMEBUFFER,null),this.fb[zV.DEPTHBUFFER]=Q.createFramebuffer(),Q.bindFramebuffer(Q.FRAMEBUFFER,this.fb[zV.DEPTHBUFFER]),Q.framebufferTexture2D(Q.FRAMEBUFFER,Q.DEPTH_ATTACHMENT,Q.TEXTURE_2D,this.depthTexture.glTex,0),Q.bindFramebuffer(Q.FRAMEBUFFER,null);const B=Q.checkFramebufferStatus("webgl2"==Q.name?Q.DRAW_FRAMEBUFFER:Q.FRAMEBUFFER);if(B!==Q.FRAMEBUFFER_COMPLETE)switch(B){case Q.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw new Error("The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.");case Q.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw new Error("There is no attachment.");case Q.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("Height and width of the attachment are not the same.");case Q.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.");case 36061:throw new Error("The framebuffer is unsupported");default:throw new Error("Incomplete Frambuffer")}}this.highlightedGeomsBuffer&&this.highlightedGeomsBuffer.resize(F,U)}draw(F={}){const U=this.__renderer.gl,Q=F.boundRendertarget;this.renderer.outlineThickness>0&&"webgl2"==U.name?(this.fb||this.resizeRenderTargets(this.__width,this.__height),U.bindFramebuffer(U.DRAW_FRAMEBUFFER,this.fb[zV.MSAA_RENDERBUFFER]),F.boundRendertarget=this.fb[zV.MSAA_RENDERBUFFER]):F.boundRendertarget||U.bindFramebuffer(U.FRAMEBUFFER,null),U.viewport(0,0,this.__width,this.__height),U.clearColor(...this.__backgroundColor.asArray()),U.colorMask(!0,!0,!0,!1),U.clear(U.COLOR_BUFFER_BIT|U.DEPTH_BUFFER_BIT),U.enable(U.DEPTH_TEST),this.__renderer.drawScene(F),this.drawHighlights(F),this.fb&&(U.bindFramebuffer(U.READ_FRAMEBUFFER,this.fb[zV.MSAA_RENDERBUFFER]),U.bindFramebuffer(U.DRAW_FRAMEBUFFER,this.fb[zV.COLORBUFFER]),U.clearBufferfv(U.COLOR,0,[0,0,0,0]),U.blitFramebuffer(0,0,this.__width,this.__height,0,0,this.__width,this.__height,U.COLOR_BUFFER_BIT,U.LINEAR),U.bindFramebuffer(U.DRAW_FRAMEBUFFER,Q),F.boundRendertarget=Q,U.viewport(0,0,this.__width,this.__height),U.disable(U.DEPTH_TEST),U.screenQuad.bindShader(F),U.screenQuad.draw(F,this.offscreenBuffer))}drawSilhouettes(F){const U=this.__renderer.gl;if(0==this.renderer.outlineThickness||"webgl2"!=U.name||!this.fb)return;if(U.bindFramebuffer(U.READ_FRAMEBUFFER,this.fb[zV.MSAA_RENDERBUFFER]),U.bindFramebuffer(U.DRAW_FRAMEBUFFER,this.fb[zV.DEPTHBUFFER]),U.clearBufferfv(U.COLOR,0,[1,1,1,1]),U.blitFramebuffer(0,0,this.__width,this.__height,0,0,this.__width,this.__height,U.DEPTH_BUFFER_BIT,U.NEAREST),U.bindFramebuffer(U.DRAW_FRAMEBUFFER,this.fb[zV.MSAA_RENDERBUFFER]),F.boundRendertarget=this.fb[zV.MSAA_RENDERBUFFER],U.viewport(0,0,this.__width,this.__height),0==this.renderer.outlineThickness)return;U.enable(U.BLEND),U.blendEquation(U.FUNC_ADD),U.blendFunc(U.SRC_ALPHA,U.ONE_MINUS_SRC_ALPHA),U.disable(U.DEPTH_TEST),U.depthMask(!1),this.renderer.silhouetteShader.bind(F);const Q=F.unifs;this.depthTexture.bindToUniform(F,Q.depthTexture),U.uniform2f(Q.screenSize.location,this.__width,this.__height),U.uniform1f(Q.outlineThickness.location,this.renderer.outlineThickness),U.uniform4f(Q.outlineColor.location,...this.renderer.outlineColor.asArray()),U.uniform1f(Q.outlineSensitivity.location,this.renderer.outlineSensitivity),U.uniform1f(Q.outlineDepthBias.location,this.renderer.outlineDepthBias),U.uniform2f(Q.depthRange.location,F.depthRange[0],F.depthRange[1]),this.quad.bindAndDraw(F),U.enable(U.DEPTH_TEST),U.depthMask(!0)}drawHighlights(F){if(this.highlightedGeomsBufferFbo){const U=this.__renderer.gl;this.highlightedGeomsBufferFbo.bindForWriting(F),this.highlightedGeomsBufferFbo.clear(),U.disable(U.BLEND),U.enable(U.DEPTH_TEST),U.depthFunc(U.LESS),U.depthMask(!0),F.glShader=null,this.__renderer.drawHighlightedGeoms(F),this.highlightedGeomsBufferFbo.unbindForWriting(F),U.viewport(0,0,this.__width,this.__height);{this.renderer.highlightsShader.bind(F),U.enable(U.BLEND),U.blendEquation(U.FUNC_ADD),U.blendFunc(U.SRC_ALPHA,U.ONE_MINUS_SRC_ALPHA);const Q=F.unifs;U.uniform1f(Q.outlineThickness.location,this.renderer.highlightOutlineThickness),this.highlightedGeomsBuffer.bindToUniform(F,Q.highlightDataTexture),U.uniform2f(Q.highlightDataTextureSize.location,F.region[2],F.region[3]),this.quad.bindAndDraw(F),U.disable(U.BLEND)}}}getManipulator(){return this.manipulator}setManipulator(F){this.manipulator!=F&&(this.manipulator&&this.manipulator.deactivateTool&&this.manipulator.deactivateTool(),this.manipulator=F,this.manipulator.activateTool&&this.manipulator.activateTool())}onPointerDown(F){console.warn("@GLBaseViewport#onPointerDown - Implement me!")}onPointerUp(F){console.warn("@GLBaseViewport#onPointerUp - Implement me!")}onPointerMove(F){console.warn("@GLBaseViewport#onPointerMove - Implement me!")}onPointerEnter(F){console.warn("@GLBaseViewport#onPointerEnter - Implement me!")}onPointerLeave(F){console.warn("@GLBaseViewport#onPointerLeave - Implement me!")}onMouseLeave(F){}onKeyDown(F){}onKeyUp(F){}_getOngoingPointerIndexById(F){return this.__ongoingPointers.findIndex((U=>U.pointerId===F))}}class KV extends DV{constructor(F,U,Q,B){super(F),this.__name=U,this.__projectionMatrix=new lQ,this.__frustumDim=new OU,this.__bl=new OU(0,0),this.__tr=new OU(1,1),this.__prevDownTime=0,this.__geomDataBuffer=void 0,this.__geomDataBufferSizeFactor=1,this.__geomDataBufferFbo=void 0,this.debugGeomShader=!1;const l=this.__renderer.gl;this.__geomDataBuffer=new bV(l,{type:F.__floatGeomBuffer?"FLOAT":"UNSIGNED_BYTE",format:"RGBA",filter:"NEAREST",width:Q<=1?1:Math.floor(Q/this.__geomDataBufferSizeFactor),height:B<=1?1:Math.floor(B/this.__geomDataBufferSizeFactor)}),this.__geomDataBufferFbo=new JV(l,this.__geomDataBuffer,!0),this.__geomDataBufferFbo.setClearColor([0,0,0,0]),this.setCamera(new fl("DefaultCamera")),this.setManipulator(new cV({renderer:F})),this.resize(Q,B)}getBl(){return this.__bl}setBl(F){this.__bl=F,this.resize(this.__canvasWidth,this.__canvasHeight)}getTr(){return this.__tr}setTr(F){this.__tr=F,this.resize(this.__canvasWidth,this.__canvasHeight)}getPosX(){return this.__x}getPosY(){return this.__y}resize(F,U){this.__canvasWidth==F&&this.__canvasHeight==U||(this.__canvasWidth=F,this.__canvasHeight=U,this.__x=F*this.__bl.x,this.__y=F*this.__bl.y,this.__width=F*this.__tr.x-F*this.__bl.x,this.__height=U*this.__tr.y-U*this.__bl.y,this.region=[this.__x,this.__y,this.__width,this.__height],this.resizeRenderTargets(this.__width,this.__height),this.__camera&&this.__updateProjectionMatrix(),this.emit("resized",{width:this.__width,height:this.__height}))}resizeRenderTargets(F,U){super.resizeRenderTargets(F,U),this.__geomDataBufferFbo&&(this.__geomDataBuffer.resize(Math.floor(this.__width/this.__geomDataBufferSizeFactor),Math.floor(this.__height/this.__geomDataBufferSizeFactor)),this.renderGeomDataFbo())}getCamera(){return this.__camera}setCamera(F){this.__camera=F,this.depthRange=[this.__camera.getNear(),this.__camera.getFar()];const U=F.getParameter("GlobalXfo"),Q=()=>{this.__cameraXfo=U.getValue(),this.__cameraMat=this.__cameraXfo.toMat4(),this.__viewMat=this.__cameraMat.inverse()};Q(),U.on("valueChanged",(()=>{Q(),this.invalidateGeomDataBuffer(),this.emit("updated"),this.emit("viewChanged",{interfaceType:"CameraAndPointer",viewXfo:this.__cameraXfo,focalDistance:this.__camera.getFocalDistance(),fieldOfView:this.__camera.getFov()})})),this.__camera.on("projectionParamChanged",(()=>{this.__updateProjectionMatrix(),this.depthRange=[this.__camera.getNear(),this.__camera.getFar()],this.emit("updated")})),this.__updateProjectionMatrix()}__updateProjectionMatrix(){const F=this.__width/this.__height;this.__camera.updateProjectionMatrix(this.__projectionMatrix,F);const U=Math.tan(this.__camera.getFov()/2)*this.__camera.getNear()*2,Q=U*F;this.__frustumDim.set(Q,U)}getProjectionMatrix(){return this.__projectionMatrix}getViewMatrix(){return this.__viewMat}setActive(F){activeViewport=F?this:void 0}frameView(F){this.__width>0&&this.__height>0?this.__camera.frameView(this,F):this.once("resized",(()=>this.frameView()))}calcRayFromScreenPos(F){const U=this.__canvasHeight*(1-this.__tr.y);let Q=(F.x-this.__x)/this.__width,B=(F.y-U)/this.__height;Q=2*Q-1,B=2*B-1;const l=this.__cameraMat,V=this.__projectionMatrix.inverse();if(null==V)return null;let d,R;if(this.__camera.isOrthographic()){const F=V.transformVec3(new qU(Q,-B,-1));F.z=0,d=l.transformVec3(F),R=new qU(0,0,-1)}else d=l.translation,R=V.transformVec3(new qU(Q,-B,-1));return R=l.rotateVec3(R).normalize(),new dQ(d,R)}renderGeomDataFbo(){if(this.__geomDataBufferFbo){const F={};this.__initRenderState(F),F.geomDataFbo=this.__geomDataBufferFbo,this.__geomDataBufferFbo.bindAndClear(F),this.__renderer.drawSceneGeomData(F),this.__geomDataBufferInvalid=!1,this.__geomDataBufferFbo.unbind()}}invalidateGeomDataBuffer(){this.__geomDataBufferInvalid=!0}getGeomDataAtPos(F,U){if(this.__geomDataBufferFbo){if(this.__geomDataBufferInvalid&&(this.renderGeomDataFbo(),this.__screenPos=null),F===this.__screenPos)return this.__intersectionData;this.__screenPos=F,this.__intersectionData=null;const Q=this.__renderer.gl;Q.finish(),this.__geomDataBufferFbo.bindForReading();const B=this.__geomDataBufferFbo.width,l=this.__geomDataBufferFbo.height,V=Math.floor(F.x*(B/this.__width)),d=Math.floor(F.y*(l/this.__height));let R,t;if(this.__renderer.__floatGeomBuffer){if(t=new Float32Array(4),Q.readPixels(V,l-d-1,1,1,Q.RGBA,Q.FLOAT,t),0==t[3])return;R=63&Math.round(t[0])}else{if(t=new Uint8Array(4),Q.readPixels(V,l-d-1,1,1,Q.RGBA,Q.UNSIGNED_BYTE,t),Q.bindFramebuffer(Q.FRAMEBUFFER,null),0==t[0]&&0==t[1])return;R=Math.floor(t[1]/32)}this.__geomDataBufferFbo.unbind();const s=this.__renderer.getPass(R);if(!s)return void console.warn("Geom data buffer returns invalid pass id:",R);const i=s.getGeomItemAndDist(t);if(i){if(!i.geomItem.getSelectable())return;U||(U=this.calcRayFromScreenPos(F));const Q=U.start.add(U.dir.scale(i.dist));this.__intersectionData=Object.assign({screenPos:F,pointerRay:U,intersectionPos:Q,geomData:t},i)}return this.__intersectionData}}getGeomItemsInRect(F,U){if(this.__geomDataBufferFbo){const Q=this.__renderer.gl;Q.finish();const B=this.__geomDataBufferFbo.width,l=this.__geomDataBufferFbo.height,V=B/this.__width,d=l/this.__height,R=Math.round(F.x*V),t=Math.round(F.y*d),s=Math.round(U.x*V),i=Math.round(U.y*d),e=Math.round(l-i),I=Math.round(R),Z=Math.round(s-R),c=Math.round(i-t),n=Z*c;let a;this.__geomDataBufferFbo.bindForReading(),this.__renderer.__floatGeomBuffer?(a=new Float32Array(4*n),Q.readPixels(I,e,Z,c,Q.RGBA,Q.FLOAT,a)):(a=new Uint8Array(4*n),Q.readPixels(I,e,Z,c,Q.RGBA,Q.UNSIGNED_BYTE,a)),Q.bindFramebuffer(Q.FRAMEBUFFER,null);const S=new Set;for(let F=0;F<n;F++){let U;const Q=a.subarray(4*F,4*(F+1));if(this.__renderer.__floatGeomBuffer){if(0==Q[3])continue;U=Math.round(Q[0])}else{if(0==Q[0]&&0==Q[1])continue;U=Math.floor(Q[1]/64)}const B=this.__renderer.getPass(U).getGeomItemAndDist(Q);if(B){if(!B.geomItem.getSelectable())continue;S.add(B.geomItem)}}return[...S].filter((F=>!!F.getSelectable()))}}__getPointerPos(F,U){return new OU(F-this.getPosX(),U-this.getPosY())}getCapture(){return this.capturedItem}releaseCapture(){this.capturedItem=null}__preparePointerEvent(F){F.viewport=this,F.setCapture=F=>{this.capturedItem=F},F.getCapture=F=>this.capturedItem,F.releaseCapture=()=>{this.capturedItem=null}}onPointerDown(F){if(this.__preparePointerEvent(F),F.pointerType===bQ.mouse)F.pointerPos=this.__getPointerPos(F.rendererX,F.rendererY),F.pointerRay=this.calcRayFromScreenPos(F.pointerPos),F.intersectionData=this.getGeomDataAtPos(F.pointerPos,F.pointerRay);else if(F.pointerType===bQ.touch&&1==F.touches.length){const U=F.touches[0];F.pointerPos=this.__getPointerPos(U.rendererX,U.rendererY),F.pointerRay=this.calcRayFromScreenPos(F.pointerPos),F.intersectionData=this.getGeomDataAtPos(F.pointerPos,F.pointerRay)}const U=Date.now();if(U-this.__prevDownTime<this.__doubleClickTimeMSParam.getValue()){if(this.manipulator&&(this.manipulator.onPointerDoublePress(F),!F.propagating))return;if(this.emit("pointerDoublePressed",F),!F.propagating)return}else this.__prevDownTime=U;this.capturedItem?this.capturedItem.onPointerDown(F):null!=F.intersectionData&&(F.intersectionData.geomItem.onPointerDown(F),!F.propagating||this.capturedItem)||(this.emit("pointerDown",F),F.propagating&&!this.capturedItem&&(!this.manipulator||(this.manipulator.onPointerDown(F),F.propagating)))}onPointerUp(F){if(this.__preparePointerEvent(F),F.pointerType===bQ.mouse)F.pointerPos=this.__getPointerPos(F.rendererX,F.rendererY),F.pointerRay=this.calcRayFromScreenPos(F.pointerPos),F.intersectionData=this.getGeomDataAtPos(F.pointerPos,F.pointerRay);else if(F.pointerType===bQ.touch&&0==F.touches.length&&1==F.changedTouches.length){const U=F.changedTouches[0];F.pointerPos=this.__getPointerPos(U.rendererX,U.rendererY),F.pointerRay=this.calcRayFromScreenPos(F.pointerPos),F.intersectionData=this.getGeomDataAtPos(F.pointerPos,F.pointerRay)}this.capturedItem&&(this.capturedItem.onPointerUp(F),!F.propagating)||(null==F.intersectionData||(F.intersectionData.geomItem.onPointerUp(F),F.propagating))&&(this.emit("pointerUp",F),F.propagating&&(!this.manipulator||(this.manipulator.onPointerUp(F),F.propagating)))}onPointerMove(F){if(this.__preparePointerEvent(F),F.pointerType===bQ.mouse){const U=this.__getPointerPos(F.rendererX,F.rendererY);F.pointerPos=U,F.pointerRay=this.calcRayFromScreenPos(U)}else if(F.pointerType===bQ.touch){F.touchPos=[],F.touchRay=[];for(let U=0;U<F.touches.length;U++){const Q=F.touches[U],B=this.__getPointerPos(Q.rendererX,Q.rendererY);F.touchPos[U]=B,F.touchRay[U]=this.calcRayFromScreenPos(B)}F.pointerPos=F.touchPos[0],F.pointerRay=F.touchRay[0]}if(!this.capturedItem||(this.capturedItem.onPointerMove(F),F.propagating)){if(F.intersectionData=this.getGeomDataAtPos(F.pointerPos,F.pointerRay),F.intersectionData){if(F.intersectionData.geomItem!=this.pointerOverItem){if(this.pointerOverItem&&(F.leftGeometry=this.pointerOverItem,this.pointerOverItem.onPointerLeave(F),F.propagating&&this.emit("pointerLeaveGeom",F)),this.pointerOverItem=F.intersectionData.geomItem,this.pointerOverItem.onPointerEnter(F),!F.propagating)return;this.emit("pointerOverGeom",F)}if(F.intersectionData.geomItem.onPointerMove(F),!F.propagating||this.capturedItem)return}else if(this.pointerOverItem){if(F.leftGeometry=this.pointerOverItem,this.pointerOverItem.onPointerLeave(F),this.pointerOverItem=null,!F.propagating)return;this.emit("pointerLeaveGeom",F)}this.emit("pointerMove",F),F.propagating&&(!this.manipulator||(this.manipulator.onPointerMove(F),F.propagating))}}onPointerEnter(F){this.__preparePointerEvent(F),this.emit("pointerEnter",F),F.propagating&&(!this.manipulator||!this.manipulator.onPointerEnter||(this.manipulator.onPointerEnter(F),F.propagating))}onPointerLeave(F){this.__preparePointerEvent(F),this.emit("pointerLeave",F),F.propagating&&(!this.manipulator||!this.manipulator.onPointerLeave||(this.manipulator.onPointerLeave(F),F.propagating))}onKeyDown(F){this.__preparePointerEvent(F),this.manipulator&&(this.manipulator.onKeyDown(F),!F.propagating)||this.emit("keyDown",F)}onKeyUp(F){this.__preparePointerEvent(F),this.manipulator&&(this.manipulator.onKeyUp(F),!F.propagating)||this.emit("keyUp",F)}onWheel(F){this.__preparePointerEvent(F),F.pointerPos=this.__getPointerPos(F.rendererX,F.rendererY),F.pointerRay=this.calcRayFromScreenPos(F.pointerPos),F.intersectionData=this.getGeomDataAtPos(F.pointerPos,F.pointerRay),(null==F.intersectionData||(F.intersectionData.geomItem.onWheel(F),F.propagating))&&(this.manipulator?this.manipulator.onWheel(F):this.emit("mouseWheel",F))}onTouchCancel(F){this.__preparePointerEvent(F),this.capturedItem?this.capturedItem.onTouchCancel(F):this.manipulator?this.manipulator.onTouchCancel(F):this.emit("touchCancel",F)}__initRenderState(F){F.viewXfo=this.__cameraXfo,F.viewScale=1,F.region=this.region,F.cameraMatrix=this.__cameraMat,F.depthRange=this.depthRange,F.viewport=this,F.viewports=[{region:this.region,viewMatrix:this.__viewMat,projectionMatrix:this.__projectionMatrix,viewportFrustumSize:this.__frustumDim,isOrthographic:this.__camera.isOrthographic(),fovY:this.__camera.getFov()}]}draw(F={}){if(this.__initRenderState(F),super.draw(F),this.debugGeomShader){this.renderGeomDataFbo();const U=this.__renderer.gl;U.screenQuad.bindShader(F),U.screenQuad.draw(F,this.__geomDataBuffer,new OU(0,0),new OU(1,1))}if(this.debugHighlightedGeomsBuffer){const U=this.__renderer.gl;U.screenQuad.bindShader(F),U.screenQuad.draw(F,this.highlightedGeomsBuffer,new OU(0,0),new OU(1,1))}}}class wV{constructor(F,U){this.__xrvp=F,this.__treeItem=new dB("VRHead"),U.addChild(this.__treeItem),this.__mat4=new lQ,this.__localXfo=new RQ}setVisible(F){if(F&&!this.hmdGeomItem){const F=this.__xrvp.getAsset();if(!F)return;const U=F.getChildByName("HMD");if(!U)return;this.hmdGeomItem=U.clone({assetItem:F}),this.hmdGeomItem&&(this.hmdGeomItem.getParameter("LocalXfo").setValue(new RQ(new qU(0,-.035,-.03),new VQ({setFromAxisAndAngle:[new qU(0,1,0),Math.PI]}),new qU(.001,.001,.001))),this.__treeItem.addChild(this.hmdGeomItem,!1))}this.hmdGeomItem&&this.hmdGeomItem.getParameter("Visible").setValue(F)}update(F){this.__mat4.setDataArray(F.transform.matrix),this.__localXfo.fromMat4(this.__mat4),this.__treeItem.getParameter("LocalXfo").setValue(this.__localXfo)}getTreeItem(){return this.__treeItem}getXfo(){return this.__localXfo}}class fV{constructor(F,U,Q){if(this.xrvp=F,this.__inputSource=U,this.id=Q,this.buttonPressed=!1,this.__mat4=new lQ,this.__xfo=new RQ,this.__treeItem=new dB("VRController:"+U.handedness+Q),!zU.isMobileDevice){this.__tip=new dB("Tip");const Q=new RQ;if(Q.tr.set(0,-.05,-.13),this.__tip.getParameter("LocalXfo").setValue(Q),this.__treeItem.addChild(this.__tip,!1),F.getTreeItem().addChild(this.__treeItem),this.__activeVolumeSize=.04,"tracked-pointer"==U.targetRayMode){switch(U.profiles[0]){case"htc-vive":localStorage.setItem("ZeaEngine_XRDevice","Vive");break;case"oculus-touch":case"oculus-touch-v2":case"oculus-touch-v3":localStorage.setItem("ZeaEngine_XRDevice","Oculus")}F.loadHMDResources().then((F=>{if(!F)return;const Q=new RQ(new qU(0,0,0),new VQ({setFromAxisAndAngle:[new qU(0,1,0),Math.PI]}),new qU(.001,.001,.001));let B;if("htc-vive"==U.profiles[0])B=F.getChildByName("Controller"),Q.tr.set(0,-.035,-.085);else switch(U.handedness){case"left":B=F.getChildByName("LeftController"),Q.tr.set(0,-.035,-.085),Q.sc.scaleInPlace(.85);break;case"right":B=F.getChildByName("RightController"),Q.tr.set(0,-.035,-.085),Q.sc.scaleInPlace(.85);break;case"none":case"left-right":case"left-right-none":B=F.getChildByName("Controller")}if(B){const U=B.clone({assetItem:F});U.getParameter("LocalXfo").setValue(Q),this.__treeItem.addChild(U,!1)}}))}}this.tick=0}getHandedness(){return this.__inputSource.handedness}getId(){return this.id}getTreeItem(){return this.__treeItem}getTipItem(){return this.__tip}getTipXfo(){return this.__tip.getParameter("GlobalXfo").getValue()}getTouchPadValue(){return this.__touchpadValue}isButtonPressed(){return this.__buttonPressed}getControllerStageLocalXfo(){return this.__xfo}getControllerTipStageLocalXfo(){return this.__xfo.multiply(this.__tip.getParameter("LocalXfo").getValue())}updatePose(F,U,Q,B){const l=U.getPose(Q.gripSpace,F);if(l&&l.transform){if(this.__mat4.setDataArray(l.transform.matrix),this.__xfo.fromMat4(this.__mat4),this.__treeItem.getParameter("LocalXfo").setValue(this.__xfo),this.__geomAtTip=void 0,this.__hitTested=!1,this.tick%5==0&&!B.getCapture()){const F=this.getGeomItemAtTip();null!=F?(B.intersectionData=F,F.geomItem!=this.pointerOverItem&&(this.pointerOverItem&&this.pointerOverItem.onPointerLeave(B),this.pointerOverItem=F.geomItem,B.geomItem=F.geomItem,this.pointerOverItem.onPointerEnter(B)),F.geomItem.onPointerMove(B)):this.pointerOverItem&&(B.leftGeometry=this.pointerOverItem,this.pointerOverItem.onPointerLeave(B),this.pointerOverItem=null)}this.tick++}}getGeomItemAtTip(){if(this.__hitTested)return this.__intersectionData;this.__hitTested=!0;const F=this.xrvp.getRenderer(),U=this.__tip.getParameter("GlobalXfo").getValue(),Q=this.__activeVolumeSize;return this.__intersectionData=F.raycastWithXfo(U,Q,Q),this.__intersectionData}}class PV extends iV{constructor(F){super(),this.__controllerTriggersHeld=[],this.xrvp=F,this.vrControllerToolTip=new $B(.015),this.vrControllerToolTipMat=new EB("Cross","FlatSurfaceShader"),this.vrControllerToolTipMat.getParameter("BaseColor").setValue(new UQ("#03E3AC")),this.listenerIDs={}}addIconToController(F){const{controller:U}=F,Q=new ul("HandleToolTip",this.vrControllerToolTip,this.vrControllerToolTipMat);Q.setSelectable(!1),U.getTipItem().removeAllChildren(),U.getTipItem().addChild(Q,!1)}activateTool(){super.activateTool();for(const F of this.xrvp.getControllers())this.addIconToController({controller:F});this.listenerIDs.controllerAdded=this.xrvp.on("controllerAdded",(F=>{this.addIconToController(F)}))}deactivateTool(){super.deactivateTool();for(const F of this.xrvp.getControllers())F.getTipItem().removeAllChildren();this.xrvp.removeListenerById("controllerAdded",this.listenerIDs.controllerAdded)}__initMoveStage(){if(1==this.__controllerTriggersHeld.length)this.__grabPos=this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr.clone(),this.stageXfo__GrabStart=this.xrvp.getXfo().clone(),this.__invOri=this.stageXfo__GrabStart.ori.inverse();else if(2==this.__controllerTriggersHeld.length){const F=this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr,U=this.__controllerTriggersHeld[1].getControllerTipStageLocalXfo().tr;this.__grabDir=U.subtract(F),this.__grabPos=F.lerp(U,.5),this.__grabDir.y=0,this.__grabDist=this.__grabDir.length(),this.__grabDir.scaleInPlace(1/this.__grabDist),this.stageXfo__GrabStart=this.xrvp.getXfo().clone(),this.__grab_to_stage=this.__grabPos.subtract(this.stageXfo__GrabStart.tr)}}onVRControllerButtonDown(F){1==F.button&&(this.__controllerTriggersHeld.push(F.controller),this.__initMoveStage(),F.stopPropagation())}onVRControllerButtonUp(F){if(1!=F.button)return;const U=this.__controllerTriggersHeld.indexOf(F.controller);this.__controllerTriggersHeld.splice(U,1),this.__initMoveStage(),F.stopPropagation()}onVRControllerDoubleClicked(F){console.log("onVRControllerDoubleClicked:",this.__controllerTriggersHeld.length);const U=this.xrvp.getXfo().clone();U.sc.set(1,1,1),this.xrvp.setXfo(U)}onVRPoseChanged(F){if(1==this.__controllerTriggersHeld.length){const F=this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr,U=new RQ;U.tr=this.__grabPos.subtract(F);const Q=this.stageXfo__GrabStart.multiply(U);this.xrvp.setXfo(Q)}else if(2==this.__controllerTriggersHeld.length){const F=this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr,U=this.__controllerTriggersHeld[1].getControllerTipStageLocalXfo().tr,Q=F.lerp(U,.5),B=U.subtract(F);B.y=0;const l=B.length();B.scaleInPlace(1/l);const V=new RQ,d=Math.max(Math.min(this.__grabDist/l,10),.1);V.sc.set(d,d,d);let R=this.__grabDir.angleTo(B);this.__grabDir.cross(B).y>0&&(R=-R),V.ori.rotateY(R);const t=V.ori.rotateVec3(this.__grabPos);V.tr.addInPlace(this.__grabPos.subtract(t));const s=this.__grabPos.scale(1-d);V.tr.addInPlace(V.ori.rotateVec3(s));const i=this.__grabPos.subtract(Q).scale(d);V.tr.addInPlace(V.ori.rotateVec3(i));const e=this.stageXfo__GrabStart.multiply(V);this.xrvp.setXfo(e)}}onPointerDown(F){F.pointerType===bQ.xr&&this.onVRControllerButtonDown(F)}onPointerMove(F){F.pointerType===bQ.xr&&this.onVRPoseChanged(F)}onPointerUp(F){F.pointerType===bQ.xr&&this.onVRControllerButtonUp(F)}onPointerDoublePress(F){F.pointerType===bQ.xr&&this.onVRControllerDoubleClicked(F)}}class jV extends DV{constructor(F){super(F),this.getParameter("DoubleClickTimeMS").setValue(300),this.__projectionMatricesUpdated=!1,this.__stageTreeItem=new dB("VRStage"),this.__stageTreeItem.setVisible(!1),this.__renderer.addTreeItem(this.__stageTreeItem),this.__vrhead=new wV(this,this.__stageTreeItem),this.controllersMap={},this.controllers=[],this.controllerPointerDownTime=[],this.spectatorMode=!1,this.tick=0;const U=new RQ;U.ori.setFromAxisAndAngle(new qU(1,0,0),.5*Math.PI),this.setXfo(U),this.__leftViewMatrix=new lQ,this.__leftProjectionMatrix=new lQ,this.__rightViewMatrix=new lQ,this.__rightProjectionMatrix=new lQ,this.setManipulator(new PV(this))}getAsset(){return this.__vrAsset}getTreeItem(){return this.__stageTreeItem}getVRHead(){return this.__vrhead}getXfo(){return this.__stageXfo}setXfo(F){this.__stageXfo=F,this.__stageTreeItem.getParameter("GlobalXfo").setValue(F),this.__stageMatrix=F.inverse().toMat4(),this.__stageScale=F.sc.x}getControllers(){return this.controllers}canPresent(){return this.__canPresent}isPresenting(){return this.session}setSpectatorMode(F){if(!F){const F=this.__renderer.gl;F.bindFramebuffer(F.FRAMEBUFFER,null),F.viewport(0,0,F.drawingBufferWidth,F.drawingBufferHeight),F.clearColor(...this.__backgroundColor.asArray()),F.colorMask(!0,!0,!0,!0),F.clear(F.COLOR_BUFFER_BIT|F.DEPTH_BUFFER_BIT)}this.spectatorMode=F}__startSession(){const F=(U,Q)=>{this.session&&(this.session.requestAnimationFrame(F),this.drawXRFrame(Q))};this.session.requestAnimationFrame(F)}loadHMDResources(){if(zU.isMobileDevice)return Promise.resolve();let F=localStorage.getItem("ZeaEngine_XRDevice");if(F||(F="Vive",localStorage.setItem("ZeaEngine_XRDevice",F)),this.__hmd!=F)this.__hmdAssetPromise=void 0;else if(this.__hmdAssetPromise)return this.__hmdAssetPromise;return this.__hmd=F,this.__hmdAssetPromise=new Promise(((U,Q)=>{{let Q;switch(F){case"Vive":Q="ZeaEngine/Vive.vla";break;case"Oculus":Q="ZeaEngine/Oculus.vla";break;default:Q="ZeaEngine/Vive.vla"}if(!nB.getCommonResource(Q)){const F=new RV(Q);F.getParameter("FilePath").setValue(Q),nB.setCommonResource(Q,F)}this.__vrAsset=nB.getCommonResource(Q);const B=()=>{const F=this.__vrAsset.getMaterialLibrary(),Q=F.getMaterialNames();for(const U of Q){const Q=F.getMaterial(U,!1);Q&&Q.setShaderName("SimpleSurfaceShader")}this.__vrAsset.traverse((F=>{F.setSelectable(!1)})),U(this.__vrAsset)};this.__vrAsset.isLoaded()?B():this.__vrAsset.once("loaded",B)}})),this.__hmdAssetPromise}startPresenting(){return new Promise(((F,U)=>{this.spectatorMode||this.setSpectatorMode(!1);const Q=this.__renderer.gl;(()=>{navigator.xr.requestSession("immersive-vr",{requiredFeatures:["local-floor"],optionalFeatures:["bounded-floor"]}).then((B=>{this.__renderer.__xrViewportPresenting=!0;const l=this.__renderer.getViewport();if(l){const F=l.getCamera().getParameter("GlobalXfo").getValue(),U=new RQ;U.tr=F.tr.clone(),U.tr.z-=1.3;const Q=F.ori.getZaxis();Q.z=0,Q.normalizeInPlace(),U.ori.setFromDirectionAndUpvector(Q,new qU(0,0,1)),this.setXfo(U)}B.addEventListener("end",(F=>{this.__stageTreeItem.setVisible(!1),this.session=null,this.emit("presentingChanged",{state:!1})}));const V=F=>{console.log("creating controller:",F.handedness,F.profiles);const U=this.controllers.length,Q=new fV(this,F,U);return this.controllersMap[F.handedness]=Q,this.controllers[U]=Q,this.emit("controllerAdded",{controller:Q}),Q};B.addEventListener("selectstart",(F=>{const U=this.controllersMap[F.inputSource.handedness];U&&(U.buttonPressed=!0,this.onPointerDown({button:1,controller:U}))})),B.addEventListener("selectend",(F=>{const U=this.controllersMap[F.inputSource.handedness];U&&(U.buttonPressed=!1,this.onPointerUp({button:1,controller:U}))})),B.addEventListener("inputsourceschange",(F=>{for(const U of F.added)0!=U.profiles.length&&V(U)})),this.session=B;const d=new XRWebGLLayer(B,Q);B.updateRenderState({baseLayer:d}),this.__width=d.framebufferWidth,this.__height=d.framebufferHeight,this.__region=[0,0,this.__width,this.__height],this.resizeRenderTargets(this.__width,this.__height);const R=U=>{this.__refSpace=U,this.__stageTreeItem.setVisible(!0),this.emit("presentingChanged",{state:!0}),this.loadHMDResources().then((()=>{this.__startSession(),F()}))};B.requestReferenceSpace(zU.isMobileDevice?"local":"bounded-floor").catch((F=>{console.log("Falling back to local-floor reference space"),B.requestReferenceSpace("local-floor").then(R)})).then((F=>{R(F)})).catch((F=>{console.warn(F.message),U(new Error("Unable to start XR Session:"+F.message))}))})).catch((F=>{console.warn(F.message)}))})()}))}stopPresenting(){this.session&&this.session.end()}togglePresenting(){this.session?this.stopPresenting():this.startPresenting()}getHMDCanvasSize(){return this.__hmdCanvasSize}updateControllers(F,U){const Q=this.session.inputSources;for(let B=0;B<Q.length;B++){const l=Q[B];if(0==l.profiles.length)return;this.controllers[B]?this.controllers[B].updatePose(this.__refSpace,F,l,U):console.warn("Missing controller")}}drawXRFrame(F){const U=F.session,Q=U.renderState.baseLayer,B=F.getViewerPose(this.__refSpace);if(!B)return;this.__vrhead.update(B);const l=this.__vrhead.getTreeItem().getParameter("GlobalXfo").getValue(),V=B.views;if(!this.__projectionMatricesUpdated){this.__projectionMatrices=[],this.__viewMatrices=[],this.__cameraMatrices=[];for(let F=0;F<V.length;F++){const U=V[F],Q=new lQ;Q.setDataArray(U.projectionMatrix),this.__projectionMatrices[F]=Q,this.__viewMatrices[F]=new lQ,this.__cameraMatrices[F]=new lQ}this.__projectionMatricesUpdated=!0}const d=this.__renderer.gl;d.bindFramebuffer(d.FRAMEBUFFER,Q.framebuffer),d.clearColor(...this.__backgroundColor.asArray()),d.colorMask(!0,!0,!0,!0),d.clear(d.COLOR_BUFFER_BIT|d.DEPTH_BUFFER_BIT);const R={boundRendertarget:Q.framebuffer,depthRange:[U.renderState.depthNear,U.renderState.depthFar],region:this.__region,viewport:this,vrviewport:this,viewports:[]};for(let F=0;F<V.length;F++){const U=V[F];this.__viewMatrices[F].setDataArray(U.transform.inverse.matrix),this.__viewMatrices[F].multiplyInPlace(this.__stageMatrix);const B=Q.getViewport(U);R.viewports.push({viewMatrix:this.__viewMatrices[F],projectionMatrix:this.__projectionMatrices[F],region:[B.x,B.y,B.width,B.height],isOrthographic:!1})}R.viewXfo=l,R.viewScale=1/this.__stageScale,R.cameraMatrix=R.viewXfo.toMat4(),R.region=this.__region,R.vrPresenting=!0,this.draw(R);const t={controllers:this.controllers,viewXfo:l};this.preparePointerEvent(t),this.updateControllers(F,t),this.capturedElement&&t.propagating&&this.capturedElement.onPointerMove(t),this.manipulator&&t.propagating&&this.manipulator.onPointerMove(t);const s={interfaceType:"VR",hmd:this.__hmd,viewXfo:R.viewXfo,controllers:this.controllers,viewport:this,vrviewport:this};if(this.emit("viewChanged",s),this.spectatorMode&&!zU.isMobileDevice&&this.tick%5==0){const F=this.__renderer.getViewport();F&&(this.__vrhead.setVisible(!0),F.draw(),this.__vrhead.setVisible(!1))}this.tick++}preparePointerEvent(F){F.viewport=this,F.propagating=!0,F.pointerType=bQ.xr,F.stopPropagation=()=>{F.propagating=!1},F.setCapture=F=>{this.capturedItem=F},F.getCapture=F=>this.capturedItem,F.releaseCapture=()=>{this.capturedItem=null}}onPointerDown(F){this.preparePointerEvent(F),F.intersectionData=F.controller.getGeomItemAtTip();const U=Date.now();if(U-this.controllerPointerDownTime[F.controller.id]<this.__doubleClickTimeMSParam.getValue()){if(this.emit("pointerDoublePressed",F),!F.propagating)return;if(this.manipulator&&(this.manipulator.onPointerDoublePress(F),!F.propagating))return}this.controllerPointerDownTime[F.controller.id]=U,this.capturedItem?this.capturedItem.onPointerDown(F):null!=F.intersectionData&&(F.intersectionData.geomItem.onPointerDown(F),!F.propagating||this.capturedItem)||(this.emit("pointerDown",F),F.propagating&&!this.capturedItem&&this.manipulator&&this.manipulator.onPointerDown(F))}onPointerUp(F){this.preparePointerEvent(F),this.controllerPointerDownTime[F.controller.id]=0,this.capturedItem?this.capturedItem.onPointerUp(F):(F.intersectionData=F.controller.getGeomItemAtTip(),(null==F.intersectionData||(F.intersectionData.geomItem.onPointerUp(F),F.propagating))&&(this.emit("pointerUp",F),F.propagating&&(!this.manipulator||(this.manipulator.onPointerUp(F),F.propagating))))}}class _V{constructor(F,U,Q,B,l){const V=Q.getName();switch(this.param=Q,this.unif=B,this.textureUnif=l[V+"Tex"],this.textureTypeUnif=l[V+"TexType"],this.uniform1i=F.uniform1i.bind(F),B.type){case Boolean:this.uniformXX=F.uniform1i.bind(F);break;case 4:"webgl2"==F.name?this.uniformXX=F.uniform1ui.bind(F):this.uniformXX=F.uniform1i.bind(F);break;case 5:this.uniformXX=F.uniform1i.bind(F);break;case 6:this.uniformXX=F.uniform1f.bind(F)}this.bind=this.bindValue;const d=Q=>{let B=Q.getMetadata("gltexture");B||(B="FLOAT"===Q.type?new uV(F,Q):new bV(F,Q)),this.texBinding=B.preBind(this.textureUnif,l),B.on("updated",(()=>{U.emit("updated",{})})),this.gltexture=B,this.gltexture.addRef(this),this.textureType=1,this.bind=this.bindTexture,U.emit("updated",{})};let R,t;const s=F=>{F.isLoaded()?d(F):(t=()=>{d(R)},F.on("loaded",t)),R=F},i=()=>{R.getMetadata("gltexture").removeRef(this),this.texBinding=null,this.gltexture=null,this.textureType=null,this.bind=this.bindValue,t&&R.off("loaded",t),R=null,t=null,U.emit("updated",{})};this.update=()=>{try{R||(this.val=Q.getValue())}catch(F){}U.emit("updated")},Q.getImage()&&s(Q.getImage()),Q.on("textureConnected",(()=>{s(Q.getImage())})),Q.on("textureDisconnected",(()=>{i()})),this.dirty=!0,Q.on("valueChanged",(()=>{this.dirty=!0,U.emit("updated",{})}))}bindValue(F){this.dirty&&(this.update(),this.dirty=!1),this.unif&&this.uniformXX(this.unif.location,this.val),this.textureTypeUnif&&this.uniform1i(this.textureTypeUnif.location,0)}bindTexture(F){this.dirty&&(this.update(),this.dirty=!1),this.gltexture.bindToUniform(F,this.textureUnif,this.texBinding)}unbind(){}destroy(){}}class OV{constructor(F,U,Q,B){switch(this.param=Q,this.unif=B,B.type){case OU:this.uniformXX=F.uniform2fv.bind(F);break;case qU:this.uniformXX=F.uniform3fv.bind(F);break;case $U:this.uniformXX=F.uniform4fv.bind(F)}this.dirty=!0,Q.on("valueChanged",(()=>{this.dirty=!0,U.emit("updated",{})}))}bind(F){this.dirty&&(this.vals=this.param.getValue().asArray(),this.dirty=!1),this.uniformXX(this.unif.location,this.vals)}unbind(){}destroy(){}}class qV{constructor(F,U,Q,B){switch(this.param=Q,this.unif=B,B.type){case Mat3:this.uniformMatrixXXX=F.uniformMatrix3fv.bind(F);break;case lQ:this.uniformMatrixXXX=F.uniformMatrix4fv.bind(F)}this.dirty=!0,Q.on("valueChanged",(()=>{this.dirty=!0,U.emit("updated",{})}))}bind(F){this.dirty&&(this.vals=this.param.getValue().asArray(),this.dirty=!1),this.uniformMatrixXXX(this.unif.location,!1,this.val)}unbind(){}destroy(){}}class $V{constructor(F,U,Q,B,l){const V=Q.getName();this.param=Q,this.unif=B,this.textureUnif=l[V+"Tex"],this.textureTypeUnif=l[V+"TexType"],this.vals=[0,0,0,0],this.bind=this.bindValue;const d=Q=>{R=Q;let B=Q.getMetadata("gltexture");B||(B="FLOAT"===Q.type?new uV(F,Q):new bV(F,Q)),this.texBinding=B.preBind(this.textureUnif,l),B.on("updated",(()=>{U.emit("updated",{})})),this.gltexture=B,this.gltexture.addRef(this),this.textureType=1,this.bind=this.bindTexture,U.emit("updated",{})};let R,t;const s=F=>{F.isLoaded()?d(F):(t=()=>{d(F)},F.once("loaded",t))},i=()=>{this.gltexture.removeRef(this),this.gltexture=null,this.texBinding=null,this.textureType=null,this.bind=this.bindValue,R=null,t=null,U.emit("updated",{})};this.update=()=>{try{R||this.unif&&(this.vals=Q.getValue().asArray())}catch(F){}U.emit("updated")},Q.getImage()&&s(Q.getImage()),Q.on("textureConnected",(()=>{s(Q.getImage())})),Q.on("textureDisconnected",(()=>{i()})),this.dirty=!0,Q.on("valueChanged",(()=>{this.dirty=!0})),this.uniform1i=F.uniform1i.bind(F),this.uniform4fv=F.uniform4fv.bind(F)}bindValue(F){this.unif&&(this.dirty&&(this.update(),this.dirty=!1),this.unif&&this.uniform4fv(this.unif.location,this.vals),this.textureTypeUnif&&this.uniform1i(this.textureTypeUnif.location,0))}bindTexture(F){this.dirty&&(this.update(),this.dirty=!1),this.gltexture.bindToUniform(F,this.textureUnif,this.texBinding)}}const Fd={};class Ud{constructor(F,U,Q,B){this.uniformBindings=[];const l=l=>{const V=l.getName(),d=Q[V];if(null!=d)switch(d.type){case Boolean:case 4:case 5:case 6:this.uniformBindings.push(new _V(F,U,l,d,Q));break;case OU:case qU:case $U:this.uniformBindings.push(new OV(F,U,l,d));break;case UQ:this.uniformBindings.push(new $V(F,U,l,d,Q));break;case lQ:this.uniformBindings.push(new qV(F,U,l,d));break;default:return void console.warn("Param :"+V+" has unhandled data type:"+d.type)}else{if(Q[V+"Tex"])return void this.uniformBindings.push(new $V(F,U,l,d,Q));if(B){const F=U.getMaterial().getShaderName();Fd[F]||(Fd[F]={}),Fd[F][V]||(console.warn("Material:"+U.getMaterial().getName(),"with Shader ",F,"Param has no unif",V),Fd[F][V]=!0)}}},V=U.getMaterial().getParameters();for(const F of V)l(F)}bind(F){for(const U of this.uniformBindings)U.bind(F);return!0}unbind(){for(const F of this.uniformBindings)F.unbind(renderstate)}destroy(){for(const F of this.uniformBindings)F.destroy(renderstate)}}class Qd extends nQ{constructor(F,U,Q){super(),this.__gl=F,this.__material=U,this.__glshader=Q,this.__shaderBindings={},U.on("parameterValueChanged",(()=>this.emit("updated")))}getMaterial(){return this.__material}getGLShader(){return this.__glshader}bind(F,U){this.__boundTexturesBeforeMaterial=F.boundTextures;let Q=this.__shaderBindings[F.shaderkey];if(!Q){const B=this.__gl;Q=new Ud(B,this,F.unifs,U),this.__shaderBindings[F.shaderkey]=Q}return Q.bind(F)}unbind(F){F.boundTextures=this.__boundTexturesBeforeMaterial}}class Bd extends nQ{constructor(F){super(),this.renderer=F,this.materials=[],this.refCounts=[],this.materialIndices={},this.glMaterials={},this.freeIndices=[],this.dirtyIndices=new Set,this.materialsAllocator=new gQ,this.materialsAllocator.on("dataReallocated",(F=>{const U=F.id;this.dirtyIndices.add(U)}))}addMaterial(F){let U=this.materialIndices[F.getId()];if(null!=U)return this.refCounts[U]++,U;U=this.freeIndices.length?this.freeIndices.pop():this.materials.length,this.materials[U]=F,this.refCounts[U]=1,this.materialIndices[F.getId()]=U;const Q=F.getShaderClass().getPackedMaterialData(F);this.materialsAllocator.allocate(U,Q.length/4);return F.on("parameterValueChanged",(()=>{this.dirtyIndices.add(U),this.emit("updated")})),this.dirtyIndices.add(U),U}getGLMaterial(F){if(this.glMaterials[F.getId()])return this.glMaterials[F.getId()];const U=this.renderer.getOrCreateShader(F.getShaderName()),Q=this.renderer.gl,B=new Qd(Q,F,U);return B.on("updated",(()=>{this.renderer.requestRedraw()})),F.setMetadata("glMaterial",B),this.glMaterials[F.getId()]=B,B}getMaterialAllocation(F){const U=this.materialIndices[F.getId()];if(null!=U)return this.materialsAllocator.getAllocation(U)}removeMaterial(F){const U=this.materialIndices[F.getId()];this.refCounts[U]--,this.refCounts[U]>0||(this.freeIndices.push(U),this.materialsAllocator.deallocate(U),this.materials[U]=null,delete this.materialIndices[F.getId()],this.dirtyIndices.has(U)&&this.dirtyIndices.delete(U))}uploadMaterials(F){const U=this.renderer.gl,Q=DU.nextPow2(Math.ceil(Math.sqrt(this.materialsAllocator.reservedSpace))),B=F.boundTextures++;if(U.activeTexture(U.TEXTURE0+B),this.materialsTexture){if(this.materialsTexture.width<Q){this.materialsTexture.resize(Q,Q);for(let F=0;F<this.materials.length;F++)this.materialsAllocator.getAllocation(F)&&this.dirtyIndices.add(F)}}else this.materialsTexture=new bV(U,{format:"RGBA",type:"FLOAT",width:Q,height:Q,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.materialsTexture.clear();const l=this.materialsTexture,V=this.materialsTexture.width;U.bindTexture(U.TEXTURE_2D,l.glTex),this.dirtyIndices.forEach((F=>{const Q=this.materialsAllocator.getAllocation(F),B=this.materials[F],d=B.getShaderClass().getPackedMaterialData(B),R=Q.start%V,t=Math.ceil((R+Q.size)/V);let s=0,i=Q.size,e=R;for(let F=0;F<t;F++){let F;e+i>V?(F=V-e,e=0):F=i;const B=(Q.start+s)%V,R=Math.floor((Q.start+s)/V),t=d.subarray(4*s,4*(s+F));U.texSubImage2D(U.TEXTURE_2D,0,B,R,F,1,l.__format,l.__type,t),s+=F,i-=F}})),this.dirtyIndices=new Set,U.bindTexture(U.TEXTURE_2D,null),F.boundTextures--}update(F){this.dirtyItemIndices.length>0&&this.uploadGeomItems(F),F.drawItemsTexture=this.glGeomItemsTexture}bind(F){if(this.dirtyIndices.size>0&&this.uploadMaterials(F),!this.materialsTexture)return;const{materialsTexture:U,materialsTextureSize:Q}=F.unifs;if(U&&(this.materialsTexture.bindToUniform(F,U),Q)){this.renderer.gl.uniform2i(Q.location,this.materialsTexture.width,this.materialsTexture.height)}return!0}}class ld extends AV{constructor(F,U){super(F,U),this.genBuffers()}genBuffers(F){super.genBuffers(F);const U=this.__gl,Q=this.__geom.genBuffers();for(const F in Q.attrBuffers){const B=Q.attrBuffers[F],l=U.createBuffer();U.bindBuffer(U.ARRAY_BUFFER,l),U.bufferData(U.ARRAY_BUFFER,B.values,U.STATIC_DRAW),this.__glattrbuffers[F]={buffer:l,dataType:B.dataType,normalized:B.normalized}}this.__numVertices=Q.numVertices,this.__vboState=2}updateBuffers(F){const U=this.__gl,Q=this.__geom.genBuffers(),B=Q.numVertices!=this.__numVertices;for(const F in Q.attrBuffers){const l=Q.attrBuffers[F],V=this.__glattrbuffers[F];B&&(U.deleteBuffer(V.buffer),V.buffer=U.createBuffer()),U.bindBuffer(U.ARRAY_BUFFER,V.buffer),U.bufferData(U.ARRAY_BUFFER,l.values,U.STATIC_DRAW)}this.__numVertices=Q.numVertices}bind(F){if(F.unifs.PointSize){const U=this.__gl;let Q=this.__shaderBindings[F.shaderkey];if(!Q){U.__quadVertexIdsBuffer||U.setupInstancedQuad();const B=Object.assign(this.__glattrbuffers,U.__quadattrbuffers);Q=yV(U,F.attrs,B,U.__quadIndexBuffer),this.__shaderBindings[F.shaderkey]=Q}return Q.bind(F),!0}return super.bind(F)}draw(F){const U=this.__gl;F.unifs.PointSize?U.drawElementsInstanced(U.TRIANGLES,6,U.UNSIGNED_SHORT,0,this.__numVertices):U.drawArrays(U.POINTS,0,this.__numVertices)}drawInstanced(F,U){this.__gl.drawArraysInstanced(this.__gl.POINTS,0,this.__numVertices,U)}}class Vd extends AV{constructor(F,U){super(F,U),this.__numSegIndices=0,this.__numVertices=0,this.__fatBuffersNeedUpload=!0}dirtyBuffers(F){super.dirtyBuffers(F),this.__fatBuffersNeedUpload=!0,this.emit("updated")}clearBuffers(){const F=this.__gl;F.deleteBuffer(this.__indexBuffer),this.__indexBuffer=null,this.fatBuffers&&this.fatBuffers.positionsTexture&&(this.fatBuffers.positionsTexture&&(this.fatBuffers.positionsTexture.destroy(),this.fatBuffers.positionsTexture=null),this.fatBuffers.glattrbuffers.segmentIndices.buffer&&(F.deleteBuffer(this.fatBuffers.glattrbuffers.segmentIndices.buffer),this.fatBuffers.glattrbuffers.segmentIndices=null)),super.clearBuffers()}genFatBuffers(F){const U=this.__gl,Q=this.__geom.genBuffers(),B=Q.indices,l=Q.numVertices!=this.__numVertices;U.__quadVertexIdsBuffer||U.setupInstancedQuad(),this.fatBuffers||(this.fatBuffers={glattrbuffers:{}},this.fatBuffers.glattrbuffers.vertexIDs=U.__quadattrbuffers.vertexIDs);const V=F.boundTextures++;U.activeTexture(this.__gl.TEXTURE0+V),this.fatBuffers.drawCount=B.length/2;const d=this.__geom.getVertexAttributes(),R=d.positions,t=d.lineThickness,s=new Float32Array(4*R.length);for(let F=0;F<R.length;F++){qU.createFromBuffer(s.buffer,4*F*4).setFromOther(R.getValueRef(F)),s[4*F+3]=t?t.getFloat32Value(F):1}l&&this.fatBuffers.positionsTexture&&(this.fatBuffers.positionsTexture.destroy(),this.fatBuffers.positionsTexture=null),this.fatBuffers.positionsTexture?this.fatBuffers.positionsTexture.bufferData(s,R.length,1):this.fatBuffers.positionsTexture=new bV(U,{format:"RGBA",type:"FLOAT",width:R.length,height:1,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",data:s,mipMapped:!1});const i=()=>{const F=new Float32Array(B.length);for(let U=0;U<B.length;U++){let Q;Q=U%2==0?U>0?B[U]==B[U-1]:B[U]==B[B.length-1]:U<B.length-1?B[U]==B[U+1]:B[U]==B[0],F[U]=(Q?1:0)+2*B[U]}return F};if(this.fatBuffers.glattrbuffers.segmentIndices)(!this.genBufferOpts||this.genBufferOpts&&this.genBufferOpts.topologyChanged)&&(U.bindBuffer(U.ARRAY_BUFFER,this.fatBuffers.glattrbuffers.segmentIndices.buffer),U.bufferData(U.ARRAY_BUFFER,i(),U.STATIC_DRAW));else{const F=U.createBuffer();U.bindBuffer(U.ARRAY_BUFFER,F),U.bufferData(U.ARRAY_BUFFER,i(),U.STATIC_DRAW),this.fatBuffers.glattrbuffers.segmentIndices={buffer:F,dimension:2,dataType:OU}}this.__numSegIndices=B.length,this.__numVertices=Q.numVertices,U.bindTexture(U.TEXTURE_2D,null),F.boundTextures--,this.__fatBuffersNeedUpload=!1}genBuffers(F){const U=this.__gl,Q=this.__geom.genBuffers(),B=Q.indices,l=Q.numVertices!=this.__numVertices;this.__indexBuffer?(!this.genBufferOpts||this.genBufferOpts&&this.genBufferOpts.topologyChanged)&&(this.__numSegIndices!=B.length&&(U.deleteBuffer(this.__indexBuffer),this.__indexBuffer=U.createBuffer()),U.bindBuffer(U.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),U.bufferData(U.ELEMENT_ARRAY_BUFFER,B,U.STATIC_DRAW),this.__numSegIndices=B.length):(this.__indexBuffer=U.createBuffer(),U.bindBuffer(U.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),U.bufferData(U.ELEMENT_ARRAY_BUFFER,B,U.STATIC_DRAW));for(const F in Q.attrBuffers){const B=Q.attrBuffers[F];if(this.__glattrbuffers[F]){const Q=this.__glattrbuffers[F];l&&(U.deleteBuffer(Q.buffer),Q.buffer=U.createBuffer()),U.bindBuffer(U.ARRAY_BUFFER,Q.buffer),U.bufferData(U.ARRAY_BUFFER,B.values,U.STATIC_DRAW)}else{const Q=U.createBuffer();U.bindBuffer(U.ARRAY_BUFFER,Q),U.bufferData(U.ARRAY_BUFFER,B.values,U.STATIC_DRAW),this.__glattrbuffers[F]={buffer:Q,dataType:B.dataType,normalized:B.normalized}}}this.__numSegIndices=B.length,this.__numVertices=Q.numVertices,this.__buffersNeedUpload=!1,B instanceof Uint8Array&&(this.__indexDataType=this.__gl.UNSIGNED_BYTE),B instanceof Uint16Array&&(this.__indexDataType=this.__gl.UNSIGNED_SHORT),B instanceof Uint32Array&&(this.__indexDataType=this.__gl.UNSIGNED_INT)}bind(F){const U=this.__gl,Q=F.unifs;if(Q.LineThickness&&U.floatTexturesSupported){this.__fatBuffersNeedUpload&&this.genFatBuffers(F,!0);let B=this.__shaderBindings[F.shaderkey];return B||(B=yV(U,F.attrs,this.fatBuffers.glattrbuffers,U.__quadIndexBuffer),this.__shaderBindings[F.shaderkey]=B),B.bind(F),Q.positionsTexture&&(this.fatBuffers.positionsTexture.bindToUniform(F,Q.positionsTexture),U.uniform1i(Q.positionsTextureSize.location,this.fatBuffers.positionsTexture.width)),!0}return super.bind(F)}drawPoints(){this.__gl.drawArrays(this.__gl.POINTS,0,this.__geom.numVertices())}draw(F){const U=this.__gl;F.unifs.LineThickness&&U.floatTexturesSupported?U.drawElementsInstanced(U.TRIANGLES,6,U.UNSIGNED_SHORT,0,this.fatBuffers.drawCount):U.drawElements(this.__gl.LINES,this.__numSegIndices,this.__indexDataType,0)}drawInstanced(F,U){const Q=this.__gl,{occluded:B}=F.unifs;B&&Q.uniform1i(B.location,0),this.__gl.drawElementsInstanced(this.__gl.LINES,this.__numSegIndices,this.__indexDataType,0,U),B&&(Q.uniform1i(B.location,1),Q.depthFunc(Q.GREATER),this.__gl.drawElementsInstanced(this.__gl.LINES,this.__numSegIndices,this.__indexDataType,0,U),Q.depthFunc(Q.LEQUAL))}}const dd={GEOMITEM_CHANGED:0,GEOM_CHANGED:1,VISIBILITY_CHANGED:2,HIGHLIGHT_CHANGED:3},Rd={GEOMITEM_FLAG_CUTAWAY:1,GEOMITEM_INVISIBLE_IN_GEOMDATA:2};class td extends nQ{constructor(F,U,Q,B,l,V=!1){if(super(),this.gl=F,this.geomItem=U,this.drawItemId=Q,this.geomId=B,this.materialId=l,this.supportInstancing=V,this.geomVisible=this.geomItem.isVisible(),this.visible=this.geomVisible,this.culled=!1,this.listenerIDs={},this.listenerIDs.visibilityChanged=this.geomItem.on("visibilityChanged",(F=>{this.updateVisibility()})),!this.supportInstancing){this.cutDataChanged=!1,this.cutData=[0,0,0,0];const F=0;let Q=0;this.geomItem.isCutawayEnabled()&&(Q|=Rd.GEOMITEM_FLAG_CUTAWAY),0==U.getSelectable()&&(Q|=Rd.GEOMITEM_INVISIBLE_IN_GEOMDATA),this.geomData=[Q,F,0,0],this.geomMatrixDirty=!0,this.listenerIDs["GeomMat.valueChanged"]=this.geomItem.getParameter("GeomMat").on("valueChanged",(()=>{this.geomMatrixDirty=!0,this.emit("updated")})),this.listenerIDs.cutAwayChanged=this.geomItem.on("cutAwayChanged",(()=>{this.cutDataChanged=!0,this.emit("updated")}))}}getGeomItem(){return this.geomItem}isVisible(){return this.visible}getDrawItemId(){return this.drawItemId}updateVisibility(){this.geomVisible=this.geomItem.isVisible();const F=this.geomVisible&&!this.culled;this.visible!=F&&(this.visible=F,this.emit("visibilityChanged",{visible:F}),this.emit("updated",{}))}setCulled(F){this.culled=F;const U=this.geomVisible&&!this.culled;this.visible!=U&&(this.visible=U,this.emit("visibilityChanged",{visible:U}))}bind(F){const U=this.gl,Q=F.unifs;if(!this.supportInstancing){const F=Q.modelMatrix;F&&(this.geomMatrixDirty&&(this.modelMatrixArray=this.geomItem.getGeomMat4().asArray()),U.uniformMatrix4fv(F.location,!1,this.modelMatrixArray));const B=Q.drawItemData;B&&U.uniform4fv(B.location,this.geomData);const l=Q.cutawayData;if(l){if(this.cutDataChanged&&this.geomItem.isCutawayEnabled()){const F=this.geomItem.getCutVector(),U=this.geomItem.getCutDist();this.cutData=[F.x,F.y,F.z,U]}U.uniform4fv(l.location,this.cutData)}}const B=Q.drawItemId;return B&&U.uniform1i(B.location,this.drawItemId),!0}destroy(){this.geomItem.removeListenerById("visibilityChanged",this.listenerIDs.visibilityChanged),this.supportInstancing||(this.geomItem.getParameter("GeomMat").removeListenerById("valueChanged",this.listenerIDs["GeomMat.valueChanged"]),this.geomItem.removeListenerById("cutAwayChanged",this.listenerIDs.cutAwayChanged))}}class sd extends nQ{constructor(F,U){super(),this.gl=F,this.glGeom=U,this.id=U?U.getGeom().getId():this.getId(),this.glGeomItems=[],this.glgeomItems_freeIndices=[],this.glgeomItemEventHandlers=[],this.drawIdsArray=null,this.drawIdsBuffer=null,this.drawIdsBufferDirty=!0,this.highlightedIdsArray=null,this.highlightedIdsBuffer=null,this.highlightedIdsBufferDirty=!0,this.visibleItems=[],this.highlightedItems=[]}getGLGeom(){return this.glGeom}getDrawCount(){return this.visibleItems.length}addGLGeomItem(F){let U;this.glgeomItems_freeIndices.length>0?U=this.glgeomItems_freeIndices.pop():(U=this.glGeomItems.length,this.glGeomItems.push(null)),F.geomItem.isVisible()&&(this.visibleItems.push(U),this.emit("drawCountChanged",{change:1,count:this.visibleItems.length})),F.geomItem.isHighlighted()&&(this.highlightedItems.push(U),this.highlightedIdsBufferDirty=!0);const Q={};Q.highlightChanged=Q=>{if(F.geomItem.isHighlighted()){if(this.highlightedItems.includes(U))return;this.highlightedItems.push(U),this.emit("highlightedCountChanged",{change:1,count:this.highlightedItems.length})}else this.highlightedItems.splice(this.highlightedItems.indexOf(U),1),this.emit("highlightedCountChanged",{change:-1,count:this.highlightedItems.length});this.highlightedIdsBufferDirty=!0},F.geomItem.on("highlightChanged",Q.highlightChanged),Q.visibilityChanged=F=>{F.visible?(this.visibleItems.push(U),this.emit("drawCountChanged",{change:1,count:this.visibleItems.length})):(this.visibleItems.splice(this.visibleItems.indexOf(U),1),this.emit("drawCountChanged",{change:-1,count:this.visibleItems.length})),this.drawIdsBufferDirty=!0},F.geomItem.on("visibilityChanged",Q.visibilityChanged),this.glGeomItems[U]=F,this.glgeomItemEventHandlers[U]=Q,this.drawIdsBufferDirty=!0,F.GLGeomItemSet=this}removeGLGeomItem(F){const U=this.glGeomItems.indexOf(F),Q=this.glgeomItemEventHandlers[U];F.geomItem.off("highlightChanged",Q.highlightChanged),F.geomItem.off("visibilityChanged",Q.visibilityChanged),this.glGeomItems[U]=null,this.glgeomItemEventHandlers[U]=null,F.GLGeomItemSet=null,this.glgeomItems_freeIndices.push(U),F.geomItem.isVisible()&&(this.visibleItems.splice(this.visibleItems.indexOf(U),1),this.emit("drawCountChanged",{change:-1,count:this.visibleItems.length})),F.geomItem.isHighlighted()&&(this.highlightedItems.splice(this.highlightedItems.indexOf(U),1),this.emit("highlightedCountChanged",{change:-1,count:this.highlightedItems.length})),this.drawIdsBufferDirty=!0,this.glGeomItems.length==this.glgeomItems_freeIndices.length&&this.destroy()}updateDrawIDsBuffer(){const F=this.gl;F.floatTexturesSupported?(this.drawIdsBuffer&&this.glGeomItems.length!=this.drawIdsArray.length&&(this.gl.deleteBuffer(this.drawIdsBuffer),this.drawIdsBuffer=null),this.drawIdsBuffer||(this.drawIdsBuffer=F.createBuffer(),F.bindBuffer(F.ARRAY_BUFFER,this.drawIdsBuffer)),F.bindBuffer(F.ARRAY_BUFFER,this.drawIdsBuffer),F.bufferData(F.ARRAY_BUFFER,this.getDrawIdsArray(),F.STATIC_DRAW),this.drawIdsBufferDirty=!1):this.drawIdsBufferDirty=!1}getDrawIdsArray(){return this.drawIdsBufferDirty&&(this.drawIdsArray&&this.glGeomItems.length==this.drawIdsArray.length||(this.drawIdsArray=new Float32Array(this.glGeomItems.length)),this.visibleItems.forEach(((F,U)=>{this.drawIdsArray[U]=this.glGeomItems[F].getDrawItemId()})),this.drawIdsBufferDirty=!1),this.drawIdsArray}updateHighlightedIDsBuffer(){const F=this.gl;F.floatTexturesSupported?(this.highlightedIdsBuffer&&this.glGeomItems.length>this.highlightedIdsArray.length&&(this.gl.deleteBuffer(this.highlightedIdsBuffer),this.highlightedIdsBuffer=null),this.highlightedIdsBuffer||(this.highlightedIdsBuffer=F.createBuffer()),F.bindBuffer(F.ARRAY_BUFFER,this.highlightedIdsBuffer),F.bufferData(F.ARRAY_BUFFER,this.getHighlightedIdsArray(),F.STATIC_DRAW),this.highlightedIdsBufferDirty=!1):this.highlightedIdsBufferDirty=!1}getHighlightedIdsArray(){return this.highlightedIdsBufferDirty&&((!this.highlightedIdsArray||this.highlightedItems.length>this.highlightedIdsArray.length)&&(this.highlightedIdsArray=new Float32Array(this.glGeomItems.length)),this.highlightedItems.forEach(((F,U)=>{this.highlightedIdsArray[U]=this.glGeomItems[F].getDrawItemId()})),this.highlightedIdsBufferDirty=!1),this.highlightedIdsArray}draw(F){0!=this.visibleItems.length&&(this.drawIdsBufferDirty&&this.updateDrawIDsBuffer(),this.__bindAndRender(F,this.visibleItems,this.drawIdsBuffer))}drawHighlighted(F){0!=this.highlightedItems.length&&(this.highlightedIdsBufferDirty&&this.updateHighlightedIDsBuffer(),this.__bindAndRender(F,this.highlightedItems,this.highlightedIdsBuffer))}__bindAndRender(F,U,Q){const B=this.gl,l=F.unifs;if(F.glGeom!=this.glGeom&&(this.glGeom.bind(F),F.glGeom=this.glGeom),B.floatTexturesSupported&&B.drawElementsInstanced&&F.supportsInstancing){F.unifs.instancedDraw&&B.uniform1i(F.unifs.instancedDraw.location,1);const V=F.attrs.instancedIds.location;B.enableVertexAttribArray(V),B.bindBuffer(B.ARRAY_BUFFER,Q),B.vertexAttribPointer(V,1,B.FLOAT,!1,4,0),B.vertexAttribDivisor(V,1),F.bindViewports(l,(()=>{this.glGeom.drawInstanced(F,U.length)}))}else F.unifs.instancedDraw&&B.uniform1i(F.unifs.instancedDraw.location,0),U.forEach((U=>{this.glGeomItems[U].bind(F),F.bindViewports(l,(()=>{this.glGeom.draw(F)}))}))}destroy(){this.drawIdsBuffer&&(this.gl.deleteBuffer(this.drawIdsBuffer),this.drawIdsBuffer=null),this.highlightedIdsBuffer&&(this.gl.deleteBuffer(this.highlightedIdsBuffer),this.highlightedIdsBuffer=null),this.emit("destructing")}}class id extends nQ{constructor(F,U){super(),this.pass=F,this.__gl=F.__gl,this.glMaterial=U,this.glGeomItemSets={},this.drawCount=0;const Q=U.getMaterial(),B=F=>{Q.off("transparencyChanged",B);for(const F in this.glGeomItemSets){const U=this.glGeomItemSets[F];for(const F of U.glGeomItems){const U=F.geomItem;this.pass.removeGeomItem(U),this.pass.__renderer.assignTreeItemToGLPass(U)}}};Q.on("transparencyChanged",B)}getGLMaterial(){return this.glMaterial}addGLGeomItem(F,U){const Q=U.getGeom().getId();let B=this.glGeomItemSets[Q];B||(B=new sd(this.__gl,U),this.addGeomItemSet(B)),B.addGLGeomItem(F)}drawCountChanged(F){this.drawCount+=F.change,this.emit("updated")}__materialChanged(){const F=this.glMaterial.getMaterial();if(!this.pass.checkMaterial(F))for(const F in this.glGeomItemSets){const U=this.glGeomItemSets[F];for(const F of U.glGeomItems){const U=F.geomItem;this.pass.removeGeomItem(U),this.pass.__renderer.assignTreeItemToGLPass(U)}}}addGeomItemSet(F){const U=F.getGLGeom().getGeom().getId();this.glGeomItemSets[U]=F;const Q=F.on("drawCountChanged",(F=>{this.drawCountChanged(F)}));F.once("destructing",(()=>{F.removeListenerById("drawCountChanged",Q),delete this.glGeomItemSets[U],0==Object.keys(this.glGeomItemSets).length&&this.emit("destructing")}))}draw(F){if(0==this.drawCount)return;this.glMaterial.bind(F,!0);for(const U in this.glGeomItemSets){this.glGeomItemSets[U].draw(F)}}drawHighlighted(F){this.glMaterial.bind(F,!1);for(const U in this.glGeomItemSets){this.glGeomItemSets[U].drawHighlighted(F)}}drawGeomData(F){this.glMaterial.bind(F,!1);for(const U in this.glGeomItemSets){this.glGeomItemSets[U].draw(F)}}}class ed extends nQ{constructor(F,U,Q){super(),this.gl=F,this.pass=U,this.glShader=Q.glShader,this.glgeomdatashader=Q.glgeomdatashader,this.glselectedshader=Q.glselectedshader,this.glMaterialGeomItemSets=[]}findMaterialGeomItemSets(F){for(const U of this.glMaterialGeomItemSets)if(U.glMaterial==F)return U}addGLGeomItem(F,U,Q){let B=this.findMaterialGeomItemSets(Q);B||(B=new id(this.pass,Q),this.addMaterialGeomItemSets(B)),B.addGLGeomItem(F,U)}addMaterialGeomItemSets(F){this.glMaterialGeomItemSets.push(F);const U=()=>{this.emit("updated")},Q=()=>{F.off("updated",U),F.off("destructing",Q);const B=this.glMaterialGeomItemSets.indexOf(F);this.glMaterialGeomItemSets.splice(B,1),0==this.glMaterialGeomItemSets.length&&this.emit("destructing")};F.on("updated",U),F.on("destructing",Q)}removeMaterialGeomItemSets(F){const U=this.glMaterialGeomItemSets.indexOf(F);this.glMaterialGeomItemSets.splice(U,1)}getMaterialGeomItemSets(){return this.glMaterialGeomItemSets}draw(F){const U=this.glShader;if(this.glShader.bind(F)){this.pass.renderer.glGeomItemLibrary.bind(F);for(const U of this.glMaterialGeomItemSets)U.draw(F);U.unbind(F)}}drawHighlightedGeoms(F){if(this.glselectedshader&&this.glselectedshader.bind(F,"highlight")){this.pass.renderer.glGeomItemLibrary.bind(F);for(const U of this.glMaterialGeomItemSets)U.drawHighlighted(F)}}drawGeomData(F){if(!this.glgeomdatashader||!this.glgeomdatashader.bind(F,"geomData"))return;this.pass.renderer.glGeomItemLibrary.bind(F);const U=this.gl,{floatGeomBuffer:Q,passId:B}=F.unifs;Q&&U.uniform1i(Q.location,F.floatGeomBuffer?1:0),B&&U.uniform1i(B.location,F.passIndex);for(const U of this.glMaterialGeomItemSets)U.drawGeomData(F)}}const Id=(F,U)=>{const Q=new Int32Array(U);return Q.set(F),Q};class Zd extends nQ{constructor(F){super(),this.renderer=F,this.__gl=F.gl,this.shaderAttrSpec={},this.freeGeomIndices=[],this.geoms=[],this.geomRefCounts=[],this.geomsDict={},this.glGeomsDict={},this.geomBuffersTmp=[],this.glattrbuffers={},this.shaderBindings={},this.bufferNeedsRealloc=!1,this.attributesAllocator=new gQ,this.dirtyGeomIndices=new Set,this.attributesAllocator.on("resized",(()=>{this.bufferNeedsRealloc=!0})),this.attributesAllocator.on("dataReallocated",(F=>{const U=F.id,Q=F.allocation;this.dirtyGeomIndices.add(U),this.geomVertexOffsets[U]=Q.start,this.geomVertexCounts[U]=Q.size})),this.geomVertexCounts=new Int32Array(0),this.geomVertexOffsets=new Int32Array(0),this.numIndices=0,this.indicesAllocator=new gQ,this.indicesCounts=new Int32Array(0),this.indicesOffsets=new Int32Array(0),this.indicesAllocator.on("resized",(()=>{this.bufferNeedsRealloc=!0})),this.indicesAllocator.on("dataReallocated",(F=>{const U=F.id;this.dirtyGeomIndices.add(U)}))}constructGLGeom(F){let U=this.glGeomsDict[F.getId()];if(null!=U)return U;const Q=this.__gl;if(F instanceof rB||F instanceof kB)U=new vV(Q,F);else if(F instanceof NB||F instanceof YB)U=new Vd(Q,F);else{if(!(F instanceof uB||F instanceof TB))throw new Error("Unsupported geom type:"+F.constructor.name);U=new ld(Q,F)}return this.glGeomsDict[F.getId()]=U,U.on("updated",(()=>{this.renderer.requestRedraw()})),U.addRef(this),U}addGeom(F){let U=this.geomsDict[F.getId()];if(null!=U)return this.geomRefCounts[U]++,U;this.freeGeomIndices.length?U=this.freeGeomIndices.pop():(U=this.geoms.length,this.geomVertexCounts=Id(this.geomVertexCounts,U+1),this.geomVertexOffsets=Id(this.geomVertexOffsets,U+1)),this.geomVertexCounts[U]=0,this.geomVertexOffsets[U]=0;return F.on("geomDataChanged",(()=>{this.dirtyGeomIndices.add(U),this.emit("updated")})),F.on("geomDataTopologyChanged",(()=>{this.dirtyGeomIndices.add(U),this.emit("updated")})),this.geoms[U]=F,this.geomRefCounts[U]=1,this.geomsDict[F.getId()]=U,this.dirtyGeomIndices.add(U),U==this.indicesCounts.length&&(this.indicesCounts=Id(this.indicesCounts,this.indicesCounts.length+1),this.indicesOffsets=Id(this.indicesOffsets,this.indicesOffsets.length+1)),this.indicesCounts[U]=0,this.indicesOffsets[U]=0,U}removeGeom(F){const U=this.geomsDict[F.getId()];this.geomRefCounts[U]--,this.geomRefCounts[U]>0||(this.attributesAllocator.getAllocation(U)&&this.attributesAllocator.deallocate(U),this.indicesAllocator.getAllocation(U)&&this.indicesAllocator.deallocate(U),this.dirtyGeomIndices.has(U)&&this.dirtyGeomIndices.delete(U),this.geomVertexCounts[U]=0,this.geomVertexOffsets[U]=0,this.geoms[U]=null,this.freeGeomIndices.push(U),delete this.geomsDict[F.getId()],delete this.geomBuffersTmp[U],this.indicesCounts[U]=0,this.indicesOffsets[U]=0)}getGeom(F){return this.geoms[F]}getGeomOffsetAndCount(F){return[this.indicesOffsets[F],this.indicesCounts[F]]}allocateBuffers(F){const U=this.geoms[F];if(!U)return;const Q=U.genBuffers(),B=Q.numRenderVerts?Q.numRenderVerts:Q.numVertices;if(this.geomVertexCounts[F]!=B)if(0==B)this.attributesAllocator.deallocate(F),this.geomVertexOffsets[F]=0,this.geomVertexCounts[F]=0;else{const U=this.attributesAllocator.allocate(F,B);this.geomVertexOffsets[F]=U.start,this.geomVertexCounts[F]=U.size}for(const F in Q.attrBuffers)if(!this.shaderAttrSpec[F]){const U=Q.attrBuffers[F],B=LV(this.__gl,U.dataType);this.shaderAttrSpec[F]={dataType:U.dataType,normalized:U.normalized,dimension:B.dimension,elementSize:B.elementSize}}if(Q.indices){const U=Q.indices.length;if(this.indicesCounts[F]!=U)if(0==U)this.indicesAllocator.deallocate(F),this.indicesOffsets[F]=0,this.indicesCounts[F]=0;else{const Q=this.indicesAllocator.allocate(F,U),B=4;this.indicesOffsets[F]=Q.start*B,this.indicesCounts[F]=Q.size}}else this.indicesOffsets[F]=this.geomVertexOffsets[F],this.indicesCounts[F]=this.geomVertexCounts[F];this.geomBuffersTmp[F]=Q}genBuffers(){const F=this.attributesAllocator.reservedSpace,U=this.__gl;for(const Q in this.shaderAttrSpec){const B=this.shaderAttrSpec[Q],l=F*B.dimension;B.numValues=l,this.glattrbuffers[Q]&&this.glattrbuffers[Q].buffer&&U.deleteBuffer(this.glattrbuffers[Q].buffer);const V=U.createBuffer();U.bindBuffer(U.ARRAY_BUFFER,V);const d=l*B.elementSize;U.bufferData(U.ARRAY_BUFFER,d,U.STATIC_DRAW),this.glattrbuffers[Q]={buffer:V,dataType:B.dataType,normalized:B.normalized,length:l,dimension:B.dimension},"textureCoords"==Q&&(this.glattrbuffers.texCoords=this.glattrbuffers.textureCoords)}const Q=this.indicesAllocator.reservedSpace;if(this.numIndices!=Q){const F=this.__gl;this.indexBuffer&&F.deleteBuffer(this.indexBuffer),this.indexBuffer=F.createBuffer(),F.bindBuffer(F.ELEMENT_ARRAY_BUFFER,this.indexBuffer);const U=this.indicesAllocator.reservedSpace,Q=U*4;F.bufferData(F.ELEMENT_ARRAY_BUFFER,Q,F.STATIC_DRAW),this.numIndices=U}}uploadBuffers(F){const U=this.__gl;let Q=this.geomBuffersTmp[F];if(!Q){const U=this.geoms[F];if(!U)return;Q=U.genBuffers(),this.geomBuffersTmp[F]=Q}const B=this.geomVertexCounts[F],l=Q.numRenderVerts?Q.numRenderVerts:Q.numVertices;if(B!=l)throw new Error("Invalid allocation for this geom");if(0!=l){for(const B in Q.attrBuffers){const l=this.shaderAttrSpec[B],V=Q.attrBuffers[B],d=this.glattrbuffers[B];if(!V||!d)continue;U.bindBuffer(U.ARRAY_BUFFER,d.buffer);const R=l.elementSize,t=this.geomVertexOffsets[F]*R*l.dimension;U.bufferSubData(U.ARRAY_BUFFER,t,V.values,0)}if(U.bindBuffer(U.ARRAY_BUFFER,null),Q.indices&&Q.indices.length>0){const U=Q.indices,B=this.indicesAllocator.getAllocation(F);if(B.size!=U.length)throw new Error("Invalid allocation for this geom");const l=this.attributesAllocator.getAllocation(F),V=new Uint32Array(B.size);for(let F=0;F<U.length;F++)V[F]=Q.indices[F]+l.start;const d=this.__gl;d.bindBuffer(d.ELEMENT_ARRAY_BUFFER,this.indexBuffer);const R=4,t=B.start*R;d.bufferSubData(d.ELEMENT_ARRAY_BUFFER,t,V,0),d.bindBuffer(d.ELEMENT_ARRAY_BUFFER,null)}this.emit("geomDataChanged",{index:F})}else this.emit("geomDataChanged",{index:F})}cleanGeomBuffers(){if(new Set(this.dirtyGeomIndices).forEach((F=>{this.allocateBuffers(F)})),this.bufferNeedsRealloc){for(const F in this.shaderBindings){this.shaderBindings[F].destroy()}this.shaderBindings={};for(let F=0;F<this.geoms.length;F++)this.geoms[F]&&this.dirtyGeomIndices.add(F);this.genBuffers(),this.bufferNeedsRealloc=!1}this.dirtyGeomIndices.forEach((F=>{this.uploadBuffers(F)})),this.dirtyGeomIndices=new Set,this.geomBuffersTmp=[]}bind(F){this.dirtyGeomIndices.size>0&&this.cleanGeomBuffers();let U=this.shaderBindings[F.shaderkey];if(U)U.bind(F);else{U=yV(this.__gl,F.attrs,this.glattrbuffers,this.indexBuffer),this.shaderBindings[F.shaderkey]=U}return!0}unbind(F){const U=this.shaderBindings[F.shaderkey];U&&U.unbind(F)}clearBuffers(){const F=this.__gl;for(const U in this.glattrbuffers){const Q=this.glattrbuffers[U];Q.shared||F.deleteBuffer(Q.buffer)}this.glattrbuffers={},this.indexBuffer&&(F.deleteBuffer(this.indexBuffer),this.indexBuffer=null);for(const F in this.shaderBindings){this.shaderBindings[F].destroy()}this.shaderBindings={}}destroy(){this.clearBuffers(),this.__destroyed=!0,this.emit("destructing",{})}}var cd=IB("Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwp2YXIgd29ya2VyX2NvZGU9ZnVuY3Rpb24oZSl7InVzZSBzdHJpY3QiO2NvbnN0IHQ9KGUsdCk9PltlWzBdLXRbMF0sZVsxXS10WzFdLGVbMl0tdFsyXV0scz0oZSx0KT0+W2VbMF0qdCxlWzFdKnRdLGk9ZT0+TWF0aC5zcXJ0KGVbMF0qZVswXStlWzFdKmVbMV0pLG49ZT0+Wy1lWzBdLC1lWzFdLC1lWzJdLGVbM11dLGE9KGUsdCk9Pntjb25zdCBzPWVbMF0saT1lWzFdLG49ZVsyXSxhPWVbM10sbz10WzBdLHI9dFsxXSxsPXRbMl0sZD10WzNdO3JldHVybltzKmQrYSpvK2kqbC1uKnIsaSpkK2EqcituKm8tcypsLG4qZCthKmwrcypyLWkqbyxhKmQtcypvLWkqci1uKmxdfSxvPShlLHQpPT57Y29uc3Qgcz1bdFswXSx0WzFdLHRbMl0sMF0saT1hKGEoZSxzKSxuKGUpKTtyZXR1cm5baVswXSxpWzFdLGlbMl1dfSxyPVtdLGw9W107bGV0IGQsdSxoPVtdLGY9W10sYz0hMSxNPTAsZz0wLG09MCxwPTAsYj0uMDA0LHY9e3NvbGlkQW5nbGU6MCxmcnVzdHVtOjAsdG9vQ2xvc2U6MCxiZWhpbmQ6MH07Y29uc3QgeT1lPT57bFtlXXx8KGxbZV09ITAsaC5wdXNoKGUpKX0sQz1lPT57bFtlXSYmKGxbZV09ITEsZi5wdXNoKGUpKX0sQT1lPT57aWYoIWV8fCFkKXJldHVybjtpZighZS52aXNpYmxlKXJldHVybjtpZighZS5jdWxsYWJsZSlyZXR1cm4gdm9pZCBDKGUuaWQpO2NvbnN0IG49ZS5ib3VuZGluZ1JhZGl1cztpZihjKXtjb25zdCBzPW4vTTtpZihiPjAmJnM8YilyZXR1cm4gdm9pZCB5KGUuaWQpO2NvbnN0IGk9dChlLnBvcyxkKSxhPW8odSxpKTtpZihNYXRoLmFicyhhWzBdKS1uPi41Kmd8fE1hdGguYWJzKGFbMV0pLW4+LjUqTSlyZXR1cm4gdm9pZCB5KGUuaWQpfWVsc2V7Y29uc3QgYT10KGUucG9zLGQpLHI9KGU9Pk1hdGguc3FydChlWzBdKmVbMF0rZVsxXSplWzFdK2VbMl0qZVsyXSkpKGEpO2lmKHI8bilyZXR1cm4gdi50b29DbG9zZSsrLHZvaWQgQyhlLmlkKTtjb25zdCBsPU1hdGguYXNpbihuL3IpO2lmKGI+MCYmbDxiKXJldHVybiB2LnNvbGlkQW5nbGUrKyx2b2lkIHkoZS5pZCk7Y29uc3QgaD1vKHUsYSksZj1baFswXSxoWzJdXSxjPVtoWzFdLGhbMl1dLE09aShmKSxnPWkoYyksQT1NYXRoLmFzaW4obi9NKSxJPU1hdGguYXNpbihuL2cpLHc9cyhmLDEvTSksRT1zKGMsMS9nKTtsZXQgUDtpZihoWzJdPjA/KHYuYmVoaW5kKyssUD1bTWF0aC5QSS1NYXRoLmFicyhNYXRoLmFzaW4od1swXSkpLUEsTWF0aC5QSS1NYXRoLmFicyhNYXRoLmFzaW4oRVswXSkpLUldKTpQPVtNYXRoLmFicyhNYXRoLmFzaW4od1swXSkpLUEsTWF0aC5hYnMoTWF0aC5hc2luKEVbMF0pKS1JXSxQWzBdPm18fFBbMV0+cClyZXR1cm4gdi5mcnVzdHVtKyssdm9pZCB5KGUuaWQpfUMoZS5pZCl9LEk9ZT0+e2gubGVuZ3RoPjB8fGYubGVuZ3RoPjA/KGUoe3R5cGU6IkN1bGxSZXN1bHRzIixuZXdseUN1bGxlZDpoLG5ld2x5VW5DdWxsZWQ6Zn0pLGg9W10sZj1bXSk6ZSh7dHlwZToiRG9uZSJ9KSx2PXtzb2xpZEFuZ2xlOjAsZnJ1c3R1bTowLHRvb0Nsb3NlOjAsYmVoaW5kOjB9fSx3PShlLHQpPT57IlZpZXdwb3J0Q2hhbmdlZCI9PWUudHlwZT8oKGUsdCk9PntlLmlzT3J0aG9ncmFwaGljPyhjPSEwLE09ZS5mcnVzdHVtSGVpZ2h0LGc9ZS5mcnVzdHVtV2lkdGgpOihjPSExLG09ZS5mcnVzdHVtSGFsZkFuZ2xlWCxwPWUuZnJ1c3R1bUhhbGZBbmdsZVkpLGI9ZS5zb2xpZEFuZ2xlTGltaXQsZCYmdSYmKHIuZm9yRWFjaChBKSxJKHQpKX0pKGUsdCk6IlZpZXdDaGFuZ2VkIj09ZS50eXBlPygoZSx0KT0+e2Q9ZS5jYW1lcmFQb3MsdT1uKGUuY2FtZXJhT3JpKSxiPWUuc29saWRBbmdsZUxpbWl0LHIuZm9yRWFjaChBKSxJKHQpfSkoZSx0KToiVXBkYXRlR2VvbUl0ZW1zIj09ZS50eXBlJiYoZS5yZW1vdmVkSXRlbUluZGljZXMuZm9yRWFjaCgoZT0+e3JbZV09bnVsbH0pKSxlLmdlb21JdGVtcy5mb3JFYWNoKChlPT57cltlLmlkXXx8KGxbZS5pZF09ITEpLHJbZS5pZF09ZSxBKHJbZS5pZF0pfSkpLEkodCkpfTtyZXR1cm4gc2VsZi5vbm1lc3NhZ2U9ZnVuY3Rpb24oZSl7dyhlLmRhdGEsc2VsZi5wb3N0TWVzc2FnZSl9LGUuaGFuZGxlTWVzc2FnZT13LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxlfSh7fSk7Cgo=","data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR0xHZW9tSXRlbUxpYnJhcnlDdWxsaW5nV29ya2VyLmpzIiwic291cmNlcyI6WyJzcmMvUmVuZGVyZXIvRHJhd2luZy9HTEdlb21JdGVtTGlicmFyeUN1bGxpbmdXb3JrZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovXG5jb25zdCB2ZWMzX25vcm1hbGl6ZSA9ICh2ZWMpID0+IHtcbiAgbGV0IGxlbiA9IHZlY1swXSAqIHZlY1swXSArIHZlY1sxXSAqIHZlY1sxXSArIHZlY1syXSAqIHZlY1syXVxuICBpZiAobGVuIDwgTnVtYmVyLkVQU0lMT04pIHtcbiAgICByZXR1cm4gWzAsIDAsIDBdXG4gIH1cbiAgbGVuID0gMS4wIC8gTWF0aC5zcXJ0KGxlbilcbiAgcmV0dXJuIFt2ZWNbMF0gKiBsZW4sIHZlY1sxXSAqIGxlbiwgdmVjWzJdICogbGVuXVxufVxuY29uc3QgdmVjM19zdWJ0cmFjdCA9ICh2ZWMxLCB2ZWMyKSA9PiB7XG4gIHJldHVybiBbdmVjMVswXSAtIHZlYzJbMF0sIHZlYzFbMV0gLSB2ZWMyWzFdLCB2ZWMxWzJdIC0gdmVjMlsyXV1cbn1cbmNvbnN0IHZlYzNfZG90ID0gKHZlYzEsIHZlYzIpID0+IHtcbiAgcmV0dXJuIHZlYzFbMF0gKiB2ZWMyWzBdICsgdmVjMVsxXSAqIHZlYzJbMV0gKyB2ZWMxWzJdICogdmVjMlsyXVxufVxuY29uc3QgdmVjM19sZW5ndGggPSAodmVjKSA9PiB7XG4gIHJldHVybiBNYXRoLnNxcnQodmVjWzBdICogdmVjWzBdICsgdmVjWzFdICogdmVjWzFdICsgdmVjWzJdICogdmVjWzJdKVxufVxuY29uc3QgdmVjM19zY2FsZSA9ICh2ZWMsIHNjbCkgPT4ge1xuICByZXR1cm4gW3ZlY1swXSAqIHNjbCwgdmVjWzFdICogc2NsLCB2ZWNbMl0gKiBzY2xdXG59XG5jb25zdCB2ZWMyX3NjYWxlID0gKHZlYywgc2NsKSA9PiB7XG4gIHJldHVybiBbdmVjWzBdICogc2NsLCB2ZWNbMV0gKiBzY2xdXG59XG5jb25zdCB2ZWMyX2xlbmd0aCA9ICh2ZWMpID0+IHtcbiAgcmV0dXJuIE1hdGguc3FydCh2ZWNbMF0gKiB2ZWNbMF0gKyB2ZWNbMV0gKiB2ZWNbMV0pXG59XG5cbmNvbnN0IHF1YXRfY29uanVnYXRlID0gKHF1YXQpID0+IHtcbiAgcmV0dXJuIFstcXVhdFswXSwgLXF1YXRbMV0sIC1xdWF0WzJdLCBxdWF0WzNdXVxufVxuY29uc3QgcXVhdF9tdWx0aXBseSA9IChxdWF0MSwgcXVhdDIpID0+IHtcbiAgY29uc3QgYXggPSBxdWF0MVswXVxuICBjb25zdCBheSA9IHF1YXQxWzFdXG4gIGNvbnN0IGF6ID0gcXVhdDFbMl1cbiAgY29uc3QgYXcgPSBxdWF0MVszXVxuICBjb25zdCBieCA9IHF1YXQyWzBdXG4gIGNvbnN0IGJ5ID0gcXVhdDJbMV1cbiAgY29uc3QgYnogPSBxdWF0MlsyXVxuICBjb25zdCBidyA9IHF1YXQyWzNdXG5cbiAgcmV0dXJuIFtcbiAgICBheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5LFxuICAgIGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYnosXG4gICAgYXogKiBidyArIGF3ICogYnogKyBheCAqIGJ5IC0gYXkgKiBieCxcbiAgICBhdyAqIGJ3IC0gYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6LFxuICBdXG59XG5jb25zdCBxdWF0X3JvdGF0ZVZlYzMgPSAocXVhdCwgdmVjMykgPT4ge1xuICBjb25zdCB2cSA9IFt2ZWMzWzBdLCB2ZWMzWzFdLCB2ZWMzWzJdLCAwLjBdXG4gIGNvbnN0IHBxID0gcXVhdF9tdWx0aXBseShxdWF0X211bHRpcGx5KHF1YXQsIHZxKSwgcXVhdF9jb25qdWdhdGUocXVhdCkpXG4gIHJldHVybiBbcHFbMF0sIHBxWzFdLCBwcVsyXV1cbn1cblxuLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFZpZXcgZGF0YS5cbmNvbnN0IGdlb21JdGVtc0RhdGEgPSBbXVxuY29uc3QgZnJ1c3R1bUN1bGxlZCA9IFtdXG5sZXQgY3VsbGVkQ291bnQgPSAwXG5sZXQgbmV3bHlDdWxsZWQgPSBbXVxubGV0IG5ld2x5VW5DdWxsZWQgPSBbXVxuXG5sZXQgY2FtZXJhUG9zXG5sZXQgY2FtZXJhSW52T3JpXG5sZXQgaXNPcnRob2dyYXBoaWMgPSBmYWxzZVxubGV0IGZydXN0dW1IZWlnaHQgPSAwXG5sZXQgZnJ1c3R1bVdpZHRoID0gMFxubGV0IGZydXN0dW1IYWxmQW5nbGVYID0gMFxubGV0IGZydXN0dW1IYWxmQW5nbGVZID0gMFxubGV0IHNvbGlkQW5nbGVMaW1pdCA9IDAuMDA0XG5cbmxldCBjdWxsUmVhc29uID0ge1xuICBzb2xpZEFuZ2xlOiAwLFxuICBmcnVzdHVtOiAwLFxuICB0b29DbG9zZTogMCxcbiAgYmVoaW5kOiAwLFxufVxuXG5jb25zdCBjdWxsID0gKGluZGV4KSA9PiB7XG4gIGlmICghZnJ1c3R1bUN1bGxlZFtpbmRleF0pIHtcbiAgICBmcnVzdHVtQ3VsbGVkW2luZGV4XSA9IHRydWVcbiAgICBjdWxsZWRDb3VudCsrXG4gICAgbmV3bHlDdWxsZWQucHVzaChpbmRleClcbiAgfVxufVxuY29uc3QgdW5DdWxsID0gKGluZGV4KSA9PiB7XG4gIGlmIChmcnVzdHVtQ3VsbGVkW2luZGV4XSkge1xuICAgIGZydXN0dW1DdWxsZWRbaW5kZXhdID0gZmFsc2VcbiAgICBjdWxsZWRDb3VudC0tXG4gICAgbmV3bHlVbkN1bGxlZC5wdXNoKGluZGV4KVxuICB9XG59XG5cbmNvbnN0IGNoZWNrR2VvbUl0ZW0gPSAoZ2VvbUl0ZW1EYXRhKSA9PiB7XG4gIGlmICghZ2VvbUl0ZW1EYXRhIHx8ICFjYW1lcmFQb3MpIHJldHVyblxuICBpZiAoIWdlb21JdGVtRGF0YS52aXNpYmxlKSByZXR1cm5cblxuICAvLyBTb21lIGl0ZW1zLCBsaWtlIEhhbmRsZXMgdGhhdFxuICBpZiAoIWdlb21JdGVtRGF0YS5jdWxsYWJsZSkge1xuICAgIHVuQ3VsbChnZW9tSXRlbURhdGEuaWQpXG4gICAgcmV0dXJuXG4gIH1cbiAgY29uc3QgYm91bmRpbmdSYWRpdXMgPSBnZW9tSXRlbURhdGEuYm91bmRpbmdSYWRpdXNcblxuICBpZiAoaXNPcnRob2dyYXBoaWMpIHtcbiAgICAvLyBDdWxsIHZlcnkgc21hbGwgaXRlbXNcbiAgICAvLyBOb3RlOiB3aGVuIGluIFZSLCB0aGUgRm9WIGJlY29tZXMgdmVyeSB3aWRlIGFuZCB0aGUgcGl4ZWxcbiAgICAvLyBoZWlnaHQgdmFyaWVzLiBJdCBzZWVtcyBtb3JlIGNvbnNpc3RlbnQgdG8ganVzdCB1c2Ugc29saWRBbmdsZVxuICAgIC8vIHdoaWNoIGlzIHJlc29sdXRpb24gaW52YXJpYW50LlxuICAgIGNvbnN0IHZoZWlnaHQgPSBib3VuZGluZ1JhZGl1cyAvIGZydXN0dW1IZWlnaHRcbiAgICBpZiAoc29saWRBbmdsZUxpbWl0ID4gMCAmJiB2aGVpZ2h0IDwgc29saWRBbmdsZUxpbWl0KSB7XG4gICAgICBjdWxsKGdlb21JdGVtRGF0YS5pZClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIE5vdyB3ZSBjaGVjayBpZiB0aGUgaXRlbSBpcyB3aXRoaW4gdGhlIHZpZXcgZnJ1c3R1bS5cbiAgICAvLyBXZSBuZWVkIHRoZSBzb2xpZCBhbmdsZSBvZiB0aGUgaXRlbSBmb3IgZWFjaCBheGlzIChYICYgWSlcbiAgICAvLyBUaGlzIGlzIGJlY2F1c2UgYXQgdGhlIGNvcm5lcnMgb2YgdGhlIHNjcmVlbiwgdGhlIG9iamVjdCBpcyBzbGlnaHRseVxuICAgIC8vIGZ1cnRoZXIgYXdheSwgc28gdGhlIHNvbGlkIGFuZ2xlIGNhbGN1bGF0ZWQgYWJvdmUgZ2V0cyBzbWFsbGVyLlxuICAgIC8vIFRoaXMgd2FzIGNhdXNpbmcgaXRlbXMgd2l0aCBiaWcgYm91bmRpbmcgc3BoZXJlcyB0byBiZSBjdWxsZWQgdG9vIGVhcmx5XG4gICAgLy8gYXQgdGhlIGNvcm5lciBvZiB0aGUgc2NyZWVuLlxuICAgIGNvbnN0IHZlYyA9IHZlYzNfc3VidHJhY3QoZ2VvbUl0ZW1EYXRhLnBvcywgY2FtZXJhUG9zKVxuICAgIGNvbnN0IHZpZXdQb3MgPSBxdWF0X3JvdGF0ZVZlYzMoY2FtZXJhSW52T3JpLCB2ZWMpXG4gICAgaWYgKFxuICAgICAgTWF0aC5hYnModmlld1Bvc1swXSkgLSBib3VuZGluZ1JhZGl1cyA+IGZydXN0dW1XaWR0aCAqIDAuNSB8fFxuICAgICAgTWF0aC5hYnModmlld1Bvc1sxXSkgLSBib3VuZGluZ1JhZGl1cyA+IGZydXN0dW1IZWlnaHQgKiAwLjVcbiAgICApIHtcbiAgICAgIGN1bGwoZ2VvbUl0ZW1EYXRhLmlkKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IHZlYyA9IHZlYzNfc3VidHJhY3QoZ2VvbUl0ZW1EYXRhLnBvcywgY2FtZXJhUG9zKVxuICAgIGNvbnN0IGRpc3QgPSB2ZWMzX2xlbmd0aCh2ZWMpXG4gICAgLy8gdW5DdWxsIGl0ZW1zIGNsb3NlIHRvIHRoZSB2aWV3LlxuICAgIGlmIChkaXN0IDwgYm91bmRpbmdSYWRpdXMpIHtcbiAgICAgIGN1bGxSZWFzb24udG9vQ2xvc2UrK1xuICAgICAgdW5DdWxsKGdlb21JdGVtRGF0YS5pZClcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICAvLyBDdWxsIHZlcnkgc21hbGwgaXRlbXNcbiAgICAvLyBOb3RlOiB3aGVuIGluIFZSLCB0aGUgRm9WIGJlY29tZXMgdmVyeSB3aWRlIGFuZCB0aGUgcGl4ZWxcbiAgICAvLyBoZWlnaHQgdmFyaWVzLiBJdCBzZWVtcyBtb3JlIGNvbnNpc3RlbnQgdG8ganVzdCB1c2Ugc29saWRBbmdsZVxuICAgIC8vIHdoaWNoIGlzIHJlc29sdXRpb24gaW52YXJpYW50LlxuICAgIGNvbnN0IHNvbGlkQW5nbGUgPSBNYXRoLmFzaW4oYm91bmRpbmdSYWRpdXMgLyBkaXN0KVxuICAgIGlmIChzb2xpZEFuZ2xlTGltaXQgPiAwICYmIHNvbGlkQW5nbGUgPCBzb2xpZEFuZ2xlTGltaXQpIHtcbiAgICAgIGN1bGxSZWFzb24uc29saWRBbmdsZSsrXG4gICAgICBjdWxsKGdlb21JdGVtRGF0YS5pZClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIE5vdyB3ZSBjaGVjayBpZiB0aGUgaXRlbSBpcyB3aXRoaW4gdGhlIHZpZXcgZnJ1c3R1bS5cbiAgICAvLyBXZSBuZWVkIHRoZSBzb2xpZCBhbmdsZSBvZiB0aGUgaXRlbSBmb3IgZWFjaCBheGlzIChYICYgWSlcbiAgICAvLyBUaGlzIGlzIGJlY2F1c2UgYXQgdGhlIGNvcm5lcnMgb2YgdGhlIHNjcmVlbiwgdGhlIG9iamVjdCBpcyBzbGlnaHRseVxuICAgIC8vIGZ1cnRoZXIgYXdheSwgc28gdGhlIHNvbGlkIGFuZ2xlIGNhbGN1bGF0ZWQgYWJvdmUgZ2V0cyBzbWFsbGVyLlxuICAgIC8vIFRoaXMgd2FzIGNhdXNpbmcgaXRlbXMgd2l0aCBiaWcgYm91bmRpbmcgc3BoZXJlcyB0byBiZSBjdWxsZWQgdG9vIGVhcmx5XG4gICAgLy8gYXQgdGhlIGNvcm5lciBvZiB0aGUgc2NyZWVuLlxuICAgIGNvbnN0IHZpZXdQb3MgPSBxdWF0X3JvdGF0ZVZlYzMoY2FtZXJhSW52T3JpLCB2ZWMpXG4gICAgY29uc3Qgdmlld1ZlY1haID0gW3ZpZXdQb3NbMF0sIHZpZXdQb3NbMl1dXG4gICAgY29uc3Qgdmlld1ZlY1laID0gW3ZpZXdQb3NbMV0sIHZpZXdQb3NbMl1dXG4gICAgY29uc3QgZGlzdFggPSB2ZWMyX2xlbmd0aCh2aWV3VmVjWFopXG4gICAgY29uc3QgZGlzdFkgPSB2ZWMyX2xlbmd0aCh2aWV3VmVjWVopXG4gICAgY29uc3Qgc29saWRBbmdsZVhaID0gTWF0aC5hc2luKGJvdW5kaW5nUmFkaXVzIC8gZGlzdFgpXG4gICAgY29uc3Qgc29saWRBbmdsZVlaID0gTWF0aC5hc2luKGJvdW5kaW5nUmFkaXVzIC8gZGlzdFkpXG4gICAgY29uc3Qgdmlld1ZlY05vcm1YWiA9IHZlYzJfc2NhbGUodmlld1ZlY1haLCAxIC8gZGlzdFgpXG4gICAgY29uc3Qgdmlld1ZlY05vcm1ZWiA9IHZlYzJfc2NhbGUodmlld1ZlY1laLCAxIC8gZGlzdFkpXG5cbiAgICBsZXQgdmlld0FuZ2xlXG4gICAgLy8gSWYgYW4gaXRlbSBpcyBiZWhpbmQgdGhlIHZpZXdlclxuICAgIGlmICh2aWV3UG9zWzJdID4gMCkge1xuICAgICAgY3VsbFJlYXNvbi5iZWhpbmQrK1xuICAgICAgdmlld0FuZ2xlID0gW1xuICAgICAgICBNYXRoLlBJIC0gTWF0aC5hYnMoTWF0aC5hc2luKHZpZXdWZWNOb3JtWFpbMF0pKSAtIHNvbGlkQW5nbGVYWixcbiAgICAgICAgTWF0aC5QSSAtIE1hdGguYWJzKE1hdGguYXNpbih2aWV3VmVjTm9ybVlaWzBdKSkgLSBzb2xpZEFuZ2xlWVosXG4gICAgICBdXG4gICAgfSBlbHNlIHtcbiAgICAgIHZpZXdBbmdsZSA9IFtcbiAgICAgICAgTWF0aC5hYnMoTWF0aC5hc2luKHZpZXdWZWNOb3JtWFpbMF0pKSAtIHNvbGlkQW5nbGVYWixcbiAgICAgICAgTWF0aC5hYnMoTWF0aC5hc2luKHZpZXdWZWNOb3JtWVpbMF0pKSAtIHNvbGlkQW5nbGVZWixcbiAgICAgIF1cbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2coZ2VvbUl0ZW1EYXRhLmlkLCAnYW5nbGUgVG8gSXRlbTonLCBmcnVzdHVtSGFsZkFuZ2xlWCwgdmlld0FuZ2xlWzBdLCBmcnVzdHVtSGFsZkFuZ2xlWSwgdmlld0FuZ2xlWzFdKVxuICAgIGlmICh2aWV3QW5nbGVbMF0gPiBmcnVzdHVtSGFsZkFuZ2xlWCB8fCB2aWV3QW5nbGVbMV0gPiBmcnVzdHVtSGFsZkFuZ2xlWSkge1xuICAgICAgY3VsbFJlYXNvbi5mcnVzdHVtKytcbiAgICAgIGN1bGwoZ2VvbUl0ZW1EYXRhLmlkKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICB9XG5cbiAgdW5DdWxsKGdlb21JdGVtRGF0YS5pZClcbn1cblxuY29uc3Qgb25WaWV3UG9ydENoYW5nZWQgPSAoZGF0YSwgcG9zdE1lc3NhZ2UpID0+IHtcbiAgaWYgKGRhdGEuaXNPcnRob2dyYXBoaWMpIHtcbiAgICBpc09ydGhvZ3JhcGhpYyA9IHRydWVcbiAgICBmcnVzdHVtSGVpZ2h0ID0gZGF0YS5mcnVzdHVtSGVpZ2h0XG4gICAgZnJ1c3R1bVdpZHRoID0gZGF0YS5mcnVzdHVtV2lkdGhcbiAgfSBlbHNlIHtcbiAgICBpc09ydGhvZ3JhcGhpYyA9IGZhbHNlXG4gICAgZnJ1c3R1bUhhbGZBbmdsZVggPSBkYXRhLmZydXN0dW1IYWxmQW5nbGVYXG4gICAgZnJ1c3R1bUhhbGZBbmdsZVkgPSBkYXRhLmZydXN0dW1IYWxmQW5nbGVZXG4gIH1cblxuICBzb2xpZEFuZ2xlTGltaXQgPSBkYXRhLnNvbGlkQW5nbGVMaW1pdFxuICBpZiAoY2FtZXJhUG9zICYmIGNhbWVyYUludk9yaSkge1xuICAgIGdlb21JdGVtc0RhdGEuZm9yRWFjaChjaGVja0dlb21JdGVtKVxuICAgIG9uRG9uZShwb3N0TWVzc2FnZSlcbiAgfVxufVxuXG5jb25zdCBvblZpZXdDaGFuZ2VkID0gKGRhdGEsIHBvc3RNZXNzYWdlKSA9PiB7XG4gIGNhbWVyYVBvcyA9IGRhdGEuY2FtZXJhUG9zXG4gIGNhbWVyYUludk9yaSA9IHF1YXRfY29uanVnYXRlKGRhdGEuY2FtZXJhT3JpKVxuICBzb2xpZEFuZ2xlTGltaXQgPSBkYXRhLnNvbGlkQW5nbGVMaW1pdFxuICBnZW9tSXRlbXNEYXRhLmZvckVhY2goY2hlY2tHZW9tSXRlbSlcbiAgb25Eb25lKHBvc3RNZXNzYWdlKVxufVxuXG5jb25zdCBvbkRvbmUgPSAocG9zdE1lc3NhZ2UpID0+IHtcbiAgLy8gY29uc29sZS5sb2coJ29uRG9uZSBuZXdseUN1bGxlZDonLCBuZXdseUN1bGxlZC5sZW5ndGgsICduZXdseVVuQ3VsbGVkOicsIG5ld2x5VW5DdWxsZWQubGVuZ3RoKVxuICBpZiAobmV3bHlDdWxsZWQubGVuZ3RoID4gMCB8fCBuZXdseVVuQ3VsbGVkLmxlbmd0aCA+IDApIHtcbiAgICAvLyBjb25zb2xlLmxvZygnQ3VsbFJlc3VsdHMgY3VsbGVkOicsIGN1bGxlZENvdW50LCAndmlzaWJsZTonLCBnZW9tSXRlbXNEYXRhLmxlbmd0aCAtIDEgLSBjdWxsZWRDb3VudCwgY3VsbFJlYXNvbilcbiAgICAvLyBjb25zb2xlLmxvZygnQ3VsbFJlc3VsdHMgY3VsbGVkOicsIGN1bGxlZENvdW50LCAndmlzaWJsZTonLCBnZW9tSXRlbXNEYXRhLmxlbmd0aCAtIDEgLSBjdWxsZWRDb3VudClcbiAgICBwb3N0TWVzc2FnZSh7IHR5cGU6ICdDdWxsUmVzdWx0cycsIG5ld2x5Q3VsbGVkLCBuZXdseVVuQ3VsbGVkIH0pXG4gICAgbmV3bHlDdWxsZWQgPSBbXVxuICAgIG5ld2x5VW5DdWxsZWQgPSBbXVxuICB9IGVsc2Uge1xuICAgIHBvc3RNZXNzYWdlKHsgdHlwZTogJ0RvbmUnIH0pXG4gIH1cbiAgY3VsbFJlYXNvbiA9IHtcbiAgICBzb2xpZEFuZ2xlOiAwLFxuICAgIGZydXN0dW06IDAsXG4gICAgdG9vQ2xvc2U6IDAsXG4gICAgYmVoaW5kOiAwLFxuICB9XG59XG5cbmNvbnN0IGhhbmRsZU1lc3NhZ2UgPSAoZGF0YSwgcG9zdE1lc3NhZ2UpID0+IHtcbiAgaWYgKGRhdGEudHlwZSA9PSAnVmlld3BvcnRDaGFuZ2VkJykge1xuICAgIG9uVmlld1BvcnRDaGFuZ2VkKGRhdGEsIHBvc3RNZXNzYWdlKVxuICB9IGVsc2UgaWYgKGRhdGEudHlwZSA9PSAnVmlld0NoYW5nZWQnKSB7XG4gICAgb25WaWV3Q2hhbmdlZChkYXRhLCBwb3N0TWVzc2FnZSlcbiAgfSBlbHNlIGlmIChkYXRhLnR5cGUgPT0gJ1VwZGF0ZUdlb21JdGVtcycpIHtcbiAgICBkYXRhLnJlbW92ZWRJdGVtSW5kaWNlcy5mb3JFYWNoKChpZCkgPT4ge1xuICAgICAgZ2VvbUl0ZW1zRGF0YVtpZF0gPSBudWxsXG4gICAgfSlcbiAgICBkYXRhLmdlb21JdGVtcy5mb3JFYWNoKChnZW9tSXRlbSkgPT4ge1xuICAgICAgLy8gTmV3IGdlb21zIGRlZmF1bHQgdG8gYmVpbmcgdW4tY3VsbGVkXG4gICAgICBpZiAoIWdlb21JdGVtc0RhdGFbZ2VvbUl0ZW0uaWRdKSBmcnVzdHVtQ3VsbGVkW2dlb21JdGVtLmlkXSA9IGZhbHNlXG4gICAgICBnZW9tSXRlbXNEYXRhW2dlb21JdGVtLmlkXSA9IGdlb21JdGVtXG4gICAgICBjaGVja0dlb21JdGVtKGdlb21JdGVtc0RhdGFbZ2VvbUl0ZW0uaWRdKVxuICAgIH0pXG4gICAgb25Eb25lKHBvc3RNZXNzYWdlKVxuICB9XG59XG5cbnNlbGYub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGhhbmRsZU1lc3NhZ2UoZXZlbnQuZGF0YSwgc2VsZi5wb3N0TWVzc2FnZSlcbn1cblxuZXhwb3J0IHsgaGFuZGxlTWVzc2FnZSB9XG4iXSwibmFtZXMiOlsidmVjM19zdWJ0cmFjdCIsInZlYzEiLCJ2ZWMyIiwidmVjMl9zY2FsZSIsInZlYyIsInNjbCIsInZlYzJfbGVuZ3RoIiwiTWF0aCIsInNxcnQiLCJxdWF0X2Nvbmp1Z2F0ZSIsInF1YXQiLCJxdWF0X211bHRpcGx5IiwicXVhdDEiLCJxdWF0MiIsImF4IiwiYXkiLCJheiIsImF3IiwiYngiLCJieSIsImJ6IiwiYnciLCJxdWF0X3JvdGF0ZVZlYzMiLCJ2ZWMzIiwidnEiLCJwcSIsImdlb21JdGVtc0RhdGEiLCJmcnVzdHVtQ3VsbGVkIiwiY2FtZXJhUG9zIiwiY2FtZXJhSW52T3JpIiwibmV3bHlDdWxsZWQiLCJuZXdseVVuQ3VsbGVkIiwiaXNPcnRob2dyYXBoaWMiLCJmcnVzdHVtSGVpZ2h0IiwiZnJ1c3R1bVdpZHRoIiwiZnJ1c3R1bUhhbGZBbmdsZVgiLCJmcnVzdHVtSGFsZkFuZ2xlWSIsInNvbGlkQW5nbGVMaW1pdCIsImN1bGxSZWFzb24iLCJzb2xpZEFuZ2xlIiwiZnJ1c3R1bSIsInRvb0Nsb3NlIiwiYmVoaW5kIiwiY3VsbCIsImluZGV4IiwicHVzaCIsInVuQ3VsbCIsImNoZWNrR2VvbUl0ZW0iLCJnZW9tSXRlbURhdGEiLCJ2aXNpYmxlIiwiY3VsbGFibGUiLCJpZCIsImJvdW5kaW5nUmFkaXVzIiwidmhlaWdodCIsInBvcyIsInZpZXdQb3MiLCJhYnMiLCJkaXN0IiwidmVjM19sZW5ndGgiLCJhc2luIiwidmlld1ZlY1haIiwidmlld1ZlY1laIiwiZGlzdFgiLCJkaXN0WSIsInNvbGlkQW5nbGVYWiIsInNvbGlkQW5nbGVZWiIsInZpZXdWZWNOb3JtWFoiLCJ2aWV3VmVjTm9ybVlaIiwidmlld0FuZ2xlIiwiUEkiLCJvbkRvbmUiLCJwb3N0TWVzc2FnZSIsImxlbmd0aCIsInR5cGUiLCJoYW5kbGVNZXNzYWdlIiwiZGF0YSIsImZvckVhY2giLCJvblZpZXdQb3J0Q2hhbmdlZCIsImNhbWVyYU9yaSIsIm9uVmlld0NoYW5nZWQiLCJyZW1vdmVkSXRlbUluZGljZXMiLCJnZW9tSXRlbXMiLCJnZW9tSXRlbSIsInNlbGYiLCJvbm1lc3NhZ2UiLCJldmVudCJdLCJtYXBwaW5ncyI6InlDQVNBLE1BQU1BLEVBQWdCLENBQUNDLEVBQU1DLElBQ3BCLENBQUNELEVBQUssR0FBS0MsRUFBSyxHQUFJRCxFQUFLLEdBQUtDLEVBQUssR0FBSUQsRUFBSyxHQUFLQyxFQUFLLElBV3pEQyxFQUFhLENBQUNDLEVBQUtDLElBQ2hCLENBQUNELEVBQUksR0FBS0MsRUFBS0QsRUFBSSxHQUFLQyxHQUUzQkMsRUFBZUYsR0FDWkcsS0FBS0MsS0FBS0osRUFBSSxHQUFLQSxFQUFJLEdBQUtBLEVBQUksR0FBS0EsRUFBSSxJQUc1Q0ssRUFBa0JDLEdBQ2YsRUFBRUEsRUFBSyxJQUFLQSxFQUFLLElBQUtBLEVBQUssR0FBSUEsRUFBSyxJQUV2Q0MsRUFBZ0IsQ0FBQ0MsRUFBT0MsS0FDNUIsTUFBTUMsRUFBS0YsRUFBTSxHQUNYRyxFQUFLSCxFQUFNLEdBQ1hJLEVBQUtKLEVBQU0sR0FDWEssRUFBS0wsRUFBTSxHQUNYTSxFQUFLTCxFQUFNLEdBQ1hNLEVBQUtOLEVBQU0sR0FDWE8sRUFBS1AsRUFBTSxHQUNYUSxFQUFLUixFQUFNLEdBRWpCLE1BQU8sQ0FDTEMsRUFBS08sRUFBS0osRUFBS0MsRUFBS0gsRUFBS0ssRUFBS0osRUFBS0csRUFD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",!1);class nd extends nQ{constructor(F,U){super(),this.renderer=F,this.glGeomItems=[void 0],this.glGeomItemEventHandlers=[void 0],this.glGeomItemsMap={},this.glGeomItemsIndexFreeList=[],this.dirtyItemIndices=[],this.dirtyWorkerItemIndices=new Set,this.removedItemIndices=[],this.enableFrustumCulling=U.enableFrustumCulling,this.enableFrustumCulling&&this.setupCullingWorker(F)}setupCullingWorker(F){this.worker=new cd;let U=!0;this.worker.onmessage=F=>{"CullResults"==F.data.type?this.applyCullResults(F.data):"Done"==F.data.type&&this.renderer.emit("CullingUpdated"),U=!0};const Q=()=>{const U=F.getViewport(),Q=F.getViewport().getCamera(),B=U.getWidth()/U.getHeight();if(Q.isOrthographic()){const U=Q.getFrustumHeight(),l=U*B;this.worker.postMessage({type:"ViewportChanged",frustumHeight:U,frustumWidth:l,isOrthographic:!0,solidAngleLimit:F.solidAngleLimit})}else{const U=.5*Q.getFov(),l=Math.atan(Math.tan(U)*B);this.worker.postMessage({type:"ViewportChanged",frustumHalfAngleX:l,frustumHalfAngleY:U,isOrthographic:!1,solidAngleLimit:F.solidAngleLimit})}};F.on("resized",Q);const B=F.getViewport().getCamera();B.on("projectionParamChanged",(F=>{B.isOrthographic()&&Q()})),Q(),F.once("xrViewportSetup",(U=>{U.xrViewport.on("presentingChanged",(U=>{if(U.state){V=10;const U=Math.PI/180,Q=62*U,B=50*U;this.worker.postMessage({type:"ViewportChanged",frustumHalfAngleX:B,frustumHalfAngleY:Q,isOrthographic:!1,solidAngleLimit:2*F.solidAngleLimit})}else V=5,Q()}))}));let l=0,V=5;F.on("viewChanged",(Q=>{if(U){if(l%V==0){U=!1;const B=Q.viewXfo.tr,l=Q.viewXfo.ori;this.worker.postMessage({type:"ViewChanged",cameraPos:B.asArray(),cameraOri:l.asArray(),solidAngleLimit:F.solidAngleLimit})}l++}}));const d=()=>{const U=F.getViewport().getCamera().getParameter("GlobalXfo").getValue(),Q=U.tr,B=U.ori;this.worker.postMessage({type:"ViewChanged",cameraPos:Q.asArray(),cameraOri:B.asArray(),solidAngleLimit:F.solidAngleLimit})};F.getViewport().getCamera().on("movementFinished",d),d()}addGeomItem(F){let U=this.glGeomItemsMap[F.getId()];if(null!=U)return this.glGeomItems[U];const Q=F.getParameter("Material");let B=Q.getValue(),l=-1;B.getShaderClass().getPackedMaterialData&&(l=this.renderer.glMaterialLibrary.addMaterial(B));const V=F=>{this.renderer.glMaterialLibrary.removeMaterial(B),B=Q.getValue(),I.materialId=this.renderer.glMaterialLibrary.addMaterial(B),Z()};Q.on("valueChanged",V);const d=F.getParameter("Geometry");let R=d.getValue();const t=this.renderer.glGeomLibrary.addGeom(R),s=F=>{this.renderer.glGeomLibrary.removeGeom(R),R=d.getValue(),I.geomId=this.renderer.glGeomLibrary.addGeom(R),this.dirtyWorkerItemIndices.add(U),Z()};d.on("valueChanged",s),this.glGeomItemsIndexFreeList.length>0?U=this.glGeomItemsIndexFreeList.pop():(U=this.glGeomItems.length,this.glGeomItems.push(null)),this.removedItemIndices.includes(U)&&this.removedItemIndices.splice(this.removedItemIndices.indexOf(U),1),this.dirtyItemIndices.push(U);const i=this.renderer.gl,e=i.floatTexturesSupported,I=new td(i,F,U,t,l,e),Z=()=>{this.dirtyItemIndices.includes(U)||(this.dirtyItemIndices.push(U),this.renderer.drawItemChanged())};F.getParameter("GeomMat").on("valueChanged",Z),F.on("cutAwayChanged",Z),F.on("highlightChanged",Z),F.on("selectabilityChanged",Z);const c=()=>{this.dirtyWorkerItemIndices.has(U)||(this.dirtyWorkerItemIndices.add(U),this.renderer.drawItemChanged())};return this.dirtyWorkerItemIndices.add(U),F.on("visibilityChanged",c),F.getParameter("GeomMat").on("valueChanged",c),d.on("boundingBoxChanged",c),this.glGeomItems[U]=I,this.glGeomItemEventHandlers[U]={geomItemChanged:Z,materialChanged:V,geomChanged:s,workerItemDataChanged:c},this.glGeomItemsMap[F.getId()]=U,this.renderer.requestRedraw(),I}applyCullResults(F){const{newlyCulled:U,newlyUnCulled:Q}=F;0==U.length&&0==Q.length||(U.forEach((F=>{this.glGeomItems[F]?this.glGeomItems[F].setCulled(!0):-1==this.removedItemIndices.indexOf(F)&&console.warn("Culling worker has items that are deleted.")})),Q.forEach((F=>{this.glGeomItems[F]?this.glGeomItems[F].setCulled(!1):-1==this.removedItemIndices.indexOf(F)&&console.warn("Culling worker has items that are deleted.")})),this.renderer.requestRedraw(),this.renderer.emit("CullingUpdated"))}removeGeomItem(F){const U=this.glGeomItemsMap[F.getId()];if(null==U)return;const Q=this.glGeomItems[U],B=F.getParameter("Geometry").getValue();this.renderer.glGeomLibrary.removeGeom(B);const l=F.getParameter("Material").getValue();this.renderer.glMaterialLibrary.removeMaterial(l);const V=this.glGeomItemEventHandlers[U];F.getParameter("Material").off("valueChanged",V.materialChanged),F.getParameter("GeomMat").off("valueChanged",V.geomItemChanged),F.off("cutAwayChanged",V.geomItemChanged),F.off("highlightChanged",V.geomItemChanged),F.off("visibilityChanged",V.workerItemDataChanged),F.getParameter("GeomMat").off("valueChanged",V.workerItemDataChanged);const d=F.getParameter("Geometry");return d.off("valueChanged",V.geomChanged),d.off("boundingBoxChanged",V.workerItemDataChanged),this.glGeomItems[U]=null,this.glGeomItemEventHandlers[U]=null,this.glGeomItemsIndexFreeList.push(U),delete this.glGeomItemsMap[F.getId()],this.removedItemIndices.push(U),this.renderer.requestRedraw(),Q}getGeomItem(F){if(!(F>=this.glGeomItems.length))return this.glGeomItems[F].geomItem;console.warn("Invalid Draw Item id:"+F+" NumItems:"+(this.glGeomItems.length-1))}getGLGeomItem(F){const U=this.glGeomItemsMap[F.getId()];return null!=U?this.glGeomItems[U]:null}populateDrawItemDataArray(F,U,Q){const B=this.glGeomItems[F];if(!B)return;const{geomItem:l,geomId:V}=B,d=24*U;let R=0;l.isCutawayEnabled()&&(R|=Rd.GEOMITEM_FLAG_CUTAWAY),0==l.getSelectable()&&(R|=Rd.GEOMITEM_INVISIBLE_IN_GEOMDATA);const t=$U.createFromBuffer(Q.buffer,4*(d+0));t.set(R,0,0,0);const s=l.getParameter("Material").getValue(),i=this.renderer.glMaterialLibrary.getMaterialAllocation(s);i&&(t.z=i.start),t.w=V;const e=l.getGeomMat4(),I=$U.createFromBuffer(Q.buffer,4*(d+4)),Z=$U.createFromBuffer(Q.buffer,4*(d+8)),c=$U.createFromBuffer(Q.buffer,4*(d+12));I.set(e.xAxis.x,e.yAxis.x,e.zAxis.x,e.translation.x),Z.set(e.xAxis.y,e.yAxis.y,e.zAxis.y,e.translation.y),c.set(e.xAxis.z,e.yAxis.z,e.zAxis.z,e.translation.z);const n=$U.createFromBuffer(Q.buffer,4*(d+16));if(l.isHighlighted()){const F=l.getHighlight();n.set(F.r,F.g,F.b,F.a)}const a=$U.createFromBuffer(Q.buffer,4*(d+20));if(l.isCutawayEnabled()){const F=l.getCutVector(),U=l.getCutDist();a.set(F.x,F.y,F.z,U)}}getCullingWorkerData(F,U,Q){const B=F.getParameter("BoundingBox").getValue(),l=.5*B.size(),V=B.center();let d=0!=F.cullable;const R=U.getParameter("MaintainScreenSize");return R&&R.getValue()&&(d=!1),U.getShaderName().startsWith("ScreenSpace")&&(d=!1),U.hasParameter("PointSize")&&(d=!1),{id:Q,boundingRadius:l,pos:V.asArray(),cullable:d,visible:F.isVisible()}}uploadGeomItemsToWorker(){if(this.enableFrustumCulling){const F=[];this.dirtyWorkerItemIndices.forEach((U=>{const Q=this.glGeomItems[U];if(!Q)return;const{geomItem:B}=Q,l=B.getParameter("Material").getValue();F.push(this.getCullingWorkerData(B,l,U))})),this.worker.postMessage({type:"UpdateGeomItems",geomItems:F,removedItemIndices:this.removedItemIndices}),this.dirtyWorkerItemIndices.clear(),this.removedItemIndices=[]}}uploadGeomItems(F){const U=this.renderer.gl;if(!U.floatTexturesSupported)return;let Q=Math.round(Math.sqrt(6*this.glGeomItems.length)+.5);Q=DU.nextPow2(Q),Q%6!=0&&(Q+=6-Q%6),this.glGeomItemsTexture?this.glGeomItemsTexture.width!=Q&&(this.glGeomItemsTexture.resize(Q,Q),this.dirtyItemIndices=Array(Q*Q/6).fill().map(((F,U)=>U))):(this.glGeomItemsTexture=new bV(U,{format:"RGBA",type:"FLOAT",width:Q,height:Q,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.glGeomItemsTexture.clear()),U.bindTexture(U.TEXTURE_2D,this.glGeomItemsTexture.glTex);const B=this.glGeomItemsTexture.getType();for(let F=0;F<this.dirtyItemIndices.length;F++){const l=this.dirtyItemIndices[F],V=Math.floor(6*l/Q);let d=l+1;for(let U=F+1;U<this.dirtyItemIndices.length;U++){const F=this.dirtyItemIndices[U];if(Math.floor(6*F/Q)!=V)break;if(F!=d)break;d++}const R=d-l,t=6*l%Q,s=6*R,i=1,e=new Float32Array(24*R);for(let F=l;F<d;F++)this.populateDrawItemDataArray(F,F-l,e);if(B==U.FLOAT)this.glGeomItemsTexture.populate(e,s,i,t,V,!1);else{const F=DU.convertFloat32ArrayToUInt16Array(e);this.glGeomItemsTexture.populate(F,s,i,t,V,!1)}F+=R-1}this.removedItemIndices=[],this.dirtyItemIndices=[]}bind(F){(this.dirtyWorkerItemIndices.size>0||this.removedItemIndices.length>0)&&this.uploadGeomItemsToWorker(F),this.dirtyItemIndices.length>0&&this.uploadGeomItems(F);const U=this.renderer.gl,{instancesTexture:Q,instancesTextureSize:B}=F.unifs;Q&&(this.glGeomItemsTexture.bindToUniform(F,Q),U.uniform1i(B.location,this.glGeomItemsTexture.width))}destroy(){}}let ad=void 0,Sd=!1,gd=!1;const bd={};class Gd extends WQ{constructor(F,U={}){if(super(),this.listenerIDs={},zU.gpuDesc){this.solidAngleLimit=.004,this.__shaders={},this.__passes={},this.__passesRegistrationOrder=[],this.__passCallbacks=[],this.__viewports=[],this.__activeViewport=void 0,this.__continuousDrawing=!1,this.__redrawRequested=!1,this.__isMobile=zU.isMobileDevice,this.__drawSuspensionLevel=0,this.__shaderDirectives={},this.directives={},this.__xrViewportPresenting=!1,this.setupWebGL(F,U.webglOptions?{...U,...U.webglOptions}:U),this.bindEventHandlers(),this.addViewport("main"),this.glMaterialLibrary=new Bd(this),this.glMaterialLibrary.on("updated",(()=>{this.requestRedraw()})),this.glGeomLibrary=new Zd(this),this.glGeomLibrary.on("updated",(()=>{this.requestRedraw()})),this.glGeomItemLibrary=new nd(this,U),this.glGeomItemLibrary.on("updated",(()=>{this.requestRedraw()}));for(const F in bd)for(const U of bd[F])this.addPass(new U,F,!1);this.__supportXR=void 0===U.supportXR||U.supportXR,this.__xrViewport=void 0,this.__xrViewportPromise=new Promise(((F,U)=>{if(this.__supportXR&&navigator.xr){const U=()=>{this.__gl.makeXRCompatible().then((()=>{this.__xrViewport=this.__setupXRViewport(),this.emit("xrViewportSetup",{xrViewport:this.__xrViewport}),F(this.__xrViewport)}))};navigator.xr.isSessionSupported("immersive-vr").then((F=>{F&&U()})).catch((F=>{console.warn("Unable to setup XR:"+F)}))}}))}else console.warn("Unable to create renderer")}addShaderPreprocessorDirective(F,U){this.__shaderDirectives[F]=U?"#define "+F+" = "+U:"#define "+F;const Q=[];for(const F in this.__shaderDirectives)Q.push(this.__shaderDirectives[F]);this.directives=Q,this.__gl.shaderopts={directives:Q}}getWidth(){return this.__glcanvas.width}getHeight(){return this.__glcanvas.height}addViewport(F){const U=new KV(this,F,this.getWidth(),this.getHeight());return U.on("updated",(()=>{this.requestRedraw()})),U.on("viewChanged",(F=>{this.__xrViewportPresenting||this.emit("viewChanged",F)})),this.__viewports.push(U),U}getViewport(F=0){return this.__viewports[F]}getViewportAtPos(F,U){for(const Q of this.__viewports){const B=Q.getPosX(),l=Q.getPosY(),V=Q.getWidth(),d=Q.getHeight();if(F>=B&&U>=l&&F<=V+B&&U<=d+l)return Q}}activateViewport(F){this.__activeViewport!=F&&(this.__activeViewport=F)}activateViewportAtPos(F,U){if(this.__xrViewportPresenting)return;const Q=this.getViewportAtPos(F,U);Q&&Q!=this.__activeViewport&&this.activateViewport(Q)}getActiveViewport(){return this.__activeViewport}suspendDrawing(){this.__drawSuspensionLevel++}resumeDrawing(){this.__drawSuspensionLevel--,0==this.__drawSuspensionLevel&&(this.renderGeomDataFbos(),this.requestRedraw())}renderGeomDataFbos(){if(1==this.__renderGeomDataFbosRequested)return;this.__renderGeomDataFbosRequested=!0;window.requestAnimationFrame((()=>{for(const F of this.__viewports)F.renderGeomDataFbo();this.__renderGeomDataFbosRequested=!1}))}setupGrid(F,U,Q,B){return console.warn("@GLBaseRenderer#setupGrid - Deprecated Method. Please use scene.setupGrid"),this.__scene.setupGrid(F,Q,U)}getScene(){return this.__scene}setScene(F){this.__scene=F,this.addTreeItem(this.__scene.getRoot()),this.__gizmoContext&&this.__gizmoContext.setSelectionManager(F.getSelectionManager()),this.emit("sceneSet",{scene:this.__scene})}addTreeItem(F){if(!(F instanceof dB))return;const U=F.getId(),Q={};if(this.listenerIDs[U]=Q,F instanceof ul){const U=F.getParameter("Geometry");if(null==U.getValue()){const B=()=>{this.assignTreeItemToGLPass(F)};Q["Geometry.valueChanged"]=U.once("valueChanged",B)}else this.assignTreeItemToGLPass(F)}else this.assignTreeItemToGLPass(F);for(const U of F.getChildren())U&&this.addTreeItem(U);Q.childAdded=F.on("childAdded",(F=>{this.addTreeItem(F.childItem)})),Q.childRemoved=F.on("childRemoved",(F=>{this.removeTreeItem(F.childItem)})),this.renderGeomDataFbos()}assignTreeItemToGLPass(F){if(F instanceof ul){const U=F;this.glGeomItemLibrary.addGeomItem(U)}let U=!1;for(let Q=this.__passesRegistrationOrder.length-1;Q>=0;Q--){const B={continueInSubTree:!0};if(U=this.__passesRegistrationOrder[Q].itemAddedToScene(F,B),U){if(!B.continueInSubTree)return;break}}if(!U)for(const U of this.__passCallbacks){const Q={continueInSubTree:!0};if(U.itemAddedFn(F,Q)){if(!Q.continueInSubTree)return;break}}}removeTreeItem(F){if(!(F instanceof dB))return;const U=F.getId(),Q=this.listenerIDs[U];delete this.listenerIDs[U],F.removeListenerById("childAdded",Q.childAdded),F.removeListenerById("childRemoved",Q.childRemoved);for(let U=this.__passesRegistrationOrder.length-1;U>=0;U--){const Q={continueInSubTree:!0};if(this.__passesRegistrationOrder[U].itemRemovedFromScene(F,Q)){if(!Q.continueInSubTree)return;break}}for(const U of this.__passCallbacks){if(!U.itemRemovedFn)continue;const Q={continueInSubTree:!0};if(U.itemRemovedFn(F,Q)){if(!Q.continueInSubTree)return;break}}for(const U of F.getChildren())U&&this.removeTreeItem(U);if(F instanceof ul){const U=F;if(Q["Geometry.valueChanged"]){F.getParameter("Geometry").removeListenerById("valueChanged",Q["Geometry.valueChanged"])}this.glGeomItemLibrary.removeGeomItem(U)}this.renderGeomDataFbos()}get gl(){return this.__gl}getGL(){return this.__gl}handleResize(F,U){if(!this.__xrViewportPresenting){if(F!=this.__glcanvas.width||U!=this.__glcanvas.height){this.__glcanvas.width=F,this.__glcanvas.height=U;for(const Q of this.__viewports)Q.resize(F,U);this.emit("resized",{width:F,height:U})}this.requestRedraw()}}getDiv(){return this.__glcanvas.parentElement}setupWebGL(F,U){const{tagName:Q}=F;if(!["DIV","CANVAS"].includes(Q))throw new Error("Only CANVAS and DIV are valid root elements.");const B="DIV"===Q;this.__glcanvas=F,B?(console.warn("@GLBaseRenderer#setupWebGL.","Using a DIV as root element is deprecated.","Use a CANVAS instead.","See: https://docs.zea.live/zea-engine/#/getting-started/get-started-with-engine?id=basic-setup"),this.__glcanvas=document.createElement("canvas"),this.__div=F,this.__div.appendChild(this.__glcanvas)):this.__glcanvas=F,this.__glcanvas.style["touch-action"]="none",this.__glcanvas.style.width="auto",this.__glcanvas.style.height="auto",this.__glcanvas.style.margin="0px";let l=performance.now(),V=0;const d=new ResizeObserver((F=>{for(const U of F){if(!U.contentRect)return;const F=()=>{let F,Q,B=window.devicePixelRatio;U.devicePixelContentBoxSize?(F=U.devicePixelContentBoxSize[0].inlineSize,Q=U.devicePixelContentBoxSize[0].blockSize,B=1):U.contentBoxSize?U.contentBoxSize[0]?(F=U.contentBoxSize[0].inlineSize,Q=U.contentBoxSize[0].blockSize):(F=U.contentBoxSize.inlineSize,Q=U.contentBoxSize.blockSize):(F=U.contentRect.width,Q=U.contentRect.height);const l=Math.round(F*B),V=Math.round(Q*B);this.handleResize(l,V)},Q=performance.now();Q-l>100?(l=Q,V&&(clearTimeout(V),V=0),F()):V=setTimeout((()=>{const U=performance.now();U-l>100&&(l=U,F())}),100)}}));this.handleResize(this.__glcanvas.parentElement.clientWidth,this.__glcanvas.parentElement.clientHeight);try{d.observe(this.__glcanvas.parentNode,{box:"device-pixel-content-box"})}catch(F){d.observe(this.__glcanvas.parentNode,{box:"content-box"})}U.preserveDrawingBuffer=!0,U.antialias=null==U.antialias||U.antialias,U.depth=!0,U.stencil=!1,U.alpha=!!U.alpha&&U.alpha,U.xrCompatible=!1,U.powerPreference=U.powerPreference||"high-performance",this.__gl=SV(this.__glcanvas,U),this.__gl||alert("Unable to create WebGL context. WebGL not supported."),this.__gl.renderer=this,"webgl2"==this.__gl.name&&this.addShaderPreprocessorDirective("ENABLE_ES3"),this.__gl.floatTexturesSupported&&this.addShaderPreprocessorDirective("ENABLE_FLOAT_TEXTURES");{const F="webgl2"==this.__gl.name?this.__gl.getExtension("WEBGL_multi_draw"):null;F&&!U.disableMultiDraw?(this.__gl.multiDrawArrays=F.multiDrawArraysWEBGL.bind(F),this.__gl.multiDrawElements=F.multiDrawElementsWEBGL.bind(F),this.__gl.multiDrawElementsInstanced=F.multiDrawElementsInstancedWEBGL.bind(F),this.__gl.multiDrawArraysInstanced=F.multiDrawArraysInstancedWEBGL.bind(F)):this.addShaderPreprocessorDirective("EMULATE_MULTI_DRAW")}this.__gl.screenQuad=new MV(this.__gl),this.__screenQuad=this.__gl.screenQuad,this.__floatGeomBuffer=null!=U.floatGeomBuffer?U.floatGeomBuffer:this.__gl.floatTexturesSupported,this.__gl.floatGeomBuffer=this.__floatGeomBuffer}bindEventHandlers(){const F=()=>this.getWidth()>0&&this.getHeight(),U=F=>{F.propagating=!0;const U=F.stopPropagation;F.stopPropagation=()=>{F.propagating=!1,U&&U.call(F)}},Q=F=>{const U=this.__glcanvas.getBoundingClientRect();F.rendererX=1*(F.clientX-U.left),F.rendererY=1*(F.clientY-U.top)},B=F=>!(!zU.isMobileDevice||"Safari"!=zU.browserName)&&(console.warn("Mobile Safari is triggering mouse event:",F.type),!0);this.__glcanvas.addEventListener("mousedown",(F=>{if(B(F))return;U(F),Q(F),Sd=!0,ad=this,ad.activateViewportAtPos(F.rendererX,F.rendererY);const l=ad.getActiveViewport();return l&&(F.pointerType=bQ.mouse,l.onPointerDown(F)),gd=!1,!1})),document.addEventListener("mouseup",(l=>{if(B(l))return;if(ad!=this||!F())return;U(l),Q(l),Sd=!1;const V=ad.getActiveViewport();return V&&(l.pointerType=bQ.mouse,V.onPointerUp(l)),gd&&(V&&(l.pointerType=bQ.mouse,V.onPointerLeave(l)),ad=void 0),!1})),document.addEventListener("mousemove",(l=>{if(B(l))return;if(ad!=this||!F())return;U(l),Q(l),Sd||ad.activateViewportAtPos(l.rendererX,l.rendererY);const V=ad.getActiveViewport();return V&&(l.pointerType=bQ.mouse,V.onPointerMove(l)),!1})),this.__glcanvas.addEventListener("mouseenter",(F=>{if(!B(F)&&!Sd){if(ad=this,F.pointerType=bQ.mouse,U(F),Q(F),ad.activateViewportAtPos(F.rendererX,F.rendererY),!Sd){const U=ad.getActiveViewport();U&&(F.pointerType=bQ.mouse,U.onPointerEnter(F))}gd=!1}})),this.__glcanvas.addEventListener("mouseleave",(Q=>{if(!B(Q)&&ad==this&&F())if(U(Q),Sd)gd=!0;else{const F=ad.getActiveViewport();F&&(Q.pointerType=bQ.mouse,F.onPointerLeave(Q)),ad=void 0}})),this.__glcanvas.addEventListener("touchstart",(F=>{F.stopPropagation(),F.preventDefault=()=>{},U(F);for(let U=0;U<F.touches.length;U++)Q(F.touches[U]);F.pointerType=bQ.touch,this.getViewport().onPointerDown(F)}),{passive:!0}),this.__glcanvas.addEventListener("touchend",(F=>{F.stopPropagation(),F.preventDefault=()=>{},U(F);for(let U=0;U<F.changedTouches.length;U++)Q(F.changedTouches[U]);F.pointerType=bQ.touch,this.getViewport().onPointerUp(F)}),{passive:!0}),this.__glcanvas.addEventListener("touchmove",(F=>{F.stopPropagation(),F.preventDefault=()=>{},U(F);for(let U=0;U<F.touches.length;U++)Q(F.touches[U]);F.pointerType=bQ.touch,this.getViewport().onPointerMove(F)}),{passive:!0});const l=B=>{if(ad==this&&F()){if(ad){U(B),Q(B);const F=ad.getActiveViewport();F&&F.onWheel(B)}return!1}};window.addEventListener?window.addEventListener("wheel",l,{passive:!1}):window.onmousewheel=document.onmousewheel=l,window.oncontextmenu=function(){return!1},document.addEventListener("keydown",(Q=>{if(ad!=this||!F())return;U(Q);const B=ad.getActiveViewport();B&&B.onKeyDown(Q)})),document.addEventListener("keyup",(Q=>{if(ad!=this||!F())return;U(Q);const B=ad.getActiveViewport();B&&B.onKeyUp(Q)}))}getGLCanvas(){return this.__glcanvas}frameAll(F=0){this.__viewports[F].frameView([this.__scene.getRoot()])}getOrCreateShader(F){let U=this.__shaders[F];return U||(U=PU.constructClass(F,this.__gl),U||console.error("@GLBaseRenderer#getOrCreateShader - Shader not registered with the Registry:",F),this.__shaders[F]=U),U}addPass(F,U=-1,Q=!0){-1==U&&(U=F.getPassType()),this.__passes[U]||(this.__passes[U]=[]);let B=0;for(const F in this.__passes){if(F==U)break;B+=this.__passes[F].length}if(B+=this.__passes[U].length,F.on("updated",(F=>{this.requestRedraw(),this.renderGeomDataFbos()})),F.init(this,B),this.__passes[U].push(F),Q){let F=0;for(const U in this.__passes){const Q=this.__passes[U];Q.forEach(((U,Q)=>{U.setPassIndex(F+Q)})),F+=Q.length}}return this.__passesRegistrationOrder.push(F),this.requestRedraw(),B}getPass(F){let U=0;for(const Q in this.__passes){const B=this.__passes[Q];if(F-U<B.length)return B[F-U];U+=B.length}}supportsVR(){return console.warn("@GLBaseRenderer#supportVR - Deprecated Method. Please instead connect to the vrViewportSetup signal."),this.__supportXR&&null!=navigator.xr}__setupXRViewport(){const F=new jV(this),U=F=>{this.emit("viewChanged",F)};return F.on("presentingChanged",(Q=>{const B=Q.state;if(this.__xrViewportPresenting=B,B){for(const F in this.__passes){const U=this.__passes[F];for(const F of U)F.startPresenting()}F.on("viewChanged",U)}else{F.off("viewChanged",U),this.emit("updated",{});for(const F in this.__passes){const U=this.__passes[F];for(const F of U)F.stopPresenting()}const Q={interfaceType:"CameraAndPointer",viewXfo:this.getViewport().getCamera().getParameter("GlobalXfo").getValue()};this.emit("viewChanged",Q),this.requestRedraw()}})),F}getVRViewport(){return this.__xrViewport}getXRViewport(){return this.__xrViewportPromise}isXRViewportPresenting(){return this.__xrViewportPresenting}isContinuouslyDrawing(){return this.__continuousDrawing}startContinuousDrawing(){if(this.isContinuouslyDrawing()||this.__xrViewportPresenting)return;const F=()=>{this.__continuousDrawing&&!this.__xrViewportPresenting&&window.requestAnimationFrame(F);for(const F of this.__viewports)F.draw()};this.__continuousDrawing=!0,window.requestAnimationFrame(F)}stopContinuousDrawing(){this.__continuousDrawing=!1}toggleContinuousDrawing(){this.__continuousDrawing?this.stopContinuousDrawing():this.startContinuousDrawing()}drawItemChanged(){for(const F of this.__viewports)F.invalidateGeomDataBuffer();this.requestRedraw()}requestRedraw(){if(this.__redrawRequested||this.__continuousDrawing||this.__xrViewportPresenting||this.__drawSuspensionLevel>0)return!1;return window.requestAnimationFrame((()=>{this.__redrawRequested=!1;for(const F of this.__viewports)F.draw()})),this.__redrawRequested=!0,!0}forceRender(){if(this.__redrawRequested){this.__redrawRequested=!1;for(const F of this.__viewports)F.draw()}else console.warn("@GlBaseRenderer#forceRender - Scene is not dirty")}bindGLBaseRenderer(F){F.gl=this.__gl,F.shaderopts={directives:this.directives},F.floatGeomBuffer=this.__floatGeomBuffer;const U=this.__gl;F.viewports&&1!=F.viewports.length?(F.bindRendererUnifs=Q=>{const{cameraMatrix:B}=Q;B&&U.uniformMatrix4fv(B.location,!1,F.cameraMatrix.asArray())},F.bindViewports=(Q,B)=>{F.viewports.forEach(((F,l)=>{U.viewport(...F.region);const{viewMatrix:V,projectionMatrix:d,eye:R,isOrthographic:t}=Q;V&&U.uniformMatrix4fv(V.location,!1,F.viewMatrix.asArray()),d&&U.uniformMatrix4fv(d.location,!1,F.projectionMatrix.asArray()),R&&U.uniform1i(R.location,l),t&&U.uniform1i(t.location,F.isOrthographic),B()}))}):(F.bindRendererUnifs=Q=>{const{cameraMatrix:B,viewMatrix:l,projectionMatrix:V,eye:d,isOrthographic:R}=Q;B&&U.uniformMatrix4fv(B.location,!1,F.cameraMatrix.asArray());const t=F.viewports[0];l&&U.uniformMatrix4fv(l.location,!1,t.viewMatrix.asArray()),V&&U.uniformMatrix4fv(V.location,!1,t.projectionMatrix.asArray()),d&&U.uniform1i(d.location,index),R&&U.uniform1i(R.location,t.isOrthographic)},F.bindViewports=(F,U)=>U())}drawScene(F){F.directives=[...this.directives,"#define DRAW_COLOR"],F.shaderopts.directives=F.directives;for(const U in this.__passes){const Q=this.__passes[U];for(const U of Q)U.enabled&&U.draw(F)}}drawHighlightedGeoms(F){this.bindGLBaseRenderer(F),F.directives=[...this.directives,"#define DRAW_HIGHLIGHT"],F.shaderopts.directives=F.directives;for(const U in this.__passes){const Q=this.__passes[U];for(const U of Q)U.enabled&&U.drawHighlightedGeoms(F)}}drawSceneGeomData(F,U=255){this.bindGLBaseRenderer(F),F.directives=[...this.directives,"#define DRAW_GEOMDATA"],F.shaderopts.directives=F.directives;for(const Q in this.__passes){if(0==(Number.parseInt(Q)&U))continue;const B=this.__passes[Q];for(const U of B)U.enabled&&U.drawGeomData(F)}}static registerPass(F,U){bd[U]||(bd[U]=[]),bd[U].push(F)}destroy(){super.destroy(),this.resizeObserver.unobserve()}}class Cd extends mV{constructor(F){super(F),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;    //(location = 0)\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  v_texCoord = positions.xy+0.5;\n  gl_Position = vec4(positions.xy*2.0, 0.0, 1.0);\n}\n\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nuniform float outlineThickness;\nuniform sampler2D highlightDataTexture;\nuniform vec2 highlightDataTextureSize;\n\nvarying vec2 v_texCoord;\n\nvec3 SobelFactor(vec3 ldc, vec3 ldl, vec3 ldr, vec3 ldu, vec3 ldd)\n{\n  return abs(ldl - ldc) +\n      abs(ldr - ldc) +\n      abs(ldu - ldc) +\n      abs(ldd - ldc);\n}\n\n// https://github.com/ssell/UnitySobelOutline/blob/2e1f4a5b4e703ae2c96aaf08d5518ce58abbaab9/Assets/Resources/Shaders/SobelOutlineHLSL.shader#L18\nvec4 SobelSample(vec2 uv)\n{\n  vec3 offset = vec3((1.0 / highlightDataTextureSize.x), (1.0 / highlightDataTextureSize.y), 0.0) * outlineThickness;\n\n  vec4 pixelCenter = texture2D(highlightDataTexture, uv);\n  vec3 pixelLeft   = texture2D(highlightDataTexture, uv - offset.xz).rgb;\n  vec3 pixelRight  = texture2D(highlightDataTexture, uv + offset.xz).rgb;\n  vec3 pixelUp     = texture2D(highlightDataTexture, uv + offset.zy).rgb;\n  vec3 pixelDown   = texture2D(highlightDataTexture, uv - offset.zy).rgb;\n\n  vec3 sobelNormalVec = SobelFactor(pixelCenter.rgb, pixelLeft, pixelRight, pixelUp, pixelDown);\n  \n  float sobelNormal = sobelNormalVec.x + sobelNormalVec.y + sobelNormalVec.z;\n  \n  float outlineDepthMultiplier = 10.0;\n  float outlineDepthBias = 2.5;\n  sobelNormal = pow(sobelNormal * outlineDepthMultiplier, outlineDepthBias);\n\n  sobelNormal = clamp(sobelNormal, 0.0, 1.0);\n\n  \n  float pixelCenterWeight = length(pixelCenter.rgb) > 0.0 ? 1.0 : 0.0;\n  float pixelLeftWeight   = length(pixelLeft) > 0.0 ? 1.0 : 0.0;\n  float pixelRightWeight  = length(pixelRight) > 0.0 ? 1.0 : 0.0;\n  float pixelUpWeight     = length(pixelUp) > 0.0 ? 1.0 : 0.0;\n  float pixelDownWeight   = length(pixelDown) > 0.0 ? 1.0 : 0.0;\n  \n  // Weight each neighbors contribution to the current pixel color.\n  pixelCenter.rgb = pixelCenter.rgb * pixelCenterWeight;\n  pixelLeft   *= pixelLeftWeight;\n  pixelRight  *= pixelRightWeight;\n  pixelUp     *= pixelUpWeight;\n  pixelDown   *= pixelDownWeight;\n\n  // Add all the weighted contributions, and then normalize.\n  vec3 outlineColor = pixelCenter.rgb + pixelLeft + pixelRight +  pixelUp + pixelDown;\n  outlineColor /= pixelCenterWeight + pixelLeftWeight + pixelRightWeight + pixelUpWeight + pixelDownWeight;\n\n  return mix(vec4(outlineColor, sobelNormal), pixelCenter, pixelCenter.a);\n}\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\nvoid main(void) {\n    \n  vec4 outlineColor = SobelSample(v_texCoord);\n  \n  if (outlineColor.a > 0.0001) {\n#ifndef ENABLE_ES3\n    gl_FragColor = outlineColor;\n#else\n    fragColor = outlineColor;\n#endif\n  }\n  else {\n      discard;\n  }\n}\n\n")}}class hd extends mV{constructor(F){super(F),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\nattribute vec3 positions;    //(location = 0)\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  v_texCoord = positions.xy+0.5;\n  gl_Position = vec4(positions.xy*2.0, 0.0, 1.0);\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\n#ifndef ENABLE_ES3\n#extension GL_EXT_frag_depth: enable\n#endif\nprecision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D colorTexture;\nuniform sampler2D depthTexture;\nuniform vec2 screenSize;\nuniform vec2 depthRange;\n\nuniform float outlineThickness;\nuniform color outlineColor;\nuniform float outlineSensitivity;\nuniform float outlineDepthBias;\n\nvarying vec2 v_texCoord;\n\n// http://web.archive.org/web/20130416194336/http://olivers.posterous.com/linear-depth-in-glsl-for-real\nfloat LinearEyeDepth(float z_b) {\n  float z_n = 2.0 * z_b - 1.0;\n  float z_e = 2.0 * depthRange.x * depthRange.y / (depthRange.y + depthRange.x - z_n * (depthRange.y - depthRange.x));\n  return z_e;\n}\n\nfloat LogEyeDepth(float z_b) {\n  return depthRange.x + ((depthRange.y - depthRange.x) * z_b);\n}\n\n// https://www.vertexfragment.com/ramblings/unity-postprocessing-sobel-outline/#depth-based-outline\n// https://github.com/ssell/UnitySobelOutline/blob/2e1f4a5b4e703ae2c96aaf08d5518ce58abbaab9/Assets/Resources/Shaders/SobelOutlineHLSL.shader\n\nfloat SobelDepth(float ldc, float ldl, float ldr, float ldu, float ldd)\n{\n  return abs(ldl - ldc) +\n      abs(ldr - ldc) +\n      abs(ldu - ldc) +\n      abs(ldd - ldc);\n}\n\nfloat SobelSampleDepth(vec2 uv, vec3 offset)\n{\n  float pixelCenter = LinearEyeDepth(texture2D(depthTexture, uv).r);\n  float pixelLeft   = LinearEyeDepth(texture2D(depthTexture, uv - offset.xz).r);\n  float pixelRight  = LinearEyeDepth(texture2D(depthTexture, uv + offset.xz).r);\n  float pixelUp     = LinearEyeDepth(texture2D(depthTexture, uv + offset.zy).r);\n  float pixelDown   = LinearEyeDepth(texture2D(depthTexture, uv - offset.zy).r);\n\n  float  outlineDepthMultiplier = (1.0 / pixelCenter) * outlineSensitivity;\n\n  return SobelDepth(pixelCenter, pixelLeft, pixelRight, pixelUp, pixelDown) * outlineDepthMultiplier;\n}\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec3 offset = vec3((1.0 / screenSize.x), (1.0 / screenSize.y), 0.0) * outlineThickness;\n  float sobelDepth = SobelSampleDepth(v_texCoord, offset);\n  float sobelValue = pow(sobelDepth, outlineDepthBias);\n\n  float minEdgeValue = 0.25;\n  float maxEdgeValue = 0.55;\n  sobelDepth = smoothstep(minEdgeValue, maxEdgeValue, sobelValue);\n\n#ifdef ENABLE_ES3\n  fragColor = vec4(outlineColor.rgb, sobelDepth);\n#else\n  fragColor = vec4(mix(texture2D(colorTexture, v_texCoord).rgb, outlineColor.rgb, sobelDepth), 1.0);\n#ifdef  GL_EXT_frag_depth\n  gl_FragDepthEXT = texture2D(depthTexture, v_texCoord).r;\n#endif\n#endif\n\n  // float z = texture2D(depthTexture, v_texCoord).r;\n  // float near = depthRange.x * 2.0;    // the near plane\n  // float far = depthRange.y / 2.0;     // the far plane\n  // float c = (2.0 * near) / (far + near - z * (far - near));  // convert to linear values \n  // fragColor = vec4(vec3(c), 1.0);\n\n  \n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}const Wd=eV.OPAQUE|eV.TRANSPARENT|eV.OVERLAY;class md extends Gd{constructor(F,U={}){super(F,U),this.__exposure=1,this.__tonemap=!0,this.__gamma=2.2,this.__glEnvMap=void 0,this.__glBackgroundMap=void 0,this.__displayEnvironment=!0,this.__debugMode=0,this._planeDist=0,this.__cutPlaneNormal=new qU(1,0,0),this.rayCastDist=0,this.rayCastArea=0;const Q=this.__gl;this.highlightsShader=new Cd(Q),this.silhouetteShader=new hd(Q),this.highlightOutlineThickness=1.5,this.outlineThickness=0,this.outlineColor=new UQ(.15,.15,.15,1),this.outlineSensitivity=2,this.outlineDepthBias=.7,this.__debugTextures=[void 0],this.addShaderPreprocessorDirective("ENABLE_INLINE_GAMMACORRECTION"),U.disableTextures||this.addShaderPreprocessorDirective("ENABLE_TEXTURES"),U.debugGeomIds&&this.addShaderPreprocessorDirective("DEBUG_GEOM_ID")}__bindEnvMap(F){const U=this.__gl;if(F instanceof ml)"webgl2"===U.name&&(this.__glEnvMap=F.getMetadata("gltexture"),this.__glEnvMap||("FLOAT"===F.type?(this.addShaderPreprocessorDirective("ENABLE_PBR"),this.__glEnvMap=new kV(this,F)):F.isStreamAtlas()?this.__glEnvMap=new GLImageStream(U,F):this.__glEnvMap=new bV(U,F)),this.__glEnvMap.on("loaded",(F=>{this.requestRedraw()})),this.__glEnvMap.on("updated",(F=>{this.requestRedraw()})),this.emit("envMapAssigned",{envMap:this.__glEnvMap}));else{const Q=F;if(this.__glBackgroundMap=Q.getMetadata("gltexture"),this.__glBackgroundMap||("FLOAT"===Q.type?this.__glBackgroundMap=new uV(U,Q):this.__glBackgroundMap=new bV(U,Q)),this.__glBackgroundMap.on("loaded",(F=>{this.requestRedraw()})),this.__glBackgroundMap.on("updated",(F=>{this.requestRedraw()})),!this.__backgroundMapShader){U.__quadVertexIdsBuffer||U.setupInstancedQuad(),this.__backgroundMapShader=new YV(U);const F=this.__backgroundMapShader.compileForTarget();this.__backgroundMapShaderBinding=yV(U,F.attrs,U.__quadattrbuffers,U.__quadIndexBuffer)}}}setScene(F){const U=F.settings.getParameter("EnvMap");null!=U.getValue()&&this.__bindEnvMap(U.getValue()),U.on("valueChanged",(()=>{this.__bindEnvMap(U.getValue())}));const Q=F.settings.getParameter("Display EnvMap");this.__displayEnvironment=Q.getValue(),Q.on("valueChanged",(()=>{this.__displayEnvironment=Q.getValue(),this.requestRedraw()})),super.setScene(F)}addViewport(F){return super.addViewport(F)}get exposure(){return this.__exposure}set exposure(F){this.__exposure=F,this.requestRedraw()}get gamma(){return this.__gamma}set gamma(F){this.__gamma=F,this.requestRedraw()}get displayEnvironment(){return this.__displayEnvironment}set displayEnvironment(F){this.__displayEnvironment=F,this.requestRedraw()}raycastWithRay(F,U,Q=.01,B=Wd){const l=new RQ;return l.setLookAt(F.start,F.start.add(F.dir)),this.raycast(l,F,U,Q,B)}raycastWithXfo(F,U,Q=.01,B=Wd){const l=new dQ(F.tr,F.ori.getZaxis().negate());return this.raycast(F,l,U,Q,B)}raycast(F,U,Q,B=.01,l=Wd){const V=this.__gl;this.__rayCastRenderTarget||(this.__rayCastRenderTarget=new XV(V,{type:"FLOAT",format:"RGBA",filter:"NEAREST",width:3,height:3,numColorChannels:1}),this.__rayCastRenderTargetProjMatrix=new lQ),this.rayCastDist==Q&&this.rayCastArea==B||(this.__rayCastRenderTargetProjMatrix.setOrthographicMatrix(-.5*B,.5*B,-.5*B,.5*B,0,Q),this.rayCastDist=Q,this.rayCastArea=B);const d={cameraMatrix:F.toMat4(),viewports:[{region:[0,0,3,3],viewMatrix:F.inverse().toMat4(),projectionMatrix:this.__rayCastRenderTargetProjMatrix,isOrthographic:!0}]};this.__rayCastRenderTarget.bindForWriting(d,!0),V.enable(V.CULL_FACE),V.enable(V.DEPTH_TEST),V.depthFunc(V.LEQUAL),V.depthMask(!0),this.drawSceneGeomData(d,l),V.finish(),this.__rayCastRenderTarget.unbindForWriting(),this.__rayCastRenderTarget.bindForReading();const R=new Float32Array(36);V.readPixels(0,0,3,3,V.RGBA,V.FLOAT,R),this.__rayCastRenderTarget.unbindForReading();const t=[4,3,5,1,7];let s;for(const F of t)if(0!=R[4*F+3]){s=R.subarray(4*F,4*F+4);break}if(!s)return;const i=63&Math.round(s[0]),e=this.getPass(i).getGeomItemAndDist(s);if(e){const F=U.start.add(U.dir.scale(e.dist));return{ray:U,intersectionPos:F,geomItem:e.geomItem,dist:e.dist,geomData:s}}}raycastCluster(F,U,Q,B=.01,l=Wd){const V=this.__gl;this.__rayCastRenderTarget||(this.__rayCastRenderTarget=new XV(V,{type:"FLOAT",format:"RGBA",filter:"NEAREST",width:3,height:3,numColorChannels:1}),this.__rayCastRenderTargetProjMatrix=new lQ),this.rayCastDist==Q&&this.rayCastArea==B||(this.__rayCastRenderTargetProjMatrix.setOrthographicMatrix(-.5*B,.5*B,-.5*B,.5*B,0,Q),this.rayCastDist=Q,this.rayCastArea=B);const d={cameraMatrix:F.toMat4(),viewports:[{region:[0,0,3,3],viewMatrix:F.inverse().toMat4(),projectionMatrix:this.__rayCastRenderTargetProjMatrix,isOrthographic:!0}]};this.__rayCastRenderTarget.bindForWriting(d,!0),V.enable(V.CULL_FACE),V.enable(V.DEPTH_TEST),V.depthFunc(V.LEQUAL),V.depthMask(!0),this.drawSceneGeomData(d,l),V.finish(),this.__rayCastRenderTarget.unbindForWriting(),this.__rayCastRenderTarget.bindForReading();const R=new Float32Array(36);V.readPixels(0,0,3,3,V.RGBA,V.FLOAT,R),this.__rayCastRenderTarget.unbindForReading();const t=[];for(let F=0;F<9;F++)if(0!=R[4*F+3]){const Q=R.subarray(4*F,4*F+4),B=63&Math.round(Q[0]),l=this.getPass(B).getGeomItemAndDist(Q);if(l){const F=U.start.add(U.dir.scale(l.dist));t.push({ray:U,intersectionPos:F,geomItem:l.geomItem,dist:l.dist,geomData:Q})}}return t}drawBackground(F){if(this.__glBackgroundMap){if(!this.__glBackgroundMap.isLoaded())return;const U=this.__gl;U.depthMask(!1),this.__backgroundMapShader.bind(F);const Q=F.unifs;this.__glBackgroundMap.bindToUniform(F,Q.backgroundImage),this.__backgroundMapShaderBinding.bind(F),U.drawQuad()}else this.__glEnvMap&&this.__glEnvMap.draw&&this.__glEnvMap.draw(F)}bindGLRenderer(F){super.bindGLBaseRenderer(F),F.envMap=this.__glEnvMap,F.exposure=this.__exposure,F.gamma=this.__gamma}drawScene(F){this.bindGLRenderer(F),this.__displayEnvironment&&this.drawBackground(F),super.drawScene(F),this.emit("redrawOccurred",{})}}class Jd extends mV{constructor(F){super(F),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 cameraMatrix;\n\nimport 'GLSLUtils.glsl'\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\n// A sorted attribute of instance Ids so we draw from back to front.\ninstancedattribute float instanceIds;\n\nimport 'transpose.glsl'\nimport 'imageAtlas.glsl'\n\nuniform sampler2D atlasBillboards_layout;\nuniform vec4 atlasBillboards_desc;\n\nuniform sampler2D instancesTexture;\nuniform int instancesTextureSize;\nuniform int passId;\n\nconst int cols_per_instance = 7;\n\nmat4 getMatrix(sampler2D texture, int textureSize, int index) {\n  // Unpack 3 x 4 matix columns into a 4 x 4 matrix.\n  vec4 col0 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 0);\n  vec4 col1 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 1);\n  vec4 col2 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 2);\n  mat4 result = mat4(col0, col1, col2, vec4(0.0, 0.0, 0.0, 1.0));\n  return transpose(result);\n  // return mat4(1.0);\n}\n\nmat4 getModelMatrix(int id) {\n  return getMatrix(instancesTexture, instancesTextureSize, id);\n}\nvec4 getInstanceData(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 3);\n}\nvec4 getPivot(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 4);\n}\nvec4 getTintColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 5);\n}\n\n#else\n\nuniform vec4 atlasBillboards_desc;\n\nuniform mat4 modelMatrix;\nuniform vec2 pivot;\nuniform vec4 billboardData;\nuniform vec4 tintColor;\nuniform vec4 layoutData;\n\n#endif\n\nuniform int inVR;\n\nmat4 calcLookAtMatrix(vec3 origin, vec3 target, float roll) {\n  // vec3 rr = vec3(sin(roll), 0.0, cos(roll));\n  vec3 rr = vec3(0.0, 0.0, 1.0);\n  vec3 ww = normalize(target - origin);\n  vec3 uu = normalize(cross(rr, ww));\n  vec3 vv = normalize(cross(ww, uu));\n\n  return mat4(vec4(uu, 0.0), vec4(vv, 0.0), vec4(ww, 0.0), vec4(origin, 1.0));\n}\n\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\n/* VS Outputs */\nvarying float v_instanceID;\nvarying vec2 v_texCoord;\nvarying float v_alpha;\nvarying vec4 v_tint;\nvarying vec3 v_viewPos;\n\nvoid main(void) {\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\n  int instanceID = int(instanceIds);\n  v_instanceID = float(instanceID) + 0.25;\n\n  mat4 modelMatrix = getModelMatrix(instanceID);\n  vec2 pivot = getPivot(instanceID).xy;\n  vec4 billboardData = getInstanceData(instanceID);\n  vec4 layoutData = fetchTexel(atlasBillboards_layout, int(atlasBillboards_desc.z), int(billboardData.z));\n  v_tint = getTintColor(instanceID);\n\n#else\n\n  v_tint = tintColor;\n\n#endif\n\n  vec2 quadVertex = getQuadVertexPositionFromID();\n  \n  vec2 pos = quadVertex + vec2(0.5, 0.0) - pivot;\n  v_texCoord = vec2(quadVertex.x, -quadVertex.y) + 0.5;\n  v_alpha = billboardData.w;\n  v_texCoord *= layoutData.zw;\n  v_texCoord += layoutData.xy;\n\n  float scl = billboardData.x;\n  float width = layoutData.z * atlasBillboards_desc.x * scl;\n  float height = layoutData.w * atlasBillboards_desc.y * scl;\n  int flags = int(billboardData.y);\n\n  // Use cross platform bit flags methods\n  bool alignedToCamera = testFlag(flags, 4); // flag = 1<<2\n  bool drawOnTop = testFlag(flags, 8); // flag = 1 << 3\n  bool fixedSizeOnscreen = testFlag(flags, 16); // flag = 1 << 4\n\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n\n  // Note: items in front of the camera will have a negative value here.\n  float sc = 1.0;\n  if (fixedSizeOnscreen) {\n    sc = -modelViewMatrix[3][2];;\n  }\n  \n  mat4 modelViewProjectionMatrix;\n  if (alignedToCamera) {\n    if (inVR == 0) {\n      gl_Position = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n      gl_Position += vec4(pos.x * width * sc, (pos.y + 0.5) * height * sc, 0.0, 0.0);\n      v_viewPos = gl_Position.xyz;\n      gl_Position = projectionMatrix * gl_Position;\n    } else {\n      vec3 cameraPos = vec3(cameraMatrix[3][0], cameraMatrix[3][1], cameraMatrix[3][2]);\n      vec3 billboardPos = vec3(modelMatrix[3][0], modelMatrix[3][1], modelMatrix[3][2]);\n      mat4 lookAt = calcLookAtMatrix(billboardPos, cameraPos, 0.0);\n      mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * lookAt;\n      gl_Position = modelViewProjectionMatrix * vec4(pos.x * width * sc, (pos.y + 0.5) * height * sc, 0.0, 1.0);\n      v_viewPos = (modelViewMatrix * vec4(pos.x * width * sc, (pos.y + 0.5) * height * sc, 0.0, 1.0)).xyz;\n    }\n  }\n  else {\n    modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;\n    gl_Position = modelViewProjectionMatrix * vec4(pos.x * width, (pos.y + 0.5) * height, 0.0, 1.0);\n    v_viewPos = (modelViewMatrix * vec4(pos.x * width, (pos.y + 0.5) * height, 0.0, 1.0)).xyz;\n  }\n\n  // Use cross platform bit flags methods\n  if (drawOnTop) {\n    gl_Position.z = mix(gl_Position.z, -gl_Position.w, 0.5);\n  }\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nimport 'imageAtlas.glsl'\n\nuniform sampler2D atlasBillboards;\n\n/* VS Outputs */\nvarying float v_instanceID;\nvarying vec2 v_texCoord;\nvarying float v_alpha;\nvarying vec4 v_tint;\nvarying vec3 v_viewPos;\n\nuniform sampler2D instancesTexture;\nuniform int instancesTextureSize;\n\n#if defined(DRAW_GEOMDATA)\n  uniform int isOrthographic;\n  import 'surfaceGeomData.glsl'\n#endif // DRAW_GEOMDATA\n\nconst int cols_per_instance = 7;\n\nvec4 getHilightColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 6);\n}\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  int instanceID = int(v_instanceID);\n  vec4 imageColor = texture2D(atlasBillboards, v_texCoord) * v_tint;\n  imageColor.a *= v_alpha;\n  if(imageColor.a < 0.1)\n    discard;\n\n#if defined(DRAW_COLOR)\n  fragColor = imageColor;\n  // fragColor.r = 1.0;\n  // fragColor.a = 1.0;\n#elif defined(DRAW_GEOMDATA)\n  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_instanceID, isOrthographic);\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = getHilightColor(instanceID);\n  // Skip unhilighting labels.\n  if(fragColor.r < 0.001 && fragColor.g < 0.001 && fragColor.b < 0.001)\n    discard;\n#endif // DRAW_HIGHLIGHT\n  \n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}class Xd extends mV{constructor(F){super(F),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;    //(location = 0)\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform vec3 projectionCenter;\n\nimport 'inverse.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\n \nvoid main()\n{\n  int drawItemId = getDrawItemId();\n  vec4 pos = vec4(positions, 1.);\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;\n\n  gl_Position = modelViewProjectionMatrix * pos;\n\n  vec4 worldPos = modelMatrix * pos;\n  v_worldDir = worldPos.xyz - projectionCenter;\n}\n\n")}static getParamDeclarations(){const F=super.getParamDeclarations();return F.push({name:"projectionCenter",defaultValue:new qU(0,0,1.7)}),F}}class Ed extends Xd{constructor(F){super(F),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'envmap-octahedral.glsl'\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\n\nuniform color envMap;\nuniform sampler2D envMapTex;\nuniform int envMapTexType;\n\nuniform float exposure;\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec2 texCoord = dirToSphOctUv(normalize(v_worldDir));\n  vec4 env = getColorParamValue(envMap, envMapTex, envMapTexType, texCoord);\n\n  fragColor = vec4(env.rgb/env.a, 1.0);\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb * exposure);\n#endif\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}PU.register("OctahedralEnvProjectionShader",Ed);class Ld extends Xd{constructor(F){super(F),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'envmap-equirect.glsl'\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\n\nuniform color envMap;\nuniform sampler2D envMapTex;\nuniform int envMapTexType;\n\nuniform float exposure;\n\n/* VS Outputs */\nvarying vec3 v_worldDir;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  vec2 texCoord = latLongUVsFromDir(normalize(v_worldDir));\n  vec4 env = getColorParamValue(envMap, envMapTex, envMapTexType, texCoord);\n  fragColor = vec4(env.rgb/env.a, 1.0);\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb * exposure);\n#endif\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}PU.register("LatLongEnvProjectionShader",Ld);class xd extends mV{constructor(F){super(F),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\ninstancedattribute vec2 segmentIndices;\nattribute float vertexIDs;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\nuniform int drawItemId;\nint getDrawItemId() {\n  return drawItemId;\n}\n\nuniform sampler2D positionsTexture;\nuniform int positionsTextureSize;\n\nuniform float LineThickness;\nuniform float Overlay;\n\nimport 'calcFatLinesViewPos.glsl'\n\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\nvarying vec2 v_texCoord;\n\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying float v_drawItemID;\nvarying vec3 v_worldPos;\n\nvoid main(void) {\n\n  int drawItemId = getDrawItemId();\n  v_drawItemId = float(drawItemId);\n  v_geomItemData = getInstanceData(drawItemId);\n\n  int vertexID = int(vertexIDs);\n\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n  vec3 pos;\n\n  #if defined(DRAW_COLOR)\n    v_viewPos       = calcFatLinesViewPos(vertexID, modelViewMatrix, v_viewNormal, v_texCoord, pos);\n  #elif defined(DRAW_GEOMDATA)\n    vec3  viewNormal;\n    vec2  texCoord;\n    v_viewPos       = calcFatLinesViewPos(vertexID, modelViewMatrix, viewNormal, texCoord, pos);\n    v_drawItemID = float(getDrawItemId());\n    v_worldPos      = (modelMatrix * vec4(pos, 1.0)).xyz;\n  #endif\n\n  gl_Position     = projectionMatrix * vec4(v_viewPos, 1.0);\n  if (Overlay > 0.0) {\n    gl_Position.z = mix(gl_Position.z, -gl_Position.w, Overlay);\n  }\n\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nuniform color BaseColor;\nuniform mat4 cameraMatrix;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\n/* VS Outputs */\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\nvarying vec2 v_texCoord;\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying float v_drawItemID;\nvarying vec3 v_worldPos;\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\nimport 'cutaways.glsl'\nimport 'GLSLBits.glsl'\n\nuniform int floatGeomBuffer;\nuniform int passId;\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getCutaway(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 5);\n}\n#else\n\nuniform vec4 cutawayData;\n\nvec4 getCutaway(int id) {\n  return cutawayData;\n}\n\n#endif\n\n#if defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n#if defined(DRAW_COLOR)\n  int debugLevel = 0;\n  if (debugLevel == 0) {\n\n    vec3 viewVector = mat3(cameraMatrix) * normalize(-v_viewPos);\n    vec3 normal = mat3(cameraMatrix) * v_viewNormal;\n    float NdotV = dot(normalize(normal), normalize(viewVector));\n\n    // Modulate the lighting using the texture coord so the line looks round.\n    NdotV *= cos((v_texCoord.x - 0.5) * 2.0);\n\n    vec4 color = BaseColor * NdotV;\n    fragColor = vec4(color.rgb, BaseColor.a);\n  }\n  else {\n    fragColor = vec4(v_texCoord.x, 0.0, 0.0, 1.0);\n  }\n#elif defined(DRAW_GEOMDATA)\n  int drawItemId = int(v_drawItemId + 0.5);\n  int flags = int(v_geomItemData.r + 0.5);\n // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {\n    vec4 cutAwayData  = getCutaway(drawItemId);\n    vec3 planeNormal = cutAwayData.xyz;\n    float planeDist = cutAwayData.w;\n    if (cutaway(v_worldPos, planeNormal, planeDist)) {\n      discard;\n      return;\n    }\n  }\n  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n    discard;\n    return;\n  }\n\n  float dist = length(v_viewPos);\n\n  if (floatGeomBuffer != 0) {\n    fragColor.r = float(passId); \n    fragColor.g = float(v_drawItemID);\n    fragColor.b = 0.0;// TODO: store poly-id or something.\n    fragColor.a = dist;\n  }\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = setFragColor_highlight(v_drawItemId);\n#endif\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}bind(F,U){return!!super.bind(F,U)&&(F.supportsInstancing=!1,!0)}static getParamDeclarations(){const F=super.getParamDeclarations();return F.push({name:"BaseColor",defaultValue:new UQ(1,1,.5)}),F.push({name:"Opacity",defaultValue:1}),F.push({name:"LineThickness",defaultValue:.01}),F.push({name:"Overlay",defaultValue:0}),F}static supportsInstancing(){return!1}}PU.register("FatLinesShader",xd);class od extends mV{constructor(F){super(F),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;\n#ifdef ENABLE_TEXTURES\nattribute vec2 texCoords;\n#endif\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\nimport 'GLSLUtils.glsl'\n\nimport 'drawItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\n\nvoid main(void) {\n  int drawItemId = getDrawItemId();\n  v_drawItemId = float(drawItemId);\n  v_geomItemData  = getInstanceData(drawItemId);\n\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n\n  vec4 viewPos = (modelViewMatrix * vec4(positions, 1.0));\n  gl_Position = projectionMatrix * viewPos;\n\n  v_viewPos = viewPos.xyz;\n#ifdef ENABLE_TEXTURES\n  v_textureCoord = texCoords;\n  v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y\n#endif\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\n\n#ifndef ENABLE_MULTI_DRAW\n\nuniform color BaseColor;\n\n#ifdef ENABLE_TEXTURES\nuniform sampler2D BaseColorTex;\nuniform int BaseColorTexType;\n#endif\n\n#endif // ENABLE_MULTI_DRAW\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\n#if defined(DRAW_GEOMDATA)\n  uniform int isOrthographic;\n  import 'surfaceGeomData.glsl'\n#elif defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  //////////////////////////////////////////////\n  // Material\n#ifdef ENABLE_MULTI_DRAW\n\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 baseColor = toLinear(getMaterialValue(materialCoords, 0));\n\n#else // ENABLE_MULTI_DRAW\n\n#ifndef ENABLE_TEXTURES\n  vec4 baseColor = toLinear(BaseColor);\n#else\n  vec4 baseColor = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);\n#endif // ENABLE_TEXTURES\n\n#endif // ENABLE_MULTI_DRAW\n\n  if (baseColor.a < 0.001) discard;\n\n#if defined(DRAW_COLOR)\n    //////////////////////////////////////////////\n  fragColor = baseColor;\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb);\n#endif\n\n#elif defined(DRAW_GEOMDATA)\n  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId,v_drawItemId, isOrthographic);\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = setFragColor_highlight(v_drawItemId);\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}bind(F,U){super.bind(F,U);const Q=this.__gl;return Q.disable(Q.CULL_FACE),!0}unbind(F){super.unbind(F);const U=this.__gl;return U.enable(U.CULL_FACE),!0}static getParamDeclarations(){const F=super.getParamDeclarations();return F.push({name:"BaseColor",defaultValue:new UQ(1,1,.5)}),F}static getPackedMaterialData(F){const U=new Float32Array(8),Q=F.getParameter("BaseColor").getValue();return U[0]=Q.r,U[1]=Q.g,U[2]=Q.b,U[3]=Q.a,U}}PU.register("FlatSurfaceShader",od);class yd extends mV{constructor(F){super(F,"LinesShader"),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;\nattribute vec3 positionsNext;\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\n#ifdef ENABLE_MULTI_DRAW\nimport 'materialparams.glsl'\n#else\nuniform float Overlay;\n#endif\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_worldPos;\nvarying vec3 v_nextVertexDist;\n\nvoid main(void) {\n  int drawItemId = getDrawItemId();\n  v_drawItemId = float(drawItemId);\n  v_geomItemData  = getInstanceData(drawItemId);\n\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n  vec4 viewPos = modelViewMatrix * vec4(positions, 1.0);\n  vec4 viewPosNext = modelViewMatrix * vec4(positionsNext, 1.0);\n\n#ifdef ENABLE_ES3\n  float nextVertexDist = length(viewPosNext.xyz - viewPos.xyz);\n  if (imod(gl_VertexID, 2) == 0) {\n    v_nextVertexDist.x = nextVertexDist;\n    v_nextVertexDist.y = 0.0;\n  } else {\n    v_nextVertexDist.x = 0.0;\n    v_nextVertexDist.y = nextVertexDist;\n  }\n  v_nextVertexDist.z = float(gl_VertexID);\n#endif\n\n  v_viewPos = viewPos.xyz;\n  gl_Position = projectionMatrix * viewPos;\n    \n\n  //////////////////////////////////////////////\n  // Overlay\n\n#ifdef ENABLE_MULTI_DRAW\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 materialValue1 = getMaterialValue(materialCoords, 1);\n  int maintainScreenSize = int(materialValue1.x + 0.5);\n  float overlay = materialValue1.y;\n#else\n  float overlay = Overlay;\n#endif\n\n#if defined(DRAW_GEOMDATA)\n  gl_Position.z = mix(gl_Position.z, -gl_Position.w, mix(overlay, 1.0, 0.0001));\n#else\n  gl_Position.z = mix(gl_Position.z, -gl_Position.w, overlay);\n#endif\n\n  //////////////////////////////////////////////\n  \n  \n  vec4 pos = vec4(positions, 1.);\n  v_worldPos      = (modelMatrix * pos).xyz;\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\nimport 'cutaways.glsl'\nimport 'materialparams.glsl'\n\nuniform int occluded;\n\n#ifndef ENABLE_MULTI_DRAW\n\nuniform color BaseColor;\nuniform float Opacity;\n\nuniform float StippleScale;\nuniform float StippleValue;\nuniform float OccludedStippleValue;\n\n#endif // ENABLE_MULTI_DRAW\n\n#if defined(DRAW_GEOMDATA)\n\nuniform int floatGeomBuffer;\nuniform int passId;\n\nimport 'GLSLBits.glsl'\n\n#elif defined(DRAW_HIGHLIGHT)\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getHighlightColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);\n}\n#else // ENABLE_FLOAT_TEXTURES\n\nuniform vec4 highlightColor;\n\nvec4 getHighlightColor() {\n  return highlightColor;\n}\n\n#endif // ENABLE_FLOAT_TEXTURES\n\n#endif // DRAW_HIGHLIGHT\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getCutaway(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 5);\n}\n\n#else\n\nuniform vec4 cutawayData;\n\nvec4 getCutaway(int id) {\n  return cutawayData;\n}\n\n#endif\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_worldPos;\nvarying vec3 v_nextVertexDist;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  int drawItemId = int(v_drawItemId + 0.5);\n  int flags = int(v_geomItemData.r + 0.5);\n\n  // Cutaways\n  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) \n  {\n    vec4 cutAwayData   = getCutaway(drawItemId);\n    vec3 planeNormal = cutAwayData.xyz;\n    float planeDist = cutAwayData.w;\n    if (cutaway(v_worldPos, planeNormal, planeDist)) {\n      discard;\n      return;\n    }\n  }\n\n  //////////////////////////////////////////////\n  // Material\n\n#ifdef ENABLE_MULTI_DRAW\n\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 BaseColor = getMaterialValue(materialCoords, 0);\n  vec4 matValue1 = getMaterialValue(materialCoords, 1);\n  vec4 matValue2 = getMaterialValue(materialCoords, 2);\n  float Opacity  = matValue1.r;\n\n  float StippleScale = matValue1.b;\n  float StippleValue = matValue1.a;\n  float OccludedStippleValue = matValue2.r;\n#endif // ENABLE_MULTI_DRAW\n\n  ///////////////////\n  // Stippling\n  float stippleValue = occluded == 0 ? StippleValue : OccludedStippleValue;\n#ifdef ENABLE_ES3 // No stippling < es3 \n  if (stippleValue > 0.0) {\n    // Note: a value of 0.0, means no stippling (solid). A value of 1.0 means invisible\n    float dist = -v_viewPos.z * StippleScale;\n    float nextVertexDist = imod(int(floor(v_nextVertexDist.z)), 2) == 0 ? v_nextVertexDist.x : v_nextVertexDist.y;\n    if (mod(nextVertexDist / dist, 1.0) < stippleValue) {\n      discard;\n      return;\n    }\n  }\n#endif\n\n  //////////////////////////////////////////////\n  // Color\n#if defined(DRAW_COLOR)\n\n  fragColor = BaseColor;\n  fragColor.a *= Opacity;\n\n  \n#ifndef ENABLE_ES3\n  if (occluded == 1) fragColor.a *= 1.0 - stippleValue;\n#endif\n\n  //////////////////////////////////////////////\n  // GeomData\n#elif defined(DRAW_GEOMDATA)\n\n  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n    discard;\n    return;\n  }\n  \n  float viewDist = length(v_viewPos);\n\n  if (floatGeomBuffer != 0) {\n    fragColor.r = float(passId); \n    fragColor.g = float(v_drawItemId);\n    // Note: to make lines visually stand out from triangles\n    // this value is 0.0 in the surface shaders.\n    fragColor.b = 1.0;// TODO: store segment-id or something.\n    fragColor.a = viewDist;\n  } else {\n    ///////////////////////////////////\n    // UInt8 buffer\n    fragColor.r = mod(v_drawItemId, 256.) / 256.;\n    fragColor.g = (floor(v_drawItemId / 256.) + (float(passId) * 64.)) / 256.;\n\n    // encode the dist as a 16 bit float\n    vec2 float16bits = encode16BitFloatInto2xUInt8(viewDist);\n    fragColor.b = float16bits.x;\n    fragColor.a = float16bits.y;\n  }\n\n  //////////////////////////////////////////////\n  // Highlight\n#elif defined(DRAW_HIGHLIGHT)\n  \n  fragColor = getHighlightColor(drawItemId);\n\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n"),this.finalize()}static getParamDeclarations(){const F=super.getParamDeclarations();return F.push({name:"BaseColor",defaultValue:new UQ(1,1,.5)}),F.push({name:"Opacity",defaultValue:.7}),F.push({name:"Overlay",defaultValue:1e-6}),F.push({name:"StippleScale",defaultValue:.01}),F.push({name:"StippleValue",defaultValue:0,range:[0,1]}),F.push({name:"OccludedStippleValue",defaultValue:1,range:[0,1]}),F}static getPackedMaterialData(F){const U=new Float32Array(12),Q=F.getParameter("BaseColor").getValue();return U[0]=Q.r,U[1]=Q.g,U[2]=Q.b,U[3]=Q.a,U[4]=F.getParameter("Opacity").getValue(),U[5]=F.getParameter("Overlay").getValue(),U[6]=F.getParameter("StippleScale").getValue(),U[7]=F.getParameter("StippleValue").getValue(),U[8]=F.getParameter("OccludedStippleValue").getValue(),U}}PU.register("LinesShader",yd);class ud extends mV{constructor(F){super(F),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\ninstancedattribute vec3 positions;\ninstancedattribute vec3 normals;\nattribute vec2 vertexIDs;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\nuniform float normalLength;\n\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying float v_weight;\n\nvoid main(void) {\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;\n  if (vertexIDs.x == 0.0) {\n    gl_Position = modelViewProjectionMatrix * vec4(positions, 1.0);\n    v_weight = 1.0;\n  }\n  else {\n    gl_Position = modelViewProjectionMatrix * vec4(positions+(normals*normalLength), 1.0);\n    v_weight = 0.0;\n  }\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nuniform color normalColor;\n\n/* VS Outputs */\nvarying float v_weight;\n\nvoid main(void) {\n  gl_FragColor = normalColor;\n  gl_FragColor.a = v_weight;\n}\n")}}class Nd extends mV{constructor(F){super(F),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\n#ifdef ENABLE_MULTI_DRAW\nimport 'materialparams.glsl'\n#else\nuniform float PointSize;\nuniform float Overlay;\n#endif\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\n\nvoid main(void) {\n  int drawItemId = getDrawItemId();\n  v_drawItemId = float(drawItemId);\n  v_geomItemData  = getInstanceData(drawItemId);\n\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n  \n  vec4 viewPos = modelViewMatrix * vec4(positions, 1.);\n  gl_Position = projectionMatrix * viewPos;\n  \n\n  //////////////////////////////////////////////\n  // Material\n#ifdef ENABLE_MULTI_DRAW\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 materialValue1 = getMaterialValue(materialCoords, 1);\n  int maintainScreenSize = int(materialValue1.x + 0.5);\n  float pointSize = materialValue1.x;\n  float overlay = materialValue1.y;\n#else\n  float pointSize = PointSize;\n  float overlay = Overlay;\n#endif\n  //////////////////////////////////////////////\n\n  // Note: as of 22/01/2021 gl_PointSize has stopped working again...\n  gl_PointSize = pointSize;\n\n#if defined(DRAW_GEOMDATA)\n  // Make the geom data point size at least 8 pixels across, else its impossible to hit.\n  gl_PointSize = max(8.0, pointSize);\n#endif\n  gl_Position.z = mix(gl_Position.z, -gl_Position.w, overlay);\n\n  \n  v_viewPos = -viewPos.xyz;\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\n#ifndef ENABLE_MULTI_DRAW\n\nuniform color BaseColor;\n\n#endif\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\nimport 'cutaways.glsl'\nimport 'materialparams.glsl'\n\n#if defined(DRAW_GEOMDATA)\n\nuniform int floatGeomBuffer;\nuniform int passId;\n\nimport 'GLSLBits.glsl'\n\n#elif defined(DRAW_HIGHLIGHT)\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getHighlightColor(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);\n}\n#else // ENABLE_FLOAT_TEXTURES\n\nuniform vec4 highlightColor;\n\nvec4 getHighlightColor() {\n  return highlightColor;\n}\n\n#endif // ENABLE_FLOAT_TEXTURES\n\n#endif // DRAW_HIGHLIGHT\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\n/* VS Outputs */\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\nvoid main(void) {\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  //////////////////////////////////////////////\n  // Color\n#if defined(DRAW_COLOR)\n\n#ifdef ENABLE_MULTI_DRAW\n\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 baseColor = getMaterialValue(materialCoords, 0);\n  vec4 matValue1 = getMaterialValue(materialCoords, 1);\n  float pointSize       = baseColor.a * matValue1.r;\n  float overlay      = matValue1.g;\n\n#else // ENABLE_MULTI_DRAW\n\n  vec4 baseColor = BaseColor;\n\n#endif // ENABLE_MULTI_DRAW\n\n  fragColor = baseColor;\n\n  //////////////////////////////////////////////\n  // GeomData\n#elif defined(DRAW_GEOMDATA)\n\n  float viewDist = length(v_viewPos);\n\n  if (floatGeomBuffer != 0) {\n    fragColor.r = float(passId); \n    fragColor.g = float(v_drawItemId);\n    fragColor.b = 0.0;// TODO: store poly-id or something.\n    fragColor.a = viewDist;\n  }\n  else {\n    ///////////////////////////////////\n    // UInt8 buffer\n    fragColor.r = mod(v_drawItemId, 256.) / 256.;\n    fragColor.g = (floor(v_drawItemId / 256.) + (float(passId) * 64.)) / 256.;\n\n    // encode the dist as a 16 bit float\n    vec2 float16bits = encode16BitFloatInto2xUInt8(viewDist);\n    fragColor.b = float16bits.x;\n    fragColor.a = float16bits.y;\n  }\n\n  //////////////////////////////////////////////\n  // Highlight\n#elif defined(DRAW_HIGHLIGHT)\n  \n  int drawItemId = int(v_drawItemId + 0.5);\n  fragColor = getHighlightColor(drawItemId);\n\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}static getParamDeclarations(){const F=super.getParamDeclarations();return F.push({name:"BaseColor",defaultValue:new UQ(1,1,.5)}),F.push({name:"PointSize",defaultValue:2}),F.push({name:"Overlay",defaultValue:2e-5}),F}static getPackedMaterialData(F){const U=new Float32Array(12),Q=F.getParameter("BaseColor").getValue();return U[0]=Q.r,U[1]=Q.g,U[2]=Q.b,U[3]=Q.a,U[4]=F.getParameter("PointSize").getValue(),U[5]=F.getParameter("Overlay").getValue(),U}}PU.register("PointsShader",Nd);class rd extends mV{constructor(F){super(F),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\ninstancedattribute vec3 positions;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\nimport 'GLSLUtils.glsl' \nimport 'inverse.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\nimport 'quadVertexFromID.glsl'\n\nuniform int drawItemId;\nint getDrawItemId() {\n  return drawItemId;\n}\n\nuniform float PointSize;\nuniform float Overlay;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\nvarying vec3 v_viewPos;\nvarying float v_drawItemId;\n\nvoid main(void) {\n  int drawItemId = getDrawItemId();\n  vec2 quadPointPos = getQuadVertexPositionFromID();\n  v_texCoord = quadPointPos + 0.5;\n\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n  \n  vec4 viewPos = modelViewMatrix * vec4(positions, 1.);\n\n  // During XR sessions, there is a scaling applied to the view matrix\n  // which causes a distortion to the line width. We extract that scale here\n  // and use to correct the distortion.\n  // See also: FatLinesShader\n  vec3 viewZ = modelViewMatrix[2].xyz;\n  float viewScale = length(viewZ);\n  viewPos += vec4(vec3(quadPointPos, 0.0) * PointSize * viewScale, 0.);\n\n  // Generate a quad which is 0.5 * PointSize closer towards\n  // us. This allows points to be visualized even if snug on \n  // a surface. (else they get fully clipped)\n  viewPos.z += 0.5 * PointSize;\n\n  v_drawItemId = float(getDrawItemId());\n  v_viewPos = -viewPos.xyz;\n  \n  gl_Position = projectionMatrix * viewPos;\n  if (Overlay > 0.0) {\n    gl_Position.z = mix(gl_Position.z, -gl_Position.w, Overlay);\n  }\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'constants.glsl'\n\nuniform color BaseColor;\nuniform float Rounded;\nuniform float BorderWidth;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\nvarying vec3 v_viewPos;\nvarying float v_drawItemId;\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\n#if defined(DRAW_GEOMDATA)\n  uniform int isOrthographic;\n  import 'surfaceGeomData.glsl'\n#elif defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\nfloat dist = length(v_texCoord - 0.5);\nif (dist > 0.5)\n  discard;\n\n#if defined(DRAW_COLOR)\n\n  if (dist > 0.5 - (BorderWidth * 0.5))\n    fragColor = vec4(0.,0.,0.,1.);\n  else {\n    // Modulate the lighting using the texture coord so the point looks round.\n    float NdotV = cos(dist * PI);\n\n    fragColor = BaseColor * mix(1.0, NdotV, Rounded);\n  }\n\n#elif defined(DRAW_GEOMDATA)\n  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId,v_drawItemId, isOrthographic);\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = setFragColor_highlight(v_drawItemId);\n#endif // DRAW_HIGHLIGHT\n\n  \n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}bind(F,U){return!!super.bind(F,U)&&(F.supportsInstancing=!1,!0)}static getParamDeclarations(){const F=super.getParamDeclarations();return F.push({name:"BaseColor",defaultValue:new UQ(1,1,.5)}),F.push({name:"PointSize",defaultValue:.05}),F.push({name:"Rounded",defaultValue:1}),F.push({name:"BorderWidth",defaultValue:.2}),F.push({name:"Overlay",defaultValue:0}),F}static supportsInstancing(){return!1}}PU.register("FatPointsShader",rd);class pd extends mV{constructor(F){super(F),this.setShaderStage("VERTEX_SHADER","precision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;\nattribute vec3 normals;\n#ifdef ENABLE_TEXTURES\nattribute vec2 texCoords;\n#endif\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\nimport 'GLSLUtils.glsl'\nimport 'transpose.glsl'\nimport 'inverse.glsl'\nimport 'drawItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n\nvoid main(void) {\n  int drawItemId = getDrawItemId();\n  v_drawItemId = float(drawItemId);\n  v_geomItemData  = getInstanceData(drawItemId);\n\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\n\n  vec4 pos = vec4(positions, 1.);\n  vec4 viewPos    = modelViewMatrix * pos;\n  gl_Position     = projectionMatrix * viewPos;\n\n  mat3 normalMatrix = mat3(transpose(inverse(modelViewMatrix)));\n  v_viewPos       = -viewPos.xyz;\n  v_viewNormal    = normalMatrix * normals;\n\n#ifdef ENABLE_TEXTURES\n  v_textureCoord  = texCoords;\n  // v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y\n#endif\n\n  v_worldPos      = (modelMatrix * pos).xyz;\n}\n"),this.setShaderStage("FRAGMENT_SHADER","precision highp float;\n#define GLSLIFY 1\n#ifdef ENABLE_MULTI_DRAW\n// #define DEBUG_GEOM_ID\n#endif\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemTexture.glsl'\nimport 'cutaways.glsl'\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\n\n#ifdef DEBUG_GEOM_ID\nimport 'debugColors.glsl'\n#endif\n\nuniform color cutColor;\n\n#ifdef ENABLE_FLOAT_TEXTURES\nvec4 getCutaway(int id) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 5);\n}\n\n#else\n\nuniform vec4 cutawayData;\n\nvec4 getCutaway(int id) {\n  return cutawayData;\n}\n\n#endif\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n/* VS Outputs */\n\nuniform mat4 cameraMatrix;\nuniform int isOrthographic;\n\n#ifndef ENABLE_MULTI_DRAW\n\nuniform color BaseColor;\nuniform float Opacity;\nuniform float EmissiveStrength;\n\n#ifdef ENABLE_TEXTURES\nuniform sampler2D BaseColorTex;\nuniform int BaseColorTexType;\nuniform sampler2D OpacityTex;\nuniform int OpacityTexType;\nuniform sampler2D EmissiveStrengthTex;\nuniform int EmissiveStrengthTexType;\n#endif // ENABLE_TEXTURES\n\n#endif // ENABLE_MULTI_DRAW\n\nimport 'computeViewNormal.glsl'\n  \n\n#ifdef ENABLE_ES3\n    out vec4 fragColor;\n#endif\n\n#if defined(DRAW_GEOMDATA)\n  import 'surfaceGeomData.glsl'\n#elif defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n#if defined(DRAW_COLOR)\n      int drawItemId = int(v_drawItemId + 0.5);\n\n      int flags = int(v_geomItemData.r + 0.5);\n      // Cutaways\n      if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) \n      {\n        vec4 cutAwayData   = getCutaway(drawItemId);\n        vec3 planeNormal = cutAwayData.xyz;\n        float planeDist = cutAwayData.w;\n        if (cutaway(v_worldPos, planeNormal, planeDist)) {\n          discard;\n          return;\n        }\n        else if (!gl_FrontFacing) {\n    #ifdef ENABLE_ES3\n      fragColor = cutColor;\n    #else\n      gl_FragColor = cutColor;\n    #endif\n          return;\n        }\n      }\n\n      //////////////////////////////////////////////\n      // Normals\n      \n      vec3 viewNormal;\n      if (length(v_viewNormal) < 0.1) {\n        viewNormal = computeViewNormal(v_viewPos);\n      } else {\n        viewNormal = normalize(v_viewNormal);\n      }\n      vec3 normal = normalize(mat3(cameraMatrix) * viewNormal);\n      \n      vec3 viewVector;\n      if (isOrthographic == 0)\n        viewVector = normalize(mat3(cameraMatrix) * normalize(v_viewPos));\n      else \n        viewVector = vec3(-cameraMatrix[2][0], -cameraMatrix[2][1], -cameraMatrix[2][2]);\n      \n      //////////////////////////////////////////////\n      // Material\n\n    #ifdef ENABLE_MULTI_DRAW\n\n      vec2 materialCoords = v_geomItemData.zw;\n      vec4 baseColor = toLinear(getMaterialValue(materialCoords, 0));\n      vec4 matValue1 = getMaterialValue(materialCoords, 1);\n      float opacity       = baseColor.a * matValue1.r;\n      float emission      = matValue1.g;\n\n    #else // ENABLE_MULTI_DRAW\n\n    #ifndef ENABLE_TEXTURES\n      vec4 baseColor      = toLinear(BaseColor);\n      float emission      = EmissiveStrength;\n      float opacity       = baseColor.a * Opacity;\n    #else\n      vec4 baseColor      = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);\n      float opacity       = baseColor.a * getLuminanceParamValue(Opacity, OpacityTex, OpacityTexType, v_textureCoord);\n      float emission      = getLuminanceParamValue(EmissiveStrength, EmissiveStrengthTex, EmissiveStrengthTexType, v_textureCoord);\n    #endif\n\n    #endif // ENABLE_MULTI_DRAW\n\n      // Hacky simple irradiance. \n      float ndotv = dot(normal, viewVector);\n      if (ndotv < 0.0) {\n        normal = -normal;\n        ndotv = dot(normal, viewVector);\n\n        // Note: these 2 lines can be used to debug inverted meshes.\n        //baseColor = vec4(1.0, 0.0, 0.0, 1.0);\n        //ndotv = 1.0;\n      }\n\n      fragColor = vec4((ndotv * baseColor.rgb) + (emission * baseColor.rgb), opacity);\n\n    #ifdef DEBUG_GEOM_ID\n      if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n        discard;\n        return;\n      }\n\n      // ///////////////////////\n      // Debug Draw ID (this correlates to GeomID within a GLGeomSet)\n      float geomId = v_geomItemData.w;\n      fragColor.rgb = getDebugColor(geomId);\n      // ///////////////////////\n    #endif\n\n    #ifdef ENABLE_INLINE_GAMMACORRECTION\n      fragColor.rgb = toGamma(fragColor.rgb);\n    #endif\n\n#elif defined(DRAW_GEOMDATA)\n  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId,v_drawItemId, isOrthographic);\n#elif defined(DRAW_HIGHLIGHT)\n  fragColor = setFragColor_highlight(v_drawItemId);\n#endif // DRAW_HIGHLIGHT\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}")}static getParamDeclarations(){const F=super.getParamDeclarations();return F.push({name:"BaseColor",defaultValue:new UQ(1,1,.5)}),F.push({name:"Opacity",defaultValue:1,range:[0,1]}),F.push({name:"EmissiveStrength",defaultValue:0,range:[0,1]}),F}static getPackedMaterialData(F){const U=new Float32Array(8),Q=F.getParameter("BaseColor").getValue();return U[0]=Q.r,U[1]=Q.g,U[2]=Q.b,U[3]=Q.a,U[4]=F.getParameter("Opacity").getValue(),U[5]=F.getParameter("EmissiveStrength").getValue(),U}}PU.register("SimpleSurfaceShader",pd);class Td extends mV{constructor(F){super(F),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;\nattribute vec3 normals;\n#ifdef ENABLE_TEXTURES\nattribute vec2 texCoords;\n#endif\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\n// should be imported by bottom 3\nimport 'GLSLUtils.glsl'\nimport 'transpose.glsl'\nimport 'inverse.glsl'\n\nimport 'drawItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\nvarying vec3 v_viewPos;\nvarying vec3 v_viewNormal;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\nvarying vec3 v_worldPos;\n/* VS Outputs */\n\n#if defined(DRAW_COLOR)\n#elif defined(DRAW_GEOMDATA)\n#elif defined(DRAW_HIGHLIGHT)\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n\n  #if defined(DRAW_COLOR)\n      int drawItemId = getDrawItemId();\n      v_drawItemId = float(drawItemId);\n      v_geomItemData = getInstanceData(drawItemId);\n\n      vec4 pos = vec4(positions, 1.);\n      mat4 modelMatrix = getModelMatrix(drawItemId);\n      mat4 modelViewMatrix = viewMatrix * modelMatrix;\n      vec4 viewPos    = modelViewMatrix * pos;\n      gl_Position     = projectionMatrix * viewPos;\n\n      mat3 normalMatrix = mat3(transpose(inverse(modelViewMatrix)));\n      v_viewPos       = -viewPos.xyz;\n      v_viewNormal    = normalMatrix * normals;\n\n    #ifdef ENABLE_TEXTURES\n      v_textureCoord  = texCoords;\n    #endif\n\n    v_worldPos      = (modelMatrix * pos).xyz;\n  #elif defined(DRAW_GEOMDATA)\n    int drawItemId = getDrawItemId();\n    v_drawItemId = float(drawItemId);\n    v_geomItemData = getInstanceData(drawItemId);\n\n    vec4 pos = vec4(positions, 1.);\n    mat4 modelMatrix = getModelMatrix(drawItemId);\n    mat4 modelViewMatrix = viewMatrix * modelMatrix;\n    vec4 viewPos = modelViewMatrix * pos;\n    gl_Position = projectionMatrix * viewPos;\n\n    v_viewPos = -viewPos.xyz;\n\n    v_worldPos      = (modelMatrix * pos).xyz;\n  #elif defined(DRAW_HIGHLIGHT)\n    int drawItemId = getDrawItemId();\n    v_drawItemId = float(drawItemId);\n    mat4 modelMatrix = getModelMatrix(drawItemId);\n    mat4 modelViewMatrix = viewMatrix * modelMatrix;\n    vec4 viewPos = modelViewMatrix * vec4(positions, 1.0);\n    gl_Position = projectionMatrix * viewPos;\n\n  #endif // DRAW_HIGHLIGHT\n\n}\n"),this.setShaderStage("FRAGMENT_SHADER","  precision highp float;\n#define GLSLIFY 1\n\n  import 'GLSLUtils.glsl'\n  import 'drawItemTexture.glsl' \n  import 'cutaways.glsl'\n  import 'gamma.glsl'\n  import 'materialparams.glsl'\n  import 'GLSLBits.glsl'\n\n  #ifdef ENABLE_FLOAT_TEXTURES\n    vec4 getCutaway(int id) {\n      return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 5);\n    }\n\n  #else\n\n    uniform vec4 cutawayData;\n\n    vec4 getCutaway(int id) {\n      return cutawayData;\n    }\n\n  #endif\n\n  #ifdef ENABLE_ES3\n    out vec4 fragColor;\n  #endif\n\n  /* VS Outputs */\n  varying float v_drawItemId;\n  /* VS Outputs */\n\n#if defined(DRAW_COLOR)\n\n  #ifdef ENABLE_MULTI_DRAW\n  // #define DEBUG_GEOM_ID\n  #endif\n  #ifdef DEBUG_GEOM_ID\n  import 'debugColors.glsl'\n  #endif\n\n  /* VS Outputs */\n  varying vec4 v_geomItemData;\n  varying vec3 v_viewPos;\n  varying vec3 v_viewNormal;\n  #ifdef ENABLE_TEXTURES\n  varying vec2 v_textureCoord;\n  #endif\n  varying vec3 v_worldPos;\n  /* VS Outputs */\n\n  uniform color cutColor;\n\n  #ifdef ENABLE_INLINE_GAMMACORRECTION\n    uniform float exposure;\n  #endif\n\n    uniform mat4 cameraMatrix;\n    uniform int isOrthographic;\n\n  #ifndef ENABLE_MULTI_DRAW\n\n    uniform color BaseColor;\n    uniform float AmbientOcclusion;\n    uniform float Roughness;\n    uniform float Metallic;\n    uniform float Reflectance;\n    uniform float EmissiveStrength;\n    uniform float Opacity;\n\n  #ifdef ENABLE_TEXTURES\n    uniform sampler2D BaseColorTex;\n    uniform int BaseColorTexType;\n\n    uniform sampler2D AmbientOcclusionTex;\n    uniform int AmbientOcclusionTexType;\n\n  #ifdef ENABLE_PBR\n    uniform sampler2D RoughnessTex;\n    uniform int RoughnessTexType;\n\n    uniform sampler2D MetallicTex;\n    uniform int MetallicTexType;\n\n    uniform sampler2D ReflectanceTex;\n    uniform int ReflectanceTexType;\n\n    uniform sampler2D NormalTex;\n    uniform int NormalTexType;\n  #endif // ENABLE_PBR\n\n  uniform sampler2D EmissiveStrengthTex;\n  uniform int EmissiveStrengthTexType;\n\n  #endif // ENABLE_TEXTURES\n  #endif // ENABLE_MULTI_DRAW\n\n  import 'PBRSurfaceRadiance.glsl'\n\n  #ifdef ENABLE_PBR\n    mat3 cotangentFrame( in vec3 normal, in vec3 pos, in vec2 texCoord ) {\n      // https://stackoverflow.com/questions/5255806/how-to-calculate-tangent-and-binormal\n      vec3 n = normal;\n      // derivations of the fragment position\n      vec3 pos_dx = dFdx( pos );\n      vec3 pos_dy = dFdy( pos );\n      // derivations of the texture coordinate\n      vec2 texC_dx = dFdx( texCoord );\n      vec2 texC_dy = dFdy( texCoord );\n      // tangent vector and binormal vector\n      vec3 t = -(texC_dy.y * pos_dx - texC_dx.y * pos_dy);\n      vec3 b = -(texC_dx.x * pos_dy - texC_dy.x * pos_dx);\n\n      t = t - n * dot( t, n ); // orthonormalization ot the tangent vectors\n      b = b - n * dot( b, n ); // orthonormalization of the binormal vectors to the normal vector\n      b = b - t * dot( b, t ); // orthonormalization of the binormal vectors to the tangent vector\n      mat3 tbn = mat3( normalize(t), normalize(b), n );\n\n      return tbn;\n    }\n  #endif\n\n  import 'computeViewNormal.glsl'\n\n#elif defined(DRAW_GEOMDATA)\n  uniform int isOrthographic;\n  varying vec4 v_geomItemData;\n  varying vec3 v_viewPos;\n  varying vec3 v_worldPos;\n  import 'surfaceGeomData.glsl'\n#elif defined(DRAW_HIGHLIGHT)\n  import 'surfaceHighlight.glsl'\n#endif // DRAW_HIGHLIGHT\n\nvoid main(void) {\n  #ifndef ENABLE_ES3\n    vec4 fragColor;\n  #endif\n  \n#if defined(DRAW_COLOR)\n    int drawItemId = int(v_drawItemId + 0.5);\n\n    int flags = int(v_geomItemData.r + 0.5);\n    // Cutaways\n    if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {\n      vec4 cutAwayData   = getCutaway(drawItemId);\n      vec3 planeNormal = cutAwayData.xyz;\n      float planeDist = cutAwayData.w;\n      if (cutaway(v_worldPos, planeNormal, planeDist)) {\n        discard;\n        return;\n      }\n      else if (!gl_FrontFacing) {\n  #ifdef ENABLE_ES3\n        fragColor = cutColor;\n  #else\n        gl_FragColor = cutColor;\n  #endif\n        return;\n      }\n    }\n\n    //////////////////////////////////////////////\n    // Normals\n    vec3 viewNormal;\n    if (length(v_viewNormal) < 0.1) {\n      viewNormal = computeViewNormal(v_viewPos);\n    } else {\n      viewNormal = normalize(v_viewNormal);\n    }\n    vec3 normal = normalize(mat3(cameraMatrix) * viewNormal);\n    \n    vec3 viewVector;\n    if (isOrthographic == 0)\n      viewVector = normalize(mat3(cameraMatrix) * normalize(v_viewPos));\n    else \n      viewVector = vec3(-cameraMatrix[2][0], -cameraMatrix[2][1], -cameraMatrix[2][2]);\n      \n    if (dot(normal, viewVector) < 0.0) {\n        normal = -normal;\n        // Note: this line can be used to debug inverted meshes.\n        //material.baseColor = vec3(1.0, 0.0, 0.0);\n    }\n\n    //////////////////////////////////////////////\n    // Material\n\n    MaterialParams material;\n\n  #ifdef ENABLE_MULTI_DRAW\n    vec2 materialCoords = v_geomItemData.zw;\n    vec4 matValue0      = getMaterialValue(materialCoords, 0);\n    vec4 matValue1      = getMaterialValue(materialCoords, 1);\n    vec4 matValue2      = getMaterialValue(materialCoords, 2);\n\n    material.baseColor     = toLinear(matValue0.rgb);\n    material.ambientOcclusion      = matValue1.r;\n    material.metallic      = matValue1.g;\n    material.roughness     = matValue1.b;\n    material.reflectance   = matValue1.a;\n\n    material.emission         = matValue2.r;\n    material.opacity          = matValue2.g * matValue0.a;\n\n  #else // ENABLE_MULTI_DRAW\n\n  #ifndef ENABLE_TEXTURES\n    material.baseColor     = toLinear(BaseColor.rgb);\n    material.emission      = EmissiveStrength;\n\n  #ifdef ENABLE_PBR\n    material.roughness     = Roughness;\n    material.metallic      = Metallic;\n    material.reflectance   = Reflectance;\n  #endif\n\n  #else\n    // Planar YZ projection for texturing, repeating every meter.\n    // vec2 texCoord       = v_worldPos.xz * 0.2;\n    vec2 texCoord          = v_textureCoord;\n\n    vec4 baseColor         = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, texCoord);\n    material.ambientOcclusion = getLuminanceParamValue(AmbientOcclusion, AmbientOcclusionTex, AmbientOcclusionTexType, texCoord);\n    material.baseColor     = baseColor.rgb;\n    \n  #ifdef ENABLE_PBR\n\n    material.metallic      = getLuminanceParamValue(Metallic, MetallicTex, MetallicTexType, texCoord);\n    material.roughness     = getLuminanceParamValue(Roughness, RoughnessTex, RoughnessTexType, texCoord);\n\n    // TODO: Communicate that this tex contains the roughness as well.\n    if (MetallicTexType != 0) {\n      vec4 metallicRoughness = vec4(Metallic, Roughness, 0.0, 1.0);\n      metallicRoughness     = texture2D(MetallicTex, texCoord);\n      material.roughness     = metallicRoughness.g;\n      material.metallic     = metallicRoughness.b;\n    }\n\n    material.reflectance   = getLuminanceParamValue(Reflectance, ReflectanceTex, ReflectanceTexType, texCoord);\n  #endif // ENABLE_PBR\n    material.emission         = getLuminanceParamValue(EmissiveStrength, EmissiveStrengthTex, EmissiveStrengthTexType, texCoord);\n  #endif // ENABLE_TEXTURES\n    material.opacity       = Opacity * baseColor.a;\n\n  #ifdef ENABLE_TEXTURES\n  #ifdef ENABLE_PBR\n    if (NormalTexType != 0) {\n        mat3 tbn = cotangentFrame(normal, viewVector, texCoord);\n        normal = normalize(tbn * (texture2D(NormalTex, texCoord).rgb * 2.0 - 1.0));\n    }\n  #endif // ENABLE_PBR\n  #endif // ENABLE_TEXTURES\n  #endif // ENABLE_MULTI_DRAW\n\n    fragColor = pbrSurfaceRadiance(material, normal, viewVector);\n    // fragColor = vec4(texture2D(NormalTex, texCoord).rgb, 1.0);\n    // fragColor = metallicRoughness;\n    // fragColor = vec4(material.baseColor, 1.0);;\n    // fragColor = vec4(vec3(material.metallic), 1.0);;\n    // fragColor = vec4(vec3(material.roughness), 1.0);;\n    // fragColor = vec4(vec3(material.ambientOcclusion), 1.0);\n    \n  #ifdef DEBUG_GEOM_ID\n    // ///////////////////////\n    // Debug Draw ID (this correlates to GeomID within a GLGeomSet)\n    float geomId = v_geomItemData.w;\n    fragColor.rgb = getDebugColor(geomId);\n    // ///////////////////////\n  #endif\n\n  #ifdef ENABLE_INLINE_GAMMACORRECTION\n    fragColor.rgb = toGamma(fragColor.rgb * exposure);\n  #endif\n\n#elif defined(DRAW_GEOMDATA)\n  int drawItemId = int(v_drawItemId + 0.5);\n\n    int flags = int(v_geomItemData.r + 0.5);\n    // Cutaways\n    if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {\n      vec4 cutAwayData   = getCutaway(drawItemId);\n      vec3 planeNormal = cutAwayData.xyz;\n      float planeDist = cutAwayData.w;\n      if (cutaway(v_worldPos, planeNormal, planeDist)) {\n          discard;\n          return;\n      }\n    }\n    if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {\n      discard;\n      return;\n    }\n    \n    fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId,v_drawItemId, isOrthographic);\n   \n#elif defined(DRAW_HIGHLIGHT)\n    int drawItemId = int(v_drawItemId + 0.5);\n    fragColor = getHighlightColor(drawItemId);\n#endif // DRAW_HIGHLIGHT\n\n  #ifndef ENABLE_ES3\n    gl_FragColor = fragColor;\n  #endif\n\n}")}static getParamDeclarations(){const F=super.getParamDeclarations();return F.push({name:"BaseColor",defaultValue:new UQ(1,1,.5)}),F.push({name:"AmbientOcclusion",defaultValue:1,range:[0,1]}),F.push({name:"Metallic",defaultValue:.05,range:[0,1]}),F.push({name:"Roughness",defaultValue:.5,range:[0,1]}),F.push({name:"Reflectance",defaultValue:.5,range:[0,1]}),F.push({name:"Normal",defaultValue:new UQ(.5,.5,.5)}),F.push({name:"EmissiveStrength",defaultValue:0,range:[0,1]}),F.push({name:"Opacity",defaultValue:1,range:[0,1]}),F}bind(F,U){super.bind(F,U);const Q=this.__gl;F.envMap&&F.envMap.bind(F);const{exposure:B}=F.unifs;return B&&Q.uniform1f(B.location,F.exposure),!0}static getPackedMaterialData(F){const U=new Float32Array(12),Q=F.getParameter("BaseColor").getValue();return U[0]=Q.r,U[1]=Q.g,U[2]=Q.b,U[3]=Q.a,U[4]=F.getParameter("AmbientOcclusion").getValue(),U[5]=F.getParameter("Metallic").getValue(),U[6]=F.getParameter("Roughness").getValue(),U[7]=F.getParameter("Reflectance").getValue(),U[8]=F.getParameter("EmissiveStrength").getValue(),U[9]=F.getParameter("Opacity").getValue(),U}}PU.register("StandardSurfaceShader",Td),PU.register("TransparentSurfaceShader",Td);class Yd extends mV{constructor(F){super(F),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec3 positions;\n#ifdef ENABLE_TEXTURES\nattribute vec2 texCoords;\n#endif\n\nimport 'GLSLUtils.glsl'\nimport 'drawItemId.glsl'\nimport 'drawItemTexture.glsl'\nimport 'modelMatrix.glsl'\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\n\nvoid main(void) {\n  int drawItemId = getDrawItemId();\n  v_drawItemId = float(drawItemId);\n  v_geomItemData  = getInstanceData(drawItemId);\n\n  mat4 modelMatrix = getModelMatrix(drawItemId);\n\n  gl_Position = (modelMatrix * vec4(positions, 1.0));\n\n  v_textureCoord = texCoords;\n  v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'GLSLUtils.glsl'\n#ifdef ENABLE_MULTI_DRAW\nimport 'drawItemTexture.glsl'\n#endif // ENABLE_MULTI_DRAW\n\nimport 'gamma.glsl'\nimport 'materialparams.glsl'\n\n#if defined(DRAW_COLOR)\n\n#ifndef ENABLE_MULTI_DRAW\n\nuniform color BaseColor;\n\n#ifdef ENABLE_TEXTURES\nuniform sampler2D BaseColorTex;\nuniform int BaseColorTexType;\n#endif\n\n#endif // ENABLE_MULTI_DRAW\n#endif // DRAW_COLOR\n\n/* VS Outputs */\nvarying float v_drawItemId;\nvarying vec4 v_geomItemData;\n#ifdef ENABLE_TEXTURES\nvarying vec2 v_textureCoord;\n#endif\n\n#ifdef ENABLE_ES3\nout vec4 fragColor;\n#endif\n\nvoid main(void) {\n  \n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  //////////////////////////////////////////////\n  // Color\n#if defined(DRAW_COLOR)\n\n#ifdef ENABLE_MULTI_DRAW\n\n  vec2 materialCoords = v_geomItemData.zw;\n  vec4 baseColor = getMaterialValue(materialCoords, 0);\n\n#else // ENABLE_MULTI_DRAW\n\n#ifndef ENABLE_TEXTURES\n  vec4 baseColor = BaseColor;\n#else\n  vec4 baseColor      = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);\n#endif\n\n#endif // ENABLE_MULTI_DRAW\n\n  fragColor = baseColor;\n\n#ifdef ENABLE_INLINE_GAMMACORRECTION\n  fragColor.rgb = toGamma(fragColor.rgb);\n#endif\n\n  //////////////////////////////////////////////\n  // GeomData\n#elif defined(DRAW_GEOMDATA)\n\n  if (true) {\n    discard;\n    return;\n  }\n\n  fragColor = vec4(-1, -1, -1, 0);\n\n#endif // DRAW_GEOMDATA\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}static isOverlay(){return!0}static getParamDeclarations(){const F=super.getParamDeclarations();return F.push({name:"BaseColor",defaultValue:new UQ(1,1,.5)}),F}static getPackedMaterialData(F){const U=new Float32Array(8),Q=F.getParameter("BaseColor").getValue();return U[0]=Q.r,U[1]=Q.g,U[2]=Q.b,U[3]=Q.a,U}}PU.register("ScreenSpaceShader",Yd);class kd extends IV{constructor(){super()}init(F,U){super.init(F,U)}itemAddedToScene(F,U){if(F instanceof ul){const U=F;return!!this.filterGeomItem(U)&&(this.addGeomItem(U),U.setMetadata("glpass",this),!0)}return!1}itemRemovedFromScene(F,U){return F instanceof ul&&F.getMetadata("glpass")==this&&this.removeGeomItem(F)}filterGeomItem(F){return!0}constructShaders(F){let U,Q;const B=this.__renderer.getOrCreateShader(F);return U=B.constructor.getGeomDataShaderName()?this.__renderer.getOrCreateShader(B.constructor.getGeomDataShaderName()):B,Q=B.constructor.getSelectedShaderName()?this.__renderer.getOrCreateShader(B.constructor.getSelectedShaderName()):B,{glShader:B,glgeomdatashader:U,glselectedshader:Q}}getGeomItemAndDist(F){let U,Q;F instanceof Float32Array?(U=Math.round(F[1]),Q=F[3]):(U=F[0]+((63&F[1])<<8),Q=DU.decode16BitFloatFrom2xUInt8([F[2],F[3]]));const B=this.renderer.glGeomItemLibrary.getGeomItem(U);if(B)return{geomItem:B,dist:Q}}}class Hd extends nQ{constructor(F){super(),this.renderer=F,this.gl=F.gl,this.glGeomItems=[],this.glGeomIdsMapping={},this.glgeomItemEventHandlers=[],this.freeIndices=[],this.drawElementCounts=new Int32Array(0),this.drawElementOffsets=new Int32Array(0),this.highlightElementCounts=new Int32Array(0),this.highlightElementOffsets=new Int32Array(0),this.reserved=0,this.visibleItems=[],this.drawIdsArray=new Float32Array(0),this.drawIdsBufferDirty=!0,this.drawIdsTexture=null,this.highlightedItems=[],this.highlightedIdsArray=null,this.highlightedIdsTexture=null,this.highlightedIdsBufferDirty=!0,this.renderer.glGeomLibrary.on("geomDataChanged",(F=>{const U=this.glGeomIdsMapping[F.index];null!=U&&U.forEach((F=>{const U=this.glGeomItems[F];if(U.isVisible()){const F=this.visibleItems.indexOf(U),Q=this.renderer.glGeomLibrary.getGeomOffsetAndCount(U.geomId);this.drawElementOffsets[F]=Q[0],this.drawElementCounts[F]=Q[1];const B=this.highlightedItems.indexOf(U);-1!=B&&(this.highlightElementOffsets[B]=Q[0],this.highlightElementCounts[B]=Q[1])}}))}))}addGLGeomItem(F){const U=this.freeIndices.length>0?this.freeIndices.pop():this.glGeomItems.length;this.glGeomIdsMapping[F.geomId]?this.glGeomIdsMapping[F.geomId].push(U):this.glGeomIdsMapping[F.geomId]=[U];const Q={};F.visible&&this.visibleItems.push(F),Q.visibilityChanged=U=>{U.visible?this.visibleItems.push(F):this.visibleItems.splice(this.visibleItems.indexOf(F),1),this.drawIdsBufferDirty||(this.drawIdsBufferDirty=!0,this.emit("updated"))},F.on("visibilityChanged",Q.visibilityChanged),F.geomItem.isHighlighted()&&(this.highlightedItems.push(F),this.highlightedIdsBufferDirty=!0),Q.highlightChanged=U=>{if(U&&U.name){if(this.highlightedItems.includes(F))return;this.highlightedItems.push(F)}else this.highlightedItems.splice(this.highlightedItems.indexOf(F),1);this.highlightedIdsBufferDirty=!0,this.emit("updated")},F.geomItem.on("highlightChanged",Q.highlightChanged),this.glGeomItems[U]=F,this.glgeomItemEventHandlers[U]=Q,this.drawIdsBufferDirty=!0,this.emit("updated")}removeGLGeomItem(F){const U=this.glGeomItems.indexOf(F),Q=this.glGeomIdsMapping[F.geomId];Q.splice(Q.indexOf(U),1),0==Q.length&&delete this.glGeomIdsMapping[F.geomId];const B=this.glgeomItemEventHandlers[U];if(F.geomItem.off("highlightChanged",B.highlightChanged),F.off("visibilityChanged",B.visibilityChanged),this.glGeomItems[U]=null,this.glgeomItemEventHandlers[U]=null,this.drawIdsArray[U]=0,this.drawElementOffsets[U]=0,this.drawElementCounts[U]=0,this.freeIndices.push(U),F.isVisible()){const U=this.visibleItems.indexOf(F);this.visibleItems.splice(U,1),this.drawIdsBufferDirty=!0}if(F.geomItem.isHighlighted()){const U=this.highlightedItems.indexOf(F);this.highlightedItems.splice(U,1),this.highlightedIdsBufferDirty=!0}this.emit("updated")}updateDrawIDsBuffer(F){(!this.drawIdsArray||this.visibleItems.length>this.drawIdsArray.length)&&(this.drawIdsArray=new Float32Array(this.visibleItems.length),this.drawElementOffsets=new Int32Array(this.visibleItems.length),this.drawElementCounts=new Int32Array(this.visibleItems.length)),this.visibleItems.forEach(((F,U)=>{const Q=this.renderer.glGeomLibrary.getGeomOffsetAndCount(F.geomId);this.drawElementOffsets[U]=Q[0],this.drawElementCounts[U]=Q[1],this.drawIdsArray[U]=F.drawItemId}));const U=this.renderer.gl;if(!U.multiDrawElements)return;const Q=F.boundTextures++;U.activeTexture(U.TEXTURE0+Q);const B=2*DU.nextPow2(Math.ceil(Math.sqrt(this.visibleItems.length)));this.drawIdsTexture?(this.drawIdsTexture.width<B||this.drawIdsTexture.height<B)&&this.drawIdsTexture.resize(B,B):this.drawIdsTexture=new bV(U,{format:"webgl2"==U.name?"RED":"ALPHA",type:"FLOAT",width:B,height:B,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1});{const F=this.drawIdsTexture,Q=this.drawIdsTexture.width;U.bindTexture(U.TEXTURE_2D,F.glTex);const B=0,l=0,V=1,d=F.__format,R=F.__type,t=Math.ceil((l+this.visibleItems.length)/Q);let s=0,i=this.visibleItems.length,e=l;for(let F=0;F<t;F++){let F;e+i>Q?(F=Q-e,e=0):F=i;const l=s%Q,t=Math.floor(s/Q),I=this.drawIdsArray.subarray(s,s+F);U.texSubImage2D(U.TEXTURE_2D,B,l,t,F,V,d,R,I),s+=F,i-=F}}U.bindTexture(U.TEXTURE_2D,null),F.boundTextures--,this.drawIdsBufferDirty=!1}updateHighlightedIDsBuffer(F){if(this.highlightedIdsBufferDirty){(!this.highlightedIdsArray||this.highlightedItems.length>this.highlightedIdsArray.length)&&(this.highlightedIdsArray=new Float32Array(this.highlightedItems.length),this.highlightElementOffsets=new Uint32Array(this.highlightedItems.length),this.highlightElementCounts=new Uint32Array(this.highlightedItems.length)),this.highlightedItems.forEach(((F,U)=>{this.highlightedIdsArray[U]=F.drawItemId;const Q=this.renderer.glGeomLibrary.getGeomOffsetAndCount(F.geomId);this.highlightElementOffsets[U]=Q[0],this.highlightElementCounts[U]=Q[1]}));for(let F=this.highlightedItems.length;F<this.highlightElementCounts.length;F++)this.highlightElementOffsets[F]=0,this.highlightElementCounts[F]=0;this.highlightedIdsBufferDirty=!1}const U=this.renderer.gl;if(!U.multiDrawElements)return;const Q=F.boundTextures++;U.activeTexture(U.TEXTURE0+Q);const B=DU.nextPow2(Math.ceil(Math.sqrt(this.highlightedItems.length)));this.highlightedIdsTexture?(this.highlightedIdsTexture.width<B||this.highlightedIdsTexture.height<B)&&this.highlightedIdsTexture.resize(B,B):this.highlightedIdsTexture=new bV(U,{format:"webgl2"==U.name?"RED":"ALPHA",type:"FLOAT",width:B,height:B,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1});{const F=this.highlightedIdsTexture,Q=this.highlightedIdsTexture.width;U.bindTexture(U.TEXTURE_2D,F.glTex);const B=0,l=0,V=1,d=F.__format,R=F.__type,t=Math.ceil((l+this.highlightedIdsArray.length)/Q);let s=0,i=this.highlightedIdsArray.length,e=l;for(let F=0;F<t;F++){let F;e+i>Q?(F=Q-e,e=0):F=i;const l=s%Q,t=Math.floor(s/Q),I=this.highlightedIdsArray.subarray(s,s+F);U.texSubImage2D(U.TEXTURE_2D,B,l,t,F,V,d,R,I),s+=F,i-=F}}U.bindTexture(U.TEXTURE_2D,null),F.boundTextures--}draw(F){if(0!=this.visibleItems.length){if(this.drawIdsBufferDirty&&this.updateDrawIDsBuffer(F),this.drawIdsTexture){const{drawIdsTexture:U}=F.unifs;this.drawIdsTexture.bindToUniform(F,U)}this.__bindAndRender(F,this.drawIdsArray,this.drawElementCounts,this.drawElementOffsets,this.visibleItems.length)}}drawHighlighted(F){if(0!=this.highlightedItems.length){if(this.highlightedIdsBufferDirty&&this.updateHighlightedIDsBuffer(F),this.highlightedIdsTexture){const{drawIdsTexture:U}=F.unifs;this.highlightedIdsTexture.bindToUniform(F,U)}this.__bindAndRender(F,this.highlightedIdsArray,this.highlightElementCounts,this.highlightElementOffsets,this.highlightedItems.length)}}__bindAndRender(F,U,Q,B,l){const V=this.gl,d=F.unifs;d.instancedDraw&&V.uniform1i(F.unifs.instancedDraw.location,1),F.bindViewports(d,(()=>{this.multiDraw(F,U,Q,B,l)}))}sortItems(F){const U=[],Q=[];this.visibleItems.forEach(((B,l)=>{if(B){const V=B.geomItem.getGeomMat4().translation.distanceTo(F);U.push(V),Q.push(l)}})),Q.sort(((F,Q)=>U[Q]-U[F]));const B=[],l=new Int32Array(this.drawElementCounts.length),V=new Int32Array(this.drawElementOffsets.length);Q.forEach(((F,U)=>{B[U]=this.visibleItems[F],l[U]=this.drawElementCounts[F],V[U]=this.drawElementOffsets[F],this.drawIdsArray[U]=this.visibleItems[F].drawItemId})),this.visibleItems=B,this.drawElementCounts=l,this.drawElementOffsets=V,this.drawIdsBufferDirty=!0}destroy(){this.drawIdsTexture&&this.drawIdsTexture.destroy(),this.highlightedIdsTexture&&this.highlightedIdsTexture.destroy(),this.emit("destructing")}}class Md extends Hd{singleDraw(F,U,Q){const B=this.gl,{occluded:l}=F.unifs;l&&B.uniform1i(l.location,0),B.drawElements(B.LINES,U,B.UNSIGNED_INT,Q),l&&(B.uniform1i(l.location,1),B.depthFunc(B.GREATER),B.multiDrawElements(B.LINES,counts,0,B.UNSIGNED_INT,offsets,0,counts.length),B.depthFunc(B.LEQUAL))}multiDraw(F,U,Q,B,l){const V=this.gl;if(V.multiDrawArrays){const{occluded:U}=F.unifs;U&&V.uniform1i(U.location,0),V.multiDrawElements(V.LINES,Q,0,V.UNSIGNED_INT,B,0,l),U&&(V.uniform1i(U.location,1),V.depthFunc(V.GREATER),V.multiDrawElements(V.LINES,Q,0,V.UNSIGNED_INT,B,0,l),V.depthFunc(V.LEQUAL))}else{const{drawId:l,occluded:d}=F.unifs;d&&V.uniform1i(d.location,0);for(let F=0;F<Q.length;F++)V.uniform1i(l.location,U[F]),V.drawElements(V.LINES,Q[F],V.UNSIGNED_INT,B[F]);if(d){V.uniform1i(d.location,1),V.depthFunc(V.GREATER);for(let F=0;F<Q.length;F++)V.uniform1i(l.location,U[F]),V.drawElements(V.LINES,Q[F],V.UNSIGNED_INT,B[F]);V.depthFunc(V.LEQUAL)}}}}class Ad extends Hd{singleDraw(F,U,Q){const B=this.gl;B.drawArrays(B.POINTS,Q,U)}multiDraw(F,U,Q,B,l){const V=this.gl;if(V.multiDrawArrays)V.multiDrawArrays(V.POINTS,B,0,Q,0,l);else{const{drawId:d}=F.unifs;for(let F=0;F<l;F++)V.uniform1i(d.location,U[F]),V.drawArrays(V.TRIANGLES,B[F],Q[F])}}}class vd extends Hd{singleDraw(F,U,Q){const B=this.gl;B.drawElements(B.TRIANGLES,U,B.UNSIGNED_INT,Q)}multiDraw(F,U,Q,B,l){const V=this.gl;if(V.multiDrawElements)V.multiDrawElements(V.TRIANGLES,Q,0,V.UNSIGNED_INT,B,0,l);else{const{drawId:d}=F.unifs;for(let F=0;F<l;F++)V.uniform1i(d.location,U[F]),V.drawElements(V.TRIANGLES,Q[F],V.UNSIGNED_INT,B[F])}}}class zd extends nQ{constructor(F,U,Q){super(),this.pass=F,this.gl=U,this.glShader=Q.glShader,this.glGeomDataShader=Q.glgeomdatashader?Q.glgeomdatashader:Q.glShader,this.glHighlightShader=Q.glselectedshader?Q.glselectedshader:Q.glShader,this.glGeomItemSets={},this.glShaderKey=Q.glShader.getId()+"multidraw-draw",this.glGeomDataShader&&(this.glGeomDataShaderKey=this.glGeomDataShader.getId()+"multidraw-geomdata"),this.glHighlightShader&&(this.glHighlightShaderKey=this.glHighlightShader.getId()+"multidraw-highlight")}getOrCreateGLGeomItemSet(F){let U;if(F instanceof rB||F instanceof kB){if(this.glGeomItemSets.GLMesh)return this.glGeomItemSets.GLMesh;U=new vd(this.pass.renderer),this.glGeomItemSets.GLMesh=U}else if(F instanceof NB||F instanceof YB){if(this.glGeomItemSets.GLLines)return this.glGeomItemSets.GLLines;U=new Md(this.pass.renderer),this.glGeomItemSets.GLLines=U}else{if(!(F instanceof uB||F instanceof TB))throw new Error("Unsupported geom type:"+F.constructor.name);if(this.glGeomItemSets.GLPoints)return this.glGeomItemSets.GLPoints;U=new Ad(this.pass.renderer),this.glGeomItemSets.GLPoints=U}return U.on("updated",(()=>{this.emit("updated")})),U}addGLGeomItem(F){const U=F.geomItem,Q=U.getParameter("Geometry").getValue(),B=F.geomItem.getParameter("Material").getValue(),l=F=>{this.pass.removeGeomItem(U),this.pass.__renderer.assignTreeItemToGLPass(U)};B.on("transparencyChanged",l),U.getParameter("Material").on("valueChanged",l),U.getParameter("Geometry").on("valueChanged",l);const V=this.getOrCreateGLGeomItemSet(Q);F.material=B,F.GLGeomItemSet=V,F.geomItemParamChanged=l,V.addGLGeomItem(F)}removeGLGeomItem(F){const U=F.geomItem,Q=F.material,B=F.geomItemParamChanged;Q.off("transparencyChanged",B),U.getParameter("Material").off("valueChanged",B),U.getParameter("Geometry").off("valueChanged",B),F.material=null,F.geomItemParamChanged=null;F.GLGeomItemSet.removeGLGeomItem(F),F.GLGeomItemSet=null}bindShader(F,U,Q){if(F.isCompiledForTarget(Q)||(this.gl.multiDrawElements?U.shaderopts.directives.push("#define ENABLE_MULTI_DRAW\n#extension GL_ANGLE_multi_draw : enable"):U.shaderopts.directives.push("#define ENABLE_MULTI_DRAW"),F.compileForTarget(Q,U.shaderopts),U.shaderopts.directives.pop()),!F.bind(U,Q))throw new Error("Unable to bind shader:"+F);this.pass.renderer.glGeomItemLibrary.bind(U),this.pass.renderer.glGeomLibrary.bind(U),this.pass.renderer.glMaterialLibrary.bind(U)}draw(F){this.bindShader(this.glShader,F,this.glShaderKey);for(const U in this.glGeomItemSets)this.glGeomItemSets[U].draw(F);this.glShader.unbind(F)}drawHighlightedGeoms(F){if(this.glHighlightShader){this.bindShader(this.glHighlightShader,F,this.glHighlightShaderKey);for(const U in this.glGeomItemSets)this.glGeomItemSets[U].drawHighlighted(F);this.glHighlightShader.unbind(F)}}drawGeomData(F){this.bindShader(this.glGeomDataShader,F,this.glGeomDataShaderKey);const U=F.gl,{floatGeomBuffer:Q,passId:B}=F.unifs;Q&&U.uniform1i(Q.location,F.floatGeomBuffer?1:0),B&&U.uniform1i(B.location,F.passIndex);for(const U in this.glGeomItemSets)this.glGeomItemSets[U].draw(F);this.glGeomDataShader.unbind(F)}sortItems(F){for(const U in this.glGeomItemSets)this.glGeomItemSets[U].sortItems(F)}}class Dd extends kd{constructor(){super(),this.__glshadermaterials={},this.__glShaderGeomSets={}}init(F,U){super.init(F,U)}getPassType(){return eV.OPAQUE}filterGeomItem(F){const U=F.getParameter("Material").getValue();return this.checkMaterial(U)}checkMaterial(F){return!F.isTransparent()}removeAndReAddGeomItem(F){this.removeGeomItem(F),this.__renderer.assignTreeItemToGLPass(F)}addGeomItem(F){const U=F.getParameter("Material"),Q=U.getValue();if(!Q.isTextured()){const U=Q.getShaderName(),B=PU.getBlueprint(U);if(B.supportsInstancing()&&B.getPackedMaterialData){let Q=this.__glShaderGeomSets[U];if(!Q){const F=this.constructShaders(U);Q=new zd(this,this.__gl,F),Q.on("updated",(()=>{this.__renderer.requestRedraw()})),this.__glShaderGeomSets[U]=Q}const B=this.renderer.glGeomItemLibrary.getGLGeomItem(F);return Q.addGLGeomItem(B),B.GLShaderGeomSets=Q,this.emit("updated"),!0}}const B=this.renderer.glGeomLibrary.constructGLGeom(F.getParameter("Geometry").getValue()),l=this.renderer.glGeomItemLibrary.getGLGeomItem(F),V=()=>{this.removeGeomItem(F),this.__renderer.assignTreeItemToGLPass(F)};U.on("valueChanged",V),l.materialChanged=V;const d=Q.getShaderName(),R=this.renderer.glMaterialLibrary.getGLMaterial(Q);let t=this.__glshadermaterials[d];if(!t){const F=this.constructShaders(d);t=new ed(this.__gl,this,F),this.__glshadermaterials[d]=t,t.on("updated",(()=>{this.__renderer.requestRedraw()}))}return t.addGLGeomItem(l,B,R),!0}removeGeomItem(F){const U=this.renderer.glGeomItemLibrary.getGLGeomItem(F);if(U.GLShaderGeomSets){return U.GLShaderGeomSets.removeGLGeomItem(U),U.GLShaderGeomSets=null,!0}const Q=F.getParameter("Material"),B=U.materialChanged;if(Q&&B&&(Q.off("valueChanged",B),U.materialChanged=null),U.GLGeomItemSet){return U.GLGeomItemSet.removeGLGeomItem(U),U.GLGeomItemSet=null,!0}return!0}removeMaterial(F){const U=this.__glshadermaterials[F.hash];if(!U||U!=F.getMetadata("glshaderMaterials"))return void console.warn("Material not found in pass");const Q=F.getMetadata("glMaterialGeomItemSets");U.removeMaterialGeomItemSets(Q)}__traverseTreeAndDraw(F){for(const U in this.__glShaderGeomSets)this.__glShaderGeomSets[U].draw(F);for(const U in this.__glshadermaterials)this.__glshadermaterials[U].draw(F);F.glGeom&&F.glGeom.unbind(F)}draw(F){const U=this.__gl;U.disable(U.BLEND),U.disable(U.CULL_FACE),U.enable(U.DEPTH_TEST),U.depthFunc(U.LEQUAL),U.depthMask(!0),this.__traverseTreeAndDraw(F),F.viewport.drawSilhouettes(F)}drawHighlightedGeoms(F){const U=this.__gl;U.disable(U.CULL_FACE),F.drawItemsTexture=this.__drawItemsTexture;for(const U in this.__glShaderGeomSets)this.__glShaderGeomSets[U].drawHighlightedGeoms(F);for(const U in this.__glshadermaterials){this.__glshadermaterials[U].drawHighlightedGeoms(F)}F.glGeom&&F.glGeom.unbind(F)}drawGeomData(F){F.passIndex=this.passIndex;const U=this.__gl;U.disable(U.BLEND),U.disable(U.CULL_FACE),U.enable(U.DEPTH_TEST),U.depthFunc(U.LEQUAL),U.depthMask(!0);for(const U in this.__glShaderGeomSets)this.__glShaderGeomSets[U].drawGeomData(F);for(const U in this.__glshadermaterials){this.__glshadermaterials[U].drawGeomData(F)}F.glGeom&&F.glGeom.unbind(F)}}md.registerPass(Dd,eV.OPAQUE);class Kd extends mV{constructor(F){super(F),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\nattribute vec3 positions;  //(location = 0)\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  v_texCoord = positions.xy+0.5;\n  gl_Position = vec4(positions.xy*2.0, -1.0, 1.0);\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D colorTexture;\nuniform sampler2D depthTexture;\nuniform vec2 screenSize;\n\nuniform float growth;\n\nvarying vec2 v_texCoord;\n\nbool sampleNeiPixel(vec2 fragCoord, inout vec4 res) {\n  res = texture2D(colorTexture, fragCoord/screenSize);\n  if (res.a > 0.0) {\n    return true;\n  }\n  return false;\n}\n\nvec4 samplePixels(vec2 fragCoord) {\n  vec4 res = vec4(0.0);\n  \n  if (sampleNeiPixel(fragCoord, res)) return res; // M\n  \n  // Search surrounding pixels for geoms\n  if (sampleNeiPixel(fragCoord+vec2( 1, 0), res)) return res; // E\n  if (sampleNeiPixel(fragCoord+vec2(-1, 0), res)) return res; // W\n  if (sampleNeiPixel(fragCoord+vec2( 0, 1), res)) return res; // N\n  if (sampleNeiPixel(fragCoord+vec2( 0,-1), res)) return res; // S\n  if (sampleNeiPixel(fragCoord+vec2( 1, 1), res)) return res; // NW\n  if (sampleNeiPixel(fragCoord+vec2(-1, 1), res)) return res; // NE\n  if (sampleNeiPixel(fragCoord+vec2( 1,-1), res)) return res; // SW\n  if (sampleNeiPixel(fragCoord+vec2(-1,-1), res)) return res; // SE\n  \n  return res;\n}\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  fragColor = samplePixels(gl_FragCoord.xy);\n  if (fragColor.a < 0.0001) {\n    discard; \n  }\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}class wd extends Dd{constructor(){super()}init(F,U){super.init(F,U)}filterGeomItem(F){const U=F.getParameter("Geometry").getValue();if(U instanceof NB||U instanceof YB||U instanceof uB||U instanceof TB)return!0}__checkFramebuffer(F){const U=this.__gl;let Q;if(Q="webgl2"==U.name?U.checkFramebufferStatus(U.DRAW_FRAMEBUFFER):U.checkFramebufferStatus(U.FRAMEBUFFER),Q!==U.FRAMEBUFFER_COMPLETE)switch(U.bindTexture(U.TEXTURE_2D,null),"webgl2"==U.name?U.bindFramebuffer(U.DRAW_FRAMEBUFFER,null):U.bindFramebuffer(U.FRAMEBUFFER,null),console.warn("Error creating Fbo width:",F.width,", height:",F.height),Q){case U.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw new Error("The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.");case U.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw new Error("There is no attachment.");case U.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("Height and width of the attachment are not the same.");case U.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.");case 36061:throw new Error("The framebuffer is unsupported");default:throw new Error("Incomplete Frambuffer")}}draw(F){const U=this.__gl;U.enable(U.BLEND),U.blendFunc(U.SRC_ALPHA,U.ONE_MINUS_SRC_ALPHA),U.enable(U.DEPTH_TEST),U.depthFunc(U.LEQUAL),U.depthMask(!0),this.__traverseTreeAndDraw(F),U.disable(U.BLEND)}drawGeomData(F){const U=this.__gl;if(F.geomDataFbo){this.linesGeomDataBuffer||(this.linesGeomDataBuffer=new bV(U,{type:this.__renderer.floatGeomBuffer?"FLOAT":"UNSIGNED_BYTE",format:"RGBA",filter:"NEAREST",width:1,height:2}),this.fattenLinesShader=new Kd(U),this.quad=new vV(U,new qB(1,1)));const Q=F.geomDataFbo,B=Q.width,l=Q.height;if(this.linesGeomDataBuffer.width!=B||this.linesGeomDataBuffer.height!=l){this.fbo&&(U.deleteFramebuffer(this.fbo),this.fbo=null),this.linesGeomDataBuffer.resize(B,l),this.fbo=U.createFramebuffer();const V=this.linesGeomDataBuffer.glTex,d=Q.__depthTexture;"webgl2"==U.name?(U.bindFramebuffer(U.DRAW_FRAMEBUFFER,this.fbo),U.framebufferTexture2D(U.DRAW_FRAMEBUFFER,U.COLOR_ATTACHMENT0,U.TEXTURE_2D,V,0),U.framebufferTexture2D(U.DRAW_FRAMEBUFFER,U.DEPTH_ATTACHMENT,U.TEXTURE_2D,d,0)):(U.bindFramebuffer(U.FRAMEBUFFER,this.fbo),U.framebufferTexture2D(U.FRAMEBUFFER,U.COLOR_ATTACHMENT0,U.TEXTURE_2D,V,0),U.framebufferTexture2D(U.FRAMEBUFFER,U.DEPTH_ATTACHMENT,U.TEXTURE_2D,d,0)),this.__checkFramebuffer(F)}else"webgl2"==U.name?U.bindFramebuffer(U.DRAW_FRAMEBUFFER,this.fbo):U.bindFramebuffer(U.FRAMEBUFFER,this.fbo);U.colorMask(!0,!0,!0,!0),U.clearColor(0,0,0,0),U.clear(U.COLOR_BUFFER_BIT)}if(super.drawGeomData(F),F.geomDataFbo){F.geomDataFbo.bindForWriting(F),this.fattenLinesShader.bind(F);const{colorTexture:Q,screenSize:B}=F.unifs;this.linesGeomDataBuffer.bindToUniform(F,Q);const l=F.geomDataFbo;U.uniform2f(B.location,l.width,l.height),this.quad.bindAndDraw(F)}}}md.registerPass(wd,eV.OPAQUE);class fd extends kd{constructor(){super(),this.listenerIDs={}}init(F,U){super.init(F,U),this.itemCount=0,this.__glShaderGeomSets={},this.transparentItems=[],this.transparentItemIndices={},this.freeList=[],this.visibleItems=[],this.prevSortCameraPos=new qU(999,999,999),this.sortCameraMovementDistance=.25,this.reSort=!1}getPassType(){return eV.TRANSPARENT}filterGeomItem(F){const U=F.getParameter("Geometry").getValue();if(U instanceof NB||U instanceof uB||U instanceof TB||U instanceof YB)return!1;return F.getParameter("Material").getValue().isTransparent()}resortNeeded(){this.reSort=!0}addGeomItem(F){this.itemCount++;const U={};this.listenerIDs[F.getId()]=U;const Q=F.getParameter("Material"),B=Q.getValue(),l=B.getShaderName();if(!B.isTextured()){const Q=PU.getBlueprint(l);if(Q.supportsInstancing()&&Q.getPackedMaterialData){let Q=this.__glShaderGeomSets[l];if(!Q){const F=this.constructShaders(l);Q=new zd(this,this.__gl,F),Q.on("updated",(()=>{this.__renderer.requestRedraw()})),this.__glShaderGeomSets[l]=Q}const B=this.renderer.glGeomItemLibrary.getGLGeomItem(F);return Q.addGLGeomItem(B),U["glGeomItem.visibilityChanged"]=B.on("visibilityChanged",(F=>{this.resortNeeded()})),this.emit("updated"),B.GLShaderGeomSets=Q,void(this.reSort=!0)}}const V=this.renderer.glGeomLibrary.constructGLGeom(F.getParameter("Geometry").getValue()),d=this.renderer.glGeomItemLibrary.getGLGeomItem(F),R=this.constructShaders(l),t=this.renderer.glMaterialLibrary.getGLMaterial(B),s=()=>{B.removeListenerById("valueChanged",U["material.valueChanged"]),B.removeListenerById("transparencyChanged",U["material.transparencyChanged"]),Q.removeListenerById("valueChanged",U["materialParam.valueChanged"]),this.removeGeomItem(F),this.__renderer.assignTreeItemToGLPass(F)};U["material.valueChanged"]=B.on("valueChanged",s),U["material.transparencyChanged"]=B.on("transparencyChanged",s),U["materialParam.valueChanged"]=Q.on("valueChanged",s);U["glGeomItem.visibilityChanged"]=d.on("visibilityChanged",(F=>{if(F.visible)this.visibleItems.push(i);else{const F=this.visibleItems.indexOf(i);this.visibleItems.splice(F,1)}this.reSort=!0}));U["GeomMat.valueChanged"]=F.getParameter("GeomMat").on("valueChanged",(()=>{this.reSort=!0}));const i={geomItem:F,shaders:R,glGeom:V,glMaterial:t,glGeomItem:d,material:B};let e;e=this.freeList.length>0?this.freeList.pop():this.transparentItems.length,this.transparentItems[e]=i,this.transparentItemIndices[F.getId()]=e,F.isVisible()&&this.visibleItems.push(i),this.reSort=!0}removeGeomItem(F){this.itemCount--;const U=this.listenerIDs[F.getId()];delete this.listenerIDs[F.getId()];const Q=this.renderer.glGeomItemLibrary.getGLGeomItem(F),B=F.getParameter("Material"),l=B.getValue();if(Q.removeListenerById("visibilityChanged",U["glGeomItem.visibilityChanged"]),Q.GLShaderGeomSets){return Q.GLShaderGeomSets.removeGLGeomItem(Q),void(Q.GLShaderGeomSets=null)}{const Q=this.transparentItemIndices[F.getId()],V=this.transparentItems[Q];delete this.transparentItemIndices[F.getId()],l.removeListenerById("valueChanged",U["material.valueChanged"]),l.removeListenerById("transparencyChanged",U["material.transparencyChanged"]),B.removeListenerById("valueChanged",U["materialParam.valueChanged"]),F.getParameter("GeomMat").removeListenerById("valueChanged",U["GeomMat.valueChanged"]),this.transparentItems[Q]=null,this.freeList.push(Q);const d=this.visibleItems.indexOf(V);-1!=d&&this.visibleItems.splice(d,1)}this.emit("updated")}sortItems(F){for(const U in this.__glShaderGeomSets)this.__glShaderGeomSets[U].sortItems(F);for(const U of this.visibleItems){const Q=U.glGeomItem.geomItem.getGeomMat4();U.dist=Q.translation.distanceTo(F)}this.visibleItems.sort(((F,U)=>F.dist>U.dist?-1:F.dist<U.dist?1:0)),this.reSort=!1}_drawItem(F,U,Q){if(Q.currentGLMaterial!=U.glMaterial&&(Q.currentGLMaterial=U.glMaterial,!Q.currentGLMaterial.bind(F)))return;if(Q.currentGLGeom!=U.glGeom&&(Q.currentGLGeom=U.glGeom,!Q.currentGLGeom.bind(F)))return;U.glGeomItem.bind(F)&&F.bindViewports(F.unifs,(()=>{Q.currentGLGeom.draw(F)}))}_drawItems(F){for(const U in this.__glShaderGeomSets)this.__glShaderGeomSets[U].draw(F);const U={currentglShader:null,currentGLMaterial:null,currentGLGeom:null};for(const Q of this.visibleItems){const B=Q.shaders.glShader;if(U.currentglShader!=B){if(!B.bind(F,"color"))continue;const Q=this.__gl,l=F.unifs;l.instancedDraw&&Q.uniform1i(l.instancedDraw.location,0),this.renderer.glGeomItemLibrary.bind(F),U.currentglShader=B}this._drawItem(F,Q,U)}}draw(F){if(0==this.itemCount)return;const U=this.__gl,Q=F.viewXfo.tr;if(this.reSort||Q.distanceTo(this.prevSortCameraPos)>this.sortCameraMovementDistance)if(this.sortItems(Q),this.prevSortCameraPos=Q,F.vrviewport)this.sortCameraMovementDistance=.2*F.viewScale;else if(F.viewport){const U=F.viewport.getCamera();this.sortCameraMovementDistance=.3*U.getFocalDistance()}U.enable(U.DEPTH_TEST),U.depthFunc(U.LESS),U.enable(U.BLEND),U.blendEquation(U.FUNC_ADD),F.pass="ADD",U.blendFunc(U.SRC_ALPHA,U.ONE_MINUS_SRC_ALPHA),U.enable(U.CULL_FACE),U.cullFace(U.BACK),this._drawItems(F),U.disable(U.BLEND),U.depthMask(!0)}drawHighlightedGeoms(F){const U=this.__gl;U.disable(U.CULL_FACE);for(const U in this.__glShaderGeomSets)this.__glShaderGeomSets[U].drawHighlightedGeoms(F);const Q={currentglShader:null,currentGLMaterial:null,currentGLGeom:null};for(const B of this.visibleItems){if(!B.geomItem.isHighlighted())continue;if(!B.shaders.glselectedshader)continue;const l=B.shaders;if(Q.currentglShader!=l.glselectedshader){if(!l.glselectedshader.bind(F,"highlight"))continue;Q.currentglShader=l.glselectedshader}const{floatGeomBuffer:V,passId:d,instancedDraw:R}=F.unifs;V&&U.uniform1i(V.location,U.floatGeomBuffer?1:0),d&&U.uniform1i(d.location,this.passIndex),R&&U.uniform1i(R.location,0),this.renderer.glGeomItemLibrary.bind(F),this._drawItem(F,B,Q)}Q.currentGLGeom&&Q.currentGLGeom.unbind(F)}drawGeomData(F){const U=this.__gl;U.disable(U.BLEND),U.disable(U.CULL_FACE),U.enable(U.DEPTH_TEST),U.depthFunc(U.LESS),U.depthMask(!0);for(const U in this.__glShaderGeomSets)this.__glShaderGeomSets[U].drawGeomData(F);const Q={currentglShader:null,currentGLMaterial:null,currentGLGeom:null};for(const B of this.visibleItems){if(!B.glGeomItem.geomItem.getSelectable())continue;const l=B.shaders;if(!l.glgeomdatashader)continue;if(Q.currentglShader!=l.glgeomdatashader){if(!l.glgeomdatashader.bind(F,"geomdata"))continue;Q.currentglShader=l.glgeomdatashader}const{floatGeomBuffer:V,passId:d,instancedDraw:R}=F.unifs;V&&U.uniform1i(V.location,U.floatGeomBuffer?1:0),d&&U.uniform1i(d.location,this.passIndex),R&&U.uniform1i(R.location,0),this.renderer.glGeomItemLibrary.bind(F),this._drawItem(F,B,Q)}Q.currentGLGeom&&Q.currentGLGeom.unbind(F)}}md.registerPass(fd,eV.TRANSPARENT);class Pd extends mV{constructor(F){super(F),this.setShaderStage("VERTEX_SHADER","\n\nprecision highp float;\n#define GLSLIFY 1\n\nimport 'quadVertexFromID.glsl'\n\nuniform vec2 pos;\nuniform vec2 size;\nuniform vec2 srctextureDim;\nconst int border = 2;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n \nvoid main()\n{\n  vec2 position = getQuadVertexPositionFromID();\n  v_texCoord = position+0.5;\n  gl_Position = vec4(vec2(-1.0, -1.0) + (pos * 2.0) + (v_texCoord * size * 2.0), 0.0, 1.0);\n\n  vec2 borderVec2 = vec2(float(border), float(border));\n  v_texCoord *= (srctextureDim + (borderVec2 * 2.0)) / srctextureDim;\n  v_texCoord -= borderVec2 / srctextureDim;\n}\n\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D srctexture;\nuniform vec2 srctextureDim;\nuniform bool alphaFromLuminance;\nuniform bool invert;\n\n/* VS Outputs */\nvarying vec2 v_texCoord;\n\nfloat luminanceFromRGB(vec3 rgb) {\n  return 0.2126*rgb.r + 0.7152*rgb.g + 0.0722*rgb.b;\n}\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\n\nvoid main(void) {\n  vec2 pixelCoord = v_texCoord*srctextureDim;\n  vec2 uv = v_texCoord;\n\n  // Wrap X coords\n  if (pixelCoord.x < 0.0) {\n    uv.x += 1.0/srctextureDim.x;\n    uv.y = 1.0 - uv.y;\n  }\n  else if (pixelCoord.x > srctextureDim.x) {\n    uv.x -= 1.0/srctextureDim.x;\n    uv.y = 1.0 - uv.y;\n  }\n\n  // Wrap Y coords\n  if (pixelCoord.y < 0.0) {\n    uv.y += 1.0/srctextureDim.y;\n    uv.x = 1.0 - uv.x;\n  }\n  else if (pixelCoord.y > srctextureDim.y) {\n    uv.y -= 1.0/srctextureDim.y;\n    uv.x = 1.0 - uv.x;\n  }\n\n  vec4 texel = texture2D(srctexture, uv);\n\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  // TODO: check why we pre-multiply alphas here.\n  // fragColor = vec4(texel.rgb/texel.a, texel.a);\n\n  if (alphaFromLuminance) {\n    fragColor = vec4(texel.rgb, luminanceFromRGB(texel.rgb));\n  }\n  else {\n    fragColor = texel;\n  }\n  \n  if (invert) {\n    fragColor = vec4(1.0) - fragColor;\n  }\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n\n")}}class jd extends XV{constructor(F,U,Q="RGBA",B="FLOAT"){super(F),this.__name=U,this.__formatParam=Q,this.__typeParam=B,this.clearColor=new UQ(0,0,0,0),this.__subImages=[],this.__layoutNeedsRegeneration=!1,this.__asyncCount=0,this.loaded=!1}incAsyncCount(F=1){this.__asyncCount+=F,this.ready=!1}decAsyncCount(){this.__asyncCount>0&&(this.__asyncCount--,0==this.__asyncCount&&(this.loaded=!0,this.emit("loaded",{})))}isLoaded(){return 0==this.__asyncCount}getMainImage(){return this.super}addSubImage(F){if(F instanceof WB){const U=new bV(this.__gl,F);F.isLoaded()||(this.incAsyncCount(),F.on("loaded",(()=>{this.decAsyncCount()}))),F.setMetadata("ImageAtlas_gltex",U),U.addRef(this);const Q=()=>{this.__layoutNeedsRegeneration=!0,this.renderAtlas()};F.on("updated",Q),this.__subImages.push(U)}else F.addRef(this),this.__subImages.push(F);return this.__layoutNeedsRegeneration=!0,this.__subImages.length-1}removeSubImage(F){let U;if(F instanceof WB){const Q=F.getMetadata("ImageAtlas_gltex");U=this.__subImages.indexOf(Q),F.deleteMetadata("ImageAtlas_gltex")}else U=this.__subImages.indexOf(F);this.__subImages[U].removeRef(this),this.__subImages.splice(U,1),this.__layoutNeedsRegeneration=!0}getSubImage(F){return this.__subImages[F]}numSubImages(){return this.__layout?this.__layout.length:this.__subImages.length}generateAtlasLayout(){if(0==this.__subImages.length)return void(this.__layoutNeedsRegeneration=!1);const F=[];this.__subImages.forEach(((U,Q)=>{F.push({w:U.width+4,h:U.height+4,area:U.width*U.height,index:Q})})),F.sort(((F,U)=>F.area>U.area?-1:F.area<U.area?1:0));const U=new aQ;U.fit(F),this.__layout=[],F.forEach(((F,U)=>{F.fit?this.__layout[F.index]={pos:new OU(F.fit.x+2,F.fit.y+2),size:new OU(F.w,F.h)}:console.warn("Unable to fit image")}));const Q=U.root.w,B=U.root.h;this.configure({width:Q,height:B,format:"FLOAT"==this.__typeParam&&"RGB"==this.__formatParam?"RGBA":this.__formatParam,type:this.__typeParam,filter:"LINEAR"});const l=this.__gl;if(l.__quadVertexIdsBuffer||l.setupInstancedQuad(),!l.__atlasLayoutShader){l.__atlasLayoutShader=new Pd(l);const F=l.__atlasLayoutShader.compileForTarget("GLImageAtlas");l.__atlasLayoutShaderBinding=yV(l,F.attrs,l.__quadattrbuffers,l.__quadIndexBuffer)}let V=Math.round(Math.sqrt(1*this.__layout.length)+.5);if(V=DU.nextPow2(V),V%1!=0&&(V+=1-V%1),l.floatTexturesSupported){const F=new Float32Array(V*V*4);for(let U=0;U<this.__layout.length;U++){const l=this.__layout[U];$U.createFromBuffer(F.buffer,4*U*4).set(l.pos.x/Q,l.pos.y/B,l.size.x/Q,l.size.y/B)}this.__atlasLayoutTexture&&this.__atlasLayoutTexture.width==V&&this.__atlasLayoutTexture.height==V?this.__atlasLayoutTexture.bufferData(F,V,V):(this.__atlasLayoutTexture&&this.__atlasLayoutTexture.destroy(),this.__atlasLayoutTexture=new bV(l,{format:"RGBA",type:"FLOAT",filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1,width:V,height:V,data:F}))}else this.__layoutVec4s=[],this.__layout.forEach(((F,U)=>{this.__layoutVec4s[U]=[F.pos.x/Q,F.pos.y/B,F.size.x/Q,F.size.y/B]}));this.textureDesc[0]=this.width,this.textureDesc[1]=this.height,this.textureDesc[2]=this.__atlasLayoutTexture.width,this.__layoutNeedsRegeneration=!1}getLayoutData(F){return this.__layoutVec4s[F]}renderAtlas(F=!1,U=0){if(0==this.__subImages.length)return;this.__layoutNeedsRegeneration&&this.generateAtlasLayout();const Q=this.__gl,B={};this.bindForWriting(B,!0),Q.__atlasLayoutShader.bind(B,"GLImageAtlas"),Q.__atlasLayoutShaderBinding.bind(B);const l=new OU(1/this.width,1/this.height),V=B.unifs;for(let F=U;F<this.__subImages.length;F++){const U=this.__subImages[F],d=this.__layout[F];U.bindToUniform(B,V.srctexture)&&(Q.uniform2fv(V.pos.location,d.pos.multiply(l).asArray()),Q.uniform2fv(V.size.location,d.size.multiply(l).asArray()),Q.uniform2f(V.srctextureDim.location,U.width,U.height),Q.uniform1i(V.alphaFromLuminance.location,U.alphaFromLuminance),Q.uniform1i(V.invert.location,U.invert),Q.drawQuad(),B.boundTextures--)}F&&this.cleanup(),this.unbind(B),this.emit("updated",{})}isReady(){return null!=this.__atlasLayoutTexture}bindToUniform(F,U){super.bindToUniform(F,U);const Q=F.unifs;if(this.__atlasLayoutTexture){const B=Q[U.name+"_layout"];B&&this.__atlasLayoutTexture.bindToUniform(F,B);const l=Q[U.name+"_desc"];l&&this.__gl.uniform4fv(l.location,this.textureDesc)}else{const F=Q[U.name+"_desc"];F&&this.__gl.uniform4f(F.location,this.width,this.height,0,0)}return!0}cleanup(){for(const F of this.__subImages)F.removeRef(this);this.__subImages=[],this.destroy()}destroy(){this.cleanup(),super.destroy()}}class _d extends IV{constructor(){super()}init(F,U){super.init(F,U),this.billboards=[],this.dirtyBillboards=new Set,this.freeIndices=[],this.drawCount=0,this.threshold=0,this.updateRequested=!1,this.prevSortCameraPos=new qU,this.atlas=new jd(this.renderer.gl,"Billboards","RGBA","UNSIGNED_BYTE",[1,1,1,0]);const Q=F=>this.emit("updated",F);this.atlas.on("loaded",Q),this.atlas.on("updated",Q)}getPassType(){return eV.TRANSPARENT}itemAddedToScene(F,U){return F instanceof wl&&(this.addBillboard(F),!0)}itemRemovedFromScene(F,U){return F instanceof wl&&(this.removeBillboard(F),!0)}filterRenderTree(){}addBillboard(F){const U=F.getParameter("Image"),Q=U.getValue();if(!Q)return void U.on("valueChanged",(()=>this.addBillboard(F)));let B;B=this.freeIndices.length>0?this.freeIndices.pop():this.billboards.length;const l=this.atlas.addSubImage(Q);F.setMetadata("GLBillboardsPass_Index",B);const V=()=>{F.isVisible()?(this.drawCount++,this.dirtyBillboards.add(B)):this.drawCount--,this.reqUpdateIndexArray()};F.on("visibilityChanged",V);const d=()=>{F.isVisible()&&(this.dirtyBillboards.add(B),this.emit("updated",{}))};F.getParameter("GlobalXfo").on("valueChanged",d),F.getParameter("Alpha").on("valueChanged",d),F.on("highlightChanged",d),F.isVisible()&&this.drawCount++,this.billboards[B]={billboard:F,imageIndex:l,visibilityChanged:V,updateBillboard:d},this.indexArrayUpdateNeeded=!0,this.requestUpdate()}removeBillboard(F){const U=F.getMetadata("GLBillboardsPass_Index");if(-1==U)return void console.warn("Billboard already removed.");const Q=this.billboards[U],B=Q.billboard.getParameter("Image").getValue();this.atlas.removeSubImage(B),F.off("visibilityChanged",Q.visibilityChanged),F.off("highlightChanged",Q.updateBillboard),F.getParameter("GlobalXfo").off("valueChanged",Q.updateBillboard),F.getParameter("Alpha").off("valueChanged",Q.updateBillboard),this.billboards[U]=null,this.freeIndices.push(U),F.isVisible()&&this.drawCount--,this.indexArrayUpdateNeeded=!0,this.requestUpdate()}populateBillboardDataArray(F,U,Q){const B=F.billboard,l=B.getParameter("GlobalXfo").getValue().toMat4(),V=B.getParameter("PixelsPerMeter").getValue(),d=B.getParameter("Pivot").getValue(),R=1/V;let t=0;B.getParameter("AlignedToCamera").getValue()&&(t|=4),B.getParameter("DrawOnTop").getValue()&&(t|=8),B.getParameter("FixedSizeOnscreen").getValue()&&(t|=16);const s=B.getParameter("Alpha").getValue(),i=B.getParameter("Color").getValue(),e=7*U*4,I=$U.createFromBuffer(Q.buffer,4*e),Z=$U.createFromBuffer(Q.buffer,4*(e+4)),c=$U.createFromBuffer(Q.buffer,4*(e+8)),n=$U.createFromBuffer(Q.buffer,4*(e+12));I.set(l.xAxis.x,l.yAxis.x,l.zAxis.x,l.translation.x),Z.set(l.xAxis.y,l.yAxis.y,l.zAxis.y,l.translation.y),c.set(l.xAxis.z,l.yAxis.z,l.zAxis.z,l.translation.z),n.set(R,t,F.imageIndex,s);$U.createFromBuffer(Q.buffer,4*(e+16)).set(d.x,d.y,0,0);if($U.createFromBuffer(Q.buffer,4*(e+20)).set(i.r,i.g,i.b,i.a),B.isHighlighted()){const F=B.getHighlight();$U.createFromBuffer(Q.buffer,4*(e+24)).set(F.r,F.g,F.b,F.a)}}requestUpdate(){this.updateRequested||(this.updateRequested=!0,this.emit("updated"))}reqUpdateIndexArray(){this.indexArrayUpdateNeeded||(this.indexArrayUpdateNeeded=!0,this.emit("updated"))}updateIndexArray(){const F=this.__gl;this.indexArray&&this.indexArray.length!=this.drawCount&&(F.deleteBuffer(this.instanceIdsBuffer),this.instanceIdsBuffer=null),this.indexArray=new Float32Array(this.drawCount);let U=0;for(let F=0;F<this.billboards.length;F++)this.billboards[F]&&this.billboards[F].billboard.isVisible()&&(this.indexArray[U]=F,U++);this.instanceIdsBuffer||(this.instanceIdsBuffer=F.createBuffer()),F.bindBuffer(F.ARRAY_BUFFER,this.instanceIdsBuffer),F.bufferData(F.ARRAY_BUFFER,this.indexArray,F.STATIC_DRAW),this.indexArrayUpdateNeeded=!1}updateBillboards(F){const U=()=>{this.indexArrayUpdateNeeded&&this.updateIndexArray();const U=this.__gl;if(!this.glshader){U.__quadVertexIdsBuffer||U.setupInstancedQuad(),this.glshader=new Jd(U);const Q=this.glshader.compileForTarget("GLBillboardsPass",F.shaderopts);this.shaderBinding=yV(U,Q.attrs,U.__quadattrbuffers,U.__quadIndexBuffer)}if(this.atlas.renderAtlas(),!U.floatTexturesSupported||!U.drawElementsInstanced)return this.modelMatrixArray=[],this.billboardDataArray=[],this.tintColorArray=[],this.indexArray.forEach((F=>{const U=this.billboards[F],Q=U.billboard,B=Q.getParameter("GlobalXfo").getValue().toMat4(),l=1/Q.getParameter("PixelsPerMeter").getValue();let V=0;Q.getParameter("AlignedToCamera").getValue()&&(V|=4),Q.getParameter("DrawOnTop").getValue()&&(V|=8),Q.getParameter("FixedSizeOnscreen").getValue()&&(V|=16);const d=Q.getParameter("Alpha").getValue(),R=Q.getParameter("Color").getValue();this.modelMatrixArray[F]=B.asArray(),this.billboardDataArray[F]=[l,V,U.imageIndex,d],this.tintColorArray[F]=[R.r,R.g,R.b,R.a]})),void(this.updateRequested=!1);let Q=Math.round(Math.sqrt(7*(this.billboards.length-this.freeIndices.length))+.5);Q%7!=0&&(Q+=7-Q%7),this.width=Q,this.drawItemsTexture?this.drawItemsTexture.resize(Q,Q):(this.drawItemsTexture=new bV(U,{format:"RGBA",type:"FLOAT",width:Q,height:Q,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.drawItemsTexture.clear()),this.indexArray.forEach((F=>{-1!=F&&this.updateBillboard(F)})),this.updateRequested=!1};this.atlas.isLoaded()?U():this.atlas.on("loaded",U)}updateBillboard(F){if(0==this.drawCount||!this.drawItemsTexture)return;const U=this.billboards[F];if(!U.billboard.isVisible())return;const Q=this.__gl,B=new Float32Array(28);this.populateBillboardDataArray(U,0,B),Q.bindTexture(Q.TEXTURE_2D,this.drawItemsTexture.glTex);const l=7*F%this.width,V=Math.floor(7*F/this.width),d=this.drawItemsTexture.getType(),R=this.drawItemsTexture.getFormat();if(d==Q.FLOAT)Q.texSubImage2D(Q.TEXTURE_2D,0,l,V,7,1,R,d,B);else{const F=DU.convertFloat32ArrayToUInt16Array(B);Q.texSubImage2D(Q.TEXTURE_2D,0,l,V,7,1,R,d,F)}}sort(F){for(const U of this.billboards){const{billboard:Q}=U;if(Q&&Q.isVisible()){const B=Q.getParameter("GlobalXfo").getValue();U.dist=B.tr.distanceTo(F)}}this.indexArray.sort(((F,U)=>-1==F?1:-1==U||this.billboards[F].dist>this.billboards[U].dist?-1:this.billboards[F].dist<this.billboards[U].dist?1:0));const U=this.__gl;U.floatTexturesSupported&&this.instanceIdsBuffer&&(U.bindBuffer(U.ARRAY_BUFFER,this.instanceIdsBuffer),U.bufferData(U.ARRAY_BUFFER,this.indexArray,U.STATIC_DRAW))}__draw(F,U){const Q=this.__gl;if(!this.glshader)return;this.glshader.bind(F,U),this.shaderBinding.bind(F);const B=F.unifs,{atlasBillboards:l,passId:V,floatGeomBuffer:d,inVR:R}=F.unifs;if(l&&this.atlas.bindToUniform(F,B.atlasBillboards),d&&Q.uniform1i(d.location,F.floatGeomBuffer?1:0),V&&Q.uniform1i(V.location,this.passIndex),R&&Q.uniform1i(R.location,R),Q.floatTexturesSupported&&Q.drawElementsInstanced){const{instancesTexture:U,instancesTextureSize:l}=F.unifs;this.drawItemsTexture.bindToUniform(F,U),Q.uniform1i(l.location,this.width);{const U=F.attrs.instanceIds.location;Q.enableVertexAttribArray(U),Q.bindBuffer(Q.ARRAY_BUFFER,this.instanceIdsBuffer),Q.vertexAttribPointer(U,1,Q.FLOAT,!1,4,0),Q.vertexAttribDivisor(U,1)}F.bindViewports(B,(()=>{Q.drawElementsInstanced(Q.TRIANGLES,6,Q.UNSIGNED_SHORT,0,this.drawCount)}))}else{const{modelMatrix:U,billboardData:l,tintColor:V,layoutData:d}=F.unifs,R=this.indexArray.length;for(let t=0;t<R;t++)Q.uniformMatrix4fv(U.location,!1,this.modelMatrixArray[t]),Q.uniform4fv(l.location,this.billboardDataArray[t]),Q.uniform4fv(V.location,this.tintColorArray[t]),Q.uniform4fv(d.location,this.atlas.getLayoutData(this.billboards[t].imageIndex)),F.bindViewports(B,(()=>{Q.drawQuad()}))}}draw(F){if(0==this.drawCount)return;this.updateRequested&&this.updateBillboards(F),this.dirtyBillboards.size>0&&(this.dirtyBillboards.forEach((F=>{this.updateBillboard(F)})),this.dirtyBillboards.clear()),this.indexArrayUpdateNeeded&&this.updateIndexArray();const U=F.viewXfo.tr;if(U.distanceTo(this.prevSortCameraPos)>this.threshold)if(this.sort(U),this.prevSortCameraPos=U.clone(),this.drawCount>1){const F=this.billboards[this.indexArray[this.indexArray.length-1]].billboard.getParameter("GlobalXfo").getValue().tr,U=this.billboards[this.indexArray[this.indexArray.length-2]].billboard.getParameter("GlobalXfo").getValue().tr;this.threshold=F.distanceTo(U)}else this.threshold=9999;const Q=this.__gl;Q.depthMask(!1),Q.disable(Q.CULL_FACE),Q.enable(Q.BLEND),Q.blendEquation(Q.FUNC_ADD),Q.blendFunc(Q.SRC_ALPHA,Q.ONE_MINUS_SRC_ALPHA),this.__draw(F,"DRAW_COLOR"),Q.disable(Q.BLEND),Q.depthMask(!0)}drawHighlightedGeoms(F){0!=this.drawCount&&this.__draw(F,"DRAW_HIGHLIGHT")}drawGeomData(F){0!=this.drawCount&&this.__draw(F,"DRAW_GEOMDATA")}getGeomItem(F){if(!(F>=this.billboards.length))return this.billboards[F].billboard;console.warn("Invalid Draw Item id:"+F+" NumBillboards:"+(this.billboards.length-1))}getGeomItemAndDist(F){let U,Q;if(F instanceof Float32Array?(U=Math.round(F[1]),Q=F[3]):(U=F[0]+((63&F[1])<<8),Q=DU.decode16BitFloatFrom2xUInt8([F[2],F[3]])),!(U>=this.billboards.length))return{geomItem:this.billboards[U].billboard,dist:Q};console.warn("Invalid Draw Item id:"+U+" NumBillboards:"+(this.billboards.length-1))}}md.registerPass(_d,eV.TRANSPARENT);class Od extends Dd{constructor(){super()}getPassType(){return eV.OVERLAY}filterGeomItem(F){if(F.isOverlay())return!0;const U=F.getParameter("Material").getValue().getShaderClass();return!(!U||!U.isOverlay())}draw(F){const U=this.__gl;U.clear(U.DEPTH_BUFFER_BIT),U.enable(U.CULL_FACE),U.cullFace(U.BACK),U.enable(U.BLEND),U.blendEquation(U.FUNC_ADD),F.pass="ADD",U.blendFunc(U.SRC_ALPHA,U.ONE_MINUS_SRC_ALPHA),this.__traverseTreeAndDraw(F),U.disable(U.BLEND)}drawGeomData(F){const U=this.__gl;U.clear(U.DEPTH_BUFFER_BIT),U.enable(U.CULL_FACE),U.cullFace(U.BACK),U.enable(U.BLEND),U.blendEquation(U.FUNC_ADD),F.pass="ADD",U.blendFunc(U.SRC_ALPHA,U.ONE_MINUS_SRC_ALPHA),super.drawGeomData(F),U.disable(U.BLEND),U.enable(U.DEPTH_TEST)}}md.registerPass(Od,eV.OVERLAY);class qd extends mV{constructor(F){super(F),this.setShaderStage("VERTEX_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec4 positions;\ninstancedattribute float instanceIds;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 cameraMatrix;\n\nimport 'GLSLUtils.glsl'\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\nimport 'transpose.glsl'\n\nuniform sampler2D instancesTexture;\nuniform int instancesTextureSize;\n\nconst int cols_per_instance = 6;\n\nmat4 getMatrix(sampler2D texture, int textureSize, int index) {\n  // Unpack 3 x 4 matix columns into a 4 x 4 matrix.\n  vec4 col0 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 0);\n  vec4 col1 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 1);\n  vec4 col2 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 2);\n  mat4 result = mat4(col0, col1, col2, vec4(0.0, 0.0, 0.0, 1.0));\n  return transpose(result);\n  // return mat4(1.0);\n}\n\nmat4 getModelMatrix(int id) {\n  return getMatrix(instancesTexture, instancesTextureSize, id);\n}\nvec4 getInstanceData(int id, int row) {\n  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + row);\n}\n\n#else\n\nuniform mat4 modelMatrix;\nuniform vec4 row3;\nuniform vec4 row4;\nuniform vec4 row5;\n\n#endif\n\n/* VS Outputs */\nvarying vec4 v_color;\n\nvoid main(void) {\n\n#ifdef ENABLE_FLOAT_TEXTURES\n\n  int instanceID = int(instanceIds);\n\n  mat4 modelMatrix = getModelMatrix(instanceID);\n  vec4 row3 = getInstanceData(instanceID, 3);\n  vec4 row4 = getInstanceData(instanceID, 4);\n  vec4 row5 = getInstanceData(instanceID, 5);\n\n#else\n\n#endif\n\n  v_color = row5;\n\n  vec4 pos = positions;\n  if (pos.x < 0.0) pos.x = row3.x;\n  else if (pos.x > 0.0) pos.x = row4.x;\n  if (pos.y < 0.0) pos.y = row3.y;\n  else if (pos.y > 0.0) pos.y = row4.y;\n  if (pos.z < 0.0) pos.z = row3.z;\n  else if (pos.z > 0.0) pos.z = row4.z;\n\n  // Use cross platform bit flags methods\n  bool drawOnTop = false;//testFlag(flags, 8); // flag = 1 << 3\n\n  mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix;// * modelMatrix;\n  gl_Position = modelViewProjectionMatrix * pos;\n\n  // Use cross platform bit flags methods\n  if (drawOnTop) {\n    gl_Position.z = mix(gl_Position.z, -gl_Position.w, 0.5);\n  }\n}\n"),this.setShaderStage("FRAGMENT_SHADER","\nprecision highp float;\n#define GLSLIFY 1\n\n/* VS Outputs */\nvarying vec4 v_color;\n\n#ifdef ENABLE_ES3\n  out vec4 fragColor;\n#endif\nvoid main(void) {\n#ifndef ENABLE_ES3\n  vec4 fragColor;\n#endif\n\n  fragColor = v_color;\n\n#ifndef ENABLE_ES3\n  gl_FragColor = fragColor;\n#endif\n}\n")}}class $d extends IV{constructor(){super(),this.boxes=[],this.dirtyBoxes=new Set,this.freeIndices=[],this.drawCount=0,this.indexArrayUpdateNeeded=!1,this.__updateRequested=!1}getPassType(){return eV.OPAQUE}init(F,U){super.init(F,U);const Q=this.__renderer.gl;this.glgeom=new Vd(Q,new wB(1,1,1)),this.glshader=new qd(Q)}itemAddedToScene(F,U){return!1}itemRemovedFromScene(F,U){return!1}addTreeItem(F,U=!0){if(F instanceof dB&&(this.bindTreeItem(F),U)){for(const U of F.getChildren())U&&this.addTreeItem(U);F.on("childAdded",(F=>{this.addTreeItem(F.childItem)})),F.on("childRemoved",(F=>{this.unbindTreeItem(F.childItem)}))}}bindTreeItem(F){let U;U=this.freeIndices.length>0?this.freeIndices.pop():this.boxes.length,F.setMetadata("GLBoundingBoxPass_Index",U);const Q=()=>{F.isVisible()?(this.drawCount++,this.dirtyBoxes.add(U)):this.drawCount--,this.indexArrayUpdateNeeded=!0};F.on("visibilityChanged",Q);const B=()=>{F.isVisible()&&(this.dirtyBoxes.add(U),this.emit("updated",{}))};F.getParameter("GlobalXfo").on("valueChanged",B),F.getParameter("BoundingBox").on("valueChanged",B),F.isVisible()&&this.drawCount++,this.boxes[U]={treeitem:F,visibilityChanged:Q,xfoChanged:B},this.indexArrayUpdateNeeded=!0,this.__updateRequested=!0,this.emit("updated")}unbindTreeItem(F){const U=F.getMetadata("GLBoundingBoxPass_Index");if(-1==U)return void console.warn("Billboard already removed.");const Q=this.boxes[U];F.off("visibilityChanged",Q.visibilityChanged),F.getParameter("GlobalXfo").off("valueChanged",Q.xfoChanged),F.getParameter("BoundingBox").off("valueChanged",Q.xfoChanged),this.boxes[U]=null,this.freeIndices.push(U),F.isVisible()&&this.drawCount--,this.indexArrayUpdateNeeded=!0,this.__updateRequested=!0,this.__updateBoxes(),this.emit("updated")}__populateBoxesDataArray(F,U,Q){const B=F.treeitem,l=B.getParameter("GlobalXfo"),V=B.getParameter("GeomMat"),d=V?new UQ(1,0,0,1):new UQ(0,0,1,1),R=V?V.getValue():l.getValue().toMat4(),t=B.getParameter("BoundingBox").getValue(),s=6*U*4,i=$U.createFromBuffer(Q.buffer,4*s),e=$U.createFromBuffer(Q.buffer,4*(s+4)),I=$U.createFromBuffer(Q.buffer,4*(s+8)),Z=$U.createFromBuffer(Q.buffer,4*(s+12)),c=$U.createFromBuffer(Q.buffer,4*(s+16)),n=$U.createFromBuffer(Q.buffer,4*(s+20));i.set(R.xAxis.x,R.yAxis.x,R.zAxis.x,R.translation.x),e.set(R.xAxis.y,R.yAxis.y,R.zAxis.y,R.translation.y),I.set(R.xAxis.z,R.yAxis.z,R.zAxis.z,R.translation.z),Z.set(t.p0.x,t.p0.y,t.p0.z,0),c.set(t.p1.x,t.p1.y,t.p1.z,0),n.set(d.r,d.g,d.b,d.a)}__updateIndexArray(){const F=this.__gl;this.__indexArray&&this.__indexArray.length!=this.drawCount&&(F.deleteBuffer(this.__instanceIdsBuffer),this.__instanceIdsBuffer=null),this.__indexArray=new Float32Array(this.drawCount);let U=0;for(let F=0;F<this.boxes.length;F++)this.boxes[F]&&this.boxes[F].treeitem.isVisible()&&(this.__indexArray[U]=F,U++);this.__instanceIdsBuffer||(this.__instanceIdsBuffer=F.createBuffer()),F.bindBuffer(F.ARRAY_BUFFER,this.__instanceIdsBuffer),F.bufferData(F.ARRAY_BUFFER,this.__indexArray,F.STATIC_DRAW),this.indexArrayUpdateNeeded=!1}__updateBoxes(){this.indexArrayUpdateNeeded&&this.__updateIndexArray();const F=this.__renderer.gl;if(!F.floatTexturesSupported||!F.drawElementsInstanced)return this.__modelMatrixArray=[],this.__treeitemDataArray=[],this.__tintColorArray=[],this.__indexArray.forEach((F=>{const U=this.boxes[F],Q=U.treeitem,B=Q.getParameter("GlobalXfo").getValue().toMat4(),l=1/Q.getParameter("PixelsPerMeter").getValue();let V=0;Q.getParameter("AlignedToCamera").getValue()&&(V|=4),Q.getParameter("DrawOnTop").getValue()&&(V|=8),Q.getParameter("FixedSizeOnscreen").getValue()&&(V|=16);const d=Q.getParameter("Alpha").getValue(),R=Q.getParameter("Color").getValue();this.__modelMatrixArray[F]=B.asArray(),this.__treeitemDataArray[F]=[l,V,U.imageIndex,d],this.__tintColorArray[F]=[R.r,R.g,R.b,R.a]})),void(this.__updateRequested=!1);let U=Math.round(Math.sqrt(6*(this.boxes.length-this.freeIndices.length))+.5);U%6!=0&&(U+=6-U%6),this.__width=U,this.__drawItemsTexture?this.__drawItemsTexture.resize(U,U):(this.__drawItemsTexture=new bV(F,{format:"RGBA",type:"FLOAT",width:U,height:U,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.__drawItemsTexture.clear()),this.__indexArray.forEach((F=>{-1!=F&&this.__updateBox(F)})),this.__updateRequested=!1}__updateBox(F){if(0==this.drawCount||!this.__drawItemsTexture)return;const U=this.boxes[F];if(!U.treeitem.isVisible())return;const Q=this.__gl,B=new Float32Array(24);this.__populateBoxesDataArray(U,0,B),Q.bindTexture(Q.TEXTURE_2D,this.__drawItemsTexture.glTex);const l=6*F%this.__width,V=Math.floor(6*F/this.__width),d=this.__drawItemsTexture.getType(),R=this.__drawItemsTexture.getFormat();if(d==Q.FLOAT)Q.texSubImage2D(Q.TEXTURE_2D,0,l,V,6,1,R,d,B);else{const F=DU.convertFloat32ArrayToUInt16Array(B);Q.texSubImage2D(Q.TEXTURE_2D,0,l,V,6,1,R,d,F)}}draw(F){if(0==this.drawCount)return;this.__updateRequested&&this.__updateBoxes(),this.dirtyBoxes.size>0&&(this.dirtyBoxes.forEach((F=>{this.__updateBox(F)})),this.dirtyBoxes.clear()),this.indexArrayUpdateNeeded&&this.__updateIndexArray();const U=this.__gl;this.glshader.bind(F),this.glgeom.bind(F);const Q=F.unifs;if(U.floatTexturesSupported&&U.drawElementsInstanced){this.__drawItemsTexture.bindToUniform(F,Q.instancesTexture),U.uniform1i(Q.instancesTextureSize.location,this.__width);{const Q=F.attrs.instanceIds.location;U.enableVertexAttribArray(Q),U.bindBuffer(U.ARRAY_BUFFER,this.__instanceIdsBuffer),U.vertexAttribPointer(Q,1,U.FLOAT,!1,4,0),U.vertexAttribDivisor(Q,1)}F.bindViewports(Q,(()=>{this.glgeom.drawInstanced(F,this.drawCount)}))}else{const B=this.__indexArray.length;for(let l=0;l<B;l++)F.bindViewports(Q,(()=>{U.drawQuad()}))}}}var FR=Object.freeze({__proto__:null,create3DContext:SV,GLTexture2D:bV,GLShader:mV,GLFbo:JV,GLRenderTarget:XV,GLRenderer:md,GLBaseViewport:DV,FRAMEBUFFER:zV,GLViewport:KV,shaderLibrary:hV,GLGeom:AV,GLPoints:ld,GLLines:Vd,GLMesh:vV,GLGeomItemChangeType:dd,GLGeomItemFlags:Rd,GLGeomItem:td,GLGeomItemSet:sd,GLMaterial:Qd,GLMaterialGeomItemSets:id,GLShaderMaterials:ed,generateShaderGeomBinding:yV,genDataTypeDesc:LV,BillboardShader:Jd,EnvMapShader:YV,EnvProjectionShader:Xd,OctahedralEnvProjectionShader:Ed,LatLongEnvProjectionShader:Ld,FatLinesShader:xd,FlatSurfaceShader:od,LinesShader:yd,NormalsShader:ud,PointsShader:Nd,FatPointsShader:rd,ScreenQuadShader:HV,SimpleSurfaceShader:pd,StandardSurfaceShader:Td,ScreenSpaceShader:Yd,UnpackHDRShader:EV,GLPass:IV,PassType:eV,GLStandardGeomsPass:kd,GLOpaqueGeomsPass:Dd,GLLinesPass:wd,GLTransparentGeomsPass:fd,GLBillboardsPass:_d,GLOverlayPass:Od,GLBoundingBoxPass:$d,VRViewport:jV});const UR=new class{constructor(F){this.version=F,this.registry={}}registerLib(F){const U=F.name,Q=F.version,B=F.dependencies["@zeainc/zea-engine"],l=this.version.split("-")[0];if(vU.satisfies(l,B))return this.registry[U]=Q,void k("Registered lib '%s' v%s",U,Q);throw new Error(`The library '${U}' is not compatible with this version of the Zea Engine (${this.version}). It expects version '${B}'.`)}listLibs(){return this.registry}}(U.version),QR={libsRegistry:UR,SystemDesc:zU,Registry:PU,...ZQ,...GQ,...aV,...FR};k("Zea Engine version %s",U.version),globalThis.zeaEngine=QR,F.Allocator1D=gQ,F.AssetItem=Kl,F.AssetLoadContext=Nl,F.AttrValue=_U,F.Attribute=xB,F.BaseGeom=yB,F.BaseGeomItem=xl,F.BaseGroup=rl,F.BaseImage=WB,F.BaseItem=XQ,F.BaseProxy=pB,F.BaseTool=iV,F.BillboardItem=wl,F.BillboardShader=Jd,F.BinReader=mQ,F.BinWriter=CB,F.BooleanParameter=YQ,F.Box2=tQ,F.Box3=iQ,F.Camera=fl,F.CameraManipulator=cV,F.Circle=DB,F.CodeParameter=jQ,F.Color=UQ,F.ColorParameter=AQ,F.Cone=PB,F.Cross=KB,F.Cuboid=jB,F.CuttingPlane=QV,F.Cylinder=_B,F.DataImage=Ul,F.Disc=OB,F.EnvMap=ml,F.EnvMapShader=YV,F.EnvProjectionShader=Xd,F.EulerAngles=QQ,F.EventEmitter=nQ,F.FRAMEBUFFER=zV,F.FatLinesShader=xd,F.FatPointsShader=rd,F.FileImage=Bl,F.FileImage2D=ll,F.FilePathParameter=hB,F.FlatSurfaceShader=od,F.Float32=6,F.Frustum=IQ,F.GIFImage=hl,F.GLBaseViewport=DV,F.GLBillboardsPass=_d,F.GLBoundingBoxPass=$d,F.GLFbo=JV,F.GLGeom=AV,F.GLGeomItem=td,F.GLGeomItemChangeType=dd,F.GLGeomItemFlags=Rd,F.GLGeomItemSet=sd,F.GLLines=Vd,F.GLLinesPass=wd,F.GLMaterial=Qd,F.GLMaterialGeomItemSets=id,F.GLMesh=vV,F.GLOpaqueGeomsPass=Dd,F.GLOverlayPass=Od,F.GLPass=IV,F.GLPoints=ld,F.GLRenderTarget=XV,F.GLRenderer=md,F.GLShader=mV,F.GLShaderMaterials=ed,F.GLStandardGeomsPass=kd,F.GLTexture2D=bV,F.GLTransparentGeomsPass=fd,F.GLViewport=KV,F.GeomItem=ul,F.GeomLibrary=vl,F.GeometryParameter=FB,F.Grid=fB,F.GridTreeItem=lV,F.Group=Ol,F.GrowingPacker=aQ,F.ImageParameter=wQ,F.InstanceItem=Ll,F.ItemSetParameter=$Q,F.KinematicGroup=$l,F.LDRImage=Vl,F.LDRVideo=dl,F.Label=Xl,F.LatLongEnvProjectionShader=Ld,F.Lines=NB,F.LinesCuboid=wB,F.LinesProxy=YB,F.LinesShader=yd,F.ListParameter=_Q,F.Mat3=BQ,F.Mat3Parameter=zQ,F.Mat4=lQ,F.Mat4Parameter=DQ,F.Material=EB,F.MaterialColorParam=JB,F.MaterialFloatParam=mB,F.MaterialGroup=FV,F.MaterialLibrary=zl,F.MaterialParameter=LB,F.MathFunctions=DU,F.Mesh=rB,F.MeshProxy=kB,F.MultiChoiceParameter=TQ,F.NormalsShader=ud,F.NumberParameter=pQ,F.ObjAsset=tV,F.OctahedralEnvProjectionShader=Ed,F.Operator=BB,F.OperatorInput=UB,F.OperatorOutput=QB,F.OperatorOutputMode=NQ,F.POINTER_TYPES=bQ,F.Parameter=rQ,F.ParameterOwner=WQ,F.PassType=eV,F.Plane=qB,F.PlaneType=eQ,F.PointGrid=vB,F.Points=uB,F.PointsProxy=TB,F.PointsShader=Nd,F.ProceduralLines=MB,F.ProceduralMesh=AB,F.ProceduralPoints=HB,F.Quat=VQ,F.QuatParameter=vQ,F.RGBA=FQ,F.Ray=dQ,F.Rect=zB,F.RefCounted=hQ,F.Registry=PU,F.RouterOperator=sV,F.SInt16=3,F.SInt32=5,F.SInt8=1,F.Scene=dV,F.ScreenQuadShader=HV,F.ScreenSpaceShader=Yd,F.SelectionSet=pl,F.SimpleSurfaceShader=pd,F.Sphere=$B,F.SphereType=sQ,F.StandardSurfaceShader=Td,F.StringFunctions=jU,F.StringListParameter=fQ,F.StringParameter=PQ,F.StructParameter=OQ,F.SystemDesc=zU,F.Torus=Fl,F.TreeItem=dB,F.TreeItemParameter=qQ,F.UInt16=2,F.UInt32=4,F.UInt8=0,F.UnpackHDRShader=EV,F.VLAAsset=RV,F.VRViewport=jV,F.Vec2=OU,F.Vec2Parameter=kQ,F.Vec3=qU,F.Vec3Parameter=HQ,F.Vec4=$U,F.Vec4Parameter=MQ,F.Version=GB,F.VertexAttribute=oB,F.VideoStreamImage2D=El,F.Xfo=RQ,F.XfoParameter=KQ,F.ZeaEngine=QR,F.create3DContext=SV,F.genDataTypeDesc=LV,F.generateShaderGeomBinding=yV,F.getFileFolder=EQ,F.labelManager=Jl,F.libsRegistry=UR,F.loadBinfile=uQ,F.loadJSONfile=oQ,F.loadTextfile=xQ,F.loadXMLfile=yQ,F.packageJson=U,F.resourceLoader=nB,F.sgFactory=nV,F.shaderLibrary=hV,Object.defineProperty(F,"__esModule",{value:!0})}));
//# sourceMappingURL=index.umd.js.map
